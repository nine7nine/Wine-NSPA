diff --git a/patches/ntdll-freebsd-compile/0001-ntdll-Include-signal.h-for-sigset_t.patch b/patches/ntdll-freebsd-compile/0001-ntdll-Include-signal.h-for-sigset_t.patch
new file mode 100644
index 000000000..1c747b8c2
--- /dev/null
+++ b/patches/ntdll-freebsd-compile/0001-ntdll-Include-signal.h-for-sigset_t.patch
@@ -0,0 +1,42 @@
+From 7e213371499499eac50f59e99ef42ec0e7b61da1 Mon Sep 17 00:00:00 2001
+From: Gerald Pfeifer <gerald@pfeifer.com>
+Date: Sat, 18 Jul 2020 12:02:58 +0300
+Subject: [PATCH] ntdll: Include <signal.h> for sigset_t
+
+commit 7053b7c615b44e7112ab8fb4c056206d32b6f1c9
+Author: Alexandre Julliard <julliard@winehq.org>
+Date:   Fri Jul 17 11:46:15 2020 +0200
+
+    ntdll: Move the registry system calls to the Unix library.
+
+    Signed-off-by: Alexandre Julliard <julliard@winehq.org>
+
+broke non-Linux platforms since sigset_t isn't necessarily defined
+based on the #include statements in the new dlls/ntdll/unix/registry.c.
+
+This fixes it.
+
+Observed and tested on FreeBSD 11.4/i386.
+
+Gerald
+
+Signed-off-by: Gerald Pfeifer <gerald@pfeifer.com>
+---
+ dlls/ntdll/unix/registry.c | 1 +
+ 1 file changed, 1 insertion(+)
+
+diff --git a/dlls/ntdll/unix/registry.c b/dlls/ntdll/unix/registry.c
+index f94c8ff98ee..6d583618180 100644
+--- a/dlls/ntdll/unix/registry.c
++++ b/dlls/ntdll/unix/registry.c
+@@ -25,6 +25,7 @@
+ #pragma makedep unix
+ #endif
+ 
++#include <signal.h>
+ #include <stdarg.h>
+ #include <string.h>
+ 
+-- 
+2.27.0
+
diff --git a/patches/ntdll-freebsd-compile/definition b/patches/ntdll-freebsd-compile/definition
new file mode 100644
index 000000000..237170e72
--- /dev/null
+++ b/patches/ntdll-freebsd-compile/definition
@@ -0,0 +1,2 @@
+# From Mailing list
+Fixes: Fixes compile on FreeBSD
diff --git a/patches/patchinstall.sh b/patches/patchinstall.sh
index 6d87e75d2..a360c4d7f 100755
--- a/patches/patchinstall.sh
+++ b/patches/patchinstall.sh
@@ -199,6 +199,7 @@ patch_enable_all ()
 	enable_ntdll_Zero_mod_name="$1"
 	enable_ntdll_aarch_TEB="$1"
 	enable_ntdll_ext4_case_folder="$1"
+	enable_ntdll_freebsd_compile="$1"
 	enable_ntdll_set_full_cpu_context="$1"
 	enable_ntdll_x86_64_SegDs="$1"
 	enable_ntoskrnl_Stubs="$1"
@@ -688,6 +689,9 @@ patch_enable ()
 		ntdll-ext4-case-folder)
 			enable_ntdll_ext4_case_folder="$2"
 			;;
+		ntdll-freebsd-compile)
+			enable_ntdll_freebsd_compile="$2"
+			;;
 		ntdll-set_full_cpu_context)
 			enable_ntdll_set_full_cpu_context="$2"
 			;;
@@ -4079,6 +4083,18 @@ if test "$enable_ntdll_ext4_case_folder" -eq 1; then
 	) >> "$patchlist"
 fi
 
+# Patchset ntdll-freebsd-compile
+# |
+# | Modified files:
+# |   *	dlls/ntdll/unix/registry.c
+# |
+if test "$enable_ntdll_freebsd_compile" -eq 1; then
+	patch_apply ntdll-freebsd-compile/0001-ntdll-Include-signal.h-for-sigset_t.patch
+	(
+		printf '%s\n' '+    { "Gerald Pfeifer", "ntdll: Include <signal.h> for sigset_t.", 1 },';
+	) >> "$patchlist"
+fi
+
 # Patchset ntdll-set_full_cpu_context
 # |
 # | Modified files:
diff --git a/patches/ntdll-Junction_Points/0001-ntdll-Add-support-for-junction-point-creation.patch b/patches/ntdll-Junction_Points/0001-ntdll-Add-support-for-junction-point-creation.patch
index 97ec03a38..96bf0bb43 100644
--- a/patches/ntdll-Junction_Points/0001-ntdll-Add-support-for-junction-point-creation.patch
+++ b/patches/ntdll-Junction_Points/0001-ntdll-Add-support-for-junction-point-creation.patch
@@ -1,4 +1,4 @@
-From e043e7d570fcdc0f7bc662d794d111baaa15b015 Mon Sep 17 00:00:00 2001
+From 40fcca0f7bf71d2675bf44cdfd8f5a178d4275c3 Mon Sep 17 00:00:00 2001
 From: "Erich E. Hoover" <erich.e.hoover@gmail.com>
 Date: Thu, 16 Jan 2014 20:56:49 -0700
 Subject: [PATCH] ntdll: Add support for junction point creation.
@@ -6,19 +6,19 @@ Subject: [PATCH] ntdll: Add support for junction point creation.
 Signed-off-by: Erich E. Hoover <erich.e.hoover@gmail.com>
 ---
  configure.ac            |   2 +
- dlls/ntdll/tests/file.c | 101 ++++++++++++++++++++++++++++++++++
- dlls/ntdll/unix/file.c  | 117 ++++++++++++++++++++++++++++++++++++++++
+ dlls/ntdll/tests/file.c | 101 +++++++++++++++++++++++++++++++
+ dlls/ntdll/unix/file.c  | 129 ++++++++++++++++++++++++++++++++++++++++
  include/Makefile.in     |   1 +
- include/ntifs.h         |  42 +++++++++++++++
- include/wine/port.h     |   9 ++++
+ include/ntifs.h         |  42 +++++++++++++
+ include/wine/port.h     |   9 +++
  libs/port/Makefile.in   |   1 +
- libs/port/renameat2.c   |  55 +++++++++++++++++++
- 8 files changed, 328 insertions(+)
+ libs/port/renameat2.c   |  55 +++++++++++++++++
+ 8 files changed, 340 insertions(+)
  create mode 100644 include/ntifs.h
  create mode 100644 libs/port/renameat2.c
 
 diff --git a/configure.ac b/configure.ac
-index a403c9436ca..dbd07791de7 100644
+index f3e93b3fdb8..918f4a5253c 100644
 --- a/configure.ac
 +++ b/configure.ac
 @@ -2218,6 +2218,8 @@ AC_CHECK_FUNCS(\
@@ -31,7 +31,7 @@ index a403c9436ca..dbd07791de7 100644
  	select \
  	setproctitle \
 diff --git a/dlls/ntdll/tests/file.c b/dlls/ntdll/tests/file.c
-index a502a8eec75..bce34f03920 100644
+index 5ca9742f0b6..1bc1af363e4 100644
 --- a/dlls/ntdll/tests/file.c
 +++ b/dlls/ntdll/tests/file.c
 @@ -38,6 +38,7 @@
@@ -42,7 +42,7 @@ index a502a8eec75..bce34f03920 100644
  
  #ifndef IO_COMPLETION_ALL_ACCESS
  #define IO_COMPLETION_ALL_ACCESS 0x001F0003
-@@ -4971,6 +4972,105 @@ static void test_file_readonly_access(void)
+@@ -5053,6 +5054,105 @@ static void test_file_readonly_access(void)
      DeleteFileW(path);
  }
  
@@ -148,39 +148,39 @@ index a502a8eec75..bce34f03920 100644
  START_TEST(file)
  {
      HMODULE hkernel32 = GetModuleHandleA("kernel32.dll");
-@@ -5041,4 +5141,5 @@ START_TEST(file)
-     test_query_attribute_information_file();
+@@ -5125,4 +5225,5 @@ START_TEST(file)
      test_ioctl();
+     test_query_ea();
      test_flush_buffers_file();
 +    test_reparse_points();
  }
 diff --git a/dlls/ntdll/unix/file.c b/dlls/ntdll/unix/file.c
-index b76d07a8175..271151ed1be 100644
+index 372a8ec1248..cfa1ec0fe9c 100644
 --- a/dlls/ntdll/unix/file.c
 +++ b/dlls/ntdll/unix/file.c
-@@ -32,6 +32,7 @@
- #include <dirent.h>
- #include <errno.h>
- #include <fcntl.h>
-+#include <libgen.h>
- #include <stdarg.h>
+@@ -36,6 +36,7 @@
  #include <string.h>
  #include <stdlib.h>
-@@ -122,6 +123,7 @@
- #include "ddk/wdm.h"
- #define WINE_MOUNTMGR_EXTENSIONS
- #include "ddk/mountmgr.h"
-+#include "ntifs.h"
- #include "wine/server.h"
+ #include <stdio.h>
++#include <libgen.h>
+ #include <limits.h>
+ #ifdef HAVE_MNTENT_H
+ #include <mntent.h>
+@@ -126,6 +127,7 @@
  #include "wine/list.h"
  #include "wine/debug.h"
-@@ -5661,6 +5663,104 @@ static void ignore_server_ioctl_struct_holes( ULONG code, const void *in_buffer,
+ #include "unix_private.h"
++#include "ntifs.h"
+ 
+ WINE_DEFAULT_DEBUG_CHANNEL(file);
+ WINE_DECLARE_DEBUG_CHANNEL(winediag);
+@@ -5645,6 +5647,116 @@ static void ignore_server_ioctl_struct_holes( ULONG code, const void *in_buffer,
  }
  
  
 +/*
-+ * Retrieve the unix name corresponding to a file handle, remove that directory, and then symlink the
-+ * requested directory to the location of the old directory.
++ * Retrieve the unix name corresponding to a file handle, remove that directory, and then symlink
++ * the requested directory to the location of the old directory.
 + */
 +NTSTATUS FILE_CreateSymlink(HANDLE handle, REPARSE_DATA_BUFFER *buffer)
 +{
@@ -189,7 +189,8 @@ index b76d07a8175..271151ed1be 100644
 +    int offset = buffer->MountPointReparseBuffer.SubstituteNameOffset;
 +    WCHAR *dest = &buffer->MountPointReparseBuffer.PathBuffer[offset];
 +    char tmpdir[PATH_MAX], tmplink[PATH_MAX], *d;
-+    ANSI_STRING unix_src, unix_dest;
++    SIZE_T unix_dest_len = PATH_MAX;
++    char *unix_src, *unix_dest;
 +    char magic_dest[PATH_MAX];
 +    int dest_fd, needs_close;
 +    UNICODE_STRING nt_dest;
@@ -204,12 +205,23 @@ index b76d07a8175..271151ed1be 100644
 +    src_allocated = TRUE;
 +    nt_dest.Buffer = dest;
 +    nt_dest.Length = dest_len;
-+    status = nt_to_unix_file_name( &nt_dest, &unix_dest, 0 );
++    for (;;)
++    {
++        unix_dest = malloc( unix_dest_len );
++        if (!unix_dest)
++        {
++            status = STATUS_NO_MEMORY;
++            goto cleanup;
++        }
++        status = wine_nt_to_unix_file_name( &nt_dest, unix_dest, &unix_dest_len, FALSE );
++        if (status != STATUS_BUFFER_TOO_SMALL) break;
++        free( unix_dest );
++    }
 +    if (status != STATUS_SUCCESS && status != STATUS_NO_SUCH_FILE)
 +        goto cleanup;
 +    dest_allocated = TRUE;
 +
-+    TRACE("Linking %s to %s\n", unix_src.Buffer, unix_dest.Buffer);
++    TRACE( "Linking %s to %s\n", unix_src, unix_dest );
 +
 +    /* Encode the reparse tag into the symlink */
 +    strcpy( magic_dest, "/" );
@@ -219,10 +231,10 @@ index b76d07a8175..271151ed1be 100644
 +            strcat( magic_dest, "." );
 +        strcat( magic_dest, "/" );
 +    }
-+    strcat( magic_dest, unix_dest.Buffer );
++    strcat( magic_dest, unix_dest );
 +
 +    /* Produce the link in a temporary location in the same folder */
-+    strcpy( tmpdir, unix_src.Buffer );
++    strcpy( tmpdir, unix_src );
 +    d = dirname( tmpdir);
 +    if (d != tmpdir) strcpy( tmpdir, d );
 +    strcat( tmpdir, "/.winelink.XXXXXX" );
@@ -240,7 +252,7 @@ index b76d07a8175..271151ed1be 100644
 +        goto cleanup;
 +    }
 +    /* Atomically move the link into position */
-+    if (!renameat2( -1, tmplink, -1, unix_src.Buffer, RENAME_EXCHANGE ))
++    if (!renameat2( -1, tmplink, -1, unix_src, RENAME_EXCHANGE ))
 +    {
 +        /* success: link and folder have switched locations */
 +        rmdir( tmplink ); /* remove the folder (at link location) */
@@ -249,12 +261,12 @@ index b76d07a8175..271151ed1be 100644
 +    {
 +        FIXME( "Atomic exchange of directory with symbolic link unsupported on this system, "
 +               "using unsafe exchange instead.\n" );
-+        if (rmdir( unix_src.Buffer ))
++        if (rmdir( unix_src ))
 +        {
 +            status = errno_to_status( errno );
 +            goto cleanup;
 +        }
-+        if (rename( tmplink, unix_src.Buffer ))
++        if (rename( tmplink, unix_src ))
 +        {
 +            status = errno_to_status( errno );
 +            goto cleanup; /* not moved, orignal file/folder at destination is orphaned */
@@ -269,8 +281,8 @@ index b76d07a8175..271151ed1be 100644
 +
 +cleanup:
 +    if (tempdir_created) rmdir( tmpdir );
-+    if (dest_allocated) RtlFreeAnsiString( &unix_dest );
-+    if (src_allocated) RtlFreeAnsiString( &unix_src );
++    if (dest_allocated) free( unix_dest );
++    if (src_allocated) free( unix_src );
 +    if (needs_close) close( dest_fd );
 +    return status;
 +}
@@ -279,11 +291,10 @@ index b76d07a8175..271151ed1be 100644
  /******************************************************************************
   *              NtFsControlFile   (NTDLL.@)
   */
-@@ -5748,6 +5848,23 @@ NTSTATUS WINAPI NtFsControlFile( HANDLE handle, HANDLE event, PIO_APC_ROUTINE ap
-         io->Information = 0;
-         status = STATUS_SUCCESS;
+@@ -5727,6 +5839,23 @@ NTSTATUS WINAPI NtFsControlFile( HANDLE handle, HANDLE event, PIO_APC_ROUTINE ap
          break;
-+
+     }
+ 
 +    case FSCTL_SET_REPARSE_POINT:
 +    {
 +        REPARSE_DATA_BUFFER *buffer = (REPARSE_DATA_BUFFER *)in_buffer;
@@ -300,9 +311,10 @@ index b76d07a8175..271151ed1be 100644
 +        }
 +        break;
 +    }
-     default:
-         return server_ioctl_file( handle, event, apc, apc_context, io, code,
-                                   in_buffer, in_size, out_buffer, out_size );
++
+     case FSCTL_SET_SPARSE:
+         TRACE("FSCTL_SET_SPARSE: Ignoring request\n");
+         io->Information = 0;
 diff --git a/include/Makefile.in b/include/Makefile.in
 index 216adf0d7ae..7dc16c230b6 100644
 --- a/include/Makefile.in
diff --git a/patches/ntdll-Junction_Points/0002-ntdll-Add-support-for-reading-junction-points.patch b/patches/ntdll-Junction_Points/0002-ntdll-Add-support-for-reading-junction-points.patch
index c03364e80..7e7cdee5c 100644
--- a/patches/ntdll-Junction_Points/0002-ntdll-Add-support-for-reading-junction-points.patch
+++ b/patches/ntdll-Junction_Points/0002-ntdll-Add-support-for-reading-junction-points.patch
@@ -1,19 +1,19 @@
-From f601df88922fd3719b34376344488fe2a04afe6b Mon Sep 17 00:00:00 2001
+From 1c6eed5d7c8a60fb7f6a9ada5345ef2dc0c6e9ad Mon Sep 17 00:00:00 2001
 From: "Erich E. Hoover" <erich.e.hoover@gmail.com>
 Date: Thu, 16 Jan 2014 20:57:57 -0700
-Subject: [PATCH] ntdll: Add support for reading junction points.
+Subject: ntdll: Add support for reading junction points.
 
 Signed-off-by: Erich E. Hoover <erich.e.hoover@gmail.com>
 ---
- dlls/ntdll/tests/file.c |  14 +++++-
- dlls/ntdll/unix/file.c  | 106 ++++++++++++++++++++++++++++++++++++++++
- 2 files changed, 119 insertions(+), 1 deletion(-)
+ dlls/ntdll/tests/file.c |  14 ++++-
+ dlls/ntdll/unix/file.c  | 119 ++++++++++++++++++++++++++++++++++++++++
+ 2 files changed, 132 insertions(+), 1 deletion(-)
 
 diff --git a/dlls/ntdll/tests/file.c b/dlls/ntdll/tests/file.c
-index 8b5ddbb0da1..938ef2026e3 100644
+index 43cf99e8e74..4fe94f58bf1 100644
 --- a/dlls/ntdll/tests/file.c
 +++ b/dlls/ntdll/tests/file.c
-@@ -5008,9 +5008,10 @@ static void test_reparse_points(void)
+@@ -5009,9 +5009,10 @@ static void test_reparse_points(void)
      static const WCHAR dotW[] = {'.',0};
      REPARSE_DATA_BUFFER *buffer = NULL;
      DWORD dwret, dwLen, dwFlags;
@@ -25,7 +25,7 @@ index 8b5ddbb0da1..938ef2026e3 100644
      BOOL bret;
  
      /* Create a temporary folder for the junction point tests */
-@@ -5058,6 +5059,17 @@ static void test_reparse_points(void)
+@@ -5059,6 +5060,17 @@ static void test_reparse_points(void)
      buffer_len = build_reparse_buffer(nameW.Buffer, &buffer);
      bret = DeviceIoControl(handle, FSCTL_SET_REPARSE_POINT, (LPVOID)buffer, buffer_len, NULL, 0, &dwret, 0);
      ok(bret, "Failed to create junction point! (0x%x)\n", GetLastError());
@@ -44,10 +44,10 @@ index 8b5ddbb0da1..938ef2026e3 100644
  
  cleanup:
 diff --git a/dlls/ntdll/unix/file.c b/dlls/ntdll/unix/file.c
-index 44cb12f90ee..52520f5f78f 100644
+index 48e4c38b7ba..cd523dcd313 100644
 --- a/dlls/ntdll/unix/file.c
 +++ b/dlls/ntdll/unix/file.c
-@@ -5707,6 +5707,106 @@ cleanup:
+@@ -5704,6 +5704,119 @@ cleanup:
  }
  
  
@@ -57,13 +57,15 @@ index 44cb12f90ee..52520f5f78f 100644
 + */
 +NTSTATUS FILE_GetSymlink(HANDLE handle, REPARSE_DATA_BUFFER *buffer, ULONG out_size)
 +{
-+    ANSI_STRING unix_src, unix_dest;
++    char *unix_src, unix_dest[PATH_MAX];
 +    VOID *subst_name, *print_name;
++    SIZE_T nt_dest_len = PATH_MAX;
 +    BOOL dest_allocated = FALSE;
 +    int dest_fd, needs_close;
-+    UNICODE_STRING nt_dest;
++    int unix_dest_len;
 +    DWORD max_length;
 +    NTSTATUS status;
++    WCHAR *nt_dest;
 +    INT prefix_len;
 +    ssize_t ret;
 +    char *p;
@@ -75,19 +77,16 @@ index 44cb12f90ee..52520f5f78f 100644
 +    if ((status = server_get_unix_name( handle, &unix_src )))
 +        goto cleanup;
 +
-+    unix_dest.Buffer = RtlAllocateHeap( GetProcessHeap(), 0, PATH_MAX );
-+    unix_dest.MaximumLength = PATH_MAX;
-+    dest_allocated = TRUE;
-+    ret = readlink( unix_src.Buffer, unix_dest.Buffer, unix_dest.MaximumLength );
++    ret = readlink( unix_src, unix_dest, sizeof(unix_dest) );
 +    if (ret < 0)
 +    {
 +        status = errno_to_status( errno );
 +        goto cleanup;
 +    }
-+    unix_dest.Length = ret;
++    unix_dest_len = ret;
 +
 +    /* Decode the reparse tag from the symlink */
-+    p = unix_dest.Buffer;
++    p = unix_dest;
 +    if (*p++ != '/')
 +    {
 +        status = STATUS_NOT_IMPLEMENTED;
@@ -110,11 +109,25 @@ index 44cb12f90ee..52520f5f78f 100644
 +        }
 +        buffer->ReparseTag |= (val << i);
 +    }
-+    unix_dest.Length -= (p - unix_dest.Buffer);
-+    memmove(unix_dest.Buffer, p, unix_dest.Length);
++    unix_dest_len -= (p - unix_dest);
++    memmove(unix_dest, p, unix_dest_len);
 +
-+    if ((status = unix_to_nt_file_name( &unix_dest, &nt_dest )))
++    for (;;)
++    {
++        nt_dest = malloc( nt_dest_len * sizeof(WCHAR) );
++        if (!nt_dest)
++        {
++            status = STATUS_NO_MEMORY;
++            goto cleanup;
++        }
++        status = wine_unix_to_nt_file_name( unix_dest, nt_dest, &nt_dest_len );
++        if (status != STATUS_BUFFER_TOO_SMALL) break;
++        free( nt_dest );
++    }
++    dest_allocated = TRUE;
++    if (status != STATUS_SUCCESS)
 +        goto cleanup;
++    nt_dest_len *= sizeof(WCHAR);
 +
 +    prefix_len = strlen("\\??\\");
 +    switch(buffer->ReparseTag)
@@ -122,10 +135,10 @@ index 44cb12f90ee..52520f5f78f 100644
 +    case IO_REPARSE_TAG_MOUNT_POINT:
 +        max_length = out_size-FIELD_OFFSET(typeof(*buffer), MountPointReparseBuffer.PathBuffer[1]);
 +        buffer->MountPointReparseBuffer.SubstituteNameOffset = 0;
-+        buffer->MountPointReparseBuffer.SubstituteNameLength = nt_dest.Length;
++        buffer->MountPointReparseBuffer.SubstituteNameLength = nt_dest_len;
 +        subst_name = &buffer->MountPointReparseBuffer.PathBuffer[buffer->MountPointReparseBuffer.SubstituteNameOffset/sizeof(WCHAR)];
-+        buffer->MountPointReparseBuffer.PrintNameOffset = nt_dest.Length + sizeof(WCHAR);
-+        buffer->MountPointReparseBuffer.PrintNameLength = nt_dest.Length - prefix_len*sizeof(WCHAR);
++        buffer->MountPointReparseBuffer.PrintNameOffset = nt_dest_len + sizeof(WCHAR);
++        buffer->MountPointReparseBuffer.PrintNameLength = nt_dest_len - prefix_len*sizeof(WCHAR);
 +        print_name = &buffer->MountPointReparseBuffer.PathBuffer[buffer->MountPointReparseBuffer.PrintNameOffset/sizeof(WCHAR)];
 +        break;
 +    default:
@@ -134,18 +147,18 @@ index 44cb12f90ee..52520f5f78f 100644
 +        status = STATUS_NOT_IMPLEMENTED;
 +        goto cleanup;
 +    }
-+    if (nt_dest.Length > max_length)
++    if (nt_dest_len > max_length)
 +    {
 +        status = STATUS_BUFFER_TOO_SMALL;
 +        goto cleanup;
 +    }
 +
-+    memcpy( subst_name, nt_dest.Buffer, nt_dest.Length );
-+    memcpy( print_name, &nt_dest.Buffer[prefix_len], nt_dest.Length - prefix_len*sizeof(WCHAR) );
++    memcpy( subst_name, nt_dest, nt_dest_len );
++    memcpy( print_name, &nt_dest[prefix_len], nt_dest_len - prefix_len*sizeof(WCHAR) );
 +    status = STATUS_SUCCESS;
 +
 +cleanup:
-+    if (dest_allocated) RtlFreeAnsiString( &unix_dest );
++    if (dest_allocated) free( nt_dest );
 +    if (needs_close) close( dest_fd );
 +    return status;
 +}
@@ -154,9 +167,9 @@ index 44cb12f90ee..52520f5f78f 100644
  /******************************************************************************
   *              NtFsControlFile   (NTDLL.@)
   */
-@@ -5772,6 +5872,12 @@ NTSTATUS WINAPI NtFsControlFile( HANDLE handle, HANDLE event, PIO_APC_ROUTINE ap
-         status = STATUS_SUCCESS;
+@@ -5786,6 +5899,12 @@ NTSTATUS WINAPI NtFsControlFile( HANDLE handle, HANDLE event, PIO_APC_ROUTINE ap
          break;
+     }
  
 +    case FSCTL_GET_REPARSE_POINT:
 +    {
@@ -168,5 +181,5 @@ index 44cb12f90ee..52520f5f78f 100644
      {
          REPARSE_DATA_BUFFER *buffer = (REPARSE_DATA_BUFFER *)in_buffer;
 -- 
-2.27.0
+2.17.1
 
diff --git a/patches/ntdll-Junction_Points/0003-ntdll-Add-support-for-deleting-junction-points.patch b/patches/ntdll-Junction_Points/0003-ntdll-Add-support-for-deleting-junction-points.patch
index 2289a24ee..262b29bae 100644
--- a/patches/ntdll-Junction_Points/0003-ntdll-Add-support-for-deleting-junction-points.patch
+++ b/patches/ntdll-Junction_Points/0003-ntdll-Add-support-for-deleting-junction-points.patch
@@ -1,7 +1,7 @@
-From 864570de933285164823fad9d6861dd018ff5a19 Mon Sep 17 00:00:00 2001
+From 17713b3abdd15d7a76ffec8e6376f2424829ecfa Mon Sep 17 00:00:00 2001
 From: "Erich E. Hoover" <erich.e.hoover@gmail.com>
 Date: Thu, 16 Jan 2014 21:00:21 -0700
-Subject: [PATCH] ntdll: Add support for deleting junction points.
+Subject: ntdll: Add support for deleting junction points.
 
 Signed-off-by: Erich E. Hoover <erich.e.hoover@gmail.com>
 ---
@@ -11,10 +11,10 @@ Signed-off-by: Erich E. Hoover <erich.e.hoover@gmail.com>
  3 files changed, 131 insertions(+), 1 deletion(-)
 
 diff --git a/dlls/ntdll/tests/file.c b/dlls/ntdll/tests/file.c
-index 938ef2026e3..80a532282c7 100644
+index 4fe94f58bf1..9da353bbbd2 100644
 --- a/dlls/ntdll/tests/file.c
 +++ b/dlls/ntdll/tests/file.c
-@@ -5003,12 +5003,15 @@ static void test_reparse_points(void)
+@@ -5004,12 +5004,15 @@ static void test_reparse_points(void)
      static const WCHAR reparseW[] = {'\\','r','e','p','a','r','s','e',0};
      WCHAR path[MAX_PATH], reparse_path[MAX_PATH], target_path[MAX_PATH];
      static const WCHAR targetW[] = {'\\','t','a','r','g','e','t',0};
@@ -30,7 +30,7 @@ index 938ef2026e3..80a532282c7 100644
      UNICODE_STRING nameW;
      HANDLE handle;
      WCHAR *dest;
-@@ -5056,6 +5059,8 @@ static void test_reparse_points(void)
+@@ -5057,6 +5060,8 @@ static void test_reparse_points(void)
          win_skip("Failed to open junction point directory handle (0x%x).\n", GetLastError());
          goto cleanup;
      }
@@ -39,7 +39,7 @@ index 938ef2026e3..80a532282c7 100644
      buffer_len = build_reparse_buffer(nameW.Buffer, &buffer);
      bret = DeviceIoControl(handle, FSCTL_SET_REPARSE_POINT, (LPVOID)buffer, buffer_len, NULL, 0, &dwret, 0);
      ok(bret, "Failed to create junction point! (0x%x)\n", GetLastError());
-@@ -5070,6 +5075,22 @@ static void test_reparse_points(void)
+@@ -5071,6 +5076,22 @@ static void test_reparse_points(void)
      dest = &buffer->MountPointReparseBuffer.PathBuffer[buffer->MountPointReparseBuffer.SubstituteNameOffset/sizeof(WCHAR)];
      ok((memcmp(dest, nameW.Buffer, string_len) == 0), "Junction point destination does not match ('%s' != '%s')!\n",
                                                        wine_dbgstr_w(dest), wine_dbgstr_w(nameW.Buffer));
@@ -62,7 +62,7 @@ index 938ef2026e3..80a532282c7 100644
      CloseHandle(handle);
  
  cleanup:
-@@ -5077,7 +5098,7 @@ cleanup:
+@@ -5078,7 +5099,7 @@ cleanup:
      pRtlFreeUnicodeString(&nameW);
      HeapFree(GetProcessHeap(), 0, buffer);
      bret = RemoveDirectoryW(reparse_path);
@@ -72,10 +72,10 @@ index 938ef2026e3..80a532282c7 100644
      ok(bret, "Failed to remove temporary target directory!\n");
      RemoveDirectoryW(path);
 diff --git a/dlls/ntdll/unix/file.c b/dlls/ntdll/unix/file.c
-index 52520f5f78f..c65ab7de16c 100644
+index cd523dcd313..3f6dcc6ab41 100644
 --- a/dlls/ntdll/unix/file.c
 +++ b/dlls/ntdll/unix/file.c
-@@ -5807,6 +5807,87 @@ cleanup:
+@@ -5817,6 +5817,87 @@ cleanup:
  }
  
  
@@ -88,8 +88,8 @@ index 52520f5f78f..c65ab7de16c 100644
 +    char tmpdir[PATH_MAX], tmpfile[PATH_MAX], *d;
 +    BOOL tempdir_created = FALSE;
 +    int dest_fd, needs_close;
-+    ANSI_STRING unix_name;
 +    NTSTATUS status;
++    char *unix_name;
 +    struct stat st;
 +
 +    if ((status = server_get_unix_fd( handle, FILE_SPECIAL_ACCESS, &dest_fd, &needs_close, NULL, NULL )))
@@ -98,7 +98,7 @@ index 52520f5f78f..c65ab7de16c 100644
 +    if ((status = server_get_unix_name( handle, &unix_name )))
 +        goto cleanup;
 +
-+    TRACE("Deleting symlink %s\n", unix_name.Buffer);
++    TRACE( "Deleting symlink %s\n", unix_name );
 +
 +    /* Produce the directory in a temporary location in the same folder */
 +    if (fstat( dest_fd, &st ) == -1)
@@ -106,7 +106,7 @@ index 52520f5f78f..c65ab7de16c 100644
 +        status = errno_to_status( errno );
 +        goto cleanup;
 +    }
-+    strcpy( tmpdir, unix_name.Buffer );
++    strcpy( tmpdir, unix_name );
 +    d = dirname( tmpdir);
 +    if (d != tmpdir) strcpy( tmpdir, d );
 +    strcat( tmpdir, "/.winelink.XXXXXX" );
@@ -126,7 +126,7 @@ index 52520f5f78f..c65ab7de16c 100644
 +    /* attemp to retain the ownership (if possible) */
 +    lchown( tmpfile, st.st_uid, st.st_gid );
 +    /* Atomically move the directory into position */
-+    if (!renameat2( -1, tmpfile, -1, unix_name.Buffer, RENAME_EXCHANGE ))
++    if (!renameat2( -1, tmpfile, -1, unix_name, RENAME_EXCHANGE ))
 +    {
 +        /* success: link and folder have switched locations */
 +        unlink( tmpfile ); /* remove the link (at folder location) */
@@ -135,12 +135,12 @@ index 52520f5f78f..c65ab7de16c 100644
 +    {
 +        FIXME( "Atomic exchange of directory with symbolic link unsupported on this system, "
 +               "using unsafe exchange instead.\n" );
-+        if (unlink( unix_name.Buffer ))
++        if (unlink( unix_name ))
 +        {
 +            status = errno_to_status( errno );
 +            goto cleanup;
 +        }
-+        if (rename( tmpfile, unix_name.Buffer ))
++        if (rename( tmpfile, unix_name ))
 +        {
 +            status = errno_to_status( errno );
 +            goto cleanup; /* not moved, orignal file/folder at destination is orphaned */
@@ -163,9 +163,9 @@ index 52520f5f78f..c65ab7de16c 100644
  /******************************************************************************
   *              NtFsControlFile   (NTDLL.@)
   */
-@@ -5872,6 +5953,22 @@ NTSTATUS WINAPI NtFsControlFile( HANDLE handle, HANDLE event, PIO_APC_ROUTINE ap
-         status = STATUS_SUCCESS;
+@@ -5899,6 +5980,22 @@ NTSTATUS WINAPI NtFsControlFile( HANDLE handle, HANDLE event, PIO_APC_ROUTINE ap
          break;
+     }
  
 +    case FSCTL_DELETE_REPARSE_POINT:
 +    {
@@ -208,5 +208,5 @@ index 21d42e17325..4539b89d583 100644
 +
  #endif /* __WINE_NTIFS_H */
 -- 
-2.27.0
+2.17.1
 
diff --git a/patches/ntdll-Junction_Points/0004-ntdll-Add-a-test-for-junction-point-advertisement.patch b/patches/ntdll-Junction_Points/0004-ntdll-Add-a-test-for-junction-point-advertisement.patch
index 9767741cf..d01defda0 100644
--- a/patches/ntdll-Junction_Points/0004-ntdll-Add-a-test-for-junction-point-advertisement.patch
+++ b/patches/ntdll-Junction_Points/0004-ntdll-Add-a-test-for-junction-point-advertisement.patch
@@ -1,4 +1,4 @@
-From c86d6453694ed2723e5eaa1c55f9e53e1b9946d8 Mon Sep 17 00:00:00 2001
+From 4b5123561e8260ed4b1421b0cf127468ac7c131f Mon Sep 17 00:00:00 2001
 From: "Erich E. Hoover" <erich.e.hoover@gmail.com>
 Date: Thu, 16 Jan 2014 21:01:25 -0700
 Subject: ntdll: Add a test for junction point advertisement.
@@ -9,10 +9,10 @@ Signed-off-by: Erich E. Hoover <erich.e.hoover@gmail.com>
  1 file changed, 5 insertions(+)
 
 diff --git a/dlls/ntdll/tests/file.c b/dlls/ntdll/tests/file.c
-index bc6961bc61..e1f216370d 100644
+index 9da353bbbd2..051237dd494 100644
 --- a/dlls/ntdll/tests/file.c
 +++ b/dlls/ntdll/tests/file.c
-@@ -4925,6 +4925,11 @@ static void test_reparse_points(void)
+@@ -5066,6 +5066,11 @@ static void test_reparse_points(void)
      bret = DeviceIoControl(handle, FSCTL_SET_REPARSE_POINT, (LPVOID)buffer, buffer_len, NULL, 0, &dwret, 0);
      ok(bret, "Failed to create junction point! (0x%x)\n", GetLastError());
  
diff --git a/patches/ntdll-Junction_Points/0005-kernel32-ntdll-Add-support-for-deleting-junction-poi.patch b/patches/ntdll-Junction_Points/0005-kernel32-ntdll-Add-support-for-deleting-junction-poi.patch
deleted file mode 100644
index 59e6b7d46..000000000
--- a/patches/ntdll-Junction_Points/0005-kernel32-ntdll-Add-support-for-deleting-junction-poi.patch
+++ /dev/null
@@ -1,66 +0,0 @@
-From 3473ccddec5c67bbfe1d477ce36f537493fae54b Mon Sep 17 00:00:00 2001
-From: "Erich E. Hoover" <erich.e.hoover@gmail.com>
-Date: Thu, 16 Jan 2014 21:02:11 -0700
-Subject: [PATCH] kernel32,ntdll: Add support for deleting junction points with
- RemoveDirectory.
-
-Signed-off-by: Erich E. Hoover <erich.e.hoover@gmail.com>
----
- dlls/ntdll/tests/file.c | 34 +++++++++++++++++++++++++++++++++-
- 1 file changed, 33 insertions(+), 1 deletion(-)
-
-diff --git a/dlls/ntdll/tests/file.c b/dlls/ntdll/tests/file.c
-index 6b3071f4095..1d5e0ce95b0 100644
---- a/dlls/ntdll/tests/file.c
-+++ b/dlls/ntdll/tests/file.c
-@@ -5010,7 +5010,7 @@ static void test_reparse_points(void)
-     REPARSE_GUID_DATA_BUFFER guid_buffer;
-     static const WCHAR dotW[] = {'.',0};
-     REPARSE_DATA_BUFFER *buffer = NULL;
--    DWORD dwret, dwLen, dwFlags;
-+    DWORD dwret, dwLen, dwFlags, err;
-     INT buffer_len, string_len;
-     IO_STATUS_BLOCK iosb;
-     UNICODE_STRING nameW;
-@@ -5099,6 +5099,38 @@ static void test_reparse_points(void)
-        "Junction point folder's access time does not match.\n");
-     CloseHandle(handle);
- 
-+    /* Check deleting a junction point as if it were a directory */
-+    HeapFree(GetProcessHeap(), 0, buffer);
-+    handle = CreateFileW(reparse_path, GENERIC_READ | GENERIC_WRITE, 0, 0, OPEN_EXISTING,
-+                            FILE_FLAG_BACKUP_SEMANTICS | FILE_FLAG_OPEN_REPARSE_POINT, 0);
-+    buffer_len = build_reparse_buffer(nameW.Buffer, &buffer);
-+    bret = DeviceIoControl(handle, FSCTL_SET_REPARSE_POINT, (LPVOID)buffer, buffer_len, NULL, 0, &dwret, 0);
-+    ok(bret, "Failed to create junction point! (0x%x)\n", GetLastError());
-+    CloseHandle(handle);
-+    bret = RemoveDirectoryW(reparse_path);
-+    ok(bret, "Failed to delete junction point as directory!\n");
-+    dwret = GetFileAttributesW(reparse_path);
-+    ok(dwret == (DWORD)~0, "Junction point still exists (attributes: 0x%x)!\n", dwret);
-+
-+    /* Check deleting a junction point as if it were a file */
-+    HeapFree(GetProcessHeap(), 0, buffer);
-+    bret = CreateDirectoryW(reparse_path, NULL);
-+    ok(bret, "Failed to create junction point target directory.\n");
-+    handle = CreateFileW(reparse_path, GENERIC_READ | GENERIC_WRITE, 0, 0, OPEN_EXISTING,
-+                         FILE_FLAG_BACKUP_SEMANTICS | FILE_FLAG_OPEN_REPARSE_POINT, 0);
-+    buffer_len = build_reparse_buffer(nameW.Buffer, &buffer);
-+    bret = DeviceIoControl(handle, FSCTL_SET_REPARSE_POINT, (LPVOID)buffer, buffer_len, NULL, 0, &dwret, 0);
-+    ok(bret, "Failed to create junction point! (0x%x)\n", GetLastError());
-+    CloseHandle(handle);
-+    bret = DeleteFileW(reparse_path);
-+    ok(!bret, "Succeeded in deleting junction point as file!\n");
-+    err = GetLastError();
-+    ok(err == ERROR_ACCESS_DENIED, "Expected last error 0x%x for DeleteFile on junction point (actually 0x%x)!\n",
-+                                   ERROR_ACCESS_DENIED, err);
-+    dwret = GetFileAttributesW(reparse_path);
-+    ok(dwret != (DWORD)~0, "Junction point doesn't exist (attributes: 0x%x)!\n", dwret);
-+    ok(dwret & FILE_ATTRIBUTE_REPARSE_POINT, "File is not a junction point! (attributes: 0x%x)\n", dwret);
-+
- cleanup:
-     /* Cleanup */
-     pRtlFreeUnicodeString(&nameW);
--- 
-2.27.0
-
diff --git a/patches/ntdll-Junction_Points/0005-server-Add-support-for-deleting-junction-points-with.patch b/patches/ntdll-Junction_Points/0005-server-Add-support-for-deleting-junction-points-with.patch
new file mode 100644
index 000000000..3471016ba
--- /dev/null
+++ b/patches/ntdll-Junction_Points/0005-server-Add-support-for-deleting-junction-points-with.patch
@@ -0,0 +1,161 @@
+From 398754456f977e063aa1c180301ce44fd5fdaf84 Mon Sep 17 00:00:00 2001
+From: "Erich E. Hoover" <erich.e.hoover@gmail.com>
+Date: Thu, 16 Jan 2014 21:02:11 -0700
+Subject: server: Add support for deleting junction points with
+ RemoveDirectory.
+
+Signed-off-by: Erich E. Hoover <erich.e.hoover@gmail.com>
+---
+ dlls/ntdll/tests/file.c | 34 +++++++++++++++++++++++++++++++++-
+ server/fd.c             | 27 ++++++++++++++++++---------
+ 2 files changed, 51 insertions(+), 10 deletions(-)
+
+diff --git a/dlls/ntdll/tests/file.c b/dlls/ntdll/tests/file.c
+index 051237dd494..77a1be8307b 100644
+--- a/dlls/ntdll/tests/file.c
++++ b/dlls/ntdll/tests/file.c
+@@ -5010,7 +5010,7 @@ static void test_reparse_points(void)
+     REPARSE_GUID_DATA_BUFFER guid_buffer;
+     static const WCHAR dotW[] = {'.',0};
+     REPARSE_DATA_BUFFER *buffer = NULL;
+-    DWORD dwret, dwLen, dwFlags;
++    DWORD dwret, dwLen, dwFlags, err;
+     INT buffer_len, string_len;
+     IO_STATUS_BLOCK iosb;
+     UNICODE_STRING nameW;
+@@ -5099,6 +5099,38 @@ static void test_reparse_points(void)
+        "Junction point folder's access time does not match.\n");
+     CloseHandle(handle);
+ 
++    /* Check deleting a junction point as if it were a directory */
++    HeapFree(GetProcessHeap(), 0, buffer);
++    handle = CreateFileW(reparse_path, GENERIC_READ | GENERIC_WRITE, 0, 0, OPEN_EXISTING,
++                            FILE_FLAG_BACKUP_SEMANTICS | FILE_FLAG_OPEN_REPARSE_POINT, 0);
++    buffer_len = build_reparse_buffer(nameW.Buffer, &buffer);
++    bret = DeviceIoControl(handle, FSCTL_SET_REPARSE_POINT, (LPVOID)buffer, buffer_len, NULL, 0, &dwret, 0);
++    ok(bret, "Failed to create junction point! (0x%x)\n", GetLastError());
++    CloseHandle(handle);
++    bret = RemoveDirectoryW(reparse_path);
++    ok(bret, "Failed to delete junction point as directory!\n");
++    dwret = GetFileAttributesW(reparse_path);
++    ok(dwret == (DWORD)~0, "Junction point still exists (attributes: 0x%x)!\n", dwret);
++
++    /* Check deleting a junction point as if it were a file */
++    HeapFree(GetProcessHeap(), 0, buffer);
++    bret = CreateDirectoryW(reparse_path, NULL);
++    ok(bret, "Failed to create junction point target directory.\n");
++    handle = CreateFileW(reparse_path, GENERIC_READ | GENERIC_WRITE, 0, 0, OPEN_EXISTING,
++                         FILE_FLAG_BACKUP_SEMANTICS | FILE_FLAG_OPEN_REPARSE_POINT, 0);
++    buffer_len = build_reparse_buffer(nameW.Buffer, &buffer);
++    bret = DeviceIoControl(handle, FSCTL_SET_REPARSE_POINT, (LPVOID)buffer, buffer_len, NULL, 0, &dwret, 0);
++    ok(bret, "Failed to create junction point! (0x%x)\n", GetLastError());
++    CloseHandle(handle);
++    bret = DeleteFileW(reparse_path);
++    ok(!bret, "Succeeded in deleting junction point as file!\n");
++    err = GetLastError();
++    ok(err == ERROR_ACCESS_DENIED, "Expected last error 0x%x for DeleteFile on junction point (actually 0x%x)!\n",
++                                   ERROR_ACCESS_DENIED, err);
++    dwret = GetFileAttributesW(reparse_path);
++    ok(dwret != (DWORD)~0, "Junction point doesn't exist (attributes: 0x%x)!\n", dwret);
++    ok(dwret & FILE_ATTRIBUTE_REPARSE_POINT, "File is not a junction point! (attributes: 0x%x)\n", dwret);
++
+ cleanup:
+     /* Cleanup */
+     pRtlFreeUnicodeString(&nameW);
+diff --git a/server/fd.c b/server/fd.c
+index 7ea8ac273e5..c0d35e2fa4c 100644
+--- a/server/fd.c
++++ b/server/fd.c
+@@ -169,7 +169,8 @@ struct closed_fd
+     struct list entry;       /* entry in inode closed list */
+     int         unix_fd;     /* the unix file descriptor */
+     int         unlink;      /* whether to unlink on close: -1 - implicit FILE_DELETE_ON_CLOSE, 1 - explicit disposition */
+-    char       *unix_name;   /* name to unlink on close, points to parent fd unix_name */
++    char       *unlink_name; /* name to unlink on close, points to parent fd unix_name */
++    char       *unix_name;   /* name to real file path, points to parent fd unix_name */
+ };
+ 
+ struct fd
+@@ -184,6 +185,7 @@ struct fd
+     unsigned int         access;      /* file access (FILE_READ_DATA etc.) */
+     unsigned int         options;     /* file options (FILE_DELETE_ON_CLOSE, FILE_SYNCHRONOUS...) */
+     unsigned int         sharing;     /* file sharing mode */
++    char                *unlink_name; /* file name to unlink on close */
+     char                *unix_name;   /* unix file name */
+     int                  unix_fd;     /* unix file descriptor */
+     unsigned int         no_fd_status;/* status to return when unix_fd is -1 */
+@@ -1113,6 +1115,7 @@ static void inode_close_pending( struct inode *inode, int keep_unlinks )
+         if (!keep_unlinks || !fd->unlink)  /* get rid of it unless there's an unlink pending on that file */
+         {
+             list_remove( ptr );
++            free( fd->unlink_name );
+             free( fd->unix_name );
+             free( fd );
+         }
+@@ -1147,12 +1150,13 @@ static void inode_destroy( struct object *obj )
+         {
+             /* make sure it is still the same file */
+             struct stat st;
+-            if (!stat( fd->unix_name, &st ) && st.st_dev == inode->device->dev && st.st_ino == inode->ino)
++            if (!lstat( fd->unlink_name, &st ) && st.st_dev == inode->device->dev && st.st_ino == inode->ino)
+             {
+-                if (S_ISDIR(st.st_mode)) rmdir( fd->unix_name );
+-                else unlink( fd->unix_name );
++                if (S_ISDIR(st.st_mode)) rmdir( fd->unlink_name );
++                else unlink( fd->unlink_name );
+             }
+         }
++        free( fd->unlink_name );
+         free( fd->unix_name );
+         free( fd );
+     }
+@@ -1903,18 +1907,19 @@ struct fd *open_fd( struct fd *root, const char *name, int flags, mode_t *mode,
+     fd->unix_name = NULL;
+     if ((path = dup_fd_name( root, name )))
+     {
++        fd->unlink_name = path;
+         fd->unix_name = realpath( path, NULL );
+-        free( path );
+     }
+ 
+     closed_fd->unix_fd = fd->unix_fd;
+     closed_fd->unlink = 0;
++    closed_fd->unlink_name = fd->unlink_name;
+     closed_fd->unix_name = fd->unix_name;
+-    fstat( fd->unix_fd, &st );
++    lstat( fd->unlink_name, &st );
+     *mode = st.st_mode;
+ 
+     /* only bother with an inode for normal files and directories */
+-    if (S_ISREG(st.st_mode) || S_ISDIR(st.st_mode))
++    if (S_ISREG(st.st_mode) || S_ISDIR(st.st_mode) || S_ISLNK(st.st_mode))
+     {
+         unsigned int err;
+         struct inode *inode = get_inode( st.st_dev, st.st_ino, fd->unix_fd );
+@@ -1932,6 +1937,9 @@ struct fd *open_fd( struct fd *root, const char *name, int flags, mode_t *mode,
+         list_add_head( &inode->open, &fd->inode_entry );
+         closed_fd = NULL;
+ 
++        fstat( fd->unix_fd, &st );
++        *mode = st.st_mode;
++
+         /* check directory options */
+         if ((options & FILE_DIRECTORY_FILE) && !S_ISDIR(st.st_mode))
+         {
+@@ -2563,10 +2571,11 @@ static void set_fd_name( struct fd *fd, struct fd *root, const char *nameptr,
+         fchmod( fd->unix_fd, st.st_mode );
+     }
+ 
++    free( fd->unlink_name );
+     free( fd->unix_name );
++    fd->closed->unlink_name = fd->unlink_name = name;
+     fd->closed->unix_name = fd->unix_name = realpath( name, NULL );
+-    free( name );
+-    if (!fd->unix_name)
++    if (!fd->unlink_name || !fd->unix_name)
+         set_error( STATUS_NO_MEMORY );
+     return;
+ 
+-- 
+2.17.1
+
diff --git a/patches/ntdll-Junction_Points/0007-ntdll-Add-support-for-absolute-symlink-creation.patch b/patches/ntdll-Junction_Points/0007-ntdll-Add-support-for-absolute-symlink-creation.patch
index 8998fb07c..5596ede5f 100644
--- a/patches/ntdll-Junction_Points/0007-ntdll-Add-support-for-absolute-symlink-creation.patch
+++ b/patches/ntdll-Junction_Points/0007-ntdll-Add-support-for-absolute-symlink-creation.patch
@@ -1,7 +1,7 @@
-From 3ef1ecf4b3b6db13e96d6440e51c9407f8b5dcda Mon Sep 17 00:00:00 2001
+From f74db8315285e44fe21d120337fe568ed9824ae1 Mon Sep 17 00:00:00 2001
 From: "Erich E. Hoover" <erich.e.hoover@gmail.com>
 Date: Thu, 16 Jan 2014 21:06:24 -0700
-Subject: [PATCH] ntdll: Add support for absolute symlink creation.
+Subject: ntdll: Add support for absolute symlink creation.
 
 Signed-off-by: Erich E. Hoover <erich.e.hoover@gmail.com>
 ---
@@ -11,10 +11,10 @@ Signed-off-by: Erich E. Hoover <erich.e.hoover@gmail.com>
  3 files changed, 143 insertions(+), 19 deletions(-)
 
 diff --git a/dlls/ntdll/tests/file.c b/dlls/ntdll/tests/file.c
-index 541572c27ce..f91bb40a133 100644
+index 77a1be8307b..986468a1495 100644
 --- a/dlls/ntdll/tests/file.c
 +++ b/dlls/ntdll/tests/file.c
-@@ -4972,26 +4972,50 @@ static void test_file_readonly_access(void)
+@@ -4973,26 +4973,50 @@ static void test_file_readonly_access(void)
      DeleteFileW(path);
  }
  
@@ -73,7 +73,7 @@ index 541572c27ce..f91bb40a133 100644
      lstrcpyW(subst_dest, filename);
      lstrcpyW(print_dest, &filename[prefix_len]);
      *pbuffer = buffer;
-@@ -5011,10 +5035,12 @@ static void test_reparse_points(void)
+@@ -5012,10 +5036,12 @@ static void test_reparse_points(void)
      REPARSE_DATA_BUFFER *buffer = NULL;
      DWORD dwret, dwLen, dwFlags, err;
      INT buffer_len, string_len;
@@ -87,7 +87,7 @@ index 541572c27ce..f91bb40a133 100644
      BOOL bret;
  
      /* Create a temporary folder for the junction point tests */
-@@ -5061,7 +5087,7 @@ static void test_reparse_points(void)
+@@ -5062,7 +5088,7 @@ static void test_reparse_points(void)
      }
      dwret = NtQueryInformationFile(handle, &iosb, &old_attrib, sizeof(old_attrib), FileBasicInformation);
      ok(dwret == STATUS_SUCCESS, "Failed to get junction point folder's attributes (0x%x).\n", dwret);
@@ -96,7 +96,7 @@ index 541572c27ce..f91bb40a133 100644
      bret = DeviceIoControl(handle, FSCTL_SET_REPARSE_POINT, (LPVOID)buffer, buffer_len, NULL, 0, &dwret, 0);
      ok(bret, "Failed to create junction point! (0x%x)\n", GetLastError());
  
-@@ -5102,7 +5128,7 @@ static void test_reparse_points(void)
+@@ -5103,7 +5129,7 @@ static void test_reparse_points(void)
      HeapFree(GetProcessHeap(), 0, buffer);
      handle = CreateFileW(reparse_path, GENERIC_READ | GENERIC_WRITE, 0, 0, OPEN_EXISTING,
                              FILE_FLAG_BACKUP_SEMANTICS | FILE_FLAG_OPEN_REPARSE_POINT, 0);
@@ -105,7 +105,7 @@ index 541572c27ce..f91bb40a133 100644
      bret = DeviceIoControl(handle, FSCTL_SET_REPARSE_POINT, (LPVOID)buffer, buffer_len, NULL, 0, &dwret, 0);
      ok(bret, "Failed to create junction point! (0x%x)\n", GetLastError());
      CloseHandle(handle);
-@@ -5117,7 +5143,7 @@ static void test_reparse_points(void)
+@@ -5118,7 +5144,7 @@ static void test_reparse_points(void)
      ok(bret, "Failed to create junction point target directory.\n");
      handle = CreateFileW(reparse_path, GENERIC_READ | GENERIC_WRITE, 0, 0, OPEN_EXISTING,
                           FILE_FLAG_BACKUP_SEMANTICS | FILE_FLAG_OPEN_REPARSE_POINT, 0);
@@ -114,7 +114,7 @@ index 541572c27ce..f91bb40a133 100644
      bret = DeviceIoControl(handle, FSCTL_SET_REPARSE_POINT, (LPVOID)buffer, buffer_len, NULL, 0, &dwret, 0);
      ok(bret, "Failed to create junction point! (0x%x)\n", GetLastError());
      CloseHandle(handle);
-@@ -5130,14 +5156,73 @@ static void test_reparse_points(void)
+@@ -5131,14 +5157,73 @@ static void test_reparse_points(void)
      ok(dwret != (DWORD)~0, "Junction point doesn't exist (attributes: 0x%x)!\n", dwret);
      ok(dwret & FILE_ATTRIBUTE_REPARSE_POINT, "File is not a junction point! (attributes: 0x%x)\n", dwret);
  
@@ -193,10 +193,10 @@ index 541572c27ce..f91bb40a133 100644
  }
  
 diff --git a/dlls/ntdll/unix/file.c b/dlls/ntdll/unix/file.c
-index c65ab7de16c..15f6a006145 100644
+index 3f6dcc6ab41..b8dc02127ba 100644
 --- a/dlls/ntdll/unix/file.c
 +++ b/dlls/ntdll/unix/file.c
-@@ -5616,17 +5616,33 @@ static void ignore_server_ioctl_struct_holes( ULONG code, const void *in_buffer,
+@@ -5601,18 +5601,34 @@ static void ignore_server_ioctl_struct_holes( ULONG code, const void *in_buffer,
  NTSTATUS FILE_CreateSymlink(HANDLE handle, REPARSE_DATA_BUFFER *buffer)
  {
      BOOL src_allocated = FALSE, dest_allocated = FALSE, tempdir_created = FALSE;
@@ -204,7 +204,8 @@ index c65ab7de16c..15f6a006145 100644
 -    int offset = buffer->MountPointReparseBuffer.SubstituteNameOffset;
 -    WCHAR *dest = &buffer->MountPointReparseBuffer.PathBuffer[offset];
      char tmpdir[PATH_MAX], tmplink[PATH_MAX], *d;
-     ANSI_STRING unix_src, unix_dest;
+     SIZE_T unix_dest_len = PATH_MAX;
+     char *unix_src, *unix_dest;
      char magic_dest[PATH_MAX];
      int dest_fd, needs_close;
      UNICODE_STRING nt_dest;
@@ -233,7 +234,7 @@ index c65ab7de16c..15f6a006145 100644
      if ((status = server_get_unix_fd( handle, FILE_SPECIAL_ACCESS, &dest_fd, &needs_close, NULL, NULL )))
          return status;
  
-@@ -5650,6 +5666,18 @@ NTSTATUS FILE_CreateSymlink(HANDLE handle, REPARSE_DATA_BUFFER *buffer)
+@@ -5647,6 +5663,18 @@ NTSTATUS FILE_CreateSymlink(HANDLE handle, REPARSE_DATA_BUFFER *buffer)
              strcat( magic_dest, "." );
          strcat( magic_dest, "/" );
      }
@@ -249,10 +250,10 @@ index c65ab7de16c..15f6a006145 100644
 +            strcat( magic_dest, "." );
 +        strcat( magic_dest, "/" );
 +    }
-     strcat( magic_dest, unix_dest.Buffer );
+     strcat( magic_dest, unix_dest );
  
      /* Produce the link in a temporary location in the same folder */
-@@ -5982,6 +6010,7 @@ NTSTATUS WINAPI NtFsControlFile( HANDLE handle, HANDLE event, PIO_APC_ROUTINE ap
+@@ -6009,6 +6037,7 @@ NTSTATUS WINAPI NtFsControlFile( HANDLE handle, HANDLE event, PIO_APC_ROUTINE ap
          switch(buffer->ReparseTag)
          {
          case IO_REPARSE_TAG_MOUNT_POINT:
@@ -294,5 +295,5 @@ index 4539b89d583..ab3273d3f81 100644
  typedef struct _REPARSE_GUID_DATA_BUFFER {
      DWORD ReparseTag;
 -- 
-2.27.0
+2.17.1
 
diff --git a/patches/ntdll-Junction_Points/0008-ntdll-Add-support-for-reading-absolute-symlinks.patch b/patches/ntdll-Junction_Points/0008-ntdll-Add-support-for-reading-absolute-symlinks.patch
index 26aa069da..552441468 100644
--- a/patches/ntdll-Junction_Points/0008-ntdll-Add-support-for-reading-absolute-symlinks.patch
+++ b/patches/ntdll-Junction_Points/0008-ntdll-Add-support-for-reading-absolute-symlinks.patch
@@ -1,7 +1,7 @@
-From 58371a3c2d5fed81abc2b1ae6f79133dd57a873d Mon Sep 17 00:00:00 2001
+From 3595e892dbf4d5b123ce641b6ce72490cc3d782f Mon Sep 17 00:00:00 2001
 From: "Erich E. Hoover" <erich.e.hoover@gmail.com>
 Date: Wed, 13 Mar 2019 12:55:20 -0600
-Subject: [PATCH] ntdll: Add support for reading absolute symlinks.
+Subject: ntdll: Add support for reading absolute symlinks.
 
 Signed-off-by: Erich E. Hoover <erich.e.hoover@gmail.com>
 ---
@@ -10,10 +10,10 @@ Signed-off-by: Erich E. Hoover <erich.e.hoover@gmail.com>
  2 files changed, 34 insertions(+), 1 deletion(-)
 
 diff --git a/dlls/ntdll/tests/file.c b/dlls/ntdll/tests/file.c
-index f91bb40a133..5d3411d242e 100644
+index 986468a1495..5b7bdf7ddfd 100644
 --- a/dlls/ntdll/tests/file.c
 +++ b/dlls/ntdll/tests/file.c
-@@ -5207,7 +5207,6 @@ static void test_reparse_points(void)
+@@ -5208,7 +5208,6 @@ static void test_reparse_points(void)
      ok(dwret == STATUS_SUCCESS, "Failed to get symlink folder's attributes (0x%x).\n", dwret);
      buffer_len = build_reparse_buffer(nameW.Buffer, IO_REPARSE_TAG_SYMLINK, &buffer);
      bret = DeviceIoControl(handle, FSCTL_SET_REPARSE_POINT, (LPVOID)buffer, buffer_len, NULL, 0, &dwret, 0);
@@ -21,7 +21,7 @@ index f91bb40a133..5d3411d242e 100644
      ok(bret, "Failed to create symlink! (0x%x)\n", GetLastError());
  
      /* Check the file attributes of the symlink */
-@@ -5215,6 +5214,18 @@ static void test_reparse_points(void)
+@@ -5216,6 +5215,18 @@ static void test_reparse_points(void)
      ok(dwret != (DWORD)~0, "Symlink doesn't exist (attributes: 0x%x)!\n", dwret);
      ok(dwret & FILE_ATTRIBUTE_REPARSE_POINT, "File is not a symlink! (attributes: %d)\n", dwret);
  
@@ -41,18 +41,18 @@ index f91bb40a133..5d3411d242e 100644
      /* Cleanup */
      pRtlFreeUnicodeString(&nameW);
 diff --git a/dlls/ntdll/unix/file.c b/dlls/ntdll/unix/file.c
-index 15f6a006145..9cecf44db82 100644
+index b8dc02127ba..cd14a2e24c3 100644
 --- a/dlls/ntdll/unix/file.c
 +++ b/dlls/ntdll/unix/file.c
-@@ -5748,6 +5748,7 @@ NTSTATUS FILE_GetSymlink(HANDLE handle, REPARSE_DATA_BUFFER *buffer, ULONG out_s
-     UNICODE_STRING nt_dest;
+@@ -5746,6 +5746,7 @@ NTSTATUS FILE_GetSymlink(HANDLE handle, REPARSE_DATA_BUFFER *buffer, ULONG out_s
+     int unix_dest_len;
      DWORD max_length;
      NTSTATUS status;
 +    ULONG flags = 0;
+     WCHAR *nt_dest;
      INT prefix_len;
      ssize_t ret;
-     char *p;
-@@ -5794,6 +5795,17 @@ NTSTATUS FILE_GetSymlink(HANDLE handle, REPARSE_DATA_BUFFER *buffer, ULONG out_s
+@@ -5790,6 +5791,17 @@ NTSTATUS FILE_GetSymlink(HANDLE handle, REPARSE_DATA_BUFFER *buffer, ULONG out_s
          }
          buffer->ReparseTag |= (val << i);
      }
@@ -67,20 +67,20 @@ index 15f6a006145..9cecf44db82 100644
 +            goto cleanup;
 +        }
 +    }
-     unix_dest.Length -= (p - unix_dest.Buffer);
-     memmove(unix_dest.Buffer, p, unix_dest.Length);
+     unix_dest_len -= (p - unix_dest);
+     memmove(unix_dest, p, unix_dest_len);
  
-@@ -5812,6 +5824,16 @@ NTSTATUS FILE_GetSymlink(HANDLE handle, REPARSE_DATA_BUFFER *buffer, ULONG out_s
-         buffer->MountPointReparseBuffer.PrintNameLength = nt_dest.Length - prefix_len*sizeof(WCHAR);
+@@ -5822,6 +5834,16 @@ NTSTATUS FILE_GetSymlink(HANDLE handle, REPARSE_DATA_BUFFER *buffer, ULONG out_s
+         buffer->MountPointReparseBuffer.PrintNameLength = nt_dest_len - prefix_len*sizeof(WCHAR);
          print_name = &buffer->MountPointReparseBuffer.PathBuffer[buffer->MountPointReparseBuffer.PrintNameOffset/sizeof(WCHAR)];
          break;
 +    case IO_REPARSE_TAG_SYMLINK:
 +        max_length = out_size-FIELD_OFFSET(typeof(*buffer), SymbolicLinkReparseBuffer.PathBuffer[1]);
 +        buffer->SymbolicLinkReparseBuffer.SubstituteNameOffset = 0;
-+        buffer->SymbolicLinkReparseBuffer.SubstituteNameLength = nt_dest.Length;
++        buffer->SymbolicLinkReparseBuffer.SubstituteNameLength = nt_dest_len;
 +        subst_name = &buffer->SymbolicLinkReparseBuffer.PathBuffer[buffer->SymbolicLinkReparseBuffer.SubstituteNameOffset/sizeof(WCHAR)];
-+        buffer->SymbolicLinkReparseBuffer.PrintNameOffset = nt_dest.Length + sizeof(WCHAR);
-+        buffer->SymbolicLinkReparseBuffer.PrintNameLength = nt_dest.Length - prefix_len*sizeof(WCHAR);
++        buffer->SymbolicLinkReparseBuffer.PrintNameOffset = nt_dest_len + sizeof(WCHAR);
++        buffer->SymbolicLinkReparseBuffer.PrintNameLength = nt_dest_len - prefix_len*sizeof(WCHAR);
 +        print_name = &buffer->SymbolicLinkReparseBuffer.PathBuffer[buffer->SymbolicLinkReparseBuffer.PrintNameOffset/sizeof(WCHAR)];
 +        buffer->SymbolicLinkReparseBuffer.Flags = flags;
 +        break;
@@ -88,5 +88,5 @@ index 15f6a006145..9cecf44db82 100644
          /* unrecognized (regular) files should probably be treated as symlinks */
          WARN("unrecognized symbolic link\n");
 -- 
-2.27.0
+2.17.1
 
diff --git a/patches/ntdll-Junction_Points/0009-ntdll-Add-support-for-deleting-symlinks.patch b/patches/ntdll-Junction_Points/0009-ntdll-Add-support-for-deleting-symlinks.patch
index f8641062a..2aa197c1a 100644
--- a/patches/ntdll-Junction_Points/0009-ntdll-Add-support-for-deleting-symlinks.patch
+++ b/patches/ntdll-Junction_Points/0009-ntdll-Add-support-for-deleting-symlinks.patch
@@ -1,7 +1,7 @@
-From 478bca2da5a745e14d4fd16a3d4415cf08855308 Mon Sep 17 00:00:00 2001
+From 248faa7fd14b6ff0028c7762edd0bb8ad564b9ca Mon Sep 17 00:00:00 2001
 From: "Erich E. Hoover" <erich.e.hoover@gmail.com>
 Date: Wed, 13 Mar 2019 13:02:22 -0600
-Subject: [PATCH] ntdll: Add support for deleting symlinks.
+Subject: ntdll: Add support for deleting symlinks.
 
 Signed-off-by: Erich E. Hoover <erich.e.hoover@gmail.com>
 ---
@@ -10,10 +10,10 @@ Signed-off-by: Erich E. Hoover <erich.e.hoover@gmail.com>
  2 files changed, 17 insertions(+)
 
 diff --git a/dlls/ntdll/tests/file.c b/dlls/ntdll/tests/file.c
-index 5d3411d242e..df912e18496 100644
+index 5b7bdf7ddfd..b6a58c3f2a7 100644
 --- a/dlls/ntdll/tests/file.c
 +++ b/dlls/ntdll/tests/file.c
-@@ -5224,6 +5224,22 @@ static void test_reparse_points(void)
+@@ -5225,6 +5225,22 @@ static void test_reparse_points(void)
      ok(bret, "Failed to read symlink!\n");
      ok((memcmp(dest, nameW.Buffer, string_len) == 0), "Symlink destination does not match ('%s' != '%s')!\n",
                                                        wine_dbgstr_w(dest), wine_dbgstr_w(nameW.Buffer));
@@ -37,10 +37,10 @@ index 5d3411d242e..df912e18496 100644
  
  cleanup:
 diff --git a/dlls/ntdll/unix/file.c b/dlls/ntdll/unix/file.c
-index 9cecf44db82..e35ea49d17f 100644
+index cd14a2e24c3..232cbb36f42 100644
 --- a/dlls/ntdll/unix/file.c
 +++ b/dlls/ntdll/unix/file.c
-@@ -6010,6 +6010,7 @@ NTSTATUS WINAPI NtFsControlFile( HANDLE handle, HANDLE event, PIO_APC_ROUTINE ap
+@@ -6037,6 +6037,7 @@ NTSTATUS WINAPI NtFsControlFile( HANDLE handle, HANDLE event, PIO_APC_ROUTINE ap
          switch(buffer->ReparseTag)
          {
          case IO_REPARSE_TAG_MOUNT_POINT:
@@ -49,5 +49,5 @@ index 9cecf44db82..e35ea49d17f 100644
              break;
          default:
 -- 
-2.27.0
+2.17.1
 
diff --git a/patches/ntdll-Junction_Points/0010-ntdll-Add-support-for-relative-symlink-creation.patch b/patches/ntdll-Junction_Points/0010-ntdll-Add-support-for-relative-symlink-creation.patch
index 5804ab701..60397a198 100644
--- a/patches/ntdll-Junction_Points/0010-ntdll-Add-support-for-relative-symlink-creation.patch
+++ b/patches/ntdll-Junction_Points/0010-ntdll-Add-support-for-relative-symlink-creation.patch
@@ -1,20 +1,20 @@
-From 2fe2cb6a67925f22e9b3fbffefd20c2fe0040775 Mon Sep 17 00:00:00 2001
+From 9baddd14dceb102d123a6470a12e43ffd4e1e4de Mon Sep 17 00:00:00 2001
 From: "Erich E. Hoover" <erich.e.hoover@gmail.com>
 Date: Thu, 11 Apr 2019 12:16:49 -0600
-Subject: [PATCH] ntdll: Add support for relative symlink creation.
+Subject: ntdll: Add support for relative symlink creation.
 
 Signed-off-by: Erich E. Hoover <erich.e.hoover@gmail.com>
 ---
- dlls/ntdll/tests/file.c | 30 ++++++++++++++++-----
- dlls/ntdll/unix/file.c  | 58 ++++++++++++++++++++++++++++++++++++-----
- include/ntifs.h         |  2 ++
- 3 files changed, 77 insertions(+), 13 deletions(-)
+ dlls/ntdll/tests/file.c | 30 +++++++++++---
+ dlls/ntdll/unix/file.c  | 90 +++++++++++++++++++++++++++++++++++++----
+ include/ntifs.h         |  2 +
+ 3 files changed, 109 insertions(+), 13 deletions(-)
 
 diff --git a/dlls/ntdll/tests/file.c b/dlls/ntdll/tests/file.c
-index b93ba0e87ed..975a72e7103 100644
+index b6a58c3f2a7..9b510fe9057 100644
 --- a/dlls/ntdll/tests/file.c
 +++ b/dlls/ntdll/tests/file.c
-@@ -4972,7 +4972,8 @@ static void test_file_readonly_access(void)
+@@ -4973,7 +4973,8 @@ static void test_file_readonly_access(void)
      DeleteFileW(path);
  }
  
@@ -24,7 +24,7 @@ index b93ba0e87ed..975a72e7103 100644
  {
      static INT header_size = offsetof(REPARSE_DATA_BUFFER, GenericReparseBuffer);
      INT buffer_size, struct_size, data_size, string_len, prefix_len;
-@@ -4990,7 +4991,7 @@ static INT build_reparse_buffer(const WCHAR *filename, ULONG tag, REPARSE_DATA_B
+@@ -4991,7 +4992,7 @@ static INT build_reparse_buffer(const WCHAR *filename, ULONG tag, REPARSE_DATA_B
      default:
          return 0;
      }
@@ -33,7 +33,7 @@ index b93ba0e87ed..975a72e7103 100644
      string_len = lstrlenW(&filename[prefix_len]);
      data_size = (prefix_len + 2 * string_len + 2) * sizeof(WCHAR);
      buffer_size = struct_size + data_size;
-@@ -5010,6 +5011,7 @@ static INT build_reparse_buffer(const WCHAR *filename, ULONG tag, REPARSE_DATA_B
+@@ -5011,6 +5012,7 @@ static INT build_reparse_buffer(const WCHAR *filename, ULONG tag, REPARSE_DATA_B
          buffer->SymbolicLinkReparseBuffer.SubstituteNameLength = (prefix_len + string_len) * sizeof(WCHAR);
          buffer->SymbolicLinkReparseBuffer.PrintNameOffset = (prefix_len + string_len + 1) * sizeof(WCHAR);
          buffer->SymbolicLinkReparseBuffer.PrintNameLength = string_len * sizeof(WCHAR);
@@ -41,7 +41,7 @@ index b93ba0e87ed..975a72e7103 100644
          subst_dest = &buffer->SymbolicLinkReparseBuffer.PathBuffer[0];
          print_dest = &buffer->SymbolicLinkReparseBuffer.PathBuffer[prefix_len + string_len + 1];
          break;
-@@ -5087,7 +5089,7 @@ static void test_reparse_points(void)
+@@ -5088,7 +5090,7 @@ static void test_reparse_points(void)
      }
      dwret = NtQueryInformationFile(handle, &iosb, &old_attrib, sizeof(old_attrib), FileBasicInformation);
      ok(dwret == STATUS_SUCCESS, "Failed to get junction point folder's attributes (0x%x).\n", dwret);
@@ -50,7 +50,7 @@ index b93ba0e87ed..975a72e7103 100644
      bret = DeviceIoControl(handle, FSCTL_SET_REPARSE_POINT, (LPVOID)buffer, buffer_len, NULL, 0, &dwret, 0);
      ok(bret, "Failed to create junction point! (0x%x)\n", GetLastError());
  
-@@ -5128,7 +5130,7 @@ static void test_reparse_points(void)
+@@ -5129,7 +5131,7 @@ static void test_reparse_points(void)
      HeapFree(GetProcessHeap(), 0, buffer);
      handle = CreateFileW(reparse_path, GENERIC_READ | GENERIC_WRITE, 0, 0, OPEN_EXISTING,
                              FILE_FLAG_BACKUP_SEMANTICS | FILE_FLAG_OPEN_REPARSE_POINT, 0);
@@ -59,7 +59,7 @@ index b93ba0e87ed..975a72e7103 100644
      bret = DeviceIoControl(handle, FSCTL_SET_REPARSE_POINT, (LPVOID)buffer, buffer_len, NULL, 0, &dwret, 0);
      ok(bret, "Failed to create junction point! (0x%x)\n", GetLastError());
      CloseHandle(handle);
-@@ -5143,7 +5145,7 @@ static void test_reparse_points(void)
+@@ -5144,7 +5146,7 @@ static void test_reparse_points(void)
      ok(bret, "Failed to create junction point target directory.\n");
      handle = CreateFileW(reparse_path, GENERIC_READ | GENERIC_WRITE, 0, 0, OPEN_EXISTING,
                           FILE_FLAG_BACKUP_SEMANTICS | FILE_FLAG_OPEN_REPARSE_POINT, 0);
@@ -68,7 +68,7 @@ index b93ba0e87ed..975a72e7103 100644
      bret = DeviceIoControl(handle, FSCTL_SET_REPARSE_POINT, (LPVOID)buffer, buffer_len, NULL, 0, &dwret, 0);
      ok(bret, "Failed to create junction point! (0x%x)\n", GetLastError());
      CloseHandle(handle);
-@@ -5205,7 +5207,7 @@ static void test_reparse_points(void)
+@@ -5206,7 +5208,7 @@ static void test_reparse_points(void)
      }
      dwret = NtQueryInformationFile(handle, &iosb, &old_attrib, sizeof(old_attrib), FileBasicInformation);
      ok(dwret == STATUS_SUCCESS, "Failed to get symlink folder's attributes (0x%x).\n", dwret);
@@ -77,7 +77,7 @@ index b93ba0e87ed..975a72e7103 100644
      bret = DeviceIoControl(handle, FSCTL_SET_REPARSE_POINT, (LPVOID)buffer, buffer_len, NULL, 0, &dwret, 0);
      ok(bret, "Failed to create symlink! (0x%x)\n", GetLastError());
  
-@@ -5242,6 +5244,22 @@ static void test_reparse_points(void)
+@@ -5243,6 +5245,22 @@ static void test_reparse_points(void)
         "Symlink folder's access time does not match.\n");
      CloseHandle(handle);
  
@@ -101,19 +101,20 @@ index b93ba0e87ed..975a72e7103 100644
      /* Cleanup */
      pRtlFreeUnicodeString(&nameW);
 diff --git a/dlls/ntdll/unix/file.c b/dlls/ntdll/unix/file.c
-index fe945cef477..a1d1863133a 100644
+index 232cbb36f42..3652fbb1a0d 100644
 --- a/dlls/ntdll/unix/file.c
 +++ b/dlls/ntdll/unix/file.c
-@@ -5669,16 +5669,19 @@ static void ignore_server_ioctl_struct_holes( ULONG code, const void *in_buffer,
+@@ -5600,17 +5600,20 @@ static void ignore_server_ioctl_struct_holes( ULONG code, const void *in_buffer,
   */
  NTSTATUS FILE_CreateSymlink(HANDLE handle, REPARSE_DATA_BUFFER *buffer)
  {
 -    BOOL src_allocated = FALSE, dest_allocated = FALSE, tempdir_created = FALSE;
 +    BOOL src_allocated = FALSE, path_allocated = FALSE, dest_allocated = FALSE;
 +    BOOL nt_dest_allocated = FALSE, tempdir_created = FALSE;
++    char *unix_src, *unix_dest, *unix_path = NULL;
      char tmpdir[PATH_MAX], tmplink[PATH_MAX], *d;
--    ANSI_STRING unix_src, unix_dest;
-+    ANSI_STRING unix_src, unix_dest, unix_path;
+     SIZE_T unix_dest_len = PATH_MAX;
+-    char *unix_src, *unix_dest;
      char magic_dest[PATH_MAX];
      int dest_fd, needs_close;
 +    int relative_offset = 0;
@@ -126,7 +127,7 @@ index fe945cef477..a1d1863133a 100644
      int i;
  
      switch(buffer->ReparseTag)
-@@ -5687,11 +5690,13 @@ NTSTATUS FILE_CreateSymlink(HANDLE handle, REPARSE_DATA_BUFFER *buffer)
+@@ -5619,11 +5622,13 @@ NTSTATUS FILE_CreateSymlink(HANDLE handle, REPARSE_DATA_BUFFER *buffer)
          dest_len = buffer->MountPointReparseBuffer.SubstituteNameLength;
          offset = buffer->MountPointReparseBuffer.SubstituteNameOffset;
          dest = &buffer->MountPointReparseBuffer.PathBuffer[offset];
@@ -140,7 +141,7 @@ index fe945cef477..a1d1863133a 100644
          break;
      default:
          return STATUS_NOT_IMPLEMENTED;
-@@ -5703,17 +5708,54 @@ NTSTATUS FILE_CreateSymlink(HANDLE handle, REPARSE_DATA_BUFFER *buffer)
+@@ -5635,8 +5640,64 @@ NTSTATUS FILE_CreateSymlink(HANDLE handle, REPARSE_DATA_BUFFER *buffer)
      if ((status = server_get_unix_name( handle, &unix_src )))
          goto cleanup;
      src_allocated = TRUE;
@@ -148,24 +149,54 @@ index fe945cef477..a1d1863133a 100644
 -    nt_dest.Length = dest_len;
 +    if (flags == SYMLINK_FLAG_RELATIVE)
 +    {
-+        UNICODE_STRING nt_path;
++        SIZE_T nt_path_len = PATH_MAX, unix_path_len = PATH_MAX;
++        WCHAR *nt_path;
 +
-+        unix_path.MaximumLength = strlen(unix_src.Buffer) + 2;
-+        unix_path.Buffer = RtlAllocateHeap( GetProcessHeap(), 0, unix_path.MaximumLength );
++        /* resolve the NT path of the source */
++        unix_path = malloc( strlen(unix_src) + 2 );
 +        path_allocated = TRUE;
-+        strcpy( unix_path.Buffer, unix_src.Buffer );
-+        d = dirname( unix_path.Buffer );
-+        if (d != unix_path.Buffer) strcpy( unix_path.Buffer, d );
-+        strcat( unix_path.Buffer, "/");
-+        unix_path.Length = strlen( unix_path.Buffer );
-+        if ((status = unix_to_nt_file_name( &unix_path, &nt_path )))
++        strcpy( unix_path, unix_src );
++        d = dirname( unix_path );
++        if (d != unix_path) strcpy( unix_path, d );
++        strcat( unix_path, "/");
++        for (;;)
++        {
++            nt_path = malloc( nt_path_len * sizeof(WCHAR) );
++            if (!nt_path)
++            {
++                status = STATUS_NO_MEMORY;
++                goto cleanup;
++            }
++            status = wine_unix_to_nt_file_name( unix_path, nt_path, &nt_path_len );
++            if (status != STATUS_BUFFER_TOO_SMALL) break;
++            free( nt_path );
++        }
++        if (status != STATUS_SUCCESS)
 +            goto cleanup;
-+        nt_dest.MaximumLength = dest_len + (wcslen( nt_path.Buffer ) + 1) * sizeof(WCHAR);
++        free(unix_path);
++        /* re-resolve the unix path for the source */
++        for (;;)
++        {
++            UNICODE_STRING nt_path_tmp;
++            unix_path = malloc( unix_path_len );
++            if (!unix_path)
++            {
++                status = STATUS_NO_MEMORY;
++                goto cleanup;
++            }
++            nt_path_tmp.Buffer = nt_path;
++            nt_path_tmp.Length = lstrlenW(nt_path) * sizeof(WCHAR);
++            status = wine_nt_to_unix_file_name( &nt_path_tmp, unix_path, &unix_path_len, FALSE );
++            if (status != STATUS_BUFFER_TOO_SMALL) break;
++            free( unix_path );
++        }
++        /* append the destination */
++        nt_dest.MaximumLength = dest_len + (lstrlenW( nt_path ) + 1) * sizeof(WCHAR);
 +        nt_dest.Buffer = RtlAllocateHeap( GetProcessHeap(), 0, nt_dest.MaximumLength );
-+        wcscpy( nt_dest.Buffer, nt_path.Buffer );
-+        RtlFreeUnicodeString( &nt_path );
-+        memcpy( &nt_dest.Buffer[wcslen(nt_dest.Buffer)], dest, dest_len + sizeof(WCHAR));
-+        nt_dest.Length = wcslen( nt_dest.Buffer ) * sizeof(WCHAR);
++        lstrcpyW( nt_dest.Buffer, nt_path );
++        free( nt_path );
++        memcpy( &nt_dest.Buffer[lstrlenW(nt_dest.Buffer)], dest, dest_len + sizeof(WCHAR));
++        nt_dest.Length = lstrlenW( nt_dest.Buffer ) * sizeof(WCHAR);
 +    }
 +    else
 +    {
@@ -173,22 +204,27 @@ index fe945cef477..a1d1863133a 100644
 +        nt_dest.Length = dest_len;
 +    }
 +    nt_dest_allocated = TRUE;
-     status = nt_to_unix_file_name( &nt_dest, &unix_dest, 0 );
++    /* resolve the NT path of the destination */
+     for (;;)
+     {
+         unix_dest = malloc( unix_dest_len );
+@@ -5652,11 +5713,24 @@ NTSTATUS FILE_CreateSymlink(HANDLE handle, REPARSE_DATA_BUFFER *buffer)
      if (status != STATUS_SUCCESS && status != STATUS_NO_SUCH_FILE)
          goto cleanup;
      dest_allocated = TRUE;
++    /* check that the source and destination paths are the same up to the relative path */
 +    if (flags == SYMLINK_FLAG_RELATIVE)
 +    {
-+        relative_offset = strlen(unix_path.Buffer);
-+        if (strncmp( unix_path.Buffer, unix_dest.Buffer, relative_offset ) != 0)
++        relative_offset = strlen(unix_path);
++        if (strncmp( unix_path, unix_dest, relative_offset ) != 0)
 +        {
 +            status = STATUS_IO_REPARSE_DATA_INVALID;
 +            goto cleanup;
 +        }
 +    }
  
--    TRACE("Linking %s to %s\n", unix_src.Buffer, unix_dest.Buffer);
-+    TRACE("Linking %s to %s\n", unix_src.Buffer, &unix_dest.Buffer[relative_offset]);
+-    TRACE( "Linking %s to %s\n", unix_src, unix_dest );
++    TRACE( "Linking %s to %s\n", unix_src, &unix_dest[relative_offset] );
  
      /* Encode the reparse tag into the symlink */
 -    strcpy( magic_dest, "/" );
@@ -199,23 +235,23 @@ index fe945cef477..a1d1863133a 100644
      for (i = 0; i < sizeof(ULONG)*8; i++)
      {
          if ((buffer->ReparseTag >> i) & 1)
-@@ -5732,7 +5774,7 @@ NTSTATUS FILE_CreateSymlink(HANDLE handle, REPARSE_DATA_BUFFER *buffer)
+@@ -5675,7 +5749,7 @@ NTSTATUS FILE_CreateSymlink(HANDLE handle, REPARSE_DATA_BUFFER *buffer)
              strcat( magic_dest, "." );
          strcat( magic_dest, "/" );
      }
--    strcat( magic_dest, unix_dest.Buffer );
-+    strcat( magic_dest, &unix_dest.Buffer[relative_offset] );
+-    strcat( magic_dest, unix_dest );
++    strcat( magic_dest, &unix_dest[relative_offset] );
  
      /* Produce the link in a temporary location in the same folder */
-     strcpy( tmpdir, unix_src.Buffer );
-@@ -5782,7 +5824,9 @@ NTSTATUS FILE_CreateSymlink(HANDLE handle, REPARSE_DATA_BUFFER *buffer)
+     strcpy( tmpdir, unix_src );
+@@ -5725,7 +5799,9 @@ NTSTATUS FILE_CreateSymlink(HANDLE handle, REPARSE_DATA_BUFFER *buffer)
  
  cleanup:
      if (tempdir_created) rmdir( tmpdir );
-+    if (path_allocated) RtlFreeAnsiString( &unix_path );
-     if (dest_allocated) RtlFreeAnsiString( &unix_dest );
++    if (path_allocated) free( unix_path );
+     if (dest_allocated) free( unix_dest );
 +    if (nt_dest_allocated) RtlFreeUnicodeString( &nt_dest );
-     if (src_allocated) RtlFreeAnsiString( &unix_src );
+     if (src_allocated) free( unix_src );
      if (needs_close) close( dest_fd );
      return status;
 diff --git a/include/ntifs.h b/include/ntifs.h
@@ -230,5 +266,5 @@ index ab3273d3f81..0d02225bc4f 100644
 +
  #endif /* __WINE_NTIFS_H */
 -- 
-2.27.0
+2.17.1
 
diff --git a/patches/ntdll-Junction_Points/0011-ntdll-Add-support-for-reading-relative-symlinks.patch b/patches/ntdll-Junction_Points/0011-ntdll-Add-support-for-reading-relative-symlinks.patch
index 9a8ac7f0d..7afe8a5b3 100644
--- a/patches/ntdll-Junction_Points/0011-ntdll-Add-support-for-reading-relative-symlinks.patch
+++ b/patches/ntdll-Junction_Points/0011-ntdll-Add-support-for-reading-relative-symlinks.patch
@@ -1,19 +1,19 @@
-From af4840c79a9958609575553aaf8bdf13dabe68ef Mon Sep 17 00:00:00 2001
+From 5658e73f218d01b0e11bc4575cf0502b8235ec2c Mon Sep 17 00:00:00 2001
 From: "Erich E. Hoover" <erich.e.hoover@gmail.com>
 Date: Thu, 11 Apr 2019 12:31:16 -0600
-Subject: [PATCH] ntdll: Add support for reading relative symlinks.
+Subject: ntdll: Add support for reading relative symlinks.
 
 Signed-off-by: Erich E. Hoover <erich.e.hoover@gmail.com>
 ---
- dlls/ntdll/tests/file.c | 13 +++++++++++-
- dlls/ntdll/unix/file.c  | 44 ++++++++++++++++++++++++++++++++++++++++-
- 2 files changed, 55 insertions(+), 2 deletions(-)
+ dlls/ntdll/tests/file.c | 13 ++++++++-
+ dlls/ntdll/unix/file.c  | 61 ++++++++++++++++++++++++++++++++++++++++-
+ 2 files changed, 72 insertions(+), 2 deletions(-)
 
 diff --git a/dlls/ntdll/tests/file.c b/dlls/ntdll/tests/file.c
-index 515a84da4d6..30ab4110105 100644
+index 9b510fe9057..0db7372a0c8 100644
 --- a/dlls/ntdll/tests/file.c
 +++ b/dlls/ntdll/tests/file.c
-@@ -5257,9 +5257,20 @@ static void test_reparse_points(void)
+@@ -5258,9 +5258,20 @@ static void test_reparse_points(void)
      ok(dwret == STATUS_SUCCESS, "Failed to get symlink folder's attributes (0x%x).\n", dwret);
      buffer_len = build_reparse_buffer(targetW, IO_REPARSE_TAG_SYMLINK, SYMLINK_FLAG_RELATIVE, &buffer);
      bret = DeviceIoControl(handle, FSCTL_SET_REPARSE_POINT, (LPVOID)buffer, buffer_len, NULL, 0, &dwret, 0);
@@ -36,21 +36,21 @@ index 515a84da4d6..30ab4110105 100644
      /* Cleanup */
      pRtlFreeUnicodeString(&nameW);
 diff --git a/dlls/ntdll/unix/file.c b/dlls/ntdll/unix/file.c
-index eb39dc0873b..d19b48d4224 100644
+index 3652fbb1a0d..e62a2529bb2 100644
 --- a/dlls/ntdll/unix/file.c
 +++ b/dlls/ntdll/unix/file.c
-@@ -5790,6 +5790,7 @@ NTSTATUS FILE_GetSymlink(HANDLE handle, REPARSE_DATA_BUFFER *buffer, ULONG out_s
+@@ -5820,6 +5820,7 @@ NTSTATUS FILE_GetSymlink(HANDLE handle, REPARSE_DATA_BUFFER *buffer, ULONG out_s
      BOOL dest_allocated = FALSE;
      int dest_fd, needs_close;
-     UNICODE_STRING nt_dest;
+     int unix_dest_len;
 +    int path_len = 0;
      DWORD max_length;
      NTSTATUS status;
      ULONG flags = 0;
-@@ -5817,6 +5818,11 @@ NTSTATUS FILE_GetSymlink(HANDLE handle, REPARSE_DATA_BUFFER *buffer, ULONG out_s
+@@ -5845,6 +5846,11 @@ NTSTATUS FILE_GetSymlink(HANDLE handle, REPARSE_DATA_BUFFER *buffer, ULONG out_s
  
      /* Decode the reparse tag from the symlink */
-     p = unix_dest.Buffer;
+     p = unix_dest;
 +    if (*p == '.')
 +    {
 +        flags = SYMLINK_FLAG_RELATIVE;
@@ -59,54 +59,75 @@ index eb39dc0873b..d19b48d4224 100644
      if (*p++ != '/')
      {
          status = STATUS_NOT_IMPLEMENTED;
-@@ -5853,10 +5859,46 @@ NTSTATUS FILE_GetSymlink(HANDLE handle, REPARSE_DATA_BUFFER *buffer, ULONG out_s
-     unix_dest.Length -= (p - unix_dest.Buffer);
-     memmove(unix_dest.Buffer, p, unix_dest.Length);
+@@ -5881,6 +5887,25 @@ NTSTATUS FILE_GetSymlink(HANDLE handle, REPARSE_DATA_BUFFER *buffer, ULONG out_s
+     unix_dest_len -= (p - unix_dest);
+     memmove(unix_dest, p, unix_dest_len);
  
 +    /* convert the relative path into an absolute path */
 +    if (flags == SYMLINK_FLAG_RELATIVE)
 +    {
-+        int offset = unix_src.Length + 2;
++        int unix_src_len = strlen(unix_src);
++        int offset = unix_src_len + 2;
 +        char *d;
-+        memcpy( &unix_dest.Buffer[offset], unix_dest.Buffer, unix_dest.Length );
-+        unix_dest.Buffer[offset+unix_dest.Length] = 0;
-+        memcpy( unix_dest.Buffer, unix_src.Buffer, unix_src.Length );
-+        unix_dest.Buffer[unix_src.Length] = 0;
-+        d = dirname( unix_dest.Buffer );
-+        if (d != unix_dest.Buffer) strcpy( unix_dest.Buffer, d );
-+        strcat( unix_dest.Buffer, "/" );
-+        path_len = strlen( unix_dest.Buffer );
-+        memmove( &unix_dest.Buffer[path_len], &unix_dest.Buffer[offset], unix_dest.Length + 1 );
-+        unix_dest.Length = strlen( unix_dest.Buffer );
++
++        memcpy( &unix_dest[offset], unix_dest, unix_dest_len );
++        unix_dest[offset+unix_dest_len] = 0;
++        memcpy( unix_dest, unix_src, unix_src_len );
++        unix_dest[unix_src_len] = 0;
++        d = dirname( unix_dest );
++        if (d != unix_dest) strcpy( unix_dest, d );
++        strcat( unix_dest, "/" );
++        path_len = strlen( unix_dest );
++        memmove( &unix_dest[path_len], &unix_dest[offset], unix_dest_len + 1 );
++        unix_dest_len = strlen( unix_dest );
 +    }
-     if ((status = unix_to_nt_file_name( &unix_dest, &nt_dest )))
++    /* resolve the NT path */
+     for (;;)
+     {
+         nt_dest = malloc( nt_dest_len * sizeof(WCHAR) );
+@@ -5898,7 +5923,41 @@ NTSTATUS FILE_GetSymlink(HANDLE handle, REPARSE_DATA_BUFFER *buffer, ULONG out_s
          goto cleanup;
+     nt_dest_len *= sizeof(WCHAR);
+ 
+-    prefix_len = strlen("\\??\\");
 +    /* remove the relative path from the NT path */
 +    if (flags == SYMLINK_FLAG_RELATIVE)
 +    {
-+        UNICODE_STRING nt_path;
++        SIZE_T nt_path_len = PATH_MAX;
 +        int relative_offset;
++        WCHAR *nt_path;
 +
-+        unix_dest.Length = path_len;
-+        if ((status = unix_to_nt_file_name( &unix_dest, &nt_path )))
++        unix_dest_len = path_len;
++        for (;;)
++        {
++            nt_path = malloc( nt_path_len * sizeof(WCHAR) );
++            if (!nt_path)
++            {
++                status = STATUS_NO_MEMORY;
++                goto cleanup;
++            }
++            status = wine_unix_to_nt_file_name( unix_dest, nt_path, &nt_path_len );
++            if (status != STATUS_BUFFER_TOO_SMALL) break;
++            free( nt_path );
++        }
++        if (status != STATUS_SUCCESS)
 +            goto cleanup;
-+        relative_offset = wcslen( nt_path.Buffer );
-+        if (wcsncmp( nt_path.Buffer, nt_dest.Buffer, relative_offset ) != 0)
++        relative_offset = lstrlenW( nt_path );
++        if (wcsnicmp( nt_path, nt_dest, relative_offset ) != 0)
 +        {
-+            RtlFreeUnicodeString( &nt_path );
++            free( nt_path );
 +            status = STATUS_IO_REPARSE_DATA_INVALID;
 +            goto cleanup;
 +        }
-+        RtlFreeUnicodeString( &nt_path );
-+        nt_dest.Length = wcslen( &nt_dest.Buffer[relative_offset] ) * sizeof(WCHAR);
-+        memmove( nt_dest.Buffer, &nt_dest.Buffer[relative_offset], nt_dest.Length + sizeof(WCHAR) );
++        free( nt_path );
++        nt_dest_len = lstrlenW( &nt_dest[relative_offset] ) * sizeof(WCHAR);
++        memmove( nt_dest, &nt_dest[relative_offset], nt_dest_len + sizeof(WCHAR) );
 +    }
- 
--    prefix_len = strlen("\\??\\");
++
 +    prefix_len = (flags == SYMLINK_FLAG_RELATIVE) ? 0 : strlen("\\??\\");
      switch(buffer->ReparseTag)
      {
      case IO_REPARSE_TAG_MOUNT_POINT:
 -- 
-2.27.0
+2.17.1
 
diff --git a/patches/ntdll-Junction_Points/0012-ntdll-Add-support-for-file-symlinks.patch b/patches/ntdll-Junction_Points/0012-ntdll-Add-support-for-file-symlinks.patch
index 185e13e81..5b6dd9e48 100644
--- a/patches/ntdll-Junction_Points/0012-ntdll-Add-support-for-file-symlinks.patch
+++ b/patches/ntdll-Junction_Points/0012-ntdll-Add-support-for-file-symlinks.patch
@@ -1,7 +1,7 @@
-From 13ccfb68becff81e4a9cd94654ed51facbe96bb9 Mon Sep 17 00:00:00 2001
+From d98202d50cdb09fe199414b8a313fcf954725e2d Mon Sep 17 00:00:00 2001
 From: "Erich E. Hoover" <erich.e.hoover@gmail.com>
 Date: Thu, 11 Apr 2019 17:57:53 -0600
-Subject: [PATCH] ntdll: Add support for file symlinks.
+Subject: ntdll: Add support for file symlinks.
 
 Signed-off-by: Erich E. Hoover <erich.e.hoover@gmail.com>
 ---
@@ -10,10 +10,10 @@ Signed-off-by: Erich E. Hoover <erich.e.hoover@gmail.com>
  2 files changed, 51 insertions(+), 5 deletions(-)
 
 diff --git a/dlls/ntdll/tests/file.c b/dlls/ntdll/tests/file.c
-index 30ab4110105..ebeb1ec7713 100644
+index 0db7372a0c8..58fec76bec4 100644
 --- a/dlls/ntdll/tests/file.c
 +++ b/dlls/ntdll/tests/file.c
-@@ -5190,6 +5190,35 @@ static void test_reparse_points(void)
+@@ -5191,6 +5191,35 @@ static void test_reparse_points(void)
      /* Delete the junction point directory and create a blank slate for symlink tests */
      bret = RemoveDirectoryW(reparse_path);
      ok(bret, "Failed to delete junction point!\n");
@@ -50,10 +50,10 @@ index 30ab4110105..ebeb1ec7713 100644
      ok(bret, "Failed to create junction point directory.\n");
      dwret = GetFileAttributesW(reparse_path);
 diff --git a/dlls/ntdll/unix/file.c b/dlls/ntdll/unix/file.c
-index d19b48d4224..fb1e6bd3c1c 100644
+index e62a2529bb2..242d344e1f5 100644
 --- a/dlls/ntdll/unix/file.c
 +++ b/dlls/ntdll/unix/file.c
-@@ -5624,6 +5624,7 @@ NTSTATUS FILE_CreateSymlink(HANDLE handle, REPARSE_DATA_BUFFER *buffer)
+@@ -5610,6 +5610,7 @@ NTSTATUS FILE_CreateSymlink(HANDLE handle, REPARSE_DATA_BUFFER *buffer)
      int relative_offset = 0;
      UNICODE_STRING nt_dest;
      int dest_len, offset;
@@ -61,7 +61,7 @@ index d19b48d4224..fb1e6bd3c1c 100644
      NTSTATUS status;
      struct stat st;
      WCHAR *dest;
-@@ -5716,7 +5717,8 @@ NTSTATUS FILE_CreateSymlink(HANDLE handle, REPARSE_DATA_BUFFER *buffer)
+@@ -5745,7 +5746,8 @@ NTSTATUS FILE_CreateSymlink(HANDLE handle, REPARSE_DATA_BUFFER *buffer)
              status = errno_to_status( errno );
              goto cleanup;
          }
@@ -71,9 +71,9 @@ index d19b48d4224..fb1e6bd3c1c 100644
              strcat( magic_dest, "." );
          strcat( magic_dest, "/" );
      }
-@@ -5743,8 +5745,11 @@ NTSTATUS FILE_CreateSymlink(HANDLE handle, REPARSE_DATA_BUFFER *buffer)
+@@ -5772,8 +5774,11 @@ NTSTATUS FILE_CreateSymlink(HANDLE handle, REPARSE_DATA_BUFFER *buffer)
      /* Atomically move the link into position */
-     if (!renameat2( -1, tmplink, -1, unix_src.Buffer, RENAME_EXCHANGE ))
+     if (!renameat2( -1, tmplink, -1, unix_src, RENAME_EXCHANGE ))
      {
 -        /* success: link and folder have switched locations */
 -        rmdir( tmplink ); /* remove the folder (at link location) */
@@ -85,17 +85,17 @@ index d19b48d4224..fb1e6bd3c1c 100644
      }
      else if (errno == ENOSYS)
      {
-@@ -5953,6 +5958,7 @@ NTSTATUS FILE_RemoveSymlink(HANDLE handle, REPARSE_GUID_DATA_BUFFER *buffer)
+@@ -6011,6 +6016,7 @@ NTSTATUS FILE_RemoveSymlink(HANDLE handle, REPARSE_GUID_DATA_BUFFER *buffer)
+     char tmpdir[PATH_MAX], tmpfile[PATH_MAX], *d;
      BOOL tempdir_created = FALSE;
      int dest_fd, needs_close;
-     ANSI_STRING unix_name;
 +    BOOL is_dir = TRUE;
      NTSTATUS status;
+     char *unix_name;
      struct stat st;
+@@ -6023,12 +6029,13 @@ NTSTATUS FILE_RemoveSymlink(HANDLE handle, REPARSE_GUID_DATA_BUFFER *buffer)
  
-@@ -5964,12 +5970,13 @@ NTSTATUS FILE_RemoveSymlink(HANDLE handle, REPARSE_GUID_DATA_BUFFER *buffer)
- 
-     TRACE("Deleting symlink %s\n", unix_name.Buffer);
+     TRACE( "Deleting symlink %s\n", unix_name );
  
 -    /* Produce the directory in a temporary location in the same folder */
 +    /* Produce the file/directory in a temporary location in the same folder */
@@ -105,10 +105,10 @@ index d19b48d4224..fb1e6bd3c1c 100644
          goto cleanup;
      }
 +    is_dir = S_ISDIR(st.st_mode);
-     strcpy( tmpdir, unix_name.Buffer );
+     strcpy( tmpdir, unix_name );
      d = dirname( tmpdir);
      if (d != tmpdir) strcpy( tmpdir, d );
-@@ -5982,11 +5989,21 @@ NTSTATUS FILE_RemoveSymlink(HANDLE handle, REPARSE_GUID_DATA_BUFFER *buffer)
+@@ -6041,11 +6048,21 @@ NTSTATUS FILE_RemoveSymlink(HANDLE handle, REPARSE_GUID_DATA_BUFFER *buffer)
      tempdir_created = TRUE;
      strcpy( tmpfile, tmpdir );
      strcat( tmpfile, "/tmpfile" );
@@ -132,5 +132,5 @@ index d19b48d4224..fb1e6bd3c1c 100644
      lchown( tmpfile, st.st_uid, st.st_gid );
      /* Atomically move the directory into position */
 -- 
-2.27.0
+2.17.1
 
diff --git a/patches/ntdll-Junction_Points/0013-ntdll-Allow-creation-of-dangling-reparse-points-to-n.patch b/patches/ntdll-Junction_Points/0013-ntdll-Allow-creation-of-dangling-reparse-points-to-n.patch
index dc72ebb7a..9555993ba 100644
--- a/patches/ntdll-Junction_Points/0013-ntdll-Allow-creation-of-dangling-reparse-points-to-n.patch
+++ b/patches/ntdll-Junction_Points/0013-ntdll-Allow-creation-of-dangling-reparse-points-to-n.patch
@@ -1,8 +1,8 @@
-From c1f3ec8ecefd4488bd8f49da22deb2f4f56d489c Mon Sep 17 00:00:00 2001
+From 767c81a6bb76f0f852f4ba7260dc0c1b26b45e09 Mon Sep 17 00:00:00 2001
 From: "Erich E. Hoover" <erich.e.hoover@gmail.com>
 Date: Tue, 30 Apr 2019 16:24:54 -0600
-Subject: [PATCH] ntdll: Allow creation of dangling reparse points to
- non-existent paths.
+Subject: ntdll: Allow creation of dangling reparse points to non-existent
+ paths.
 
 Signed-off-by: Erich E. Hoover <erich.e.hoover@gmail.com>
 ---
@@ -11,10 +11,10 @@ Signed-off-by: Erich E. Hoover <erich.e.hoover@gmail.com>
  2 files changed, 15 insertions(+), 1 deletion(-)
 
 diff --git a/dlls/ntdll/unix/file.c b/dlls/ntdll/unix/file.c
-index 3cfd633df86..fc79a2fa735 100644
+index 242d344e1f5..248bda3d3ce 100644
 --- a/dlls/ntdll/unix/file.c
 +++ b/dlls/ntdll/unix/file.c
-@@ -3273,6 +3273,19 @@ static NTSTATUS lookup_unix_name( const WCHAR *name, int name_len, char **buffer
+@@ -3154,6 +3154,19 @@ static NTSTATUS lookup_unix_name( const WCHAR *name, int name_len, char **buffer
                  status = STATUS_OBJECT_NAME_COLLISION;
              }
          }
@@ -34,17 +34,17 @@ index 3cfd633df86..fc79a2fa735 100644
  
          if (status != STATUS_SUCCESS) break;
  
-@@ -5736,7 +5749,7 @@ NTSTATUS FILE_CreateSymlink(HANDLE handle, REPARSE_DATA_BUFFER *buffer)
-         nt_dest.Length = dest_len;
+@@ -5707,7 +5720,7 @@ NTSTATUS FILE_CreateSymlink(HANDLE handle, REPARSE_DATA_BUFFER *buffer)
+             status = STATUS_NO_MEMORY;
+             goto cleanup;
+         }
+-        status = wine_nt_to_unix_file_name( &nt_dest, unix_dest, &unix_dest_len, FALSE );
++        status = wine_nt_to_unix_file_name( &nt_dest, unix_dest, &unix_dest_len, FILE_WINE_PATH );
+         if (status != STATUS_BUFFER_TOO_SMALL) break;
+         free( unix_dest );
      }
-     nt_dest_allocated = TRUE;
--    status = nt_to_unix_file_name( &nt_dest, &unix_dest, 0 );
-+    status = nt_to_unix_file_name( &nt_dest, &unix_dest, FILE_WINE_PATH );
-     if (status != STATUS_SUCCESS && status != STATUS_NO_SUCH_FILE)
-         goto cleanup;
-     dest_allocated = TRUE;
 diff --git a/include/winternl.h b/include/winternl.h
-index 4ee32d3c9e9..3d444e7485e 100644
+index b3fbb90feff..221c8e39e84 100644
 --- a/include/winternl.h
 +++ b/include/winternl.h
 @@ -1869,6 +1869,7 @@ typedef struct _RTL_HANDLE_TABLE
@@ -56,5 +56,5 @@ index 4ee32d3c9e9..3d444e7485e 100644
  /* Characteristics of a File System */
  #define FILE_REMOVABLE_MEDIA                      0x00000001
 -- 
-2.27.0
+2.17.1
 
diff --git a/patches/ntdll-Junction_Points/0014-ntdll-Correctly-report-file-symbolic-links-as-files.patch b/patches/ntdll-Junction_Points/0014-ntdll-Correctly-report-file-symbolic-links-as-files.patch
index c29c8ee24..d50713c0d 100644
--- a/patches/ntdll-Junction_Points/0014-ntdll-Correctly-report-file-symbolic-links-as-files.patch
+++ b/patches/ntdll-Junction_Points/0014-ntdll-Correctly-report-file-symbolic-links-as-files.patch
@@ -1,62 +1,28 @@
-From 6ab64d5c26ab8713b2e55911540538a700580017 Mon Sep 17 00:00:00 2001
+From dcb3180f1f1569626956e51aa35b032271399390 Mon Sep 17 00:00:00 2001
 From: "Erich E. Hoover" <erich.e.hoover@gmail.com>
 Date: Sat, 30 Mar 2019 12:00:51 -0600
 Subject: [PATCH] ntdll: Correctly report file symbolic links as files.
 
 Signed-off-by: Erich E. Hoover <erich.e.hoover@gmail.com>
 ---
- dlls/ntdll/tests/file.c |   8 +--
- dlls/ntdll/unix/file.c  | 120 ++++++++++++++++++++++++++--------------
- 2 files changed, 84 insertions(+), 44 deletions(-)
+ dlls/ntdll/unix/file.c | 115 +++++++++++++++++++++++++++--------------
+ 1 file changed, 77 insertions(+), 38 deletions(-)
 
-diff --git a/dlls/ntdll/tests/file.c b/dlls/ntdll/tests/file.c
-index 9530adb2a84..45cffce68ee 100644
---- a/dlls/ntdll/tests/file.c
-+++ b/dlls/ntdll/tests/file.c
-@@ -5205,13 +5205,13 @@ static void test_reparse_points(void)
- 
-     /* Check deleting a file symlink as if it were a directory */
-     bret = RemoveDirectoryW(reparse_path);
--    todo_wine ok(!bret, "Succeeded in deleting file symlink as a directory!\n");
-+    ok(!bret, "Succeeded in deleting file symlink as a directory!\n");
-     err = GetLastError();
-     todo_wine ok(err == ERROR_DIRECTORY,
-                  "Expected last error 0x%x for RemoveDirectory on file symlink (actually 0x%x)!\n",
-                  ERROR_DIRECTORY, err);
-     dwret = GetFileAttributesW(reparse_path);
--    todo_wine ok(dwret != (DWORD)~0, "Symlink doesn't exist (attributes: 0x%x)!\n", dwret);
-+    ok(dwret != (DWORD)~0, "Symlink doesn't exist (attributes: 0x%x)!\n", dwret);
-     ok(dwret & FILE_ATTRIBUTE_REPARSE_POINT, "File is not a symlink! (attributes: 0x%x)\n", dwret);
- 
-     /* Delete the symlink as a file */
-@@ -5220,10 +5220,10 @@ static void test_reparse_points(void)
- 
-     /* Create a blank slate for directory symlink tests */
-     bret = CreateDirectoryW(reparse_path, NULL);
--    ok(bret, "Failed to create junction point directory.\n");
-+    todo_wine ok(bret, "Failed to create junction point directory.\n");
-     dwret = GetFileAttributesW(reparse_path);
-     ok(dwret != (DWORD)~0, "Path doesn't exist (attributes: 0x%x)!\n", dwret);
--    ok(!(dwret & FILE_ATTRIBUTE_REPARSE_POINT), "File is already a reparse point! (attributes: %d)\n", dwret);
-+    todo_wine ok(!(dwret & FILE_ATTRIBUTE_REPARSE_POINT), "File is already a reparse point! (attributes: %d)\n", dwret);
- 
-     /* Create the directory symlink */
-     HeapFree(GetProcessHeap(), 0, buffer);
 diff --git a/dlls/ntdll/unix/file.c b/dlls/ntdll/unix/file.c
-index d77a788e0fb..9656f1eb14c 100644
+index af964cf1334..205adafcd8f 100644
 --- a/dlls/ntdll/unix/file.c
 +++ b/dlls/ntdll/unix/file.c
-@@ -1470,6 +1470,9 @@ static inline int get_file_xattr( char *hexattr, int attrlen )
+@@ -1466,6 +1466,9 @@ static inline int get_file_xattr( char *hexattr, int attrlen )
      return 0;
  }
  
-+NTSTATUS FILE_DecodeSymlink(const char *unix_src, char *unix_dest, USHORT *unix_dest_len,
++NTSTATUS FILE_DecodeSymlink(const char *unix_src, char *unix_dest, int *unix_dest_len,
 +                            DWORD *tag, ULONG *flags, BOOL *is_dir);
 +
  /* fetch the attributes of a file */
  static inline ULONG get_file_attributes( const struct stat *st )
  {
-@@ -1554,10 +1557,15 @@ static int get_file_info( const char *path, struct stat *st, ULONG *attr )
+@@ -1550,10 +1553,15 @@ static int get_file_info( const char *path, struct stat *st, ULONG *attr )
      if (ret == -1) return ret;
      if (S_ISLNK( st->st_mode ))
      {
@@ -74,9 +40,9 @@ index d77a788e0fb..9656f1eb14c 100644
 +        if (FILE_DecodeSymlink( path, NULL, NULL, NULL, NULL, &is_dir ) == STATUS_SUCCESS)
 +            st->st_mode = (st->st_mode & ~S_IFMT) | (is_dir ? S_IFDIR : S_IFREG);
      }
-     else if (S_ISDIR( st->st_mode ) && (parent_path = RtlAllocateHeap( GetProcessHeap(), 0, strlen(path) + 4 )))
+     else if (S_ISDIR( st->st_mode ) && (parent_path = malloc( strlen(path) + 4 )))
      {
-@@ -5851,48 +5859,33 @@ cleanup:
+@@ -5879,47 +5887,34 @@ cleanup:
  }
  
  
@@ -85,20 +51,22 @@ index d77a788e0fb..9656f1eb14c 100644
 - * symlink corresponding to that file handle.
 - */
 -NTSTATUS FILE_GetSymlink(HANDLE handle, REPARSE_DATA_BUFFER *buffer, ULONG out_size)
-+NTSTATUS FILE_DecodeSymlink(const char *unix_src, char *unix_dest, USHORT *unix_dest_len,
++NTSTATUS FILE_DecodeSymlink(const char *unix_src, char *unix_dest, int *unix_dest_len,
 +                            DWORD *tag, ULONG *flags, BOOL *is_dir)
  {
--    ANSI_STRING unix_src, unix_dest;
+-    char *unix_src, unix_dest[PATH_MAX];
 -    VOID *subst_name, *print_name;
+-    SIZE_T nt_dest_len = PATH_MAX;
 -    BOOL dest_allocated = FALSE;
 -    int dest_fd, needs_close;
--    UNICODE_STRING nt_dest;
+-    int unix_dest_len;
 -    int path_len = 0;
 -    DWORD max_length;
-+    USHORT len = MAX_PATH;
++    int len = MAX_PATH;
 +    DWORD reparse_tag;
      NTSTATUS status;
 -    ULONG flags = 0;
+-    WCHAR *nt_dest;
 -    INT prefix_len;
 +    BOOL dir_flag;
 +    char *p, *tmp;
@@ -112,14 +80,11 @@ index d77a788e0fb..9656f1eb14c 100644
 -    if ((status = server_get_unix_name( handle, &unix_src )))
 -        goto cleanup;
 -
--    unix_dest.Buffer = RtlAllocateHeap( GetProcessHeap(), 0, PATH_MAX );
--    unix_dest.MaximumLength = PATH_MAX;
--    dest_allocated = TRUE;
--    ret = readlink( unix_src.Buffer, unix_dest.Buffer, unix_dest.MaximumLength );
+-    ret = readlink( unix_src, unix_dest, sizeof(unix_dest) );
 -    if (ret < 0)
 +    if (unix_dest_len) len = *unix_dest_len;
 +    if (!unix_dest)
-+        tmp = RtlAllocateHeap( GetProcessHeap(), 0, len );
++        tmp = malloc( len );
 +    else
 +        tmp = unix_dest;
 +    if ((ret = readlink( unix_src, tmp, len )) < 0)
@@ -127,11 +92,11 @@ index d77a788e0fb..9656f1eb14c 100644
          status = errno_to_status( errno );
          goto cleanup;
      }
--    unix_dest.Length = ret;
--
+-    unix_dest_len = ret;
 +    len = ret;
+ 
      /* Decode the reparse tag from the symlink */
--    p = unix_dest.Buffer;
+-    p = unix_dest;
 +    p = tmp;
      if (*p == '.')
      {
@@ -140,7 +105,7 @@ index d77a788e0fb..9656f1eb14c 100644
          p++;
      }
      if (*p++ != '/')
-@@ -5900,7 +5893,7 @@ NTSTATUS FILE_GetSymlink(HANDLE handle, REPARSE_DATA_BUFFER *buffer, ULONG out_s
+@@ -5927,7 +5922,7 @@ NTSTATUS FILE_GetSymlink(HANDLE handle, REPARSE_DATA_BUFFER *buffer, ULONG out_s
          status = STATUS_NOT_IMPLEMENTED;
          goto cleanup;
      }
@@ -149,7 +114,7 @@ index d77a788e0fb..9656f1eb14c 100644
      for (i = 0; i < sizeof(ULONG)*8; i++)
      {
          char c = *p++;
-@@ -5915,21 +5908,68 @@ NTSTATUS FILE_GetSymlink(HANDLE handle, REPARSE_DATA_BUFFER *buffer, ULONG out_s
+@@ -5942,21 +5937,65 @@ NTSTATUS FILE_GetSymlink(HANDLE handle, REPARSE_DATA_BUFFER *buffer, ULONG out_s
              status = STATUS_NOT_IMPLEMENTED;
              goto cleanup;
          }
@@ -173,19 +138,19 @@ index d77a788e0fb..9656f1eb14c 100644
              goto cleanup;
          }
      }
--    unix_dest.Length -= (p - unix_dest.Buffer);
--    memmove(unix_dest.Buffer, p, unix_dest.Length);
+-    unix_dest_len -= (p - unix_dest);
+-    memmove(unix_dest, p, unix_dest_len);
 +    else
 +        dir_flag = TRUE;
 +    len -= (p - tmp);
 +    if (tag) *tag = reparse_tag;
 +    if (is_dir) *is_dir = dir_flag;
-+    if (unix_dest) memmove(unix_dest, p, len);
++    if (unix_dest) memmove(unix_dest, p, len + 1);
 +    if (unix_dest_len) *unix_dest_len = len;
 +    status = STATUS_SUCCESS;
 +
 +cleanup:
-+    if (!unix_dest) RtlFreeHeap( GetProcessHeap(), 0, tmp );
++    if (!unix_dest) free( tmp );
 +    return status;
 +}
 +
@@ -196,15 +161,17 @@ index d77a788e0fb..9656f1eb14c 100644
 + */
 +NTSTATUS FILE_GetSymlink(HANDLE handle, REPARSE_DATA_BUFFER *buffer, ULONG out_size)
 +{
-+    ANSI_STRING unix_src, unix_dest;
++    char *unix_src, unix_dest[PATH_MAX];
 +    VOID *subst_name, *print_name;
++    SIZE_T nt_dest_len = PATH_MAX;
++    int unix_dest_len = PATH_MAX;
 +    BOOL dest_allocated = FALSE;
 +    int dest_fd, needs_close;
-+    UNICODE_STRING nt_dest;
 +    int path_len = 0;
 +    DWORD max_length;
 +    NTSTATUS status;
 +    ULONG flags = 0;
++    WCHAR *nt_dest;
 +    INT prefix_len;
 +
 +    if ((status = server_get_unix_fd( handle, FILE_ANY_ACCESS, &dest_fd, &needs_close, NULL, NULL )))
@@ -213,12 +180,7 @@ index d77a788e0fb..9656f1eb14c 100644
 +    if ((status = server_get_unix_name( handle, &unix_src )))
 +        goto cleanup;
 +
-+    unix_dest.MaximumLength = PATH_MAX;
-+    unix_dest.Buffer = RtlAllocateHeap( GetProcessHeap(), 0, unix_dest.MaximumLength );
-+    unix_dest.Length = unix_dest.MaximumLength;
-+    dest_allocated = TRUE;
-+    if ((status = FILE_DecodeSymlink( unix_src.Buffer, unix_dest.Buffer, &unix_dest.Length,
-+                                      &buffer->ReparseTag, &flags, NULL )))
++    if ((status = FILE_DecodeSymlink( unix_src, unix_dest, &unix_dest_len, &buffer->ReparseTag, &flags, NULL )))
 +        goto cleanup;
  
      /* convert the relative path into an absolute path */
diff --git a/patches/ntdll-Junction_Points/0015-kernel32-Set-error-code-when-attempting-to-delete-fi.patch b/patches/ntdll-Junction_Points/0015-kernel32-Set-error-code-when-attempting-to-delete-fi.patch
new file mode 100644
index 000000000..0cd169ae2
--- /dev/null
+++ b/patches/ntdll-Junction_Points/0015-kernel32-Set-error-code-when-attempting-to-delete-fi.patch
@@ -0,0 +1,31 @@
+From 3a96350814cd7fd9d620352e252b02aede20d1cf Mon Sep 17 00:00:00 2001
+From: "Erich E. Hoover" <erich.e.hoover@gmail.com>
+Date: Sat, 30 Mar 2019 12:01:50 -0600
+Subject: kernel32: Set error code when attempting to delete file symlinks as
+ directories.
+
+Signed-off-by: Erich E. Hoover <erich.e.hoover@gmail.com>
+---
+ dlls/ntdll/tests/file.c | 6 +++---
+ 1 file changed, 3 insertions(+), 3 deletions(-)
+
+diff --git a/dlls/ntdll/tests/file.c b/dlls/ntdll/tests/file.c
+index 58fec76bec4..7f69a9116f2 100644
+--- a/dlls/ntdll/tests/file.c
++++ b/dlls/ntdll/tests/file.c
+@@ -5208,9 +5208,9 @@ static void test_reparse_points(void)
+     bret = RemoveDirectoryW(reparse_path);
+     todo_wine ok(!bret, "Succeeded in deleting file symlink as a directory!\n");
+     err = GetLastError();
+-    todo_wine ok(err == ERROR_DIRECTORY,
+-                 "Expected last error 0x%x for RemoveDirectory on file symlink (actually 0x%x)!\n",
+-                 ERROR_DIRECTORY, err);
++    ok(err == ERROR_DIRECTORY,
++       "Expected last error 0x%x for RemoveDirectory on file symlink (actually 0x%x)!\n",
++       ERROR_DIRECTORY, err);
+     dwret = GetFileAttributesW(reparse_path);
+     todo_wine ok(dwret != (DWORD)~0, "Symlink doesn't exist (attributes: 0x%x)!\n", dwret);
+     ok(dwret & FILE_ATTRIBUTE_REPARSE_POINT, "File is not a symlink! (attributes: 0x%x)\n", dwret);
+-- 
+2.17.1
+
diff --git a/patches/ntdll-Junction_Points/0016-server-Properly-handle-file-symlink-deletion.patch b/patches/ntdll-Junction_Points/0016-server-Properly-handle-file-symlink-deletion.patch
index 63221ab4a..729694ed3 100644
--- a/patches/ntdll-Junction_Points/0016-server-Properly-handle-file-symlink-deletion.patch
+++ b/patches/ntdll-Junction_Points/0016-server-Properly-handle-file-symlink-deletion.patch
@@ -1,19 +1,32 @@
-From 9ac3c75b53eeeee76fcf4e1c1a5546ae5fc3b58a Mon Sep 17 00:00:00 2001
+From a936bfbd369e1199723b0e5f2fa1329c084561db Mon Sep 17 00:00:00 2001
 From: "Erich E. Hoover" <erich.e.hoover@gmail.com>
 Date: Sat, 30 Mar 2019 13:41:07 -0600
-Subject: [PATCH] server: Properly handle file symlink deletion.
+Subject: server: Properly handle file symlink deletion.
 
 Signed-off-by: Erich E. Hoover <erich.e.hoover@gmail.com>
 ---
  dlls/ntdll/tests/file.c |  6 ++--
- server/fd.c             | 76 ++++++++++++++++++++++++++++++++++++++---
- 2 files changed, 74 insertions(+), 8 deletions(-)
+ server/fd.c             | 69 +++++++++++++++++++++++++++++++++++++++--
+ 2 files changed, 70 insertions(+), 5 deletions(-)
 
 diff --git a/dlls/ntdll/tests/file.c b/dlls/ntdll/tests/file.c
-index 0b7e9e230227..a6085d8de75c 100644
+index 7f69a9116f2..ddd3d693659 100644
 --- a/dlls/ntdll/tests/file.c
 +++ b/dlls/ntdll/tests/file.c
-@@ -5198,14 +5198,14 @@ static void test_reparse_points(void)
+@@ -5206,18 +5206,18 @@ static void test_reparse_points(void)
+ 
+     /* Check deleting a file symlink as if it were a directory */
+     bret = RemoveDirectoryW(reparse_path);
+-    todo_wine ok(!bret, "Succeeded in deleting file symlink as a directory!\n");
++    ok(!bret, "Succeeded in deleting file symlink as a directory!\n");
+     err = GetLastError();
+     ok(err == ERROR_DIRECTORY,
+        "Expected last error 0x%x for RemoveDirectory on file symlink (actually 0x%x)!\n",
+        ERROR_DIRECTORY, err);
+     dwret = GetFileAttributesW(reparse_path);
+-    todo_wine ok(dwret != (DWORD)~0, "Symlink doesn't exist (attributes: 0x%x)!\n", dwret);
++    ok(dwret != (DWORD)~0, "Symlink doesn't exist (attributes: 0x%x)!\n", dwret);
+     ok(dwret & FILE_ATTRIBUTE_REPARSE_POINT, "File is not a symlink! (attributes: 0x%x)\n", dwret);
  
      /* Delete the symlink as a file */
      bret = DeleteFileW(reparse_path);
@@ -22,20 +35,11 @@ index 0b7e9e230227..a6085d8de75c 100644
  
      /* Create a blank slate for directory symlink tests */
      bret = CreateDirectoryW(reparse_path, NULL);
--    todo_wine ok(bret, "Failed to create junction point directory.\n");
-+    ok(bret, "Failed to create junction point directory.\n");
-     dwret = GetFileAttributesW(reparse_path);
-     ok(dwret != (DWORD)~0, "Path doesn't exist (attributes: 0x%x)!\n", dwret);
--    todo_wine ok(!(dwret & FILE_ATTRIBUTE_REPARSE_POINT), "File is already a reparse point! (attributes: %d)\n", dwret);
-+    ok(!(dwret & FILE_ATTRIBUTE_REPARSE_POINT), "File is already a reparse point! (attributes: %d)\n", dwret);
- 
-     /* Create the directory symlink */
-     HeapFree(GetProcessHeap(), 0, buffer);
 diff --git a/server/fd.c b/server/fd.c
-index 06d1d81bdb08..df0caa483827 100644
+index c0d35e2fa4c..9e087917c0d 100644
 --- a/server/fd.c
 +++ b/server/fd.c
-@@ -106,6 +106,10 @@
+@@ -107,6 +107,10 @@
  #include "winioctl.h"
  #include "ddk/wdm.h"
  
@@ -46,16 +50,7 @@ index 06d1d81bdb08..df0caa483827 100644
  #if defined(HAVE_SYS_EPOLL_H) && defined(HAVE_EPOLL_CREATE)
  # include <sys/epoll.h>
  # define USE_EPOLL
-@@ -1146,7 +1150,7 @@ static void inode_destroy( struct object *obj )
-         {
-             /* make sure it is still the same file */
-             struct stat st;
--            if (!stat( fd->unix_name, &st ) && st.st_dev == inode->device->dev && st.st_ino == inode->ino)
-+            if (!lstat( fd->unix_name, &st ) && st.st_dev == inode->device->dev && st.st_ino == inode->ino)
-             {
-                 if (S_ISDIR(st.st_mode)) rmdir( fd->unix_name );
-                 else unlink( fd->unix_name );
-@@ -1824,6 +1828,53 @@ char *dup_fd_name( struct fd *root, const char *name )
+@@ -1829,6 +1833,55 @@ char *dup_fd_name( struct fd *root, const char *name )
      return ret;
  }
  
@@ -66,6 +61,8 @@ index 06d1d81bdb08..df0caa483827 100644
 +    int len, i;
 +
 +    len = readlink( name, link, sizeof(link) );
++    if (len == -1)
++        return;
 +    link[len] = 0;
 +    p = link;
 +    /* skip past relative/absolute indication */
@@ -109,7 +106,7 @@ index 06d1d81bdb08..df0caa483827 100644
  /* open() wrapper that returns a struct fd with no fd user set */
  struct fd *open_fd( struct fd *root, const char *name, int flags, mode_t *mode, unsigned int access,
                      unsigned int sharing, unsigned int options )
-@@ -1891,6 +1942,13 @@ struct fd *open_fd( struct fd *root, const char *name, int flags, mode_t *mode,
+@@ -1896,6 +1949,13 @@ struct fd *open_fd( struct fd *root, const char *name, int flags, mode_t *mode,
              if ((access & FILE_UNIX_WRITE_ACCESS) || (flags & O_CREAT))
                  fd->unix_fd = open( name, O_RDONLY | (flags & ~(O_TRUNC | O_CREAT | O_EXCL)), *mode );
          }
@@ -123,17 +120,7 @@ index 06d1d81bdb08..df0caa483827 100644
  
          if (fd->unix_fd == -1)
          {
-@@ -1909,14 +1967,15 @@ struct fd *open_fd( struct fd *root, const char *name, int flags, mode_t *mode,
-     closed_fd->unix_fd = fd->unix_fd;
-     closed_fd->unlink = 0;
-     closed_fd->unix_name = fd->unix_name;
--    fstat( fd->unix_fd, &st );
-+    lstat( fd->unix_name, &st );
-     *mode = st.st_mode;
- 
-     /* only bother with an inode for normal files and directories */
--    if (S_ISREG(st.st_mode) || S_ISDIR(st.st_mode))
-+    if (S_ISREG(st.st_mode) || S_ISDIR(st.st_mode) || S_ISLNK(st.st_mode))
+@@ -1923,6 +1983,7 @@ struct fd *open_fd( struct fd *root, const char *name, int flags, mode_t *mode,
      {
          unsigned int err;
          struct inode *inode = get_inode( st.st_dev, st.st_ino, fd->unix_fd );
@@ -141,17 +128,17 @@ index 06d1d81bdb08..df0caa483827 100644
  
          if (!inode)
          {
-@@ -1931,13 +1990,20 @@ struct fd *open_fd( struct fd *root, const char *name, int flags, mode_t *mode,
+@@ -1937,16 +1998,20 @@ struct fd *open_fd( struct fd *root, const char *name, int flags, mode_t *mode,
          list_add_head( &inode->open, &fd->inode_entry );
          closed_fd = NULL;
  
 +        /* decode symlink type */
-+        fstat( fd->unix_fd, &st );
-+        *mode = st.st_mode;
+         fstat( fd->unix_fd, &st );
+         *mode = st.st_mode;
 +        is_dir = S_ISDIR(st.st_mode);
 +        if (is_link)
-+            decode_symlink(fd->unix_name, &is_dir);
-+
++            decode_symlink(fd->unlink_name, &is_dir);
+ 
          /* check directory options */
 -        if ((options & FILE_DIRECTORY_FILE) && !S_ISDIR(st.st_mode))
 +        if ((options & FILE_DIRECTORY_FILE) && !is_dir)
@@ -165,5 +152,5 @@ index 06d1d81bdb08..df0caa483827 100644
              set_error( STATUS_FILE_IS_A_DIRECTORY );
              goto error;
 -- 
-2.26.2
+2.17.1
 
diff --git a/patches/ntdll-Junction_Points/0017-ntdll-Always-report-symbolic-links-as-containing-zer.patch b/patches/ntdll-Junction_Points/0017-ntdll-Always-report-symbolic-links-as-containing-zer.patch
index ebf06d754..c2179c6ea 100644
--- a/patches/ntdll-Junction_Points/0017-ntdll-Always-report-symbolic-links-as-containing-zer.patch
+++ b/patches/ntdll-Junction_Points/0017-ntdll-Always-report-symbolic-links-as-containing-zer.patch
@@ -1,19 +1,20 @@
-From 3c058e77263895ea58b25f652b82d443bcde9dcc Mon Sep 17 00:00:00 2001
+From ceb069628acc263e5c1a9ed274f8d00eeb9c4dd8 Mon Sep 17 00:00:00 2001
 From: "Erich E. Hoover" <erich.e.hoover@gmail.com>
 Date: Wed, 1 May 2019 12:06:20 -0600
-Subject: [PATCH] ntdll: Always report symbolic links as containing zero bytes.
+Subject: ntdll: Always report symbolic links as containing zero bytes.
 
 Signed-off-by: Erich E. Hoover <erich.e.hoover@gmail.com>
 ---
  dlls/ntdll/tests/file.c | 46 +++++++++++++++++++++++++++++++++++++++--
  dlls/ntdll/unix/file.c  |  2 ++
- 2 files changed, 46 insertions(+), 2 deletions(-)
+ server/fd.c             |  3 ++-
+ 3 files changed, 48 insertions(+), 3 deletions(-)
 
 diff --git a/dlls/ntdll/tests/file.c b/dlls/ntdll/tests/file.c
-index cd2b294bceb..67d54c81fb0 100644
+index ddd3d693659..e0a6e3b3143 100644
 --- a/dlls/ntdll/tests/file.c
 +++ b/dlls/ntdll/tests/file.c
-@@ -5036,7 +5036,9 @@ static void test_reparse_points(void)
+@@ -5037,7 +5037,9 @@ static void test_reparse_points(void)
      static const WCHAR dotW[] = {'.',0};
      REPARSE_DATA_BUFFER *buffer = NULL;
      DWORD dwret, dwLen, dwFlags, err;
@@ -23,7 +24,7 @@ index cd2b294bceb..67d54c81fb0 100644
      HANDLE handle, token;
      IO_STATUS_BLOCK iosb;
      UNICODE_STRING nameW;
-@@ -5164,8 +5166,6 @@ static void test_reparse_points(void)
+@@ -5165,8 +5167,6 @@ static void test_reparse_points(void)
         "Unexpected junction point attributes (0x%x != 0x410)!\n", dwret);
      bret = RemoveDirectoryW(target_path);
      ok(bret, "Failed to delete junction point target!\n");
@@ -32,7 +33,7 @@ index cd2b294bceb..67d54c81fb0 100644
  
      /* Establish permissions for symlink creation */
      bret = OpenProcessToken(GetCurrentProcess(), TOKEN_ALL_ACCESS, &token);
-@@ -5190,6 +5190,13 @@ static void test_reparse_points(void)
+@@ -5191,6 +5191,13 @@ static void test_reparse_points(void)
      /* Delete the junction point directory and create a blank slate for symlink tests */
      bret = RemoveDirectoryW(reparse_path);
      ok(bret, "Failed to delete junction point!\n");
@@ -46,7 +47,7 @@ index cd2b294bceb..67d54c81fb0 100644
  
      /* Create the file symlink */
      HeapFree(GetProcessHeap(), 0, buffer);
-@@ -5203,6 +5210,37 @@ static void test_reparse_points(void)
+@@ -5204,6 +5211,37 @@ static void test_reparse_points(void)
      ok(bret, "Failed to create symlink! (0x%x)\n", GetLastError());
      CloseHandle(handle);
  
@@ -84,7 +85,7 @@ index cd2b294bceb..67d54c81fb0 100644
      /* Check deleting a file symlink as if it were a directory */
      bret = RemoveDirectoryW(reparse_path);
      ok(!bret, "Succeeded in deleting file symlink as a directory!\n");
-@@ -5224,6 +5262,10 @@ static void test_reparse_points(void)
+@@ -5225,6 +5263,10 @@ static void test_reparse_points(void)
      dwret = GetFileAttributesW(reparse_path);
      ok(dwret != (DWORD)~0, "Path doesn't exist (attributes: 0x%x)!\n", dwret);
      ok(!(dwret & FILE_ATTRIBUTE_REPARSE_POINT), "File is already a reparse point! (attributes: %d)\n", dwret);
@@ -96,10 +97,10 @@ index cd2b294bceb..67d54c81fb0 100644
      /* Create the directory symlink */
      HeapFree(GetProcessHeap(), 0, buffer);
 diff --git a/dlls/ntdll/unix/file.c b/dlls/ntdll/unix/file.c
-index 7b32bac7fa3..ac4e09fc732 100644
+index ca21a799231..bdc8b8c756f 100644
 --- a/dlls/ntdll/unix/file.c
 +++ b/dlls/ntdll/unix/file.c
-@@ -1511,6 +1511,8 @@ static int get_file_info( const char *path, struct stat *st, ULONG *attr )
+@@ -1507,6 +1507,8 @@ static int get_file_info( const char *path, struct stat *st, ULONG *attr )
  
          /* return information about the destination (unless this is a dangling symlink) */
          stat( path, st );
@@ -108,6 +109,27 @@ index 7b32bac7fa3..ac4e09fc732 100644
          /* symbolic links (either junction points or NT symlinks) are "reparse points" */
          *attr |= FILE_ATTRIBUTE_REPARSE_POINT;
          /* whether a reparse point is a file or a directory is stored inside the link target */
+diff --git a/server/fd.c b/server/fd.c
+index 9e087917c0d..03966cd3067 100644
+--- a/server/fd.c
++++ b/server/fd.c
+@@ -1969,6 +1969,7 @@ struct fd *open_fd( struct fd *root, const char *name, int flags, mode_t *mode,
+     {
+         fd->unlink_name = path;
+         fd->unix_name = realpath( path, NULL );
++        if (!fd->unix_name) fd->unix_name = dup_fd_name( root, name ); /* dangling symlink */
+     }
+ 
+     closed_fd->unix_fd = fd->unix_fd;
+@@ -2487,7 +2488,7 @@ static void set_fd_disposition( struct fd *fd, int unlink )
+             file_set_error();
+             return;
+         }
+-        if (S_ISREG( st.st_mode ))  /* can't unlink files we don't have permission to write */
++        if (S_ISREG( st.st_mode ) || S_ISLNK( st.st_mode ))  /* can't unlink files we don't have permission to write */
+         {
+             if (!(st.st_mode & (S_IWUSR | S_IWGRP | S_IWOTH)))
+             {
 -- 
-2.27.0
+2.17.1
 
diff --git a/patches/ntdll-Junction_Points/0018-ntdll-Find-dangling-symlinks-quickly.patch b/patches/ntdll-Junction_Points/0018-ntdll-Find-dangling-symlinks-quickly.patch
index 62f3d21ec..b520ff453 100644
--- a/patches/ntdll-Junction_Points/0018-ntdll-Find-dangling-symlinks-quickly.patch
+++ b/patches/ntdll-Junction_Points/0018-ntdll-Find-dangling-symlinks-quickly.patch
@@ -1,7 +1,7 @@
-From e17d27788c8368ac1d395c6e142c42249f1e02f4 Mon Sep 17 00:00:00 2001
+From bc78873be1ca0e16e7c2d5aedf15f9e09f86069c Mon Sep 17 00:00:00 2001
 From: "Erich E. Hoover" <erich.e.hoover@gmail.com>
 Date: Wed, 1 May 2019 17:48:51 -0600
-Subject: [PATCH] ntdll: Find dangling symlinks quickly.
+Subject: ntdll: Find dangling symlinks quickly.
 
 This is also necessary on systems (such as MacOS) that support
 case-insensitive lookups of files.
@@ -12,10 +12,10 @@ Signed-off-by: Erich E. Hoover <erich.e.hoover@gmail.com>
  1 file changed, 3 insertions(+), 3 deletions(-)
 
 diff --git a/dlls/ntdll/unix/file.c b/dlls/ntdll/unix/file.c
-index a2fc2a6425b..66ce2eb5fe4 100644
+index bdc8b8c756f..a7dc12f0a3e 100644
 --- a/dlls/ntdll/unix/file.c
 +++ b/dlls/ntdll/unix/file.c
-@@ -2146,7 +2146,7 @@ static NTSTATUS find_file_in_dir( char *unix_name, int pos, const WCHAR *name, i
+@@ -2501,7 +2501,7 @@ static NTSTATUS find_file_in_dir( char *unix_name, int pos, const WCHAR *name, i
      if (ret >= 0 && ret <= MAX_DIR_ENTRY_LEN)
      {
          unix_name[pos + ret] = 0;
@@ -24,7 +24,7 @@ index a2fc2a6425b..66ce2eb5fe4 100644
          {
              if (is_win_dir) *is_win_dir = is_same_file( &windir, &st );
              return STATUS_SUCCESS;
-@@ -2257,7 +2257,7 @@ not_found:
+@@ -2606,7 +2606,7 @@ not_found:
      return STATUS_OBJECT_PATH_NOT_FOUND;
  
  success:
@@ -33,7 +33,7 @@ index a2fc2a6425b..66ce2eb5fe4 100644
      return STATUS_SUCCESS;
  }
  
-@@ -2662,7 +2662,7 @@ static NTSTATUS lookup_unix_name( const WCHAR *name, int name_len, char **buffer
+@@ -3101,7 +3101,7 @@ static NTSTATUS lookup_unix_name( const WCHAR *name, int name_len, char **buffer
          for (p = unix_name + pos ; *p; p++) if (*p == '\\') *p = '/';
          if (!name_len || !redirect || (!strstr( unix_name, "/windows/") && strncmp( unix_name, "windows/", 8 )))
          {
@@ -43,5 +43,5 @@ index a2fc2a6425b..66ce2eb5fe4 100644
                  if (disposition == FILE_CREATE)
                      return STATUS_OBJECT_NAME_COLLISION;
 -- 
-2.27.0
+2.17.1
 
diff --git a/patches/ntdll-Junction_Points/0019-kernel32-Implement-CreateSymbolicLink-A-W-with-ntdll.patch b/patches/ntdll-Junction_Points/0019-kernel32-Implement-CreateSymbolicLink-A-W-with-ntdll.patch
index 3209c6954..eae76c424 100644
--- a/patches/ntdll-Junction_Points/0019-kernel32-Implement-CreateSymbolicLink-A-W-with-ntdll.patch
+++ b/patches/ntdll-Junction_Points/0019-kernel32-Implement-CreateSymbolicLink-A-W-with-ntdll.patch
@@ -1,51 +1,19 @@
-From cab7c1b99de7c594083c6fd16b728a79f16b9ac8 Mon Sep 17 00:00:00 2001
+From f0eee9d4ed2009f24799a149a70e0848dda9fe14 Mon Sep 17 00:00:00 2001
 From: "Erich E. Hoover" <erich.e.hoover@gmail.com>
 Date: Wed, 13 Mar 2019 16:02:05 -0600
-Subject: [PATCH] kernel32: Implement CreateSymbolicLink[A|W] with ntdll
- reparse points.
+Subject: kernel32: Implement CreateSymbolicLink[A|W] with ntdll reparse
+ points.
 
 Signed-off-by: Erich E. Hoover <erich.e.hoover@gmail.com>
 ---
- dlls/kernel32/path.c           |  20 ++++++-
- dlls/kernel32/tests/path.c     |  96 ++++++++++++++++++++++++++++++
- dlls/kernelbase/file.c         | 105 ++++++++++++++++++++++++++++++++-
- dlls/msvcp120/tests/msvcp120.c |  75 +++++++++++------------
+ dlls/kernel32/tests/path.c     |  94 ++++++++++++++++++++++++++++++
+ dlls/kernelbase/file.c         | 103 ++++++++++++++++++++++++++++++++-
+ dlls/msvcp120/tests/msvcp120.c |  75 +++++++++++-------------
  dlls/msvcp140/tests/msvcp140.c |  63 +++++++++-----------
- 5 files changed, 277 insertions(+), 82 deletions(-)
+ 4 files changed, 256 insertions(+), 79 deletions(-)
 
-diff --git a/dlls/kernel32/path.c b/dlls/kernel32/path.c
-index 0f075d0af1c..3d17b53a829 100644
---- a/dlls/kernel32/path.c
-+++ b/dlls/kernel32/path.c
-@@ -385,8 +385,24 @@ WCHAR * CDECL wine_get_dos_file_name( LPCSTR str )
-  */
- BOOLEAN WINAPI CreateSymbolicLinkA(LPCSTR link, LPCSTR target, DWORD flags)
- {
--    FIXME("(%s %s %d): stub\n", debugstr_a(link), debugstr_a(target), flags);
--    return TRUE;
-+    WCHAR *targetW, *linkW;
-+    BOOL ret;
-+
-+    TRACE("(%s %s %d)\n", debugstr_a(link), debugstr_a(target), flags);
-+
-+    if (!(linkW = FILE_name_AtoW( link, TRUE )))
-+    {
-+        return FALSE;
-+    }
-+    if (!(targetW = FILE_name_AtoW( target, TRUE )))
-+    {
-+        HeapFree( GetProcessHeap(), 0, linkW );
-+        return FALSE;
-+    }
-+    ret = CreateSymbolicLinkW( linkW, targetW, flags );
-+    HeapFree( GetProcessHeap(), 0, linkW );
-+    HeapFree( GetProcessHeap(), 0, targetW );
-+    return ret;
- }
- 
- /*************************************************************************
 diff --git a/dlls/kernel32/tests/path.c b/dlls/kernel32/tests/path.c
-index 0e45ad44ff3..841353dcab8 100644
+index 0e45ad44ff3..0f8d94e2957 100644
 --- a/dlls/kernel32/tests/path.c
 +++ b/dlls/kernel32/tests/path.c
 @@ -83,6 +83,9 @@ static NTSTATUS (WINAPI *pLdrGetDllPath)(LPCWSTR,ULONG,LPWSTR*,LPWSTR*);
@@ -58,22 +26,15 @@ index 0e45ad44ff3..841353dcab8 100644
  /* a structure to deal with wine todos somewhat cleanly */
  typedef struct {
    DWORD shortlen;
-@@ -2147,11 +2150,14 @@ static void init_pointers(void)
+@@ -2147,6 +2150,7 @@ static void init_pointers(void)
      MAKEFUNC(SetDefaultDllDirectories);
      MAKEFUNC(CheckNameLegalDOS8Dot3W);
      MAKEFUNC(CheckNameLegalDOS8Dot3A);
 +    MAKEFUNC(CreateSymbolicLinkW);
-+
      mod = GetModuleHandleA("ntdll.dll");
      MAKEFUNC(LdrGetDllPath);
      MAKEFUNC(RtlGetExePath);
-     MAKEFUNC(RtlGetSearchPath);
-     MAKEFUNC(RtlReleasePath);
-+
- #undef MAKEFUNC
- }
- 
-@@ -2690,6 +2696,95 @@ static void test_LdrGetDllPath(void)
+@@ -2690,6 +2694,95 @@ static void test_LdrGetDllPath(void)
      SetEnvironmentVariableW( pathW, old_path );
  }
  
@@ -104,7 +65,7 @@ index 0e45ad44ff3..841353dcab8 100644
 +    DeleteFileW( path );
 +    if (!CreateDirectoryW( path, NULL ))
 +    {
-+        win_skip("Unable to create a temporary junction point directory.\n");
++        win_skip("Unable to create a temporary reparse point directory.\n");
 +        return;
 +    }
 +    GetCurrentDirectoryW( sizeof(old_path)/sizeof(WCHAR), old_path );
@@ -116,7 +77,7 @@ index 0e45ad44ff3..841353dcab8 100644
 +    GetVolumeInformationW( volW, 0, 0, 0, &dwLen, &dwFlags, 0, 0 );
 +    if (!(dwFlags & FILE_SUPPORTS_REPARSE_POINTS))
 +    {
-+        skip("File system does not support junction points.\n");
++        skip("File system does not support reparse points.\n");
 +        goto cleanup;
 +    }
 +
@@ -169,30 +130,27 @@ index 0e45ad44ff3..841353dcab8 100644
  START_TEST(path)
  {
      CHAR origdir[MAX_PATH],curdir[MAX_PATH], curDrive, otherDrive;
-@@ -2719,4 +2814,5 @@ START_TEST(path)
+@@ -2719,4 +2812,5 @@ START_TEST(path)
      test_RtlGetSearchPath();
      test_RtlGetExePath();
      test_LdrGetDllPath();
 +    test_CreateSymbolicLink();
  }
 diff --git a/dlls/kernelbase/file.c b/dlls/kernelbase/file.c
-index 905029066e4..ed6ba6ae30e 100644
+index d9b34408692..2e67f6eaa3e 100644
 --- a/dlls/kernelbase/file.c
 +++ b/dlls/kernelbase/file.c
-@@ -36,6 +36,7 @@
- #include "wincon.h"
- #include "fileapi.h"
+@@ -38,6 +38,7 @@
  #include "shlwapi.h"
-+#include "ntifs.h"
  #include "ddk/ntddk.h"
  #include "ddk/ntddser.h"
++#include "ntifs.h"
  
-@@ -943,10 +944,108 @@ done:
- /*************************************************************************
-  *	CreateSymbolicLinkW   (kernelbase.@)
+ #include "kernelbase.h"
+ #include "wine/exception.h"
+@@ -926,8 +927,106 @@ done:
   */
--BOOLEAN WINAPI /* DECLSPEC_HOTPATCH */ CreateSymbolicLinkW( LPCWSTR link, LPCWSTR target, DWORD flags )
-+BOOLEAN WINAPI DECLSPEC_HOTPATCH CreateSymbolicLinkW( const WCHAR *link, const WCHAR *target, DWORD flags )
+ BOOLEAN WINAPI /* DECLSPEC_HOTPATCH */ CreateSymbolicLinkW( LPCWSTR link, LPCWSTR target, DWORD flags )
  {
 -    FIXME( "(%s %s %d): stub\n", debugstr_w(link), debugstr_w(target), flags );
 -    return TRUE;
@@ -210,7 +168,7 @@ index 905029066e4..ed6ba6ae30e 100644
 +    HANDLE hlink;
 +    DWORD dwret;
 +
-+    TRACE("(%s %s %d)\n", debugstr_w(link), debugstr_w(target), flags);
++    TRACE( "(%s %s %d): stub\n", debugstr_w(link), debugstr_w(target), flags );
 +
 +    is_relative = (RtlDetermineDosPathNameType_U( target ) == RELATIVE_PATH);
 +    is_dir = (flags & SYMBOLIC_LINK_FLAG_DIRECTORY);
@@ -244,11 +202,11 @@ index 905029066e4..ed6ba6ae30e 100644
 +        }
 +        /* append the target to the link path */
 +        target_path_len = nt_path.Length / sizeof(WCHAR);
-+        len = target_path_len + (wcslen( target ) + 1);
++        len = target_path_len + (lstrlenW( target ) + 1);
 +        target_path = HeapAlloc( GetProcessHeap(), HEAP_ZERO_MEMORY, len*sizeof(WCHAR) );
 +        lstrcpynW( target_path, nt_path.Buffer, target_path_len+1 );
 +        target_path[target_path_len+1] = 0;
-+        wcscat( target_path, target );
++        lstrcatW( target_path, target );
 +        RtlFreeUnicodeString( &nt_path );
 +    }
 +    else
@@ -259,14 +217,14 @@ index 905029066e4..ed6ba6ae30e 100644
 +        SetLastError( RtlNtStatusToDosError(status) );
 +        goto cleanup;
 +    }
-+    if (is_relative && wcsncmp( target_path, nt_name.Buffer, target_path_len ))
++    if (is_relative && _wcsnicmp( target_path, nt_name.Buffer, target_path_len ) != 0)
 +    {
 +        SetLastError( RtlNtStatusToDosError(status) );
 +        goto cleanup;
 +    }
 +    prefix_len = is_relative ? 0 : strlen("\\??\\");
 +    string = &nt_name.Buffer[target_path_len];
-+    string_len = wcslen( &string[prefix_len] );
++    string_len = lstrlenW( &string[prefix_len] );
 +    data_size = (prefix_len + 2 * string_len + 2) * sizeof(WCHAR);
 +    buffer_size = struct_size + data_size;
 +    buffer = HeapAlloc( GetProcessHeap(), HEAP_ZERO_MEMORY, buffer_size );
@@ -278,10 +236,10 @@ index 905029066e4..ed6ba6ae30e 100644
 +    buffer->SymbolicLinkReparseBuffer.Flags = is_relative ? SYMLINK_FLAG_RELATIVE : 0;
 +    subst_dest = &buffer->SymbolicLinkReparseBuffer.PathBuffer[0];
 +    print_dest = &buffer->SymbolicLinkReparseBuffer.PathBuffer[prefix_len + string_len + 1];
-+    wcscpy( subst_dest, string );
-+    wcscpy( print_dest, &string[prefix_len] );
++    lstrcpyW( subst_dest, string );
++    lstrcpyW( print_dest, &string[prefix_len] );
 +    RtlFreeUnicodeString( &nt_name );
-+    bret = DeviceIoControl( hlink, FSCTL_SET_REPARSE_POINT, buffer, buffer_size, NULL, 0,
++    bret = DeviceIoControl( hlink, FSCTL_SET_REPARSE_POINT, (LPVOID)buffer, buffer_size, NULL, 0,
 +                            &dwret, 0 );
 +    HeapFree( GetProcessHeap(), 0, buffer );
 +
@@ -300,7 +258,7 @@ index 905029066e4..ed6ba6ae30e 100644
  
  
 diff --git a/dlls/msvcp120/tests/msvcp120.c b/dlls/msvcp120/tests/msvcp120.c
-index 7a382ac6faa..9775ef5e1d8 100644
+index ed632a27df2..bd2e8550d05 100644
 --- a/dlls/msvcp120/tests/msvcp120.c
 +++ b/dlls/msvcp120/tests/msvcp120.c
 @@ -1615,15 +1615,14 @@ static void test_tr2_sys__Stat(void)
@@ -552,5 +510,5 @@ index 751b1beed86..382f5732c29 100644
      }
  
 -- 
-2.26.2
+2.17.1
 
diff --git a/patches/ntdll-Junction_Points/0020-kernel32-Add-reparse-support-to-FindNextFile.patch b/patches/ntdll-Junction_Points/0020-kernel32-Add-reparse-support-to-FindNextFile.patch
new file mode 100644
index 000000000..c448f9060
--- /dev/null
+++ b/patches/ntdll-Junction_Points/0020-kernel32-Add-reparse-support-to-FindNextFile.patch
@@ -0,0 +1,45 @@
+From 87cc49c8ae73e17bc953b66f25be76d5c0eff153 Mon Sep 17 00:00:00 2001
+From: "Erich E. Hoover" <erich.e.hoover@gmail.com>
+Date: Wed, 29 May 2019 15:11:42 -0600
+Subject: kernel32: Add reparse support to FindNextFile.
+
+Signed-off-by: Erich E. Hoover <erich.e.hoover@gmail.com>
+---
+ dlls/kernelbase/file.c | 21 +++++++++++++++++++++
+ 1 file changed, 21 insertions(+)
+
+diff --git a/dlls/kernelbase/file.c b/dlls/kernelbase/file.c
+index 2e67f6eaa3e..9920b50191b 100644
+--- a/dlls/kernelbase/file.c
++++ b/dlls/kernelbase/file.c
+@@ -1485,6 +1485,27 @@ BOOL WINAPI DECLSPEC_HOTPATCH FindNextFileW( HANDLE handle, WIN32_FIND_DATAW *da
+         memcpy( data->cFileName, dir_info->FileName, dir_info->FileNameLength );
+         data->cFileName[dir_info->FileNameLength/sizeof(WCHAR)] = 0;
+ 
++        /* get reparse tag */
++        if (dir_info->FileAttributes & FILE_ATTRIBUTE_REPARSE_POINT)
++        {
++            REPARSE_DATA_BUFFER *buffer = NULL;
++            INT buffer_len;
++            HANDLE hlink;
++            DWORD dwret;
++            BOOL bret;
++
++            hlink = CreateFileW( data->cFileName, GENERIC_READ | GENERIC_WRITE, 0, 0,
++                                 OPEN_EXISTING,
++                                 FILE_FLAG_BACKUP_SEMANTICS | FILE_FLAG_OPEN_REPARSE_POINT, 0 );
++            buffer_len = sizeof(*buffer) + 2*MAX_PATH*sizeof(WCHAR);
++            buffer = HeapAlloc( GetProcessHeap(), HEAP_ZERO_MEMORY, buffer_len );
++            bret = DeviceIoControl( hlink, FSCTL_GET_REPARSE_POINT, NULL, 0, (LPVOID)buffer,
++                                    buffer_len, &dwret, 0 );
++            if (bret) data->dwReserved0 = buffer->ReparseTag;
++            HeapFree( GetProcessHeap(), 0, buffer );
++            CloseHandle( hlink );
++        }
++
+         if (info->level != FindExInfoBasic)
+         {
+             memcpy( data->cAlternateFileName, dir_info->ShortName, dir_info->ShortNameLength );
+-- 
+2.17.1
+
diff --git a/patches/ntdll-Junction_Points/0021-wcmd-Display-reparse-point-type-in-directory-listing.patch b/patches/ntdll-Junction_Points/0021-wcmd-Display-reparse-point-type-in-directory-listing.patch
new file mode 100644
index 000000000..7790e7203
--- /dev/null
+++ b/patches/ntdll-Junction_Points/0021-wcmd-Display-reparse-point-type-in-directory-listing.patch
@@ -0,0 +1,50 @@
+From 6eed7c952dbb0e7151723881dc26e955b9d9595d Mon Sep 17 00:00:00 2001
+From: "Erich E. Hoover" <erich.e.hoover@gmail.com>
+Date: Wed, 29 May 2019 15:18:50 -0600
+Subject: wcmd: Display reparse point type in directory listings.
+
+Signed-off-by: Erich E. Hoover <erich.e.hoover@gmail.com>
+---
+ programs/cmd/directory.c | 26 ++++++++++++++++++++++++++
+ 1 file changed, 26 insertions(+)
+
+diff --git a/programs/cmd/directory.c b/programs/cmd/directory.c
+index 2d35f8eb1d1..5b7416ce72a 100644
+--- a/programs/cmd/directory.c
++++ b/programs/cmd/directory.c
+@@ -400,6 +400,32 @@ static DIRECTORY_STACK *WCMD_list_directory (DIRECTORY_STACK *inputparms, int le
+             WCMD_output(L"%1!*s!", cur_width - tmp_width, nullW);
+         }
+ 
++      } else if (fd[i].dwFileAttributes & FILE_ATTRIBUTE_REPARSE_POINT) {
++        if (!bare) {
++           const WCHAR *type;
++
++           switch(fd[i].dwReserved0) {
++           case IO_REPARSE_TAG_MOUNT_POINT:
++              type = L"<JUNCTION>";
++              break;
++           case IO_REPARSE_TAG_SYMLINK:
++           default:
++              type = (fd[i].dwFileAttributes & FILE_ATTRIBUTE_DIRECTORY) ? L"<SYMLINKD>" : L"<SYMLINK>";
++              break;
++           }
++           WCMD_output (L"%1!10s!  %2!8s!  %3!-14s!", datestring, timestring, type);
++           if (shortname) WCMD_output (fmt2, fd[i].cAlternateFileName);
++           if (usernames) WCMD_output (fmt3, username);
++           WCMD_output(fmt4,fd[i].cFileName);
++        } else {
++           if (!((lstrcmpW(fd[i].cFileName, dotW) == 0) ||
++                 (lstrcmpW(fd[i].cFileName, dotdotW) == 0))) {
++              WCMD_output (fmt5, recurse?inputparms->dirName:nullW, fd[i].cFileName);
++           } else {
++              addNewLine = FALSE;
++           }
++        }
++
+       } else if (fd[i].dwFileAttributes & FILE_ATTRIBUTE_DIRECTORY) {
+         dir_count++;
+ 
+-- 
+2.17.1
+
diff --git a/patches/ntdll-Junction_Points/0022-wcmd-Show-reparse-point-target-in-directory-listing.patch b/patches/ntdll-Junction_Points/0022-wcmd-Show-reparse-point-target-in-directory-listing.patch
new file mode 100644
index 000000000..18d4980e9
--- /dev/null
+++ b/patches/ntdll-Junction_Points/0022-wcmd-Show-reparse-point-target-in-directory-listing.patch
@@ -0,0 +1,72 @@
+From 508f77e1653e67bfa8ed54eeb25251684b495115 Mon Sep 17 00:00:00 2001
+From: "Erich E. Hoover" <erich.e.hoover@gmail.com>
+Date: Wed, 29 May 2019 15:38:30 -0600
+Subject: wcmd: Show reparse point target in directory listing.
+
+Signed-off-by: Erich E. Hoover <erich.e.hoover@gmail.com>
+---
+ programs/cmd/directory.c | 34 ++++++++++++++++++++++++++++++++++
+ 1 file changed, 34 insertions(+)
+
+diff --git a/programs/cmd/directory.c b/programs/cmd/directory.c
+index 5b7416ce72a..87a5a310224 100644
+--- a/programs/cmd/directory.c
++++ b/programs/cmd/directory.c
+@@ -23,6 +23,8 @@
+ 
+ #include "wcmd.h"
+ #include "wine/debug.h"
++#include "winioctl.h"
++#include "ntifs.h"
+ 
+ WINE_DEFAULT_DEBUG_CHANNEL(cmd);
+ 
+@@ -256,6 +258,7 @@ static DIRECTORY_STACK *WCMD_list_directory (DIRECTORY_STACK *inputparms, int le
+   static const WCHAR fmt3[]  = {'%','1','!','-','2','3','s','!','\0'};
+   static const WCHAR fmt4[]  = {'%','1','\0'};
+   static const WCHAR fmt5[]  = {'%','1','%','2','\0'};
++  static const WCHAR fmt6[]  = {' ','[','%','1',']','\0'};
+ 
+   dir_count = 0;
+   file_count = 0;
+@@ -417,6 +420,37 @@ static DIRECTORY_STACK *WCMD_list_directory (DIRECTORY_STACK *inputparms, int le
+            if (shortname) WCMD_output (fmt2, fd[i].cAlternateFileName);
+            if (usernames) WCMD_output (fmt3, username);
+            WCMD_output(fmt4,fd[i].cFileName);
++           if (fd[i].dwReserved0) {
++              REPARSE_DATA_BUFFER *buffer = NULL;
++              WCHAR *target = NULL;
++              INT buffer_len;
++              HANDLE hlink;
++              DWORD dwret;
++              BOOL bret;
++
++              hlink = CreateFileW(fd[i].cFileName, GENERIC_READ | GENERIC_WRITE, 0, 0, OPEN_EXISTING,
++                                  FILE_FLAG_BACKUP_SEMANTICS | FILE_FLAG_OPEN_REPARSE_POINT, 0);
++              buffer_len = sizeof(*buffer) + 2*MAX_PATH*sizeof(WCHAR);
++              buffer = HeapAlloc(GetProcessHeap(), HEAP_ZERO_MEMORY, buffer_len);
++              bret = DeviceIoControl(hlink, FSCTL_GET_REPARSE_POINT, NULL, 0, (LPVOID)buffer,
++                                     buffer_len, &dwret, 0);
++              if (bret) {
++                 INT offset;
++                 switch(buffer->ReparseTag) {
++                 case IO_REPARSE_TAG_MOUNT_POINT:
++                    offset = buffer->MountPointReparseBuffer.PrintNameOffset/sizeof(WCHAR);
++                    target = &buffer->MountPointReparseBuffer.PathBuffer[offset];
++                    break;
++                 case IO_REPARSE_TAG_SYMLINK:
++                    offset = buffer->SymbolicLinkReparseBuffer.PrintNameOffset/sizeof(WCHAR);
++                    target = &buffer->SymbolicLinkReparseBuffer.PathBuffer[offset];
++                    break;
++                 }
++              }
++              CloseHandle(hlink);
++              if (target) WCMD_output(fmt6, target);
++              HeapFree(GetProcessHeap(), 0, buffer);
++           }
+         } else {
+            if (!((lstrcmpW(fd[i].cFileName, dotW) == 0) ||
+                  (lstrcmpW(fd[i].cFileName, dotdotW) == 0))) {
+-- 
+2.17.1
+
diff --git a/patches/ntdll-Junction_Points/0023-wcmd-Add-junction-point-support-to-mklink.patch b/patches/ntdll-Junction_Points/0023-wcmd-Add-junction-point-support-to-mklink.patch
new file mode 100644
index 000000000..bad07c10d
--- /dev/null
+++ b/patches/ntdll-Junction_Points/0023-wcmd-Add-junction-point-support-to-mklink.patch
@@ -0,0 +1,86 @@
+From c146d5ab24640039bd143ebe501755701c126a9e Mon Sep 17 00:00:00 2001
+From: "Erich E. Hoover" <erich.e.hoover@gmail.com>
+Date: Wed, 29 May 2019 16:01:45 -0600
+Subject: wcmd: Add junction point support to mklink.
+
+Signed-off-by: Erich E. Hoover <erich.e.hoover@gmail.com>
+---
+ programs/cmd/builtins.c | 48 ++++++++++++++++++++++++++++++++++++++++-
+ 1 file changed, 47 insertions(+), 1 deletion(-)
+
+diff --git a/programs/cmd/builtins.c b/programs/cmd/builtins.c
+index 70ccddebc11..34de0486fdd 100644
+--- a/programs/cmd/builtins.c
++++ b/programs/cmd/builtins.c
+@@ -31,6 +31,9 @@
+ #include "wcmd.h"
+ #include <shellapi.h>
+ #include "wine/debug.h"
++#include "winternl.h"
++#include "winioctl.h"
++#include "ntifs.h"
+ 
+ WINE_DEFAULT_DEBUG_CHANNEL(cmd);
+ 
+@@ -5055,6 +5058,49 @@ void WCMD_color (void) {
+   }
+ }
+ 
++BOOL WCMD_create_junction(WCHAR *link, WCHAR *target) {
++    static INT struct_size = offsetof(REPARSE_DATA_BUFFER, SymbolicLinkReparseBuffer.PathBuffer[0]);
++    static INT header_size = offsetof(REPARSE_DATA_BUFFER, GenericReparseBuffer);
++    INT buffer_size, data_size, string_len, prefix_len;
++    WCHAR *subst_dest, *print_dest, *string;
++    REPARSE_DATA_BUFFER *buffer;
++    UNICODE_STRING nt_name;
++    NTSTATUS status;
++    HANDLE hlink;
++    DWORD dwret;
++    BOOL ret;
++
++    if (!CreateDirectoryW(link, NULL ))
++        return FALSE;
++    hlink = CreateFileW(link, GENERIC_READ | GENERIC_WRITE, 0, 0, OPEN_EXISTING,
++                        FILE_FLAG_BACKUP_SEMANTICS | FILE_FLAG_OPEN_REPARSE_POINT, 0);
++    if (hlink == INVALID_HANDLE_VALUE)
++        return FALSE;
++    status = RtlDosPathNameToNtPathName_U_WithStatus(target, &nt_name, NULL, NULL);
++    if (status)
++        return FALSE;
++    prefix_len = strlen("\\??\\");
++    string = nt_name.Buffer;
++    string_len = lstrlenW( &string[prefix_len] );
++    data_size = (prefix_len + 2 * string_len + 2) * sizeof(WCHAR);
++    buffer_size = struct_size + data_size;
++    buffer = HeapAlloc( GetProcessHeap(), HEAP_ZERO_MEMORY, buffer_size );
++    buffer->ReparseTag = IO_REPARSE_TAG_MOUNT_POINT;
++    buffer->ReparseDataLength = struct_size - header_size + data_size;
++    buffer->MountPointReparseBuffer.SubstituteNameLength = (prefix_len + string_len) * sizeof(WCHAR);
++    buffer->MountPointReparseBuffer.PrintNameOffset = (prefix_len + string_len + 1) * sizeof(WCHAR);
++    buffer->MountPointReparseBuffer.PrintNameLength = string_len * sizeof(WCHAR);
++    subst_dest = &buffer->MountPointReparseBuffer.PathBuffer[0];
++    print_dest = &buffer->MountPointReparseBuffer.PathBuffer[prefix_len + string_len + 1];
++    lstrcpyW(subst_dest, string);
++    lstrcpyW(print_dest, &string[prefix_len]);
++    RtlFreeUnicodeString(&nt_name );
++    ret = DeviceIoControl(hlink, FSCTL_SET_REPARSE_POINT, (LPVOID)buffer, buffer_size, NULL, 0,
++                          &dwret, 0 );
++    HeapFree(GetProcessHeap(), 0, buffer);
++    return ret;
++}
++
+ /****************************************************************************
+  * WCMD_mklink
+  */
+@@ -5106,7 +5152,7 @@ void WCMD_mklink(WCHAR *args)
+     else if(!junction)
+         ret = CreateSymbolicLinkW(file1, file2, isdir);
+     else
+-        WINE_TRACE("Juction links currently not supported.\n");
++        ret = WCMD_create_junction(file1, file2);
+ 
+     if(!ret)
+         WCMD_output_stderr(WCMD_LoadMessage(WCMD_READFAIL), file1);
+-- 
+2.17.1
+
diff --git a/patches/ntdll-Junction_Points/0024-server-Fix-obtaining-information-about-a-symlink.patch b/patches/ntdll-Junction_Points/0024-server-Fix-obtaining-information-about-a-symlink.patch
new file mode 100644
index 000000000..9d6021c5e
--- /dev/null
+++ b/patches/ntdll-Junction_Points/0024-server-Fix-obtaining-information-about-a-symlink.patch
@@ -0,0 +1,140 @@
+From 7a25fabadf15c7514dec080502df19595249a3f6 Mon Sep 17 00:00:00 2001
+From: "Erich E. Hoover" <erich.e.hoover@gmail.com>
+Date: Sat, 18 Jul 2020 09:13:29 -0600
+Subject: server: Fix obtaining information about a symlink.
+
+Signed-off-by: Erich E. Hoover <erich.e.hoover@gmail.com>
+---
+ dlls/ntdll/unix/file.c | 19 ++++++++++---------
+ server/fd.c            |  7 ++++---
+ server/protocol.def    |  1 +
+ 3 files changed, 15 insertions(+), 12 deletions(-)
+
+diff --git a/dlls/ntdll/unix/file.c b/dlls/ntdll/unix/file.c
+index a7dc12f0a3e..b507d575766 100644
+--- a/dlls/ntdll/unix/file.c
++++ b/dlls/ntdll/unix/file.c
+@@ -1775,7 +1775,7 @@ static NTSTATUS fill_file_info( const struct stat *st, ULONG attr, void *ptr,
+ }
+ 
+ 
+-static NTSTATUS server_get_unix_name( HANDLE handle, char **unix_name )
++static NTSTATUS server_get_unix_name( HANDLE handle, char **unix_name, BOOL nofollow )
+ {
+     data_size_t size = 1024;
+     NTSTATUS ret;
+@@ -1788,6 +1788,7 @@ static NTSTATUS server_get_unix_name( HANDLE handle, char **unix_name )
+         SERVER_START_REQ( get_handle_unix_name )
+         {
+             req->handle = wine_server_obj_handle( handle );
++            req->nofollow = nofollow;
+             wine_server_set_reply( req, name, size );
+             ret = wine_server_call( req );
+             size = reply->name_len;
+@@ -1962,7 +1963,7 @@ static NTSTATUS get_mountmgr_fs_info( HANDLE handle, int fd, struct mountmgr_uni
+     NTSTATUS status;
+     int letter;
+ 
+-    if ((status = server_get_unix_name( handle, &unix_name ))) return status;
++    if ((status = server_get_unix_name( handle, &unix_name, FALSE ))) return status;
+     letter = find_dos_device( unix_name );
+     free( unix_name );
+ 
+@@ -3973,7 +3974,7 @@ NTSTATUS WINAPI NtQueryInformationFile( HANDLE handle, IO_STATUS_BLOCK *io,
+             if (fd_get_file_info( fd, options, &st, &attr ) == -1) io->u.Status = errno_to_status( errno );
+             else if (!S_ISREG(st.st_mode) && !S_ISDIR(st.st_mode))
+                 io->u.Status = STATUS_INVALID_INFO_CLASS;
+-            else if (!(io->u.Status = server_get_unix_name( handle, &unix_name )))
++            else if (!(io->u.Status = server_get_unix_name( handle, &unix_name, FALSE )))
+             {
+                 LONG name_len = len - FIELD_OFFSET(FILE_ALL_INFORMATION, NameInformation.FileName);
+ 
+@@ -4034,7 +4035,7 @@ NTSTATUS WINAPI NtQueryInformationFile( HANDLE handle, IO_STATUS_BLOCK *io,
+             FILE_NAME_INFORMATION *info = ptr;
+             char *unix_name;
+ 
+-            if (!(io->u.Status = server_get_unix_name( handle, &unix_name )))
++            if (!(io->u.Status = server_get_unix_name( handle, &unix_name, FALSE )))
+             {
+                 LONG name_len = len - FIELD_OFFSET(FILE_NAME_INFORMATION, FileName);
+                 io->u.Status = fill_name_info( unix_name, info, &name_len );
+@@ -4048,7 +4049,7 @@ NTSTATUS WINAPI NtQueryInformationFile( HANDLE handle, IO_STATUS_BLOCK *io,
+             FILE_NETWORK_OPEN_INFORMATION *info = ptr;
+             char *unix_name;
+ 
+-            if (!(io->u.Status = server_get_unix_name( handle, &unix_name )))
++            if (!(io->u.Status = server_get_unix_name( handle, &unix_name, FALSE )))
+             {
+                 ULONG attributes;
+                 struct stat st;
+@@ -5661,7 +5662,7 @@ NTSTATUS FILE_CreateSymlink(HANDLE handle, REPARSE_DATA_BUFFER *buffer)
+     if ((status = server_get_unix_fd( handle, FILE_SPECIAL_ACCESS, &dest_fd, &needs_close, NULL, NULL )))
+         return status;
+ 
+-    if ((status = server_get_unix_name( handle, &unix_src )))
++    if ((status = server_get_unix_name( handle, &unix_src, FALSE )))
+         goto cleanup;
+     src_allocated = TRUE;
+     if (flags == SYMLINK_FLAG_RELATIVE)
+@@ -5940,7 +5941,7 @@ NTSTATUS FILE_GetSymlink(HANDLE handle, REPARSE_DATA_BUFFER *buffer, ULONG out_s
+     if ((status = server_get_unix_fd( handle, FILE_ANY_ACCESS, &dest_fd, &needs_close, NULL, NULL )))
+         return status;
+ 
+-    if ((status = server_get_unix_name( handle, &unix_src )))
++    if ((status = server_get_unix_name( handle, &unix_src, TRUE )))
+         goto cleanup;
+ 
+     if ((status = FILE_DecodeSymlink( unix_src, unix_dest, &unix_dest_len, &buffer->ReparseTag, &flags, NULL )))
+@@ -6078,7 +6079,7 @@ NTSTATUS FILE_RemoveSymlink(HANDLE handle, REPARSE_GUID_DATA_BUFFER *buffer)
+     if ((status = server_get_unix_fd( handle, FILE_SPECIAL_ACCESS, &dest_fd, &needs_close, NULL, NULL )))
+         return status;
+ 
+-    if ((status = server_get_unix_name( handle, &unix_name )))
++    if ((status = server_get_unix_name( handle, &unix_name, TRUE )))
+         goto cleanup;
+ 
+     TRACE( "Deleting symlink %s\n", unix_name );
+@@ -7104,7 +7105,7 @@ NTSTATUS WINAPI NtQueryObject( HANDLE handle, OBJECT_INFORMATION_CLASS info_clas
+ 
+         /* first try as a file object */
+ 
+-        if (!(status = server_get_unix_name( handle, &unix_name )))
++        if (!(status = server_get_unix_name( handle, &unix_name, FALSE )))
+         {
+             if (!(status = unix_to_nt_file_name( unix_name, &nt_name )))
+             {
+diff --git a/server/fd.c b/server/fd.c
+index 03966cd3067..100c3865126 100644
+--- a/server/fd.c
++++ b/server/fd.c
+@@ -2729,11 +2729,12 @@ DECL_HANDLER(get_handle_unix_name)
+ 
+     if ((fd = get_handle_fd_obj( current->process, req->handle, 0 )))
+     {
+-        if (fd->unix_name)
++        char *name = (req->nofollow ? fd->unlink_name : fd->unix_name);
++        if (name)
+         {
+-            data_size_t name_len = strlen( fd->unix_name );
++            data_size_t name_len = strlen( name );
+             reply->name_len = name_len;
+-            if (name_len <= get_reply_max_size()) set_reply_data( fd->unix_name, name_len );
++            if (name_len <= get_reply_max_size()) set_reply_data( name, name_len );
+             else set_error( STATUS_BUFFER_OVERFLOW );
+         }
+         else set_error( STATUS_OBJECT_TYPE_MISMATCH );
+diff --git a/server/protocol.def b/server/protocol.def
+index a121c371c19..faf4891a01e 100644
+--- a/server/protocol.def
++++ b/server/protocol.def
+@@ -1297,6 +1297,7 @@ enum event_op { PULSE_EVENT, SET_EVENT, RESET_EVENT };
+ /* Get the Unix name from a file handle */
+ @REQ(get_handle_unix_name)
+     obj_handle_t   handle;      /* file handle */
++    int            nofollow;    /* do not follow symlinks (return the link) */
+ @REPLY
+     data_size_t    name_len;    /* unix name length */
+     VARARG(name,string);        /* unix name */
+-- 
+2.17.1
+
diff --git a/patches/ntdll-Junction_Points/definition b/patches/ntdll-Junction_Points/definition
index 716aac06b..b87684392 100644
--- a/patches/ntdll-Junction_Points/definition
+++ b/patches/ntdll-Junction_Points/definition
@@ -1,8 +1,5 @@
 Fixes: [12401] NET Framework 2.0, 3.0, 4.0 installers and other apps that make use of GAC API for managed assembly installation on NTFS filesystems need reparse point/junction API support (FSCTL_SET_REPARSE_POINT/FSCTL_GET_REPARSE_POINT)
 Fixes: [44948] Multiple apps (Spine (Mod starter for Gothic), MS Office 365 installer) need CreateSymbolicLinkW implementation
 # FIXME: patch 0006 was broken by e36a9c459d. We really want to get that information from ntdll instead, but the how is not trivial...
-# FIXME 2: patch 0019 needs to call RemoveDirectoryW() from kernelbase, but it's stuck in kernel32 for now...
-# FIXME 3: RemoveDirectory() doesn't work anymore, I think.
 Depends: ntdll-DOS_Attributes
-# Someone needs to rewrite all of this string arithmetic.
-Disabled: true
+Depends: ntdll-NtQueryEaFile
diff --git a/patches/ntdll-Junction_Points/xx06-kernel32-Advertise-junction-point-support.patch b/patches/ntdll-Junction_Points/xx06-kernel32-Advertise-junction-point-support.patch
index cd0824bc5..d91b1c9dc 100644
--- a/patches/ntdll-Junction_Points/xx06-kernel32-Advertise-junction-point-support.patch
+++ b/patches/ntdll-Junction_Points/xx06-kernel32-Advertise-junction-point-support.patch
@@ -1,38 +1,21 @@
-From 5028b688bbe434ce83811da8251d920c7e2dba8a Mon Sep 17 00:00:00 2001
+From a796dda4d4b7676ef758245f712ed4891902043c Mon Sep 17 00:00:00 2001
 From: "Erich E. Hoover" <erich.e.hoover@gmail.com>
 Date: Thu, 16 Jan 2014 21:03:47 -0700
 Subject: kernel32: Advertise junction point support.
 
+TODO: this patch requires an update that is dependent upon obtaining
+volume information through mountmgr.
+
 Signed-off-by: Erich E. Hoover <erich.e.hoover@gmail.com>
 ---
- dlls/kernel32/volume.c | 85 +++++++++++++++++++++++++++++++++++++++++-
- 1 file changed, 84 insertions(+), 1 deletion(-)
+ dlls/kernelbase/volume.c | 72 +++++++++++++++++++++++++++++++++++++++-
+ 1 file changed, 71 insertions(+), 1 deletion(-)
 
-diff --git a/dlls/kernel32/volume.c b/dlls/kernel32/volume.c
-index 4fd913aa22..437832e5c9 100644
---- a/dlls/kernel32/volume.c
-+++ b/dlls/kernel32/volume.c
-@@ -44,6 +44,19 @@
- #include "wine/unicode.h"
- #include "wine/debug.h"
- 
-+#ifdef HAVE_SYS_MOUNT_H
-+# include <sys/mount.h>
-+#endif
-+#ifdef HAVE_SYS_STATFS_H
-+# include <sys/statfs.h>
-+#endif
-+#ifdef HAVE_SYS_SYSCALL_H
-+# include <sys/syscall.h>
-+#endif
-+#ifdef HAVE_SYS_VFS_H
-+# include <sys/vfs.h>
-+#endif
-+
- WINE_DEFAULT_DEBUG_CHANNEL(volume);
- 
- #define BLOCK_SIZE 2048
-@@ -680,6 +693,75 @@ static DWORD VOLUME_GetAudioCDSerial( const CDROM_TOC *toc )
+diff --git a/dlls/kernelbase/volume.c b/dlls/kernelbase/volume.c
+index 53cc0d49b65..f58909d321d 100644
+--- a/dlls/kernelbase/volume.c
++++ b/dlls/kernelbase/volume.c
+@@ -646,6 +646,75 @@ static DWORD get_audiocd_serial( const CDROM_TOC *toc )
  }
  
  
@@ -106,11 +89,11 @@ index 4fd913aa22..437832e5c9 100644
 +
 +
  /***********************************************************************
-  *           GetVolumeInformationW   (KERNEL32.@)
+  *           GetVolumeInformationW   (kernelbase.@)
   */
-@@ -824,7 +906,8 @@ fill_fs_info:  /* now fill in the information that depends on the file system ty
+@@ -781,7 +850,8 @@ fill_fs_info:  /* now fill in the information that depends on the file system ty
      default:
-         if (fsname) lstrcpynW( fsname, ntfsW, fsname_len );
+         if (fsname) lstrcpynW( fsname, L"NTFS", fsname_len );
          if (filename_len) *filename_len = 255;
 -        if (flags) *flags = FILE_CASE_PRESERVED_NAMES | FILE_PERSISTENT_ACLS;
 +        if (flags) *flags = FILE_CASE_PRESERVED_NAMES | FILE_PERSISTENT_ACLS
diff --git a/patches/ntdll-NtQueryVirtualMemory/0003-ntdll-Implement-NtQueryVirtualMemory-MemorySectionNa.patch b/patches/ntdll-NtQueryVirtualMemory/0003-ntdll-Implement-NtQueryVirtualMemory-MemorySectionNa.patch
index 0652bbcbb..e09b08f8c 100644
--- a/patches/ntdll-NtQueryVirtualMemory/0003-ntdll-Implement-NtQueryVirtualMemory-MemorySectionNa.patch
+++ b/patches/ntdll-NtQueryVirtualMemory/0003-ntdll-Implement-NtQueryVirtualMemory-MemorySectionNa.patch
@@ -1,4 +1,4 @@
-From 2de64a6d61d01b9409ab6b61176c0a88a4838937 Mon Sep 17 00:00:00 2001
+From 4ad7e0d2a51606b323cbe2f33c64a99c3666a072 Mon Sep 17 00:00:00 2001
 From: Dmitry Timoshkov <dmitry@baikal.ru>
 Date: Sun, 28 May 2017 05:19:30 +0200
 Subject: [PATCH] ntdll: Implement NtQueryVirtualMemory(MemorySectionName).
@@ -15,35 +15,35 @@ Contains several improvements by Sebastian Lackner <sebastian@fds-team.de>.
  6 files changed, 136 insertions(+), 9 deletions(-)
 
 diff --git a/dlls/ntdll/unix/file.c b/dlls/ntdll/unix/file.c
-index b404bceb427..dcc76846c1e 100644
+index a41deb0881d..06ab827836d 100644
 --- a/dlls/ntdll/unix/file.c
 +++ b/dlls/ntdll/unix/file.c
-@@ -1763,7 +1763,7 @@ static NTSTATUS fill_file_info( const struct stat *st, ULONG attr, void *ptr,
+@@ -1835,7 +1835,7 @@ static NTSTATUS fill_file_info( const struct stat *st, ULONG attr, void *ptr,
  }
  
  
--static NTSTATUS server_get_unix_name( HANDLE handle, char **unix_name )
-+NTSTATUS server_get_unix_name( HANDLE handle, char **unix_name )
+-static NTSTATUS server_get_unix_name( HANDLE handle, char **unix_name, BOOL nofollow )
++NTSTATUS server_get_unix_name( HANDLE handle, char **unix_name, BOOL nofollow )
  {
      data_size_t size = 1024;
      NTSTATUS ret;
 diff --git a/dlls/ntdll/unix/unix_private.h b/dlls/ntdll/unix/unix_private.h
-index 3d56ea5d408..f24ca578ce1 100644
+index 3cf9ca66736..a9ce3be82b2 100644
 --- a/dlls/ntdll/unix/unix_private.h
 +++ b/dlls/ntdll/unix/unix_private.h
-@@ -170,6 +170,7 @@ extern unsigned int server_queue_process_apc( HANDLE process, const apc_call_t *
+@@ -171,6 +171,7 @@ extern unsigned int server_queue_process_apc( HANDLE process, const apc_call_t *
                                                apc_result_t *result ) DECLSPEC_HIDDEN;
  extern int server_get_unix_fd( HANDLE handle, unsigned int wanted_access, int *unix_fd,
                                 int *needs_close, enum server_fd_type *type, unsigned int *options ) DECLSPEC_HIDDEN;
-+extern NTSTATUS server_get_unix_name( HANDLE handle, char **unix_name ) DECLSPEC_HIDDEN;
++extern NTSTATUS server_get_unix_name( HANDLE handle, char **unix_name, BOOL nofollow ) DECLSPEC_HIDDEN;
  extern void server_init_process(void) DECLSPEC_HIDDEN;
  extern size_t server_init_thread( void *entry_point, BOOL *suspend ) DECLSPEC_HIDDEN;
  extern int server_pipe( int fd[2] ) DECLSPEC_HIDDEN;
 diff --git a/dlls/ntdll/unix/virtual.c b/dlls/ntdll/unix/virtual.c
-index 91989bd569e..d1c63bdb215 100644
+index 9d19a621666..9758b11de74 100644
 --- a/dlls/ntdll/unix/virtual.c
 +++ b/dlls/ntdll/unix/virtual.c
-@@ -4009,6 +4009,98 @@ static NTSTATUS get_working_set_ex( HANDLE process, LPCVOID addr,
+@@ -4060,6 +4060,98 @@ static NTSTATUS get_working_set_ex( HANDLE process, LPCVOID addr,
      return STATUS_SUCCESS;
  }
  
@@ -73,7 +73,7 @@ index 91989bd569e..d1c63bdb215 100644
 +
 +    if (!status && mapping)
 +    {
-+        status = server_get_unix_name( mapping, &unix_name );
++        status = server_get_unix_name( mapping, &unix_name, FALSE );
 +        NtClose( mapping );
 +        if (!status)
 +        {
@@ -142,7 +142,7 @@ index 91989bd569e..d1c63bdb215 100644
  #define UNIMPLEMENTED_INFO_CLASS(c) \
      case c: \
          FIXME("(process=%p,addr=%p) Unimplemented information class: " #c "\n", process, addr); \
-@@ -4033,8 +4125,10 @@ NTSTATUS WINAPI NtQueryVirtualMemory( HANDLE process, LPCVOID addr,
+@@ -4084,8 +4176,10 @@ NTSTATUS WINAPI NtQueryVirtualMemory( HANDLE process, LPCVOID addr,
          case MemoryWorkingSetExInformation:
              return get_working_set_ex( process, addr, buffer, len, res_len );
  
@@ -222,10 +222,10 @@ index db0debe0af5..6e74f5b770f 100644
  DECL_HANDLER(get_mapping_committed_range)
  {
 diff --git a/server/protocol.def b/server/protocol.def
-index 03e567c3dd4..3f0a68ccdcc 100644
+index faf4891a01e..0d98d9413e4 100644
 --- a/server/protocol.def
 +++ b/server/protocol.def
-@@ -1686,6 +1686,15 @@ enum char_info_mode
+@@ -1691,6 +1691,15 @@ enum char_info_mode
  @END
  
  
diff --git a/patches/ntdll-NtQueryVirtualMemory/definition b/patches/ntdll-NtQueryVirtualMemory/definition
index 8ee7f1df5..45dd735cd 100644
--- a/patches/ntdll-NtQueryVirtualMemory/definition
+++ b/patches/ntdll-NtQueryVirtualMemory/definition
@@ -2,6 +2,7 @@ Fixes: [23999] Implement MemorySectionName class in NtQueryVirtualMemory
 Fixes: [27248] Implement K32GetMappedFileName
 Depends: ntdll-NtDevicePath
 Depends: ntdll-ForceBottomUpAlloc
+Depends: ntdll-Junction_Points
 # This uses RtlDosPathNameToNtPathName_U (and RtlInitUnicodeString) from
 # ntdll.so, and needs to stop. Defer this until after we have a conversation
 # about volumes.
\ No newline at end of file
diff --git a/patches/patchinstall.sh b/patches/patchinstall.sh
index f9d2b82e5..6d87e75d2 100755
--- a/patches/patchinstall.sh
+++ b/patches/patchinstall.sh
@@ -176,6 +176,7 @@ patch_enable_all ()
 	enable_ntdll_Heap_Improvements="$1"
 	enable_ntdll_Hide_Wine_Exports="$1"
 	enable_ntdll_Interrupt_0x2e="$1"
+	enable_ntdll_Junction_Points="$1"
 	enable_ntdll_Manifest_Range="$1"
 	enable_ntdll_NtAccessCheck="$1"
 	enable_ntdll_NtDevicePath="$1"
@@ -618,6 +619,9 @@ patch_enable ()
 		ntdll-Interrupt-0x2e)
 			enable_ntdll_Interrupt_0x2e="$2"
 			;;
+		ntdll-Junction_Points)
+			enable_ntdll_Junction_Points="$2"
+			;;
 		ntdll-Manifest_Range)
 			enable_ntdll_Manifest_Range="$2"
 			;;
@@ -1575,6 +1579,13 @@ if test "$enable_server_Stored_ACLs" -eq 1; then
 	enable_server_File_Permissions=1
 fi
 
+if test "$enable_server_File_Permissions" -eq 1; then
+	if test "$enable_ntdll_Junction_Points" -gt 1; then
+		abort "Patchset ntdll-Junction_Points disabled, but server-File_Permissions depends on that."
+	fi
+	enable_ntdll_Junction_Points=1
+fi
+
 if test "$enable_server_Desktop_Refcount" -eq 1; then
 	if test "$enable_ws2_32_WSACleanup" -gt 1; then
 		abort "Patchset ws2_32-WSACleanup disabled, but server-Desktop_Refcount depends on that."
@@ -1621,10 +1632,14 @@ if test "$enable_ntdll_NtQueryVirtualMemory" -eq 1; then
 	if test "$enable_ntdll_ForceBottomUpAlloc" -gt 1; then
 		abort "Patchset ntdll-ForceBottomUpAlloc disabled, but ntdll-NtQueryVirtualMemory depends on that."
 	fi
+	if test "$enable_ntdll_Junction_Points" -gt 1; then
+		abort "Patchset ntdll-Junction_Points disabled, but ntdll-NtQueryVirtualMemory depends on that."
+	fi
 	if test "$enable_ntdll_NtDevicePath" -gt 1; then
 		abort "Patchset ntdll-NtDevicePath disabled, but ntdll-NtQueryVirtualMemory depends on that."
 	fi
 	enable_ntdll_ForceBottomUpAlloc=1
+	enable_ntdll_Junction_Points=1
 	enable_ntdll_NtDevicePath=1
 fi
 
@@ -1635,6 +1650,17 @@ if test "$enable_ntdll_NtDevicePath" -eq 1; then
 	enable_ntdll_Pipe_SpecialCharacters=1
 fi
 
+if test "$enable_ntdll_Junction_Points" -eq 1; then
+	if test "$enable_ntdll_DOS_Attributes" -gt 1; then
+		abort "Patchset ntdll-DOS_Attributes disabled, but ntdll-Junction_Points depends on that."
+	fi
+	if test "$enable_ntdll_NtQueryEaFile" -gt 1; then
+		abort "Patchset ntdll-NtQueryEaFile disabled, but ntdll-Junction_Points depends on that."
+	fi
+	enable_ntdll_DOS_Attributes=1
+	enable_ntdll_NtQueryEaFile=1
+fi
+
 if test "$enable_ntdll_Hide_Wine_Exports" -eq 1; then
 	if test "$enable_advapi32_Token_Integrity_Level" -gt 1; then
 		abort "Patchset advapi32-Token_Integrity_Level disabled, but ntdll-Hide_Wine_Exports depends on that."
@@ -3631,6 +3657,86 @@ if test "$enable_ntdll_Interrupt_0x2e" -eq 1; then
 	) >> "$patchlist"
 fi
 
+# Patchset ntdll-NtQueryEaFile
+# |
+# | Modified files:
+# |   *	dlls/ntdll/tests/file.c, dlls/ntdll/unix/file.c
+# |
+if test "$enable_ntdll_NtQueryEaFile" -eq 1; then
+	patch_apply ntdll-NtQueryEaFile/0001-ntdll-Improve-stub-of-NtQueryEaFile.patch
+	(
+		printf '%s\n' '+    { "Sebastian Lackner", "ntdll: Improve stub of NtQueryEaFile.", 1 },';
+	) >> "$patchlist"
+fi
+
+# Patchset ntdll-Junction_Points
+# |
+# | This patchset has the following (direct or indirect) dependencies:
+# |   *	ntdll-DOS_Attributes, ntdll-NtQueryEaFile
+# |
+# | This patchset fixes the following Wine bugs:
+# |   *	[#12401] NET Framework 2.0, 3.0, 4.0 installers and other apps that make use of GAC API for managed assembly
+# | 	installation on NTFS filesystems need reparse point/junction API support
+# | 	(FSCTL_SET_REPARSE_POINT/FSCTL_GET_REPARSE_POINT)
+# |   *	[#44948] Multiple apps (Spine (Mod starter for Gothic), MS Office 365 installer) need CreateSymbolicLinkW implementation
+# |
+# | Modified files:
+# |   *	configure.ac, dlls/kernel32/tests/path.c, dlls/kernelbase/file.c, dlls/msvcp120/tests/msvcp120.c,
+# | 	dlls/msvcp140/tests/msvcp140.c, dlls/ntdll/tests/file.c, dlls/ntdll/unix/file.c, include/Makefile.in, include/ntifs.h,
+# | 	include/wine/port.h, include/winternl.h, libs/port/Makefile.in, libs/port/renameat2.c, programs/cmd/builtins.c,
+# | 	programs/cmd/directory.c, server/fd.c, server/protocol.def
+# |
+if test "$enable_ntdll_Junction_Points" -eq 1; then
+	patch_apply ntdll-Junction_Points/0001-ntdll-Add-support-for-junction-point-creation.patch
+	patch_apply ntdll-Junction_Points/0002-ntdll-Add-support-for-reading-junction-points.patch
+	patch_apply ntdll-Junction_Points/0003-ntdll-Add-support-for-deleting-junction-points.patch
+	patch_apply ntdll-Junction_Points/0004-ntdll-Add-a-test-for-junction-point-advertisement.patch
+	patch_apply ntdll-Junction_Points/0005-server-Add-support-for-deleting-junction-points-with.patch
+	patch_apply ntdll-Junction_Points/0007-ntdll-Add-support-for-absolute-symlink-creation.patch
+	patch_apply ntdll-Junction_Points/0008-ntdll-Add-support-for-reading-absolute-symlinks.patch
+	patch_apply ntdll-Junction_Points/0009-ntdll-Add-support-for-deleting-symlinks.patch
+	patch_apply ntdll-Junction_Points/0010-ntdll-Add-support-for-relative-symlink-creation.patch
+	patch_apply ntdll-Junction_Points/0011-ntdll-Add-support-for-reading-relative-symlinks.patch
+	patch_apply ntdll-Junction_Points/0012-ntdll-Add-support-for-file-symlinks.patch
+	patch_apply ntdll-Junction_Points/0013-ntdll-Allow-creation-of-dangling-reparse-points-to-n.patch
+	patch_apply ntdll-Junction_Points/0014-ntdll-Correctly-report-file-symbolic-links-as-files.patch
+	patch_apply ntdll-Junction_Points/0015-kernel32-Set-error-code-when-attempting-to-delete-fi.patch
+	patch_apply ntdll-Junction_Points/0016-server-Properly-handle-file-symlink-deletion.patch
+	patch_apply ntdll-Junction_Points/0017-ntdll-Always-report-symbolic-links-as-containing-zer.patch
+	patch_apply ntdll-Junction_Points/0018-ntdll-Find-dangling-symlinks-quickly.patch
+	patch_apply ntdll-Junction_Points/0019-kernel32-Implement-CreateSymbolicLink-A-W-with-ntdll.patch
+	patch_apply ntdll-Junction_Points/0020-kernel32-Add-reparse-support-to-FindNextFile.patch
+	patch_apply ntdll-Junction_Points/0021-wcmd-Display-reparse-point-type-in-directory-listing.patch
+	patch_apply ntdll-Junction_Points/0022-wcmd-Show-reparse-point-target-in-directory-listing.patch
+	patch_apply ntdll-Junction_Points/0023-wcmd-Add-junction-point-support-to-mklink.patch
+	patch_apply ntdll-Junction_Points/0024-server-Fix-obtaining-information-about-a-symlink.patch
+	(
+		printf '%s\n' '+    { "Erich E. Hoover", "ntdll: Add support for junction point creation.", 1 },';
+		printf '%s\n' '+    { "Erich E. Hoover", "ntdll: Add support for reading junction points.", 1 },';
+		printf '%s\n' '+    { "Erich E. Hoover", "ntdll: Add support for deleting junction points.", 1 },';
+		printf '%s\n' '+    { "Erich E. Hoover", "ntdll: Add a test for junction point advertisement.", 1 },';
+		printf '%s\n' '+    { "Erich E. Hoover", "server: Add support for deleting junction points with RemoveDirectory.", 1 },';
+		printf '%s\n' '+    { "Erich E. Hoover", "ntdll: Add support for absolute symlink creation.", 1 },';
+		printf '%s\n' '+    { "Erich E. Hoover", "ntdll: Add support for reading absolute symlinks.", 1 },';
+		printf '%s\n' '+    { "Erich E. Hoover", "ntdll: Add support for deleting symlinks.", 1 },';
+		printf '%s\n' '+    { "Erich E. Hoover", "ntdll: Add support for relative symlink creation.", 1 },';
+		printf '%s\n' '+    { "Erich E. Hoover", "ntdll: Add support for reading relative symlinks.", 1 },';
+		printf '%s\n' '+    { "Erich E. Hoover", "ntdll: Add support for file symlinks.", 1 },';
+		printf '%s\n' '+    { "Erich E. Hoover", "ntdll: Allow creation of dangling reparse points to non-existent paths.", 1 },';
+		printf '%s\n' '+    { "Erich E. Hoover", "ntdll: Correctly report file symbolic links as files.", 1 },';
+		printf '%s\n' '+    { "Erich E. Hoover", "kernel32: Set error code when attempting to delete file symlinks as directories.", 1 },';
+		printf '%s\n' '+    { "Erich E. Hoover", "server: Properly handle file symlink deletion.", 1 },';
+		printf '%s\n' '+    { "Erich E. Hoover", "ntdll: Always report symbolic links as containing zero bytes.", 1 },';
+		printf '%s\n' '+    { "Erich E. Hoover", "ntdll: Find dangling symlinks quickly.", 1 },';
+		printf '%s\n' '+    { "Erich E. Hoover", "kernel32: Implement CreateSymbolicLink[A|W] with ntdll reparse points.", 1 },';
+		printf '%s\n' '+    { "Erich E. Hoover", "kernel32: Add reparse support to FindNextFile.", 1 },';
+		printf '%s\n' '+    { "Erich E. Hoover", "wcmd: Display reparse point type in directory listings.", 1 },';
+		printf '%s\n' '+    { "Erich E. Hoover", "wcmd: Show reparse point target in directory listing.", 1 },';
+		printf '%s\n' '+    { "Erich E. Hoover", "wcmd: Add junction point support to mklink.", 1 },';
+		printf '%s\n' '+    { "Erich E. Hoover", "server: Fix obtaining information about a symlink.", 1 },';
+	) >> "$patchlist"
+fi
+
 # Patchset ntdll-Manifest_Range
 # |
 # | This patchset fixes the following Wine bugs:
@@ -3691,18 +3797,6 @@ if test "$enable_ntdll_NtDevicePath" -eq 1; then
 	) >> "$patchlist"
 fi
 
-# Patchset ntdll-NtQueryEaFile
-# |
-# | Modified files:
-# |   *	dlls/ntdll/tests/file.c, dlls/ntdll/unix/file.c
-# |
-if test "$enable_ntdll_NtQueryEaFile" -eq 1; then
-	patch_apply ntdll-NtQueryEaFile/0001-ntdll-Improve-stub-of-NtQueryEaFile.patch
-	(
-		printf '%s\n' '+    { "Sebastian Lackner", "ntdll: Improve stub of NtQueryEaFile.", 1 },';
-	) >> "$patchlist"
-fi
-
 # Patchset ntdll-NtQuerySection
 # |
 # | Modified files:
@@ -3718,7 +3812,8 @@ fi
 # Patchset ntdll-NtQueryVirtualMemory
 # |
 # | This patchset has the following (direct or indirect) dependencies:
-# |   *	ntdll-ForceBottomUpAlloc, ntdll-Pipe_SpecialCharacters, ntdll-NtDevicePath
+# |   *	ntdll-ForceBottomUpAlloc, ntdll-DOS_Attributes, ntdll-NtQueryEaFile, ntdll-Junction_Points, ntdll-
+# | 	Pipe_SpecialCharacters, ntdll-NtDevicePath
 # |
 # | This patchset fixes the following Wine bugs:
 # |   *	[#23999] Implement MemorySectionName class in NtQueryVirtualMemory
@@ -4326,6 +4421,9 @@ fi
 
 # Patchset server-File_Permissions
 # |
+# | This patchset has the following (direct or indirect) dependencies:
+# |   *	ntdll-DOS_Attributes, ntdll-NtQueryEaFile, ntdll-Junction_Points
+# |
 # | This patchset fixes the following Wine bugs:
 # |   *	[#44691] Improve mapping of DACL to file permissions
 # |
@@ -4356,7 +4454,7 @@ fi
 # Patchset server-Stored_ACLs
 # |
 # | This patchset has the following (direct or indirect) dependencies:
-# |   *	ntdll-DOS_Attributes, server-File_Permissions
+# |   *	ntdll-DOS_Attributes, ntdll-NtQueryEaFile, ntdll-Junction_Points, server-File_Permissions
 # |
 # | This patchset fixes the following Wine bugs:
 # |   *	[#33576] Support for stored file ACLs
@@ -4387,7 +4485,7 @@ fi
 # Patchset server-Inherited_ACLs
 # |
 # | This patchset has the following (direct or indirect) dependencies:
-# |   *	ntdll-DOS_Attributes, server-File_Permissions, server-Stored_ACLs
+# |   *	ntdll-DOS_Attributes, ntdll-NtQueryEaFile, ntdll-Junction_Points, server-File_Permissions, server-Stored_ACLs
 # |
 # | Modified files:
 # |   *	dlls/advapi32/tests/security.c, server/file.c
diff --git a/patches/server-File_Permissions/0002-server-Allow-to-open-files-without-any-permission-bi.patch b/patches/server-File_Permissions/0002-server-Allow-to-open-files-without-any-permission-bi.patch
index b8580e80a..703c81c75 100644
--- a/patches/server-File_Permissions/0002-server-Allow-to-open-files-without-any-permission-bi.patch
+++ b/patches/server-File_Permissions/0002-server-Allow-to-open-files-without-any-permission-bi.patch
@@ -1,4 +1,4 @@
-From b1dcc9759921e696a554c46d7aee2c4c29d3c7ae Mon Sep 17 00:00:00 2001
+From 7f1169fde63549646dcd24d60ea648db3a11765c Mon Sep 17 00:00:00 2001
 From: Sebastian Lackner <sebastian@fds-team.de>
 Date: Fri, 3 Apr 2015 03:58:47 +0200
 Subject: [PATCH] server: Allow to open files without any permission bits. (try
@@ -65,10 +65,10 @@ index 825f8451904..948c257cea2 100644
  
  done:
 diff --git a/server/fd.c b/server/fd.c
-index e5e1fdbbf32..188a632575f 100644
+index 819f77d041e..c1401acc1aa 100644
 --- a/server/fd.c
 +++ b/server/fd.c
-@@ -1835,6 +1835,7 @@ struct fd *open_fd( struct fd *root, const char *name, int flags, mode_t *mode,
+@@ -1892,6 +1892,7 @@ struct fd *open_fd( struct fd *root, const char *name, int flags, mode_t *mode,
      int root_fd = -1;
      int rw_mode;
      char *path;
@@ -76,10 +76,10 @@ index e5e1fdbbf32..188a632575f 100644
      int created = (flags & O_CREAT);
  
      if (((options & FILE_DELETE_ON_CLOSE) && !(access & DELETE)) ||
-@@ -1894,10 +1895,28 @@ struct fd *open_fd( struct fd *root, const char *name, int flags, mode_t *mode,
-             if ((access & FILE_UNIX_WRITE_ACCESS) || (flags & O_CREAT))
-                 fd->unix_fd = open( name, O_RDONLY | (flags & ~(O_TRUNC | O_CREAT | O_EXCL)), *mode );
+@@ -1958,10 +1959,28 @@ struct fd *open_fd( struct fd *root, const char *name, int flags, mode_t *mode,
+             fd->unix_fd = open( name, rw_mode | O_SYMLINK | (flags & ~O_TRUNC), *mode );
          }
+ #endif
 +        else if (errno == EACCES)
 +        {
 +            /* try to change permissions temporarily to open a file descriptor */
@@ -105,12 +105,12 @@ index e5e1fdbbf32..188a632575f 100644
              goto error;
          }
      }
-@@ -1912,6 +1931,7 @@ struct fd *open_fd( struct fd *root, const char *name, int flags, mode_t *mode,
-     closed_fd->unix_fd = fd->unix_fd;
+@@ -1978,6 +1997,7 @@ struct fd *open_fd( struct fd *root, const char *name, int flags, mode_t *mode,
      closed_fd->unlink = 0;
+     closed_fd->unlink_name = fd->unlink_name;
      closed_fd->unix_name = fd->unix_name;
 +    if (do_chmod) chmod( name, *mode );
-     fstat( fd->unix_fd, &st );
+     lstat( fd->unlink_name, &st );
      *mode = st.st_mode;
  
 -- 
diff --git a/patches/server-File_Permissions/definition b/patches/server-File_Permissions/definition
index 0ebcf3acc..a699a6fd1 100644
--- a/patches/server-File_Permissions/definition
+++ b/patches/server-File_Permissions/definition
@@ -1,2 +1,3 @@
 Fixes: Allow to open files/directories without any access rights in order to query attributes
 Fixes: [44691] Improve mapping of DACL to file permissions
+Depends: ntdll-Junction_Points

diff --git a/patches/advapi32-CreateRestrictedToken/0001-ntdll-Implement-NtFilterToken.patch b/patches/advapi32-CreateRestrictedToken/0001-ntdll-Implement-NtFilterToken.patch
index 0dac0d312..fed7c0d42 100644
--- a/patches/advapi32-CreateRestrictedToken/0001-ntdll-Implement-NtFilterToken.patch
+++ b/patches/advapi32-CreateRestrictedToken/0001-ntdll-Implement-NtFilterToken.patch
@@ -1,4 +1,4 @@
-From 8acdf6bd71522ed36ccc9406b27f9ddb4866752a Mon Sep 17 00:00:00 2001
+From 8d80506ade85cac639a732280111226f65e0aac3 Mon Sep 17 00:00:00 2001
 From: =?UTF-8?q?Michael=20M=C3=BCller?= <michael@fds-team.de>
 Date: Fri, 4 Aug 2017 02:33:14 +0200
 Subject: [PATCH] ntdll: Implement NtFilterToken.
@@ -16,7 +16,7 @@ Subject: [PATCH] ntdll: Implement NtFilterToken.
  9 files changed, 163 insertions(+), 6 deletions(-)
 
 diff --git a/dlls/ntdll/nt.c b/dlls/ntdll/nt.c
-index f23f18ed494..eeaf3e41b92 100644
+index cc13672b2b9..443d46c71c7 100644
 --- a/dlls/ntdll/nt.c
 +++ b/dlls/ntdll/nt.c
 @@ -90,6 +90,65 @@ NTSTATUS WINAPI NtDuplicateToken(
@@ -86,23 +86,23 @@ index f23f18ed494..eeaf3e41b92 100644
   *  NtOpenProcessToken		[NTDLL.@]
   *  ZwOpenProcessToken		[NTDLL.@]
 diff --git a/dlls/ntdll/ntdll.spec b/dlls/ntdll/ntdll.spec
-index 4c8a1f6165a..42ce9815489 100644
+index 6293dc81ed4..36f7ddbda81 100644
 --- a/dlls/ntdll/ntdll.spec
 +++ b/dlls/ntdll/ntdll.spec
 @@ -208,7 +208,7 @@
  # @ stub NtEnumerateSystemEnvironmentValuesEx
- @ stdcall NtEnumerateValueKey(long long long ptr long ptr)
+ @ stdcall -syscall NtEnumerateValueKey(long long long ptr long ptr)
  @ stub NtExtendSection
 -# @ stub NtFilterToken
 +@ stdcall NtFilterToken(long long ptr ptr ptr ptr)
- @ stdcall NtFindAtom(ptr long ptr)
+ @ stdcall -syscall NtFindAtom(ptr long ptr)
  @ stdcall -syscall NtFlushBuffersFile(long ptr)
  @ stdcall -syscall NtFlushInstructionCache(long ptr long)
 diff --git a/include/winnt.h b/include/winnt.h
-index 798a1dd248c..312c78ca7b5 100644
+index e1cf78420a6..da17fe3e330 100644
 --- a/include/winnt.h
 +++ b/include/winnt.h
-@@ -4227,6 +4227,11 @@ typedef enum _TOKEN_INFORMATION_CLASS {
+@@ -4221,6 +4221,11 @@ typedef enum _TOKEN_INFORMATION_CLASS {
  					TOKEN_ADJUST_SESSIONID | \
  					TOKEN_ADJUST_DEFAULT )
  
@@ -153,10 +153,10 @@ index 5e587b28cbe..406167e825b 100644
      }
      if (!process->handles || !process->token) goto error;
 diff --git a/server/protocol.def b/server/protocol.def
-index 4a59c327287..93a16c68f33 100644
+index a121c371c19..ee07b1eca14 100644
 --- a/server/protocol.def
 +++ b/server/protocol.def
-@@ -3265,6 +3265,16 @@ enum caret_state
+@@ -3263,6 +3263,16 @@ enum caret_state
      obj_handle_t  new_handle; /* duplicated handle */
  @END
  
diff --git a/patches/ntdll-NtQueryEaFile/0001-ntdll-Improve-stub-of-NtQueryEaFile.patch b/patches/ntdll-NtQueryEaFile/0001-ntdll-Improve-stub-of-NtQueryEaFile.patch
index 5c4d4fbfd..c9924d957 100644
--- a/patches/ntdll-NtQueryEaFile/0001-ntdll-Improve-stub-of-NtQueryEaFile.patch
+++ b/patches/ntdll-NtQueryEaFile/0001-ntdll-Improve-stub-of-NtQueryEaFile.patch
@@ -1,53 +1,19 @@
-From 157385f6bdf23c65b1375126f73dad87fcb503f4 Mon Sep 17 00:00:00 2001
+From a010b05e656e6abc4c0b36f1e75902dbecb5dfdc Mon Sep 17 00:00:00 2001
 From: Sebastian Lackner <sebastian@fds-team.de>
 Date: Sat, 6 Jun 2015 07:03:33 +0800
 Subject: [PATCH] ntdll: Improve stub of NtQueryEaFile.
 
 Based on a patch by Qian Hong.
 ---
- dlls/ntdll/file.c       | 19 ++++++++--
  dlls/ntdll/tests/file.c | 83 +++++++++++++++++++++++++++++++++++++++++
- 2 files changed, 98 insertions(+), 4 deletions(-)
+ dlls/ntdll/unix/file.c  | 15 +++++++-
+ 2 files changed, 96 insertions(+), 2 deletions(-)
 
-diff --git a/dlls/ntdll/file.c b/dlls/ntdll/file.c
-index 7a49cb5d8db..b940201c5a8 100644
---- a/dlls/ntdll/file.c
-+++ b/dlls/ntdll/file.c
-@@ -4041,14 +4041,25 @@ NTSTATUS WINAPI NtQueryVolumeInformationFile( HANDLE handle, PIO_STATUS_BLOCK io
-  *  Success: 0. Attributes read into buffer
-  *  Failure: An NTSTATUS error code describing the error.
-  */
--NTSTATUS WINAPI NtQueryEaFile( HANDLE hFile, PIO_STATUS_BLOCK iosb, PVOID buffer, ULONG length,
-+NTSTATUS WINAPI NtQueryEaFile( HANDLE handle, PIO_STATUS_BLOCK iosb, PVOID buffer, ULONG length,
-                                BOOLEAN single_entry, PVOID ea_list, ULONG ea_list_len,
-                                PULONG ea_index, BOOLEAN restart )
- {
--    FIXME("(%p,%p,%p,%d,%d,%p,%d,%p,%d) stub\n",
--            hFile, iosb, buffer, length, single_entry, ea_list,
-+    int fd, needs_close;
-+    NTSTATUS status;
-+
-+    FIXME("(%p,%p,%p,%d,%d,%p,%d,%p,%d) semi-stub\n",
-+            handle, iosb, buffer, length, single_entry, ea_list,
-             ea_list_len, ea_index, restart);
--    return STATUS_ACCESS_DENIED;
-+
-+    if ((status = unix_funcs->server_get_unix_fd( handle, 0, &fd, &needs_close, NULL, NULL )) != STATUS_SUCCESS)
-+        return status;
-+
-+    if (buffer && length)
-+        memset( buffer, 0, length );
-+
-+    if (needs_close) close( fd );
-+    return STATUS_NO_EAS_ON_FILE;
- }
- 
- 
 diff --git a/dlls/ntdll/tests/file.c b/dlls/ntdll/tests/file.c
-index 44335514761..abd5903e804 100644
+index 6164b0c4bde..802d7ca71aa 100644
 --- a/dlls/ntdll/tests/file.c
 +++ b/dlls/ntdll/tests/file.c
-@@ -85,6 +85,7 @@ static NTSTATUS (WINAPI *pNtQueryDirectoryFile)(HANDLE,HANDLE,PIO_APC_ROUTINE,PV
+@@ -84,6 +84,7 @@ static NTSTATUS (WINAPI *pNtQueryDirectoryFile)(HANDLE,HANDLE,PIO_APC_ROUTINE,PV
  static NTSTATUS (WINAPI *pNtQueryVolumeInformationFile)(HANDLE,PIO_STATUS_BLOCK,PVOID,ULONG,FS_INFORMATION_CLASS);
  static NTSTATUS (WINAPI *pNtQueryFullAttributesFile)(const OBJECT_ATTRIBUTES*, FILE_NETWORK_OPEN_INFORMATION*);
  static NTSTATUS (WINAPI *pNtFlushBuffersFile)(HANDLE, IO_STATUS_BLOCK*);
@@ -55,7 +21,7 @@ index 44335514761..abd5903e804 100644
  
  static WCHAR fooW[] = {'f','o','o',0};
  
-@@ -4886,6 +4887,86 @@ static void test_flush_buffers_file(void)
+@@ -4904,6 +4905,86 @@ static void test_flush_buffers_file(void)
      DeleteFileA(buffer);
  }
  
@@ -142,7 +108,7 @@ index 44335514761..abd5903e804 100644
  static void test_file_readonly_access(void)
  {
      static const DWORD default_sharing = FILE_SHARE_READ | FILE_SHARE_WRITE | FILE_SHARE_DELETE;
-@@ -5375,6 +5456,7 @@ START_TEST(file)
+@@ -5012,6 +5093,7 @@ START_TEST(file)
      pNtQueryVolumeInformationFile = (void *)GetProcAddress(hntdll, "NtQueryVolumeInformationFile");
      pNtQueryFullAttributesFile = (void *)GetProcAddress(hntdll, "NtQueryFullAttributesFile");
      pNtFlushBuffersFile = (void *)GetProcAddress(hntdll, "NtFlushBuffersFile");
@@ -150,14 +116,40 @@ index 44335514761..abd5903e804 100644
  
      test_read_write();
      test_NtCreateFile();
-@@ -5404,6 +5486,7 @@ START_TEST(file)
+@@ -5041,5 +5123,6 @@ START_TEST(file)
      test_query_volume_information_file();
      test_query_attribute_information_file();
      test_ioctl();
 +    test_query_ea();
      test_flush_buffers_file();
-     test_reparse_points();
  }
+diff --git a/dlls/ntdll/unix/file.c b/dlls/ntdll/unix/file.c
+index 20eb6a05922..75e78a0d004 100644
+--- a/dlls/ntdll/unix/file.c
++++ b/dlls/ntdll/unix/file.c
+@@ -6440,9 +6440,20 @@ NTSTATUS WINAPI NtQueryEaFile( HANDLE handle, IO_STATUS_BLOCK *io, void *buffer,
+                                BOOLEAN single_entry, void *list, ULONG list_len,
+                                ULONG *index, BOOLEAN restart )
+ {
+-    FIXME( "(%p,%p,%p,%d,%d,%p,%d,%p,%d) stub\n",
++    int fd, needs_close;
++    NTSTATUS status;
++
++    FIXME( "(%p,%p,%p,%d,%d,%p,%d,%p,%d) semi-stub\n",
+            handle, io, buffer, length, single_entry, list, list_len, index, restart );
+-    return STATUS_ACCESS_DENIED;
++
++    if ((status = server_get_unix_fd( handle, 0, &fd, &needs_close, NULL, NULL )))
++        return status;
++
++    if (buffer && length)
++        memset( buffer, 0, length );
++
++    if (needs_close) close( fd );
++    return STATUS_NO_EAS_ON_FILE;
+ }
+ 
+ 
 -- 
-2.26.2
+2.27.0
 
diff --git a/patches/ntdll-NtQueryEaFile/definition b/patches/ntdll-NtQueryEaFile/definition
index 0a8262fcf..c3a4b6433 100644
--- a/patches/ntdll-NtQueryEaFile/definition
+++ b/patches/ntdll-NtQueryEaFile/definition
@@ -1,5 +1 @@
 Fixes: Improve stub for NtQueryEaFile
-# Depends: ntdll-Syscall_Wrappers
-Depends: ntdll-Junction_Points
-# Temporarily disabled until it's moved to unixlib.
-Disabled: true
diff --git a/patches/patchinstall.sh b/patches/patchinstall.sh
index 165491e48..f9d2b82e5 100755
--- a/patches/patchinstall.sh
+++ b/patches/patchinstall.sh
@@ -179,6 +179,7 @@ patch_enable_all ()
 	enable_ntdll_Manifest_Range="$1"
 	enable_ntdll_NtAccessCheck="$1"
 	enable_ntdll_NtDevicePath="$1"
+	enable_ntdll_NtQueryEaFile="$1"
 	enable_ntdll_NtQuerySection="$1"
 	enable_ntdll_NtQueryVirtualMemory="$1"
 	enable_ntdll_NtSetLdtEntries="$1"
@@ -626,6 +627,9 @@ patch_enable ()
 		ntdll-NtDevicePath)
 			enable_ntdll_NtDevicePath="$2"
 			;;
+		ntdll-NtQueryEaFile)
+			enable_ntdll_NtQueryEaFile="$2"
+			;;
 		ntdll-NtQuerySection)
 			enable_ntdll_NtQuerySection="$2"
 			;;
@@ -3687,6 +3691,18 @@ if test "$enable_ntdll_NtDevicePath" -eq 1; then
 	) >> "$patchlist"
 fi
 
+# Patchset ntdll-NtQueryEaFile
+# |
+# | Modified files:
+# |   *	dlls/ntdll/tests/file.c, dlls/ntdll/unix/file.c
+# |
+if test "$enable_ntdll_NtQueryEaFile" -eq 1; then
+	patch_apply ntdll-NtQueryEaFile/0001-ntdll-Improve-stub-of-NtQueryEaFile.patch
+	(
+		printf '%s\n' '+    { "Sebastian Lackner", "ntdll: Improve stub of NtQueryEaFile.", 1 },';
+	) >> "$patchlist"
+fi
+
 # Patchset ntdll-NtQuerySection
 # |
 # | Modified files:
diff --git a/patches/server-Object_Types/0002-ntdll-Implement-ObjectTypesInformation-in-NtQueryObj.patch b/patches/server-Object_Types/0002-ntdll-Implement-ObjectTypesInformation-in-NtQueryObj.patch
index 099e1573c..c87f9971a 100644
--- a/patches/server-Object_Types/0002-ntdll-Implement-ObjectTypesInformation-in-NtQueryObj.patch
+++ b/patches/server-Object_Types/0002-ntdll-Implement-ObjectTypesInformation-in-NtQueryObj.patch
@@ -1,4 +1,4 @@
-From d4791a079ee17b42ca668778f18335df471eba6b Mon Sep 17 00:00:00 2001
+From 959b3618856923c384de07bc44124ba0fa3a3a64 Mon Sep 17 00:00:00 2001
 From: =?UTF-8?q?Michael=20M=C3=BCller?= <michael@fds-team.de>
 Date: Wed, 8 Mar 2017 02:12:37 +0100
 Subject: [PATCH] ntdll: Implement ObjectTypesInformation in NtQueryObject.
@@ -12,10 +12,10 @@ Subject: [PATCH] ntdll: Implement ObjectTypesInformation in NtQueryObject.
  5 files changed, 165 insertions(+), 3 deletions(-)
 
 diff --git a/dlls/ntdll/tests/om.c b/dlls/ntdll/tests/om.c
-index c17b6ffa8db..6e760066915 100644
+index f68827c7180..b71e81ef364 100644
 --- a/dlls/ntdll/tests/om.c
 +++ b/dlls/ntdll/tests/om.c
-@@ -81,6 +81,21 @@ static void     (WINAPI *pRtlWakeAddressSingle)( const void * );
+@@ -78,6 +78,21 @@ static void     (WINAPI *pRtlWakeAddressSingle)( const void * );
  #define KEYEDEVENT_WAKE       0x0002
  #define KEYEDEVENT_ALL_ACCESS (STANDARD_RIGHTS_REQUIRED | 0x0003)
  
@@ -36,8 +36,8 @@ index c17b6ffa8db..6e760066915 100644
 +
  static void test_case_sensitive (void)
  {
-     static const WCHAR buffer1[] = {'\\','B','a','s','e','N','a','m','e','d','O','b','j','e','c','t','s','\\','t','e','s','t',0};
-@@ -1583,6 +1598,47 @@ static void test_query_object(void)
+     NTSTATUS status;
+@@ -1466,6 +1481,47 @@ static void test_query_object(void)
  
  }
  
@@ -85,7 +85,7 @@ index c17b6ffa8db..6e760066915 100644
  static void test_type_mismatch(void)
  {
      HANDLE h;
-@@ -2215,6 +2271,7 @@ START_TEST(om)
+@@ -2063,6 +2119,7 @@ START_TEST(om)
      test_directory();
      test_symboliclink();
      test_query_object();
@@ -94,7 +94,7 @@ index c17b6ffa8db..6e760066915 100644
      test_event();
      test_mutant();
 diff --git a/dlls/ntdll/unix/file.c b/dlls/ntdll/unix/file.c
-index 976dfb4fcc5..693f6290f9b 100644
+index 20eb6a05922..bb9bee0340b 100644
 --- a/dlls/ntdll/unix/file.c
 +++ b/dlls/ntdll/unix/file.c
 @@ -130,6 +130,8 @@
@@ -106,7 +106,7 @@ index 976dfb4fcc5..693f6290f9b 100644
  #define MAX_DOS_DRIVES 26
  
  #define FILE_WRITE_TO_END_OF_FILE      ((LONGLONG)-1)
-@@ -6678,6 +6680,57 @@ NTSTATUS WINAPI NtQueryObject( HANDLE handle, OBJECT_INFORMATION_CLASS info_clas
+@@ -6595,6 +6597,57 @@ NTSTATUS WINAPI NtQueryObject( HANDLE handle, OBJECT_INFORMATION_CLASS info_clas
          break;
      }
  
@@ -165,10 +165,10 @@ index 976dfb4fcc5..693f6290f9b 100644
      {
          OBJECT_DATA_INFORMATION* p = ptr;
 diff --git a/include/winternl.h b/include/winternl.h
-index 1182d1ff429..5dc7a9974b6 100644
+index 1266f55c6b1..9ec91f743f9 100644
 --- a/include/winternl.h
 +++ b/include/winternl.h
-@@ -844,7 +844,7 @@ typedef enum _OBJECT_INFORMATION_CLASS {
+@@ -843,7 +843,7 @@ typedef enum _OBJECT_INFORMATION_CLASS {
      ObjectBasicInformation,
      ObjectNameInformation,
      ObjectTypeInformation,
@@ -177,7 +177,7 @@ index 1182d1ff429..5dc7a9974b6 100644
      ObjectDataInformation
  } OBJECT_INFORMATION_CLASS, *POBJECT_INFORMATION_CLASS;
  
-@@ -1304,9 +1304,35 @@ typedef struct _OBJECT_NAME_INFORMATION {
+@@ -1281,9 +1281,35 @@ typedef struct _OBJECT_NAME_INFORMATION {
  
  typedef struct __OBJECT_TYPE_INFORMATION {
      UNICODE_STRING TypeName;
@@ -215,10 +215,10 @@ index 1182d1ff429..5dc7a9974b6 100644
  #ifdef __WINESRC__
      DWORD_PTR ExitStatus;
 diff --git a/server/directory.c b/server/directory.c
-index b735602a805..d89da8b169b 100644
+index 198fc48ece2..ab0498e952f 100644
 --- a/server/directory.c
 +++ b/server/directory.c
-@@ -73,6 +73,8 @@ static const struct object_ops object_type_ops =
+@@ -72,6 +72,8 @@ static const struct object_ops object_type_ops =
      no_destroy                    /* destroy */
  };
  
@@ -227,7 +227,7 @@ index b735602a805..d89da8b169b 100644
  
  struct directory
  {
-@@ -238,7 +240,8 @@ struct object_type *get_object_type( const struct unicode_str *name )
+@@ -236,7 +238,8 @@ struct object_type *get_object_type( const struct unicode_str *name )
      {
          if (get_error() != STATUS_OBJECT_NAME_EXISTS)
          {
@@ -237,7 +237,7 @@ index b735602a805..d89da8b169b 100644
              make_object_static( &type->obj );
          }
          clear_error();
-@@ -553,3 +556,17 @@ DECL_HANDLER(get_object_type)
+@@ -551,3 +554,17 @@ DECL_HANDLER(get_object_type)
      }
      release_object( obj );
  }
@@ -256,10 +256,10 @@ index b735602a805..d89da8b169b 100644
 +    else set_error( STATUS_NO_MORE_ENTRIES );
 +}
 diff --git a/server/protocol.def b/server/protocol.def
-index 98289c685da..57ced5b1683 100644
+index a121c371c19..aa3be515ffe 100644
 --- a/server/protocol.def
 +++ b/server/protocol.def
-@@ -3472,6 +3472,15 @@ struct handle_info
+@@ -3440,6 +3440,15 @@ struct handle_info
  @END
  
  
diff --git a/patches/advapi32-CreateRestrictedToken/0001-ntdll-Implement-NtFilterToken.patch b/patches/advapi32-CreateRestrictedToken/0001-ntdll-Implement-NtFilterToken.patch
index 40d9143a9..0dac0d312 100644
--- a/patches/advapi32-CreateRestrictedToken/0001-ntdll-Implement-NtFilterToken.patch
+++ b/patches/advapi32-CreateRestrictedToken/0001-ntdll-Implement-NtFilterToken.patch
@@ -1,4 +1,4 @@
-From 5a8cf4ee45f472a7b455aba19fa0c2a0b0b87473 Mon Sep 17 00:00:00 2001
+From 8acdf6bd71522ed36ccc9406b27f9ddb4866752a Mon Sep 17 00:00:00 2001
 From: =?UTF-8?q?Michael=20M=C3=BCller?= <michael@fds-team.de>
 Date: Fri, 4 Aug 2017 02:33:14 +0200
 Subject: [PATCH] ntdll: Implement NtFilterToken.
@@ -16,7 +16,7 @@ Subject: [PATCH] ntdll: Implement NtFilterToken.
  9 files changed, 163 insertions(+), 6 deletions(-)
 
 diff --git a/dlls/ntdll/nt.c b/dlls/ntdll/nt.c
-index 2d2d9a7e3d8..ce6904dbcfb 100644
+index f23f18ed494..eeaf3e41b92 100644
 --- a/dlls/ntdll/nt.c
 +++ b/dlls/ntdll/nt.c
 @@ -90,6 +90,65 @@ NTSTATUS WINAPI NtDuplicateToken(
@@ -86,7 +86,7 @@ index 2d2d9a7e3d8..ce6904dbcfb 100644
   *  NtOpenProcessToken		[NTDLL.@]
   *  ZwOpenProcessToken		[NTDLL.@]
 diff --git a/dlls/ntdll/ntdll.spec b/dlls/ntdll/ntdll.spec
-index bd41da37af4..c65902a2adf 100644
+index 4c8a1f6165a..42ce9815489 100644
 --- a/dlls/ntdll/ntdll.spec
 +++ b/dlls/ntdll/ntdll.spec
 @@ -208,7 +208,7 @@
@@ -96,13 +96,13 @@ index bd41da37af4..c65902a2adf 100644
 -# @ stub NtFilterToken
 +@ stdcall NtFilterToken(long long ptr ptr ptr ptr)
  @ stdcall NtFindAtom(ptr long ptr)
- @ stdcall NtFlushBuffersFile(long ptr)
- @ stdcall NtFlushInstructionCache(long ptr long)
+ @ stdcall -syscall NtFlushBuffersFile(long ptr)
+ @ stdcall -syscall NtFlushInstructionCache(long ptr long)
 diff --git a/include/winnt.h b/include/winnt.h
-index e1cf78420a6..da17fe3e330 100644
+index 798a1dd248c..312c78ca7b5 100644
 --- a/include/winnt.h
 +++ b/include/winnt.h
-@@ -4221,6 +4221,11 @@ typedef enum _TOKEN_INFORMATION_CLASS {
+@@ -4227,6 +4227,11 @@ typedef enum _TOKEN_INFORMATION_CLASS {
  					TOKEN_ADJUST_SESSIONID | \
  					TOKEN_ADJUST_DEFAULT )
  
@@ -115,7 +115,7 @@ index e1cf78420a6..da17fe3e330 100644
  #define _SECURITY_DEFINED
  
 diff --git a/include/winternl.h b/include/winternl.h
-index 10d109fede1..d2cf7d89ab5 100644
+index b3fbb90feff..4687a410ca4 100644
 --- a/include/winternl.h
 +++ b/include/winternl.h
 @@ -2749,6 +2749,7 @@ NTSYSAPI NTSTATUS  WINAPI NtDuplicateToken(HANDLE,ACCESS_MASK,POBJECT_ATTRIBUTES
@@ -153,10 +153,10 @@ index 5e587b28cbe..406167e825b 100644
      }
      if (!process->handles || !process->token) goto error;
 diff --git a/server/protocol.def b/server/protocol.def
-index 19dd9afb24d..43e0862433a 100644
+index 4a59c327287..93a16c68f33 100644
 --- a/server/protocol.def
 +++ b/server/protocol.def
-@@ -3293,6 +3293,16 @@ enum caret_state
+@@ -3265,6 +3265,16 @@ enum caret_state
      obj_handle_t  new_handle; /* duplicated handle */
  @END
  
diff --git a/patches/advapi32-Token_Integrity_Level/0006-ntdll-Add-function-to-create-new-tokens-for-elevatio.patch b/patches/advapi32-Token_Integrity_Level/0006-ntdll-Add-function-to-create-new-tokens-for-elevatio.patch
index 026272eac..a2102ed70 100644
--- a/patches/advapi32-Token_Integrity_Level/0006-ntdll-Add-function-to-create-new-tokens-for-elevatio.patch
+++ b/patches/advapi32-Token_Integrity_Level/0006-ntdll-Add-function-to-create-new-tokens-for-elevatio.patch
@@ -1,4 +1,4 @@
-From 2588eb4eb5fe56aca7d229ea42b0eaa3786ff600 Mon Sep 17 00:00:00 2001
+From 182f23825cd873fc2b4ee2ddb81b21d7194e60d2 Mon Sep 17 00:00:00 2001
 From: =?UTF-8?q?Michael=20M=C3=BCller?= <michael@fds-team.de>
 Date: Sat, 5 Aug 2017 01:45:29 +0200
 Subject: [PATCH] ntdll: Add function to create new tokens for elevation
@@ -14,10 +14,10 @@ Subject: [PATCH] ntdll: Add function to create new tokens for elevation
  6 files changed, 117 insertions(+)
 
 diff --git a/dlls/ntdll/ntdll.spec b/dlls/ntdll/ntdll.spec
-index e5db07f0a4e..d52f6b76aa4 100644
+index 42ce9815489..401bdd61d21 100644
 --- a/dlls/ntdll/ntdll.spec
 +++ b/dlls/ntdll/ntdll.spec
-@@ -1594,6 +1594,9 @@
+@@ -1598,6 +1598,9 @@
  # Virtual memory
  @ cdecl __wine_locked_recvmsg(long ptr long)
  
@@ -28,7 +28,7 @@ index e5db07f0a4e..d52f6b76aa4 100644
  @ cdecl wine_get_version()
  @ cdecl wine_get_build_id()
 diff --git a/dlls/ntdll/ntdll_misc.h b/dlls/ntdll/ntdll_misc.h
-index 92fcde95a8a..80be882e76d 100644
+index c8fbc1ae09d..2603b57be38 100644
 --- a/dlls/ntdll/ntdll_misc.h
 +++ b/dlls/ntdll/ntdll_misc.h
 @@ -69,6 +69,9 @@ extern void init_locale( HMODULE module ) DECLSPEC_HIDDEN;
@@ -42,10 +42,10 @@ index 92fcde95a8a..80be882e76d 100644
  extern BOOL is_wow64 DECLSPEC_HIDDEN;
  extern NTSTATUS alloc_object_attributes( const OBJECT_ATTRIBUTES *attr, struct object_attributes **ret,
 diff --git a/dlls/ntdll/process.c b/dlls/ntdll/process.c
-index 992721d133f..24cb8f53de2 100644
+index 77ba5b371e2..3e91a1fa9c4 100644
 --- a/dlls/ntdll/process.c
 +++ b/dlls/ntdll/process.c
-@@ -82,6 +82,24 @@ HANDLE CDECL __wine_make_process_system(void)
+@@ -72,6 +72,24 @@ HANDLE CDECL __wine_make_process_system(void)
      return ret;
  }
  
@@ -67,14 +67,14 @@ index 992721d133f..24cb8f53de2 100644
 +    return ret;
 +}
 +
- /******************************************************************************
- *  NtQueryInformationProcess		[NTDLL.@]
- *  ZwQueryInformationProcess		[NTDLL.@]
+ /***********************************************************************
+  *           restart_process
+  */
 diff --git a/server/protocol.def b/server/protocol.def
-index 96bc9250ab0..14b811684d8 100644
+index 9da597e2773..abfc744c960 100644
 --- a/server/protocol.def
 +++ b/server/protocol.def
-@@ -3759,6 +3759,14 @@ struct handle_info
+@@ -3583,6 +3583,14 @@ struct handle_info
  @END
  
  
diff --git a/patches/server-Desktop_Refcount/0001-server-Introduce-a-new-alloc_handle-object-callback..patch b/patches/server-Desktop_Refcount/0001-server-Introduce-a-new-alloc_handle-object-callback..patch
index 5502e9a89..6f39ea996 100644
--- a/patches/server-Desktop_Refcount/0001-server-Introduce-a-new-alloc_handle-object-callback..patch
+++ b/patches/server-Desktop_Refcount/0001-server-Introduce-a-new-alloc_handle-object-callback..patch
@@ -1,4 +1,4 @@
-From 057f64581fd7acc3834bae2c6ebccd812f26b722 Mon Sep 17 00:00:00 2001
+From f8ff8733e9ea1e6862af0ce59b211153f83c5a93 Mon Sep 17 00:00:00 2001
 From: Sebastian Lackner <sebastian@fds-team.de>
 Date: Fri, 4 Dec 2015 10:36:47 +0100
 Subject: [PATCH] server: Introduce a new alloc_handle object callback. (v2)
@@ -109,7 +109,7 @@ index db04727b93b..e72a155eeeb 100644
      completion_destroy         /* destroy */
  };
 diff --git a/server/console.c b/server/console.c
-index d6673dca1bd..8ed0c1f2d81 100644
+index 2785669deb2..4dc1eab78d7 100644
 --- a/server/console.c
 +++ b/server/console.c
 @@ -99,6 +99,7 @@ static const struct object_ops console_input_ops =
@@ -120,15 +120,15 @@ index d6673dca1bd..8ed0c1f2d81 100644
      no_close_handle,                  /* close_handle */
      console_input_destroy             /* destroy */
  };
-@@ -134,6 +135,7 @@ static const struct object_ops console_input_events_ops =
+@@ -156,6 +157,7 @@ static const struct object_ops console_input_events_ops =
      NULL,                             /* unlink_name */
-     no_open_file,                     /* open_file */
+     console_input_events_open_file,   /* open_file */
      no_kernel_obj_list,               /* get_kernel_obj_list */
 +    no_alloc_handle,                  /* alloc_handle */
      no_close_handle,                  /* close_handle */
      console_input_events_destroy      /* destroy */
  };
-@@ -197,6 +199,7 @@ static const struct object_ops screen_buffer_ops =
+@@ -236,6 +238,7 @@ static const struct object_ops screen_buffer_ops =
      NULL,                             /* unlink_name */
      screen_buffer_open_file,          /* open_file */
      no_kernel_obj_list,               /* get_kernel_obj_list */
@@ -136,7 +136,7 @@ index d6673dca1bd..8ed0c1f2d81 100644
      no_close_handle,                  /* close_handle */
      screen_buffer_destroy             /* destroy */
  };
-@@ -244,6 +247,7 @@ static const struct object_ops console_device_ops =
+@@ -282,6 +285,7 @@ static const struct object_ops console_device_ops =
      default_unlink_name,              /* unlink_name */
      console_device_open_file,         /* open_file */
      no_kernel_obj_list,               /* get_kernel_obj_list */
@@ -201,7 +201,7 @@ index 01e08f295f7..90150e1b251 100644
      device_file_destroy               /* destroy */
  };
 diff --git a/server/directory.c b/server/directory.c
-index 4d38393a6c8..ce6f20723b0 100644
+index 198fc48ece2..b735602a805 100644
 --- a/server/directory.c
 +++ b/server/directory.c
 @@ -68,6 +68,7 @@ static const struct object_ops object_type_ops =
@@ -241,7 +241,7 @@ index d339d85aa45..a78d73d9e78 100644
      no_destroy                   /* destroy */
  };
 diff --git a/server/fd.c b/server/fd.c
-index 7ea8ac273e5..a4741724fb6 100644
+index fbfbe64a631..9e4ee358fe2 100644
 --- a/server/fd.c
 +++ b/server/fd.c
 @@ -221,6 +221,7 @@ static const struct object_ops fd_ops =
@@ -289,7 +289,7 @@ index 38260cfd2b3..ba9358c0ee0 100644
      file_destroy                  /* destroy */
  };
 diff --git a/server/handle.c b/server/handle.c
-index a2a8bb5479c..47378259df4 100644
+index 9ae99cd0c63..5a3a357b991 100644
 --- a/server/handle.c
 +++ b/server/handle.c
 @@ -134,6 +134,7 @@ static const struct object_ops handle_table_ops =
@@ -374,7 +374,7 @@ index 781e6f3141a..6f0321393e2 100644
      mailslot_device_destroy         /* destroy */
  };
 diff --git a/server/mapping.c b/server/mapping.c
-index 07c51c246d6..796855ac8e5 100644
+index 6e74f5b770f..fc93e7cd7be 100644
 --- a/server/mapping.c
 +++ b/server/mapping.c
 @@ -79,6 +79,7 @@ static const struct object_ops ranges_ops =
@@ -414,7 +414,7 @@ index 8a8f7248eae..3754c35acbb 100644
      mutex_destroy              /* destroy */
  };
 diff --git a/server/named_pipe.c b/server/named_pipe.c
-index f97b1416415..ef611f49918 100644
+index 06bf8402aea..0be9953419f 100644
 --- a/server/named_pipe.c
 +++ b/server/named_pipe.c
 @@ -129,6 +129,7 @@ static const struct object_ops named_pipe_ops =
@@ -460,10 +460,10 @@ index f97b1416415..ef611f49918 100644
      named_pipe_device_file_destroy           /* destroy */
  };
 diff --git a/server/object.c b/server/object.c
-index dacfe1d71a0..55321dddd87 100644
+index 8ec6609f69d..c319cfc4876 100644
 --- a/server/object.c
 +++ b/server/object.c
-@@ -694,6 +694,10 @@ struct object *no_open_file( struct object *obj, unsigned int access, unsigned i
+@@ -711,6 +711,10 @@ struct object *no_open_file( struct object *obj, unsigned int access, unsigned i
      return NULL;
  }
  
@@ -475,7 +475,7 @@ index dacfe1d71a0..55321dddd87 100644
  {
      return 1;  /* ok to close */
 diff --git a/server/object.h b/server/object.h
-index f0b889d5899..13c59694c46 100644
+index 1f5c4a5f061..d47abbc3e43 100644
 --- a/server/object.h
 +++ b/server/object.h
 @@ -91,8 +91,10 @@ struct object_ops
@@ -490,7 +490,7 @@ index f0b889d5899..13c59694c46 100644
      /* destroy on refcount == 0 */
      void (*destroy)(struct object *);
  };
-@@ -168,6 +170,7 @@ extern void default_unlink_name( struct object *obj, struct object_name *name );
+@@ -170,6 +172,7 @@ extern void default_unlink_name( struct object *obj, struct object_name *name );
  extern struct object *no_open_file( struct object *obj, unsigned int access, unsigned int sharing,
                                      unsigned int options );
  extern struct list *no_kernel_obj_list( struct object *obj );
@@ -499,7 +499,7 @@ index f0b889d5899..13c59694c46 100644
  extern void no_destroy( struct object *obj );
  #ifdef DEBUG_OBJECTS
 diff --git a/server/process.c b/server/process.c
-index 9482da98be5..4166f1ce8df 100644
+index 2c485831e33..f0d9a60bf87 100644
 --- a/server/process.c
 +++ b/server/process.c
 @@ -89,6 +89,7 @@ static const struct object_ops process_ops =
@@ -559,7 +559,7 @@ index dcbb3f791e1..6e5eddcd257 100644
      key_destroy              /* destroy */
  };
 diff --git a/server/request.c b/server/request.c
-index 4c1f30a5fe7..42cc83c3037 100644
+index 321bb6cfa81..1f34e7e9a54 100644
 --- a/server/request.c
 +++ b/server/request.c
 @@ -107,6 +107,7 @@ static const struct object_ops master_socket_ops =
@@ -679,10 +679,10 @@ index 6460acbf519..2b5ae29a45a 100644
      timer_destroy              /* destroy */
  };
 diff --git a/server/token.c b/server/token.c
-index 2fa95e17aaf..8464eaf83eb 100644
+index 23bc1cc13f7..3e8e60016a3 100644
 --- a/server/token.c
 +++ b/server/token.c
-@@ -157,6 +157,7 @@ static const struct object_ops token_ops =
+@@ -161,6 +161,7 @@ static const struct object_ops token_ops =
      NULL,                      /* unlink_name */
      no_open_file,              /* open_file */
      no_kernel_obj_list,        /* get_kernel_obj_list */
diff --git a/patches/server-Object_Types/0002-ntdll-Implement-ObjectTypesInformation-in-NtQueryObj.patch b/patches/server-Object_Types/0002-ntdll-Implement-ObjectTypesInformation-in-NtQueryObj.patch
index cdf7557ad..099e1573c 100644
--- a/patches/server-Object_Types/0002-ntdll-Implement-ObjectTypesInformation-in-NtQueryObj.patch
+++ b/patches/server-Object_Types/0002-ntdll-Implement-ObjectTypesInformation-in-NtQueryObj.patch
@@ -1,4 +1,4 @@
-From 6c4383e0d465d9cf79e772687111ac7b5d250b75 Mon Sep 17 00:00:00 2001
+From d4791a079ee17b42ca668778f18335df471eba6b Mon Sep 17 00:00:00 2001
 From: =?UTF-8?q?Michael=20M=C3=BCller?= <michael@fds-team.de>
 Date: Wed, 8 Mar 2017 02:12:37 +0100
 Subject: [PATCH] ntdll: Implement ObjectTypesInformation in NtQueryObject.
@@ -94,7 +94,7 @@ index c17b6ffa8db..6e760066915 100644
      test_event();
      test_mutant();
 diff --git a/dlls/ntdll/unix/file.c b/dlls/ntdll/unix/file.c
-index dff246f5e74..708fe842020 100644
+index 976dfb4fcc5..693f6290f9b 100644
 --- a/dlls/ntdll/unix/file.c
 +++ b/dlls/ntdll/unix/file.c
 @@ -130,6 +130,8 @@
@@ -106,7 +106,7 @@ index dff246f5e74..708fe842020 100644
  #define MAX_DOS_DRIVES 26
  
  #define FILE_WRITE_TO_END_OF_FILE      ((LONGLONG)-1)
-@@ -6464,6 +6466,57 @@ NTSTATUS WINAPI NtQueryObject( HANDLE handle, OBJECT_INFORMATION_CLASS info_clas
+@@ -6678,6 +6680,57 @@ NTSTATUS WINAPI NtQueryObject( HANDLE handle, OBJECT_INFORMATION_CLASS info_clas
          break;
      }
  
@@ -165,10 +165,10 @@ index dff246f5e74..708fe842020 100644
      {
          OBJECT_DATA_INFORMATION* p = ptr;
 diff --git a/include/winternl.h b/include/winternl.h
-index 347b79ef8e0..fbc52b7d127 100644
+index 1182d1ff429..5dc7a9974b6 100644
 --- a/include/winternl.h
 +++ b/include/winternl.h
-@@ -843,7 +843,7 @@ typedef enum _OBJECT_INFORMATION_CLASS {
+@@ -844,7 +844,7 @@ typedef enum _OBJECT_INFORMATION_CLASS {
      ObjectBasicInformation,
      ObjectNameInformation,
      ObjectTypeInformation,
@@ -177,7 +177,7 @@ index 347b79ef8e0..fbc52b7d127 100644
      ObjectDataInformation
  } OBJECT_INFORMATION_CLASS, *POBJECT_INFORMATION_CLASS;
  
-@@ -1281,9 +1281,35 @@ typedef struct _OBJECT_NAME_INFORMATION {
+@@ -1304,9 +1304,35 @@ typedef struct _OBJECT_NAME_INFORMATION {
  
  typedef struct __OBJECT_TYPE_INFORMATION {
      UNICODE_STRING TypeName;
@@ -215,10 +215,10 @@ index 347b79ef8e0..fbc52b7d127 100644
  #ifdef __WINESRC__
      DWORD_PTR ExitStatus;
 diff --git a/server/directory.c b/server/directory.c
-index 4d38393a6c8..799102379ff 100644
+index b735602a805..d89da8b169b 100644
 --- a/server/directory.c
 +++ b/server/directory.c
-@@ -72,6 +72,8 @@ static const struct object_ops object_type_ops =
+@@ -73,6 +73,8 @@ static const struct object_ops object_type_ops =
      no_destroy                    /* destroy */
  };
  
@@ -227,7 +227,7 @@ index 4d38393a6c8..799102379ff 100644
  
  struct directory
  {
-@@ -236,7 +238,8 @@ struct object_type *get_object_type( const struct unicode_str *name )
+@@ -238,7 +240,8 @@ struct object_type *get_object_type( const struct unicode_str *name )
      {
          if (get_error() != STATUS_OBJECT_NAME_EXISTS)
          {
@@ -237,7 +237,7 @@ index 4d38393a6c8..799102379ff 100644
              make_object_static( &type->obj );
          }
          clear_error();
-@@ -563,3 +566,17 @@ DECL_HANDLER(get_object_type)
+@@ -553,3 +556,17 @@ DECL_HANDLER(get_object_type)
      }
      release_object( obj );
  }
@@ -256,10 +256,10 @@ index 4d38393a6c8..799102379ff 100644
 +    else set_error( STATUS_NO_MORE_ENTRIES );
 +}
 diff --git a/server/protocol.def b/server/protocol.def
-index bf2d8bfd167..def84b35967 100644
+index 98289c685da..57ced5b1683 100644
 --- a/server/protocol.def
 +++ b/server/protocol.def
-@@ -3533,6 +3533,15 @@ struct handle_info
+@@ -3472,6 +3472,15 @@ struct handle_info
  @END
  
  
@@ -272,8 +272,8 @@ index bf2d8bfd167..def84b35967 100644
 +@END
 +
 +
- /* Unlink a named object */
- @REQ(unlink_object)
+ /* Query the impersonation level of an impersonation token */
+ @REQ(get_token_impersonation_level)
      obj_handle_t   handle;        /* handle to the object */
 -- 
 2.27.0
diff --git a/patches/winedevice-Default_Drivers/0004-programs-winedevice-Load-some-common-drivers-and-fix.patch b/patches/winedevice-Default_Drivers/0004-programs-winedevice-Load-some-common-drivers-and-fix.patch
index 21c7373ad..8223f94fe 100644
--- a/patches/winedevice-Default_Drivers/0004-programs-winedevice-Load-some-common-drivers-and-fix.patch
+++ b/patches/winedevice-Default_Drivers/0004-programs-winedevice-Load-some-common-drivers-and-fix.patch
@@ -1,4 +1,4 @@
-From d67ca0757315f863020402e44c50b89f08be3ae6 Mon Sep 17 00:00:00 2001
+From b230ad8676c16e2c02b6c317b0c050494225c696 Mon Sep 17 00:00:00 2001
 From: =?UTF-8?q?Michael=20M=C3=BCller?= <michael@fds-team.de>
 Date: Thu, 8 Jun 2017 23:50:03 +0200
 Subject: [PATCH] programs/winedevice: Load some common drivers and fix ldr
@@ -10,7 +10,7 @@ Subject: [PATCH] programs/winedevice: Load some common drivers and fix ldr
  2 files changed, 76 insertions(+)
 
 diff --git a/dlls/ntoskrnl.exe/tests/driver.c b/dlls/ntoskrnl.exe/tests/driver.c
-index fa8d7b20e3e..176b60d66ad 100644
+index 0671a56efc7..85327c6f4b3 100644
 --- a/dlls/ntoskrnl.exe/tests/driver.c
 +++ b/dlls/ntoskrnl.exe/tests/driver.c
 @@ -46,6 +46,7 @@ static const WCHAR driver_link[] = {'\\','D','o','s','D','e','v','i','c','e','s'
@@ -29,8 +29,8 @@ index fa8d7b20e3e..176b60d66ad 100644
  static void test_lookup_thread(void)
  {
      NTSTATUS status;
-@@ -1996,6 +1998,52 @@ static void test_process_memory(const struct test_input *test_input)
-     ObDereferenceObject(process);
+@@ -2072,6 +2074,52 @@ static void test_permanence(void)
+     ok(status == STATUS_OBJECT_NAME_NOT_FOUND, "got %#x\n", status);
  }
  
 +static void test_default_modules(void)
@@ -82,7 +82,7 @@ index fa8d7b20e3e..176b60d66ad 100644
  static NTSTATUS main_test(DEVICE_OBJECT *device, IRP *irp, IO_STACK_LOCATION *stack)
  {
      ULONG length = stack->Parameters.DeviceIoControl.OutputBufferLength;
-@@ -2042,6 +2090,7 @@ static NTSTATUS main_test(DEVICE_OBJECT *device, IRP *irp, IO_STACK_LOCATION *st
+@@ -2118,6 +2166,7 @@ static NTSTATUS main_test(DEVICE_OBJECT *device, IRP *irp, IO_STACK_LOCATION *st
      test_stack_callout();
      test_lookaside_list();
      test_ob_reference(test_input->path);
@@ -90,7 +90,7 @@ index fa8d7b20e3e..176b60d66ad 100644
      test_resource();
      test_lookup_thread();
      test_IoAttachDeviceToDeviceStack();
-@@ -2296,6 +2345,7 @@ NTSTATUS WINAPI DriverEntry(DRIVER_OBJECT *driver, PUNICODE_STRING registry)
+@@ -2392,6 +2441,7 @@ NTSTATUS WINAPI DriverEntry(DRIVER_OBJECT *driver, PUNICODE_STRING registry)
      DbgPrint("loading driver\n");
  
      driver_obj = driver;
@@ -137,5 +137,5 @@ index 0755caaafb0..6595788053e 100644
      if (!(stop_event = CreateEventW( NULL, TRUE, FALSE, NULL )))
          return;
 -- 
-2.26.2
+2.27.0
 

diff --git a/patches/ntdll-Builtin_Prot/0001-ntdll-Fix-holes-in-ELF-mappings.patch b/patches/ntdll-Builtin_Prot/0001-ntdll-Fix-holes-in-ELF-mappings.patch
index 315bd86b7..b907b22cd 100644
--- a/patches/ntdll-Builtin_Prot/0001-ntdll-Fix-holes-in-ELF-mappings.patch
+++ b/patches/ntdll-Builtin_Prot/0001-ntdll-Fix-holes-in-ELF-mappings.patch
@@ -1,4 +1,4 @@
-From aa9b48c7e76994f4b93fbc516eee5d39a597f63f Mon Sep 17 00:00:00 2001
+From 83309ce4174bf56eef86e516221290b8d88bdc27 Mon Sep 17 00:00:00 2001
 From: =?UTF-8?q?Michael=20M=C3=BCller?= <michael@fds-team.de>
 Date: Thu, 1 Jun 2017 06:04:53 +0200
 Subject: [PATCH] ntdll: Fix holes in ELF mappings. (v2)
@@ -10,10 +10,10 @@ Based on a patch by Andrew Wesie.
  2 files changed, 36 insertions(+), 1 deletion(-)
 
 diff --git a/dlls/ntdll/unix/virtual.c b/dlls/ntdll/unix/virtual.c
-index 66bcde8aff1..734dd130817 100644
+index cdc8e1189b3..1f73e72a952 100644
 --- a/dlls/ntdll/unix/virtual.c
 +++ b/dlls/ntdll/unix/virtual.c
-@@ -959,6 +959,16 @@ static inline BOOL is_write_watch_range( const void *addr, size_t size )
+@@ -968,6 +968,16 @@ static inline BOOL is_write_watch_range( const void *addr, size_t size )
  }
  
  
@@ -30,7 +30,7 @@ index 66bcde8aff1..734dd130817 100644
  /***********************************************************************
   *           find_view_range
   *
-@@ -2920,6 +2930,19 @@ NTSTATUS virtual_handle_fault( LPCVOID addr, DWORD err, BOOL on_signal_stack )
+@@ -2966,6 +2976,19 @@ NTSTATUS virtual_handle_fault( void *addr, DWORD err, void *stack )
          /* ignore fault if page is writable now */
          if (get_unix_prot( get_page_vprot( page ) ) & PROT_WRITE) ret = STATUS_SUCCESS;
      }
@@ -47,7 +47,7 @@ index 66bcde8aff1..734dd130817 100644
 +        else
 +            set_page_vprot_bits( page, page_size, 0, VPROT_READ | VPROT_EXEC );
 +    }
-     server_leave_uninterrupted_section( &virtual_mutex, &sigset );
+     pthread_mutex_unlock( &virtual_mutex );
      return ret;
  }
 diff --git a/dlls/psapi/tests/psapi_main.c b/dlls/psapi/tests/psapi_main.c
diff --git a/patches/ntdll-ForceBottomUpAlloc/0005-ntdll-Use-free-area-list-for-virtual-memory-allocati.patch b/patches/ntdll-ForceBottomUpAlloc/0005-ntdll-Use-free-area-list-for-virtual-memory-allocati.patch
index 9eb2f3f14..ce826382c 100644
--- a/patches/ntdll-ForceBottomUpAlloc/0005-ntdll-Use-free-area-list-for-virtual-memory-allocati.patch
+++ b/patches/ntdll-ForceBottomUpAlloc/0005-ntdll-Use-free-area-list-for-virtual-memory-allocati.patch
@@ -1,4 +1,4 @@
-From 04a45064d81f63de64effc2748b70cf15bba5f5d Mon Sep 17 00:00:00 2001
+From 7264548fa5272de83119327be9f7b1f2815dbc79 Mon Sep 17 00:00:00 2001
 From: Paul Gofman <pgofman@codeweavers.com>
 Date: Tue, 14 Jan 2020 21:42:21 +0300
 Subject: [PATCH] ntdll: Use free area list for virtual memory allocation.
@@ -8,10 +8,10 @@ Subject: [PATCH] ntdll: Use free area list for virtual memory allocation.
  1 file changed, 230 insertions(+), 112 deletions(-)
 
 diff --git a/dlls/ntdll/unix/virtual.c b/dlls/ntdll/unix/virtual.c
-index 00b29bc5d1d..667401aaa93 100644
+index cc7ca87241b..ec404479329 100644
 --- a/dlls/ntdll/unix/virtual.c
 +++ b/dlls/ntdll/unix/virtual.c
-@@ -186,7 +186,11 @@ static BYTE *pages_vprot;
+@@ -189,7 +189,11 @@ static BYTE *pages_vprot;
  #endif
  
  static struct file_view *view_block_start, *view_block_end, *next_free_view;
@@ -23,7 +23,7 @@ index 00b29bc5d1d..667401aaa93 100644
  static void *preload_reserve_start;
  static void *preload_reserve_end;
  static BOOL force_exec_prot;  /* whether to force PROT_EXEC on all PROT_READ mmaps */
-@@ -521,13 +525,13 @@ static struct range_entry *free_ranges_lower_bound( void *addr )
+@@ -546,13 +550,13 @@ static struct range_entry *free_ranges_lower_bound( void *addr )
   *
   * Updates the free_ranges after a new view has been created.
   */
@@ -40,7 +40,7 @@ index 00b29bc5d1d..667401aaa93 100644
      /* free_ranges initial value is such that the view is either inside range or before another one. */
      assert( range != free_ranges_end );
      assert( range->end > view_base || next != free_ranges_end );
-@@ -538,7 +542,7 @@ static void free_ranges_insert_view( struct file_view *view )
+@@ -563,7 +567,7 @@ static void free_ranges_insert_view( struct file_view *view )
          (range->end == view_base && next->base >= view_end))
      {
          /* on Win64, assert that it's correctly aligned so we're not going to be in trouble later */
@@ -49,7 +49,7 @@ index 00b29bc5d1d..667401aaa93 100644
          WARN( "range %p - %p is already mapped\n", view_base, view_end );
          return;
      }
-@@ -578,6 +582,12 @@ static void free_ranges_insert_view( struct file_view *view )
+@@ -603,6 +607,12 @@ static void free_ranges_insert_view( struct file_view *view )
      }
  }
  
@@ -62,7 +62,7 @@ index 00b29bc5d1d..667401aaa93 100644
  
  /***********************************************************************
   *           free_ranges_remove_view
-@@ -608,6 +618,7 @@ static void free_ranges_remove_view( struct file_view *view )
+@@ -633,6 +643,7 @@ static void free_ranges_remove_view( struct file_view *view )
          return;
      }
  #endif
@@ -70,7 +70,7 @@ index 00b29bc5d1d..667401aaa93 100644
  
      /* free_ranges initial value is such that the view is either inside range or before another one. */
      assert( range != free_ranges_end );
-@@ -954,44 +965,6 @@ static struct file_view *find_view_range( const void *addr, size_t size )
+@@ -1008,44 +1019,6 @@ static struct file_view *find_view_range( const void *addr, size_t size )
  }
  
  
@@ -115,7 +115,7 @@ index 00b29bc5d1d..667401aaa93 100644
  /***********************************************************************
   *           try_map_free_area
   *
-@@ -1035,65 +1008,11 @@ static void* try_map_free_area( void *base, void *end, ptrdiff_t step,
+@@ -1084,65 +1057,11 @@ static void* try_map_free_area( void *base, void *end, ptrdiff_t step,
      return NULL;
  }
  
@@ -181,7 +181,7 @@ index 00b29bc5d1d..667401aaa93 100644
   */
  static void *find_reserved_free_area( void *base, void *end, size_t size, int top_down )
  {
-@@ -1307,8 +1226,7 @@ static void delete_view( struct file_view *view ) /* [in] View */
+@@ -1356,8 +1275,7 @@ static void delete_view( struct file_view *view ) /* [in] View */
  {
      if (!(view->protect & VPROT_SYSTEM)) unmap_area( view->base, view->size );
      set_page_vprot( view->base, view->size, 0 );
@@ -191,7 +191,7 @@ index 00b29bc5d1d..667401aaa93 100644
      wine_rb_remove( &views_tree, &view->entry );
      *(struct file_view **)view = next_free_view;
      next_free_view = view;
-@@ -1356,8 +1274,7 @@ static NTSTATUS create_view( struct file_view **view_ret, void *base, size_t siz
+@@ -1405,8 +1323,7 @@ static NTSTATUS create_view( struct file_view **view_ret, void *base, size_t siz
      set_page_vprot( base, size, vprot );
  
      wine_rb_put( &views_tree, view->base, &view->entry );
@@ -201,7 +201,7 @@ index 00b29bc5d1d..667401aaa93 100644
  
      *view_ret = view;
  
-@@ -1589,6 +1506,7 @@ struct alloc_area
+@@ -1651,6 +1568,7 @@ struct alloc_area
      int    top_down;
      void  *limit;
      void  *result;
@@ -209,7 +209,7 @@ index 00b29bc5d1d..667401aaa93 100644
  };
  
  /***********************************************************************
-@@ -1630,6 +1548,210 @@ static int CDECL alloc_reserved_area_callback( void *start, SIZE_T size, void *a
+@@ -1692,6 +1610,210 @@ static int CDECL alloc_reserved_area_callback( void *start, SIZE_T size, void *a
      return 0;
  }
  
@@ -420,7 +420,7 @@ index 00b29bc5d1d..667401aaa93 100644
  /***********************************************************************
   *           map_fixed_area
   *
-@@ -1715,11 +1837,15 @@ static NTSTATUS map_view( struct file_view **view_ret, void *base, size_t size,
+@@ -1777,11 +1899,15 @@ static NTSTATUS map_view( struct file_view **view_ret, void *base, size_t size,
          alloc.size = size;
          alloc.top_down = top_down;
          alloc.limit = (void*)(get_zero_bits_64_mask( zero_bits_64 ) & (UINT_PTR)user_space_limit);
@@ -439,7 +439,7 @@ index 00b29bc5d1d..667401aaa93 100644
          }
  
          if (mmap_enum_reserved_areas( alloc_reserved_area_callback, &alloc, top_down ))
-@@ -1731,15 +1857,6 @@ static NTSTATUS map_view( struct file_view **view_ret, void *base, size_t size,
+@@ -1793,15 +1919,6 @@ static NTSTATUS map_view( struct file_view **view_ret, void *base, size_t size,
              goto done;
          }
  
@@ -455,14 +455,14 @@ index 00b29bc5d1d..667401aaa93 100644
          view_size = size + granularity_mask + 1;
  
          for (;;)
-@@ -2392,6 +2509,7 @@ void virtual_init(void)
+@@ -2456,6 +2573,7 @@ void virtual_init(void)
              if (preload_reserve_start)
                  address_space_start = min( address_space_start, preload_reserve_start );
          }
 +        TRACE("preload reserve %p-%p.\n", preload_reserve_start, preload_reserve_end);
      }
  
-     size = ROUND_SIZE( 0, sizeof(TEB) ) + max( MINSIGSTKSZ, 8192 );
+     size = teb_size + max( MINSIGSTKSZ, 8192 );
 -- 
 2.27.0
 
diff --git a/patches/ntdll-Heap_Improvements/0002-ntdll-Improve-heap-allocation-performance.patch b/patches/ntdll-Heap_Improvements/0002-ntdll-Improve-heap-allocation-performance.patch
index cf68be1a2..27e53ada2 100644
--- a/patches/ntdll-Heap_Improvements/0002-ntdll-Improve-heap-allocation-performance.patch
+++ b/patches/ntdll-Heap_Improvements/0002-ntdll-Improve-heap-allocation-performance.patch
@@ -1,4 +1,4 @@
-From a64bc7c1b8d5625fcb7b1b666d95aced4009341b Mon Sep 17 00:00:00 2001
+From 1b79a7d8eb8c813cca81916eda14090a15b93290 Mon Sep 17 00:00:00 2001
 From: Sebastian Lackner <sebastian@fds-team.de>
 Date: Sat, 22 Jul 2017 07:21:45 +0200
 Subject: [PATCH] ntdll: Improve heap allocation performance. (v2)
@@ -8,7 +8,7 @@ Subject: [PATCH] ntdll: Improve heap allocation performance. (v2)
  1 file changed, 210 insertions(+), 96 deletions(-)
 
 diff --git a/dlls/ntdll/heap.c b/dlls/ntdll/heap.c
-index 3cbbff2de35..fc669d9dc4d 100644
+index 4fe11fe2b48..de33fcce4bb 100644
 --- a/dlls/ntdll/heap.c
 +++ b/dlls/ntdll/heap.c
 @@ -3,6 +3,7 @@
@@ -87,7 +87,7 @@ index 3cbbff2de35..fc669d9dc4d 100644
 -/* Max size of the blocks on the free lists above HEAP_MAX_SMALL_FREE_LIST */
 -static const SIZE_T HEAP_freeListSizes[] =
 -{
--    0x200, 0x400, 0x1000, ~0UL
+-    0x200, 0x400, 0x1000, ~(SIZE_T)0
 -};
 -#define HEAP_NB_FREE_LISTS (ARRAY_SIZE( HEAP_freeListSizes ) + HEAP_NB_SMALL_FREE_LISTS)
 -
diff --git a/patches/ntdll-Interrupt-0x2e/0001-ntdll-Catch-windows-int-0x2e-syscall-on-i386.patch b/patches/ntdll-Interrupt-0x2e/0001-ntdll-Catch-windows-int-0x2e-syscall-on-i386.patch
index 8432d08a5..38657927b 100644
--- a/patches/ntdll-Interrupt-0x2e/0001-ntdll-Catch-windows-int-0x2e-syscall-on-i386.patch
+++ b/patches/ntdll-Interrupt-0x2e/0001-ntdll-Catch-windows-int-0x2e-syscall-on-i386.patch
@@ -1,4 +1,4 @@
-From 17b12b07aae111f5dde4f4dca3520ab93487b2aa Mon Sep 17 00:00:00 2001
+From 4b73ac9cedc1531c6ae441c38d0bad37ed29c13f Mon Sep 17 00:00:00 2001
 From: =?UTF-8?q?Michael=20M=C3=BCller?= <michael@fds-team.de>
 Date: Sun, 19 Mar 2017 19:08:34 +0100
 Subject: [PATCH] ntdll: Catch windows int 0x2e syscall on i386.
@@ -8,15 +8,15 @@ Subject: [PATCH] ntdll: Catch windows int 0x2e syscall on i386.
  1 file changed, 5 insertions(+)
 
 diff --git a/dlls/ntdll/unix/signal_i386.c b/dlls/ntdll/unix/signal_i386.c
-index 7ae4cda33a6..80fef44d055 100644
+index 19ba551773a..e30dbf9398e 100644
 --- a/dlls/ntdll/unix/signal_i386.c
 +++ b/dlls/ntdll/unix/signal_i386.c
-@@ -1638,6 +1638,11 @@ static BOOL handle_interrupt( unsigned int interrupt, ucontext_t *sigcontext, st
-         stack->rec.ExceptionInformation[2] = stack->context.Edx;
-         setup_raise_exception( sigcontext, stack );
+@@ -1584,6 +1584,11 @@ static BOOL handle_interrupt( unsigned int interrupt, ucontext_t *sigcontext, vo
+         rec->ExceptionInformation[2] = context->Edx;
+         setup_raise_exception( sigcontext, stack, rec, context );
          return TRUE;
 +    case 0x2e:
-+        FIXME("unimplemented syscall handler for %#x\n", stack->context.Eax);
++        FIXME("unimplemented syscall handler for %#x\n", context->Eax);
 +        EAX_sig(sigcontext) = STATUS_INVALID_SYSTEM_SERVICE;
 +        EIP_sig(sigcontext) += 2;
 +        return TRUE;
@@ -24,5 +24,5 @@ index 7ae4cda33a6..80fef44d055 100644
          return FALSE;
      }
 -- 
-2.26.2
+2.27.0
 
diff --git a/patches/ntdll-WRITECOPY/0003-ntdll-Setup-a-temporary-signal-handler-during-proces.patch b/patches/ntdll-WRITECOPY/0003-ntdll-Setup-a-temporary-signal-handler-during-proces.patch
index 1b1f2bb5c..348a95401 100644
--- a/patches/ntdll-WRITECOPY/0003-ntdll-Setup-a-temporary-signal-handler-during-proces.patch
+++ b/patches/ntdll-WRITECOPY/0003-ntdll-Setup-a-temporary-signal-handler-during-proces.patch
@@ -1,4 +1,4 @@
-From 2efee8f30caa027977f7cfb91a84b748a5fd17cd Mon Sep 17 00:00:00 2001
+From 25022d43f705d40658bb1aaf3ad8e86edf8b3325 Mon Sep 17 00:00:00 2001
 From: =?UTF-8?q?Michael=20M=C3=BCller?= <michael@fds-team.de>
 Date: Sat, 4 Oct 2014 02:53:22 +0200
 Subject: [PATCH] ntdll: Setup a temporary signal handler during process
@@ -8,16 +8,16 @@ Subject: [PATCH] ntdll: Setup a temporary signal handler during process
  dlls/ntdll/unix/loader.c        |  1 +
  dlls/ntdll/unix/signal_arm.c    |  6 ++++
  dlls/ntdll/unix/signal_arm64.c  |  7 +++++
- dlls/ntdll/unix/signal_i386.c   | 52 +++++++++++++++++++++++++++++++++
+ dlls/ntdll/unix/signal_i386.c   | 56 +++++++++++++++++++++++++++++++++
  dlls/ntdll/unix/signal_x86_64.c |  6 ++++
  dlls/ntdll/unix/unix_private.h  |  1 +
- 6 files changed, 73 insertions(+)
+ 6 files changed, 77 insertions(+)
 
 diff --git a/dlls/ntdll/unix/loader.c b/dlls/ntdll/unix/loader.c
-index 73c24eff549..8881d073684 100644
+index d03f5861d0..d7aa088e1d 100644
 --- a/dlls/ntdll/unix/loader.c
 +++ b/dlls/ntdll/unix/loader.c
-@@ -1761,6 +1761,7 @@ void __wine_main( int argc, char *argv[], char *envp[] )
+@@ -1812,6 +1812,7 @@ void __wine_main( int argc, char *argv[], char *envp[] )
  #endif
  
      virtual_init();
@@ -26,10 +26,10 @@ index 73c24eff549..8881d073684 100644
      ntdll_module = load_ntdll();
      fixup_ntdll_imports( &__wine_spec_nt_header );
 diff --git a/dlls/ntdll/unix/signal_arm.c b/dlls/ntdll/unix/signal_arm.c
-index e65b8a93d18..d7a9323a195 100644
+index 34463309de..0810024a34 100644
 --- a/dlls/ntdll/unix/signal_arm.c
 +++ b/dlls/ntdll/unix/signal_arm.c
-@@ -869,6 +869,12 @@ void signal_init_process(void)
+@@ -830,6 +830,12 @@ void signal_init_process(void)
      exit(1);
  }
  
@@ -43,10 +43,10 @@ index e65b8a93d18..d7a9323a195 100644
  /***********************************************************************
   *           init_thread_context
 diff --git a/dlls/ntdll/unix/signal_arm64.c b/dlls/ntdll/unix/signal_arm64.c
-index 7f8fb708ccd..574633dbd5d 100644
+index e66952a29b..4b63de0ea4 100644
 --- a/dlls/ntdll/unix/signal_arm64.c
 +++ b/dlls/ntdll/unix/signal_arm64.c
-@@ -791,6 +791,13 @@ void signal_init_process(void)
+@@ -882,6 +882,13 @@ void signal_init_process(void)
      exit(1);
  }
  
@@ -61,10 +61,10 @@ index 7f8fb708ccd..574633dbd5d 100644
   *           init_thread_context
   */
 diff --git a/dlls/ntdll/unix/signal_i386.c b/dlls/ntdll/unix/signal_i386.c
-index 2f5d397ed55..c29a006736a 100644
+index 162a0b6a70..dc66ed0f38 100644
 --- a/dlls/ntdll/unix/signal_i386.c
 +++ b/dlls/ntdll/unix/signal_i386.c
-@@ -1644,6 +1644,30 @@ static BOOL handle_interrupt( unsigned int interrupt, ucontext_t *sigcontext, st
+@@ -1590,6 +1590,34 @@ static BOOL handle_interrupt( unsigned int interrupt, ucontext_t *sigcontext, vo
  }
  
  
@@ -76,17 +76,21 @@ index 2f5d397ed55..c29a006736a 100644
 + */
 +static void segv_handler_early( int signal, siginfo_t *siginfo, void *sigcontext )
 +{
-+    ucontext_t *context = sigcontext;
++    EXCEPTION_RECORD rec = { 0 };
++    CONTEXT context;
++    ucontext_t *ucontext = sigcontext;
++    void *stack = setup_exception_record( sigcontext, &rec, &context );
++
 +    init_handler( sigcontext );
 +
-+    switch (TRAP_sig(context))
++    switch (TRAP_sig(ucontext))
 +    {
 +    case TRAP_x86_PAGEFLT:  /* Page fault */
-+        if (!virtual_handle_fault( siginfo->si_addr, (ERROR_sig(context) >> 1) & 0x09, TRUE ))
++        if (!virtual_handle_fault( siginfo->si_addr, (ERROR_sig(ucontext) >> 1) & 0x09, stack ))
 +            return;
 +        /* fall-through */
 +    default:
-+        WINE_ERR( "Got unexpected trap %d during process initialization\n", TRAP_sig(context) );
++        WINE_ERR( "Got unexpected trap %d during process initialization\n", TRAP_sig(ucontext) );
 +        abort_thread(1);
 +        break;
 +    }
@@ -95,7 +99,7 @@ index 2f5d397ed55..c29a006736a 100644
  /**********************************************************************
   *		segv_handler
   *
-@@ -2243,6 +2267,34 @@ void signal_init_process(void)
+@@ -2148,6 +2176,34 @@ void signal_init_process(void)
      exit(1);
  }
  
@@ -131,10 +135,10 @@ index 2f5d397ed55..c29a006736a 100644
  /***********************************************************************
   *           init_thread_context
 diff --git a/dlls/ntdll/unix/signal_x86_64.c b/dlls/ntdll/unix/signal_x86_64.c
-index 88ee18461a2..dedc17bf60e 100644
+index 01be0eab81..4342ab0237 100644
 --- a/dlls/ntdll/unix/signal_x86_64.c
 +++ b/dlls/ntdll/unix/signal_x86_64.c
-@@ -1415,6 +1415,12 @@ void signal_init_process(void)
+@@ -2409,6 +2409,12 @@ void signal_init_process(void)
      exit(1);
  }
  
@@ -148,10 +152,10 @@ index 88ee18461a2..dedc17bf60e 100644
  /***********************************************************************
   *           init_thread_context
 diff --git a/dlls/ntdll/unix/unix_private.h b/dlls/ntdll/unix/unix_private.h
-index 7dbfde43b34..fbcd200c420 100644
+index 3cf9ca6673..76c483cc3f 100644
 --- a/dlls/ntdll/unix/unix_private.h
 +++ b/dlls/ntdll/unix/unix_private.h
-@@ -207,6 +207,7 @@ extern NTSTATUS signal_alloc_thread( TEB *teb ) DECLSPEC_HIDDEN;
+@@ -218,6 +218,7 @@ extern NTSTATUS signal_alloc_thread( TEB *teb ) DECLSPEC_HIDDEN;
  extern void signal_free_thread( TEB *teb ) DECLSPEC_HIDDEN;
  extern void signal_init_thread( TEB *teb ) DECLSPEC_HIDDEN;
  extern void signal_init_process(void) DECLSPEC_HIDDEN;
diff --git a/patches/ntdll-WRITECOPY/0004-ntdll-Properly-handle-PAGE_WRITECOPY-protection.-try.patch b/patches/ntdll-WRITECOPY/0004-ntdll-Properly-handle-PAGE_WRITECOPY-protection.-try.patch
index 19150af8d..d58e59116 100644
--- a/patches/ntdll-WRITECOPY/0004-ntdll-Properly-handle-PAGE_WRITECOPY-protection.-try.patch
+++ b/patches/ntdll-WRITECOPY/0004-ntdll-Properly-handle-PAGE_WRITECOPY-protection.-try.patch
@@ -1,4 +1,4 @@
-From d85f01d0f447026a9cb266cd85934f6f0874ef75 Mon Sep 17 00:00:00 2001
+From 7cdceba44d1eb2af5a724f55964802cd8bc05454 Mon Sep 17 00:00:00 2001
 From: =?UTF-8?q?Michael=20M=C3=BCller?= <michael@fds-team.de>
 Date: Sat, 4 Oct 2014 03:22:09 +0200
 Subject: [PATCH] ntdll: Properly handle PAGE_WRITECOPY protection. (try 5)
@@ -9,10 +9,10 @@ For now, only enable it when a special environment variable is set.
  1 file changed, 39 insertions(+), 7 deletions(-)
 
 diff --git a/dlls/ntdll/unix/virtual.c b/dlls/ntdll/unix/virtual.c
-index 90dfb62eed1..b059261b3c0 100644
+index b17d8d6b61e..d3ed89de62e 100644
 --- a/dlls/ntdll/unix/virtual.c
 +++ b/dlls/ntdll/unix/virtual.c
-@@ -491,6 +491,21 @@ int CDECL mmap_enum_reserved_areas( int (CDECL *enum_func)(void *base, SIZE_T si
+@@ -500,6 +500,21 @@ int CDECL mmap_enum_reserved_areas( int (CDECL *enum_func)(void *base, SIZE_T si
      return ret;
  }
  
@@ -34,7 +34,7 @@ index 90dfb62eed1..b059261b3c0 100644
  
  /***********************************************************************
   *           free_ranges_lower_bound
-@@ -792,8 +807,19 @@ static int get_unix_prot( BYTE vprot )
+@@ -801,8 +816,19 @@ static int get_unix_prot( BYTE vprot )
      {
          if (vprot & VPROT_READ) prot |= PROT_READ;
          if (vprot & VPROT_WRITE) prot |= PROT_WRITE | PROT_READ;
@@ -55,7 +55,7 @@ index 90dfb62eed1..b059261b3c0 100644
          if (vprot & VPROT_WRITEWATCH) prot &= ~PROT_WRITE;
      }
      if (!prot) prot = PROT_NONE;
-@@ -1532,7 +1558,7 @@ static void update_write_watches( void *base, size_t size, size_t accessed_size
+@@ -1548,7 +1574,7 @@ static void update_write_watches( void *base, size_t size, size_t accessed_size
  {
      TRACE( "updating watch %p-%p-%p\n", base, (char *)base + accessed_size, (char *)base + size );
      /* clear write watch flag on accessed pages */
@@ -64,7 +64,7 @@ index 90dfb62eed1..b059261b3c0 100644
      /* restore page protections on the entire range */
      mprotect_range( base, size, 0, 0 );
  }
-@@ -2854,12 +2880,13 @@ NTSTATUS virtual_handle_fault( LPCVOID addr, DWORD err, BOOL on_signal_stack )
+@@ -2900,12 +2926,13 @@ NTSTATUS virtual_handle_fault( void *addr, DWORD err, void *stack )
              set_page_vprot_bits( page, page_size, 0, VPROT_WRITEWATCH );
              mprotect_range( page, page_size, 0, 0 );
          }
@@ -80,9 +80,9 @@ index 90dfb62eed1..b059261b3c0 100644
 +        /* ignore fault if page is writable now */
 +        if (get_unix_prot( get_page_vprot( page ) ) & PROT_WRITE) ret = STATUS_SUCCESS;
      }
-     server_leave_uninterrupted_section( &virtual_mutex, &sigset );
+     pthread_mutex_unlock( &virtual_mutex );
      return ret;
-@@ -2881,11 +2908,16 @@ static NTSTATUS check_write_access( void *base, size_t size, BOOL *has_write_wat
+@@ -2982,11 +3009,16 @@ static NTSTATUS check_write_access( void *base, size_t size, BOOL *has_write_wat
      {
          BYTE vprot = get_page_vprot( addr + i );
          if (vprot & VPROT_WRITEWATCH) *has_write_watch = TRUE;
diff --git a/patches/winebuild-pe_syscall_thunks/0002-winebuild-Call-__wine_syscall_dispatcher-through-the.patch b/patches/winebuild-pe_syscall_thunks/0002-winebuild-Call-__wine_syscall_dispatcher-through-the.patch
index f3b673cc7..3f13cd30d 100644
--- a/patches/winebuild-pe_syscall_thunks/0002-winebuild-Call-__wine_syscall_dispatcher-through-the.patch
+++ b/patches/winebuild-pe_syscall_thunks/0002-winebuild-Call-__wine_syscall_dispatcher-through-the.patch
@@ -1,4 +1,4 @@
-From 5c11ca24fef2c1008b0845e53451a895a2f1c42e Mon Sep 17 00:00:00 2001
+From 00809244f00603cadec94cb8f80a92662091b41a Mon Sep 17 00:00:00 2001
 From: Paul Gofman <pgofman@codeweavers.com>
 Date: Tue, 14 Jul 2020 14:43:01 +0300
 Subject: [PATCH] winebuild: Call __wine_syscall_dispatcher through the fixed
@@ -17,18 +17,18 @@ call syscall thunks from the loaded image.
  2 files changed, 8 insertions(+), 6 deletions(-)
 
 diff --git a/dlls/ntdll/unix/virtual.c b/dlls/ntdll/unix/virtual.c
-index b261fa0b5474..f801ffdc5bef 100644
+index ff569762953..f67901678f8 100644
 --- a/dlls/ntdll/unix/virtual.c
 +++ b/dlls/ntdll/unix/virtual.c
-@@ -2796,20 +2796,22 @@ TEB *virtual_alloc_first_teb(void)
+@@ -2802,20 +2802,22 @@ TEB *virtual_alloc_first_teb(void)
      TEB *teb;
      PEB *peb;
      NTSTATUS status;
 -    SIZE_T data_size = page_size;
 +    SIZE_T data_size = page_size * 2;
      SIZE_T peb_size = page_size;
-     SIZE_T teb_size = signal_stack_mask + 1;
-     SIZE_T total = 32 * teb_size;
+     SIZE_T block_size = signal_stack_size + teb_size;
+     SIZE_T total = 32 * block_size;
  
      /* reserve space for shared user data */
      status = NtAllocateVirtualMemory( NtCurrentProcess(), (void **)&user_shared_data, 0, &data_size,
@@ -46,7 +46,7 @@ index b261fa0b5474..f801ffdc5bef 100644
                               MEM_RESERVE | MEM_TOP_DOWN, PAGE_READWRITE );
      teb_block_pos = 30;
 diff --git a/tools/winebuild/import.c b/tools/winebuild/import.c
-index 278de20522e1..094b9da0ccf5 100644
+index 278de20522e..094b9da0ccf 100644
 --- a/tools/winebuild/import.c
 +++ b/tools/winebuild/import.c
 @@ -1613,10 +1613,10 @@ void output_syscalls( DLLSPEC *spec )
@@ -73,5 +73,5 @@ index 278de20522e1..094b9da0ccf5 100644
      }
      output( "\t.data\n" );
 -- 
-2.26.2
+2.27.0
 
diff --git a/patches/winebuild-pe_syscall_thunks/0004-ntdll-Fix-NtGetContextThread-on-i386-with-PE-syscall.patch b/patches/winebuild-pe_syscall_thunks/0004-ntdll-Fix-NtGetContextThread-on-i386-with-PE-syscall.patch
index f68820020..2d9f5bcb3 100644
--- a/patches/winebuild-pe_syscall_thunks/0004-ntdll-Fix-NtGetContextThread-on-i386-with-PE-syscall.patch
+++ b/patches/winebuild-pe_syscall_thunks/0004-ntdll-Fix-NtGetContextThread-on-i386-with-PE-syscall.patch
@@ -1,4 +1,4 @@
-From 1ec1266cf05ab1aeaecb5acbc3402da69d0f63b7 Mon Sep 17 00:00:00 2001
+From 9604e2ff972e022b0fa10712d3e55580b232f2c2 Mon Sep 17 00:00:00 2001
 From: Paul Gofman <pgofman@codeweavers.com>
 Date: Tue, 14 Jul 2020 13:31:48 +0300
 Subject: [PATCH] ntdll: Fix NtGetContextThread on i386 with PE syscall thunks.
@@ -11,7 +11,7 @@ Unix part.
  2 files changed, 8 insertions(+), 3 deletions(-)
 
 diff --git a/dlls/ntdll/signal_i386.c b/dlls/ntdll/signal_i386.c
-index a130638cb310..e098b3e409b2 100644
+index a130638cb310..8f560e51134b 100644
 --- a/dlls/ntdll/signal_i386.c
 +++ b/dlls/ntdll/signal_i386.c
 @@ -331,6 +331,8 @@ __ASM_STDCALL_FUNC( RtlCaptureContext, 4,
@@ -32,7 +32,7 @@ index a130638cb310..e098b3e409b2 100644
 -        context->Eip    = (DWORD)NtGetContextThread + 12;
 +        context->Ebp    = *(DWORD *)ebp;
 +        context->Esp    = ebp + 4;
-+        context->Eip    = (DWORD)_syscall_NtGetContextThread + 18;
++        context->Eip    = *((DWORD *)ebp + 1);
          context->EFlags = eflags;
      }
      return unix_funcs->NtGetContextThread( handle, context );
diff --git a/patches/winebuild-pe_syscall_thunks/0002-winebuild-Call-__wine_syscall_dispatcher-through-the.patch b/patches/winebuild-pe_syscall_thunks/0002-winebuild-Call-__wine_syscall_dispatcher-through-the.patch
index ecf1da0b0..f3b673cc7 100644
--- a/patches/winebuild-pe_syscall_thunks/0002-winebuild-Call-__wine_syscall_dispatcher-through-the.patch
+++ b/patches/winebuild-pe_syscall_thunks/0002-winebuild-Call-__wine_syscall_dispatcher-through-the.patch
@@ -1,4 +1,4 @@
-From 7ef3c9eaa792085641feefd5ee7f7bc157093064 Mon Sep 17 00:00:00 2001
+From 5c11ca24fef2c1008b0845e53451a895a2f1c42e Mon Sep 17 00:00:00 2001
 From: Paul Gofman <pgofman@codeweavers.com>
 Date: Tue, 14 Jul 2020 14:43:01 +0300
 Subject: [PATCH] winebuild: Call __wine_syscall_dispatcher through the fixed
@@ -17,7 +17,7 @@ call syscall thunks from the loaded image.
  2 files changed, 8 insertions(+), 6 deletions(-)
 
 diff --git a/dlls/ntdll/unix/virtual.c b/dlls/ntdll/unix/virtual.c
-index d7d7bd9084f6..60d27d31c4a9 100644
+index b261fa0b5474..f801ffdc5bef 100644
 --- a/dlls/ntdll/unix/virtual.c
 +++ b/dlls/ntdll/unix/virtual.c
 @@ -2796,20 +2796,22 @@ TEB *virtual_alloc_first_teb(void)
@@ -46,7 +46,7 @@ index d7d7bd9084f6..60d27d31c4a9 100644
                               MEM_RESERVE | MEM_TOP_DOWN, PAGE_READWRITE );
      teb_block_pos = 30;
 diff --git a/tools/winebuild/import.c b/tools/winebuild/import.c
-index 4f641825e367..cf251c9b77d4 100644
+index 278de20522e1..094b9da0ccf5 100644
 --- a/tools/winebuild/import.c
 +++ b/tools/winebuild/import.c
 @@ -1613,10 +1613,10 @@ void output_syscalls( DLLSPEC *spec )
diff --git a/patches/winebuild-pe_syscall_thunks/0003-ntdll-Also-generate-syscall-thunks-for-Nt-functions-.patch b/patches/winebuild-pe_syscall_thunks/0003-ntdll-Also-generate-syscall-thunks-for-Nt-functions-.patch
index 36370efcb..59c4fc11e 100644
--- a/patches/winebuild-pe_syscall_thunks/0003-ntdll-Also-generate-syscall-thunks-for-Nt-functions-.patch
+++ b/patches/winebuild-pe_syscall_thunks/0003-ntdll-Also-generate-syscall-thunks-for-Nt-functions-.patch
@@ -1,4 +1,4 @@
-From bcab391401b586a877ee0ff69525a3429a1b2b48 Mon Sep 17 00:00:00 2001
+From 6ddc75bcb9bff473ff52717021c5287d426fce13 Mon Sep 17 00:00:00 2001
 From: Paul Gofman <pgofman@codeweavers.com>
 Date: Tue, 14 Jul 2020 02:05:59 +0300
 Subject: [PATCH] ntdll: Also generate syscall thunks for Nt functions not yet
@@ -6,16 +6,16 @@ Subject: [PATCH] ntdll: Also generate syscall thunks for Nt functions not yet
 
 ---
  dlls/ntdll/ntdll.spec    |  1 +
- dlls/ntdll/unix/loader.c | 37 +++++++++++++++++++++++++++++++++
- tools/winebuild/import.c | 44 +++++++++++++++++++++++++++++++++++-----
- tools/winebuild/spec32.c | 16 ++++++++++++++-
- 4 files changed, 92 insertions(+), 6 deletions(-)
+ dlls/ntdll/unix/loader.c | 37 ++++++++++++++++++++++++
+ tools/winebuild/import.c | 62 +++++++++++++++++++++++++++++-----------
+ tools/winebuild/spec32.c | 16 ++++++++++-
+ 4 files changed, 98 insertions(+), 18 deletions(-)
 
 diff --git a/dlls/ntdll/ntdll.spec b/dlls/ntdll/ntdll.spec
-index b873b54b09d6..09b060b094ae 100644
+index 79ec71ed91e0..b001a2fb2f91 100644
 --- a/dlls/ntdll/ntdll.spec
 +++ b/dlls/ntdll/ntdll.spec
-@@ -1588,6 +1588,7 @@
+@@ -1586,6 +1586,7 @@
  @ cdecl __wine_set_unix_funcs(long ptr)
  @ extern __wine_syscall_dispatcher
  @ extern -arch=i386 __wine_ldt_copy
@@ -24,7 +24,7 @@ index b873b54b09d6..09b060b094ae 100644
  # Debugging
  @ cdecl -norelay __wine_dbg_get_channel_flags(ptr)
 diff --git a/dlls/ntdll/unix/loader.c b/dlls/ntdll/unix/loader.c
-index b211708aca02..c6760831d48c 100644
+index d7aa088e1d4e..b95e1fb4de93 100644
 --- a/dlls/ntdll/unix/loader.c
 +++ b/dlls/ntdll/unix/loader.c
 @@ -788,6 +788,41 @@ static ULONG_PTR find_pe_export( HMODULE module, const IMAGE_EXPORT_DIRECTORY *e
@@ -79,10 +79,20 @@ index b211708aca02..c6760831d48c 100644
      if (!(p##name = (void *)find_named_export( ntdll_module, ntdll_exports, #name ))) \
          ERR( "%s not found\n", #name )
 diff --git a/tools/winebuild/import.c b/tools/winebuild/import.c
-index cf251c9b77d4..71d397122f60 100644
+index 094b9da0ccf5..229729386390 100644
 --- a/tools/winebuild/import.c
 +++ b/tools/winebuild/import.c
-@@ -1418,11 +1418,13 @@ void output_syscalls( DLLSPEC *spec )
+@@ -563,7 +563,8 @@ static void check_undefined_exports( DLLSPEC *spec )
+                             spec->src_name, odp->lineno, odp->link_name );
+                 break;
+             default:
+-                if (!strcmp( odp->link_name, "__wine_syscall_dispatcher" )) break;
++                if (!strcmp( odp->link_name, "__wine_syscall_dispatcher" )
++                        || !strcmp( odp->link_name, "pe_syscall_table" )) break;
+                 error( "%s:%d: external symbol '%s' is not a function\n",
+                        spec->src_name, odp->lineno, odp->link_name );
+                 break;
+@@ -1418,11 +1419,13 @@ void output_syscalls( DLLSPEC *spec )
      const unsigned int invalid_param = 0xc000000d; /* STATUS_INVALID_PARAMETER */
      int i, count;
      ORDDEF **syscalls = NULL;
@@ -97,7 +107,7 @@ index cf251c9b77d4..71d397122f60 100644
          if (!syscalls) syscalls = xmalloc( (spec->nb_entry_points - i) * sizeof(*syscalls) );
          syscalls[count++] = odp;
      }
-@@ -1560,25 +1562,57 @@ void output_syscalls( DLLSPEC *spec )
+@@ -1560,25 +1563,56 @@ void output_syscalls( DLLSPEC *spec )
          }
          output_cfi( ".cfi_endproc" );
          output_function_size( "__wine_syscall_dispatcher" );
@@ -137,7 +147,6 @@ index cf251c9b77d4..71d397122f60 100644
 +        else
 +            output( "\t%s 0xdeadcafe\n", get_asm_ptr_keyword());
 +    }
-+
 +    output( "\t.text\n" );
 +
      for (i = 0; i < count; i++)
@@ -159,6 +168,36 @@ index cf251c9b77d4..71d397122f60 100644
          output_cfi( ".cfi_startproc" );
          switch (target_cpu)
          {
+@@ -1613,16 +1647,10 @@ void output_syscalls( DLLSPEC *spec )
+             output( "\t.byte 0xc3\n" );           /* ret */
+             output( "\tjmp 1f\n" );
+             output( "\t.byte 0xc3\n" );           /* ret */
+-            if (target_platform == PLATFORM_WINDOWS || target_platform == PLATFORM_APPLE)
+-            {
+-                output( "1:\t.byte 0xff,0x14,0x25\n" ); /* call *(user_shared_data + 0x1000) */
+-                output( "\t.long 0x7ffe1000\n" );
+-            }
+-            else
+-            {
+-                output( "\tnop\n" );
+-                output( "1:\tcallq *%s(%%rip)\n", asm_name("__wine_syscall_dispatcher") );
+-            }
++
++            output( "1:\t.byte 0xff,0x14,0x25\n" ); /* call *(user_shared_data + 0x1000) */
++            output( "\t.long 0x7ffe1000\n" );
++
+             output( "\tret\n" );
+             break;
+         case CPU_ARM:
+@@ -1645,7 +1673,7 @@ void output_syscalls( DLLSPEC *spec )
+             assert(0);
+         }
+         output_cfi( ".cfi_endproc" );
+-        output_function_size( name );
++        output_function_size( exp_name );
+     }
+ 
+     if (target_cpu == CPU_x86 && !UsePIC)
 diff --git a/tools/winebuild/spec32.c b/tools/winebuild/spec32.c
 index c85249b2a961..7cfbe5389bdf 100644
 --- a/tools/winebuild/spec32.c
diff --git a/patches/winebuild-pe_syscall_thunks/0004-ntdll-Fix-NtGetContextThread-on-i386-with-PE-syscall.patch b/patches/winebuild-pe_syscall_thunks/0004-ntdll-Fix-NtGetContextThread-on-i386-with-PE-syscall.patch
index bdfdb95b4..f68820020 100644
--- a/patches/winebuild-pe_syscall_thunks/0004-ntdll-Fix-NtGetContextThread-on-i386-with-PE-syscall.patch
+++ b/patches/winebuild-pe_syscall_thunks/0004-ntdll-Fix-NtGetContextThread-on-i386-with-PE-syscall.patch
@@ -1,4 +1,4 @@
-From 52177a4f877115f0fa358c37da6dcdcfb17e83f8 Mon Sep 17 00:00:00 2001
+From 1ec1266cf05ab1aeaecb5acbc3402da69d0f63b7 Mon Sep 17 00:00:00 2001
 From: Paul Gofman <pgofman@codeweavers.com>
 Date: Tue, 14 Jul 2020 13:31:48 +0300
 Subject: [PATCH] ntdll: Fix NtGetContextThread on i386 with PE syscall thunks.
@@ -37,10 +37,10 @@ index a130638cb310..e098b3e409b2 100644
      }
      return unix_funcs->NtGetContextThread( handle, context );
 diff --git a/tools/winebuild/import.c b/tools/winebuild/import.c
-index 71d397122f60..e8bd141e962b 100644
+index 229729386390..e8778527d173 100644
 --- a/tools/winebuild/import.c
 +++ b/tools/winebuild/import.c
-@@ -1469,6 +1469,9 @@ void output_syscalls( DLLSPEC *spec )
+@@ -1470,6 +1470,9 @@ void output_syscalls( DLLSPEC *spec )
              output( "\tmovl %%esp,%%edi\n" );
              output( "\tcld\n" );
              output( "\trep; movsl\n" );

diff --git a/patches/ntdll-DOS_Attributes/0001-ntdll-Implement-retrieving-DOS-attributes-in-fd_-get.patch b/patches/ntdll-DOS_Attributes/0001-ntdll-Implement-retrieving-DOS-attributes-in-fd_-get.patch
index 1b9b1b82c..d408a4b0d 100644
--- a/patches/ntdll-DOS_Attributes/0001-ntdll-Implement-retrieving-DOS-attributes-in-fd_-get.patch
+++ b/patches/ntdll-DOS_Attributes/0001-ntdll-Implement-retrieving-DOS-attributes-in-fd_-get.patch
@@ -1,4 +1,4 @@
-From 0bfc43bff3a9b53e65c82d987bb072f0ff0a3a2b Mon Sep 17 00:00:00 2001
+From f96ab0203c4119942b9d8ccc27207cc73389b375 Mon Sep 17 00:00:00 2001
 From: "Erich E. Hoover" <erich.e.hoover@gmail.com>
 Date: Tue, 19 Aug 2014 22:10:49 -0600
 Subject: [PATCH] ntdll: Implement retrieving DOS attributes in
@@ -14,7 +14,7 @@ Subject: [PATCH] ntdll: Implement retrieving DOS attributes in
  create mode 100644 libs/port/xattr.c
 
 diff --git a/configure.ac b/configure.ac
-index d3bd12a6340..5e775c04449 100644
+index 4829648c3a5..cff2d4b8288 100644
 --- a/configure.ac
 +++ b/configure.ac
 @@ -88,6 +88,7 @@ AC_ARG_WITH(usb,       AS_HELP_STRING([--without-usb],[do not use the libusb lib
@@ -44,10 +44,10 @@ index d3bd12a6340..5e775c04449 100644
  
  AC_SUBST(DLLFLAGS,"-D_REENTRANT")
 diff --git a/dlls/ntdll/unix/file.c b/dlls/ntdll/unix/file.c
-index 66ce2eb5fe4..d2e783f3300 100644
+index bf435f109f1..6ac9b18da57 100644
 --- a/dlls/ntdll/unix/file.c
 +++ b/dlls/ntdll/unix/file.c
-@@ -1431,6 +1431,22 @@ static BOOL append_entry( struct dir_data *data, const char *long_name,
+@@ -1448,6 +1448,22 @@ static BOOL append_entry( struct dir_data *data, const char *long_name,
  }
  
  
@@ -70,7 +70,7 @@ index 66ce2eb5fe4..d2e783f3300 100644
  /* fetch the attributes of a file */
  static inline ULONG get_file_attributes( const struct stat *st )
  {
-@@ -1450,7 +1466,8 @@ static inline ULONG get_file_attributes( const struct stat *st )
+@@ -1491,7 +1507,8 @@ static int fd_get_file_info( int fd, unsigned int options, struct stat *st, ULON
  static int get_file_info( const char *path, struct stat *st, ULONG *attr )
  {
      char *parent_path;
@@ -80,8 +80,8 @@ index 66ce2eb5fe4..d2e783f3300 100644
  
      *attr = 0;
      ret = lstat( path, st );
-@@ -1476,6 +1493,9 @@ static int get_file_info( const char *path, struct stat *st, ULONG *attr )
-         RtlFreeHeap( GetProcessHeap(), 0, parent_path );
+@@ -1517,6 +1534,9 @@ static int get_file_info( const char *path, struct stat *st, ULONG *attr )
+         free( parent_path );
      }
      *attr |= get_file_attributes( st );
 +    len = xattr_get( path, SAMBA_XATTR_DOS_ATTRIB, hexattr, sizeof(hexattr)-1 );
@@ -91,10 +91,10 @@ index 66ce2eb5fe4..d2e783f3300 100644
  }
  
 diff --git a/include/wine/port.h b/include/wine/port.h
-index e8434c73cca..6e81cb71a76 100644
+index 928730a41d7..4670891ae77 100644
 --- a/include/wine/port.h
 +++ b/include/wine/port.h
-@@ -361,6 +361,15 @@ int usleep (unsigned int useconds);
+@@ -352,6 +352,15 @@ int usleep (unsigned int useconds);
  
  extern int mkstemps(char *template, int suffix_len);
  
@@ -111,10 +111,10 @@ index e8434c73cca..6e81cb71a76 100644
  
  #define __WINE_NOT_PORTABLE(func) func##_is_not_portable func##_is_not_portable
 diff --git a/libs/port/Makefile.in b/libs/port/Makefile.in
-index 1963afe2423..4b1ecab7516 100644
+index 7bc67fa3fee..d1de285d527 100644
 --- a/libs/port/Makefile.in
 +++ b/libs/port/Makefile.in
-@@ -22,4 +22,5 @@ C_SRCS = \
+@@ -21,4 +21,5 @@ C_SRCS = \
  	strnlen.c \
  	symlink.c \
  	usleep.c \
diff --git a/patches/ntdll-DOS_Attributes/0004-ntdll-Implement-storing-DOS-attributes-in-NtCreateFi.patch b/patches/ntdll-DOS_Attributes/0004-ntdll-Implement-storing-DOS-attributes-in-NtCreateFi.patch
index e183e21b9..3807891d8 100644
--- a/patches/ntdll-DOS_Attributes/0004-ntdll-Implement-storing-DOS-attributes-in-NtCreateFi.patch
+++ b/patches/ntdll-DOS_Attributes/0004-ntdll-Implement-storing-DOS-attributes-in-NtCreateFi.patch
@@ -1,4 +1,4 @@
-From 5f6d3c447ef1e243de6188d8813261d991c4ffc7 Mon Sep 17 00:00:00 2001
+From 29333aaab5e4d2b62741a8321382b24f1630eb70 Mon Sep 17 00:00:00 2001
 From: "Erich E. Hoover" <erich.e.hoover@gmail.com>
 Date: Wed, 20 Aug 2014 15:28:00 -0600
 Subject: [PATCH] ntdll: Implement storing DOS attributes in NtCreateFile.
@@ -60,10 +60,10 @@ index 248ed99ab20..e0f4debc624 100644
          }
          testfiles[i].nfound++;
 diff --git a/dlls/ntdll/unix/file.c b/dlls/ntdll/unix/file.c
-index f1176717819..5d5e4ba2892 100644
+index 7ab1c130bf2..7c737edd22c 100644
 --- a/dlls/ntdll/unix/file.c
 +++ b/dlls/ntdll/unix/file.c
-@@ -3595,6 +3595,20 @@ void CDECL set_show_dot_files( BOOL enable )
+@@ -3549,6 +3549,20 @@ void CDECL set_show_dot_files( BOOL enable )
      show_dot_files = enable;
  }
  
@@ -84,7 +84,7 @@ index f1176717819..5d5e4ba2892 100644
  
  /******************************************************************************
   *              open_unix_file
-@@ -3682,13 +3696,14 @@ NTSTATUS WINAPI NtCreateFile( HANDLE *handle, ACCESS_MASK access, OBJECT_ATTRIBU
+@@ -3636,13 +3650,14 @@ NTSTATUS WINAPI NtCreateFile( HANDLE *handle, ACCESS_MASK access, OBJECT_ATTRIBU
          io->u.Status = STATUS_SUCCESS;
      }
  
@@ -93,7 +93,7 @@ index f1176717819..5d5e4ba2892 100644
      {
 -        io->u.Status = open_unix_file( handle, unix_name, access, attr, attributes,
 -                                       sharing, disposition, options, ea_buffer, ea_length );
--        RtlFreeHeap( GetProcessHeap(), 0, unix_name );
+-        free( unix_name );
 +        WARN( "%s not found (%x)\n", debugstr_us(attr->ObjectName), io->u.Status );
 +        return io->u.Status;
      }
@@ -104,7 +104,7 @@ index f1176717819..5d5e4ba2892 100644
  
      if (io->u.Status == STATUS_SUCCESS)
      {
-@@ -3710,6 +3725,11 @@ NTSTATUS WINAPI NtCreateFile( HANDLE *handle, ACCESS_MASK access, OBJECT_ATTRIBU
+@@ -3664,6 +3679,11 @@ NTSTATUS WINAPI NtCreateFile( HANDLE *handle, ACCESS_MASK access, OBJECT_ATTRIBU
              io->Information = FILE_OVERWRITTEN;
              break;
          }
@@ -116,11 +116,11 @@ index f1176717819..5d5e4ba2892 100644
      }
      else if (io->u.Status == STATUS_TOO_MANY_OPENED_FILES)
      {
-@@ -3717,6 +3737,7 @@ NTSTATUS WINAPI NtCreateFile( HANDLE *handle, ACCESS_MASK access, OBJECT_ATTRIBU
+@@ -3671,6 +3691,7 @@ NTSTATUS WINAPI NtCreateFile( HANDLE *handle, ACCESS_MASK access, OBJECT_ATTRIBU
          if (!once++) ERR_(winediag)( "Too many open files, ulimit -n probably needs to be increased\n" );
      }
  
-+    RtlFreeHeap( GetProcessHeap(), 0, unix_name );
++    free( unix_name );
      return io->u.Status;
  }
  
diff --git a/patches/ntdll-DOS_Attributes/0007-ntdll-Perform-the-Unix-style-hidden-file-check-withi.patch b/patches/ntdll-DOS_Attributes/0007-ntdll-Perform-the-Unix-style-hidden-file-check-withi.patch
index a972a95ee..cd06918fb 100644
--- a/patches/ntdll-DOS_Attributes/0007-ntdll-Perform-the-Unix-style-hidden-file-check-withi.patch
+++ b/patches/ntdll-DOS_Attributes/0007-ntdll-Perform-the-Unix-style-hidden-file-check-withi.patch
@@ -1,4 +1,4 @@
-From 78f53ba7362227cf5d725d6d5b70e06267597b5e Mon Sep 17 00:00:00 2001
+From 3f308239ced2e9fa2ac0b298eeb1ad5dde330840 Mon Sep 17 00:00:00 2001
 From: "Erich E. Hoover" <erich.e.hoover@gmail.com>
 Date: Wed, 20 Aug 2014 11:26:48 -0600
 Subject: [PATCH] ntdll: Perform the Unix-style hidden file check within the
@@ -9,10 +9,10 @@ Subject: [PATCH] ntdll: Perform the Unix-style hidden file check within the
  1 file changed, 9 insertions(+), 14 deletions(-)
 
 diff --git a/dlls/ntdll/unix/file.c b/dlls/ntdll/unix/file.c
-index 33fa49d0dea..a88daf1f7f3 100644
+index 7c737edd22c..c6b4928bd53 100644
 --- a/dlls/ntdll/unix/file.c
 +++ b/dlls/ntdll/unix/file.c
-@@ -1238,15 +1238,15 @@ static BOOLEAN get_dir_case_sensitivity( const char *dir )
+@@ -1213,15 +1213,15 @@ static BOOLEAN get_dir_case_sensitivity( const char *dir )
   *
   * Check if the specified file should be hidden based on its name and the show dot files option.
   */
@@ -33,8 +33,8 @@ index 33fa49d0dea..a88daf1f7f3 100644
      if (p == end || *p != '.') return FALSE;
      /* make sure it isn't '.' or '..' */
      if (p + 1 == end) return FALSE;
-@@ -1571,6 +1571,10 @@ static int get_file_info( const char *path, struct stat *st, ULONG *attr )
-         RtlFreeHeap( GetProcessHeap(), 0, parent_path );
+@@ -1567,6 +1567,10 @@ static int get_file_info( const char *path, struct stat *st, ULONG *attr )
+         free( parent_path );
      }
      *attr |= get_file_attributes( st );
 +    /* convert Unix-style hidden files to a DOS hidden file attribute */
@@ -44,7 +44,7 @@ index 33fa49d0dea..a88daf1f7f3 100644
      len = xattr_get( path, SAMBA_XATTR_DOS_ATTRIB, hexattr, sizeof(hexattr)-1 );
      if (len == -1) return ret;
      *attr |= get_file_xattr( hexattr, len );
-@@ -2081,11 +2085,6 @@ static NTSTATUS get_dir_data_entry( struct dir_data *dir_data, void *info_ptr, I
+@@ -2077,11 +2081,6 @@ static NTSTATUS get_dir_data_entry( struct dir_data *dir_data, void *info_ptr, I
      if (class != FileNamesInformation)
      {
          if (st.st_dev != dir_data->id.dev) st.st_ino = 0;  /* ignore inode if on a different device */
@@ -56,15 +56,15 @@ index 33fa49d0dea..a88daf1f7f3 100644
          fill_file_info( &st, attributes, info, class );
      }
  
-@@ -3857,7 +3856,6 @@ NTSTATUS WINAPI NtQueryFullAttributesFile( const OBJECT_ATTRIBUTES *attr,
+@@ -3838,7 +3837,6 @@ NTSTATUS WINAPI NtQueryFullAttributesFile( const OBJECT_ATTRIBUTES *attr,
              info->AllocationSize = std.AllocationSize;
              info->EndOfFile      = std.EndOfFile;
              info->FileAttributes = basic.FileAttributes;
 -            if (is_hidden_file( attr->ObjectName )) info->FileAttributes |= FILE_ATTRIBUTE_HIDDEN;
          }
-         RtlFreeHeap( GetProcessHeap(), 0, unix_name );
+         free( unix_name );
      }
-@@ -3884,10 +3882,7 @@ NTSTATUS WINAPI NtQueryAttributesFile( const OBJECT_ATTRIBUTES *attr, FILE_BASIC
+@@ -3865,10 +3863,7 @@ NTSTATUS WINAPI NtQueryAttributesFile( const OBJECT_ATTRIBUTES *attr, FILE_BASIC
          else if (!S_ISREG(st.st_mode) && !S_ISDIR(st.st_mode))
              status = STATUS_INVALID_INFO_CLASS;
          else
@@ -72,7 +72,7 @@ index 33fa49d0dea..a88daf1f7f3 100644
              status = fill_file_info( &st, attributes, info, FileBasicInformation );
 -            if (is_hidden_file( attr->ObjectName )) info->FileAttributes |= FILE_ATTRIBUTE_HIDDEN;
 -        }
-         RtlFreeHeap( GetProcessHeap(), 0, unix_name );
+         free( unix_name );
      }
      else WARN( "%s not found (%x)\n", debugstr_us(attr->ObjectName), status );
 -- 
diff --git a/patches/ntdll-DOS_Attributes/0008-ntdll-Always-store-SAMBA_XATTR_DOS_ATTRIB-when-path-.patch b/patches/ntdll-DOS_Attributes/0008-ntdll-Always-store-SAMBA_XATTR_DOS_ATTRIB-when-path-.patch
index b8529c854..f87c79e88 100644
--- a/patches/ntdll-DOS_Attributes/0008-ntdll-Always-store-SAMBA_XATTR_DOS_ATTRIB-when-path-.patch
+++ b/patches/ntdll-DOS_Attributes/0008-ntdll-Always-store-SAMBA_XATTR_DOS_ATTRIB-when-path-.patch
@@ -1,4 +1,4 @@
-From 29e0ef12afb2651e61492a8a9f021baca4c66519 Mon Sep 17 00:00:00 2001
+From dd02380fff84cbef2a6df7b6f82b271e0e9d732f Mon Sep 17 00:00:00 2001
 From: Sebastian Lackner <sebastian@fds-team.de>
 Date: Thu, 14 Jan 2016 23:09:19 +0100
 Subject: [PATCH] ntdll: Always store SAMBA_XATTR_DOS_ATTRIB when path could be
@@ -9,11 +9,11 @@ Subject: [PATCH] ntdll: Always store SAMBA_XATTR_DOS_ATTRIB when path could be
  1 file changed, 8 insertions(+), 5 deletions(-)
 
 diff --git a/dlls/ntdll/unix/file.c b/dlls/ntdll/unix/file.c
-index 9636c0efe3e..444332e7baa 100644
+index c6b4928bd53..3bf82b1d45d 100644
 --- a/dlls/ntdll/unix/file.c
 +++ b/dlls/ntdll/unix/file.c
-@@ -1561,12 +1561,15 @@ static int get_file_info( const char *path, struct stat *st, ULONG *attr )
-         RtlFreeHeap( GetProcessHeap(), 0, parent_path );
+@@ -1567,12 +1567,15 @@ static int get_file_info( const char *path, struct stat *st, ULONG *attr )
+         free( parent_path );
      }
      *attr |= get_file_attributes( st );
 -    /* convert Unix-style hidden files to a DOS hidden file attribute */
@@ -32,7 +32,7 @@ index 9636c0efe3e..444332e7baa 100644
      *attr |= get_file_xattr( hexattr, len );
      return ret;
  }
-@@ -3440,7 +3443,7 @@ NTSTATUS set_file_info( const char *path, ULONG attr )
+@@ -3556,7 +3559,7 @@ NTSTATUS set_file_info( const char *path, ULONG attr )
      /* Note: unix mode already set when called this way */
      attr &= ~FILE_ATTRIBUTE_NORMAL; /* do not store everything, but keep everything Samba can use */
      len = sprintf( hexattr, "0x%x", attr );
diff --git a/patches/ntdll-NtDevicePath/0001-ntdll-Implement-opening-files-through-nt-device-path.patch b/patches/ntdll-NtDevicePath/0001-ntdll-Implement-opening-files-through-nt-device-path.patch
index 67933da10..ad814a422 100644
--- a/patches/ntdll-NtDevicePath/0001-ntdll-Implement-opening-files-through-nt-device-path.patch
+++ b/patches/ntdll-NtDevicePath/0001-ntdll-Implement-opening-files-through-nt-device-path.patch
@@ -1,4 +1,4 @@
-From 2ea24b967a65e0bc736625abf496fa29607d74d7 Mon Sep 17 00:00:00 2001
+From ee7a43bf36722acba4c870409fc15ea5bdf4a80b Mon Sep 17 00:00:00 2001
 From: =?UTF-8?q?Michael=20M=C3=BCller?= <michael@fds-team.de>
 Date: Fri, 26 May 2017 05:17:17 +0200
 Subject: [PATCH] ntdll: Implement opening files through nt device paths.
@@ -63,10 +63,10 @@ index 6164b0c4bde..6610edbd042 100644
  
  static void open_file_test(void)
 diff --git a/dlls/ntdll/unix/file.c b/dlls/ntdll/unix/file.c
-index aae715521a5..89219a88113 100644
+index b6529241739..74f3f707444 100644
 --- a/dlls/ntdll/unix/file.c
 +++ b/dlls/ntdll/unix/file.c
-@@ -3294,7 +3294,7 @@ static NTSTATUS nt_to_unix_file_name_attr( const OBJECT_ATTRIBUTES *attr, char *
+@@ -3250,7 +3250,7 @@ static NTSTATUS nt_to_unix_file_name_attr( const OBJECT_ATTRIBUTES *attr, char *
   * element doesn't have to exist; in that case STATUS_NO_SUCH_FILE is
   * returned, but the unix name is still filled in properly.
   */
@@ -75,7 +75,7 @@ index aae715521a5..89219a88113 100644
  {
      static const WCHAR unixW[] = {'u','n','i','x'};
      static const WCHAR pipeW[] = {'p','i','p','e'};
-@@ -3432,6 +3432,126 @@ NTSTATUS CDECL wine_nt_to_unix_file_name( const UNICODE_STRING *nameW, char *nam
+@@ -3387,6 +3387,126 @@ NTSTATUS CDECL wine_nt_to_unix_file_name( const UNICODE_STRING *nameW, char *nam
      return status;
  }
  
@@ -181,7 +181,7 @@ index aae715521a5..89219a88113 100644
 +
 +    name_len = sizeof(dosprefixW) + wcslen(prefix) * sizeof(WCHAR) +
 +               nameW->Length - offset * sizeof(WCHAR) + sizeof(WCHAR);
-+    if (!(name = RtlAllocateHeap( GetProcessHeap(), 0, name_len )))
++    if (!(name = malloc( name_len )))
 +        return STATUS_NO_MEMORY;
 +
 +    ptr = name;
@@ -196,7 +196,7 @@ index aae715521a5..89219a88113 100644
 +    dospathW.Length = wcslen( name ) * sizeof(WCHAR);
 +    status = nt_to_unix_file_name_internal( &dospathW, unix_name_ret, disposition );
 +
-+    RtlFreeHeap( GetProcessHeap(), 0, name );
++    free( name );
 +    return status;
 +}
  
diff --git a/patches/ntdll-NtQueryVirtualMemory/0003-ntdll-Implement-NtQueryVirtualMemory-MemorySectionNa.patch b/patches/ntdll-NtQueryVirtualMemory/0003-ntdll-Implement-NtQueryVirtualMemory-MemorySectionNa.patch
index 204a29bab..0652bbcbb 100644
--- a/patches/ntdll-NtQueryVirtualMemory/0003-ntdll-Implement-NtQueryVirtualMemory-MemorySectionNa.patch
+++ b/patches/ntdll-NtQueryVirtualMemory/0003-ntdll-Implement-NtQueryVirtualMemory-MemorySectionNa.patch
@@ -1,4 +1,4 @@
-From c1b6bc02ee2534dc2b51d8184fb0ca6717c33cf3 Mon Sep 17 00:00:00 2001
+From 2de64a6d61d01b9409ab6b61176c0a88a4838937 Mon Sep 17 00:00:00 2001
 From: Dmitry Timoshkov <dmitry@baikal.ru>
 Date: Sun, 28 May 2017 05:19:30 +0200
 Subject: [PATCH] ntdll: Implement NtQueryVirtualMemory(MemorySectionName).
@@ -15,10 +15,10 @@ Contains several improvements by Sebastian Lackner <sebastian@fds-team.de>.
  6 files changed, 136 insertions(+), 9 deletions(-)
 
 diff --git a/dlls/ntdll/unix/file.c b/dlls/ntdll/unix/file.c
-index 6b0dbaa7b3d..2ac7fcaae35 100644
+index b404bceb427..dcc76846c1e 100644
 --- a/dlls/ntdll/unix/file.c
 +++ b/dlls/ntdll/unix/file.c
-@@ -1767,7 +1767,7 @@ static NTSTATUS fill_file_info( const struct stat *st, ULONG attr, void *ptr,
+@@ -1763,7 +1763,7 @@ static NTSTATUS fill_file_info( const struct stat *st, ULONG attr, void *ptr,
  }
  
  
@@ -28,7 +28,7 @@ index 6b0dbaa7b3d..2ac7fcaae35 100644
      data_size_t size = 1024;
      NTSTATUS ret;
 diff --git a/dlls/ntdll/unix/unix_private.h b/dlls/ntdll/unix/unix_private.h
-index 711a0bed2b7..466c59da75a 100644
+index 3d56ea5d408..f24ca578ce1 100644
 --- a/dlls/ntdll/unix/unix_private.h
 +++ b/dlls/ntdll/unix/unix_private.h
 @@ -170,6 +170,7 @@ extern unsigned int server_queue_process_apc( HANDLE process, const apc_call_t *
@@ -40,10 +40,10 @@ index 711a0bed2b7..466c59da75a 100644
  extern size_t server_init_thread( void *entry_point, BOOL *suspend ) DECLSPEC_HIDDEN;
  extern int server_pipe( int fd[2] ) DECLSPEC_HIDDEN;
 diff --git a/dlls/ntdll/unix/virtual.c b/dlls/ntdll/unix/virtual.c
-index cd1bd162a2a..570a8a3bf49 100644
+index 91989bd569e..d1c63bdb215 100644
 --- a/dlls/ntdll/unix/virtual.c
 +++ b/dlls/ntdll/unix/virtual.c
-@@ -4013,6 +4013,98 @@ static NTSTATUS get_working_set_ex( HANDLE process, LPCVOID addr,
+@@ -4009,6 +4009,98 @@ static NTSTATUS get_working_set_ex( HANDLE process, LPCVOID addr,
      return STATUS_SUCCESS;
  }
  
@@ -78,7 +78,7 @@ index cd1bd162a2a..570a8a3bf49 100644
 +        if (!status)
 +        {
 +            status = unix_to_nt_file_name( unix_name, &nt_nameW );
-+            RtlFreeHeap( GetProcessHeap(), 0, unix_name );
++            free( unix_name );
 +        }
 +        if (!status)
 +        {
@@ -91,7 +91,7 @@ index cd1bd162a2a..570a8a3bf49 100644
 +
 +    for (;;)
 +    {
-+        if (!(name = RtlAllocateHeap( GetProcessHeap(), 0, (size + 1) * sizeof(WCHAR) )))
++        if (!(name = malloc( (size + 1) * sizeof(WCHAR) )))
 +            return STATUS_NO_MEMORY;
 +
 +        SERVER_START_REQ( get_dll_info )
@@ -109,14 +109,14 @@ index cd1bd162a2a..570a8a3bf49 100644
 +            name[size] = 0;
 +            break;
 +        }
-+        RtlFreeHeap( GetProcessHeap(), 0, name );
++        free( name );
 +        if (status == STATUS_DLL_NOT_FOUND) return STATUS_INVALID_ADDRESS;
 +        if (status != STATUS_BUFFER_TOO_SMALL) return status;
 +    }
 +
 +    if (!RtlDosPathNameToNtPathName_U( name, &nt_name, NULL, NULL ))
 +    {
-+        RtlFreeHeap( GetProcessHeap(), 0, name );
++        free( name );
 +        return STATUS_INVALID_PARAMETER;
 +    }
 +
@@ -133,7 +133,7 @@ index cd1bd162a2a..570a8a3bf49 100644
 +    else
 +        status = (len < sizeof(MEMORY_SECTION_NAME)) ? STATUS_INFO_LENGTH_MISMATCH : STATUS_BUFFER_OVERFLOW;
 +
-+    RtlFreeHeap( GetProcessHeap(), 0, name );
++    free( name );
 +    RtlFreeUnicodeString( &nt_name );
 +    return status;
 +}
@@ -142,7 +142,7 @@ index cd1bd162a2a..570a8a3bf49 100644
  #define UNIMPLEMENTED_INFO_CLASS(c) \
      case c: \
          FIXME("(process=%p,addr=%p) Unimplemented information class: " #c "\n", process, addr); \
-@@ -4037,8 +4129,10 @@ NTSTATUS WINAPI NtQueryVirtualMemory( HANDLE process, LPCVOID addr,
+@@ -4033,8 +4125,10 @@ NTSTATUS WINAPI NtQueryVirtualMemory( HANDLE process, LPCVOID addr,
          case MemoryWorkingSetExInformation:
              return get_working_set_ex( process, addr, buffer, len, res_len );
  
@@ -222,10 +222,10 @@ index db0debe0af5..6e74f5b770f 100644
  DECL_HANDLER(get_mapping_committed_range)
  {
 diff --git a/server/protocol.def b/server/protocol.def
-index bd6841d8000..345e0966c14 100644
+index 03e567c3dd4..3f0a68ccdcc 100644
 --- a/server/protocol.def
 +++ b/server/protocol.def
-@@ -1756,6 +1756,15 @@ enum char_info_mode
+@@ -1686,6 +1686,15 @@ enum char_info_mode
  @END
  
  
diff --git a/patches/patchinstall.sh b/patches/patchinstall.sh
index b54212b60..a4b8aa58c 100755
--- a/patches/patchinstall.sh
+++ b/patches/patchinstall.sh
@@ -3829,12 +3829,10 @@ fi
 # | 	tools/winebuild/import.c, tools/winebuild/spec32.c
 # |
 if test "$enable_winebuild_pe_syscall_thunks" -eq 1; then
-	patch_apply winebuild-pe_syscall_thunks/0001-ntdll-Always-align-stack-pointer-in-__wine_syscall_d.patch
 	patch_apply winebuild-pe_syscall_thunks/0002-winebuild-Call-__wine_syscall_dispatcher-through-the.patch
 	patch_apply winebuild-pe_syscall_thunks/0003-ntdll-Also-generate-syscall-thunks-for-Nt-functions-.patch
 	patch_apply winebuild-pe_syscall_thunks/0004-ntdll-Fix-NtGetContextThread-on-i386-with-PE-syscall.patch
 	(
-		printf '%s\n' '+    { "Paul Gofman", "ntdll: Always align stack pointer in __wine_syscall_dispatcher on x64.", 1 },';
 		printf '%s\n' '+    { "Paul Gofman", "winebuild: Call __wine_syscall_dispatcher through the fixed address.", 1 },';
 		printf '%s\n' '+    { "Paul Gofman", "ntdll: Also generate syscall thunks for Nt functions not yet in the Unix part.", 1 },';
 		printf '%s\n' '+    { "Paul Gofman", "ntdll: Fix NtGetContextThread on i386 with PE syscall thunks.", 1 },';
diff --git a/patches/server-Object_Types/0001-ntdll-Implement-SystemExtendedHandleInformation-in-N.patch b/patches/server-Object_Types/0001-ntdll-Implement-SystemExtendedHandleInformation-in-N.patch
index f88a5491e..92a8471ea 100644
--- a/patches/server-Object_Types/0001-ntdll-Implement-SystemExtendedHandleInformation-in-N.patch
+++ b/patches/server-Object_Types/0001-ntdll-Implement-SystemExtendedHandleInformation-in-N.patch
@@ -1,4 +1,4 @@
-From e57cb9c97ea1147595a9c29e236515a2be69f9bd Mon Sep 17 00:00:00 2001
+From 04ab1c6e148411f43bea8d2c71fb1bfd5b90efab Mon Sep 17 00:00:00 2001
 From: =?UTF-8?q?Michael=20M=C3=BCller?= <michael@fds-team.de>
 Date: Tue, 7 Mar 2017 18:30:33 +0100
 Subject: [PATCH] ntdll: Implement SystemExtendedHandleInformation in
@@ -11,7 +11,7 @@ Subject: [PATCH] ntdll: Implement SystemExtendedHandleInformation in
  3 files changed, 133 insertions(+)
 
 diff --git a/dlls/ntdll/tests/info.c b/dlls/ntdll/tests/info.c
-index eaf2f1a45b7..1728ab82225 100644
+index e399757b85d..d27bb06c5fe 100644
 --- a/dlls/ntdll/tests/info.c
 +++ b/dlls/ntdll/tests/info.c
 @@ -662,6 +662,62 @@ done:
@@ -77,7 +77,7 @@ index eaf2f1a45b7..1728ab82225 100644
  static void test_query_cache(void)
  {
      NTSTATUS status;
-@@ -2715,6 +2771,10 @@ START_TEST(info)
+@@ -2783,6 +2839,10 @@ START_TEST(info)
      trace("Starting test_query_handle()\n");
      test_query_handle();
  
@@ -89,10 +89,10 @@ index eaf2f1a45b7..1728ab82225 100644
      trace("Starting test_query_cache()\n");
      test_query_cache();
 diff --git a/dlls/ntdll/unix/system.c b/dlls/ntdll/unix/system.c
-index 5ba9fb41156..df4e11a0f56 100644
+index abec33bb289..c3774dcdef8 100644
 --- a/dlls/ntdll/unix/system.c
 +++ b/dlls/ntdll/unix/system.c
-@@ -1985,6 +1985,58 @@ NTSTATUS WINAPI NtQuerySystemInformation( SYSTEM_INFORMATION_CLASS class,
+@@ -2399,6 +2399,58 @@ NTSTATUS WINAPI NtQuerySystemInformation( SYSTEM_INFORMATION_CLASS class,
          break;
      }
  
@@ -115,7 +115,7 @@ index 5ba9fb41156..df4e11a0f56 100644
 +
 +        num_handles = size - FIELD_OFFSET( SYSTEM_HANDLE_INFORMATION_EX, Handle );
 +        num_handles /= sizeof(SYSTEM_HANDLE_TABLE_ENTRY_INFO_EX);
-+        if (!(handle_info = RtlAllocateHeap( GetProcessHeap(), 0, sizeof(*handle_info) * num_handles )))
++        if (!(handle_info = malloc( sizeof(*handle_info) * num_handles )))
 +            return STATUS_NO_MEMORY;
 +
 +        SERVER_START_REQ( get_system_handles )
@@ -144,7 +144,7 @@ index 5ba9fb41156..df4e11a0f56 100644
 +        }
 +        SERVER_END_REQ;
 +
-+        RtlFreeHeap( GetProcessHeap(), 0, handle_info );
++        free( handle_info );
 +        break;
 +    }
 +
@@ -152,10 +152,10 @@ index 5ba9fb41156..df4e11a0f56 100644
      {
          SYSTEM_CACHE_INFORMATION sci = { 0 };
 diff --git a/include/winternl.h b/include/winternl.h
-index 3ff15f28c15..66cd05dac15 100644
+index 091a22376f8..1266f55c6b1 100644
 --- a/include/winternl.h
 +++ b/include/winternl.h
-@@ -1531,6 +1531,27 @@ typedef struct _SYSTEM_HANDLE_INFORMATION {
+@@ -1532,6 +1532,27 @@ typedef struct _SYSTEM_HANDLE_INFORMATION {
      SYSTEM_HANDLE_ENTRY Handle[1];
  } SYSTEM_HANDLE_INFORMATION, *PSYSTEM_HANDLE_INFORMATION;
  
diff --git a/patches/winebuild-pe_syscall_thunks/0001-ntdll-Always-align-stack-pointer-in-__wine_syscall_d.patch b/patches/winebuild-pe_syscall_thunks/0001-ntdll-Always-align-stack-pointer-in-__wine_syscall_d.patch
deleted file mode 100644
index 855e14fca..000000000
--- a/patches/winebuild-pe_syscall_thunks/0001-ntdll-Always-align-stack-pointer-in-__wine_syscall_d.patch
+++ /dev/null
@@ -1,59 +0,0 @@
-From 4b84ee691550970aa6f599ca649316f20272f84a Mon Sep 17 00:00:00 2001
-From: Paul Gofman <pgofman@codeweavers.com>
-Date: Tue, 14 Jul 2020 02:41:53 +0300
-Subject: [PATCH] ntdll: Always align stack pointer in
- __wine_syscall_dispatcher on x64.
-
-Syscall thunks break stack alignment for dispatcher. Regardless of that,
-it is probably better not to assume aligned stack in syscall thunk entry.
----
- tools/winebuild/import.c | 14 ++++++++------
- 1 file changed, 8 insertions(+), 6 deletions(-)
-
-diff --git a/tools/winebuild/import.c b/tools/winebuild/import.c
-index 97191ca89ec2..4f641825e367 100644
---- a/tools/winebuild/import.c
-+++ b/tools/winebuild/import.c
-@@ -1497,23 +1497,25 @@ void output_syscalls( DLLSPEC *spec )
-              * depends on us returning to it. Adjust the return address accordingly. */
-             output( "\tsubq $0xb,0x8(%%rbp)\n" );
-             output( "\tcmpq $%u,%%rax\n", count );
--            output( "\tjae 3f\n" );
-+            output( "\tjae 4f\n" );
-             output( "\tleaq .Lsyscall_args(%%rip),%%rcx\n" );
-             output( "\tmovzbl (%%rcx,%%rax),%%ecx\n" );
-             output( "\tsubq $0x20,%%rcx\n" );
--            output( "\tjbe 1f\n" );
--            output( "\tsubq %%rcx,%%rsp\n" );
-+            output( "\tja 1f\n" );
-+            output( "\tandq $~15,%%rsp\n\t" );
-+            output( "\tjmp 2f\n" );
-+            output( "1:\tsubq %%rcx,%%rsp\n" );
-             output( "\tshrq $3,%%rcx\n" );
-             output( "\tleaq 0x38(%%rbp),%%rsi\n" );
-             output( "\tandq $~15,%%rsp\n\t" );
-             output( "\tmovq %%rsp,%%rdi\n" );
-             output( "\tcld\n" );
-             output( "\trep; movsq\n" );
--            output( "1:\tmovq %%r10,%%rcx\n" );
-+            output( "2:\tmovq %%r10,%%rcx\n" );
-             output( "\tsubq $0x20,%%rsp\n" );
-             output( "\tleaq .Lsyscall_table(%%rip),%%r10\n" );
-             output( "\tcallq *(%%r10,%%rax,8)\n" );
--            output( "2:\tleaq -0x10(%%rbp),%%rsp\n" );
-+            output( "3:\tleaq -0x10(%%rbp),%%rsp\n" );
-             output( "\tpopq %%rdi\n" );
-             output_cfi( ".cfi_same_value %%rdi" );
-             output( "\tpopq %%rsi\n" );
-@@ -1523,7 +1525,7 @@ void output_syscalls( DLLSPEC *spec )
-             output_cfi( ".cfi_adjust_cfa_offset -8" );
-             output_cfi( ".cfi_same_value %%rbp" );
-             output( "\tret\n" );
--            output( "3:\tmovl $0x%x,%%eax\n", invalid_param );
-+            output( "4:\tmovl $0x%x,%%eax\n", invalid_param );
-             output( "\tjmp 2b\n" );
-             break;
-         case CPU_ARM:
--- 
-2.26.2
-

diff --git a/patches/ntdll-Syscall_Emulation/0001-ntdll-Support-x86_64-syscall-emulation.patch b/patches/ntdll-Syscall_Emulation/0001-ntdll-Support-x86_64-syscall-emulation.patch
index a99729dc4..2192a00bf 100644
--- a/patches/ntdll-Syscall_Emulation/0001-ntdll-Support-x86_64-syscall-emulation.patch
+++ b/patches/ntdll-Syscall_Emulation/0001-ntdll-Support-x86_64-syscall-emulation.patch
@@ -1,28 +1,19 @@
-From 6a2146342b48977513f83a59cd16d182850767a9 Mon Sep 17 00:00:00 2001
+From b1ab7b26620fc62b2a4848a0efbb6c9e116a5adc Mon Sep 17 00:00:00 2001
 From: Paul Gofman <pgofman@codeweavers.com>
-Date: Mon, 30 Dec 2019 13:27:53 +0300
+Date: Tue, 14 Jul 2020 15:00:34 +0300
 Subject: [PATCH] ntdll: Support x86_64 syscall emulation.
 
-The patch assigns the range of syscall numbers which does not
-overlap with native syscalls and assumes these numbers are
-used in the applications (i. e., that the applications
-get the number from syscall thunks). Linux specific Seccomp
-is used for trapping syscalls.
 ---
  configure.ac                    |   1 +
- dlls/ntdll/thread.c             |   8 ++-
- dlls/ntdll/unix/signal_x86_64.c | 105 ++++++++++++++++++++++++++++++++
- dlls/ntdll/unix/thread.c        |   7 ++-
- dlls/ntdll/unix/unix_private.h  |   5 +-
- dlls/ntdll/unixlib.h            |   2 +-
- tools/winebuild/spec32.c        |   9 ++-
- 7 files changed, 131 insertions(+), 6 deletions(-)
+ dlls/ntdll/unix/signal_x86_64.c | 119 ++++++++++++++++++++++++++++++++
+ tools/winebuild/import.c        |   3 +-
+ 3 files changed, 122 insertions(+), 1 deletion(-)
 
 diff --git a/configure.ac b/configure.ac
-index a78610c6490..eabd16b4732 100644
+index 65fa00ff5c6c..4c2c005bca1e 100644
 --- a/configure.ac
 +++ b/configure.ac
-@@ -464,6 +464,7 @@ AC_CHECK_HEADERS(\
+@@ -477,6 +477,7 @@ AC_CHECK_HEADERS(\
  	linux/joystick.h \
  	linux/major.h \
  	linux/param.h \
@@ -30,34 +21,8 @@ index a78610c6490..eabd16b4732 100644
  	linux/serial.h \
  	linux/types.h \
  	linux/ucdrom.h \
-diff --git a/dlls/ntdll/thread.c b/dlls/ntdll/thread.c
-index 0eb7d901c4d..c5391fb0512 100644
---- a/dlls/ntdll/thread.c
-+++ b/dlls/ntdll/thread.c
-@@ -105,6 +105,12 @@ void __wine_syscall_dispatcher( void )
- }
- #endif
- 
-+#if defined(__x86_64__)
-+extern unsigned int __wine_nb_syscalls;
-+#else
-+unsigned int __wine_nb_syscalls;
-+#endif
-+
- void *WINAPI __wine_fakedll_dispatcher( const char *module, ULONG ord )
- {
-     UNICODE_STRING name;
-@@ -148,7 +154,7 @@ void *WINAPI __wine_fakedll_dispatcher( const char *module, ULONG ord )
- TEB *thread_init( SIZE_T *info_size )
- {
-     ULONG_PTR val;
--    TEB *teb = unix_funcs->init_threading( &nb_threads, &__wine_ldt_copy, info_size, __wine_syscall_dispatcher );
-+    TEB *teb = unix_funcs->init_threading( &nb_threads, &__wine_ldt_copy, info_size, __wine_syscall_dispatcher, __wine_nb_syscalls );
- 
-     teb->Spare2 = (ULONG_PTR)__wine_fakedll_dispatcher;
-     peb = teb->Peb;
 diff --git a/dlls/ntdll/unix/signal_x86_64.c b/dlls/ntdll/unix/signal_x86_64.c
-index 12ea74f7f5c..26097702985 100644
+index e8e98142a982..1b2d2891ab89 100644
 --- a/dlls/ntdll/unix/signal_x86_64.c
 +++ b/dlls/ntdll/unix/signal_x86_64.c
 @@ -28,6 +28,7 @@
@@ -82,37 +47,23 @@ index 12ea74f7f5c..26097702985 100644
  #define NONAMELESSUNION
  #define NONAMELESSSTRUCT
  #include "ntstatus.h"
-@@ -982,6 +990,102 @@ static inline DWORD is_privileged_instr( CONTEXT *context )
+@@ -2089,6 +2097,116 @@ static inline DWORD is_privileged_instr( CONTEXT *context )
      return 0;
  }
  
 +#ifdef HAVE_SECCOMP
 +static void sigsys_handler( int signal, siginfo_t *siginfo, void *sigcontext )
 +{
-+    unsigned int thunk_ret_offset;
 +    ucontext_t *ctx = sigcontext;
-+    unsigned int syscall_nr;
 +    void ***rsp;
 +
-+    WARN("SIGSYS, rax %#llx.\n", ctx->uc_mcontext.gregs[REG_RAX]);
-+
-+    syscall_nr = ctx->uc_mcontext.gregs[REG_RAX] - 0xf000;
-+    if (syscall_nr >= __wine_nb_syscalls)
-+    {
-+        ERR("Syscall %u is undefined.\n", syscall_nr);
-+        return;
-+    }
++    TRACE("SIGSYS, rax %#llx, rip %#llx.\n", ctx->uc_mcontext.gregs[REG_RAX],
++            ctx->uc_mcontext.gregs[REG_RIP]);
 +
 +    rsp = (void ***)&ctx->uc_mcontext.gregs[REG_RSP];
 +    *rsp -= 1;
++    **rsp = (void *)(ctx->uc_mcontext.gregs[REG_RIP] + 0xb);
 +
-+#ifdef __APPLE__
-+    thunk_ret_offset = 0xb;
-+#else
-+    thunk_ret_offset = 0xc;
-+#endif
-+
-+    **rsp = (void *)(ctx->uc_mcontext.gregs[REG_RIP] + thunk_ret_offset);
 +    ctx->uc_mcontext.gregs[REG_RIP] = (ULONG64)__wine_syscall_dispatcher;
 +}
 +#endif
@@ -127,6 +78,32 @@ index 12ea74f7f5c..26097702985 100644
 +}
 +#endif
 +
++static void check_bpf_jit_enable(void)
++{
++    char enabled;
++    int fd;
++
++    fd = open("/proc/sys/net/core/bpf_jit_enable", O_RDONLY);
++    if (fd == -1)
++    {
++        WARN("Could not open /proc/sys/net/core/bpf_jit_enable.\n");
++        return;
++    }
++
++    if (read(fd, &enabled, sizeof(enabled)) == sizeof(enabled))
++    {
++        TRACE("enabled %#x.\n", enabled);
++
++        if (enabled != '1')
++            ERR("BPF JIT is not enabled in the kernel, enable it to reduce syscall emulation overhead.\n");
++    }
++    else
++    {
++        WARN("Could not read /proc/sys/net/core/bpf_jit_enable.\n");
++    }
++    close(fd);
++}
++
 +static void install_bpf(struct sigaction *sig_act)
 +{
 +#ifdef HAVE_SECCOMP
@@ -167,6 +144,8 @@ index 12ea74f7f5c..26097702985 100644
 +            perror("prctl(PR_SET_SECCOMP, ...)");
 +            exit(1);
 +        }
++
++        check_bpf_jit_enable();
 +    }
 +    else
 +    {
@@ -185,7 +164,7 @@ index 12ea74f7f5c..26097702985 100644
  
  /***********************************************************************
   *           handle_interrupt
-@@ -1431,6 +1535,7 @@ void signal_init_process(void)
+@@ -2538,6 +2656,7 @@ void signal_init_process(void)
      if (sigaction( SIGSEGV, &sig_act, NULL ) == -1) goto error;
      if (sigaction( SIGILL, &sig_act, NULL ) == -1) goto error;
      if (sigaction( SIGBUS, &sig_act, NULL ) == -1) goto error;
@@ -193,115 +172,27 @@ index 12ea74f7f5c..26097702985 100644
      return;
  
   error:
-diff --git a/dlls/ntdll/unix/thread.c b/dlls/ntdll/unix/thread.c
-index ca5eba4da88..36126a56f45 100644
---- a/dlls/ntdll/unix/thread.c
-+++ b/dlls/ntdll/unix/thread.c
-@@ -58,6 +58,9 @@ WINE_DEFAULT_DEBUG_CHANNEL(seh);
- #define PTHREAD_STACK_MIN 16384
- #endif
- 
-+unsigned int __wine_nb_syscalls;
-+void *__wine_syscall_dispatcher;
-+
- static int *nb_threads;
- 
- static inline int get_unix_exit_code( NTSTATUS status )
-@@ -84,7 +87,7 @@ static void pthread_exit_wrapper( int status )
- /***********************************************************************
-  *           init_threading
-  */
--TEB * CDECL init_threading( int *nb_threads_ptr, struct ldt_copy **ldt_copy, SIZE_T *size, void *syscall_handler )
-+TEB * CDECL init_threading( int *nb_threads_ptr, struct ldt_copy **ldt_copy, SIZE_T *size, void *syscall_handler, unsigned int syscall_count )
- {
-     TEB *teb;
-     BOOL suspend;
-@@ -94,6 +97,8 @@ TEB * CDECL init_threading( int *nb_threads_ptr, struct ldt_copy **ldt_copy, SIZ
-     *ldt_copy = &__wine_ldt_copy;
- #endif
-     nb_threads = nb_threads_ptr;
-+    __wine_nb_syscalls = syscall_count;
-+    __wine_syscall_dispatcher = syscall_handler;
- 
-     teb = virtual_alloc_first_teb();
-     teb->WOW32Reserved = syscall_handler;
-diff --git a/dlls/ntdll/unix/unix_private.h b/dlls/ntdll/unix/unix_private.h
-index 15be5d3715a..516a6cfa1fe 100644
---- a/dlls/ntdll/unix/unix_private.h
-+++ b/dlls/ntdll/unix/unix_private.h
-@@ -115,7 +115,7 @@ extern NTSTATUS CDECL server_handle_to_fd( HANDLE handle, unsigned int access, i
-                                            unsigned int *options ) DECLSPEC_HIDDEN;
- extern void CDECL server_release_fd( HANDLE handle, int unix_fd ) DECLSPEC_HIDDEN;
- extern void CDECL server_init_process_done( void *relay ) DECLSPEC_HIDDEN;
--extern TEB * CDECL init_threading( int *nb_threads_ptr, struct ldt_copy **ldt_copy, SIZE_T *size, void *syscall_handler ) DECLSPEC_HIDDEN;
-+extern TEB * CDECL init_threading( int *nb_threads_ptr, struct ldt_copy **ldt_copy, SIZE_T *size, void *syscall_handler, unsigned int syscall_count ) DECLSPEC_HIDDEN;
- extern void CDECL DECLSPEC_NORETURN exit_thread( int status ) DECLSPEC_HIDDEN;
- extern void CDECL DECLSPEC_NORETURN exit_process( int status ) DECLSPEC_HIDDEN;
- extern NTSTATUS CDECL exec_process( UNICODE_STRING *path, UNICODE_STRING *cmdline, NTSTATUS status ) DECLSPEC_HIDDEN;
-@@ -152,6 +152,9 @@ extern NTSTATUS exec_wineloader( char **argv, int socketfd, int is_child_64bit,
- extern void start_server( BOOL debug ) DECLSPEC_HIDDEN;
- extern ULONG_PTR get_image_address(void) DECLSPEC_HIDDEN;
- 
-+extern unsigned int __wine_nb_syscalls DECLSPEC_HIDDEN;
-+extern void *__wine_syscall_dispatcher DECLSPEC_HIDDEN;
-+
- extern unsigned int server_call_unlocked( void *req_ptr ) DECLSPEC_HIDDEN;
- extern void server_enter_uninterrupted_section( RTL_CRITICAL_SECTION *cs, sigset_t *sigset ) DECLSPEC_HIDDEN;
- extern void server_leave_uninterrupted_section( RTL_CRITICAL_SECTION *cs, sigset_t *sigset ) DECLSPEC_HIDDEN;
-diff --git a/dlls/ntdll/unixlib.h b/dlls/ntdll/unixlib.h
-index b5b7cb07c80..f61e0ed8525 100644
---- a/dlls/ntdll/unixlib.h
-+++ b/dlls/ntdll/unixlib.h
-@@ -304,7 +304,7 @@ struct unix_funcs
-     void          (CDECL *virtual_set_large_address_space)(void);
- 
-     /* thread/process functions */
--    TEB *         (CDECL *init_threading)( int *nb_threads_ptr, struct ldt_copy **ldt_copy, SIZE_T *size, void *syscall_handler );
-+    TEB *         (CDECL *init_threading)( int *nb_threads_ptr, struct ldt_copy **ldt_copy, SIZE_T *size, void *syscall_handler, unsigned int syscall_count );
-     void          (CDECL *exit_thread)( int status );
-     void          (CDECL *exit_process)( int status );
-     NTSTATUS      (CDECL *exec_process)( UNICODE_STRING *path, UNICODE_STRING *cmdline, NTSTATUS status );
-diff --git a/tools/winebuild/spec32.c b/tools/winebuild/spec32.c
-index 9cc4698d0d7..c572fe49923 100644
---- a/tools/winebuild/spec32.c
-+++ b/tools/winebuild/spec32.c
-@@ -531,7 +531,7 @@ static void output_syscall_thunks_x64( DLLSPEC *spec )
-         output_cfi( ".cfi_startproc" );
-         output( "\t.byte 0x4c,0x8b,0xd1\n" );                               /* mov r10, rcx */
-         output( "\t.byte 0xb8\n" );                                         /* mov eax, SYSCALL */
--        output( "\t.long %d\n", i );
-+        output( "\t.long %d\n", i + 0xf000 );
-         output( "\t.byte 0xf6,0x04,0x25,0x08,0x03,0xfe,0x7f,0x01\n" );      /* test byte ptr [0x7ffe0308], 1 */
-         output( "\t.byte 0x75,0x03\n" );                                    /* jne (over syscall) */
-         output( "\t.byte 0x0f,0x05\n" );                                    /* syscall */
-@@ -576,6 +576,9 @@ static void output_syscall_thunks_x64( DLLSPEC *spec )
-         output( "\t.byte %d\n", max(get_args_size(odp), 32) - 32 );
-     }
- 
-+    output( "%s\n", asm_globl("__wine_nb_syscalls") );
-+    output( "\t.long %u\n", spec->nb_syscalls );
-+
-     output( "\n/* syscall dispatcher */\n\n" );
-     output( "\t.text\n" );
-     output( "\t.align %d\n", get_alignment(16) );
-@@ -601,6 +604,8 @@ static void output_syscall_thunks_x64( DLLSPEC *spec )
-     else
-         output( "\tsubq $0xc,0x8(%%rbp)\n" );
- 
-+    output( "\tsub $0xf000,%%rax\n" );
-+
-     /* copy over any arguments on the stack */
-     output( "\tleaq 0x38(%%rbp),%%rsi\n" );
-     if (UsePIC)
-@@ -1192,7 +1197,7 @@ static void create_stub_exports_text_x64( DLLSPEC *spec )
-         align_output_rva( 16, 16 );
-         put_label( odp->link_name );
-         put_byte( 0x4c ); put_byte( 0x8b ); put_byte( 0xd1 );  /* mov r10, rcx */
--        put_byte( 0xb8 ); put_dword( i );                      /* mov eax, SYSCALL */
-+        put_byte( 0xb8 ); put_dword( i + 0xf000 );             /* mov eax, SYSCALL */
-         put_byte( 0xf6 ); put_byte( 0x04 ); put_byte( 0x25 );  /* test byte ptr [0x7ffe0308], 1 */
-                 put_byte( 0x08 ); put_byte( 0x03 ); put_byte( 0xfe );
-                 put_byte( 0x7f ); put_byte( 0x01 );
+diff --git a/tools/winebuild/import.c b/tools/winebuild/import.c
+index e8bd141e962b..334278a7e50d 100644
+--- a/tools/winebuild/import.c
++++ b/tools/winebuild/import.c
+@@ -1501,6 +1501,7 @@ void output_syscalls( DLLSPEC *spec )
+             /* Legends of Runeterra hooks the first system call return instruction, and
+              * depends on us returning to it. Adjust the return address accordingly. */
+             output( "\tsubq $0xb,0x8(%%rbp)\n" );
++            output( "\tsubq $0xf000,%%rax\n" );
+             output( "\tcmpq $%u,%%rax\n", count );
+             output( "\tjae 4f\n" );
+             output( "\tleaq .Lsyscall_args(%%rip),%%rcx\n" );
+@@ -1643,7 +1644,7 @@ void output_syscalls( DLLSPEC *spec )
+              * validate that instruction, we can just put a jmp there instead. */
+             output( "\t.byte 0x4c,0x8b,0xd1\n" ); /* movq %rcx,%r10 */
+             output( "\t.byte 0xb8\n" );           /* movl $i,%eax */
+-            output( "\t.long %u\n", i );
++            output( "\t.long %u\n", 0xf000 + i );
+             output( "\t.byte 0xf6,0x04,0x25,0x08,0x03,0xfe,0x7f,0x01\n" ); /* testb $1,0x7ffe0308 */
+             output( "\t.byte 0x75,0x03\n" );      /* jne 1f */
+             output( "\t.byte 0x0f,0x05\n" );      /* syscall */
 -- 
-2.27.0
+2.26.2
 
diff --git a/patches/ntdll-Syscall_Emulation/definition b/patches/ntdll-Syscall_Emulation/definition
index 7b40380ca..4b0a94777 100644
--- a/patches/ntdll-Syscall_Emulation/definition
+++ b/patches/ntdll-Syscall_Emulation/definition
@@ -1,3 +1,2 @@
 Fixes: [48291] Detroit: Become Human crashes on launch
-# Needs to be reimplemented on top of upstream syscall changes.
-Disabled: true
+Depends: winebuild-pe_syscall_thunks
diff --git a/patches/patchinstall.sh b/patches/patchinstall.sh
index 06856d109..b54212b60 100755
--- a/patches/patchinstall.sh
+++ b/patches/patchinstall.sh
@@ -188,6 +188,7 @@ patch_enable_all ()
 	enable_ntdll_RtlQueryRegistryValuesEx="$1"
 	enable_ntdll_Serial_Port_Detection="$1"
 	enable_ntdll_Status_Mapping="$1"
+	enable_ntdll_Syscall_Emulation="$1"
 	enable_ntdll_SystemCodeIntegrityInformation="$1"
 	enable_ntdll_SystemExtendedProcessInformation="$1"
 	enable_ntdll_SystemInterruptInformation="$1"
@@ -652,6 +653,9 @@ patch_enable ()
 		ntdll-Status_Mapping)
 			enable_ntdll_Status_Mapping="$2"
 			;;
+		ntdll-Syscall_Emulation)
+			enable_ntdll_Syscall_Emulation="$2"
+			;;
 		ntdll-SystemCodeIntegrityInformation)
 			enable_ntdll_SystemCodeIntegrityInformation="$2"
 			;;
@@ -1602,6 +1606,13 @@ if test "$enable_ntdll_SystemCodeIntegrityInformation" -eq 1; then
 	enable_ntdll_SystemExtendedProcessInformation=1
 fi
 
+if test "$enable_ntdll_Syscall_Emulation" -eq 1; then
+	if test "$enable_winebuild_pe_syscall_thunks" -gt 1; then
+		abort "Patchset winebuild-pe_syscall_thunks disabled, but ntdll-Syscall_Emulation depends on that."
+	fi
+	enable_winebuild_pe_syscall_thunks=1
+fi
+
 if test "$enable_ntdll_NtQueryVirtualMemory" -eq 1; then
 	if test "$enable_ntdll_ForceBottomUpAlloc" -gt 1; then
 		abort "Patchset ntdll-ForceBottomUpAlloc disabled, but ntdll-NtQueryVirtualMemory depends on that."
@@ -3802,6 +3813,52 @@ if test "$enable_ntdll_Status_Mapping" -eq 1; then
 	) >> "$patchlist"
 fi
 
+# Patchset winebuild-pe_syscall_thunks
+# |
+# | This patchset fixes the following Wine bugs:
+# |   *	[#21232] Chromium-based browser engines (Chrome, Opera, Comodo Dragon, SRWare Iron) crash on startup unless '--no-
+# | 	sandbox' is used (native API sandboxing/hooking scheme incompatible with Wine)
+# |   *	[#42741] StarCraft I: 1.18 PTR fails to initialize ClientSdk.dll
+# |   *	[#45349] Multiple applications and games crash due to missing support for 64-bit syscall thunks (StreetFighter V, World
+# | 	of Warcraft)
+# |   *	[#45573] League of Legends 8.12+ fails to start a game (anticheat engine, hooking of syscall return instructions)
+# |   *	[#45650] chromium 32-bit sandbox expects different syscall thunks depending on Windows version
+# |
+# | Modified files:
+# |   *	dlls/ntdll/ntdll.spec, dlls/ntdll/signal_i386.c, dlls/ntdll/unix/loader.c, dlls/ntdll/unix/virtual.c,
+# | 	tools/winebuild/import.c, tools/winebuild/spec32.c
+# |
+if test "$enable_winebuild_pe_syscall_thunks" -eq 1; then
+	patch_apply winebuild-pe_syscall_thunks/0001-ntdll-Always-align-stack-pointer-in-__wine_syscall_d.patch
+	patch_apply winebuild-pe_syscall_thunks/0002-winebuild-Call-__wine_syscall_dispatcher-through-the.patch
+	patch_apply winebuild-pe_syscall_thunks/0003-ntdll-Also-generate-syscall-thunks-for-Nt-functions-.patch
+	patch_apply winebuild-pe_syscall_thunks/0004-ntdll-Fix-NtGetContextThread-on-i386-with-PE-syscall.patch
+	(
+		printf '%s\n' '+    { "Paul Gofman", "ntdll: Always align stack pointer in __wine_syscall_dispatcher on x64.", 1 },';
+		printf '%s\n' '+    { "Paul Gofman", "winebuild: Call __wine_syscall_dispatcher through the fixed address.", 1 },';
+		printf '%s\n' '+    { "Paul Gofman", "ntdll: Also generate syscall thunks for Nt functions not yet in the Unix part.", 1 },';
+		printf '%s\n' '+    { "Paul Gofman", "ntdll: Fix NtGetContextThread on i386 with PE syscall thunks.", 1 },';
+	) >> "$patchlist"
+fi
+
+# Patchset ntdll-Syscall_Emulation
+# |
+# | This patchset has the following (direct or indirect) dependencies:
+# |   *	winebuild-pe_syscall_thunks
+# |
+# | This patchset fixes the following Wine bugs:
+# |   *	[#48291] Detroit: Become Human crashes on launch
+# |
+# | Modified files:
+# |   *	configure.ac, dlls/ntdll/unix/signal_x86_64.c, tools/winebuild/import.c
+# |
+if test "$enable_ntdll_Syscall_Emulation" -eq 1; then
+	patch_apply ntdll-Syscall_Emulation/0001-ntdll-Support-x86_64-syscall-emulation.patch
+	(
+		printf '%s\n' '+    { "Paul Gofman", "ntdll: Support x86_64 syscall emulation.", 1 },';
+	) >> "$patchlist"
+fi
+
 # Patchset ntdll-SystemExtendedProcessInformation
 # |
 # | This patchset fixes the following Wine bugs:
@@ -5441,34 +5498,6 @@ if test "$enable_wineboot_ProxySettings" -eq 1; then
 	) >> "$patchlist"
 fi
 
-# Patchset winebuild-pe_syscall_thunks
-# |
-# | This patchset fixes the following Wine bugs:
-# |   *	[#21232] Chromium-based browser engines (Chrome, Opera, Comodo Dragon, SRWare Iron) crash on startup unless '--no-
-# | 	sandbox' is used (native API sandboxing/hooking scheme incompatible with Wine)
-# |   *	[#42741] StarCraft I: 1.18 PTR fails to initialize ClientSdk.dll
-# |   *	[#45349] Multiple applications and games crash due to missing support for 64-bit syscall thunks (StreetFighter V, World
-# | 	of Warcraft)
-# |   *	[#45573] League of Legends 8.12+ fails to start a game (anticheat engine, hooking of syscall return instructions)
-# |   *	[#45650] chromium 32-bit sandbox expects different syscall thunks depending on Windows version
-# |
-# | Modified files:
-# |   *	dlls/ntdll/ntdll.spec, dlls/ntdll/signal_i386.c, dlls/ntdll/unix/loader.c, dlls/ntdll/unix/virtual.c,
-# | 	tools/winebuild/import.c, tools/winebuild/spec32.c
-# |
-if test "$enable_winebuild_pe_syscall_thunks" -eq 1; then
-	patch_apply winebuild-pe_syscall_thunks/0001-ntdll-Always-align-stack-pointer-in-__wine_syscall_d.patch
-	patch_apply winebuild-pe_syscall_thunks/0002-winebuild-Call-__wine_syscall_dispatcher-through-the.patch
-	patch_apply winebuild-pe_syscall_thunks/0003-ntdll-Also-generate-syscall-thunks-for-Nt-functions-.patch
-	patch_apply winebuild-pe_syscall_thunks/0004-ntdll-Fix-NtGetContextThread-on-i386-with-PE-syscall.patch
-	(
-		printf '%s\n' '+    { "Paul Gofman", "ntdll: Always align stack pointer in __wine_syscall_dispatcher on x64.", 1 },';
-		printf '%s\n' '+    { "Paul Gofman", "winebuild: Call __wine_syscall_dispatcher through the fixed address.", 1 },';
-		printf '%s\n' '+    { "Paul Gofman", "ntdll: Also generate syscall thunks for Nt functions not yet in the Unix part.", 1 },';
-		printf '%s\n' '+    { "Paul Gofman", "ntdll: Fix NtGetContextThread on i386 with PE syscall thunks.", 1 },';
-	) >> "$patchlist"
-fi
-
 # Patchset winecfg-Libraries
 # |
 # | Modified files:

diff --git a/patches/patchinstall.sh b/patches/patchinstall.sh
index 7587bc216..06856d109 100755
--- a/patches/patchinstall.sh
+++ b/patches/patchinstall.sh
@@ -281,6 +281,7 @@ patch_enable_all ()
 	enable_wineboot_HKEY_DYN_DATA="$1"
 	enable_wineboot_ProxySettings="$1"
 	enable_wineboot_drivers_etc_Stubs="$1"
+	enable_winebuild_pe_syscall_thunks="$1"
 	enable_winecfg_Libraries="$1"
 	enable_winecfg_Staging="$1"
 	enable_wined3d_Accounting="$1"
@@ -930,6 +931,9 @@ patch_enable ()
 		wineboot-drivers_etc_Stubs)
 			enable_wineboot_drivers_etc_Stubs="$2"
 			;;
+		winebuild-pe_syscall_thunks)
+			enable_winebuild_pe_syscall_thunks="$2"
+			;;
 		winecfg-Libraries)
 			enable_winecfg_Libraries="$2"
 			;;
@@ -5437,6 +5441,34 @@ if test "$enable_wineboot_ProxySettings" -eq 1; then
 	) >> "$patchlist"
 fi
 
+# Patchset winebuild-pe_syscall_thunks
+# |
+# | This patchset fixes the following Wine bugs:
+# |   *	[#21232] Chromium-based browser engines (Chrome, Opera, Comodo Dragon, SRWare Iron) crash on startup unless '--no-
+# | 	sandbox' is used (native API sandboxing/hooking scheme incompatible with Wine)
+# |   *	[#42741] StarCraft I: 1.18 PTR fails to initialize ClientSdk.dll
+# |   *	[#45349] Multiple applications and games crash due to missing support for 64-bit syscall thunks (StreetFighter V, World
+# | 	of Warcraft)
+# |   *	[#45573] League of Legends 8.12+ fails to start a game (anticheat engine, hooking of syscall return instructions)
+# |   *	[#45650] chromium 32-bit sandbox expects different syscall thunks depending on Windows version
+# |
+# | Modified files:
+# |   *	dlls/ntdll/ntdll.spec, dlls/ntdll/signal_i386.c, dlls/ntdll/unix/loader.c, dlls/ntdll/unix/virtual.c,
+# | 	tools/winebuild/import.c, tools/winebuild/spec32.c
+# |
+if test "$enable_winebuild_pe_syscall_thunks" -eq 1; then
+	patch_apply winebuild-pe_syscall_thunks/0001-ntdll-Always-align-stack-pointer-in-__wine_syscall_d.patch
+	patch_apply winebuild-pe_syscall_thunks/0002-winebuild-Call-__wine_syscall_dispatcher-through-the.patch
+	patch_apply winebuild-pe_syscall_thunks/0003-ntdll-Also-generate-syscall-thunks-for-Nt-functions-.patch
+	patch_apply winebuild-pe_syscall_thunks/0004-ntdll-Fix-NtGetContextThread-on-i386-with-PE-syscall.patch
+	(
+		printf '%s\n' '+    { "Paul Gofman", "ntdll: Always align stack pointer in __wine_syscall_dispatcher on x64.", 1 },';
+		printf '%s\n' '+    { "Paul Gofman", "winebuild: Call __wine_syscall_dispatcher through the fixed address.", 1 },';
+		printf '%s\n' '+    { "Paul Gofman", "ntdll: Also generate syscall thunks for Nt functions not yet in the Unix part.", 1 },';
+		printf '%s\n' '+    { "Paul Gofman", "ntdll: Fix NtGetContextThread on i386 with PE syscall thunks.", 1 },';
+	) >> "$patchlist"
+fi
+
 # Patchset winecfg-Libraries
 # |
 # | Modified files:
diff --git a/patches/winebuild-pe_syscall_thunks/0001-ntdll-Always-align-stack-pointer-in-__wine_syscall_d.patch b/patches/winebuild-pe_syscall_thunks/0001-ntdll-Always-align-stack-pointer-in-__wine_syscall_d.patch
new file mode 100644
index 000000000..855e14fca
--- /dev/null
+++ b/patches/winebuild-pe_syscall_thunks/0001-ntdll-Always-align-stack-pointer-in-__wine_syscall_d.patch
@@ -0,0 +1,59 @@
+From 4b84ee691550970aa6f599ca649316f20272f84a Mon Sep 17 00:00:00 2001
+From: Paul Gofman <pgofman@codeweavers.com>
+Date: Tue, 14 Jul 2020 02:41:53 +0300
+Subject: [PATCH] ntdll: Always align stack pointer in
+ __wine_syscall_dispatcher on x64.
+
+Syscall thunks break stack alignment for dispatcher. Regardless of that,
+it is probably better not to assume aligned stack in syscall thunk entry.
+---
+ tools/winebuild/import.c | 14 ++++++++------
+ 1 file changed, 8 insertions(+), 6 deletions(-)
+
+diff --git a/tools/winebuild/import.c b/tools/winebuild/import.c
+index 97191ca89ec2..4f641825e367 100644
+--- a/tools/winebuild/import.c
++++ b/tools/winebuild/import.c
+@@ -1497,23 +1497,25 @@ void output_syscalls( DLLSPEC *spec )
+              * depends on us returning to it. Adjust the return address accordingly. */
+             output( "\tsubq $0xb,0x8(%%rbp)\n" );
+             output( "\tcmpq $%u,%%rax\n", count );
+-            output( "\tjae 3f\n" );
++            output( "\tjae 4f\n" );
+             output( "\tleaq .Lsyscall_args(%%rip),%%rcx\n" );
+             output( "\tmovzbl (%%rcx,%%rax),%%ecx\n" );
+             output( "\tsubq $0x20,%%rcx\n" );
+-            output( "\tjbe 1f\n" );
+-            output( "\tsubq %%rcx,%%rsp\n" );
++            output( "\tja 1f\n" );
++            output( "\tandq $~15,%%rsp\n\t" );
++            output( "\tjmp 2f\n" );
++            output( "1:\tsubq %%rcx,%%rsp\n" );
+             output( "\tshrq $3,%%rcx\n" );
+             output( "\tleaq 0x38(%%rbp),%%rsi\n" );
+             output( "\tandq $~15,%%rsp\n\t" );
+             output( "\tmovq %%rsp,%%rdi\n" );
+             output( "\tcld\n" );
+             output( "\trep; movsq\n" );
+-            output( "1:\tmovq %%r10,%%rcx\n" );
++            output( "2:\tmovq %%r10,%%rcx\n" );
+             output( "\tsubq $0x20,%%rsp\n" );
+             output( "\tleaq .Lsyscall_table(%%rip),%%r10\n" );
+             output( "\tcallq *(%%r10,%%rax,8)\n" );
+-            output( "2:\tleaq -0x10(%%rbp),%%rsp\n" );
++            output( "3:\tleaq -0x10(%%rbp),%%rsp\n" );
+             output( "\tpopq %%rdi\n" );
+             output_cfi( ".cfi_same_value %%rdi" );
+             output( "\tpopq %%rsi\n" );
+@@ -1523,7 +1525,7 @@ void output_syscalls( DLLSPEC *spec )
+             output_cfi( ".cfi_adjust_cfa_offset -8" );
+             output_cfi( ".cfi_same_value %%rbp" );
+             output( "\tret\n" );
+-            output( "3:\tmovl $0x%x,%%eax\n", invalid_param );
++            output( "4:\tmovl $0x%x,%%eax\n", invalid_param );
+             output( "\tjmp 2b\n" );
+             break;
+         case CPU_ARM:
+-- 
+2.26.2
+
diff --git a/patches/winebuild-pe_syscall_thunks/0002-winebuild-Call-__wine_syscall_dispatcher-through-the.patch b/patches/winebuild-pe_syscall_thunks/0002-winebuild-Call-__wine_syscall_dispatcher-through-the.patch
new file mode 100644
index 000000000..ecf1da0b0
--- /dev/null
+++ b/patches/winebuild-pe_syscall_thunks/0002-winebuild-Call-__wine_syscall_dispatcher-through-the.patch
@@ -0,0 +1,77 @@
+From 7ef3c9eaa792085641feefd5ee7f7bc157093064 Mon Sep 17 00:00:00 2001
+From: Paul Gofman <pgofman@codeweavers.com>
+Date: Tue, 14 Jul 2020 14:43:01 +0300
+Subject: [PATCH] winebuild: Call __wine_syscall_dispatcher through the fixed
+ address.
+MIME-Version: 1.0
+Content-Type: text/plain; charset=UTF-8
+Content-Transfer-Encoding: 8bit
+
+Based on a patch by Erich E. Hoover and Michael Müller.
+
+Helps applications which directly load ntdll.dll from disk and
+call syscall thunks from the loaded image.
+---
+ dlls/ntdll/unix/virtual.c | 6 ++++--
+ tools/winebuild/import.c  | 8 ++++----
+ 2 files changed, 8 insertions(+), 6 deletions(-)
+
+diff --git a/dlls/ntdll/unix/virtual.c b/dlls/ntdll/unix/virtual.c
+index d7d7bd9084f6..60d27d31c4a9 100644
+--- a/dlls/ntdll/unix/virtual.c
++++ b/dlls/ntdll/unix/virtual.c
+@@ -2796,20 +2796,22 @@ TEB *virtual_alloc_first_teb(void)
+     TEB *teb;
+     PEB *peb;
+     NTSTATUS status;
+-    SIZE_T data_size = page_size;
++    SIZE_T data_size = page_size * 2;
+     SIZE_T peb_size = page_size;
+     SIZE_T teb_size = signal_stack_mask + 1;
+     SIZE_T total = 32 * teb_size;
+ 
+     /* reserve space for shared user data */
+     status = NtAllocateVirtualMemory( NtCurrentProcess(), (void **)&user_shared_data, 0, &data_size,
+-                                      MEM_RESERVE | MEM_COMMIT, PAGE_READONLY );
++                                      MEM_RESERVE | MEM_COMMIT, PAGE_READWRITE );
+     if (status)
+     {
+         ERR( "wine: failed to map the shared user data: %08x\n", status );
+         exit(1);
+     }
+ 
++    *((void **)((char *)user_shared_data + 0x1000)) = __wine_syscall_dispatcher;
++
+     NtAllocateVirtualMemory( NtCurrentProcess(), (void **)&teb_block, 0, &total,
+                              MEM_RESERVE | MEM_TOP_DOWN, PAGE_READWRITE );
+     teb_block_pos = 30;
+diff --git a/tools/winebuild/import.c b/tools/winebuild/import.c
+index 4f641825e367..cf251c9b77d4 100644
+--- a/tools/winebuild/import.c
++++ b/tools/winebuild/import.c
+@@ -1613,10 +1613,10 @@ void output_syscalls( DLLSPEC *spec )
+             output( "\t.byte 0xc3\n" );           /* ret */
+             output( "\tjmp 1f\n" );
+             output( "\t.byte 0xc3\n" );           /* ret */
+-            if (target_platform == PLATFORM_WINDOWS)
++            if (target_platform == PLATFORM_WINDOWS || target_platform == PLATFORM_APPLE)
+             {
+-                output( "1:\t.byte 0xff,0x14,0x25\n" ); /* 2: callq *(__wine_syscall_dispatcher) */
+-                output( "\t.long __wine_syscall_dispatcher\n" );
++                output( "1:\t.byte 0xff,0x14,0x25\n" ); /* call *(user_shared_data + 0x1000) */
++                output( "\t.long 0x7ffe1000\n" );
+             }
+             else
+             {
+@@ -1653,7 +1653,7 @@ void output_syscalls( DLLSPEC *spec )
+         output( "\t.align %d\n", get_alignment(16) );
+         output( "\t%s\n", func_declaration("__wine_syscall") );
+         output( "%s:\n", asm_name("__wine_syscall") );
+-        output( "\tjmp *(%s)\n", asm_name("__wine_syscall_dispatcher") );
++        output( "\tjmp *(0x7ffe1000)\n" );
+         output_function_size( "__wine_syscall" );
+     }
+     output( "\t.data\n" );
+-- 
+2.26.2
+
diff --git a/patches/winebuild-pe_syscall_thunks/0003-ntdll-Also-generate-syscall-thunks-for-Nt-functions-.patch b/patches/winebuild-pe_syscall_thunks/0003-ntdll-Also-generate-syscall-thunks-for-Nt-functions-.patch
new file mode 100644
index 000000000..36370efcb
--- /dev/null
+++ b/patches/winebuild-pe_syscall_thunks/0003-ntdll-Also-generate-syscall-thunks-for-Nt-functions-.patch
@@ -0,0 +1,205 @@
+From bcab391401b586a877ee0ff69525a3429a1b2b48 Mon Sep 17 00:00:00 2001
+From: Paul Gofman <pgofman@codeweavers.com>
+Date: Tue, 14 Jul 2020 02:05:59 +0300
+Subject: [PATCH] ntdll: Also generate syscall thunks for Nt functions not yet
+ in the Unix part.
+
+---
+ dlls/ntdll/ntdll.spec    |  1 +
+ dlls/ntdll/unix/loader.c | 37 +++++++++++++++++++++++++++++++++
+ tools/winebuild/import.c | 44 +++++++++++++++++++++++++++++++++++-----
+ tools/winebuild/spec32.c | 16 ++++++++++++++-
+ 4 files changed, 92 insertions(+), 6 deletions(-)
+
+diff --git a/dlls/ntdll/ntdll.spec b/dlls/ntdll/ntdll.spec
+index b873b54b09d6..09b060b094ae 100644
+--- a/dlls/ntdll/ntdll.spec
++++ b/dlls/ntdll/ntdll.spec
+@@ -1588,6 +1588,7 @@
+ @ cdecl __wine_set_unix_funcs(long ptr)
+ @ extern __wine_syscall_dispatcher
+ @ extern -arch=i386 __wine_ldt_copy
++@ extern pe_syscall_table
+ 
+ # Debugging
+ @ cdecl -norelay __wine_dbg_get_channel_flags(ptr)
+diff --git a/dlls/ntdll/unix/loader.c b/dlls/ntdll/unix/loader.c
+index b211708aca02..c6760831d48c 100644
+--- a/dlls/ntdll/unix/loader.c
++++ b/dlls/ntdll/unix/loader.c
+@@ -788,6 +788,41 @@ static ULONG_PTR find_pe_export( HMODULE module, const IMAGE_EXPORT_DIRECTORY *e
+     return find_named_export( module, exports, (char *)name->Name );
+ }
+ 
++static void fixup_syscall_table(const IMAGE_EXPORT_DIRECTORY *ntdll_exports)
++{
++    extern unsigned int syscall_count;
++    extern void *syscall_table[];
++    unsigned int fixup_count;
++    void **pe_syscall_table;
++    unsigned int i;
++
++    pe_syscall_table = (void **)find_named_export( ntdll_module, ntdll_exports, "pe_syscall_table" );
++
++    if (!pe_syscall_table)
++    {
++        ERR( "pe_syscall_table not found\n" );
++        return;
++    }
++
++    fixup_count = 0;
++    for (i = 0; i < syscall_count; ++i)
++    {
++        assert ( (syscall_table[i] == (void *)0xdeadbeef
++                && pe_syscall_table[i] && pe_syscall_table[i] != (void *)0xdeadcafe)
++                || (pe_syscall_table[i] == (void *)0xdeadcafe && syscall_table[i]
++                && syscall_table[i] != (void *)0xdeadbeef) );
++
++        if (syscall_table[i] == (void *)0xdeadbeef)
++        {
++            syscall_table[i] = pe_syscall_table[i];
++            ++fixup_count;
++        }
++    }
++
++    if (!fixup_count)
++        FIXME("No functions to fixup.\n");
++}
++
+ static void fixup_ntdll_imports( const IMAGE_NT_HEADERS *nt )
+ {
+     const IMAGE_EXPORT_DIRECTORY *ntdll_exports = get_export_dir( ntdll_module );
+@@ -828,6 +863,8 @@ static void fixup_ntdll_imports( const IMAGE_NT_HEADERS *nt )
+         thunk_list++;
+     }
+ 
++    fixup_syscall_table(ntdll_exports);
++
+ #define GET_FUNC(name) \
+     if (!(p##name = (void *)find_named_export( ntdll_module, ntdll_exports, #name ))) \
+         ERR( "%s not found\n", #name )
+diff --git a/tools/winebuild/import.c b/tools/winebuild/import.c
+index cf251c9b77d4..71d397122f60 100644
+--- a/tools/winebuild/import.c
++++ b/tools/winebuild/import.c
+@@ -1418,11 +1418,13 @@ void output_syscalls( DLLSPEC *spec )
+     const unsigned int invalid_param = 0xc000000d; /* STATUS_INVALID_PARAMETER */
+     int i, count;
+     ORDDEF **syscalls = NULL;
++    int is_ntdll = spec->dll_name && !strcmp(spec->dll_name, "ntdll");
+ 
+     for (i = count = 0; i < spec->nb_entry_points; i++)
+     {
+         ORDDEF *odp = &spec->entry_points[i];
+-        if (!(odp->flags & FLAG_SYSCALL)) continue;
++        if (!(odp->flags & FLAG_SYSCALL) && (!is_ntdll
++                || (strncmp(odp->link_name, "Nt", 2) && strncmp(odp->link_name, "Zw", 2)))) continue;
+         if (!syscalls) syscalls = xmalloc( (spec->nb_entry_points - i) * sizeof(*syscalls) );
+         syscalls[count++] = odp;
+     }
+@@ -1560,25 +1562,57 @@ void output_syscalls( DLLSPEC *spec )
+         }
+         output_cfi( ".cfi_endproc" );
+         output_function_size( "__wine_syscall_dispatcher" );
+-
+         output( "\t.data\n" );
++
++        output( "\t.align %d\n", get_alignment( get_ptr_size() ) );
++        output( "%s\n", asm_globl("syscall_count") );
++        output( "\t.long %u\n", count );
++
+         output( "\t.align %d\n", get_alignment( get_ptr_size() ) );
++        output( "%s\n", asm_globl("syscall_table") );
+         output( ".Lsyscall_table:\n" );
+         for (i = 0; i < count; i++)
+-            output( "\t%s %s\n", get_asm_ptr_keyword(), asm_name( get_link_name( syscalls[i] )));
++        {
++            if (syscalls[i]->flags & FLAG_SYSCALL)
++                output( "\t%s %s\n", get_asm_ptr_keyword(), asm_name( get_link_name( syscalls[i] )));
++            else
++                output( "\t%s 0xdeadbeef\n", get_asm_ptr_keyword());
++        }
+         output( ".Lsyscall_args:\n" );
+         for (i = 0; i < count; i++)
+             output( "\t.byte %u\n", get_args_size( syscalls[i] ));
+         return;
+     }
+ 
++    output( "\t.data\n" );
++    output( "\t.align %d\n", get_alignment( get_ptr_size() ) );
++    output( "%s\n", asm_globl("pe_syscall_table") );
++    output( ".Lpe_syscall_table:\n" );
++
++    for (i = 0; i < count; i++)
++    {
++        if (!(syscalls[i]->flags & FLAG_SYSCALL))
++            output( "\t%s %s\n", get_asm_ptr_keyword(), asm_name( get_link_name( syscalls[i] )));
++        else
++            output( "\t%s 0xdeadcafe\n", get_asm_ptr_keyword());
++    }
++
++    output( "\t.text\n" );
++
+     for (i = 0; i < count; i++)
+     {
+         ORDDEF *odp = syscalls[i];
+         const char *name = get_link_name(odp);
++        char exp_name[256];
++
++        if (odp->flags & FLAG_SYSCALL)
++            strcpy(exp_name, name);
++        else
++            sprintf(exp_name, "_syscall_%s", name);
++
+         output( "\t.align %d\n", get_alignment(16) );
+-        output( "\t%s\n", func_declaration(name) );
+-        output( "%s\n", asm_globl(name) );
++        output( "\t%s\n", func_declaration(exp_name) );
++        output( "%s\n", asm_globl(exp_name) );
+         output_cfi( ".cfi_startproc" );
+         switch (target_cpu)
+         {
+diff --git a/tools/winebuild/spec32.c b/tools/winebuild/spec32.c
+index c85249b2a961..7cfbe5389bdf 100644
+--- a/tools/winebuild/spec32.c
++++ b/tools/winebuild/spec32.c
+@@ -394,6 +394,7 @@ void output_exports( DLLSPEC *spec )
+     int nr_exports = get_exports_count( spec );
+     const char *func_ptr = (target_platform == PLATFORM_WINDOWS) ? ".rva" : get_asm_ptr_keyword();
+     const char *name;
++    int is_ntdll = spec->dll_name && !strcmp(spec->dll_name, "ntdll");
+ 
+     if (!nr_exports) return;
+ 
+@@ -445,6 +446,7 @@ void output_exports( DLLSPEC *spec )
+             else if ((odp->flags & FLAG_IMPORT) && (target_cpu == CPU_x86 || target_cpu == CPU_x86_64))
+             {
+                 name = odp->name ? odp->name : odp->export_name;
++
+                 if (name) output( "\t%s %s_%s\n", func_ptr, asm_name("__wine_spec_imp"), name );
+                 else output( "\t%s %s_%u\n", func_ptr, asm_name("__wine_spec_imp"), i );
+                 needs_imports = 1;
+@@ -455,7 +457,19 @@ void output_exports( DLLSPEC *spec )
+             }
+             else
+             {
+-                output( "\t%s %s\n", func_ptr, asm_name( get_link_name( odp )));
++                const char *name = get_link_name( odp );
++
++                if (!(odp->flags & FLAG_SYSCALL) && is_ntdll
++                        && (!strncmp(name, "Nt", 2) || !strncmp(name, "Zw", 2)))
++                {
++                    char sc_name[256];
++                    sprintf(sc_name, "_syscall_%s", name);
++                    output( "\t%s %s\n", func_ptr, asm_name( sc_name ));
++                }
++                else
++                {
++                    output( "\t%s %s\n", func_ptr, asm_name( name ));
++                }
+             }
+             break;
+         case TYPE_STUB:
+-- 
+2.26.2
+
diff --git a/patches/winebuild-pe_syscall_thunks/0004-ntdll-Fix-NtGetContextThread-on-i386-with-PE-syscall.patch b/patches/winebuild-pe_syscall_thunks/0004-ntdll-Fix-NtGetContextThread-on-i386-with-PE-syscall.patch
new file mode 100644
index 000000000..bdfdb95b4
--- /dev/null
+++ b/patches/winebuild-pe_syscall_thunks/0004-ntdll-Fix-NtGetContextThread-on-i386-with-PE-syscall.patch
@@ -0,0 +1,55 @@
+From 52177a4f877115f0fa358c37da6dcdcfb17e83f8 Mon Sep 17 00:00:00 2001
+From: Paul Gofman <pgofman@codeweavers.com>
+Date: Tue, 14 Jul 2020 13:31:48 +0300
+Subject: [PATCH] ntdll: Fix NtGetContextThread on i386 with PE syscall thunks.
+
+Note: to be dropped once i386 NtGetContextThread moves to the
+Unix part.
+---
+ dlls/ntdll/signal_i386.c | 8 +++++---
+ tools/winebuild/import.c | 3 +++
+ 2 files changed, 8 insertions(+), 3 deletions(-)
+
+diff --git a/dlls/ntdll/signal_i386.c b/dlls/ntdll/signal_i386.c
+index a130638cb310..e098b3e409b2 100644
+--- a/dlls/ntdll/signal_i386.c
++++ b/dlls/ntdll/signal_i386.c
+@@ -331,6 +331,8 @@ __ASM_STDCALL_FUNC( RtlCaptureContext, 4,
+                     "ret $4" )
+ 
+ 
++extern NTSTATUS WINAPI _syscall_NtGetContextThread( HANDLE handle, CONTEXT *context );
++
+ /***********************************************************************
+  *              NtGetContextThread  (NTDLL.@)
+  *              ZwGetContextThread  (NTDLL.@)
+@@ -353,9 +355,9 @@ NTSTATUS CDECL DECLSPEC_HIDDEN __regs_NtGetContextThread( DWORD edi, DWORD esi,
+     }
+     if (needed_flags & CONTEXT_CONTROL)
+     {
+-        context->Ebp    = ebp;
+-        context->Esp    = (DWORD)&retaddr;
+-        context->Eip    = (DWORD)NtGetContextThread + 12;
++        context->Ebp    = *(DWORD *)ebp;
++        context->Esp    = ebp + 4;
++        context->Eip    = (DWORD)_syscall_NtGetContextThread + 18;
+         context->EFlags = eflags;
+     }
+     return unix_funcs->NtGetContextThread( handle, context );
+diff --git a/tools/winebuild/import.c b/tools/winebuild/import.c
+index 71d397122f60..e8bd141e962b 100644
+--- a/tools/winebuild/import.c
++++ b/tools/winebuild/import.c
+@@ -1469,6 +1469,9 @@ void output_syscalls( DLLSPEC *spec )
+             output( "\tmovl %%esp,%%edi\n" );
+             output( "\tcld\n" );
+             output( "\trep; movsl\n" );
++            output( "\tmovl -0x4(%%ebp),%%esi\n" );
++            output( "\tmovl -0x8(%%ebp),%%edi\n" );
++
+             if (UsePIC)
+                 output( "\tcall *.Lsyscall_table-1b(%%eax,%%edx,4)\n" );
+             else
+-- 
+2.26.2
+
diff --git a/patches/winebuild-pe_syscall_thunks/definition b/patches/winebuild-pe_syscall_thunks/definition
new file mode 100644
index 000000000..7b86a4291
--- /dev/null
+++ b/patches/winebuild-pe_syscall_thunks/definition
@@ -0,0 +1,5 @@
+Fixes: [21232] Chromium-based browser engines (Chrome, Opera, Comodo Dragon, SRWare Iron) crash on startup unless '--no-sandbox' is used (native API sandboxing/hooking scheme incompatible with Wine)
+Fixes: [42741] StarCraft I: 1.18 PTR fails to initialize ClientSdk.dll
+Fixes: [45349] Multiple applications and games crash due to missing support for 64-bit syscall thunks (StreetFighter V, World of Warcraft)
+Fixes: [45573] League of Legends 8.12+ fails to start a game (anticheat engine, hooking of syscall return instructions)
+Fixes: [45650] chromium 32-bit sandbox expects different syscall thunks depending on Windows version


diff --git a/patches/ntdll-ForceBottomUpAlloc/0001-ntdll-Stop-search-on-mmap-error-in-try_map_free_area.patch b/patches/ntdll-ForceBottomUpAlloc/0001-ntdll-Stop-search-on-mmap-error-in-try_map_free_area.patch
deleted file mode 100644
index 579f6562b..000000000
--- a/patches/ntdll-ForceBottomUpAlloc/0001-ntdll-Stop-search-on-mmap-error-in-try_map_free_area.patch
+++ /dev/null
@@ -1,35 +0,0 @@
-From 980ca40adb1f4d268b42f434c353dc461df19b49 Mon Sep 17 00:00:00 2001
-From: Paul Gofman <gofmanp@gmail.com>
-Date: Thu, 9 Jan 2020 15:05:09 +0300
-Subject: [PATCH] ntdll: Stop search on mmap() error in try_map_free_area().
-
-The anon mmap errors do not depend on start address hint. Ignoring them
-makes the search take incredible time until it fails.
----
- dlls/ntdll/unix/virtual.c | 10 ++++++++--
- 1 file changed, 8 insertions(+), 2 deletions(-)
-
-diff --git a/dlls/ntdll/unix/virtual.c b/dlls/ntdll/unix/virtual.c
-index 04889113c339..088e73b17b34 100644
---- a/dlls/ntdll/unix/virtual.c
-+++ b/dlls/ntdll/unix/virtual.c
-@@ -1063,8 +1063,14 @@ static void* try_map_free_area( void *base, void *end, ptrdiff_t step,
-             return start;
-         TRACE( "Found free area is already mapped, start %p.\n", start );
- 
--        if (ptr != (void *)-1)
--            munmap( ptr, size );
-+        if (ptr == (void *)-1)
-+        {
-+            ERR("wine_anon_mmap() error %s, start %p, size %p, unix_prot %#x.\n",
-+                    strerror(errno), start, (void *)size, unix_prot);
-+            return NULL;
-+        }
-+
-+        munmap( ptr, size );
- 
-         if ((step > 0 && (char *)end - (char *)start < step) ||
-             (step < 0 && (char *)start - (char *)base < -step) ||
--- 
-2.26.2
-
diff --git a/patches/ntdll-ForceBottomUpAlloc/0002-ntdll-Use-MAP_FIXED_NOREPLACE-flag-in-try_map_free_a.patch b/patches/ntdll-ForceBottomUpAlloc/0002-ntdll-Use-MAP_FIXED_NOREPLACE-flag-in-try_map_free_a.patch
deleted file mode 100644
index ac2fc4b51..000000000
--- a/patches/ntdll-ForceBottomUpAlloc/0002-ntdll-Use-MAP_FIXED_NOREPLACE-flag-in-try_map_free_a.patch
+++ /dev/null
@@ -1,51 +0,0 @@
-From 1aa1c57302aef175849799185f324e461161f9eb Mon Sep 17 00:00:00 2001
-From: Paul Gofman <gofmanp@gmail.com>
-Date: Thu, 16 Jan 2020 16:09:24 +0300
-Subject: [PATCH] ntdll: Use MAP_FIXED_NOREPLACE flag in try_map_free_area() if
- available.
-
-Avoids actual mapping followed by unmapping back if the memory range is
-already mapped.
----
- dlls/ntdll/unix/virtual.c | 12 +++++++++---
- 1 file changed, 9 insertions(+), 3 deletions(-)
-
-diff --git a/dlls/ntdll/unix/virtual.c b/dlls/ntdll/unix/virtual.c
-index 088e73b17b34..3907b0db70a9 100644
---- a/dlls/ntdll/unix/virtual.c
-+++ b/dlls/ntdll/unix/virtual.c
-@@ -1055,22 +1055,28 @@ static struct wine_rb_entry *find_view_inside_range( void **base_ptr, void **end
- static void* try_map_free_area( void *base, void *end, ptrdiff_t step,
-                                 void *start, size_t size, int unix_prot )
- {
-+#ifdef MAP_FIXED_NOREPLACE
-+    static int flags = MAP_FIXED_NOREPLACE;
-+#else
-+    static int flags = 0;
-+#endif
-     void *ptr;
- 
-     while (start && base <= start && (char*)start + size <= (char*)end)
-     {
--        if ((ptr = wine_anon_mmap( start, size, unix_prot, 0 )) == start)
-+        if ((ptr = wine_anon_mmap( start, size, unix_prot, flags )) == start)
-             return start;
-         TRACE( "Found free area is already mapped, start %p.\n", start );
- 
--        if (ptr == (void *)-1)
-+        if (ptr == (void *)-1 && errno != EEXIST)
-         {
-             ERR("wine_anon_mmap() error %s, start %p, size %p, unix_prot %#x.\n",
-                     strerror(errno), start, (void *)size, unix_prot);
-             return NULL;
-         }
- 
--        munmap( ptr, size );
-+        if (ptr != (void *)-1)
-+            munmap( ptr, size );
- 
-         if ((step > 0 && (char *)end - (char *)start < step) ||
-             (step < 0 && (char *)start - (char *)base < -step) ||
--- 
-2.26.2
-
diff --git a/patches/patchinstall.sh b/patches/patchinstall.sh
index 2ead3cc2f..7587bc216 100755
--- a/patches/patchinstall.sh
+++ b/patches/patchinstall.sh
@@ -3536,15 +3536,11 @@ fi
 # |   *	dlls/ntdll/unix/virtual.c
 # |
 if test "$enable_ntdll_ForceBottomUpAlloc" -eq 1; then
-	patch_apply ntdll-ForceBottomUpAlloc/0001-ntdll-Stop-search-on-mmap-error-in-try_map_free_area.patch
-	patch_apply ntdll-ForceBottomUpAlloc/0002-ntdll-Use-MAP_FIXED_NOREPLACE-flag-in-try_map_free_a.patch
 	patch_apply ntdll-ForceBottomUpAlloc/0003-ntdll-Force-bottom-up-allocation-order-for-64-bit-ar.patch
 	patch_apply ntdll-ForceBottomUpAlloc/0004-ntdll-Increase-step-after-failed-map-attempt-in-try_.patch
 	patch_apply ntdll-ForceBottomUpAlloc/0005-ntdll-Use-free-area-list-for-virtual-memory-allocati.patch
 	patch_apply ntdll-ForceBottomUpAlloc/0006-ntdll-Permanently-exclude-natively-mapped-areas-from.patch
 	(
-		printf '%s\n' '+    { "Paul Gofman", "ntdll: Stop search on mmap() error in try_map_free_area().", 1 },';
-		printf '%s\n' '+    { "Paul Gofman", "ntdll: Use MAP_FIXED_NOREPLACE flag in try_map_free_area() if available.", 1 },';
 		printf '%s\n' '+    { "Paul Gofman", "ntdll: Force bottom up allocation order for 64 bit arch unless top down is requested.", 1 },';
 		printf '%s\n' '+    { "Paul Gofman", "ntdll: Increase step after failed map attempt in try_map_free_area().", 1 },';
 		printf '%s\n' '+    { "Paul Gofman", "ntdll: Use free area list for virtual memory allocation.", 1 },';
diff --git a/patches/server-Object_Types/0010-ntdll-Mimic-object-type-behavior-for-different-windo.patch b/patches/server-Object_Types/0010-ntdll-Mimic-object-type-behavior-for-different-windo.patch
index 76db9a0fd..a92116f80 100644
--- a/patches/server-Object_Types/0010-ntdll-Mimic-object-type-behavior-for-different-windo.patch
+++ b/patches/server-Object_Types/0010-ntdll-Mimic-object-type-behavior-for-different-windo.patch
@@ -1,4 +1,4 @@
-From a82fe5d2ad7ff0683ca7078dffb232676ea8a16f Mon Sep 17 00:00:00 2001
+From 63e07d8738f715c04fe46d2e50e63b8a46b707af Mon Sep 17 00:00:00 2001
 From: =?UTF-8?q?Michael=20M=C3=BCller?= <michael@fds-team.de>
 Date: Wed, 8 Mar 2017 19:39:29 +0100
 Subject: [PATCH] ntdll: Mimic object type behavior for different windows
@@ -119,10 +119,10 @@ index 398ad6bed4e..b538160f6d0 100644
      test_case_sensitive();
      test_namespace_pipe();
 diff --git a/dlls/ntdll/unix/file.c b/dlls/ntdll/unix/file.c
-index 4544df55d16..8ff963585da 100644
+index ace1b98e534..f9aa98ca559 100644
 --- a/dlls/ntdll/unix/file.c
 +++ b/dlls/ntdll/unix/file.c
-@@ -6462,7 +6462,10 @@ NTSTATUS WINAPI NtQueryObject( HANDLE handle, OBJECT_INFORMATION_CLASS info_clas
+@@ -6488,7 +6488,10 @@ NTSTATUS WINAPI NtQueryObject( HANDLE handle, OBJECT_INFORMATION_CLASS info_clas
                  }
                  if (status == STATUS_SUCCESS)
                  {
@@ -135,11 +135,11 @@ index 4544df55d16..8ff963585da 100644
              }
          }
 diff --git a/dlls/ntdll/unix/system.c b/dlls/ntdll/unix/system.c
-index cd2f45d9f55..b56747e0273 100644
+index a795d56e8bc..785a714e88a 100644
 --- a/dlls/ntdll/unix/system.c
 +++ b/dlls/ntdll/unix/system.c
-@@ -2024,6 +2024,18 @@ static void get_timezone_info( RTL_DYNAMIC_TIME_ZONE_INFORMATION *tzi )
-     RtlLeaveCriticalSection( &TIME_tz_section );
+@@ -1992,6 +1992,18 @@ static void get_timezone_info( RTL_DYNAMIC_TIME_ZONE_INFORMATION *tzi )
+     pthread_mutex_unlock( &tz_mutex );
  }
  
 +static DWORD translate_object_index(DWORD index)
@@ -157,7 +157,7 @@ index cd2f45d9f55..b56747e0273 100644
  
  /******************************************************************************
   *              NtQuerySystemInformation  (NTDLL.@)
-@@ -2390,7 +2402,7 @@ NTSTATUS WINAPI NtQuerySystemInformation( SYSTEM_INFORMATION_CLASS class,
+@@ -2396,7 +2408,7 @@ NTSTATUS WINAPI NtQuerySystemInformation( SYSTEM_INFORMATION_CLASS class,
                      shi->Handle[i].OwnerPid     = handle_info[i].owner;
                      shi->Handle[i].HandleValue  = handle_info[i].handle;
                      shi->Handle[i].AccessMask   = handle_info[i].access;
@@ -166,7 +166,7 @@ index cd2f45d9f55..b56747e0273 100644
                      /* FIXME: Fill out HandleFlags, ObjectPointer */
                  }
              }
-@@ -2443,7 +2455,7 @@ NTSTATUS WINAPI NtQuerySystemInformation( SYSTEM_INFORMATION_CLASS class,
+@@ -2449,7 +2461,7 @@ NTSTATUS WINAPI NtQuerySystemInformation( SYSTEM_INFORMATION_CLASS class,
                      shi->Handle[i].UniqueProcessId = handle_info[i].owner;
                      shi->Handle[i].HandleValue     = handle_info[i].handle;
                      shi->Handle[i].GrantedAccess   = handle_info[i].access;
@@ -175,7 +175,7 @@ index cd2f45d9f55..b56747e0273 100644
                      /* FIXME: Fill out remaining fields */
                  }
              }
-@@ -2663,7 +2675,6 @@ NTSTATUS WINAPI NtQuerySystemInformation( SYSTEM_INFORMATION_CLASS class,
+@@ -2669,7 +2681,6 @@ NTSTATUS WINAPI NtQuerySystemInformation( SYSTEM_INFORMATION_CLASS class,
      return ret;
  }
  

diff --git a/patches/ntdll-DOS_Attributes/0004-ntdll-Implement-storing-DOS-attributes-in-NtCreateFi.patch b/patches/ntdll-DOS_Attributes/0004-ntdll-Implement-storing-DOS-attributes-in-NtCreateFi.patch
index cae68f416..e183e21b9 100644
--- a/patches/ntdll-DOS_Attributes/0004-ntdll-Implement-storing-DOS-attributes-in-NtCreateFi.patch
+++ b/patches/ntdll-DOS_Attributes/0004-ntdll-Implement-storing-DOS-attributes-in-NtCreateFi.patch
@@ -1,14 +1,14 @@
-From 1eb9ac00c49041448f53be5a6b4097222567a8af Mon Sep 17 00:00:00 2001
+From 5f6d3c447ef1e243de6188d8813261d991c4ffc7 Mon Sep 17 00:00:00 2001
 From: "Erich E. Hoover" <erich.e.hoover@gmail.com>
 Date: Wed, 20 Aug 2014 15:28:00 -0600
 Subject: [PATCH] ntdll: Implement storing DOS attributes in NtCreateFile.
 
 ---
  dlls/ntdll/tests/directory.c | 24 +++++++++++-------------
- dlls/ntdll/unix/file.c       | 25 ++++++++++++++++++++++++-
+ dlls/ntdll/unix/file.c       | 31 ++++++++++++++++++++++++++-----
  include/wine/port.h          |  2 ++
  libs/port/xattr.c            | 20 ++++++++++++++++++++
- 4 files changed, 57 insertions(+), 14 deletions(-)
+ 4 files changed, 59 insertions(+), 18 deletions(-)
 
 diff --git a/dlls/ntdll/tests/directory.c b/dlls/ntdll/tests/directory.c
 index 248ed99ab20..e0f4debc624 100644
@@ -60,7 +60,7 @@ index 248ed99ab20..e0f4debc624 100644
          }
          testfiles[i].nfound++;
 diff --git a/dlls/ntdll/unix/file.c b/dlls/ntdll/unix/file.c
-index f1176717819..aee464fbd16 100644
+index f1176717819..5d5e4ba2892 100644
 --- a/dlls/ntdll/unix/file.c
 +++ b/dlls/ntdll/unix/file.c
 @@ -3595,6 +3595,20 @@ void CDECL set_show_dot_files( BOOL enable )
@@ -84,26 +84,27 @@ index f1176717819..aee464fbd16 100644
  
  /******************************************************************************
   *              open_unix_file
-@@ -3640,6 +3654,10 @@ NTSTATUS WINAPI NtCreateFile( HANDLE *handle, ACCESS_MASK access, OBJECT_ATTRIBU
-                               ULONG attributes, ULONG sharing, ULONG disposition,
-                               ULONG options, void *ea_buffer, ULONG ea_length )
- {
-+    static UNICODE_STRING empty_string;
-+    OBJECT_ATTRIBUTES unix_attr;
-+    data_size_t len;
-+    struct object_attributes *objattr;
-     char *unix_name;
-     BOOL created = FALSE;
+@@ -3682,13 +3696,14 @@ NTSTATUS WINAPI NtCreateFile( HANDLE *handle, ACCESS_MASK access, OBJECT_ATTRIBU
+         io->u.Status = STATUS_SUCCESS;
+     }
  
-@@ -3686,7 +3704,6 @@ NTSTATUS WINAPI NtCreateFile( HANDLE *handle, ACCESS_MASK access, OBJECT_ATTRIBU
+-    if (io->u.Status == STATUS_SUCCESS)
++    if (io->u.Status != STATUS_SUCCESS)
      {
-         io->u.Status = open_unix_file( handle, unix_name, access, attr, attributes,
-                                        sharing, disposition, options, ea_buffer, ea_length );
+-        io->u.Status = open_unix_file( handle, unix_name, access, attr, attributes,
+-                                       sharing, disposition, options, ea_buffer, ea_length );
 -        RtlFreeHeap( GetProcessHeap(), 0, unix_name );
++        WARN( "%s not found (%x)\n", debugstr_us(attr->ObjectName), io->u.Status );
++        return io->u.Status;
      }
-     else WARN( "%s not found (%x)\n", debugstr_us(attr->ObjectName), io->u.Status );
+-    else WARN( "%s not found (%x)\n", debugstr_us(attr->ObjectName), io->u.Status );
++
++    io->u.Status = open_unix_file( handle, unix_name, access, attr, attributes,
++                                   sharing, disposition, options, ea_buffer, ea_length );
  
-@@ -3710,6 +3727,11 @@ NTSTATUS WINAPI NtCreateFile( HANDLE *handle, ACCESS_MASK access, OBJECT_ATTRIBU
+     if (io->u.Status == STATUS_SUCCESS)
+     {
+@@ -3710,6 +3725,11 @@ NTSTATUS WINAPI NtCreateFile( HANDLE *handle, ACCESS_MASK access, OBJECT_ATTRIBU
              io->Information = FILE_OVERWRITTEN;
              break;
          }
@@ -115,7 +116,7 @@ index f1176717819..aee464fbd16 100644
      }
      else if (io->u.Status == STATUS_TOO_MANY_OPENED_FILES)
      {
-@@ -3717,6 +3739,7 @@ NTSTATUS WINAPI NtCreateFile( HANDLE *handle, ACCESS_MASK access, OBJECT_ATTRIBU
+@@ -3717,6 +3737,7 @@ NTSTATUS WINAPI NtCreateFile( HANDLE *handle, ACCESS_MASK access, OBJECT_ATTRIBU
          if (!once++) ERR_(winediag)( "Too many open files, ulimit -n probably needs to be increased\n" );
      }
  

diff --git a/patches/eventfd_synchronization/definition b/patches/eventfd_synchronization/definition
index a00b4e151..29fc4c8a2 100644
--- a/patches/eventfd_synchronization/definition
+++ b/patches/eventfd_synchronization/definition
diff --git a/patches/ntdll-SystemRoot_Symlink/0001-ntdll-Add-special-handling-for-SystemRoot-to-satisfy.patch b/patches/ntdll-SystemRoot_Symlink/0001-ntdll-Add-special-handling-for-SystemRoot-to-satisfy.patch
deleted file mode 100644
index 965926175..000000000
--- a/patches/ntdll-SystemRoot_Symlink/0001-ntdll-Add-special-handling-for-SystemRoot-to-satisfy.patch
+++ /dev/null
@@ -1,42 +0,0 @@
-From e0b0ac874fbe3dcab53222f38831978f63177602 Mon Sep 17 00:00:00 2001
-From: Sebastian Lackner <sebastian@fds-team.de>
-Date: Mon, 17 Aug 2015 06:17:33 +0200
-Subject: ntdll: Add special handling for \SystemRoot to satisfy MSYS2
- case-insensitive system check.
-
----
- dlls/ntdll/om.c | 11 +++++++++++
- 1 file changed, 11 insertions(+)
-
-diff --git a/dlls/ntdll/om.c b/dlls/ntdll/om.c
-index 0d66867496b..f8f0760de70 100644
---- a/dlls/ntdll/om.c
-+++ b/dlls/ntdll/om.c
-@@ -602,6 +602,7 @@ NTSTATUS WINAPI NtQueryDirectoryObject(HANDLE handle, PDIRECTORY_BASIC_INFORMATI
- NTSTATUS WINAPI NtOpenSymbolicLinkObject( HANDLE *handle, ACCESS_MASK access,
-                                           const OBJECT_ATTRIBUTES *attr)
- {
-+    static const WCHAR SystemRootW[] = {'\\','S','y','s','t','e','m','R','o','o','t'};
-     NTSTATUS ret;
- 
-     TRACE("(%p,0x%08x,%s)\n", handle, access, debugstr_ObjectAttributes(attr));
-@@ -609,6 +610,16 @@ NTSTATUS WINAPI NtOpenSymbolicLinkObject( HANDLE *handle, ACCESS_MASK access,
-     if (!handle) return STATUS_ACCESS_VIOLATION;
-     if ((ret = validate_open_object_attributes( attr ))) return ret;
- 
-+    /* MSYS2 tries to open \\SYSTEMROOT to check for case-insensitive systems */
-+    if (!access && !attr->RootDirectory &&
-+        attr->ObjectName->Length == sizeof(SystemRootW) &&
-+        !wcsnicmp( attr->ObjectName->Buffer, SystemRootW,
-+                   sizeof(SystemRootW)/sizeof(WCHAR) ))
-+    {
-+        TRACE( "returning STATUS_ACCESS_DENIED\n" );
-+        return STATUS_ACCESS_DENIED;
-+    }
-+
-     SERVER_START_REQ(open_symlink)
-     {
-         req->access     = access;
--- 
-2.26.0
-
diff --git a/patches/ntdll-SystemRoot_Symlink/definition b/patches/ntdll-SystemRoot_Symlink/definition
deleted file mode 100644
index 6fdba87a0..000000000
--- a/patches/ntdll-SystemRoot_Symlink/definition
+++ /dev/null
@@ -1 +0,0 @@
-Fixes: Fix detection of case-insensitive systems in MSYS2
diff --git a/patches/patchinstall.sh b/patches/patchinstall.sh
index 9092fc243..2ead3cc2f 100755
--- a/patches/patchinstall.sh
+++ b/patches/patchinstall.sh
@@ -192,7 +192,6 @@ patch_enable_all ()
 	enable_ntdll_SystemExtendedProcessInformation="$1"
 	enable_ntdll_SystemInterruptInformation="$1"
 	enable_ntdll_SystemModuleInformation="$1"
-	enable_ntdll_SystemRoot_Symlink="$1"
 	enable_ntdll_WRITECOPY="$1"
 	enable_ntdll_Zero_mod_name="$1"
 	enable_ntdll_aarch_TEB="$1"
@@ -664,9 +663,6 @@ patch_enable ()
 		ntdll-SystemModuleInformation)
 			enable_ntdll_SystemModuleInformation="$2"
 			;;
-		ntdll-SystemRoot_Symlink)
-			enable_ntdll_SystemRoot_Symlink="$2"
-			;;
 		ntdll-WRITECOPY)
 			enable_ntdll_WRITECOPY="$2"
 			;;
@@ -3873,18 +3869,6 @@ if test "$enable_ntdll_SystemModuleInformation" -eq 1; then
 	) >> "$patchlist"
 fi
 
-# Patchset ntdll-SystemRoot_Symlink
-# |
-# | Modified files:
-# |   *	dlls/ntdll/om.c
-# |
-if test "$enable_ntdll_SystemRoot_Symlink" -eq 1; then
-	patch_apply ntdll-SystemRoot_Symlink/0001-ntdll-Add-special-handling-for-SystemRoot-to-satisfy.patch
-	(
-		printf '%s\n' '+    { "Sebastian Lackner", "ntdll: Add special handling for \\SystemRoot to satisfy MSYS2 case-insensitive system check.", 1 },';
-	) >> "$patchlist"
-fi
-
 # Patchset ntdll-Zero_mod_name
 # |
 # | Modified files:

diff --git a/patches/ntdll-NtDevicePath/0001-ntdll-Implement-opening-files-through-nt-device-path.patch b/patches/ntdll-NtDevicePath/0001-ntdll-Implement-opening-files-through-nt-device-path.patch
index c0d692895..67933da10 100644
--- a/patches/ntdll-NtDevicePath/0001-ntdll-Implement-opening-files-through-nt-device-path.patch
+++ b/patches/ntdll-NtDevicePath/0001-ntdll-Implement-opening-files-through-nt-device-path.patch
@@ -1,4 +1,4 @@
-From 7ad6b055c6f24d9dc193f9d80e2f5921f4f7e67c Mon Sep 17 00:00:00 2001
+From 2ea24b967a65e0bc736625abf496fa29607d74d7 Mon Sep 17 00:00:00 2001
 From: =?UTF-8?q?Michael=20M=C3=BCller?= <michael@fds-team.de>
 Date: Fri, 26 May 2017 05:17:17 +0200
 Subject: [PATCH] ntdll: Implement opening files through nt device paths.
@@ -63,7 +63,7 @@ index 6164b0c4bde..6610edbd042 100644
  
  static void open_file_test(void)
 diff --git a/dlls/ntdll/unix/file.c b/dlls/ntdll/unix/file.c
-index aae715521a5..7fcb9f23460 100644
+index aae715521a5..89219a88113 100644
 --- a/dlls/ntdll/unix/file.c
 +++ b/dlls/ntdll/unix/file.c
 @@ -3294,7 +3294,7 @@ static NTSTATUS nt_to_unix_file_name_attr( const OBJECT_ATTRIBUTES *attr, char *
@@ -153,7 +153,7 @@ index aae715521a5..7fcb9f23460 100644
 + * element doesn't have to exist; in that case STATUS_NO_SUCH_FILE is
 + * returned, but the unix name is still filled in properly.
 + */
-+NTSTATUS CDECL nt_to_unix_file_name( const UNICODE_STRING *nameW, char **unix_name_ret,
++NTSTATUS nt_to_unix_file_name( const UNICODE_STRING *nameW, char **unix_name_ret,
 +                                     UINT disposition )
 +{
 +    static const WCHAR systemrootW[] = {'\\','S','y','s','t','e','m','R','o','o','t','\\',0};

diff --git a/patches/advapi32-CreateRestrictedToken/0001-ntdll-Implement-NtFilterToken.patch b/patches/advapi32-CreateRestrictedToken/0001-ntdll-Implement-NtFilterToken.patch
index af044c166..40d9143a9 100644
--- a/patches/advapi32-CreateRestrictedToken/0001-ntdll-Implement-NtFilterToken.patch
+++ b/patches/advapi32-CreateRestrictedToken/0001-ntdll-Implement-NtFilterToken.patch
@@ -1,27 +1,29 @@
-From 1eb8acd819f9eee8fdf154d0ef43881008265916 Mon Sep 17 00:00:00 2001
+From 5a8cf4ee45f472a7b455aba19fa0c2a0b0b87473 Mon Sep 17 00:00:00 2001
 From: =?UTF-8?q?Michael=20M=C3=BCller?= <michael@fds-team.de>
 Date: Fri, 4 Aug 2017 02:33:14 +0200
-Subject: ntdll: Implement NtFilterToken.
+Subject: [PATCH] ntdll: Implement NtFilterToken.
 
 ---
- dlls/ntdll/nt.c       | 59 ++++++++++++++++++++++++++++++++++++
+ dlls/ntdll/nt.c       | 59 ++++++++++++++++++++++++++++++
  dlls/ntdll/ntdll.spec |  2 +-
  include/winnt.h       |  5 +++
  include/winternl.h    |  1 +
+ server/named_pipe.c   |  2 +-
  server/process.c      |  2 +-
  server/protocol.def   | 10 ++++++
  server/security.h     |  4 ++-
- server/token.c        | 84 +++++++++++++++++++++++++++++++++++++++++++++++++--
- 8 files changed, 162 insertions(+), 5 deletions(-)
+ server/token.c        | 84 +++++++++++++++++++++++++++++++++++++++++--
+ 9 files changed, 163 insertions(+), 6 deletions(-)
 
 diff --git a/dlls/ntdll/nt.c b/dlls/ntdll/nt.c
-index c3f5df3..59a08de 100644
+index 2d2d9a7e3d8..ce6904dbcfb 100644
 --- a/dlls/ntdll/nt.c
 +++ b/dlls/ntdll/nt.c
-@@ -119,6 +119,65 @@ NTSTATUS WINAPI NtDuplicateToken(
+@@ -90,6 +90,65 @@ NTSTATUS WINAPI NtDuplicateToken(
+     return status;
  }
  
- /******************************************************************************
++/******************************************************************************
 + *  NtFilterToken        [NTDLL.@]
 + *  ZwFilterToken        [NTDLL.@]
 + */
@@ -80,15 +82,14 @@ index c3f5df3..59a08de 100644
 +    return status;
 +}
 +
-+/******************************************************************************
+ /******************************************************************************
   *  NtOpenProcessToken		[NTDLL.@]
   *  ZwOpenProcessToken		[NTDLL.@]
-  */
 diff --git a/dlls/ntdll/ntdll.spec b/dlls/ntdll/ntdll.spec
-index c260b0d..3c5e69c 100644
+index bd41da37af4..c65902a2adf 100644
 --- a/dlls/ntdll/ntdll.spec
 +++ b/dlls/ntdll/ntdll.spec
-@@ -176,7 +176,7 @@
+@@ -208,7 +208,7 @@
  # @ stub NtEnumerateSystemEnvironmentValuesEx
  @ stdcall NtEnumerateValueKey(long long long ptr long ptr)
  @ stub NtExtendSection
@@ -98,10 +99,10 @@ index c260b0d..3c5e69c 100644
  @ stdcall NtFlushBuffersFile(long ptr)
  @ stdcall NtFlushInstructionCache(long ptr long)
 diff --git a/include/winnt.h b/include/winnt.h
-index 16d96d8..4e238f9 100644
+index e1cf78420a6..da17fe3e330 100644
 --- a/include/winnt.h
 +++ b/include/winnt.h
-@@ -3904,6 +3904,11 @@ typedef enum _TOKEN_INFORMATION_CLASS {
+@@ -4221,6 +4221,11 @@ typedef enum _TOKEN_INFORMATION_CLASS {
  					TOKEN_ADJUST_SESSIONID | \
  					TOKEN_ADJUST_DEFAULT )
  
@@ -114,10 +115,10 @@ index 16d96d8..4e238f9 100644
  #define _SECURITY_DEFINED
  
 diff --git a/include/winternl.h b/include/winternl.h
-index c84e6d7..288f93e 100644
+index 10d109fede1..d2cf7d89ab5 100644
 --- a/include/winternl.h
 +++ b/include/winternl.h
-@@ -2303,6 +2303,7 @@ NTSYSAPI NTSTATUS  WINAPI NtDuplicateToken(HANDLE,ACCESS_MASK,POBJECT_ATTRIBUTES
+@@ -2749,6 +2749,7 @@ NTSYSAPI NTSTATUS  WINAPI NtDuplicateToken(HANDLE,ACCESS_MASK,POBJECT_ATTRIBUTES
  NTSYSAPI NTSTATUS  WINAPI NtEnumerateKey(HANDLE,ULONG,KEY_INFORMATION_CLASS,void *,DWORD,DWORD *);
  NTSYSAPI NTSTATUS  WINAPI NtEnumerateValueKey(HANDLE,ULONG,KEY_VALUE_INFORMATION_CLASS,PVOID,ULONG,PULONG);
  NTSYSAPI NTSTATUS  WINAPI NtExtendSection(HANDLE,PLARGE_INTEGER);
@@ -125,11 +126,24 @@ index c84e6d7..288f93e 100644
  NTSYSAPI NTSTATUS  WINAPI NtFindAtom(const WCHAR*,ULONG,RTL_ATOM*);
  NTSYSAPI NTSTATUS  WINAPI NtFlushBuffersFile(HANDLE,IO_STATUS_BLOCK*);
  NTSYSAPI NTSTATUS  WINAPI NtFlushInstructionCache(HANDLE,LPCVOID,SIZE_T);
+diff --git a/server/named_pipe.c b/server/named_pipe.c
+index b259abb8de4..4cd4d7dc4a8 100644
+--- a/server/named_pipe.c
++++ b/server/named_pipe.c
+@@ -1142,7 +1142,7 @@ static int pipe_server_ioctl( struct fd *fd, ioctl_code_t code, struct async *as
+         if (current->process->token) /* FIXME: use the client token */
+         {
+             struct token *token;
+-            if (!(token = token_duplicate( current->process->token, 0, SecurityImpersonation, NULL )))
++            if (!(token = token_duplicate( current->process->token, 0, SecurityImpersonation, NULL, NULL, 0, NULL, 0 )))
+                 return 0;
+             if (current->token) release_object( current->token );
+             current->token = token;
 diff --git a/server/process.c b/server/process.c
-index f8739d0..71d9d6d 100644
+index 5e587b28cbe..406167e825b 100644
 --- a/server/process.c
 +++ b/server/process.c
-@@ -566,7 +566,7 @@ struct thread *create_process( int fd, struct thread *parent_thread, int inherit
+@@ -577,7 +577,7 @@ struct process *create_process( int fd, struct process *parent, int inherit_all,
                                         : alloc_handle_table( process, 0 );
          /* Note: for security reasons, starting a new process does not attempt
           * to use the current impersonation token for the new process */
@@ -139,10 +153,10 @@ index f8739d0..71d9d6d 100644
      }
      if (!process->handles || !process->token) goto error;
 diff --git a/server/protocol.def b/server/protocol.def
-index 35824ae..6ee6d28 100644
+index 19dd9afb24d..43e0862433a 100644
 --- a/server/protocol.def
 +++ b/server/protocol.def
-@@ -3356,6 +3356,16 @@ enum caret_state
+@@ -3293,6 +3293,16 @@ enum caret_state
      obj_handle_t  new_handle; /* duplicated handle */
  @END
  
@@ -160,10 +174,10 @@ index 35824ae..6ee6d28 100644
      obj_handle_t    handle; /* handle to the token */
      unsigned int    desired_access; /* desired access to the object */
 diff --git a/server/security.h b/server/security.h
-index 873bbc6..bc4a8f6 100644
+index 606dbb2ab2c..6c337143c3d 100644
 --- a/server/security.h
 +++ b/server/security.h
-@@ -55,7 +55,9 @@ extern const PSID security_high_label_sid;
+@@ -56,7 +56,9 @@ extern const PSID security_high_label_sid;
  extern struct token *token_create_admin(void);
  extern int token_assign_label( struct token *token, PSID label );
  extern struct token *token_duplicate( struct token *src_token, unsigned primary,
@@ -175,10 +189,10 @@ index 873bbc6..bc4a8f6 100644
                                     const LUID_AND_ATTRIBUTES *reqprivs,
                                     unsigned int count, LUID_AND_ATTRIBUTES *usedprivs);
 diff --git a/server/token.c b/server/token.c
-index 0810a61..2f6a467 100644
+index 2fa95e17aaf..38a4c203d54 100644
 --- a/server/token.c
 +++ b/server/token.c
-@@ -276,6 +276,19 @@ static int acl_is_valid( const ACL *acl, data_size_t size )
+@@ -285,6 +285,19 @@ static int acl_is_valid( const ACL *acl, data_size_t size )
      return TRUE;
  }
  
@@ -198,7 +212,7 @@ index 0810a61..2f6a467 100644
  /* checks whether all members of a security descriptor fit inside the size
   * of memory specified */
  int sd_is_valid( const struct security_descriptor *sd, data_size_t size )
-@@ -619,8 +632,36 @@ static struct token *create_token( unsigned primary, const SID *user,
+@@ -626,8 +639,36 @@ static struct token *create_token( unsigned primary, const SID *user,
      return token;
  }
  
@@ -236,7 +250,7 @@ index 0810a61..2f6a467 100644
  {
      const luid_t *modified_id =
          primary || (impersonation_level == src_token->impersonation_level) ?
-@@ -656,6 +697,12 @@ struct token *token_duplicate( struct token *src_token, unsigned primary,
+@@ -663,6 +704,12 @@ struct token *token_duplicate( struct token *src_token, unsigned primary,
              return NULL;
          }
          memcpy( newgroup, group, size );
@@ -249,7 +263,7 @@ index 0810a61..2f6a467 100644
          list_add_tail( &token->groups, &newgroup->entry );
          if (src_token->primary_group == &group->sid)
          {
-@@ -667,11 +714,14 @@ struct token *token_duplicate( struct token *src_token, unsigned primary,
+@@ -674,11 +721,14 @@ struct token *token_duplicate( struct token *src_token, unsigned primary,
  
      /* copy privileges */
      LIST_FOR_EACH_ENTRY( privilege, &src_token->privileges, struct privilege, entry )
@@ -264,7 +278,7 @@ index 0810a61..2f6a467 100644
  
      if (sd) default_set_sd( &token->obj, sd, OWNER_SECURITY_INFORMATION | GROUP_SECURITY_INFORMATION |
                              DACL_SECURITY_INFORMATION | SACL_SECURITY_INFORMATION );
-@@ -1304,7 +1354,7 @@ DECL_HANDLER(duplicate_token)
+@@ -1311,7 +1361,7 @@ DECL_HANDLER(duplicate_token)
                                                       TOKEN_DUPLICATE,
                                                       &token_ops )))
      {
@@ -273,7 +287,7 @@ index 0810a61..2f6a467 100644
          if (token)
          {
              reply->new_handle = alloc_handle_no_access_check( current->process, token, req->access, objattr->attributes );
-@@ -1314,6 +1364,36 @@ DECL_HANDLER(duplicate_token)
+@@ -1321,6 +1371,36 @@ DECL_HANDLER(duplicate_token)
      }
  }
  
@@ -311,5 +325,5 @@ index 0810a61..2f6a467 100644
  DECL_HANDLER(check_token_privileges)
  {
 -- 
-2.7.4
+2.27.0
 
diff --git a/patches/advapi32-Token_Integrity_Level/0013-server-Correctly-assign-security-labels-for-tokens.patch b/patches/advapi32-Token_Integrity_Level/0013-server-Correctly-assign-security-labels-for-tokens.patch
index b880863da..1e1a9214d 100644
--- a/patches/advapi32-Token_Integrity_Level/0013-server-Correctly-assign-security-labels-for-tokens.patch
+++ b/patches/advapi32-Token_Integrity_Level/0013-server-Correctly-assign-security-labels-for-tokens.patch
@@ -1,20 +1,21 @@
-From 6d8fd34cabbcbc64062675be610fb8704fcdc3ec Mon Sep 17 00:00:00 2001
+From a8915b8ebd4c06b0216fc82d1ba8d958a677eccf Mon Sep 17 00:00:00 2001
 From: =?UTF-8?q?Michael=20M=C3=BCller?= <michael@fds-team.de>
 Date: Mon, 7 Aug 2017 03:33:26 +0200
 Subject: [PATCH] server: Correctly assign security labels for tokens.
 
 ---
- dlls/advapi32/tests/security.c | 21 ++++++++++-----------
- server/process.c               |  8 +-------
+ dlls/advapi32/tests/security.c | 21 +++++++++--------
+ server/named_pipe.c            |  2 +-
+ server/process.c               |  8 +------
  server/security.h              |  2 +-
- server/token.c                 | 41 ++++++++++++++++++++++++-----------------
- 4 files changed, 36 insertions(+), 36 deletions(-)
+ server/token.c                 | 41 ++++++++++++++++++++--------------
+ 5 files changed, 37 insertions(+), 37 deletions(-)
 
 diff --git a/dlls/advapi32/tests/security.c b/dlls/advapi32/tests/security.c
-index bf4161c..0610ec7 100644
+index 94f3ea4601a..ab572421a73 100644
 --- a/dlls/advapi32/tests/security.c
 +++ b/dlls/advapi32/tests/security.c
-@@ -7186,7 +7186,6 @@ static void test_token_security_descriptor(void)
+@@ -7105,7 +7105,6 @@ static void test_token_security_descriptor(void)
      defaulted = TRUE;
      ret = GetSecurityDescriptorDacl(sd2, &present, &acl2, &defaulted);
      ok(ret, "GetSecurityDescriptorDacl failed with error %u\n", GetLastError());
@@ -22,7 +23,7 @@ index bf4161c..0610ec7 100644
      ok(present, "DACL not present\n");
  
      if (present)
-@@ -7307,7 +7306,7 @@ static void test_token_security_descriptor(void)
+@@ -7226,7 +7225,7 @@ static void test_token_security_descriptor(void)
                  ok(ret, "GetAce failed with error %u\n", GetLastError());
                  ok(ace->Header.AceType == SYSTEM_MANDATORY_LABEL_ACE_TYPE,
                     "Unexpected ACE type %#x\n", ace->Header.AceType);
@@ -31,7 +32,7 @@ index bf4161c..0610ec7 100644
                     "Expected medium integrity level\n");
              }
  
-@@ -7360,8 +7359,8 @@ static void test_token_security_descriptor(void)
+@@ -7279,8 +7278,8 @@ static void test_token_security_descriptor(void)
              sacl = NULL;
              ret = GetSecurityDescriptorSacl(sd3, &present, &sacl, &defaulted);
              ok(ret, "GetSecurityDescriptorSacl failed with error %u\n", GetLastError());
@@ -42,7 +43,7 @@ index bf4161c..0610ec7 100644
  
              if (sacl)
              {
-@@ -7410,8 +7409,8 @@ static void test_token_security_descriptor(void)
+@@ -7329,8 +7328,8 @@ static void test_token_security_descriptor(void)
              sacl = NULL;
              ret = GetSecurityDescriptorSacl(sd3, &present, &sacl, &defaulted);
              ok(ret, "GetSecurityDescriptorSacl failed with error %u\n", GetLastError());
@@ -53,7 +54,7 @@ index bf4161c..0610ec7 100644
  
              if (sacl)
              {
-@@ -7475,8 +7474,8 @@ static void test_token_security_descriptor(void)
+@@ -7394,8 +7393,8 @@ static void test_token_security_descriptor(void)
  
          ret = GetSecurityDescriptorSacl(sd3, &present, &sacl, &defaulted);
          ok(ret, "GetSecurityDescriptorSacl failed with error %u\n", GetLastError());
@@ -64,7 +65,7 @@ index bf4161c..0610ec7 100644
  
          if (sacl)
          {
-@@ -7513,8 +7512,8 @@ static void test_token_security_descriptor(void)
+@@ -7432,8 +7431,8 @@ static void test_token_security_descriptor(void)
          sacl = NULL;
          ret = GetSecurityDescriptorSacl(sd3, &present, &sacl, &defaulted);
          ok(ret, "GetSecurityDescriptorSacl failed with error %u\n", GetLastError());
@@ -75,7 +76,7 @@ index bf4161c..0610ec7 100644
  
          if (sacl)
          {
-@@ -7732,7 +7731,7 @@ static void test_child_token_sd_medium(void)
+@@ -7652,7 +7651,7 @@ static void test_child_token_sd_medium(void)
      ok(ret, "GetAce failed with error %u\n", GetLastError());
      ok(ace_label->Header.AceType == SYSTEM_MANDATORY_LABEL_ACE_TYPE,
         "Unexpected ACE type %#x\n", ace_label->Header.AceType);
@@ -84,11 +85,24 @@ index bf4161c..0610ec7 100644
         "Expected medium integrity level\n");
  
      memset(buffer_integrity, 0, sizeof(buffer_integrity));
+diff --git a/server/named_pipe.c b/server/named_pipe.c
+index 4cd4d7dc4a8..06bf8402aea 100644
+--- a/server/named_pipe.c
++++ b/server/named_pipe.c
+@@ -1142,7 +1142,7 @@ static int pipe_server_ioctl( struct fd *fd, ioctl_code_t code, struct async *as
+         if (current->process->token) /* FIXME: use the client token */
+         {
+             struct token *token;
+-            if (!(token = token_duplicate( current->process->token, 0, SecurityImpersonation, NULL, NULL, 0, NULL, 0 )))
++            if (!(token = token_duplicate( current->process->token, 0, SecurityImpersonation, NULL, NULL, 0, NULL, 0, NULL )))
+                 return 0;
+             if (current->token) release_object( current->token );
+             current->token = token;
 diff --git a/server/process.c b/server/process.c
-index b7c9da3..250f777 100644
+index 31d5b96a25d..2c485831e33 100644
 --- a/server/process.c
 +++ b/server/process.c
-@@ -562,17 +562,11 @@ struct process *create_process( int fd, struct thread *parent_thread, int inheri
+@@ -577,17 +577,11 @@ struct process *create_process( int fd, struct process *parent, int inherit_all,
                                         : alloc_handle_table( process, 0 );
          /* Note: for security reasons, starting a new process does not attempt
           * to use the current impersonation token for the new process */
@@ -108,7 +122,7 @@ index b7c9da3..250f777 100644
      return process;
  
 diff --git a/server/security.h b/server/security.h
-index 32dfe5f..87377cc 100644
+index 32dfe5f8db9..87377ccd673 100644
 --- a/server/security.h
 +++ b/server/security.h
 @@ -59,7 +59,7 @@ extern int token_assign_label( struct token *token, PSID label );
@@ -121,10 +135,10 @@ index 32dfe5f..87377cc 100644
                                     const LUID_AND_ATTRIBUTES *reqprivs,
                                     unsigned int count, LUID_AND_ATTRIBUTES *usedprivs);
 diff --git a/server/token.c b/server/token.c
-index 5db97b4..bd251c7 100644
+index 2f466aa1b25..23bc1cc13f7 100644
 --- a/server/token.c
 +++ b/server/token.c
-@@ -668,7 +668,7 @@ static int filter_privilege( struct privilege *privilege, const LUID_AND_ATTRIBU
+@@ -675,7 +675,7 @@ static int filter_privilege( struct privilege *privilege, const LUID_AND_ATTRIBU
  struct token *token_duplicate( struct token *src_token, unsigned primary,
                                 int impersonation_level, const struct security_descriptor *sd,
                                 const LUID_AND_ATTRIBUTES *filter_privileges, unsigned int priv_count,
@@ -133,7 +147,7 @@ index 5db97b4..bd251c7 100644
  {
      const luid_t *modified_id =
          primary || (impersonation_level == src_token->impersonation_level) ?
-@@ -735,6 +735,12 @@ struct token *token_duplicate( struct token *src_token, unsigned primary,
+@@ -742,6 +742,12 @@ struct token *token_duplicate( struct token *src_token, unsigned primary,
      if (sd) default_set_sd( &token->obj, sd, OWNER_SECURITY_INFORMATION | GROUP_SECURITY_INFORMATION |
                              DACL_SECURITY_INFORMATION | SACL_SECURITY_INFORMATION );
  
@@ -146,7 +160,7 @@ index 5db97b4..bd251c7 100644
      return token;
  }
  
-@@ -906,6 +912,12 @@ struct token *token_create_admin( void )
+@@ -913,6 +919,12 @@ struct token *token_create_admin( void )
                                admin_source, NULL, -1, TokenElevationTypeFull, &high_label_sid );
          /* we really need a primary group */
          assert( token->primary_group );
@@ -159,7 +173,7 @@ index 5db97b4..bd251c7 100644
      }
  
      free( logon_sid );
-@@ -964,6 +976,12 @@ static struct token *token_create_limited( void )
+@@ -971,6 +983,12 @@ static struct token *token_create_limited( void )
                                admin_source, NULL, -1, TokenElevationTypeLimited, &medium_label_sid );
          /* we really need a primary group */
          assert( token->primary_group );
@@ -172,7 +186,7 @@ index 5db97b4..bd251c7 100644
      }
  
      free( logon_sid );
-@@ -1432,7 +1450,8 @@ DECL_HANDLER(duplicate_token)
+@@ -1439,7 +1457,8 @@ DECL_HANDLER(duplicate_token)
                                                       TOKEN_DUPLICATE,
                                                       &token_ops )))
      {
@@ -182,7 +196,7 @@ index 5db97b4..bd251c7 100644
          if (token)
          {
              unsigned int access = req->access ? req->access : get_handle_access( current->process, req->handle );
-@@ -1462,7 +1481,7 @@ DECL_HANDLER(filter_token)
+@@ -1469,7 +1488,7 @@ DECL_HANDLER(filter_token)
          group_count = get_sid_count( filter_groups, get_req_data_size() - priv_count * sizeof(LUID_AND_ATTRIBUTES) );
  
          token = token_duplicate( src_token, src_token->primary, src_token->impersonation_level, NULL,
@@ -191,7 +205,7 @@ index 5db97b4..bd251c7 100644
          if (token)
          {
              unsigned int access = get_handle_access( current->process, req->handle );
-@@ -1788,23 +1807,11 @@ DECL_HANDLER(set_token_default_dacl)
+@@ -1795,23 +1814,11 @@ DECL_HANDLER(set_token_default_dacl)
  DECL_HANDLER(create_token)
  {
      struct token *token;
@@ -218,5 +232,5 @@ index 5db97b4..bd251c7 100644
      }
  }
 -- 
-2.7.4
+2.27.0
 
diff --git a/patches/ntdll-DOS_Attributes/0004-ntdll-Implement-storing-DOS-attributes-in-NtCreateFi.patch b/patches/ntdll-DOS_Attributes/0004-ntdll-Implement-storing-DOS-attributes-in-NtCreateFi.patch
index 72f4a4739..cae68f416 100644
--- a/patches/ntdll-DOS_Attributes/0004-ntdll-Implement-storing-DOS-attributes-in-NtCreateFi.patch
+++ b/patches/ntdll-DOS_Attributes/0004-ntdll-Implement-storing-DOS-attributes-in-NtCreateFi.patch
@@ -1,14 +1,14 @@
-From 1deb289cab2a4271ec84b4636e39a467bd52b117 Mon Sep 17 00:00:00 2001
+From 1eb9ac00c49041448f53be5a6b4097222567a8af Mon Sep 17 00:00:00 2001
 From: "Erich E. Hoover" <erich.e.hoover@gmail.com>
 Date: Wed, 20 Aug 2014 15:28:00 -0600
-Subject: [PATCH 3/7] ntdll: Implement storing DOS attributes in NtCreateFile.
+Subject: [PATCH] ntdll: Implement storing DOS attributes in NtCreateFile.
 
 ---
- dlls/ntdll/tests/directory.c | 24 ++++++------
- dlls/ntdll/unix/file.c       | 74 +++++++++++++++++++++++-------------
- include/wine/port.h          |  2 +
- libs/port/xattr.c            | 20 ++++++++++
- 4 files changed, 81 insertions(+), 39 deletions(-)
+ dlls/ntdll/tests/directory.c | 24 +++++++++++-------------
+ dlls/ntdll/unix/file.c       | 25 ++++++++++++++++++++++++-
+ include/wine/port.h          |  2 ++
+ libs/port/xattr.c            | 20 ++++++++++++++++++++
+ 4 files changed, 57 insertions(+), 14 deletions(-)
 
 diff --git a/dlls/ntdll/tests/directory.c b/dlls/ntdll/tests/directory.c
 index 248ed99ab20..e0f4debc624 100644
@@ -60,10 +60,10 @@ index 248ed99ab20..e0f4debc624 100644
          }
          testfiles[i].nfound++;
 diff --git a/dlls/ntdll/unix/file.c b/dlls/ntdll/unix/file.c
-index d1f1b8c8f30..32653a110a2 100644
+index f1176717819..aee464fbd16 100644
 --- a/dlls/ntdll/unix/file.c
 +++ b/dlls/ntdll/unix/file.c
-@@ -3580,6 +3580,20 @@ void CDECL set_show_dot_files( BOOL enable )
+@@ -3595,6 +3595,20 @@ void CDECL set_show_dot_files( BOOL enable )
      show_dot_files = enable;
  }
  
@@ -83,8 +83,8 @@ index d1f1b8c8f30..32653a110a2 100644
 +}
  
  /******************************************************************************
-  *              NtCreateFile   (NTDLL.@)
-@@ -3589,6 +3603,10 @@ NTSTATUS WINAPI NtCreateFile( HANDLE *handle, ACCESS_MASK access, OBJECT_ATTRIBU
+  *              open_unix_file
+@@ -3640,6 +3654,10 @@ NTSTATUS WINAPI NtCreateFile( HANDLE *handle, ACCESS_MASK access, OBJECT_ATTRIBU
                                ULONG attributes, ULONG sharing, ULONG disposition,
                                ULONG options, void *ea_buffer, ULONG ea_length )
  {
@@ -95,68 +95,15 @@ index d1f1b8c8f30..32653a110a2 100644
      char *unix_name;
      BOOL created = FALSE;
  
-@@ -3631,36 +3649,34 @@ NTSTATUS WINAPI NtCreateFile( HANDLE *handle, ACCESS_MASK access, OBJECT_ATTRIBU
-         io->u.Status = STATUS_SUCCESS;
-     }
- 
--    if (io->u.Status == STATUS_SUCCESS)
-+    if (io->u.Status != STATUS_SUCCESS)
+@@ -3686,7 +3704,6 @@ NTSTATUS WINAPI NtCreateFile( HANDLE *handle, ACCESS_MASK access, OBJECT_ATTRIBU
      {
--        static UNICODE_STRING empty_string;
--        OBJECT_ATTRIBUTES unix_attr = *attr;
--        data_size_t len;
--        struct object_attributes *objattr;
-+        WARN("%s not found (%x)\n", debugstr_us(attr->ObjectName), io->u.Status );
-+        return io->u.Status;
-+    }
- 
--        unix_attr.ObjectName = &empty_string;  /* we send the unix name instead */
--        if ((io->u.Status = alloc_object_attributes( &unix_attr, &objattr, &len )))
--        {
--            RtlFreeHeap( GetProcessHeap(), 0, unix_name );
--            return io->u.Status;
--        }
--        SERVER_START_REQ( create_file )
--        {
--            req->access     = access;
--            req->sharing    = sharing;
--            req->create     = disposition;
--            req->options    = options;
--            req->attrs      = attributes;
--            wine_server_add_data( req, objattr, len );
--            wine_server_add_data( req, unix_name, strlen(unix_name) );
--            io->u.Status = wine_server_call( req );
--            *handle = wine_server_ptr_handle( reply->handle );
--        }
--        SERVER_END_REQ;
--        free( objattr );
-+    unix_attr = *attr;
-+    unix_attr.ObjectName = &empty_string;  /* we send the unix name instead */
-+    if ((io->u.Status = alloc_object_attributes( &unix_attr, &objattr, &len )))
-+    {
-         RtlFreeHeap( GetProcessHeap(), 0, unix_name );
-+        return io->u.Status;
-+    }
-+
-+    SERVER_START_REQ( create_file )
-+    {
-+        req->access     = access;
-+        req->sharing    = sharing;
-+        req->create     = disposition;
-+        req->options    = options;
-+        req->attrs      = attributes;
-+        wine_server_add_data( req, objattr, len );
-+        wine_server_add_data( req, unix_name, strlen(unix_name) );
-+        io->u.Status = wine_server_call( req );
-+        *handle = wine_server_ptr_handle( reply->handle );
+         io->u.Status = open_unix_file( handle, unix_name, access, attr, attributes,
+                                        sharing, disposition, options, ea_buffer, ea_length );
+-        RtlFreeHeap( GetProcessHeap(), 0, unix_name );
      }
--    else WARN( "%s not found (%x)\n", debugstr_us(attr->ObjectName), io->u.Status );
-+    SERVER_END_REQ;
-+    free( objattr );
+     else WARN( "%s not found (%x)\n", debugstr_us(attr->ObjectName), io->u.Status );
  
-     if (io->u.Status == STATUS_SUCCESS)
-     {
-@@ -3682,6 +3698,11 @@ NTSTATUS WINAPI NtCreateFile( HANDLE *handle, ACCESS_MASK access, OBJECT_ATTRIBU
+@@ -3710,6 +3727,11 @@ NTSTATUS WINAPI NtCreateFile( HANDLE *handle, ACCESS_MASK access, OBJECT_ATTRIBU
              io->Information = FILE_OVERWRITTEN;
              break;
          }
@@ -168,7 +115,7 @@ index d1f1b8c8f30..32653a110a2 100644
      }
      else if (io->u.Status == STATUS_TOO_MANY_OPENED_FILES)
      {
-@@ -3689,6 +3710,7 @@ NTSTATUS WINAPI NtCreateFile( HANDLE *handle, ACCESS_MASK access, OBJECT_ATTRIBU
+@@ -3717,6 +3739,7 @@ NTSTATUS WINAPI NtCreateFile( HANDLE *handle, ACCESS_MASK access, OBJECT_ATTRIBU
          if (!once++) ERR_(winediag)( "Too many open files, ulimit -n probably needs to be increased\n" );
      }
  
diff --git a/patches/ntdll-DeviceType_Systemroot/0001-ntdll-Don-t-translate-Unix-virtual-disks-to-FILE_DEV.patch b/patches/ntdll-DeviceType_Systemroot/0001-ntdll-Don-t-translate-Unix-virtual-disks-to-FILE_DEV.patch
deleted file mode 100644
index 726aa6d16..000000000
--- a/patches/ntdll-DeviceType_Systemroot/0001-ntdll-Don-t-translate-Unix-virtual-disks-to-FILE_DEV.patch
+++ /dev/null
@@ -1,57 +0,0 @@
-From 835c102cf1c8edf8216b12ea98846cb1e3b40219 Mon Sep 17 00:00:00 2001
-From: Zebediah Figura <z.figura12@gmail.com>
-Date: Fri, 29 May 2015 19:57:22 +0200
-Subject: [PATCH] ntdll: Don't translate Unix virtual disks to
- FILE_DEVICE_VIRTUAL_DISK.
-
-Wine-Bug: https://bugs.winehq.org/show_bug.cgi?id=36546
-Signed-off-by: Zebediah Figura <z.figura12@gmail.com>
----
-Despite my sign-off, I don't profess to hold an opinion on whether this bug
-should be solved, but multiple users have requested this behaviour, and it
-seems not wholly unreasonable. I'm submitting this patch so that the question
-at least doesn't languish on bugzilla forever.
-
-This patch was tested with FutureMark's SystemInfo version 4.28; it refuses to
-install in a WINEPREFIX in tmpfs without this patch, and succeeds with it.
-
- dlls/ntdll/unix/file.c | 12 ++++++++----
- 1 file changed, 8 insertions(+), 4 deletions(-)
-
-diff --git a/dlls/ntdll/unix/file.c b/dlls/ntdll/unix/file.c
-index a0ad361fcbb..a28cfe9818f 100644
---- a/dlls/ntdll/unix/file.c
-+++ b/dlls/ntdll/unix/file.c
-@@ -6001,12 +6001,15 @@ static NTSTATUS get_device_info( int fd, FILE_FS_DEVICE_INFORMATION *info )
-             info->DeviceType = FILE_DEVICE_NETWORK_FILE_SYSTEM;
-             info->Characteristics |= FILE_REMOTE_DEVICE;
-             break;
--        case 0x01021994:  /* tmpfs */
--        case 0x28cd3d45:  /* cramfs */
-         case 0x1373:      /* devfs */
-         case 0x9fa0:      /* procfs */
-             info->DeviceType = FILE_DEVICE_VIRTUAL_DISK;
-             break;
-+        case 0x01021994:  /* tmpfs */
-+        case 0x28cd3d45:  /* cramfs */
-+            /* Don't map these to FILE_DEVICE_VIRTUAL_DISK by default. Virtual
-+             * filesystems are rare on Windows, and some programs refuse to
-+             * recognize them as valid. */
-         default:
-             info->DeviceType = FILE_DEVICE_DISK_FILE_SYSTEM;
-             break;
-@@ -6050,8 +6053,9 @@ static NTSTATUS get_device_info( int fd, FILE_FS_DEVICE_INFORMATION *info )
-                 info->Characteristics |= FILE_REMOVABLE_MEDIA;
-                 break;
-             case DKC_MD:
--                info->DeviceType = FILE_DEVICE_VIRTUAL_DISK;
--                break;
-+            /* Don't map these to FILE_DEVICE_VIRTUAL_DISK by default. Virtual
-+             * filesystems are rare on Windows, and some programs refuse to
-+             * recognize them as valid. */
-             default:
-                 info->DeviceType = FILE_DEVICE_DISK_FILE_SYSTEM;
-             }
--- 
-2.27.0
-
diff --git a/patches/ntdll-DeviceType_Systemroot/definition b/patches/ntdll-DeviceType_Systemroot/definition
deleted file mode 100644
index d7368f666..000000000
--- a/patches/ntdll-DeviceType_Systemroot/definition
+++ /dev/null
@@ -1 +0,0 @@
-Fixes: [36546] Return fake device type when systemroot is located on virtual disk
diff --git a/patches/ntdll-NtDevicePath/0001-ntdll-Implement-opening-files-through-nt-device-path.patch b/patches/ntdll-NtDevicePath/0001-ntdll-Implement-opening-files-through-nt-device-path.patch
index 82a0918c7..c0d692895 100644
--- a/patches/ntdll-NtDevicePath/0001-ntdll-Implement-opening-files-through-nt-device-path.patch
+++ b/patches/ntdll-NtDevicePath/0001-ntdll-Implement-opening-files-through-nt-device-path.patch
@@ -1,4 +1,4 @@
-From 0d4ebc66e01e42acef9db63872d38abc789d83c5 Mon Sep 17 00:00:00 2001
+From 7ad6b055c6f24d9dc193f9d80e2f5921f4f7e67c Mon Sep 17 00:00:00 2001
 From: =?UTF-8?q?Michael=20M=C3=BCller?= <michael@fds-team.de>
 Date: Fri, 26 May 2017 05:17:17 +0200
 Subject: [PATCH] ntdll: Implement opening files through nt device paths.
@@ -63,10 +63,10 @@ index 6164b0c4bde..6610edbd042 100644
  
  static void open_file_test(void)
 diff --git a/dlls/ntdll/unix/file.c b/dlls/ntdll/unix/file.c
-index 3c4670e114c..6b0dbaa7b3d 100644
+index aae715521a5..7fcb9f23460 100644
 --- a/dlls/ntdll/unix/file.c
 +++ b/dlls/ntdll/unix/file.c
-@@ -3279,7 +3279,7 @@ static NTSTATUS nt_to_unix_file_name_attr( const OBJECT_ATTRIBUTES *attr, char *
+@@ -3294,7 +3294,7 @@ static NTSTATUS nt_to_unix_file_name_attr( const OBJECT_ATTRIBUTES *attr, char *
   * element doesn't have to exist; in that case STATUS_NO_SUCH_FILE is
   * returned, but the unix name is still filled in properly.
   */
@@ -75,7 +75,7 @@ index 3c4670e114c..6b0dbaa7b3d 100644
  {
      static const WCHAR unixW[] = {'u','n','i','x'};
      static const WCHAR pipeW[] = {'p','i','p','e'};
-@@ -3417,6 +3417,126 @@ NTSTATUS CDECL wine_nt_to_unix_file_name( const UNICODE_STRING *nameW, char *nam
+@@ -3432,6 +3432,126 @@ NTSTATUS CDECL wine_nt_to_unix_file_name( const UNICODE_STRING *nameW, char *nam
      return status;
  }
  
@@ -109,7 +109,7 @@ index 3c4670e114c..6b0dbaa7b3d 100644
 +static NTSTATUS nt_to_dos_device( WCHAR *name, size_t length, WCHAR *device_ret )
 +{
 +    static const WCHAR dosdevicesW[] = {'\\','D','o','s','D','e','v','i','c','e','s',0};
-+    UNICODE_STRING dosdevW;
++    UNICODE_STRING dosdevW = { sizeof(dosdevicesW) - sizeof(WCHAR), sizeof(dosdevicesW), (WCHAR *)dosdevicesW };
 +    WCHAR symlinkW[MAX_DIR_ENTRY_LEN];
 +    OBJECT_ATTRIBUTES attr;
 +    NTSTATUS status;
@@ -126,7 +126,6 @@ index 3c4670e114c..6b0dbaa7b3d 100644
 +    attr.SecurityDescriptor = NULL;
 +    attr.SecurityQualityOfService = NULL;
 +
-+    RtlInitUnicodeString( &dosdevW, dosdevicesW );
 +    status = NtOpenDirectoryObject( &handle, FILE_LIST_DIRECTORY, &attr );
 +    if (status) return STATUS_BAD_DEVICE_TYPE;
 +
@@ -193,7 +192,8 @@ index 3c4670e114c..6b0dbaa7b3d 100644
 +    memcpy( ptr, nameW->Buffer + offset, nameW->Length - offset * sizeof(WCHAR) );
 +    ptr[ nameW->Length / sizeof(WCHAR) - offset ] = 0;
 +
-+    RtlInitUnicodeString( &dospathW, name );
++    dospathW.Buffer = name;
++    dospathW.Length = wcslen( name ) * sizeof(WCHAR);
 +    status = nt_to_unix_file_name_internal( &dospathW, unix_name_ret, disposition );
 +
 +    RtlFreeHeap( GetProcessHeap(), 0, name );
diff --git a/patches/ntdll-NtQueryVirtualMemory/definition b/patches/ntdll-NtQueryVirtualMemory/definition
index ba2685333..8ee7f1df5 100644
--- a/patches/ntdll-NtQueryVirtualMemory/definition
+++ b/patches/ntdll-NtQueryVirtualMemory/definition
@@ -2,3 +2,6 @@ Fixes: [23999] Implement MemorySectionName class in NtQueryVirtualMemory
 Fixes: [27248] Implement K32GetMappedFileName
 Depends: ntdll-NtDevicePath
 Depends: ntdll-ForceBottomUpAlloc
+# This uses RtlDosPathNameToNtPathName_U (and RtlInitUnicodeString) from
+# ntdll.so, and needs to stop. Defer this until after we have a conversation
+# about volumes.
\ No newline at end of file
diff --git a/patches/ntdll-SystemModuleInformation/0001-ntdll-Don-t-call-LdrQueryProcessModuleInformation-in.patch b/patches/ntdll-SystemModuleInformation/0001-ntdll-Don-t-call-LdrQueryProcessModuleInformation-in.patch
deleted file mode 100644
index d68b212d9..000000000
--- a/patches/ntdll-SystemModuleInformation/0001-ntdll-Don-t-call-LdrQueryProcessModuleInformation-in.patch
+++ /dev/null
@@ -1,50 +0,0 @@
-From e2f505d4c63dde39dbbcc215a7801020b04e3c25 Mon Sep 17 00:00:00 2001
-From: Zebediah Figura <z.figura12@gmail.com>
-Date: Mon, 6 Aug 2018 21:32:56 -0500
-Subject: [PATCH] ntdll: Don't call LdrQueryProcessModuleInformation in
- NtQuerySystemInformation(SystemModuleInformation).
-
-Based on a patch by Andrew Wesie.
-
-This is simply incorrect; this function should only list kernel drivers.
-
-This makes the anticheat engine in League of Legends 8.15+ happy.
-
-Wine-Bug: https://bugs.winehq.org/show_bug.cgi?id=45550
----
- dlls/ntdll/unix/system.c | 19 ++++++++++++++++---
- 1 file changed, 16 insertions(+), 3 deletions(-)
-
-diff --git a/dlls/ntdll/unix/system.c b/dlls/ntdll/unix/system.c
-index 68de16b7e5b..a57b040c533 100644
---- a/dlls/ntdll/unix/system.c
-+++ b/dlls/ntdll/unix/system.c
-@@ -1930,9 +1930,22 @@ NTSTATUS WINAPI NtQuerySystemInformation( SYSTEM_INFORMATION_CLASS class,
-     }
- 
-     case SystemModuleInformation:
--        /* FIXME: should be system-wide */
--        if (!info) ret = STATUS_ACCESS_VIOLATION;
--        else ret = LdrQueryProcessModuleInformation( info, size, &len );
-+        if (!info)
-+            ret = STATUS_ACCESS_VIOLATION;
-+        else if (size < FIELD_OFFSET( SYSTEM_MODULE_INFORMATION, Modules[1] ))
-+        {
-+            len = FIELD_OFFSET( SYSTEM_MODULE_INFORMATION, Modules[1] );
-+            ret = STATUS_INFO_LENGTH_MISMATCH;
-+        }
-+        else
-+        {
-+            SYSTEM_MODULE_INFORMATION *smi = info;
-+
-+            FIXME("returning fake driver list\n");
-+            smi->ModulesCount = 1;
-+            memset(&smi->Modules[0], 0, sizeof(smi->Modules[0]));
-+            ret = STATUS_SUCCESS;
-+        }
-         break;
- 
-     case SystemHandleInformation:
--- 
-2.27.0
-
diff --git a/patches/ntdll-SystemModuleInformation/0002-ntdll-Return-ntdll.dll-as-the-first-entry-for-System.patch b/patches/ntdll-SystemModuleInformation/0002-ntdll-Return-ntdll.dll-as-the-first-entry-for-System.patch
deleted file mode 100644
index e88a05231..000000000
--- a/patches/ntdll-SystemModuleInformation/0002-ntdll-Return-ntdll.dll-as-the-first-entry-for-System.patch
+++ /dev/null
@@ -1,59 +0,0 @@
-From fb6d3997445d70ea0744205f47ede1d3be8c50c1 Mon Sep 17 00:00:00 2001
-From: Andrew Wesie <awesie@gmail.com>
-Date: Fri, 12 Apr 2019 20:04:03 -0500
-Subject: [PATCH] ntdll: Return ntdll.dll as the first entry for
- SystemModuleInformation.
-
----
- dlls/ntdll/unix/system.c | 28 +++++++++++++++++++++++++++-
- 1 file changed, 27 insertions(+), 1 deletion(-)
-
-diff --git a/dlls/ntdll/unix/system.c b/dlls/ntdll/unix/system.c
-index 0aa55a69ba1..60a92f39a7c 100644
---- a/dlls/ntdll/unix/system.c
-+++ b/dlls/ntdll/unix/system.c
-@@ -1630,6 +1630,32 @@ static void get_performance_info( SYSTEM_PERFORMANCE_INFORMATION *info )
-     info->TotalCommitLimit    = (totalram + totalswap) / page_size;
- }
- 
-+static void get_ntdll_system_module(SYSTEM_MODULE *sm)
-+{
-+    char *ptr;
-+    ANSI_STRING str;
-+    PLIST_ENTRY entry;
-+    LDR_DATA_TABLE_ENTRY *mod;
-+
-+    /* The first entry must be ntdll. */
-+    entry = NtCurrentTeb()->Peb->LdrData->InLoadOrderModuleList.Flink;
-+    mod = CONTAINING_RECORD(entry, LDR_DATA_TABLE_ENTRY, InLoadOrderLinks);
-+
-+    sm->Section = 0;
-+    sm->MappedBaseAddress = 0;
-+    sm->ImageBaseAddress = mod->DllBase;
-+    sm->ImageSize = mod->SizeOfImage;
-+    sm->Flags = mod->Flags;
-+    sm->LoadOrderIndex = 0;
-+    sm->InitOrderIndex = 0;
-+    sm->LoadCount = 0;
-+    str.Length = 0;
-+    str.MaximumLength = MAXIMUM_FILENAME_LENGTH;
-+    str.Buffer = (char*)sm->Name;
-+    RtlUnicodeStringToAnsiString(&str, &mod->FullDllName, FALSE);
-+    ptr = strrchr(str.Buffer, '\\');
-+    sm->NameOffset = (ptr != NULL) ? (ptr - str.Buffer + 1) : 0;
-+}
- 
- /* calculate the mday of dst change date, so that for instance Sun 5 Oct 2007
-  * (last Sunday in October of 2007) becomes Sun Oct 28 2007
-@@ -2319,7 +2345,7 @@ NTSTATUS WINAPI NtQuerySystemInformation( SYSTEM_INFORMATION_CLASS class,
- 
-             FIXME("returning fake driver list\n");
-             smi->ModulesCount = 1;
--            memset(&smi->Modules[0], 0, sizeof(smi->Modules[0]));
-+            get_ntdll_system_module(&smi->Modules[0]);
-             ret = STATUS_SUCCESS;
-         }
-         break;
--- 
-2.27.0
-
diff --git a/patches/ntdll-SystemModuleInformation/0003-ntdll-Add-stub-for-NtQuerySystemInformation-SystemMo.patch b/patches/ntdll-SystemModuleInformation/0003-ntdll-Add-stub-for-NtQuerySystemInformation-SystemMo.patch
index 5657b038f..d844aafec 100644
--- a/patches/ntdll-SystemModuleInformation/0003-ntdll-Add-stub-for-NtQuerySystemInformation-SystemMo.patch
+++ b/patches/ntdll-SystemModuleInformation/0003-ntdll-Add-stub-for-NtQuerySystemInformation-SystemMo.patch
@@ -1,52 +1,72 @@
-From ab068a620223a6566c2a1d089fb4583992359bd2 Mon Sep 17 00:00:00 2001
-From: Andrew Wesie <awesie@gmail.com>
+From 6c3862d1e2d08c9a82623e0d4ab3bb123a3efde0 Mon Sep 17 00:00:00 2001
+From: Zebediah Figura <z.figura12@gmail.com>
 Date: Fri, 12 Apr 2019 20:06:08 -0500
 Subject: [PATCH] ntdll: Add stub for
  NtQuerySystemInformation(SystemModuleInformationEx).
 
+Based on a patch by Andrew Wesie.
 ---
- dlls/ntdll/unix/system.c | 22 ++++++++++++++++++++++
+ dlls/ntdll/unix/system.c | 41 ++++++++++++++++++++++++++++++++++++++++
  include/winternl.h       |  9 +++++++++
- 2 files changed, 31 insertions(+)
+ 2 files changed, 50 insertions(+)
 
 diff --git a/dlls/ntdll/unix/system.c b/dlls/ntdll/unix/system.c
-index f118db8a89f..eecde7dcf97 100644
+index c3dca7ffe28..1260326bc4b 100644
 --- a/dlls/ntdll/unix/system.c
 +++ b/dlls/ntdll/unix/system.c
-@@ -1974,6 +1974,28 @@ NTSTATUS WINAPI NtQuerySystemInformation( SYSTEM_INFORMATION_CLASS class,
-         }
+@@ -2328,6 +2328,47 @@ NTSTATUS WINAPI NtQuerySystemInformation( SYSTEM_INFORMATION_CLASS class,
          break;
+     }
  
 +    case SystemModuleInformationEx:
-+        if (!info)
-+            ret = STATUS_ACCESS_VIOLATION;
-+        else if (size < sizeof(SYSTEM_MODULE_INFORMATION_EX))
++    {
++        /* FIXME: return some fake info for now */
++        static const char *fake_modules[] =
 +        {
-+            len = sizeof(SYSTEM_MODULE_INFORMATION_EX);
-+            ret = STATUS_INFO_LENGTH_MISMATCH;
-+        }
++            "\\SystemRoot\\system32\\ntoskrnl.exe",
++            "\\SystemRoot\\system32\\hal.dll",
++            "\\SystemRoot\\system32\\drivers\\mountmgr.sys"
++        };
++
++        if (!info) ret = STATUS_ACCESS_VIOLATION;
 +        else
 +        {
-+            SYSTEM_MODULE_INFORMATION_EX *info = info;
++            ULONG i;
++
++            for (i = 0; i < ARRAY_SIZE(fake_modules); i++)
++            {
++                SYSTEM_MODULE_INFORMATION_EX *smi = (SYSTEM_MODULE_INFORMATION_EX *)((char *)info + len);
++
++                len += sizeof(SYSTEM_MODULE_INFORMATION_EX);
++                if (len > size)
++                {
++                    ret = STATUS_INFO_LENGTH_MISMATCH;
++                    continue;
++                }
 +
-+            FIXME("info_class SystemModuleInformationEx stub!\n");
-+            get_ntdll_system_module(&info->BaseInfo);
-+            info->NextOffset = 0;
-+            info->ImageCheckSum = 0;
-+            info->TimeDateStamp = 0;
-+            info->DefaultBase = info->BaseInfo.ImageBaseAddress;
-+            ret = STATUS_SUCCESS;
++                memset(smi, 0, sizeof(*smi));
++                if (i < ARRAY_SIZE(fake_modules) - 1)
++                    smi->NextOffset = len;
++                smi->BaseInfo.ImageBaseAddress = (char *)0x10000000 + 0x200000 * i;
++                smi->BaseInfo.ImageSize = 0x200000;
++                smi->BaseInfo.LoadOrderIndex = i;
++                smi->BaseInfo.LoadCount = 1;
++                strcpy( (char *)smi->BaseInfo.Name, fake_modules[i] );
++                smi->BaseInfo.NameOffset = strrchr( fake_modules[i], '\\' ) - fake_modules[i] + 1;
++                smi->DefaultBase = smi->BaseInfo.ImageBaseAddress;
++            }
 +        }
 +        break;
++    }
 +
      case SystemHandleInformation:
      {
          struct handle_info *handle_info;
 diff --git a/include/winternl.h b/include/winternl.h
-index 3ff15f28c15..879b0931fc5 100644
+index 10d109fede1..b91af1d2dbe 100644
 --- a/include/winternl.h
 +++ b/include/winternl.h
-@@ -2469,6 +2469,15 @@ typedef struct _SYSTEM_MODULE_INFORMATION
+@@ -2484,6 +2484,15 @@ typedef struct _SYSTEM_MODULE_INFORMATION
  #define PROCESS_CREATE_FLAGS_SUSPENDED              0x00000200
  #define PROCESS_CREATE_FLAGS_EXTENDED_UNKNOWN       0x00000400
  
diff --git a/patches/patchinstall.sh b/patches/patchinstall.sh
index 00a070030..9092fc243 100755
--- a/patches/patchinstall.sh
+++ b/patches/patchinstall.sh
@@ -166,7 +166,6 @@ patch_enable_all ()
 	enable_ntdll_CriticalSection="$1"
 	enable_ntdll_DOS_Attributes="$1"
 	enable_ntdll_Dealloc_Thread_Stack="$1"
-	enable_ntdll_DeviceType_Systemroot="$1"
 	enable_ntdll_Exception="$1"
 	enable_ntdll_FLS_Callbacks="$1"
 	enable_ntdll_FileDispositionInformation="$1"
@@ -587,9 +586,6 @@ patch_enable ()
 		ntdll-Dealloc_Thread_Stack)
 			enable_ntdll_Dealloc_Thread_Stack="$2"
 			;;
-		ntdll-DeviceType_Systemroot)
-			enable_ntdll_DeviceType_Systemroot="$2"
-			;;
 		ntdll-Exception)
 			enable_ntdll_Exception="$2"
 			;;
@@ -1816,7 +1812,7 @@ fi
 # |
 # | Modified files:
 # |   *	dlls/kernelbase/security.c, dlls/ntdll/nt.c, dlls/ntdll/ntdll.spec, include/winnt.h, include/winternl.h,
-# | 	server/process.c, server/protocol.def, server/security.h, server/token.c
+# | 	server/named_pipe.c, server/process.c, server/protocol.def, server/security.h, server/token.c
 # |
 if test "$enable_advapi32_CreateRestrictedToken" -eq 1; then
 	patch_apply advapi32-CreateRestrictedToken/0001-ntdll-Implement-NtFilterToken.patch
@@ -1854,8 +1850,8 @@ fi
 # |   *	configure.ac, dlls/advapi32/tests/Makefile.in, dlls/advapi32/tests/security.c, dlls/kernelbase/process.c,
 # | 	dlls/ntdll/loader.c, dlls/ntdll/nt.c, dlls/ntdll/ntdll.spec, dlls/ntdll/ntdll_misc.h, dlls/ntdll/process.c,
 # | 	dlls/ntdll/unix/process.c, dlls/shell32/shlexec.c, dlls/user32/win.c, programs/runas/Makefile.in,
-# | 	programs/runas/runas.c, programs/runas/runas.h, programs/runas/runas.rc, server/process.c, server/process.h,
-# | 	server/protocol.def, server/request.c, server/security.h, server/token.c
+# | 	programs/runas/runas.c, programs/runas/runas.h, programs/runas/runas.rc, server/named_pipe.c, server/process.c,
+# | 	server/process.h, server/protocol.def, server/request.c, server/security.h, server/token.c
 # |
 if test "$enable_advapi32_Token_Integrity_Level" -eq 1; then
 	patch_apply advapi32-Token_Integrity_Level/0001-advapi32-tests-Extend-security-label-token-integrity.patch
@@ -3491,21 +3487,6 @@ if test "$enable_ntdll_Dealloc_Thread_Stack" -eq 1; then
 	) >> "$patchlist"
 fi
 
-# Patchset ntdll-DeviceType_Systemroot
-# |
-# | This patchset fixes the following Wine bugs:
-# |   *	[#36546] Return fake device type when systemroot is located on virtual disk
-# |
-# | Modified files:
-# |   *	dlls/ntdll/unix/file.c
-# |
-if test "$enable_ntdll_DeviceType_Systemroot" -eq 1; then
-	patch_apply ntdll-DeviceType_Systemroot/0001-ntdll-Don-t-translate-Unix-virtual-disks-to-FILE_DEV.patch
-	(
-		printf '%s\n' '+    { "Zebediah Figura", "ntdll: Don'\''t translate Unix virtual disks to FILE_DEVICE_VIRTUAL_DISK.", 1 },';
-	) >> "$patchlist"
-fi
-
 # Patchset ntdll-Exception
 # |
 # | This patchset fixes the following Wine bugs:
@@ -3886,13 +3867,9 @@ fi
 # |   *	dlls/ntdll/unix/system.c, include/winternl.h
 # |
 if test "$enable_ntdll_SystemModuleInformation" -eq 1; then
-	patch_apply ntdll-SystemModuleInformation/0001-ntdll-Don-t-call-LdrQueryProcessModuleInformation-in.patch
-	patch_apply ntdll-SystemModuleInformation/0002-ntdll-Return-ntdll.dll-as-the-first-entry-for-System.patch
 	patch_apply ntdll-SystemModuleInformation/0003-ntdll-Add-stub-for-NtQuerySystemInformation-SystemMo.patch
 	(
-		printf '%s\n' '+    { "Zebediah Figura", "ntdll: Don'\''t call LdrQueryProcessModuleInformation in NtQuerySystemInformation(SystemModuleInformation).", 1 },';
-		printf '%s\n' '+    { "Andrew Wesie", "ntdll: Return ntdll.dll as the first entry for SystemModuleInformation.", 1 },';
-		printf '%s\n' '+    { "Andrew Wesie", "ntdll: Add stub for NtQuerySystemInformation(SystemModuleInformationEx).", 1 },';
+		printf '%s\n' '+    { "Zebediah Figura", "ntdll: Add stub for NtQuerySystemInformation(SystemModuleInformationEx).", 1 },';
 	) >> "$patchlist"
 fi
 
diff --git a/patches/ntdll-DOS_Attributes/0004-ntdll-Implement-storing-DOS-attributes-in-NtCreateFi.patch b/patches/ntdll-DOS_Attributes/0004-ntdll-Implement-storing-DOS-attributes-in-NtCreateFi.patch
index 7fdc0af23..72f4a4739 100644
--- a/patches/ntdll-DOS_Attributes/0004-ntdll-Implement-storing-DOS-attributes-in-NtCreateFi.patch
+++ b/patches/ntdll-DOS_Attributes/0004-ntdll-Implement-storing-DOS-attributes-in-NtCreateFi.patch
@@ -1,14 +1,14 @@
-From 7fbcb02d4e88819dead5b944c3b4676fb4c3bc35 Mon Sep 17 00:00:00 2001
+From 1deb289cab2a4271ec84b4636e39a467bd52b117 Mon Sep 17 00:00:00 2001
 From: "Erich E. Hoover" <erich.e.hoover@gmail.com>
 Date: Wed, 20 Aug 2014 15:28:00 -0600
-Subject: [PATCH] ntdll: Implement storing DOS attributes in NtCreateFile.
+Subject: [PATCH 3/7] ntdll: Implement storing DOS attributes in NtCreateFile.
 
 ---
- dlls/ntdll/tests/directory.c | 24 +++++------
- dlls/ntdll/unix/file.c       | 78 +++++++++++++++++++++++-------------
+ dlls/ntdll/tests/directory.c | 24 ++++++------
+ dlls/ntdll/unix/file.c       | 74 +++++++++++++++++++++++-------------
  include/wine/port.h          |  2 +
- libs/port/xattr.c            | 20 +++++++++
- 4 files changed, 83 insertions(+), 41 deletions(-)
+ libs/port/xattr.c            | 20 ++++++++++
+ 4 files changed, 81 insertions(+), 39 deletions(-)
 
 diff --git a/dlls/ntdll/tests/directory.c b/dlls/ntdll/tests/directory.c
 index 248ed99ab20..e0f4debc624 100644
@@ -60,10 +60,10 @@ index 248ed99ab20..e0f4debc624 100644
          }
          testfiles[i].nfound++;
 diff --git a/dlls/ntdll/unix/file.c b/dlls/ntdll/unix/file.c
-index e3477f5cb5b..73bacabb4f3 100644
+index d1f1b8c8f30..32653a110a2 100644
 --- a/dlls/ntdll/unix/file.c
 +++ b/dlls/ntdll/unix/file.c
-@@ -3572,6 +3572,20 @@ void CDECL set_show_dot_files( BOOL enable )
+@@ -3580,6 +3580,20 @@ void CDECL set_show_dot_files( BOOL enable )
      show_dot_files = enable;
  }
  
@@ -84,7 +84,7 @@ index e3477f5cb5b..73bacabb4f3 100644
  
  /******************************************************************************
   *              NtCreateFile   (NTDLL.@)
-@@ -3581,6 +3595,10 @@ NTSTATUS WINAPI NtCreateFile( HANDLE *handle, ACCESS_MASK access, OBJECT_ATTRIBU
+@@ -3589,6 +3603,10 @@ NTSTATUS WINAPI NtCreateFile( HANDLE *handle, ACCESS_MASK access, OBJECT_ATTRIBU
                                ULONG attributes, ULONG sharing, ULONG disposition,
                                ULONG options, void *ea_buffer, ULONG ea_length )
  {
@@ -92,10 +92,10 @@ index e3477f5cb5b..73bacabb4f3 100644
 +    OBJECT_ATTRIBUTES unix_attr;
 +    data_size_t len;
 +    struct object_attributes *objattr;
-     ANSI_STRING unix_name;
+     char *unix_name;
      BOOL created = FALSE;
  
-@@ -3623,36 +3641,34 @@ NTSTATUS WINAPI NtCreateFile( HANDLE *handle, ACCESS_MASK access, OBJECT_ATTRIBU
+@@ -3631,36 +3649,34 @@ NTSTATUS WINAPI NtCreateFile( HANDLE *handle, ACCESS_MASK access, OBJECT_ATTRIBU
          io->u.Status = STATUS_SUCCESS;
      }
  
@@ -106,11 +106,14 @@ index e3477f5cb5b..73bacabb4f3 100644
 -        OBJECT_ATTRIBUTES unix_attr = *attr;
 -        data_size_t len;
 -        struct object_attributes *objattr;
--
++        WARN("%s not found (%x)\n", debugstr_us(attr->ObjectName), io->u.Status );
++        return io->u.Status;
++    }
+ 
 -        unix_attr.ObjectName = &empty_string;  /* we send the unix name instead */
 -        if ((io->u.Status = alloc_object_attributes( &unix_attr, &objattr, &len )))
 -        {
--            RtlFreeAnsiString( &unix_name );
+-            RtlFreeHeap( GetProcessHeap(), 0, unix_name );
 -            return io->u.Status;
 -        }
 -        SERVER_START_REQ( create_file )
@@ -121,23 +124,17 @@ index e3477f5cb5b..73bacabb4f3 100644
 -            req->options    = options;
 -            req->attrs      = attributes;
 -            wine_server_add_data( req, objattr, len );
--            wine_server_add_data( req, unix_name.Buffer, unix_name.Length );
+-            wine_server_add_data( req, unix_name, strlen(unix_name) );
 -            io->u.Status = wine_server_call( req );
 -            *handle = wine_server_ptr_handle( reply->handle );
 -        }
 -        SERVER_END_REQ;
 -        free( objattr );
--        RtlFreeAnsiString( &unix_name );
-+        WARN("%s not found (%x)\n", debugstr_us(attr->ObjectName), io->u.Status );
-+        return io->u.Status;
-     }
--    else WARN( "%s not found (%x)\n", debugstr_us(attr->ObjectName), io->u.Status );
-+
 +    unix_attr = *attr;
 +    unix_attr.ObjectName = &empty_string;  /* we send the unix name instead */
 +    if ((io->u.Status = alloc_object_attributes( &unix_attr, &objattr, &len )))
 +    {
-+        RtlFreeAnsiString( &unix_name );
+         RtlFreeHeap( GetProcessHeap(), 0, unix_name );
 +        return io->u.Status;
 +    }
 +
@@ -149,32 +146,33 @@ index e3477f5cb5b..73bacabb4f3 100644
 +        req->options    = options;
 +        req->attrs      = attributes;
 +        wine_server_add_data( req, objattr, len );
-+        wine_server_add_data( req, unix_name.Buffer, unix_name.Length );
++        wine_server_add_data( req, unix_name, strlen(unix_name) );
 +        io->u.Status = wine_server_call( req );
 +        *handle = wine_server_ptr_handle( reply->handle );
-+    }
+     }
+-    else WARN( "%s not found (%x)\n", debugstr_us(attr->ObjectName), io->u.Status );
 +    SERVER_END_REQ;
 +    free( objattr );
  
      if (io->u.Status == STATUS_SUCCESS)
      {
-@@ -3674,6 +3690,11 @@ NTSTATUS WINAPI NtCreateFile( HANDLE *handle, ACCESS_MASK access, OBJECT_ATTRIBU
+@@ -3682,6 +3698,11 @@ NTSTATUS WINAPI NtCreateFile( HANDLE *handle, ACCESS_MASK access, OBJECT_ATTRIBU
              io->Information = FILE_OVERWRITTEN;
              break;
          }
 +        if (io->Information == FILE_CREATED)
 +        {
 +            /* set any DOS extended attributes */
-+            set_file_info( unix_name.Buffer, attributes );
++            set_file_info( unix_name, attributes );
 +        }
      }
      else if (io->u.Status == STATUS_TOO_MANY_OPENED_FILES)
      {
-@@ -3681,6 +3702,7 @@ NTSTATUS WINAPI NtCreateFile( HANDLE *handle, ACCESS_MASK access, OBJECT_ATTRIBU
+@@ -3689,6 +3710,7 @@ NTSTATUS WINAPI NtCreateFile( HANDLE *handle, ACCESS_MASK access, OBJECT_ATTRIBU
          if (!once++) ERR_(winediag)( "Too many open files, ulimit -n probably needs to be increased\n" );
      }
  
-+    RtlFreeAnsiString( &unix_name );
++    RtlFreeHeap( GetProcessHeap(), 0, unix_name );
      return io->u.Status;
  }
  
diff --git a/patches/ntdll-DOS_Attributes/0007-ntdll-Perform-the-Unix-style-hidden-file-check-withi.patch b/patches/ntdll-DOS_Attributes/0007-ntdll-Perform-the-Unix-style-hidden-file-check-withi.patch
index b9156aea7..a972a95ee 100644
--- a/patches/ntdll-DOS_Attributes/0007-ntdll-Perform-the-Unix-style-hidden-file-check-withi.patch
+++ b/patches/ntdll-DOS_Attributes/0007-ntdll-Perform-the-Unix-style-hidden-file-check-withi.patch
@@ -1,4 +1,4 @@
-From 01a10dd50491ca0162a5293836cf9b9a3d3c0e34 Mon Sep 17 00:00:00 2001
+From 78f53ba7362227cf5d725d6d5b70e06267597b5e Mon Sep 17 00:00:00 2001
 From: "Erich E. Hoover" <erich.e.hoover@gmail.com>
 Date: Wed, 20 Aug 2014 11:26:48 -0600
 Subject: [PATCH] ntdll: Perform the Unix-style hidden file check within the
@@ -9,10 +9,10 @@ Subject: [PATCH] ntdll: Perform the Unix-style hidden file check within the
  1 file changed, 9 insertions(+), 14 deletions(-)
 
 diff --git a/dlls/ntdll/unix/file.c b/dlls/ntdll/unix/file.c
-index 496c92265e9..6f3772d20be 100644
+index 33fa49d0dea..a88daf1f7f3 100644
 --- a/dlls/ntdll/unix/file.c
 +++ b/dlls/ntdll/unix/file.c
-@@ -1217,15 +1217,15 @@ static BOOLEAN get_dir_case_sensitivity( const char *dir )
+@@ -1238,15 +1238,15 @@ static BOOLEAN get_dir_case_sensitivity( const char *dir )
   *
   * Check if the specified file should be hidden based on its name and the show dot files option.
   */
@@ -33,7 +33,7 @@ index 496c92265e9..6f3772d20be 100644
      if (p == end || *p != '.') return FALSE;
      /* make sure it isn't '.' or '..' */
      if (p + 1 == end) return FALSE;
-@@ -1493,6 +1493,10 @@ static int get_file_info( const char *path, struct stat *st, ULONG *attr )
+@@ -1571,6 +1571,10 @@ static int get_file_info( const char *path, struct stat *st, ULONG *attr )
          RtlFreeHeap( GetProcessHeap(), 0, parent_path );
      }
      *attr |= get_file_attributes( st );
@@ -44,7 +44,7 @@ index 496c92265e9..6f3772d20be 100644
      len = xattr_get( path, SAMBA_XATTR_DOS_ATTRIB, hexattr, sizeof(hexattr)-1 );
      if (len == -1) return ret;
      *attr |= get_file_xattr( hexattr, len );
-@@ -1684,11 +1688,6 @@ static NTSTATUS get_dir_data_entry( struct dir_data *dir_data, void *info_ptr, I
+@@ -2081,11 +2085,6 @@ static NTSTATUS get_dir_data_entry( struct dir_data *dir_data, void *info_ptr, I
      if (class != FileNamesInformation)
      {
          if (st.st_dev != dir_data->id.dev) st.st_ino = 0;  /* ignore inode if on a different device */
@@ -56,15 +56,15 @@ index 496c92265e9..6f3772d20be 100644
          fill_file_info( &st, attributes, info, class );
      }
  
-@@ -3301,7 +3300,6 @@ NTSTATUS WINAPI NtQueryFullAttributesFile( const OBJECT_ATTRIBUTES *attr,
+@@ -3857,7 +3856,6 @@ NTSTATUS WINAPI NtQueryFullAttributesFile( const OBJECT_ATTRIBUTES *attr,
              info->AllocationSize = std.AllocationSize;
              info->EndOfFile      = std.EndOfFile;
              info->FileAttributes = basic.FileAttributes;
 -            if (is_hidden_file( attr->ObjectName )) info->FileAttributes |= FILE_ATTRIBUTE_HIDDEN;
          }
-         RtlFreeAnsiString( &unix_name );
+         RtlFreeHeap( GetProcessHeap(), 0, unix_name );
      }
-@@ -3328,10 +3326,7 @@ NTSTATUS WINAPI NtQueryAttributesFile( const OBJECT_ATTRIBUTES *attr, FILE_BASIC
+@@ -3884,10 +3882,7 @@ NTSTATUS WINAPI NtQueryAttributesFile( const OBJECT_ATTRIBUTES *attr, FILE_BASIC
          else if (!S_ISREG(st.st_mode) && !S_ISDIR(st.st_mode))
              status = STATUS_INVALID_INFO_CLASS;
          else
@@ -72,7 +72,7 @@ index 496c92265e9..6f3772d20be 100644
              status = fill_file_info( &st, attributes, info, FileBasicInformation );
 -            if (is_hidden_file( attr->ObjectName )) info->FileAttributes |= FILE_ATTRIBUTE_HIDDEN;
 -        }
-         RtlFreeAnsiString( &unix_name );
+         RtlFreeHeap( GetProcessHeap(), 0, unix_name );
      }
      else WARN( "%s not found (%x)\n", debugstr_us(attr->ObjectName), status );
 -- 
diff --git a/patches/ntdll-DeviceType_Systemroot/0001-ntdll-Don-t-translate-Unix-virtual-disks-to-FILE_DEV.patch b/patches/ntdll-DeviceType_Systemroot/0001-ntdll-Don-t-translate-Unix-virtual-disks-to-FILE_DEV.patch
new file mode 100644
index 000000000..726aa6d16
--- /dev/null
+++ b/patches/ntdll-DeviceType_Systemroot/0001-ntdll-Don-t-translate-Unix-virtual-disks-to-FILE_DEV.patch
@@ -0,0 +1,57 @@
+From 835c102cf1c8edf8216b12ea98846cb1e3b40219 Mon Sep 17 00:00:00 2001
+From: Zebediah Figura <z.figura12@gmail.com>
+Date: Fri, 29 May 2015 19:57:22 +0200
+Subject: [PATCH] ntdll: Don't translate Unix virtual disks to
+ FILE_DEVICE_VIRTUAL_DISK.
+
+Wine-Bug: https://bugs.winehq.org/show_bug.cgi?id=36546
+Signed-off-by: Zebediah Figura <z.figura12@gmail.com>
+---
+Despite my sign-off, I don't profess to hold an opinion on whether this bug
+should be solved, but multiple users have requested this behaviour, and it
+seems not wholly unreasonable. I'm submitting this patch so that the question
+at least doesn't languish on bugzilla forever.
+
+This patch was tested with FutureMark's SystemInfo version 4.28; it refuses to
+install in a WINEPREFIX in tmpfs without this patch, and succeeds with it.
+
+ dlls/ntdll/unix/file.c | 12 ++++++++----
+ 1 file changed, 8 insertions(+), 4 deletions(-)
+
+diff --git a/dlls/ntdll/unix/file.c b/dlls/ntdll/unix/file.c
+index a0ad361fcbb..a28cfe9818f 100644
+--- a/dlls/ntdll/unix/file.c
++++ b/dlls/ntdll/unix/file.c
+@@ -6001,12 +6001,15 @@ static NTSTATUS get_device_info( int fd, FILE_FS_DEVICE_INFORMATION *info )
+             info->DeviceType = FILE_DEVICE_NETWORK_FILE_SYSTEM;
+             info->Characteristics |= FILE_REMOTE_DEVICE;
+             break;
+-        case 0x01021994:  /* tmpfs */
+-        case 0x28cd3d45:  /* cramfs */
+         case 0x1373:      /* devfs */
+         case 0x9fa0:      /* procfs */
+             info->DeviceType = FILE_DEVICE_VIRTUAL_DISK;
+             break;
++        case 0x01021994:  /* tmpfs */
++        case 0x28cd3d45:  /* cramfs */
++            /* Don't map these to FILE_DEVICE_VIRTUAL_DISK by default. Virtual
++             * filesystems are rare on Windows, and some programs refuse to
++             * recognize them as valid. */
+         default:
+             info->DeviceType = FILE_DEVICE_DISK_FILE_SYSTEM;
+             break;
+@@ -6050,8 +6053,9 @@ static NTSTATUS get_device_info( int fd, FILE_FS_DEVICE_INFORMATION *info )
+                 info->Characteristics |= FILE_REMOVABLE_MEDIA;
+                 break;
+             case DKC_MD:
+-                info->DeviceType = FILE_DEVICE_VIRTUAL_DISK;
+-                break;
++            /* Don't map these to FILE_DEVICE_VIRTUAL_DISK by default. Virtual
++             * filesystems are rare on Windows, and some programs refuse to
++             * recognize them as valid. */
+             default:
+                 info->DeviceType = FILE_DEVICE_DISK_FILE_SYSTEM;
+             }
+-- 
+2.27.0
+
diff --git a/patches/ntdll-DeviceType_Systemroot/0001-ntdll-Return-fake-device-type-when-systemroot-is-loc.patch b/patches/ntdll-DeviceType_Systemroot/0001-ntdll-Return-fake-device-type-when-systemroot-is-loc.patch
deleted file mode 100644
index 0dcd93e22..000000000
--- a/patches/ntdll-DeviceType_Systemroot/0001-ntdll-Return-fake-device-type-when-systemroot-is-loc.patch
+++ /dev/null
@@ -1,54 +0,0 @@
-From 6cf9c37c1e5b2211a61e8d61f97d46f89d86d753 Mon Sep 17 00:00:00 2001
-From: Sebastian Lackner <sebastian@fds-team.de>
-Date: Fri, 29 May 2015 19:57:22 +0200
-Subject: [PATCH] ntdll: Return fake device type when systemroot is located on
- virtual disk.
-
----
- dlls/ntdll/unix/file.c | 27 +++++++++++++++++++++++++++
- 1 file changed, 27 insertions(+)
-
-diff --git a/dlls/ntdll/unix/file.c b/dlls/ntdll/unix/file.c
-index ca6899b50f5..4f35de4da97 100644
---- a/dlls/ntdll/unix/file.c
-+++ b/dlls/ntdll/unix/file.c
-@@ -6136,9 +6136,36 @@ NTSTATUS WINAPI NtQueryVolumeInformationFile( HANDLE handle, IO_STATUS_BLOCK *io
-         else
-         {
-             FILE_FS_DEVICE_INFORMATION *info = buffer;
-+            ANSI_STRING unix_name;
- 
-             if ((io->u.Status = get_device_info( fd, info )) == STATUS_SUCCESS)
-+            {
-                 io->Information = sizeof(*info);
-+
-+                /* Some MSI installers complain when the SystemRoot is located
-+                 * on a virtual disk. Fake return values for compatibility. */
-+                if (info->DeviceType == FILE_DEVICE_VIRTUAL_DISK &&
-+                    user_shared_data->NtSystemRoot[1] == ':' &&
-+                    !server_get_unix_name( handle, &unix_name ))
-+                {
-+                    UNICODE_STRING nt_name;
-+                    if (!unix_to_nt_file_name( &unix_name, &nt_name ))
-+                    {
-+                        WCHAR *buf = nt_name.Buffer;
-+                        if (nt_name.Length >= 6 * sizeof(WCHAR) &&
-+                            buf[0] == '\\' && buf[1] == '?' && buf[2] == '?' && buf[3] == '\\' &&
-+                            buf[4] == user_shared_data->NtSystemRoot[0] && buf[5] == ':')
-+                        {
-+                            WARN( "returning fake disk type for %s\n",
-+                                  debugstr_wn(buf, nt_name.Length/sizeof(WCHAR)) );
-+                            info->DeviceType = FILE_DEVICE_DISK_FILE_SYSTEM;
-+                        }
-+                        RtlFreeUnicodeString( &nt_name );
-+                    }
-+                    RtlFreeAnsiString( &unix_name );
-+                }
-+
-+            }
-         }
-         break;
- 
--- 
-2.27.0
-
diff --git a/patches/ntdll-Junction_Points/definition b/patches/ntdll-Junction_Points/definition
index 628a6a78c..716aac06b 100644
--- a/patches/ntdll-Junction_Points/definition
+++ b/patches/ntdll-Junction_Points/definition
@@ -4,3 +4,5 @@ Fixes: [44948] Multiple apps (Spine (Mod starter for Gothic), MS Office 365 inst
 # FIXME 2: patch 0019 needs to call RemoveDirectoryW() from kernelbase, but it's stuck in kernel32 for now...
 # FIXME 3: RemoveDirectory() doesn't work anymore, I think.
 Depends: ntdll-DOS_Attributes
+# Someone needs to rewrite all of this string arithmetic.
+Disabled: true
diff --git a/patches/ntdll-NtDevicePath/0001-ntdll-Implement-opening-files-through-nt-device-path.patch b/patches/ntdll-NtDevicePath/0001-ntdll-Implement-opening-files-through-nt-device-path.patch
index fd04fa01d..82a0918c7 100644
--- a/patches/ntdll-NtDevicePath/0001-ntdll-Implement-opening-files-through-nt-device-path.patch
+++ b/patches/ntdll-NtDevicePath/0001-ntdll-Implement-opening-files-through-nt-device-path.patch
@@ -1,15 +1,15 @@
-From 38833e0b211516ba54a68cb7e6f560c8caf952ff Mon Sep 17 00:00:00 2001
+From 0d4ebc66e01e42acef9db63872d38abc789d83c5 Mon Sep 17 00:00:00 2001
 From: =?UTF-8?q?Michael=20M=C3=BCller?= <michael@fds-team.de>
 Date: Fri, 26 May 2017 05:17:17 +0200
 Subject: [PATCH] ntdll: Implement opening files through nt device paths.
 
 ---
  dlls/ntdll/tests/file.c |  25 +++++++-
- dlls/ntdll/unix/file.c  | 132 +++++++++++++++++++++++++++++++++++++---
- 2 files changed, 147 insertions(+), 10 deletions(-)
+ dlls/ntdll/unix/file.c  | 122 +++++++++++++++++++++++++++++++++++++++-
+ 2 files changed, 145 insertions(+), 2 deletions(-)
 
 diff --git a/dlls/ntdll/tests/file.c b/dlls/ntdll/tests/file.c
-index 9e65a1f6ddd..7b65152f7cf 100644
+index 6164b0c4bde..6610edbd042 100644
 --- a/dlls/ntdll/tests/file.c
 +++ b/dlls/ntdll/tests/file.c
 @@ -135,18 +135,22 @@ static void WINAPI apc( void *arg, IO_STATUS_BLOCK *iosb, ULONG reserved )
@@ -63,30 +63,19 @@ index 9e65a1f6ddd..7b65152f7cf 100644
  
  static void open_file_test(void)
 diff --git a/dlls/ntdll/unix/file.c b/dlls/ntdll/unix/file.c
-index a7f22e83e12..b93c169f856 100644
+index 3c4670e114c..6b0dbaa7b3d 100644
 --- a/dlls/ntdll/unix/file.c
 +++ b/dlls/ntdll/unix/file.c
-@@ -3307,16 +3307,10 @@ static NTSTATUS nt_to_unix_file_name_attr( const OBJECT_ATTRIBUTES *attr, ANSI_S
- 
- 
- /******************************************************************************
-- *           nt_to_unix_file_name
-- *
-- * Convert a file name from NT namespace to Unix namespace.
-- *
-- * If disposition is not FILE_OPEN or FILE_OVERWRITE, the last path
-- * element doesn't have to exist; in that case STATUS_NO_SUCH_FILE is
-- * returned, but the unix name is still filled in properly.
-+ *           nt_to_unix_file_name_internal
+@@ -3279,7 +3279,7 @@ static NTSTATUS nt_to_unix_file_name_attr( const OBJECT_ATTRIBUTES *attr, char *
+  * element doesn't have to exist; in that case STATUS_NO_SUCH_FILE is
+  * returned, but the unix name is still filled in properly.
   */
--NTSTATUS CDECL nt_to_unix_file_name( const UNICODE_STRING *nameW, ANSI_STRING *unix_name_ret,
--                                     UINT disposition )
-+static NTSTATUS nt_to_unix_file_name_internal( const UNICODE_STRING *nameW, ANSI_STRING *unix_name_ret,
-+                                               UINT disposition )
+-NTSTATUS nt_to_unix_file_name( const UNICODE_STRING *nameW, char **unix_name_ret, UINT disposition )
++static NTSTATUS nt_to_unix_file_name_internal( const UNICODE_STRING *nameW, char **unix_name_ret, UINT disposition )
  {
      static const WCHAR unixW[] = {'u','n','i','x'};
      static const WCHAR pipeW[] = {'p','i','p','e'};
-@@ -3430,6 +3424,126 @@ NTSTATUS CDECL nt_to_unix_file_name( const UNICODE_STRING *nameW, ANSI_STRING *u
+@@ -3417,6 +3417,126 @@ NTSTATUS CDECL wine_nt_to_unix_file_name( const UNICODE_STRING *nameW, char *nam
      return status;
  }
  
@@ -165,7 +154,7 @@ index a7f22e83e12..b93c169f856 100644
 + * element doesn't have to exist; in that case STATUS_NO_SUCH_FILE is
 + * returned, but the unix name is still filled in properly.
 + */
-+NTSTATUS CDECL nt_to_unix_file_name( const UNICODE_STRING *nameW, ANSI_STRING *unix_name_ret,
++NTSTATUS CDECL nt_to_unix_file_name( const UNICODE_STRING *nameW, char **unix_name_ret,
 +                                     UINT disposition )
 +{
 +    static const WCHAR systemrootW[] = {'\\','S','y','s','t','e','m','R','o','o','t','\\',0};
diff --git a/patches/ntdll-NtQueryVirtualMemory/0003-ntdll-Implement-NtQueryVirtualMemory-MemorySectionNa.patch b/patches/ntdll-NtQueryVirtualMemory/0003-ntdll-Implement-NtQueryVirtualMemory-MemorySectionNa.patch
index f91e8238b..204a29bab 100644
--- a/patches/ntdll-NtQueryVirtualMemory/0003-ntdll-Implement-NtQueryVirtualMemory-MemorySectionNa.patch
+++ b/patches/ntdll-NtQueryVirtualMemory/0003-ntdll-Implement-NtQueryVirtualMemory-MemorySectionNa.patch
@@ -1,4 +1,4 @@
-From 30bc9bbd5b1b413c7a574d5e9574f79a03b48d16 Mon Sep 17 00:00:00 2001
+From c1b6bc02ee2534dc2b51d8184fb0ca6717c33cf3 Mon Sep 17 00:00:00 2001
 From: Dmitry Timoshkov <dmitry@baikal.ru>
 Date: Sun, 28 May 2017 05:19:30 +0200
 Subject: [PATCH] ntdll: Implement NtQueryVirtualMemory(MemorySectionName).
@@ -8,42 +8,42 @@ Contains several improvements by Sebastian Lackner <sebastian@fds-team.de>.
 ---
  dlls/ntdll/unix/file.c         |  2 +-
  dlls/ntdll/unix/unix_private.h |  1 +
- dlls/ntdll/unix/virtual.c      | 91 +++++++++++++++++++++++++++++++++-
+ dlls/ntdll/unix/virtual.c      | 96 +++++++++++++++++++++++++++++++++-
  dlls/psapi/tests/psapi_main.c  |  8 +--
- server/mapping.c               | 29 +++++++++++
+ server/mapping.c               | 29 ++++++++++
  server/protocol.def            |  9 ++++
- 6 files changed, 131 insertions(+), 9 deletions(-)
+ 6 files changed, 136 insertions(+), 9 deletions(-)
 
 diff --git a/dlls/ntdll/unix/file.c b/dlls/ntdll/unix/file.c
-index 551d0450584..49e807a5f24 100644
+index 6b0dbaa7b3d..2ac7fcaae35 100644
 --- a/dlls/ntdll/unix/file.c
 +++ b/dlls/ntdll/unix/file.c
 @@ -1767,7 +1767,7 @@ static NTSTATUS fill_file_info( const struct stat *st, ULONG attr, void *ptr,
  }
  
  
--static NTSTATUS server_get_unix_name( HANDLE handle, ANSI_STRING *unix_name )
-+NTSTATUS server_get_unix_name( HANDLE handle, ANSI_STRING *unix_name )
+-static NTSTATUS server_get_unix_name( HANDLE handle, char **unix_name )
++NTSTATUS server_get_unix_name( HANDLE handle, char **unix_name )
  {
      data_size_t size = 1024;
      NTSTATUS ret;
 diff --git a/dlls/ntdll/unix/unix_private.h b/dlls/ntdll/unix/unix_private.h
-index e14da3ff7ec..b9a96424b4c 100644
+index 711a0bed2b7..466c59da75a 100644
 --- a/dlls/ntdll/unix/unix_private.h
 +++ b/dlls/ntdll/unix/unix_private.h
-@@ -173,6 +173,7 @@ extern unsigned int server_queue_process_apc( HANDLE process, const apc_call_t *
+@@ -170,6 +170,7 @@ extern unsigned int server_queue_process_apc( HANDLE process, const apc_call_t *
                                                apc_result_t *result ) DECLSPEC_HIDDEN;
  extern int server_get_unix_fd( HANDLE handle, unsigned int wanted_access, int *unix_fd,
                                 int *needs_close, enum server_fd_type *type, unsigned int *options ) DECLSPEC_HIDDEN;
-+extern NTSTATUS server_get_unix_name( HANDLE handle, ANSI_STRING *unix_name ) DECLSPEC_HIDDEN;
++extern NTSTATUS server_get_unix_name( HANDLE handle, char **unix_name ) DECLSPEC_HIDDEN;
  extern void server_init_process(void) DECLSPEC_HIDDEN;
  extern size_t server_init_thread( void *entry_point, BOOL *suspend ) DECLSPEC_HIDDEN;
  extern int server_pipe( int fd[2] ) DECLSPEC_HIDDEN;
 diff --git a/dlls/ntdll/unix/virtual.c b/dlls/ntdll/unix/virtual.c
-index c49c60166c2..086943bdae8 100644
+index cd1bd162a2a..570a8a3bf49 100644
 --- a/dlls/ntdll/unix/virtual.c
 +++ b/dlls/ntdll/unix/virtual.c
-@@ -4011,6 +4011,93 @@ static NTSTATUS get_working_set_ex( HANDLE process, LPCVOID addr,
+@@ -4013,6 +4013,98 @@ static NTSTATUS get_working_set_ex( HANDLE process, LPCVOID addr,
      return STATUS_SUCCESS;
  }
  
@@ -53,7 +53,8 @@ index c49c60166c2..086943bdae8 100644
 +                                  SIZE_T len, SIZE_T *res_len )
 +{
 +    UNICODE_STRING nt_name;
-+    ANSI_STRING unix_name;
++    WCHAR *nt_nameW;
++    char *unix_name;
 +    data_size_t size = 1024;
 +    WCHAR *name = NULL;
 +    NTSTATUS status;
@@ -76,10 +77,14 @@ index c49c60166c2..086943bdae8 100644
 +        NtClose( mapping );
 +        if (!status)
 +        {
-+            status = wine_unix_to_nt_file_name( &unix_name, &nt_name );
-+            RtlFreeAnsiString( &unix_name );
++            status = unix_to_nt_file_name( unix_name, &nt_nameW );
++            RtlFreeHeap( GetProcessHeap(), 0, unix_name );
++        }
++        if (!status)
++        {
++            RtlInitUnicodeString( &nt_name, nt_nameW );
++            goto found;
 +        }
-+        if (!status) goto found;
 +        if (status == STATUS_OBJECT_TYPE_MISMATCH) status = STATUS_FILE_INVALID;
 +        return status;
 +    }
@@ -137,7 +142,7 @@ index c49c60166c2..086943bdae8 100644
  #define UNIMPLEMENTED_INFO_CLASS(c) \
      case c: \
          FIXME("(process=%p,addr=%p) Unimplemented information class: " #c "\n", process, addr); \
-@@ -4035,8 +4122,10 @@ NTSTATUS WINAPI NtQueryVirtualMemory( HANDLE process, LPCVOID addr,
+@@ -4037,8 +4129,10 @@ NTSTATUS WINAPI NtQueryVirtualMemory( HANDLE process, LPCVOID addr,
          case MemoryWorkingSetExInformation:
              return get_working_set_ex( process, addr, buffer, len, res_len );
  
@@ -177,10 +182,10 @@ index da7524dd60a..bfe14231a9b 100644
      }
  
 diff --git a/server/mapping.c b/server/mapping.c
-index 07c51c246d6..7f19a7572df 100644
+index db0debe0af5..6e74f5b770f 100644
 --- a/server/mapping.c
 +++ b/server/mapping.c
-@@ -1095,6 +1095,35 @@ DECL_HANDLER(unmap_view)
+@@ -1099,6 +1099,35 @@ DECL_HANDLER(unmap_view)
      if (view) free_memory_view( view );
  }
  
@@ -217,10 +222,10 @@ index 07c51c246d6..7f19a7572df 100644
  DECL_HANDLER(get_mapping_committed_range)
  {
 diff --git a/server/protocol.def b/server/protocol.def
-index 6416306c0a1..bdc1eeeb5c3 100644
+index bd6841d8000..345e0966c14 100644
 --- a/server/protocol.def
 +++ b/server/protocol.def
-@@ -1853,6 +1853,15 @@ enum char_info_mode
+@@ -1756,6 +1756,15 @@ enum char_info_mode
  @END
  
  
diff --git a/patches/ntdll-NtQueryVirtualMemory/0008-ntdll-Resolve-drive-symlinks-before-returning-sectio.patch b/patches/ntdll-NtQueryVirtualMemory/0008-ntdll-Resolve-drive-symlinks-before-returning-sectio.patch
index 8bc31e862..e66390a19 100644
--- a/patches/ntdll-NtQueryVirtualMemory/0008-ntdll-Resolve-drive-symlinks-before-returning-sectio.patch
+++ b/patches/ntdll-NtQueryVirtualMemory/0008-ntdll-Resolve-drive-symlinks-before-returning-sectio.patch
@@ -1,4 +1,4 @@
-From 01031e9eb282bffce2449891e68eb9efeded1ee9 Mon Sep 17 00:00:00 2001
+From bb973ee8d79d0a1117c437afe8d62f34b9d9d3c8 Mon Sep 17 00:00:00 2001
 From: Sebastian Lackner <sebastian@fds-team.de>
 Date: Sun, 28 May 2017 11:17:26 +0200
 Subject: [PATCH] ntdll: Resolve drive symlinks before returning section name.
@@ -11,10 +11,10 @@ Subject: [PATCH] ntdll: Resolve drive symlinks before returning section name.
  4 files changed, 34 insertions(+), 12 deletions(-)
 
 diff --git a/dlls/ntdll/unix/file.c b/dlls/ntdll/unix/file.c
-index 551d0450584..65ddf0df4a2 100644
+index 2ac7fcaae35..d39c98b2e49 100644
 --- a/dlls/ntdll/unix/file.c
 +++ b/dlls/ntdll/unix/file.c
-@@ -3425,7 +3425,7 @@ static NTSTATUS nt_to_unix_file_name_internal( const UNICODE_STRING *nameW, ANSI
+@@ -3418,7 +3418,7 @@ NTSTATUS CDECL wine_nt_to_unix_file_name( const UNICODE_STRING *nameW, char *nam
  }
  
  /* read the contents of an NT symlink object */
@@ -24,7 +24,7 @@ index 551d0450584..65ddf0df4a2 100644
      OBJECT_ATTRIBUTES attr;
      UNICODE_STRING targetW;
 diff --git a/dlls/ntdll/unix/unix_private.h b/dlls/ntdll/unix/unix_private.h
-index e14da3ff7ec..5410248e8a7 100644
+index 466c59da75a..884dff1e1b1 100644
 --- a/dlls/ntdll/unix/unix_private.h
 +++ b/dlls/ntdll/unix/unix_private.h
 @@ -103,6 +103,7 @@ extern void CDECL get_initial_directory( UNICODE_STRING *dir ) DECLSPEC_HIDDEN;
@@ -36,7 +36,7 @@ index e14da3ff7ec..5410248e8a7 100644
                                             const LARGE_INTEGER *offset_ptr, SIZE_T *size_ptr, ULONG alloc_type,
                                             ULONG protect, pe_image_info_t *image_info ) DECLSPEC_HIDDEN;
 diff --git a/dlls/ntdll/unix/virtual.c b/dlls/ntdll/unix/virtual.c
-index 1515963b9c7..5cee0da5d24 100644
+index 570a8a3bf49..c040adfaf23 100644
 --- a/dlls/ntdll/unix/virtual.c
 +++ b/dlls/ntdll/unix/virtual.c
 @@ -188,6 +188,8 @@ static BYTE **pages_vprot;
@@ -48,14 +48,15 @@ index 1515963b9c7..5cee0da5d24 100644
  static struct file_view *view_block_start, *view_block_end, *next_free_view;
  #ifdef _WIN64
  static const size_t view_block_size = 0x200000;
-@@ -4016,12 +4018,15 @@ static NTSTATUS get_section_name( HANDLE process, LPCVOID addr,
+@@ -4018,13 +4020,16 @@ static NTSTATUS get_section_name( HANDLE process, LPCVOID addr,
                                    MEMORY_SECTION_NAME *info,
                                    SIZE_T len, SIZE_T *res_len )
  {
 +    static const WCHAR dosprefixW[] = {'\\','?','?','\\'};
 +    WCHAR symlinkW[MAX_DIR_ENTRY_LEN] = {0};
      UNICODE_STRING nt_name;
-     ANSI_STRING unix_name;
+     WCHAR *nt_nameW;
+     char *unix_name;
      data_size_t size = 1024;
 -    WCHAR *name = NULL;
 +    WCHAR *ptr, *name = NULL;
@@ -65,7 +66,7 @@ index 1515963b9c7..5cee0da5d24 100644
  
      if (!addr || !info || !res_len) return STATUS_INVALID_PARAMETER;
  
-@@ -4080,14 +4085,34 @@ static NTSTATUS get_section_name( HANDLE process, LPCVOID addr,
+@@ -4087,14 +4092,34 @@ static NTSTATUS get_section_name( HANDLE process, LPCVOID addr,
      }
  
  found:
diff --git a/patches/ntdll-Pipe_SpecialCharacters/0001-ntdll-Allow-special-characters-in-pipe-names.patch b/patches/ntdll-Pipe_SpecialCharacters/0001-ntdll-Allow-special-characters-in-pipe-names.patch
index 4fd35b35b..192ec0100 100644
--- a/patches/ntdll-Pipe_SpecialCharacters/0001-ntdll-Allow-special-characters-in-pipe-names.patch
+++ b/patches/ntdll-Pipe_SpecialCharacters/0001-ntdll-Allow-special-characters-in-pipe-names.patch
@@ -1,4 +1,4 @@
-From addb612dfe7429c29adeb31144976713cb0756b4 Mon Sep 17 00:00:00 2001
+From 56459884534d5b0acb6a410d2ba04f6f3aa15ded Mon Sep 17 00:00:00 2001
 From: =?UTF-8?q?Michael=20M=C3=BCller?= <michael@fds-team.de>
 Date: Sun, 27 Jul 2014 03:35:42 +0200
 Subject: [PATCH] ntdll: Allow special characters in pipe names.
@@ -38,18 +38,18 @@ index 3c7ca06a045..453dcc80b7b 100644
  }
  
 diff --git a/dlls/ntdll/unix/file.c b/dlls/ntdll/unix/file.c
-index 61340a0e010..a7f22e83e12 100644
+index a0ad361fcbb..3c4670e114c 100644
 --- a/dlls/ntdll/unix/file.c
 +++ b/dlls/ntdll/unix/file.c
-@@ -3319,6 +3319,7 @@ NTSTATUS CDECL nt_to_unix_file_name( const UNICODE_STRING *nameW, ANSI_STRING *u
-                                      UINT disposition )
+@@ -3282,6 +3282,7 @@ static NTSTATUS nt_to_unix_file_name_attr( const OBJECT_ATTRIBUTES *attr, char *
+ NTSTATUS nt_to_unix_file_name( const UNICODE_STRING *nameW, char **unix_name_ret, UINT disposition )
  {
      static const WCHAR unixW[] = {'u','n','i','x'};
 +    static const WCHAR pipeW[] = {'p','i','p','e'};
      static const WCHAR invalid_charsW[] = { INVALID_NT_CHARS, 0 };
  
      NTSTATUS status = STATUS_SUCCESS;
-@@ -3329,6 +3330,7 @@ NTSTATUS CDECL nt_to_unix_file_name( const UNICODE_STRING *nameW, ANSI_STRING *u
+@@ -3292,6 +3293,7 @@ NTSTATUS nt_to_unix_file_name( const UNICODE_STRING *nameW, char **unix_name_ret
      WCHAR prefix[MAX_DIR_ENTRY_LEN + 1];
      BOOLEAN check_case = FALSE;
      BOOLEAN is_unix = FALSE;
@@ -57,7 +57,7 @@ index 61340a0e010..a7f22e83e12 100644
  
      name     = nameW->Buffer;
      name_len = nameW->Length / sizeof(WCHAR);
-@@ -3362,13 +3364,17 @@ NTSTATUS CDECL nt_to_unix_file_name( const UNICODE_STRING *nameW, ANSI_STRING *u
+@@ -3325,13 +3327,17 @@ NTSTATUS nt_to_unix_file_name( const UNICODE_STRING *nameW, char **unix_name_ret
      name += prefix_len;
      name_len -= prefix_len;
  
diff --git a/patches/ntdll-ThreadTime/definition b/patches/ntdll-ThreadTime/definition
deleted file mode 100644
index 6b2dd9c77..000000000
--- a/patches/ntdll-ThreadTime/definition
+++ /dev/null
@@ -1,5 +0,0 @@
-Fixes: Return correct thread creation time in SystemProcessInformation
-Fixes: Fill process virtual memory counters in NtQuerySystemInformation
-# Patch 6 is broken. We should really be returning this information from the
-# server, but that needs a bit more work.
-Disabled: true
diff --git a/patches/ntdll-ThreadTime/xxx6-ntdll-Fill-process-virtual-memory-counters-in-NtQuer.patch b/patches/ntdll-ThreadTime/xxx6-ntdll-Fill-process-virtual-memory-counters-in-NtQuer.patch
deleted file mode 100644
index 829d8f4dd..000000000
--- a/patches/ntdll-ThreadTime/xxx6-ntdll-Fill-process-virtual-memory-counters-in-NtQuer.patch
+++ /dev/null
@@ -1,105 +0,0 @@
-From ee29bbfa7e10de295db39ab6b89f2175d00692c5 Mon Sep 17 00:00:00 2001
-From: =?UTF-8?q?Michael=20M=C3=BCller?= <michael@fds-team.de>
-Date: Thu, 9 Mar 2017 22:56:45 +0100
-Subject: [PATCH] ntdll: Fill process virtual memory counters in
- NtQuerySystemInformation.
-
-FIXME: fill_VM_COUNTERS now uses a different method ... which one is better?
----
- dlls/ntdll/nt.c         |  3 +++
- dlls/ntdll/ntdll_misc.h |  1 +
- dlls/ntdll/process.c    |  2 +-
- dlls/ntdll/thread.c     | 36 ++++++++++++++++++++++++++++++++++++
- 4 files changed, 41 insertions(+), 1 deletion(-)
-
-diff --git a/dlls/ntdll/nt.c b/dlls/ntdll/nt.c
-index cbb7937631d..bb078c1aa21 100644
---- a/dlls/ntdll/nt.c
-+++ b/dlls/ntdll/nt.c
-@@ -2686,8 +2686,11 @@ NTSTATUS WINAPI NtQuerySystemInformation(
-                             /* spi->ti will be set later on */
- 
-                             if (reply->unix_pid != -1)
-+                            {
-                                 read_process_time(reply->unix_pid, -1, clk_tck,
-                                                   &spi->KernelTime, &spi->UserTime);
-+                                read_process_memory_stats(reply->unix_pid, &spi->vmCounters);
-+                            }
-                             unix_pid = reply->unix_pid;
-                         }
-                         len += procstructlen;
-diff --git a/dlls/ntdll/ntdll_misc.h b/dlls/ntdll/ntdll_misc.h
-index 6e77694d87b..d725a678246 100644
---- a/dlls/ntdll/ntdll_misc.h
-+++ b/dlls/ntdll/ntdll_misc.h
-@@ -248,6 +248,7 @@ void     WINAPI LdrInitializeThunk(CONTEXT*,void**,ULONG_PTR,ULONG_PTR);
- /* process / thread time */
- extern BOOL read_process_time(int unix_pid, int unix_tid, unsigned long clk_tck,
-                               LARGE_INTEGER *kernel, LARGE_INTEGER *user) DECLSPEC_HIDDEN;
-+extern BOOL read_process_memory_stats(int unix_pid, VM_COUNTERS *pvmi) DECLSPEC_HIDDEN;
- 
- /* string functions */
- int    __cdecl NTDLL_tolower( int c );
-diff --git a/dlls/ntdll/process.c b/dlls/ntdll/process.c
-index 35937ce6026..b4f2dbc8160 100644
---- a/dlls/ntdll/process.c
-+++ b/dlls/ntdll/process.c
-@@ -192,7 +192,7 @@ static void fill_VM_COUNTERS(VM_COUNTERS* pvmi)
- 
- static void fill_VM_COUNTERS(VM_COUNTERS* pvmi)
- {
--    /* FIXME : real data */
-+    read_process_memory_stats(getpid(), pvmi);
- }
- 
- #endif
-diff --git a/dlls/ntdll/thread.c b/dlls/ntdll/thread.c
-index 14198d77b7b..8ae8251f975 100644
---- a/dlls/ntdll/thread.c
-+++ b/dlls/ntdll/thread.c
-@@ -381,6 +381,42 @@ NTSTATUS WINAPI NtCreateThreadEx( HANDLE *handle_ptr, ACCESS_MASK access, OBJECT
-                                          flags, zero_bits, stack_commit, stack_reserve, attr_list );
- }
- 
-+BOOL read_process_memory_stats(int unix_pid, VM_COUNTERS *pvmi)
-+{
-+    BOOL ret = FALSE;
-+#ifdef __linux__
-+    unsigned long size, resident, shared, trs, drs, lrs, dt;
-+    char buf[512];
-+    FILE *fp;
-+
-+    sprintf( buf, "/proc/%u/statm", unix_pid );
-+    if ((fp = fopen( buf, "r" )))
-+    {
-+        if (fscanf( fp, "%lu %lu %lu %lu %lu %lu %lu",
-+            &size, &resident, &shared, &trs, &drs, &lrs, &dt ) == 7)
-+        {
-+            pvmi->VirtualSize = size * page_size;
-+            pvmi->WorkingSetSize = resident * page_size;
-+            pvmi->PrivatePageCount = size - shared;
-+
-+            /* these values are not available through /proc/pid/statm */
-+            pvmi->PeakVirtualSize = pvmi->VirtualSize;
-+            pvmi->PageFaultCount = 0;
-+            pvmi->PeakWorkingSetSize = pvmi->WorkingSetSize;
-+            pvmi->QuotaPagedPoolUsage = pvmi->VirtualSize;
-+            pvmi->QuotaPeakPagedPoolUsage = pvmi->QuotaPagedPoolUsage;
-+            pvmi->QuotaPeakNonPagedPoolUsage = 0;
-+            pvmi->QuotaNonPagedPoolUsage = 0;
-+            pvmi->PagefileUsage = 0;
-+            pvmi->PeakPagefileUsage = 0;
-+
-+            ret = TRUE;
-+        }
-+        fclose( fp );
-+    }
-+#endif
-+    return ret;
-+}
- 
- /***********************************************************************
-  *              RtlCreateUserThread   (NTDLL.@)
--- 
-2.26.2
-
diff --git a/patches/nvcuda-CUDA_Support/0009-nvcuda-Implement-cuModuleLoad-wrapper-function.patch b/patches/nvcuda-CUDA_Support/0009-nvcuda-Implement-cuModuleLoad-wrapper-function.patch
index 2b648b034..f2d069e1e 100644
--- a/patches/nvcuda-CUDA_Support/0009-nvcuda-Implement-cuModuleLoad-wrapper-function.patch
+++ b/patches/nvcuda-CUDA_Support/0009-nvcuda-Implement-cuModuleLoad-wrapper-function.patch
@@ -1,23 +1,23 @@
-From 73f255bdc5edef27f9a03b7e8917686490d3bf7a Mon Sep 17 00:00:00 2001
+From 9d4e8c921196c2303812e3673b27f781218943aa Mon Sep 17 00:00:00 2001
 From: Sebastian Lackner <sebastian@fds-team.de>
 Date: Sat, 7 Mar 2015 06:20:55 +0100
 Subject: [PATCH] nvcuda: Implement cuModuleLoad wrapper function.
 
 ---
- dlls/nvcuda/nvcuda.c    | 46 +++++++++++++++++++++++++++++++++++++++++
+ dlls/nvcuda/nvcuda.c    | 22 ++++++++++++++++++++++
  dlls/nvcuda/nvcuda.spec |  2 +-
  include/cuda.h          |  1 +
- 3 files changed, 48 insertions(+), 1 deletion(-)
+ 3 files changed, 24 insertions(+), 1 deletion(-)
 
 diff --git a/dlls/nvcuda/nvcuda.c b/dlls/nvcuda/nvcuda.c
-index e11a1d51a9d..14b695f3371 100644
+index e11a1d51a9d..7c296cb6861 100644
 --- a/dlls/nvcuda/nvcuda.c
 +++ b/dlls/nvcuda/nvcuda.c
 @@ -29,6 +29,7 @@
  
  #include "windef.h"
  #include "winbase.h"
-+#include "winternl.h"
++#include "winnls.h"
  #include "wine/library.h"
  #include "wine/debug.h"
  #include "wine/list.h"
@@ -37,38 +37,14 @@ index e11a1d51a9d..14b695f3371 100644
      LOAD_FUNCPTR(cuModuleLoadData);
      LOAD_FUNCPTR(cuModuleLoadDataEx);
      LOAD_FUNCPTR(cuModuleLoadFatBinary);
-@@ -1883,6 +1886,49 @@ CUresult WINAPI wine_cuModuleGetTexRef(CUtexref *pTexRef, CUmodule hmod, const c
+@@ -1883,6 +1886,25 @@ CUresult WINAPI wine_cuModuleGetTexRef(CUtexref *pTexRef, CUmodule hmod, const c
      return pcuModuleGetTexRef(pTexRef, hmod, name);
  }
  
-+/* FIXME: Should we pay attention to AreFileApisANSI() ? */
-+static BOOL get_unix_path(ANSI_STRING *unix_name, const char *filename)
-+{
-+    UNICODE_STRING dospathW, ntpathW;
-+    ANSI_STRING dospath;
-+    NTSTATUS status;
-+
-+    RtlInitAnsiString(&dospath, filename);
-+
-+    if (RtlAnsiStringToUnicodeString(&dospathW, &dospath, TRUE))
-+        return FALSE;
-+
-+    if (!RtlDosPathNameToNtPathName_U(dospathW.Buffer, &ntpathW, NULL, NULL))
-+    {
-+        RtlFreeUnicodeString(&dospathW);
-+        return FALSE;
-+    }
-+
-+    status = wine_nt_to_unix_file_name(&ntpathW, unix_name, FILE_OPEN);
-+
-+    RtlFreeUnicodeString(&ntpathW);
-+    RtlFreeUnicodeString(&dospathW);
-+    return !status;
-+}
-+
 +CUresult WINAPI wine_cuModuleLoad(CUmodule *module, const char *fname)
 +{
-+    ANSI_STRING unix_name;
++    WCHAR filenameW[MAX_PATH];
++    char *unix_name;
 +    CUresult ret;
 +
 +    TRACE("(%p, %s)\n", module, fname);
@@ -76,11 +52,11 @@ index e11a1d51a9d..14b695f3371 100644
 +    if (!fname)
 +        return CUDA_ERROR_INVALID_VALUE;
 +
-+    if (!get_unix_path(&unix_name, fname))
-+        return CUDA_ERROR_FILE_NOT_FOUND;
++    MultiByteToWideChar(CP_ACP, 0, fname, -1, filenameW, ARRAY_SIZE(filenameW));
++    unix_name = wine_get_unix_file_name( filenameW );
 +
-+    ret = pcuModuleLoad(module, unix_name.Buffer);
-+    RtlFreeAnsiString(&unix_name);
++    ret = pcuModuleLoad(module, unix_name);
++    HeapFree(GetProcessHeap(), 0, unix_name);
 +    return ret;
 +}
 +
diff --git a/patches/nvcuvid-CUDA_Video_Support/0001-nvcuvid-First-implementation.patch b/patches/nvcuvid-CUDA_Video_Support/0001-nvcuvid-First-implementation.patch
index ed89575cc..00bba4bf2 100644
--- a/patches/nvcuvid-CUDA_Video_Support/0001-nvcuvid-First-implementation.patch
+++ b/patches/nvcuvid-CUDA_Video_Support/0001-nvcuvid-First-implementation.patch
@@ -1,19 +1,19 @@
-From ecde4f4f994831bbeb1029d93e0b06f815c503b2 Mon Sep 17 00:00:00 2001
+From 3519cb4a7b8bb9c9bbf3dacbd9e6766b48dd121b Mon Sep 17 00:00:00 2001
 From: =?UTF-8?q?Michael=20M=C3=BCller?= <michael@fds-team.de>
 Date: Tue, 6 Jan 2015 05:16:36 +0100
-Subject: nvcuvid: First implementation. (rev 2)
+Subject: [PATCH] nvcuvid: First implementation. (rev 2)
 
 Changes by Sebastian Lackner <sebastian@fds-team.de>:
 * Convert structures properly where the Windows and Linux definition differs.
 ---
  configure.ac              |   1 +
  dlls/nvcuvid/Makefile.in  |   4 +
- dlls/nvcuvid/nvcuvid.c    | 537 ++++++++++++++++++++++++++++++++++++++
+ dlls/nvcuvid/nvcuvid.c    | 513 ++++++++++++++++++++++++++++++++++++++
  dlls/nvcuvid/nvcuvid.spec |  24 ++
  include/Makefile.in       |   2 +
- include/cuviddec.h        |  99 +++++++
+ include/cuviddec.h        |  99 ++++++++
  include/nvcuvid.h         |  79 ++++++
- 7 files changed, 746 insertions(+)
+ 7 files changed, 722 insertions(+)
  create mode 100644 dlls/nvcuvid/Makefile.in
  create mode 100644 dlls/nvcuvid/nvcuvid.c
  create mode 100644 dlls/nvcuvid/nvcuvid.spec
@@ -44,10 +44,10 @@ index 00000000000..2c2dc8ccf67
 +	nvcuvid.c
 diff --git a/dlls/nvcuvid/nvcuvid.c b/dlls/nvcuvid/nvcuvid.c
 new file mode 100644
-index 00000000000..2704bfa9a63
+index 00000000000..a586c15eafb
 --- /dev/null
 +++ b/dlls/nvcuvid/nvcuvid.c
-@@ -0,0 +1,537 @@
+@@ -0,0 +1,513 @@
 +/*
 + * Copyright (C) 2015 Michael Müller
 + *
@@ -73,7 +73,7 @@ index 00000000000..2704bfa9a63
 +
 +#include "windef.h"
 +#include "winbase.h"
-+#include "winternl.h"
++#include "winnls.h"
 +#include "wine/library.h"
 +#include "wine/debug.h"
 +#include "nvcuvid.h"
@@ -320,36 +320,12 @@ index 00000000000..2704bfa9a63
 +    return CUDA_SUCCESS;
 +}
 +
-+/* FIXME: Should we pay attention to AreFileApisANSI() ? */
-+static BOOL get_unix_path(ANSI_STRING *unix_name, const char *filename)
-+{
-+    UNICODE_STRING dospathW, ntpathW;
-+    ANSI_STRING dospath;
-+    NTSTATUS status;
-+
-+    RtlInitAnsiString(&dospath, filename);
-+
-+    if (RtlAnsiStringToUnicodeString(&dospathW, &dospath, TRUE))
-+        return FALSE;
-+
-+    if (!RtlDosPathNameToNtPathName_U(dospathW.Buffer, &ntpathW, NULL, NULL))
-+    {
-+        RtlFreeUnicodeString(&dospathW);
-+        return FALSE;
-+    }
-+
-+    status = wine_nt_to_unix_file_name(&ntpathW, unix_name, FILE_OPEN);
-+
-+    RtlFreeUnicodeString(&ntpathW);
-+    RtlFreeUnicodeString(&dospathW);
-+    return !status;
-+}
-+
 +CUresult WINAPI wine_cuvidCreateVideoSource(CUvideosource *pObj, const char *pszFileName, CUVIDSOURCEPARAMS *pParams)
 +{
++    WCHAR filenameW[MAX_PATH];
 +    struct fake_source *source;
 +    CUVIDSOURCEPARAMS fake_params;
-+    ANSI_STRING unix_name;
++    char *unix_name;
 +    CUresult ret;
 +
 +    TRACE("(%p, %s, %p)\n", pObj, pszFileName, pParams);
@@ -361,13 +337,13 @@ index 00000000000..2704bfa9a63
 +    if (!pszFileName)
 +        return CUDA_ERROR_UNKNOWN;
 +
-+    if (!get_unix_path(&unix_name, pszFileName))
-+        return CUDA_ERROR_UNKNOWN;
++    MultiByteToWideChar(CP_ACP, 0, pszFileName, -1, filenameW, ARRAY_SIZE(filenameW));
++    unix_name = wine_get_unix_file_name( filenameW );
 +
 +    source = HeapAlloc(GetProcessHeap(), 0, sizeof(*source));
 +    if (!source)
 +    {
-+        RtlFreeAnsiString(&unix_name);
++        HeapFree(GetProcessHeap(), 0, &unix_name);
 +        return CUDA_ERROR_OUT_OF_MEMORY;
 +    }
 +
@@ -388,8 +364,8 @@ index 00000000000..2704bfa9a63
 +    source->orig_data = pParams->pUserData;
 +    fake_params.pUserData = source;
 +
-+    ret = pcuvidCreateVideoSource((void *)&source->orig_source, unix_name.Buffer, &fake_params);
-+    RtlFreeAnsiString(&unix_name);
++    ret = pcuvidCreateVideoSource((void *)&source->orig_source, unix_name, &fake_params);
++    HeapFree(GetProcessHeap(), 0, &unix_name);
 +
 +    if (ret)
 +    {
diff --git a/patches/patchinstall.sh b/patches/patchinstall.sh
index 60412bcdb..00a070030 100755
--- a/patches/patchinstall.sh
+++ b/patches/patchinstall.sh
@@ -177,7 +177,6 @@ patch_enable_all ()
 	enable_ntdll_Heap_Improvements="$1"
 	enable_ntdll_Hide_Wine_Exports="$1"
 	enable_ntdll_Interrupt_0x2e="$1"
-	enable_ntdll_Junction_Points="$1"
 	enable_ntdll_Manifest_Range="$1"
 	enable_ntdll_NtAccessCheck="$1"
 	enable_ntdll_NtDevicePath="$1"
@@ -621,9 +620,6 @@ patch_enable ()
 		ntdll-Interrupt-0x2e)
 			enable_ntdll_Interrupt_0x2e="$2"
 			;;
-		ntdll-Junction_Points)
-			enable_ntdll_Junction_Points="$2"
-			;;
 		ntdll-Manifest_Range)
 			enable_ntdll_Manifest_Range="$2"
 			;;
@@ -1575,13 +1571,6 @@ if test "$enable_server_Stored_ACLs" -eq 1; then
 	enable_server_File_Permissions=1
 fi
 
-if test "$enable_server_File_Permissions" -eq 1; then
-	if test "$enable_ntdll_Junction_Points" -gt 1; then
-		abort "Patchset ntdll-Junction_Points disabled, but server-File_Permissions depends on that."
-	fi
-	enable_ntdll_Junction_Points=1
-fi
-
 if test "$enable_server_Desktop_Refcount" -eq 1; then
 	if test "$enable_ws2_32_WSACleanup" -gt 1; then
 		abort "Patchset ws2_32-WSACleanup disabled, but server-Desktop_Refcount depends on that."
@@ -1635,13 +1624,6 @@ if test "$enable_ntdll_NtDevicePath" -eq 1; then
 	enable_ntdll_Pipe_SpecialCharacters=1
 fi
 
-if test "$enable_ntdll_Junction_Points" -eq 1; then
-	if test "$enable_ntdll_DOS_Attributes" -gt 1; then
-		abort "Patchset ntdll-DOS_Attributes disabled, but ntdll-Junction_Points depends on that."
-	fi
-	enable_ntdll_DOS_Attributes=1
-fi
-
 if test "$enable_ntdll_Hide_Wine_Exports" -eq 1; then
 	if test "$enable_advapi32_Token_Integrity_Level" -gt 1; then
 		abort "Patchset advapi32-Token_Integrity_Level disabled, but ntdll-Hide_Wine_Exports depends on that."
@@ -3518,9 +3500,9 @@ fi
 # |   *	dlls/ntdll/unix/file.c
 # |
 if test "$enable_ntdll_DeviceType_Systemroot" -eq 1; then
-	patch_apply ntdll-DeviceType_Systemroot/0001-ntdll-Return-fake-device-type-when-systemroot-is-loc.patch
+	patch_apply ntdll-DeviceType_Systemroot/0001-ntdll-Don-t-translate-Unix-virtual-disks-to-FILE_DEV.patch
 	(
-		printf '%s\n' '+    { "Sebastian Lackner", "ntdll: Return fake device type when systemroot is located on virtual disk.", 1 },';
+		printf '%s\n' '+    { "Zebediah Figura", "ntdll: Don'\''t translate Unix virtual disks to FILE_DEVICE_VIRTUAL_DISK.", 1 },';
 	) >> "$patchlist"
 fi
 
@@ -3657,61 +3639,6 @@ if test "$enable_ntdll_Interrupt_0x2e" -eq 1; then
 	) >> "$patchlist"
 fi
 
-# Patchset ntdll-Junction_Points
-# |
-# | This patchset has the following (direct or indirect) dependencies:
-# |   *	ntdll-DOS_Attributes
-# |
-# | This patchset fixes the following Wine bugs:
-# |   *	[#12401] NET Framework 2.0, 3.0, 4.0 installers and other apps that make use of GAC API for managed assembly
-# | 	installation on NTFS filesystems need reparse point/junction API support
-# | 	(FSCTL_SET_REPARSE_POINT/FSCTL_GET_REPARSE_POINT)
-# |   *	[#44948] Multiple apps (Spine (Mod starter for Gothic), MS Office 365 installer) need CreateSymbolicLinkW implementation
-# |
-# | Modified files:
-# |   *	configure.ac, dlls/kernel32/path.c, dlls/kernel32/tests/path.c, dlls/kernelbase/file.c, dlls/msvcp120/tests/msvcp120.c,
-# | 	dlls/msvcp140/tests/msvcp140.c, dlls/ntdll/tests/file.c, dlls/ntdll/unix/file.c, include/Makefile.in, include/ntifs.h,
-# | 	include/wine/port.h, include/winternl.h, libs/port/Makefile.in, libs/port/renameat2.c, server/fd.c
-# |
-if test "$enable_ntdll_Junction_Points" -eq 1; then
-	patch_apply ntdll-Junction_Points/0001-ntdll-Add-support-for-junction-point-creation.patch
-	patch_apply ntdll-Junction_Points/0002-ntdll-Add-support-for-reading-junction-points.patch
-	patch_apply ntdll-Junction_Points/0003-ntdll-Add-support-for-deleting-junction-points.patch
-	patch_apply ntdll-Junction_Points/0004-ntdll-Add-a-test-for-junction-point-advertisement.patch
-	patch_apply ntdll-Junction_Points/0005-kernel32-ntdll-Add-support-for-deleting-junction-poi.patch
-	patch_apply ntdll-Junction_Points/0007-ntdll-Add-support-for-absolute-symlink-creation.patch
-	patch_apply ntdll-Junction_Points/0008-ntdll-Add-support-for-reading-absolute-symlinks.patch
-	patch_apply ntdll-Junction_Points/0009-ntdll-Add-support-for-deleting-symlinks.patch
-	patch_apply ntdll-Junction_Points/0010-ntdll-Add-support-for-relative-symlink-creation.patch
-	patch_apply ntdll-Junction_Points/0011-ntdll-Add-support-for-reading-relative-symlinks.patch
-	patch_apply ntdll-Junction_Points/0012-ntdll-Add-support-for-file-symlinks.patch
-	patch_apply ntdll-Junction_Points/0013-ntdll-Allow-creation-of-dangling-reparse-points-to-n.patch
-	patch_apply ntdll-Junction_Points/0014-ntdll-Correctly-report-file-symbolic-links-as-files.patch
-	patch_apply ntdll-Junction_Points/0016-server-Properly-handle-file-symlink-deletion.patch
-	patch_apply ntdll-Junction_Points/0017-ntdll-Always-report-symbolic-links-as-containing-zer.patch
-	patch_apply ntdll-Junction_Points/0018-ntdll-Find-dangling-symlinks-quickly.patch
-	patch_apply ntdll-Junction_Points/0019-kernel32-Implement-CreateSymbolicLink-A-W-with-ntdll.patch
-	(
-		printf '%s\n' '+    { "Erich E. Hoover", "ntdll: Add support for junction point creation.", 1 },';
-		printf '%s\n' '+    { "Erich E. Hoover", "ntdll: Add support for reading junction points.", 1 },';
-		printf '%s\n' '+    { "Erich E. Hoover", "ntdll: Add support for deleting junction points.", 1 },';
-		printf '%s\n' '+    { "Erich E. Hoover", "ntdll: Add a test for junction point advertisement.", 1 },';
-		printf '%s\n' '+    { "Erich E. Hoover", "kernel32,ntdll: Add support for deleting junction points with RemoveDirectory.", 1 },';
-		printf '%s\n' '+    { "Erich E. Hoover", "ntdll: Add support for absolute symlink creation.", 1 },';
-		printf '%s\n' '+    { "Erich E. Hoover", "ntdll: Add support for reading absolute symlinks.", 1 },';
-		printf '%s\n' '+    { "Erich E. Hoover", "ntdll: Add support for deleting symlinks.", 1 },';
-		printf '%s\n' '+    { "Erich E. Hoover", "ntdll: Add support for relative symlink creation.", 1 },';
-		printf '%s\n' '+    { "Erich E. Hoover", "ntdll: Add support for reading relative symlinks.", 1 },';
-		printf '%s\n' '+    { "Erich E. Hoover", "ntdll: Add support for file symlinks.", 1 },';
-		printf '%s\n' '+    { "Erich E. Hoover", "ntdll: Allow creation of dangling reparse points to non-existent paths.", 1 },';
-		printf '%s\n' '+    { "Erich E. Hoover", "ntdll: Correctly report file symbolic links as files.", 1 },';
-		printf '%s\n' '+    { "Erich E. Hoover", "server: Properly handle file symlink deletion.", 1 },';
-		printf '%s\n' '+    { "Erich E. Hoover", "ntdll: Always report symbolic links as containing zero bytes.", 1 },';
-		printf '%s\n' '+    { "Erich E. Hoover", "ntdll: Find dangling symlinks quickly.", 1 },';
-		printf '%s\n' '+    { "Erich E. Hoover", "kernel32: Implement CreateSymbolicLink[A|W] with ntdll reparse points.", 1 },';
-	) >> "$patchlist"
-fi
-
 # Patchset ntdll-Manifest_Range
 # |
 # | This patchset fixes the following Wine bugs:
@@ -4367,9 +4294,6 @@ fi
 
 # Patchset server-File_Permissions
 # |
-# | This patchset has the following (direct or indirect) dependencies:
-# |   *	ntdll-DOS_Attributes, ntdll-Junction_Points
-# |
 # | This patchset fixes the following Wine bugs:
 # |   *	[#44691] Improve mapping of DACL to file permissions
 # |
@@ -4400,7 +4324,7 @@ fi
 # Patchset server-Stored_ACLs
 # |
 # | This patchset has the following (direct or indirect) dependencies:
-# |   *	ntdll-DOS_Attributes, ntdll-Junction_Points, server-File_Permissions
+# |   *	ntdll-DOS_Attributes, server-File_Permissions
 # |
 # | This patchset fixes the following Wine bugs:
 # |   *	[#33576] Support for stored file ACLs
@@ -4431,7 +4355,7 @@ fi
 # Patchset server-Inherited_ACLs
 # |
 # | This patchset has the following (direct or indirect) dependencies:
-# |   *	ntdll-DOS_Attributes, ntdll-Junction_Points, server-File_Permissions, server-Stored_ACLs
+# |   *	ntdll-DOS_Attributes, server-File_Permissions, server-Stored_ACLs
 # |
 # | Modified files:
 # |   *	dlls/advapi32/tests/security.c, server/file.c
diff --git a/patches/server-File_Permissions/0002-server-Allow-to-open-files-without-any-permission-bi.patch b/patches/server-File_Permissions/0002-server-Allow-to-open-files-without-any-permission-bi.patch
index cefe93f47..b8580e80a 100644
--- a/patches/server-File_Permissions/0002-server-Allow-to-open-files-without-any-permission-bi.patch
+++ b/patches/server-File_Permissions/0002-server-Allow-to-open-files-without-any-permission-bi.patch
@@ -1,4 +1,4 @@
-From 9ecf9653d3f4d564f000d4e0f7f96ae0cd3610b2 Mon Sep 17 00:00:00 2001
+From b1dcc9759921e696a554c46d7aee2c4c29d3c7ae Mon Sep 17 00:00:00 2001
 From: Sebastian Lackner <sebastian@fds-team.de>
 Date: Fri, 3 Apr 2015 03:58:47 +0200
 Subject: [PATCH] server: Allow to open files without any permission bits. (try
@@ -13,7 +13,7 @@ Changes in v2:
  2 files changed, 32 insertions(+), 20 deletions(-)
 
 diff --git a/dlls/advapi32/tests/security.c b/dlls/advapi32/tests/security.c
-index 1ec2e6bbb48..cc59210e609 100644
+index 825f8451904..948c257cea2 100644
 --- a/dlls/advapi32/tests/security.c
 +++ b/dlls/advapi32/tests/security.c
 @@ -3702,17 +3702,13 @@ static void test_CreateDirectoryA(void)
@@ -65,10 +65,10 @@ index 1ec2e6bbb48..cc59210e609 100644
  
  done:
 diff --git a/server/fd.c b/server/fd.c
-index d238c43cf1f..8292a0b82f2 100644
+index e5e1fdbbf32..188a632575f 100644
 --- a/server/fd.c
 +++ b/server/fd.c
-@@ -1825,6 +1825,7 @@ struct fd *open_fd( struct fd *root, const char *name, int flags, mode_t *mode,
+@@ -1835,6 +1835,7 @@ struct fd *open_fd( struct fd *root, const char *name, int flags, mode_t *mode,
      int root_fd = -1;
      int rw_mode;
      char *path;
@@ -76,10 +76,10 @@ index d238c43cf1f..8292a0b82f2 100644
      int created = (flags & O_CREAT);
  
      if (((options & FILE_DELETE_ON_CLOSE) && !(access & DELETE)) ||
-@@ -1891,10 +1892,28 @@ struct fd *open_fd( struct fd *root, const char *name, int flags, mode_t *mode,
-             fd->unix_fd = open( name, rw_mode | O_SYMLINK | (flags & ~O_TRUNC), *mode );
+@@ -1894,10 +1895,28 @@ struct fd *open_fd( struct fd *root, const char *name, int flags, mode_t *mode,
+             if ((access & FILE_UNIX_WRITE_ACCESS) || (flags & O_CREAT))
+                 fd->unix_fd = open( name, O_RDONLY | (flags & ~(O_TRUNC | O_CREAT | O_EXCL)), *mode );
          }
- #endif
 +        else if (errno == EACCES)
 +        {
 +            /* try to change permissions temporarily to open a file descriptor */
@@ -105,14 +105,14 @@ index d238c43cf1f..8292a0b82f2 100644
              goto error;
          }
      }
-@@ -1909,6 +1928,7 @@ struct fd *open_fd( struct fd *root, const char *name, int flags, mode_t *mode,
+@@ -1912,6 +1931,7 @@ struct fd *open_fd( struct fd *root, const char *name, int flags, mode_t *mode,
      closed_fd->unix_fd = fd->unix_fd;
      closed_fd->unlink = 0;
      closed_fd->unix_name = fd->unix_name;
 +    if (do_chmod) chmod( name, *mode );
-     lstat( fd->unix_name, &st );
+     fstat( fd->unix_fd, &st );
      *mode = st.st_mode;
  
 -- 
-2.25.1
+2.27.0
 
diff --git a/patches/server-File_Permissions/definition b/patches/server-File_Permissions/definition
index a699a6fd1..0ebcf3acc 100644
--- a/patches/server-File_Permissions/definition
+++ b/patches/server-File_Permissions/definition
@@ -1,3 +1,2 @@
 Fixes: Allow to open files/directories without any access rights in order to query attributes
 Fixes: [44691] Improve mapping of DACL to file permissions
-Depends: ntdll-Junction_Points

diff --git a/patches/ntdll-Junction_Points/0005-kernel32-ntdll-Add-support-for-deleting-junction-poi.patch b/patches/ntdll-Junction_Points/0005-kernel32-ntdll-Add-support-for-deleting-junction-poi.patch
index 912e45db9..59e6b7d46 100644
--- a/patches/ntdll-Junction_Points/0005-kernel32-ntdll-Add-support-for-deleting-junction-poi.patch
+++ b/patches/ntdll-Junction_Points/0005-kernel32-ntdll-Add-support-for-deleting-junction-poi.patch
@@ -1,4 +1,4 @@
-From 67cacb66b16c354aa30f4c94bba9da44f7e45619 Mon Sep 17 00:00:00 2001
+From 3473ccddec5c67bbfe1d477ce36f537493fae54b Mon Sep 17 00:00:00 2001
 From: "Erich E. Hoover" <erich.e.hoover@gmail.com>
 Date: Thu, 16 Jan 2014 21:02:11 -0700
 Subject: [PATCH] kernel32,ntdll: Add support for deleting junction points with
@@ -6,55 +6,14 @@ Subject: [PATCH] kernel32,ntdll: Add support for deleting junction points with
 
 Signed-off-by: Erich E. Hoover <erich.e.hoover@gmail.com>
 ---
- dlls/kernel32/path.c    | 19 +++++++++++++------
  dlls/ntdll/tests/file.c | 34 +++++++++++++++++++++++++++++++++-
- 2 files changed, 46 insertions(+), 7 deletions(-)
+ 1 file changed, 33 insertions(+), 1 deletion(-)
 
-diff --git a/dlls/kernel32/path.c b/dlls/kernel32/path.c
-index db2c1fb0240..6b7912359cf 100644
---- a/dlls/kernel32/path.c
-+++ b/dlls/kernel32/path.c
-@@ -233,6 +233,7 @@ BOOL WINAPI CreateDirectoryExA( LPCSTR template, LPCSTR path, LPSECURITY_ATTRIBU
-  */
- BOOL WINAPI RemoveDirectoryW( LPCWSTR path )
- {
-+    FILE_BASIC_INFORMATION info;
-     OBJECT_ATTRIBUTES attr;
-     UNICODE_STRING nt_name;
-     ANSI_STRING unix_name;
-@@ -264,15 +265,21 @@ BOOL WINAPI RemoveDirectoryW( LPCWSTR path )
-     }
- 
-     status = wine_nt_to_unix_file_name( &nt_name, &unix_name, FILE_OPEN );
--    RtlFreeUnicodeString( &nt_name );
--    if (!set_ntstatus( status ))
-+    if (status == STATUS_SUCCESS)
-     {
--        NtClose( handle );
--        return FALSE;
-+        status = NtQueryAttributesFile( &attr, &info );
-+        if (status == STATUS_SUCCESS && (info.FileAttributes & FILE_ATTRIBUTE_REPARSE_POINT) &&
-+                                        (info.FileAttributes & FILE_ATTRIBUTE_DIRECTORY))
-+            ret = (unlink( unix_name.Buffer ) != -1);
-+        else
-+            ret = (rmdir( unix_name.Buffer ) != -1);
-+        if (!ret) FILE_SetDosError();
-+        RtlFreeAnsiString( &unix_name );
-     }
-+    else
-+        set_ntstatus( status );
-+    RtlFreeUnicodeString( &nt_name );
- 
--    if (!(ret = (rmdir( unix_name.Buffer ) != -1))) FILE_SetDosError();
--    RtlFreeAnsiString( &unix_name );
-     NtClose( handle );
-     return ret;
- }
 diff --git a/dlls/ntdll/tests/file.c b/dlls/ntdll/tests/file.c
-index c7107500939..5b71f6f658b 100644
+index 6b3071f4095..1d5e0ce95b0 100644
 --- a/dlls/ntdll/tests/file.c
 +++ b/dlls/ntdll/tests/file.c
-@@ -5009,7 +5009,7 @@ static void test_reparse_points(void)
+@@ -5010,7 +5010,7 @@ static void test_reparse_points(void)
      REPARSE_GUID_DATA_BUFFER guid_buffer;
      static const WCHAR dotW[] = {'.',0};
      REPARSE_DATA_BUFFER *buffer = NULL;
@@ -63,7 +22,7 @@ index c7107500939..5b71f6f658b 100644
      INT buffer_len, string_len;
      IO_STATUS_BLOCK iosb;
      UNICODE_STRING nameW;
-@@ -5098,6 +5098,38 @@ static void test_reparse_points(void)
+@@ -5099,6 +5099,38 @@ static void test_reparse_points(void)
         "Junction point folder's access time does not match.\n");
      CloseHandle(handle);
  
diff --git a/patches/ntdll-Junction_Points/0015-kernel32-Set-error-code-when-attempting-to-delete-fi.patch b/patches/ntdll-Junction_Points/0015-kernel32-Set-error-code-when-attempting-to-delete-fi.patch
deleted file mode 100644
index 4434acd26..000000000
--- a/patches/ntdll-Junction_Points/0015-kernel32-Set-error-code-when-attempting-to-delete-fi.patch
+++ /dev/null
@@ -1,48 +0,0 @@
-From 95288f8fe17bf7c8f772c863fe49a85c117a71eb Mon Sep 17 00:00:00 2001
-From: "Erich E. Hoover" <erich.e.hoover@gmail.com>
-Date: Sat, 30 Mar 2019 12:01:50 -0600
-Subject: kernel32: Set error code when attempting to delete file symlinks as
- directories.
-
-Signed-off-by: Erich E. Hoover <erich.e.hoover@gmail.com>
----
- dlls/kernel32/path.c    | 5 ++++-
- dlls/ntdll/tests/file.c | 6 +++---
- 2 files changed, 7 insertions(+), 4 deletions(-)
-
-diff --git a/dlls/kernel32/path.c b/dlls/kernel32/path.c
-index 5ef66b5913..227473f71a 100644
---- a/dlls/kernel32/path.c
-+++ b/dlls/kernel32/path.c
-@@ -1738,7 +1738,10 @@ BOOL WINAPI RemoveDirectoryW( LPCWSTR path )
-             ret = (unlink( unix_name.Buffer ) != -1);
-         else
-             ret = (rmdir( unix_name.Buffer ) != -1);
--        if (!ret) FILE_SetDosError();
-+        if (status == STATUS_SUCCESS && (info.FileAttributes & FILE_ATTRIBUTE_REPARSE_POINT) &&
-+                                        !(info.FileAttributes & FILE_ATTRIBUTE_DIRECTORY))
-+            SetLastError( ERROR_DIRECTORY );
-+        else if (!ret) FILE_SetDosError();
-         RtlFreeAnsiString( &unix_name );
-     }
-     else
-diff --git a/dlls/ntdll/tests/file.c b/dlls/ntdll/tests/file.c
-index fbd824fd10..0041a41b6d 100644
---- a/dlls/ntdll/tests/file.c
-+++ b/dlls/ntdll/tests/file.c
-@@ -5067,9 +5067,9 @@ static void test_reparse_points(void)
-     bret = RemoveDirectoryW(reparse_path);
-     ok(!bret, "Succeeded in deleting file symlink as a directory!\n");
-     err = GetLastError();
--    todo_wine ok(err == ERROR_DIRECTORY,
--                 "Expected last error 0x%x for RemoveDirectory on file symlink (actually 0x%x)!\n",
--                 ERROR_DIRECTORY, err);
-+    ok(err == ERROR_DIRECTORY,
-+       "Expected last error 0x%x for RemoveDirectory on file symlink (actually 0x%x)!\n",
-+       ERROR_DIRECTORY, err);
-     dwret = GetFileAttributesW(reparse_path);
-     ok(dwret != (DWORD)~0, "Symlink doesn't exist (attributes: 0x%x)!\n", dwret);
-     ok(dwret & FILE_ATTRIBUTE_REPARSE_POINT, "File is not a symlink! (attributes: 0x%x)\n", dwret);
--- 
-2.17.1
-
diff --git a/patches/ntdll-Junction_Points/xx19-kernel32-Implement-CreateSymbolicLink-A-W-with-ntdll.patch b/patches/ntdll-Junction_Points/0019-kernel32-Implement-CreateSymbolicLink-A-W-with-ntdll.patch
similarity index 100%
rename from patches/ntdll-Junction_Points/xx19-kernel32-Implement-CreateSymbolicLink-A-W-with-ntdll.patch
rename to patches/ntdll-Junction_Points/0019-kernel32-Implement-CreateSymbolicLink-A-W-with-ntdll.patch
diff --git a/patches/ntdll-Junction_Points/definition b/patches/ntdll-Junction_Points/definition
index c52d948c9..628a6a78c 100644
--- a/patches/ntdll-Junction_Points/definition
+++ b/patches/ntdll-Junction_Points/definition
@@ -2,4 +2,5 @@ Fixes: [12401] NET Framework 2.0, 3.0, 4.0 installers and other apps that make u
 Fixes: [44948] Multiple apps (Spine (Mod starter for Gothic), MS Office 365 installer) need CreateSymbolicLinkW implementation
 # FIXME: patch 0006 was broken by e36a9c459d. We really want to get that information from ntdll instead, but the how is not trivial...
 # FIXME 2: patch 0019 needs to call RemoveDirectoryW() from kernelbase, but it's stuck in kernel32 for now...
+# FIXME 3: RemoveDirectory() doesn't work anymore, I think.
 Depends: ntdll-DOS_Attributes
diff --git a/patches/ntdll-Syscall_Emulation/definition b/patches/ntdll-Syscall_Emulation/definition
index c914e59bd..7b40380ca 100644
--- a/patches/ntdll-Syscall_Emulation/definition
+++ b/patches/ntdll-Syscall_Emulation/definition
@@ -1,4 +1,3 @@
 Fixes: [48291] Detroit: Become Human crashes on launch
-Depends: winebuild-Fake_Dlls
-# Re-enable me when winebuild-Fake_Dlls gets re-enabled!
+# Needs to be reimplemented on top of upstream syscall changes.
 Disabled: true
diff --git a/patches/ntdll-ThreadTime/0002-ntdll-Set-correct-thread-creation-time-for-SystemPro.patch b/patches/ntdll-ThreadTime/0002-ntdll-Set-correct-thread-creation-time-for-SystemPro.patch
deleted file mode 100644
index 5dd91b833..000000000
--- a/patches/ntdll-ThreadTime/0002-ntdll-Set-correct-thread-creation-time-for-SystemPro.patch
+++ /dev/null
@@ -1,92 +0,0 @@
-From 11ce8824189ece2741a98c932b22ac7ccf2f4388 Mon Sep 17 00:00:00 2001
-From: =?UTF-8?q?Michael=20M=C3=BCller?= <michael@fds-team.de>
-Date: Thu, 9 Mar 2017 00:00:46 +0100
-Subject: [PATCH] ntdll: Set correct thread creation time for
- SystemProcessInformation in NtQuerySystemInformation.
-
----
- dlls/ntdll/unix/system.c |  4 +++-
- server/protocol.def      |  1 +
- server/snapshot.c        | 13 +++++++------
- server/thread.h          |  1 +
- 4 files changed, 12 insertions(+), 7 deletions(-)
-
-diff --git a/dlls/ntdll/unix/system.c b/dlls/ntdll/unix/system.c
-index 7045bc1550b..3d37578b34a 100644
---- a/dlls/ntdll/unix/system.c
-+++ b/dlls/ntdll/unix/system.c
-@@ -2162,6 +2162,7 @@ NTSTATUS WINAPI NtQuerySystemInformation( SYSTEM_INFORMATION_CLASS class,
-                 while (ret == STATUS_SUCCESS)
-                 {
-                     int unix_tid, pid, tid, base_pri, delta_pri;
-+                    timeout_t creation_time;
-                     SERVER_START_REQ( next_thread )
-                     {
-                         req->handle = wine_server_obj_handle( handle );
-@@ -2173,6 +2174,7 @@ NTSTATUS WINAPI NtQuerySystemInformation( SYSTEM_INFORMATION_CLASS class,
-                             tid = reply->tid;
-                             base_pri = reply->base_pri;
-                             delta_pri = reply->delta_pri;
-+                            creation_time = reply->creation_time;
-                             j++;
-                         }
-                     }
-@@ -2184,7 +2186,7 @@ NTSTATUS WINAPI NtQuerySystemInformation( SYSTEM_INFORMATION_CLASS class,
-                         {
-                             memset(&spi->ti[i], 0, sizeof(spi->ti));
- 
--                            spi->ti[i].CreateTime.QuadPart = 0xdeadbeef;
-+                            spi->ti[i].CreateTime.QuadPart = creation_time;
-                             spi->ti[i].ClientId.UniqueProcess = UlongToHandle(pid);
-                             spi->ti[i].ClientId.UniqueThread  = UlongToHandle(tid);
-                             spi->ti[i].dwCurrentPriority = base_pri + delta_pri;
-diff --git a/server/protocol.def b/server/protocol.def
-index 38079f23daf..89a0332691c 100644
---- a/server/protocol.def
-+++ b/server/protocol.def
-@@ -1911,6 +1911,7 @@ enum char_info_mode
-     int          count;         /* thread usage count */
-     process_id_t pid;           /* process id */
-     thread_id_t  tid;           /* thread id */
-+    timeout_t    creation_time; /* thread creation time */
-     int          base_pri;      /* base priority */
-     int          delta_pri;     /* delta priority */
-     int          unix_tid;      /* thread native pid */
-diff --git a/server/snapshot.c b/server/snapshot.c
-index bdceaef5302..fe25e07e02a 100644
---- a/server/snapshot.c
-+++ b/server/snapshot.c
-@@ -145,12 +145,13 @@ static int snapshot_next_thread( struct snapshot *snapshot, struct next_thread_r
-         return 0;
-     }
-     ptr = &snapshot->threads[snapshot->thread_pos++];
--    reply->count     = ptr->count;
--    reply->pid       = get_process_id( ptr->thread->process );
--    reply->tid       = get_thread_id( ptr->thread );
--    reply->base_pri  = ptr->priority;
--    reply->delta_pri = 0;  /* FIXME */
--    reply->unix_tid  = ptr->thread->unix_tid;
-+    reply->count         = ptr->count;
-+    reply->pid           = get_process_id( ptr->thread->process );
-+    reply->tid           = get_thread_id( ptr->thread );
-+    reply->creation_time = get_thread_creation_time( ptr->thread );
-+    reply->base_pri      = ptr->priority;
-+    reply->delta_pri     = 0;  /* FIXME */
-+    reply->unix_tid      = ptr->thread->unix_tid;
-     return 1;
- }
- 
-diff --git a/server/thread.h b/server/thread.h
-index 5d12d24dd89..43b17534693 100644
---- a/server/thread.h
-+++ b/server/thread.h
-@@ -150,5 +150,6 @@ static inline void clear_error(void)             { set_error(0); }
- static inline void set_win32_error( unsigned int err ) { set_error( 0xc0010000 | err ); }
- 
- static inline thread_id_t get_thread_id( struct thread *thread ) { return thread->id; }
-+static inline timeout_t get_thread_creation_time( struct thread *thread ) { return thread->creation_time; }
- 
- #endif  /* __WINE_SERVER_THREAD_H */
--- 
-2.27.0
-
diff --git a/patches/ntdll-ThreadTime/0004-ntdll-Set-process-start-time.patch b/patches/ntdll-ThreadTime/0004-ntdll-Set-process-start-time.patch
deleted file mode 100644
index 10bdb13e5..000000000
--- a/patches/ntdll-ThreadTime/0004-ntdll-Set-process-start-time.patch
+++ /dev/null
@@ -1,64 +0,0 @@
-From 72c4b3f95ad4c8a8ed31ad61c3678cf7d534fba9 Mon Sep 17 00:00:00 2001
-From: =?UTF-8?q?Michael=20M=C3=BCller?= <michael@fds-team.de>
-Date: Thu, 9 Mar 2017 16:32:59 +0100
-Subject: [PATCH] ntdll: Set process start time.
-
----
- dlls/ntdll/unix/system.c |  1 +
- server/protocol.def      |  1 +
- server/snapshot.c        | 15 ++++++++-------
- 3 files changed, 10 insertions(+), 7 deletions(-)
-
-diff --git a/dlls/ntdll/unix/system.c b/dlls/ntdll/unix/system.c
-index f137ccf97a7..94915bd9e47 100644
---- a/dlls/ntdll/unix/system.c
-+++ b/dlls/ntdll/unix/system.c
-@@ -2137,6 +2137,7 @@ NTSTATUS WINAPI NtQuerySystemInformation( SYSTEM_INFORMATION_CLASS class,
-                         spi->UniqueProcessId = UlongToHandle(reply->pid);
-                         spi->ParentProcessId = UlongToHandle(reply->ppid);
-                         spi->HandleCount = reply->handles;
-+                        spi->CreationTime.QuadPart = reply->start_time;
- 
-                         /* spi->ti will be set later on */
- 
-diff --git a/server/protocol.def b/server/protocol.def
-index 89a0332691c..b29e014958e 100644
---- a/server/protocol.def
-+++ b/server/protocol.def
-@@ -1899,6 +1899,7 @@ enum char_info_mode
-     int          priority;      /* process priority */
-     int          handles;       /* number of handles */
-     int          unix_pid;      /* Unix pid */
-+    timeout_t    start_time;    /* start time */
-     VARARG(filename,unicode_str); /* file name of main exe */
- @END
- 
-diff --git a/server/snapshot.c b/server/snapshot.c
-index fe25e07e02a..b6b790e21bd 100644
---- a/server/snapshot.c
-+++ b/server/snapshot.c
-@@ -114,13 +114,14 @@ static int snapshot_next_process( struct snapshot *snapshot, struct next_process
-         return 0;
-     }
-     ptr = &snapshot->processes[snapshot->process_pos++];
--    reply->count    = ptr->count;
--    reply->pid      = get_process_id( ptr->process );
--    reply->ppid     = ptr->process->parent_id;
--    reply->threads  = ptr->threads;
--    reply->priority = ptr->priority;
--    reply->handles  = ptr->handles;
--    reply->unix_pid = ptr->process->unix_pid;
-+    reply->count      = ptr->count;
-+    reply->pid        = get_process_id( ptr->process );
-+    reply->ppid       = ptr->process->parent_id;
-+    reply->threads    = ptr->threads;
-+    reply->priority   = ptr->priority;
-+    reply->handles    = ptr->handles;
-+    reply->unix_pid   = ptr->process->unix_pid;
-+    reply->start_time = ptr->process->start_time;
-     if ((exe_module = get_process_exe_module( ptr->process )) && exe_module->filename)
-     {
-         data_size_t len = min( exe_module->namelen, get_reply_max_size() );
--- 
-2.27.0
-
diff --git a/patches/ntdll-Thread_Stack/definition b/patches/ntdll-Thread_Stack/definition
index f45817141..e2fe47ffd 100644
--- a/patches/ntdll-Thread_Stack/definition
+++ b/patches/ntdll-Thread_Stack/definition
@@ -1,4 +1,3 @@
 Fixes: Use a separate stack when starting new threads
 Fixes: Ignore invalid exit_frame when exiting thread
-Depends: ntdll-ThreadTime
 Disabled: true
diff --git a/patches/patchinstall.sh b/patches/patchinstall.sh
index 63c978db0..60412bcdb 100755
--- a/patches/patchinstall.sh
+++ b/patches/patchinstall.sh
@@ -3669,8 +3669,9 @@ fi
 # |   *	[#44948] Multiple apps (Spine (Mod starter for Gothic), MS Office 365 installer) need CreateSymbolicLinkW implementation
 # |
 # | Modified files:
-# |   *	configure.ac, dlls/kernel32/path.c, dlls/ntdll/tests/file.c, dlls/ntdll/unix/file.c, include/Makefile.in,
-# | 	include/ntifs.h, include/wine/port.h, include/winternl.h, libs/port/Makefile.in, libs/port/renameat2.c, server/fd.c
+# |   *	configure.ac, dlls/kernel32/path.c, dlls/kernel32/tests/path.c, dlls/kernelbase/file.c, dlls/msvcp120/tests/msvcp120.c,
+# | 	dlls/msvcp140/tests/msvcp140.c, dlls/ntdll/tests/file.c, dlls/ntdll/unix/file.c, include/Makefile.in, include/ntifs.h,
+# | 	include/wine/port.h, include/winternl.h, libs/port/Makefile.in, libs/port/renameat2.c, server/fd.c
 # |
 if test "$enable_ntdll_Junction_Points" -eq 1; then
 	patch_apply ntdll-Junction_Points/0001-ntdll-Add-support-for-junction-point-creation.patch
@@ -3686,10 +3687,10 @@ if test "$enable_ntdll_Junction_Points" -eq 1; then
 	patch_apply ntdll-Junction_Points/0012-ntdll-Add-support-for-file-symlinks.patch
 	patch_apply ntdll-Junction_Points/0013-ntdll-Allow-creation-of-dangling-reparse-points-to-n.patch
 	patch_apply ntdll-Junction_Points/0014-ntdll-Correctly-report-file-symbolic-links-as-files.patch
-	patch_apply ntdll-Junction_Points/0015-kernel32-Set-error-code-when-attempting-to-delete-fi.patch
 	patch_apply ntdll-Junction_Points/0016-server-Properly-handle-file-symlink-deletion.patch
 	patch_apply ntdll-Junction_Points/0017-ntdll-Always-report-symbolic-links-as-containing-zer.patch
 	patch_apply ntdll-Junction_Points/0018-ntdll-Find-dangling-symlinks-quickly.patch
+	patch_apply ntdll-Junction_Points/0019-kernel32-Implement-CreateSymbolicLink-A-W-with-ntdll.patch
 	(
 		printf '%s\n' '+    { "Erich E. Hoover", "ntdll: Add support for junction point creation.", 1 },';
 		printf '%s\n' '+    { "Erich E. Hoover", "ntdll: Add support for reading junction points.", 1 },';
@@ -3704,10 +3705,10 @@ if test "$enable_ntdll_Junction_Points" -eq 1; then
 		printf '%s\n' '+    { "Erich E. Hoover", "ntdll: Add support for file symlinks.", 1 },';
 		printf '%s\n' '+    { "Erich E. Hoover", "ntdll: Allow creation of dangling reparse points to non-existent paths.", 1 },';
 		printf '%s\n' '+    { "Erich E. Hoover", "ntdll: Correctly report file symbolic links as files.", 1 },';
-		printf '%s\n' '+    { "Erich E. Hoover", "kernel32: Set error code when attempting to delete file symlinks as directories.", 1 },';
 		printf '%s\n' '+    { "Erich E. Hoover", "server: Properly handle file symlink deletion.", 1 },';
 		printf '%s\n' '+    { "Erich E. Hoover", "ntdll: Always report symbolic links as containing zero bytes.", 1 },';
 		printf '%s\n' '+    { "Erich E. Hoover", "ntdll: Find dangling symlinks quickly.", 1 },';
+		printf '%s\n' '+    { "Erich E. Hoover", "kernel32: Implement CreateSymbolicLink[A|W] with ntdll reparse points.", 1 },';
 	) >> "$patchlist"
 fi
 
@@ -4470,7 +4471,7 @@ fi
 # |   *	[#45374] Yet Another Process Monitor (.NET 2.0 app) reports System.AccessViolationException
 # |
 # | Modified files:
-# |   *	dlls/ntdll/om.c, dlls/ntdll/tests/info.c, dlls/ntdll/tests/om.c, dlls/ntdll/unix/system.c, include/winternl.h,
+# |   *	dlls/ntdll/tests/info.c, dlls/ntdll/tests/om.c, dlls/ntdll/unix/file.c, dlls/ntdll/unix/system.c, include/winternl.h,
 # | 	server/completion.c, server/directory.c, server/event.c, server/file.c, server/handle.c, server/mailslot.c,
 # | 	server/main.c, server/mapping.c, server/mutex.c, server/named_pipe.c, server/object.c, server/object.h,
 # | 	server/process.c, server/protocol.def, server/registry.c, server/semaphore.c, server/symlink.c, server/thread.c,
diff --git a/patches/server-Object_Types/0002-ntdll-Implement-ObjectTypesInformation-in-NtQueryObj.patch b/patches/server-Object_Types/0002-ntdll-Implement-ObjectTypesInformation-in-NtQueryObj.patch
index 99ea6b2dc..cdf7557ad 100644
--- a/patches/server-Object_Types/0002-ntdll-Implement-ObjectTypesInformation-in-NtQueryObj.patch
+++ b/patches/server-Object_Types/0002-ntdll-Implement-ObjectTypesInformation-in-NtQueryObj.patch
@@ -1,90 +1,21 @@
-From df0394fbe1b04909081ab265eb8ec7f20ff4e8b6 Mon Sep 17 00:00:00 2001
+From 6c4383e0d465d9cf79e772687111ac7b5d250b75 Mon Sep 17 00:00:00 2001
 From: =?UTF-8?q?Michael=20M=C3=BCller?= <michael@fds-team.de>
 Date: Wed, 8 Mar 2017 02:12:37 +0100
-Subject: ntdll: Implement ObjectTypesInformation in NtQueryObject.
+Subject: [PATCH] ntdll: Implement ObjectTypesInformation in NtQueryObject.
 
 ---
- dlls/ntdll/om.c       | 51 ++++++++++++++++++++++++++++++++++++++
- dlls/ntdll/tests/om.c | 57 +++++++++++++++++++++++++++++++++++++++++++
- include/winternl.h    | 30 +++++++++++++++++++++--
- server/directory.c    | 19 ++++++++++++++-
- server/protocol.def   |  9 +++++++
- 5 files changed, 163 insertions(+), 3 deletions(-)
+ dlls/ntdll/tests/om.c  | 57 ++++++++++++++++++++++++++++++++++++++++++
+ dlls/ntdll/unix/file.c | 53 +++++++++++++++++++++++++++++++++++++++
+ include/winternl.h     | 30 ++++++++++++++++++++--
+ server/directory.c     | 19 +++++++++++++-
+ server/protocol.def    |  9 +++++++
+ 5 files changed, 165 insertions(+), 3 deletions(-)
 
-diff --git a/dlls/ntdll/om.c b/dlls/ntdll/om.c
-index 0b562513..88a4f800 100644
---- a/dlls/ntdll/om.c
-+++ b/dlls/ntdll/om.c
-@@ -42,6 +42,7 @@
- 
- WINE_DEFAULT_DEBUG_CHANNEL(ntdll);
- 
-+#define ROUND_UP(value, alignment) (((value) + ((alignment) - 1)) & ~((alignment)-1))
- 
- /*
-  *	Generic object functions
-@@ -187,6 +188,56 @@ NTSTATUS WINAPI NtQueryObject(IN HANDLE handle,
-             SERVER_END_REQ;
-         }
-         break;
-+    case ObjectTypesInformation:
-+        {
-+            OBJECT_TYPES_INFORMATION *p = ptr;
-+            OBJECT_TYPE_INFORMATION *type = (OBJECT_TYPE_INFORMATION *)(p + 1);
-+            ULONG count, type_len, req_len = sizeof(OBJECT_TYPES_INFORMATION);
-+
-+            for (count = 0, status = STATUS_SUCCESS; !status; count++)
-+            {
-+                SERVER_START_REQ( get_object_type_by_index )
-+                {
-+                    req->index = count;
-+                    if (len > sizeof(*type))
-+                        wine_server_set_reply( req, type + 1, len - sizeof(*type) );
-+                    status = wine_server_call( req );
-+                    if (status == STATUS_SUCCESS)
-+                    {
-+                        type_len = sizeof(*type);
-+                        if (reply->total)
-+                            type_len += ROUND_UP( reply->total + sizeof(WCHAR), sizeof(DWORD_PTR) );
-+                        req_len += type_len;
-+                    }
-+                    if (status == STATUS_SUCCESS && len >= req_len)
-+                    {
-+                        ULONG res = wine_server_reply_size( reply );
-+                        memset( type, 0, sizeof(*type) );
-+                        if (reply->total)
-+                        {
-+                            type->TypeName.Buffer = (WCHAR *)(type + 1);
-+                            type->TypeName.Length = res;
-+                            type->TypeName.MaximumLength = res + sizeof(WCHAR);
-+                            type->TypeName.Buffer[res / sizeof(WCHAR)] = 0;
-+                        }
-+                        type->TypeIndex = count;
-+                        type = (OBJECT_TYPE_INFORMATION *)((char *)type + type_len);
-+                    }
-+                }
-+                SERVER_END_REQ;
-+            }
-+
-+            if (status != STATUS_NO_MORE_ENTRIES)
-+                return status;
-+
-+            if (used_len) *used_len = req_len;
-+            if (len < req_len)
-+                return STATUS_INFO_LENGTH_MISMATCH;
-+
-+            p->NumberOfTypes = count - 1;
-+            status = STATUS_SUCCESS;
-+        }
-+        break;
-     case ObjectDataInformation:
-         {
-             OBJECT_DATA_INFORMATION* p = ptr;
 diff --git a/dlls/ntdll/tests/om.c b/dlls/ntdll/tests/om.c
-index 3f627aad..dbe7be39 100644
+index c17b6ffa8db..6e760066915 100644
 --- a/dlls/ntdll/tests/om.c
 +++ b/dlls/ntdll/tests/om.c
-@@ -79,6 +79,21 @@ static void     (WINAPI *pRtlWakeAddressSingle)( const void * );
+@@ -81,6 +81,21 @@ static void     (WINAPI *pRtlWakeAddressSingle)( const void * );
  #define KEYEDEVENT_WAKE       0x0002
  #define KEYEDEVENT_ALL_ACCESS (STANDARD_RIGHTS_REQUIRED | 0x0003)
  
@@ -106,7 +37,7 @@ index 3f627aad..dbe7be39 100644
  static void test_case_sensitive (void)
  {
      static const WCHAR buffer1[] = {'\\','B','a','s','e','N','a','m','e','d','O','b','j','e','c','t','s','\\','t','e','s','t',0};
-@@ -1579,6 +1594,47 @@ static void test_query_object(void)
+@@ -1583,6 +1598,47 @@ static void test_query_object(void)
  
  }
  
@@ -154,7 +85,7 @@ index 3f627aad..dbe7be39 100644
  static void test_type_mismatch(void)
  {
      HANDLE h;
-@@ -2178,6 +2234,7 @@ START_TEST(om)
+@@ -2215,6 +2271,7 @@ START_TEST(om)
      test_directory();
      test_symboliclink();
      test_query_object();
@@ -162,11 +93,82 @@ index 3f627aad..dbe7be39 100644
      test_type_mismatch();
      test_event();
      test_mutant();
+diff --git a/dlls/ntdll/unix/file.c b/dlls/ntdll/unix/file.c
+index dff246f5e74..708fe842020 100644
+--- a/dlls/ntdll/unix/file.c
++++ b/dlls/ntdll/unix/file.c
+@@ -130,6 +130,8 @@
+ WINE_DEFAULT_DEBUG_CHANNEL(file);
+ WINE_DECLARE_DEBUG_CHANNEL(winediag);
+ 
++#define ROUND_UP(value, alignment) (((value) + ((alignment) - 1)) & ~((alignment)-1))
++
+ #define MAX_DOS_DRIVES 26
+ 
+ #define FILE_WRITE_TO_END_OF_FILE      ((LONGLONG)-1)
+@@ -6464,6 +6466,57 @@ NTSTATUS WINAPI NtQueryObject( HANDLE handle, OBJECT_INFORMATION_CLASS info_clas
+         break;
+     }
+ 
++    case ObjectTypesInformation:
++    {
++        OBJECT_TYPES_INFORMATION *p = ptr;
++        OBJECT_TYPE_INFORMATION *type = (OBJECT_TYPE_INFORMATION *)(p + 1);
++        ULONG count, type_len, req_len = sizeof(OBJECT_TYPES_INFORMATION);
++
++        for (count = 0, status = STATUS_SUCCESS; !status; count++)
++        {
++            SERVER_START_REQ( get_object_type_by_index )
++            {
++                req->index = count;
++                if (len > sizeof(*type))
++                    wine_server_set_reply( req, type + 1, len - sizeof(*type) );
++                status = wine_server_call( req );
++                if (status == STATUS_SUCCESS)
++                {
++                    type_len = sizeof(*type);
++                    if (reply->total)
++                        type_len += ROUND_UP( reply->total + sizeof(WCHAR), sizeof(DWORD_PTR) );
++                    req_len += type_len;
++                }
++                if (status == STATUS_SUCCESS && len >= req_len)
++                {
++                    ULONG res = wine_server_reply_size( reply );
++                    memset( type, 0, sizeof(*type) );
++                    if (reply->total)
++                    {
++                        type->TypeName.Buffer = (WCHAR *)(type + 1);
++                        type->TypeName.Length = res;
++                        type->TypeName.MaximumLength = res + sizeof(WCHAR);
++                        type->TypeName.Buffer[res / sizeof(WCHAR)] = 0;
++                    }
++                    type->TypeIndex = count;
++                    type = (OBJECT_TYPE_INFORMATION *)((char *)type + type_len);
++                }
++            }
++            SERVER_END_REQ;
++        }
++
++        if (status != STATUS_NO_MORE_ENTRIES)
++            return status;
++
++        if (used_len) *used_len = req_len;
++        if (len < req_len)
++            return STATUS_INFO_LENGTH_MISMATCH;
++
++        p->NumberOfTypes = count - 1;
++        status = STATUS_SUCCESS;
++        break;
++    }
++
+     case ObjectDataInformation:
+     {
+         OBJECT_DATA_INFORMATION* p = ptr;
 diff --git a/include/winternl.h b/include/winternl.h
-index 0c8a5014..0b17c2f5 100644
+index 347b79ef8e0..fbc52b7d127 100644
 --- a/include/winternl.h
 +++ b/include/winternl.h
-@@ -826,7 +826,7 @@ typedef enum _OBJECT_INFORMATION_CLASS {
+@@ -843,7 +843,7 @@ typedef enum _OBJECT_INFORMATION_CLASS {
      ObjectBasicInformation,
      ObjectNameInformation,
      ObjectTypeInformation,
@@ -175,7 +177,7 @@ index 0c8a5014..0b17c2f5 100644
      ObjectDataInformation
  } OBJECT_INFORMATION_CLASS, *POBJECT_INFORMATION_CLASS;
  
-@@ -1237,9 +1237,35 @@ typedef struct _OBJECT_NAME_INFORMATION {
+@@ -1281,9 +1281,35 @@ typedef struct _OBJECT_NAME_INFORMATION {
  
  typedef struct __OBJECT_TYPE_INFORMATION {
      UNICODE_STRING TypeName;
@@ -213,10 +215,10 @@ index 0c8a5014..0b17c2f5 100644
  #ifdef __WINESRC__
      DWORD_PTR ExitStatus;
 diff --git a/server/directory.c b/server/directory.c
-index 6aa3a55f..6e22a741 100644
+index 4d38393a6c8..799102379ff 100644
 --- a/server/directory.c
 +++ b/server/directory.c
-@@ -71,6 +71,8 @@ static const struct object_ops object_type_ops =
+@@ -72,6 +72,8 @@ static const struct object_ops object_type_ops =
      no_destroy                    /* destroy */
  };
  
@@ -235,7 +237,7 @@ index 6aa3a55f..6e22a741 100644
              make_object_static( &type->obj );
          }
          clear_error();
-@@ -529,3 +532,17 @@ DECL_HANDLER(get_object_type)
+@@ -563,3 +566,17 @@ DECL_HANDLER(get_object_type)
      }
      release_object( obj );
  }
@@ -254,10 +256,10 @@ index 6aa3a55f..6e22a741 100644
 +    else set_error( STATUS_NO_MORE_ENTRIES );
 +}
 diff --git a/server/protocol.def b/server/protocol.def
-index 3ffb8940..0d866986 100644
+index bf2d8bfd167..def84b35967 100644
 --- a/server/protocol.def
 +++ b/server/protocol.def
-@@ -3575,6 +3575,15 @@ struct handle_info
+@@ -3533,6 +3533,15 @@ struct handle_info
  @END
  
  
@@ -274,5 +276,5 @@ index 3ffb8940..0d866986 100644
  @REQ(unlink_object)
      obj_handle_t   handle;        /* handle to the object */
 -- 
-2.20.1
+2.27.0
 
diff --git a/patches/server-Object_Types/0008-ntdll-Set-TypeIndex-for-ObjectTypeInformation-in-NtQ.patch b/patches/server-Object_Types/0008-ntdll-Set-TypeIndex-for-ObjectTypeInformation-in-NtQ.patch
index feb7ddfc4..7b417333c 100644
--- a/patches/server-Object_Types/0008-ntdll-Set-TypeIndex-for-ObjectTypeInformation-in-NtQ.patch
+++ b/patches/server-Object_Types/0008-ntdll-Set-TypeIndex-for-ObjectTypeInformation-in-NtQ.patch
@@ -1,31 +1,32 @@
-From 1e3e93483b223c6e0e9d712fff4a8874c503c973 Mon Sep 17 00:00:00 2001
+From 574a79c56964a86181cb721b5e7e4f672455027e Mon Sep 17 00:00:00 2001
 From: =?UTF-8?q?Michael=20M=C3=BCller?= <michael@fds-team.de>
 Date: Wed, 8 Mar 2017 17:41:11 +0100
-Subject: ntdll: Set TypeIndex for ObjectTypeInformation in NtQueryObject.
+Subject: [PATCH] ntdll: Set TypeIndex for ObjectTypeInformation in
+ NtQueryObject.
 
 ---
- dlls/ntdll/om.c     | 4 ++++
- server/directory.c  | 5 ++++-
- server/protocol.def | 1 +
+ dlls/ntdll/unix/file.c | 4 ++++
+ server/directory.c     | 5 ++++-
+ server/protocol.def    | 1 +
  3 files changed, 9 insertions(+), 1 deletion(-)
 
-diff --git a/dlls/ntdll/om.c b/dlls/ntdll/om.c
-index 8911a28b20..8f54d4f49f 100644
---- a/dlls/ntdll/om.c
-+++ b/dlls/ntdll/om.c
-@@ -184,6 +184,10 @@ NTSTATUS WINAPI NtQueryObject(IN HANDLE handle,
-                         p->TypeName.Buffer[res / sizeof(WCHAR)] = 0;
-                         if (used_len) *used_len = sizeof(*p) + p->TypeName.MaximumLength;
-                     }
-+                    if (status == STATUS_SUCCESS)
-+                    {
-+                        p->TypeIndex = reply->index;
-+                    }
+diff --git a/dlls/ntdll/unix/file.c b/dlls/ntdll/unix/file.c
+index 708fe842020..4544df55d16 100644
+--- a/dlls/ntdll/unix/file.c
++++ b/dlls/ntdll/unix/file.c
+@@ -6460,6 +6460,10 @@ NTSTATUS WINAPI NtQueryObject( HANDLE handle, OBJECT_INFORMATION_CLASS info_clas
+                     p->TypeName.Buffer[res / sizeof(WCHAR)] = 0;
+                     if (used_len) *used_len = sizeof(*p) + p->TypeName.MaximumLength;
                  }
++                if (status == STATUS_SUCCESS)
++                {
++                    p->TypeIndex = reply->index;
++                }
              }
-             SERVER_END_REQ;
+         }
+         SERVER_END_REQ;
 diff --git a/server/directory.c b/server/directory.c
-index b4f53e2edf..59c8194d09 100644
+index 0d5a320690e..1bc97fb2682 100644
 --- a/server/directory.c
 +++ b/server/directory.c
 @@ -44,6 +44,7 @@
@@ -36,7 +37,7 @@ index b4f53e2edf..59c8194d09 100644
  };
  
  static void object_type_dump( struct object *obj, int verbose );
-@@ -239,7 +240,8 @@ struct object_type *get_object_type( const struct unicode_str *name )
+@@ -237,7 +238,8 @@ struct object_type *get_object_type( const struct unicode_str *name )
          if (get_error() != STATUS_OBJECT_NAME_EXISTS)
          {
              assert( object_type_count < sizeof(object_type_list)/sizeof(object_type_list[0]) );
@@ -46,7 +47,7 @@ index b4f53e2edf..59c8194d09 100644
              make_object_static( &type->obj );
          }
          clear_error();
-@@ -528,6 +530,7 @@ DECL_HANDLER(get_object_type)
+@@ -560,6 +562,7 @@ DECL_HANDLER(get_object_type)
      {
          if ((name = get_object_name( &type->obj, &reply->total )))
              set_reply_data( name, min( reply->total, get_reply_max_size() ) );
@@ -55,10 +56,10 @@ index b4f53e2edf..59c8194d09 100644
      }
      release_object( obj );
 diff --git a/server/protocol.def b/server/protocol.def
-index 98c4c58a4e..d6847f8d55 100644
+index def84b35967..3406a056688 100644
 --- a/server/protocol.def
 +++ b/server/protocol.def
-@@ -3543,6 +3543,7 @@ struct handle_info
+@@ -3528,6 +3528,7 @@ struct handle_info
  @REQ(get_object_type)
      obj_handle_t   handle;        /* handle to the object */
  @REPLY
@@ -67,5 +68,5 @@ index 98c4c58a4e..d6847f8d55 100644
      VARARG(type,unicode_str);     /* type name */
  @END
 -- 
-2.11.0
+2.27.0
 
diff --git a/patches/server-Object_Types/0010-ntdll-Mimic-object-type-behavior-for-different-windo.patch b/patches/server-Object_Types/0010-ntdll-Mimic-object-type-behavior-for-different-windo.patch
index 36280992b..76db9a0fd 100644
--- a/patches/server-Object_Types/0010-ntdll-Mimic-object-type-behavior-for-different-windo.patch
+++ b/patches/server-Object_Types/0010-ntdll-Mimic-object-type-behavior-for-different-windo.patch
@@ -1,31 +1,15 @@
-From 76c342fe6c01c59bfcf387f19046d78415227f3d Mon Sep 17 00:00:00 2001
+From a82fe5d2ad7ff0683ca7078dffb232676ea8a16f Mon Sep 17 00:00:00 2001
 From: =?UTF-8?q?Michael=20M=C3=BCller?= <michael@fds-team.de>
 Date: Wed, 8 Mar 2017 19:39:29 +0100
 Subject: [PATCH] ntdll: Mimic object type behavior for different windows
  versions.
 
 ---
- dlls/ntdll/om.c          |  5 +++-
  dlls/ntdll/tests/om.c    | 65 +++++++++++++++++++++++++++++++++++++++-
+ dlls/ntdll/unix/file.c   |  5 +++-
  dlls/ntdll/unix/system.c | 17 +++++++++--
  3 files changed, 82 insertions(+), 5 deletions(-)
 
-diff --git a/dlls/ntdll/om.c b/dlls/ntdll/om.c
-index 4fea106cc46..eea095acbf9 100644
---- a/dlls/ntdll/om.c
-+++ b/dlls/ntdll/om.c
-@@ -182,7 +182,10 @@ NTSTATUS WINAPI NtQueryObject(IN HANDLE handle,
-                     }
-                     if (status == STATUS_SUCCESS)
-                     {
--                        p->TypeIndex = reply->index;
-+                        WORD version = MAKEWORD(NtCurrentTeb()->Peb->OSMinorVersion,
-+                                                NtCurrentTeb()->Peb->OSMajorVersion);
-+                        if (version >= 0x0602)
-+                            p->TypeIndex = reply->index;
-                     }
-                 }
-             }
 diff --git a/dlls/ntdll/tests/om.c b/dlls/ntdll/tests/om.c
 index 398ad6bed4e..b538160f6d0 100644
 --- a/dlls/ntdll/tests/om.c
@@ -134,8 +118,24 @@ index 398ad6bed4e..b538160f6d0 100644
  
      test_case_sensitive();
      test_namespace_pipe();
+diff --git a/dlls/ntdll/unix/file.c b/dlls/ntdll/unix/file.c
+index 4544df55d16..8ff963585da 100644
+--- a/dlls/ntdll/unix/file.c
++++ b/dlls/ntdll/unix/file.c
+@@ -6462,7 +6462,10 @@ NTSTATUS WINAPI NtQueryObject( HANDLE handle, OBJECT_INFORMATION_CLASS info_clas
+                 }
+                 if (status == STATUS_SUCCESS)
+                 {
+-                    p->TypeIndex = reply->index;
++                    WORD version = MAKEWORD(NtCurrentTeb()->Peb->OSMinorVersion,
++                                            NtCurrentTeb()->Peb->OSMajorVersion);
++                    if (version >= 0x0602)
++                        p->TypeIndex = reply->index;
+                 }
+             }
+         }
 diff --git a/dlls/ntdll/unix/system.c b/dlls/ntdll/unix/system.c
-index 9b42c475b47..828b891be9c 100644
+index cd2f45d9f55..b56747e0273 100644
 --- a/dlls/ntdll/unix/system.c
 +++ b/dlls/ntdll/unix/system.c
 @@ -2024,6 +2024,18 @@ static void get_timezone_info( RTL_DYNAMIC_TIME_ZONE_INFORMATION *tzi )
@@ -157,7 +157,7 @@ index 9b42c475b47..828b891be9c 100644
  
  /******************************************************************************
   *              NtQuerySystemInformation  (NTDLL.@)
-@@ -2407,7 +2419,7 @@ NTSTATUS WINAPI NtQuerySystemInformation( SYSTEM_INFORMATION_CLASS class,
+@@ -2390,7 +2402,7 @@ NTSTATUS WINAPI NtQuerySystemInformation( SYSTEM_INFORMATION_CLASS class,
                      shi->Handle[i].OwnerPid     = handle_info[i].owner;
                      shi->Handle[i].HandleValue  = handle_info[i].handle;
                      shi->Handle[i].AccessMask   = handle_info[i].access;
@@ -166,7 +166,7 @@ index 9b42c475b47..828b891be9c 100644
                      /* FIXME: Fill out HandleFlags, ObjectPointer */
                  }
              }
-@@ -2460,7 +2472,7 @@ NTSTATUS WINAPI NtQuerySystemInformation( SYSTEM_INFORMATION_CLASS class,
+@@ -2443,7 +2455,7 @@ NTSTATUS WINAPI NtQuerySystemInformation( SYSTEM_INFORMATION_CLASS class,
                      shi->Handle[i].UniqueProcessId = handle_info[i].owner;
                      shi->Handle[i].HandleValue     = handle_info[i].handle;
                      shi->Handle[i].GrantedAccess   = handle_info[i].access;
@@ -175,7 +175,7 @@ index 9b42c475b47..828b891be9c 100644
                      /* FIXME: Fill out remaining fields */
                  }
              }
-@@ -2720,7 +2732,6 @@ NTSTATUS WINAPI NtQuerySystemInformation( SYSTEM_INFORMATION_CLASS class,
+@@ -2663,7 +2675,6 @@ NTSTATUS WINAPI NtQuerySystemInformation( SYSTEM_INFORMATION_CLASS class,
      return ret;
  }
  
diff --git a/patches/winebuild-Fake_Dlls/0001-kernel32-tests-Add-basic-tests-for-fake-dlls.patch b/patches/winebuild-Fake_Dlls/0001-kernel32-tests-Add-basic-tests-for-fake-dlls.patch
deleted file mode 100644
index 21d69fd59..000000000
--- a/patches/winebuild-Fake_Dlls/0001-kernel32-tests-Add-basic-tests-for-fake-dlls.patch
+++ /dev/null
@@ -1,121 +0,0 @@
-From 8b88aa45856684e63786425f72886f2ac57b3630 Mon Sep 17 00:00:00 2001
-From: =?UTF-8?q?Michael=20M=C3=BCller?= <michael@fds-team.de>
-Date: Thu, 25 May 2017 07:02:46 +0200
-Subject: [PATCH] kernel32/tests: Add basic tests for fake dlls.
-
----
- dlls/kernel32/tests/loader.c | 91 ++++++++++++++++++++++++++++++++++++
- 1 file changed, 91 insertions(+)
-
-diff --git a/dlls/kernel32/tests/loader.c b/dlls/kernel32/tests/loader.c
-index ef8c47c04f1a..efd5a25a432d 100644
---- a/dlls/kernel32/tests/loader.c
-+++ b/dlls/kernel32/tests/loader.c
-@@ -1572,6 +1572,96 @@ static void test_filenames(void)
-     DeleteFileA( long_path );
- }
- 
-+static void test_FakeDLL(void)
-+{
-+#ifdef __i386__
-+    NTSTATUS (WINAPI *pNtSetEvent)(HANDLE, ULONG *) = NULL;
-+    IMAGE_EXPORT_DIRECTORY *dir;
-+    HMODULE module = GetModuleHandleA("ntdll.dll");
-+    HANDLE file, map, event;
-+    WCHAR path[MAX_PATH];
-+    DWORD *names, *funcs;
-+    WORD *ordinals;
-+    ULONG size;
-+    void *ptr;
-+    int i;
-+
-+    GetModuleFileNameW(module, path, MAX_PATH);
-+
-+    file = CreateFileW(path, GENERIC_READ | GENERIC_EXECUTE, FILE_SHARE_READ, NULL, OPEN_EXISTING, 0, 0);
-+    ok(file != INVALID_HANDLE_VALUE, "Failed to open %s (error %u)\n", wine_dbgstr_w(path), GetLastError());
-+
-+    map = CreateFileMappingW(file, NULL, PAGE_EXECUTE_READ | SEC_IMAGE, 0, 0, NULL);
-+    ok(map != NULL, "CreateFileMapping failed with error %u\n", GetLastError());
-+    ptr = MapViewOfFile(map, FILE_MAP_READ | FILE_MAP_EXECUTE, 0, 0, 0);
-+    ok(ptr != NULL, "MapViewOfFile failed with error %u\n", GetLastError());
-+
-+    dir = RtlImageDirectoryEntryToData(ptr, TRUE, IMAGE_DIRECTORY_ENTRY_EXPORT, &size);
-+todo_wine
-+    ok(dir != NULL, "RtlImageDirectoryEntryToData failed\n");
-+    if (dir == NULL) goto done;
-+
-+    names    = RVAToAddr(dir->AddressOfNames, ptr);
-+    ordinals = RVAToAddr(dir->AddressOfNameOrdinals, ptr);
-+    funcs    = RVAToAddr(dir->AddressOfFunctions, ptr);
-+    ok(dir->NumberOfNames > 0, "Could not find any exported functions\n");
-+
-+    for (i = 0; i < dir->NumberOfNames; i++)
-+    {
-+        DWORD map_rva, dll_rva, map_offset, dll_offset;
-+        char *func_name = RVAToAddr(names[i], ptr);
-+        BYTE *dll_func, *map_func;
-+
-+        /* check only Nt functions for now */
-+        if (strncmp(func_name, "Zw", 2) && strncmp(func_name, "Nt", 2))
-+            continue;
-+
-+        dll_func = (BYTE *)GetProcAddress(module, func_name);
-+        ok(dll_func != NULL, "%s: GetProcAddress returned NULL\n", func_name);
-+        if (dll_func[0] == 0x90 && dll_func[1] == 0x90 &&
-+            dll_func[2] == 0x90 && dll_func[3] == 0x90)
-+        {
-+            todo_wine ok(0, "%s: Export is a stub-function, skipping\n", func_name);
-+            continue;
-+        }
-+
-+        /* check position in memory */
-+        dll_rva = (DWORD_PTR)dll_func - (DWORD_PTR)module;
-+        map_rva = funcs[ordinals[i]];
-+        ok(map_rva == dll_rva, "%s: Rva of mapped function (0x%x) does not match dll (0x%x)\n",
-+           func_name, dll_rva, map_rva);
-+
-+        /* check position in file */
-+        map_offset = (DWORD_PTR)RtlImageRvaToVa(RtlImageNtHeader(ptr),    ptr,    map_rva, NULL) - (DWORD_PTR)ptr;
-+        dll_offset = (DWORD_PTR)RtlImageRvaToVa(RtlImageNtHeader(module), module, dll_rva, NULL) - (DWORD_PTR)module;
-+        ok(map_offset == dll_offset, "%s: File offset of mapped function (0x%x) does not match dll (0x%x)\n",
-+           func_name, map_offset, dll_offset);
-+
-+        /* check function content */
-+        map_func = RVAToAddr(map_rva, ptr);
-+        ok(!memcmp(map_func, dll_func, 0x20), "%s: Function content does not match!\n", func_name);
-+
-+        if (!strcmp(func_name, "NtSetEvent"))
-+            pNtSetEvent = (void *)map_func;
-+    }
-+
-+    ok(pNtSetEvent != NULL, "Could not find NtSetEvent export\n");
-+    if (pNtSetEvent)
-+    {
-+        event = CreateEventA(NULL, TRUE, FALSE, NULL);
-+        ok(event != NULL, "CreateEvent failed with error %u\n", GetLastError());
-+        pNtSetEvent(event, 0);
-+        ok(WaitForSingleObject(event, 0) == WAIT_OBJECT_0, "Event was not signaled\n");
-+        CloseHandle(event);
-+    }
-+
-+done:
-+    UnmapViewOfFile(ptr);
-+    CloseHandle(map);
-+    CloseHandle(file);
-+#endif
-+}
-+
- /* Verify linking style of import descriptors */
- static void test_ImportDescriptors(void)
- {
-@@ -4094,6 +4184,7 @@ START_TEST(loader)
-         return;
-     }
- 
-+    test_FakeDLL();
-     test_filenames();
-     test_ResolveDelayLoadedAPI();
-     test_ImportDescriptors();
--- 
-2.26.2
-
diff --git a/patches/winebuild-Fake_Dlls/0002-krnl386.exe16-Do-not-abuse-WOW32Reserved-field-for-1.patch b/patches/winebuild-Fake_Dlls/0002-krnl386.exe16-Do-not-abuse-WOW32Reserved-field-for-1.patch
deleted file mode 100644
index ae98c2798..000000000
--- a/patches/winebuild-Fake_Dlls/0002-krnl386.exe16-Do-not-abuse-WOW32Reserved-field-for-1.patch
+++ /dev/null
@@ -1,660 +0,0 @@
-From 7af81866f286e60f601d1c3f9bfe8592a794d21d Mon Sep 17 00:00:00 2001
-From: Sebastian Lackner <sebastian@fds-team.de>
-Date: Tue, 16 May 2017 04:37:52 +0200
-Subject: [PATCH] krnl386.exe16: Do not abuse WOW32Reserved field for 16-bit
- stack address.
-
----
- dlls/dbghelp/cpu_i386.c               |  6 ++---
- dlls/krnl386.exe16/kernel.c           |  6 ++---
- dlls/krnl386.exe16/kernel16_private.h | 11 ++++----
- dlls/krnl386.exe16/ne_module.c        |  6 ++---
- dlls/krnl386.exe16/ne_segment.c       | 20 +++++++--------
- dlls/krnl386.exe16/task.c             | 14 +++++------
- dlls/krnl386.exe16/thunk.c            | 36 +++++++++++++--------------
- dlls/krnl386.exe16/wowthunk.c         | 20 +++++++--------
- dlls/ntdll/unix/signal_i386.c         |  2 +-
- dlls/system.drv16/system.c            |  2 +-
- dlls/toolhelp.dll16/toolhelp.c        |  6 ++---
- dlls/user.exe16/message.c             | 16 ++++++------
- dlls/user.exe16/user.c                |  4 +--
- dlls/user.exe16/window.c              |  2 +-
- include/winternl.h                    |  2 +-
- tools/winebuild/relay.c               |  2 +-
- 16 files changed, 78 insertions(+), 77 deletions(-)
-
-diff --git a/dlls/dbghelp/cpu_i386.c b/dlls/dbghelp/cpu_i386.c
-index fd808a0d3248..7d6723977a29 100644
---- a/dlls/dbghelp/cpu_i386.c
-+++ b/dlls/dbghelp/cpu_i386.c
-@@ -213,16 +213,16 @@ static BOOL i386_stack_walk(struct cpu_stack_walk *csw, STACKFRAME64 *frame,
-         /* Init done */
-         set_curr_mode((frame->AddrPC.Mode == AddrModeFlat) ? stm_32bit : stm_16bit);
- 
--        /* cur_switch holds address of WOW32Reserved field in TEB in debuggee
-+        /* cur_switch holds address of SystemReserved1[0] field in TEB in debuggee
-          * address space
-          */
-         if (NtQueryInformationThread(csw->hThread, ThreadBasicInformation, &info,
-                                      sizeof(info), NULL) == STATUS_SUCCESS)
-         {
--            curr_switch = (DWORD_PTR)info.TebBaseAddress + FIELD_OFFSET(TEB, WOW32Reserved);
-+            curr_switch = (DWORD_PTR)info.TebBaseAddress + FIELD_OFFSET(TEB, SystemReserved1[0]);
-             if (!sw_read_mem(csw, curr_switch, &p, sizeof(p)))
-             {
--                WARN("Can't read TEB:WOW32Reserved\n");
-+                WARN("Can't read TEB:SystemReserved1[0]\n");
-                 goto done_err;
-             }
-             next_switch = p;
-diff --git a/dlls/krnl386.exe16/kernel.c b/dlls/krnl386.exe16/kernel.c
-index 07a57d0d9372..89ea5c042e71 100644
---- a/dlls/krnl386.exe16/kernel.c
-+++ b/dlls/krnl386.exe16/kernel.c
-@@ -47,8 +47,8 @@ static void thread_attach(void)
-     /* allocate the 16-bit stack (FIXME: should be done lazily) */
-     HGLOBAL16 hstack = WOWGlobalAlloc16( GMEM_FIXED, 0x10000 );
-     kernel_get_thread_data()->stack_sel = GlobalHandleToSel16( hstack );
--    NtCurrentTeb()->WOW32Reserved = (void *)MAKESEGPTR( kernel_get_thread_data()->stack_sel,
--                                                        0x10000 - sizeof(STACK16FRAME) );
-+    NtCurrentTeb()->SystemReserved1[0] = (void *)MAKESEGPTR( kernel_get_thread_data()->stack_sel,
-+                                                             0x10000 - sizeof(STACK16FRAME) );
-     memset( (char *)GlobalLock16(hstack) + 0x10000 - sizeof(STACK16FRAME), 0, sizeof(STACK16FRAME) );
- }
- 
-@@ -60,7 +60,7 @@ static void thread_detach(void)
- {
-     /* free the 16-bit stack */
-     WOWGlobalFree16( kernel_get_thread_data()->stack_sel );
--    NtCurrentTeb()->WOW32Reserved = 0;
-+    NtCurrentTeb()->SystemReserved1[0] = 0;
-     if (NtCurrentTeb()->Tib.SubSystemTib) TASK_ExitTask();
- }
- 
-diff --git a/dlls/krnl386.exe16/kernel16_private.h b/dlls/krnl386.exe16/kernel16_private.h
-index f15934daa0e4..9f939a9d5bac 100644
---- a/dlls/krnl386.exe16/kernel16_private.h
-+++ b/dlls/krnl386.exe16/kernel16_private.h
-@@ -169,7 +169,7 @@ extern THHOOK *pThhook DECLSPEC_HIDDEN;
-     (((offset)+(size) <= pModule->mapping_size) ? \
-      (memcpy( buffer, (const char *)pModule->mapping + (offset), (size) ), TRUE) : FALSE)
- 
--#define CURRENT_STACK16 ((STACK16FRAME*)MapSL(PtrToUlong(NtCurrentTeb()->WOW32Reserved)))
-+#define CURRENT_STACK16 ((STACK16FRAME*)MapSL(PtrToUlong(NtCurrentTeb()->SystemReserved1[0])))
- #define CURRENT_DS      (CURRENT_STACK16->ds)
- 
- /* push bytes on the 16-bit stack of a thread; return a segptr to the first pushed byte */
-@@ -177,8 +177,8 @@ static inline SEGPTR stack16_push( int size )
- {
-     STACK16FRAME *frame = CURRENT_STACK16;
-     memmove( (char*)frame - size, frame, sizeof(*frame) );
--    NtCurrentTeb()->WOW32Reserved = (char *)NtCurrentTeb()->WOW32Reserved - size;
--    return (SEGPTR)((char *)NtCurrentTeb()->WOW32Reserved + sizeof(*frame));
-+    NtCurrentTeb()->SystemReserved1[0] = (char *)NtCurrentTeb()->SystemReserved1[0] - size;
-+    return (SEGPTR)((char *)NtCurrentTeb()->SystemReserved1[0] + sizeof(*frame));
- }
- 
- /* pop bytes from the 16-bit stack of a thread */
-@@ -186,7 +186,7 @@ static inline void stack16_pop( int size )
- {
-     STACK16FRAME *frame = CURRENT_STACK16;
-     memmove( (char*)frame + size, frame, sizeof(*frame) );
--    NtCurrentTeb()->WOW32Reserved = (char *)NtCurrentTeb()->WOW32Reserved + size;
-+    NtCurrentTeb()->SystemReserved1[0] = (char *)NtCurrentTeb()->SystemReserved1[0] + size;
- }
- 
- /* dosmem.c */
-@@ -300,11 +300,12 @@ struct tagSYSLEVEL;
- 
- struct kernel_thread_data
- {
-+    void               *reserved;       /* stack segment pointer */
-     WORD                stack_sel;      /* 16-bit stack selector */
-     WORD                htask16;        /* Win16 task handle */
-     DWORD               sys_count[4];   /* syslevel mutex entry counters */
-     struct tagSYSLEVEL *sys_mutex[4];   /* syslevel mutex pointers */
--    void               *pad[45];        /* change this if you add fields! */
-+    void               *pad[44];        /* change this if you add fields! */
- };
- 
- static inline struct kernel_thread_data *kernel_get_thread_data(void)
-diff --git a/dlls/krnl386.exe16/ne_module.c b/dlls/krnl386.exe16/ne_module.c
-index f1e1a14dd679..c951a18f8699 100644
---- a/dlls/krnl386.exe16/ne_module.c
-+++ b/dlls/krnl386.exe16/ne_module.c
-@@ -1208,7 +1208,7 @@ DWORD NE_StartTask(void)
-             sp = pSegTable[SELECTOROF(pModule->ne_sssp)-1].minsize + pModule->ne_stack;
-         sp &= ~1;
-         sp -= sizeof(STACK16FRAME);
--        NtCurrentTeb()->WOW32Reserved = (void *)MAKESEGPTR( GlobalHandleToSel16(hInstance), sp );
-+        NtCurrentTeb()->SystemReserved1[0] = (void *)MAKESEGPTR( GlobalHandleToSel16(hInstance), sp );
- 
-         /* Registers at initialization must be:
-          * ax   zero
-@@ -1236,8 +1236,8 @@ DWORD NE_StartTask(void)
- 
-         TRACE("Starting main program: cs:ip=%04x:%04x ds=%04x ss:sp=%04x:%04x\n",
-               context.SegCs, context.Eip, context.SegDs,
--              SELECTOROF(NtCurrentTeb()->WOW32Reserved),
--              OFFSETOF(NtCurrentTeb()->WOW32Reserved) );
-+              SELECTOROF(NtCurrentTeb()->SystemReserved1[0]),
-+              OFFSETOF(NtCurrentTeb()->SystemReserved1[0]) );
- 
-         WOWCallback16Ex( 0, WCB16_REGS, 0, NULL, (DWORD *)&context );
-         ExitThread( LOWORD(context.Eax) );
-diff --git a/dlls/krnl386.exe16/ne_segment.c b/dlls/krnl386.exe16/ne_segment.c
-index aa8861480298..70eb33609144 100644
---- a/dlls/krnl386.exe16/ne_segment.c
-+++ b/dlls/krnl386.exe16/ne_segment.c
-@@ -370,9 +370,9 @@ BOOL NE_LoadSegment( NE_MODULE *pModule, WORD segnum )
-         DWORD ret;
- 
-  	selfloadheader = MapSL( MAKESEGPTR(SEL(pSegTable->hSeg),0) );
--        oldstack = NtCurrentTeb()->WOW32Reserved;
--        NtCurrentTeb()->WOW32Reserved = (void *)MAKESEGPTR(pModule->self_loading_sel,
--                                                           0xff00 - sizeof(STACK16FRAME));
-+        oldstack = NtCurrentTeb()->SystemReserved1[0];
-+        NtCurrentTeb()->SystemReserved1[0] = (void *)MAKESEGPTR(pModule->self_loading_sel,
-+                                                                0xff00 - sizeof(STACK16FRAME));
- 
-         hFile16 = NE_OpenFile( pModule );
-         TRACE_(dll)("Call LoadAppSegProc(hmodule=0x%04x,hf=%x,segnum=%d)\n",
-@@ -384,7 +384,7 @@ BOOL NE_LoadSegment( NE_MODULE *pModule, WORD segnum )
-         pSeg->hSeg = LOWORD(ret);
-         TRACE_(dll)("Ret LoadAppSegProc: hSeg=0x%04x\n", pSeg->hSeg);
-         _lclose16( hFile16 );
--        NtCurrentTeb()->WOW32Reserved = oldstack;
-+        NtCurrentTeb()->SystemReserved1[0] = oldstack;
- 
-         pSeg->flags |= NE_SEGFLAGS_LOADED;
-         return TRUE;
-@@ -476,9 +476,9 @@ BOOL NE_LoadAllSegments( NE_MODULE *pModule )
-         sel = GlobalAlloc16( GMEM_ZEROINIT, 0xFF00 );
-         pModule->self_loading_sel = SEL(sel);
-         FarSetOwner16( sel, pModule->self );
--        oldstack = NtCurrentTeb()->WOW32Reserved;
--        NtCurrentTeb()->WOW32Reserved = (void *)MAKESEGPTR(pModule->self_loading_sel,
--                                                           0xff00 - sizeof(STACK16FRAME) );
-+        oldstack = NtCurrentTeb()->SystemReserved1[0];
-+        NtCurrentTeb()->SystemReserved1[0] = (void *)MAKESEGPTR(pModule->self_loading_sel,
-+                                                                0xff00 - sizeof(STACK16FRAME) );
- 
-         hFile16 = NE_OpenFile(pModule);
-         TRACE_(dll)("CallBootAppProc(hModule=0x%04x,hf=0x%04x)\n",
-@@ -488,7 +488,7 @@ BOOL NE_LoadAllSegments( NE_MODULE *pModule )
-         WOWCallback16Ex( (DWORD)selfloadheader->BootApp, WCB16_PASCAL, sizeof(args), args, NULL );
- 	TRACE_(dll)("Return from CallBootAppProc\n");
-         _lclose16(hFile16);
--        NtCurrentTeb()->WOW32Reserved = oldstack;
-+        NtCurrentTeb()->SystemReserved1[0] = oldstack;
- 
-         for (i = 2; i <= pModule->ne_cseg; i++)
-             if (!NE_LoadSegment( pModule, i )) return FALSE;
-@@ -680,7 +680,7 @@ static BOOL NE_InitDLL( NE_MODULE *pModule )
-     context.SegEs = ds;   /* who knows ... */
-     context.SegCs = SEL(pSegTable[SELECTOROF(pModule->ne_csip)-1].hSeg);
-     context.Eip   = OFFSETOF(pModule->ne_csip);
--    context.Ebp   = OFFSETOF(NtCurrentTeb()->WOW32Reserved) + FIELD_OFFSET(STACK16FRAME,bp);
-+    context.Ebp   = OFFSETOF(NtCurrentTeb()->SystemReserved1[0]) + FIELD_OFFSET(STACK16FRAME,bp);
- 
-     pModule->ne_csip = 0;  /* Don't initialize it twice */
-     TRACE_(dll)("Calling LibMain for %.*s, cs:ip=%04x:%04x ds=%04x di=%04x cx=%04x\n",
-@@ -782,7 +782,7 @@ static void NE_CallDllEntryPoint( NE_MODULE *pModule, DWORD dwReason )
-         context.SegEs = ds;   /* who knows ... */
-         context.SegCs = HIWORD(entryPoint);
-         context.Eip   = LOWORD(entryPoint);
--        context.Ebp   = OFFSETOF(NtCurrentTeb()->WOW32Reserved) + FIELD_OFFSET(STACK16FRAME,bp);
-+        context.Ebp   = OFFSETOF(NtCurrentTeb()->SystemReserved1[0]) + FIELD_OFFSET(STACK16FRAME,bp);
- 
-         args[7] = HIWORD(dwReason);
-         args[6] = LOWORD(dwReason);
-diff --git a/dlls/krnl386.exe16/task.c b/dlls/krnl386.exe16/task.c
-index 39a60cb97a94..21de62c5a015 100644
---- a/dlls/krnl386.exe16/task.c
-+++ b/dlls/krnl386.exe16/task.c
-@@ -624,7 +624,7 @@ void WINAPI InitTask16( CONTEXT *context )
- 
-     /* Initialize the INSTANCEDATA structure */
-     pinstance = MapSL( MAKESEGPTR(CURRENT_DS, 0) );
--    pinstance->stackmin    = OFFSETOF(NtCurrentTeb()->WOW32Reserved) + sizeof( STACK16FRAME );
-+    pinstance->stackmin    = OFFSETOF(NtCurrentTeb()->SystemReserved1[0]) + sizeof( STACK16FRAME );
-     pinstance->stackbottom = pinstance->stackmin; /* yup, that's right. Confused me too. */
-     pinstance->stacktop    = ( pinstance->stackmin > LOWORD(context->Ebx) ?
-                                pinstance->stackmin - LOWORD(context->Ebx) : 0 ) + 150;
-@@ -1095,14 +1095,14 @@ void WINAPI SwitchStackTo16( WORD seg, WORD ptr, WORD top )
- 
-     if (!(pData = GlobalLock16( seg ))) return;
-     TRACE("old=%04x:%04x new=%04x:%04x\n",
--          SELECTOROF( NtCurrentTeb()->WOW32Reserved ),
--          OFFSETOF( NtCurrentTeb()->WOW32Reserved ), seg, ptr );
-+          SELECTOROF( NtCurrentTeb()->SystemReserved1[0] ),
-+          OFFSETOF( NtCurrentTeb()->SystemReserved1[0] ), seg, ptr );
- 
-     /* Save the old stack */
- 
-     oldFrame = CURRENT_STACK16;
-     /* pop frame + args and push bp */
--    pData->old_ss_sp   = (SEGPTR)NtCurrentTeb()->WOW32Reserved + sizeof(STACK16FRAME)
-+    pData->old_ss_sp   = (SEGPTR)NtCurrentTeb()->SystemReserved1[0] + sizeof(STACK16FRAME)
-                            + 2 * sizeof(WORD);
-     *(WORD *)MapSL(pData->old_ss_sp) = oldFrame->bp;
-     pData->stacktop    = top;
-@@ -1116,7 +1116,7 @@ void WINAPI SwitchStackTo16( WORD seg, WORD ptr, WORD top )
-      */
-     copySize = oldFrame->bp - OFFSETOF(pData->old_ss_sp);
-     copySize += 3 * sizeof(WORD) + sizeof(STACK16FRAME);
--    NtCurrentTeb()->WOW32Reserved = (void *)MAKESEGPTR( seg, ptr - copySize );
-+    NtCurrentTeb()->SystemReserved1[0] = (void *)MAKESEGPTR( seg, ptr - copySize );
-     newFrame = CURRENT_STACK16;
- 
-     /* Copy the stack frame and the local variables to the new stack */
-@@ -1135,7 +1135,7 @@ void WINAPI SwitchStackBack16( CONTEXT *context )
-     STACK16FRAME *oldFrame, *newFrame;
-     INSTANCEDATA *pData;
- 
--    if (!(pData = GlobalLock16(SELECTOROF(NtCurrentTeb()->WOW32Reserved))))
-+    if (!(pData = GlobalLock16(SELECTOROF(NtCurrentTeb()->SystemReserved1[0]))))
-         return;
-     if (!pData->old_ss_sp)
-     {
-@@ -1154,7 +1154,7 @@ void WINAPI SwitchStackBack16( CONTEXT *context )
- 
-     /* Switch back to the old stack */
- 
--    NtCurrentTeb()->WOW32Reserved = (void *)(pData->old_ss_sp - sizeof(STACK16FRAME));
-+    NtCurrentTeb()->SystemReserved1[0] = (void *)(pData->old_ss_sp - sizeof(STACK16FRAME));
-     context->SegSs = SELECTOROF(pData->old_ss_sp);
-     context->Esp   = OFFSETOF(pData->old_ss_sp) - sizeof(DWORD); /*ret addr*/
-     pData->old_ss_sp = 0;
-diff --git a/dlls/krnl386.exe16/thunk.c b/dlls/krnl386.exe16/thunk.c
-index e913a08f88cc..ecc94371488f 100644
---- a/dlls/krnl386.exe16/thunk.c
-+++ b/dlls/krnl386.exe16/thunk.c
-@@ -429,7 +429,7 @@ void WINAPI __regs_QT_Thunk( CONTEXT *context )
-     context16.Eip   = LOWORD(context->Edx);
-     /* point EBP to the STACK16FRAME on the stack
-      * for the call_to_16 to set up the register content on calling */
--    context16.Ebp   = OFFSETOF(NtCurrentTeb()->WOW32Reserved) + FIELD_OFFSET(STACK16FRAME,bp);
-+    context16.Ebp   = OFFSETOF(NtCurrentTeb()->SystemReserved1[0]) + FIELD_OFFSET(STACK16FRAME,bp);
- 
-     /*
-      * used to be (problematic):
-@@ -451,7 +451,7 @@ void WINAPI __regs_QT_Thunk( CONTEXT *context )
-      * the number of parameters that the Win16 function
-      * accepted (that it popped from the corresponding Win16 stack) */
-     context->Esp +=   LOWORD(context16.Esp) -
--                        ( OFFSETOF(NtCurrentTeb()->WOW32Reserved) - argsize );
-+                        ( OFFSETOF(NtCurrentTeb()->SystemReserved1[0]) - argsize );
- }
- DEFINE_REGS_ENTRYPOINT( QT_Thunk )
- 
-@@ -555,7 +555,7 @@ void WINAPI __regs_FT_Thunk( CONTEXT *context )
- 
-     context16.SegCs = HIWORD(callTarget);
-     context16.Eip   = LOWORD(callTarget);
--    context16.Ebp   = OFFSETOF(NtCurrentTeb()->WOW32Reserved) + FIELD_OFFSET(STACK16FRAME,bp);
-+    context16.Ebp   = OFFSETOF(NtCurrentTeb()->SystemReserved1[0]) + FIELD_OFFSET(STACK16FRAME,bp);
- 
-     argsize  = context->Ebp-context->Esp-0x40;
-     if (argsize > sizeof(newstack)) argsize = sizeof(newstack);
-@@ -567,8 +567,8 @@ void WINAPI __regs_FT_Thunk( CONTEXT *context )
- 	if (mapESPrelative & (1 << i))
- 	{
- 	    SEGPTR *arg = (SEGPTR *)newstack[i];
--	    *arg = MAKESEGPTR(SELECTOROF(NtCurrentTeb()->WOW32Reserved),
--                              OFFSETOF(NtCurrentTeb()->WOW32Reserved) - argsize
-+	    *arg = MAKESEGPTR(SELECTOROF(NtCurrentTeb()->SystemReserved1[0]),
-+                              OFFSETOF(NtCurrentTeb()->SystemReserved1[0]) - argsize
-                               + (*(LPBYTE *)arg - oldstack));
- 	}
- 
-@@ -578,7 +578,7 @@ void WINAPI __regs_FT_Thunk( CONTEXT *context )
-     context->Ecx = context16.Ecx;
- 
-     context->Esp +=   LOWORD(context16.Esp) -
--                        ( OFFSETOF(NtCurrentTeb()->WOW32Reserved) - argsize );
-+                        ( OFFSETOF(NtCurrentTeb()->SystemReserved1[0]) - argsize );
- 
-     /* Copy modified buffers back to 32-bit stack */
-     memcpy( oldstack, newstack, argsize );
-@@ -713,7 +713,7 @@ void WINAPI __regs_Common32ThkLS( CONTEXT *context )
-     context16.Edi   = LOWORD(context->Ecx);
-     context16.SegCs = HIWORD(context->Eax);
-     context16.Eip   = LOWORD(context->Eax);
--    context16.Ebp   = OFFSETOF(NtCurrentTeb()->WOW32Reserved) + FIELD_OFFSET(STACK16FRAME,bp);
-+    context16.Ebp   = OFFSETOF(NtCurrentTeb()->SystemReserved1[0]) + FIELD_OFFSET(STACK16FRAME,bp);
- 
-     argsize = HIWORD(context->Edx) * 4;
- 
-@@ -769,7 +769,7 @@ void WINAPI __regs_OT_32ThkLSF( CONTEXT *context )
- 
-     context16.SegCs = HIWORD(context->Edx);
-     context16.Eip   = LOWORD(context->Edx);
--    context16.Ebp   = OFFSETOF(NtCurrentTeb()->WOW32Reserved) + FIELD_OFFSET(STACK16FRAME,bp);
-+    context16.Ebp   = OFFSETOF(NtCurrentTeb()->SystemReserved1[0]) + FIELD_OFFSET(STACK16FRAME,bp);
- 
-     argsize = 2 * *(WORD *)context->Esp + 2;
- 
-@@ -782,7 +782,7 @@ void WINAPI __regs_OT_32ThkLSF( CONTEXT *context )
-             (LPBYTE)CURRENT_STACK16 - argsize, argsize );
- 
-     context->Esp +=   LOWORD(context16.Esp) -
--                        ( OFFSETOF(NtCurrentTeb()->WOW32Reserved) - argsize );
-+                        ( OFFSETOF(NtCurrentTeb()->SystemReserved1[0]) - argsize );
- }
- DEFINE_REGS_ENTRYPOINT( OT_32ThkLSF )
- 
-@@ -1234,26 +1234,26 @@ void WINAPI __regs_K32Thk1632Prolog( CONTEXT *context )
-       DWORD argSize = context->Ebp - context->Esp;
-       char *stack16 = (char *)context->Esp - 4;
-       STACK16FRAME *frame16 = (STACK16FRAME *)stack16 - 1;
--      STACK32FRAME *frame32 = NtCurrentTeb()->WOW32Reserved;
-+      STACK32FRAME *frame32 = NtCurrentTeb()->SystemReserved1[0];
-       char *stack32 = (char *)frame32 - argSize;
-       WORD  stackSel  = SELECTOROF(frame32->frame16);
-       DWORD stackBase = GetSelectorBase(stackSel);
- 
-       TRACE("before SYSTHUNK hack: EBP: %08x ESP: %08x cur_stack: %p\n",
--            context->Ebp, context->Esp, NtCurrentTeb()->WOW32Reserved);
-+            context->Ebp, context->Esp, NtCurrentTeb()->SystemReserved1[0]);
- 
-       memset(frame16, '\0', sizeof(STACK16FRAME));
-       frame16->frame32 = frame32;
-       frame16->ebp = context->Ebp;
- 
-       memcpy(stack32, stack16, argSize);
--      NtCurrentTeb()->WOW32Reserved = (void *)MAKESEGPTR(stackSel, (DWORD)frame16 - stackBase);
-+      NtCurrentTeb()->SystemReserved1[0] = (void *)MAKESEGPTR(stackSel, (DWORD)frame16 - stackBase);
- 
-       context->Esp = (DWORD)stack32 + 4;
-       context->Ebp = context->Esp + argSize;
- 
-       TRACE("after  SYSTHUNK hack: EBP: %08x ESP: %08x cur_stack: %p\n",
--            context->Ebp, context->Esp, NtCurrentTeb()->WOW32Reserved);
-+            context->Ebp, context->Esp, NtCurrentTeb()->SystemReserved1[0]);
-    }
- 
-     /* entry_point is never used again once the entry point has
-@@ -1276,7 +1276,7 @@ void WINAPI __regs_K32Thk1632Epilog( CONTEXT *context )
-    if (   code[5] == 0xFF && code[6] == 0x55 && code[7] == 0xFC
-        && code[13] == 0x66 && code[14] == 0xCB)
-    {
--      STACK16FRAME *frame16 = MapSL((SEGPTR)NtCurrentTeb()->WOW32Reserved);
-+      STACK16FRAME *frame16 = MapSL((SEGPTR)NtCurrentTeb()->SystemReserved1[0]);
-       char *stack16 = (char *)(frame16 + 1);
-       DWORD argSize = frame16->ebp - (DWORD)stack16;
-       char *stack32 = (char *)frame16->frame32 - argSize;
-@@ -1284,15 +1284,15 @@ void WINAPI __regs_K32Thk1632Epilog( CONTEXT *context )
-       DWORD nArgsPopped = context->Esp - (DWORD)stack32;
- 
-       TRACE("before SYSTHUNK hack: EBP: %08x ESP: %08x cur_stack: %p\n",
--            context->Ebp, context->Esp, NtCurrentTeb()->WOW32Reserved);
-+            context->Ebp, context->Esp, NtCurrentTeb()->SystemReserved1[0]);
- 
--      NtCurrentTeb()->WOW32Reserved = frame16->frame32;
-+      NtCurrentTeb()->SystemReserved1[0] = frame16->frame32;
- 
-       context->Esp = (DWORD)stack16 + nArgsPopped;
-       context->Ebp = frame16->ebp;
- 
-       TRACE("after  SYSTHUNK hack: EBP: %08x ESP: %08x cur_stack: %p\n",
--            context->Ebp, context->Esp, NtCurrentTeb()->WOW32Reserved);
-+            context->Ebp, context->Esp, NtCurrentTeb()->SystemReserved1[0]);
-    }
- }
- DEFINE_REGS_ENTRYPOINT( K32Thk1632Epilog )
-@@ -2303,7 +2303,7 @@ void WINAPI Throw16( LPCATCHBUF lpbuf, INT16 retval, CONTEXT *context )
-     frame32 = pFrame->frame32;
-     while (frame32 && frame32->frame16)
-     {
--        if (OFFSETOF(frame32->frame16) < OFFSETOF(NtCurrentTeb()->WOW32Reserved))
-+        if (OFFSETOF(frame32->frame16) < OFFSETOF(NtCurrentTeb()->SystemReserved1[0]))
-             break;  /* Something strange is going on */
-         if (OFFSETOF(frame32->frame16) > lpbuf[2])
-         {
-diff --git a/dlls/krnl386.exe16/wowthunk.c b/dlls/krnl386.exe16/wowthunk.c
-index 2dddbf932898..3a4b104a673f 100644
---- a/dlls/krnl386.exe16/wowthunk.c
-+++ b/dlls/krnl386.exe16/wowthunk.c
-@@ -127,7 +127,7 @@ static DWORD call16_handler( EXCEPTION_RECORD *record, EXCEPTION_REGISTRATION_RE
-     {
-         /* unwinding: restore the stack pointer in the TEB, and leave the Win16 mutex */
-         STACK32FRAME *frame32 = CONTAINING_RECORD(frame, STACK32FRAME, frame);
--        NtCurrentTeb()->WOW32Reserved = (void *)frame32->frame16;
-+        NtCurrentTeb()->SystemReserved1[0] = (void *)frame32->frame16;
-         _LeaveWin16Lock();
-     }
-     else if (record->ExceptionCode == EXCEPTION_ACCESS_VIOLATION ||
-@@ -412,8 +412,8 @@ BOOL WINAPI K32WOWCallback16Ex( DWORD vpfn16, DWORD dwFlags,
-             TRACE_(relay)( "\1CallTo16(func=%04x:%04x", context->SegCs, LOWORD(context->Eip) );
-             while (count) TRACE_(relay)( ",%04x", wstack[--count] );
-             TRACE_(relay)( ") ss:sp=%04x:%04x ax=%04x bx=%04x cx=%04x dx=%04x si=%04x di=%04x bp=%04x ds=%04x es=%04x\n",
--                           SELECTOROF(NtCurrentTeb()->WOW32Reserved),
--                           OFFSETOF(NtCurrentTeb()->WOW32Reserved),
-+                           SELECTOROF(NtCurrentTeb()->SystemReserved1[0]),
-+                           OFFSETOF(NtCurrentTeb()->SystemReserved1[0]),
-                            (WORD)context->Eax, (WORD)context->Ebx, (WORD)context->Ecx,
-                            (WORD)context->Edx, (WORD)context->Esi, (WORD)context->Edi,
-                            (WORD)context->Ebp, (WORD)context->SegDs, (WORD)context->SegEs );
-@@ -443,8 +443,8 @@ BOOL WINAPI K32WOWCallback16Ex( DWORD vpfn16, DWORD dwFlags,
-         if (TRACE_ON(relay))
-         {
-             TRACE_(relay)( "\1RetFrom16() ss:sp=%04x:%04x ax=%04x bx=%04x cx=%04x dx=%04x bp=%04x sp=%04x\n",
--                           SELECTOROF(NtCurrentTeb()->WOW32Reserved),
--                           OFFSETOF(NtCurrentTeb()->WOW32Reserved),
-+                           SELECTOROF(NtCurrentTeb()->SystemReserved1[0]),
-+                           OFFSETOF(NtCurrentTeb()->SystemReserved1[0]),
-                            (WORD)context->Eax, (WORD)context->Ebx, (WORD)context->Ecx,
-                            (WORD)context->Edx, (WORD)context->Ebp, (WORD)context->Esp );
-             SYSLEVEL_CheckNotLevel( 2 );
-@@ -460,10 +460,10 @@ BOOL WINAPI K32WOWCallback16Ex( DWORD vpfn16, DWORD dwFlags,
-             WORD * wstack = (WORD *)stack;
- 
-             TRACE_(relay)( "\1CallTo16(func=%04x:%04x,ds=%04x",
--                           HIWORD(vpfn16), LOWORD(vpfn16), SELECTOROF(NtCurrentTeb()->WOW32Reserved) );
-+                           HIWORD(vpfn16), LOWORD(vpfn16), SELECTOROF(NtCurrentTeb()->SystemReserved1[0]) );
-             while (count) TRACE_(relay)( ",%04x", wstack[--count] );
--            TRACE_(relay)( ") ss:sp=%04x:%04x\n", SELECTOROF(NtCurrentTeb()->WOW32Reserved),
--                           OFFSETOF(NtCurrentTeb()->WOW32Reserved) );
-+            TRACE_(relay)( ") ss:sp=%04x:%04x\n", SELECTOROF(NtCurrentTeb()->SystemReserved1[0]),
-+                           OFFSETOF(NtCurrentTeb()->SystemReserved1[0]) );
-             SYSLEVEL_CheckNotLevel( 2 );
-         }
- 
-@@ -486,8 +486,8 @@ BOOL WINAPI K32WOWCallback16Ex( DWORD vpfn16, DWORD dwFlags,
-         if (TRACE_ON(relay))
-         {
-             TRACE_(relay)( "\1RetFrom16() ss:sp=%04x:%04x retval=%08x\n",
--                           SELECTOROF(NtCurrentTeb()->WOW32Reserved),
--                           OFFSETOF(NtCurrentTeb()->WOW32Reserved), ret );
-+                           SELECTOROF(NtCurrentTeb()->SystemReserved1[0]),
-+                           OFFSETOF(NtCurrentTeb()->SystemReserved1[0]), ret );
-             SYSLEVEL_CheckNotLevel( 2 );
-         }
-     }
-diff --git a/dlls/ntdll/unix/signal_i386.c b/dlls/ntdll/unix/signal_i386.c
-index ac34f86a5883..55f1e2ce4b23 100644
---- a/dlls/ntdll/unix/signal_i386.c
-+++ b/dlls/ntdll/unix/signal_i386.c
-@@ -645,7 +645,7 @@ static inline void *init_handler( const ucontext_t *sigcontext )
-          * SS is still non-system segment. This is why both CS and SS
-          * are checked.
-          */
--        return teb->WOW32Reserved;
-+        return teb->SystemReserved1[0];
-     }
-     return (void *)(ESP_sig(sigcontext) & ~3);
- }
-diff --git a/dlls/system.drv16/system.c b/dlls/system.drv16/system.c
-index b6fd51c05f01..695ad7b60039 100644
---- a/dlls/system.drv16/system.c
-+++ b/dlls/system.drv16/system.c
-@@ -70,7 +70,7 @@ static void CALLBACK SYSTEM_TimerTick( LPVOID arg, DWORD low, DWORD high )
-             memset( &context, 0, sizeof(context) );
-             context.SegCs = SELECTOROF( proc );
-             context.Eip   = OFFSETOF( proc );
--            context.Ebp   = OFFSETOF(NtCurrentTeb()->WOW32Reserved) + FIELD_OFFSET(STACK16FRAME, bp);
-+            context.Ebp   = OFFSETOF(NtCurrentTeb()->SystemReserved1[0]) + FIELD_OFFSET(STACK16FRAME, bp);
-             context.Eax   = i + 1;
- 
-             WOWCallback16Ex( 0, WCB16_REGS, 0, NULL, (DWORD *)&context );
-diff --git a/dlls/toolhelp.dll16/toolhelp.c b/dlls/toolhelp.dll16/toolhelp.c
-index 578d1ae7faba..1077f0b03672 100644
---- a/dlls/toolhelp.dll16/toolhelp.c
-+++ b/dlls/toolhelp.dll16/toolhelp.c
-@@ -491,8 +491,8 @@ BOOL16 WINAPI TaskNext16( TASKENTRY *lpte )
-     lpte->hTaskParent   = pTask->hParent;
-     lpte->hInst         = pTask->hInstance;
-     lpte->hModule       = pTask->hModule;
--    lpte->wSS           = SELECTOROF( pTask->teb->WOW32Reserved );
--    lpte->wSP           = OFFSETOF( pTask->teb->WOW32Reserved );
-+    lpte->wSS           = SELECTOROF( pTask->teb->SystemReserved1[0] );
-+    lpte->wSP           = OFFSETOF( pTask->teb->SystemReserved1[0] );
-     lpte->wStackTop     = pInstData->stacktop;
-     lpte->wStackMinimum = pInstData->stackmin;
-     lpte->wStackBottom  = pInstData->stackbottom;
-@@ -718,7 +718,7 @@ BOOL16 WINAPI TimerCount16( TIMERINFO *pTimerInfo )
-  */
- BOOL16 WINAPI SystemHeapInfo16( SYSHEAPINFO *pHeapInfo )
- {
--    STACK16FRAME* stack16 = MapSL((SEGPTR)NtCurrentTeb()->WOW32Reserved);
-+    STACK16FRAME* stack16 = MapSL((SEGPTR)NtCurrentTeb()->SystemReserved1[0]);
-     HANDLE16 oldDS = stack16->ds;
-     WORD user = LoadLibrary16( "USER.EXE" );
-     WORD gdi = LoadLibrary16( "GDI.EXE" );
-diff --git a/dlls/user.exe16/message.c b/dlls/user.exe16/message.c
-index e3ca3fd779d3..fa9388ceaa11 100644
---- a/dlls/user.exe16/message.c
-+++ b/dlls/user.exe16/message.c
-@@ -240,11 +240,11 @@ static LRESULT call_window_proc16( HWND16 hwnd, UINT16 msg, WPARAM16 wParam, LPA
-     /* Window procedures want ax = hInstance, ds = es = ss */
- 
-     memset(&context, 0, sizeof(context));
--    context.SegDs = context.SegEs = SELECTOROF(NtCurrentTeb()->WOW32Reserved);
-+    context.SegDs = context.SegEs = SELECTOROF(NtCurrentTeb()->SystemReserved1[0]);
-     if (!(context.Eax = GetWindowWord( HWND_32(hwnd), GWLP_HINSTANCE ))) context.Eax = context.SegDs;
-     context.SegCs = SELECTOROF(func);
-     context.Eip   = OFFSETOF(func);
--    context.Ebp   = OFFSETOF(NtCurrentTeb()->WOW32Reserved) + FIELD_OFFSET(STACK16FRAME, bp);
-+    context.Ebp   = OFFSETOF(NtCurrentTeb()->SystemReserved1[0]) + FIELD_OFFSET(STACK16FRAME, bp);
- 
-     if (lParam)
-     {
-@@ -267,7 +267,7 @@ static LRESULT call_window_proc16( HWND16 hwnd, UINT16 msg, WPARAM16 wParam, LPA
-         if (size)
-         {
-             memcpy( &args.u, MapSL(lParam), size );
--            lParam = PtrToUlong(NtCurrentTeb()->WOW32Reserved) - size;
-+            lParam = PtrToUlong(NtCurrentTeb()->SystemReserved1[0]) - size;
-         }
-     }
- 
-@@ -2092,7 +2092,7 @@ static LRESULT combo_proc16( HWND hwnd, UINT msg, WPARAM wParam, LPARAM lParam,
- 
- static void edit_lock_buffer( HWND hwnd )
- {
--    STACK16FRAME* stack16 = MapSL(PtrToUlong(NtCurrentTeb()->WOW32Reserved));
-+    STACK16FRAME* stack16 = MapSL(PtrToUlong(NtCurrentTeb()->SystemReserved1[0]));
-     HLOCAL16 hloc16 = GetWindowWord( hwnd, GWW_HANDLE16 );
-     HANDLE16 oldDS;
-     HLOCAL hloc32;
-@@ -2118,7 +2118,7 @@ static void edit_lock_buffer( HWND hwnd )
- 
- static void edit_unlock_buffer( HWND hwnd )
- {
--    STACK16FRAME* stack16 = MapSL(PtrToUlong(NtCurrentTeb()->WOW32Reserved));
-+    STACK16FRAME* stack16 = MapSL(PtrToUlong(NtCurrentTeb()->SystemReserved1[0]));
-     HLOCAL16 hloc16 = GetWindowWord( hwnd, GWW_HANDLE16 );
-     HANDLE16 oldDS;
-     HLOCAL hloc32;
-@@ -2155,7 +2155,7 @@ static HLOCAL16 edit_get_handle( HWND hwnd )
-     if (!(hloc = (HLOCAL)wow_handlers32.edit_proc( hwnd, EM_GETHANDLE, 0, 0, FALSE ))) return 0;
-     alloc_size = LocalSize( hloc );
- 
--    stack16 = MapSL(PtrToUlong(NtCurrentTeb()->WOW32Reserved));
-+    stack16 = MapSL(PtrToUlong(NtCurrentTeb()->SystemReserved1[0]));
-     oldDS = stack16->ds;
-     stack16->ds = GetWindowLongPtrW( hwnd, GWLP_HINSTANCE );
- 
-@@ -2193,7 +2193,7 @@ done:
- 
- static void edit_set_handle( HWND hwnd, HLOCAL16 hloc16 )
- {
--    STACK16FRAME* stack16 = MapSL(PtrToUlong(NtCurrentTeb()->WOW32Reserved));
-+    STACK16FRAME* stack16 = MapSL(PtrToUlong(NtCurrentTeb()->SystemReserved1[0]));
-     HINSTANCE16 hInstance = GetWindowLongPtrW( hwnd, GWLP_HINSTANCE );
-     HANDLE16 oldDS = stack16->ds;
-     HLOCAL hloc32;
-@@ -2223,7 +2223,7 @@ static void edit_destroy_handle( HWND hwnd )
-     HLOCAL16 hloc16 = GetWindowWord( hwnd, GWW_HANDLE16 );
-     if (hloc16)
-     {
--        STACK16FRAME* stack16 = MapSL(PtrToUlong(NtCurrentTeb()->WOW32Reserved));
-+        STACK16FRAME* stack16 = MapSL(PtrToUlong(NtCurrentTeb()->SystemReserved1[0]));
-         HANDLE16 oldDS = stack16->ds;
- 
-         stack16->ds = GetWindowLongPtrW( hwnd, GWLP_HINSTANCE );
-diff --git a/dlls/user.exe16/user.c b/dlls/user.exe16/user.c
-index 27b92793836a..deec596f7660 100644
---- a/dlls/user.exe16/user.c
-+++ b/dlls/user.exe16/user.c
-@@ -1394,7 +1394,7 @@ DWORD WINAPI GetTabbedTextExtent16( HDC16 hdc, LPCSTR lpstr, INT16 count,
-  */
- DWORD WINAPI UserSeeUserDo16(WORD wReqType, WORD wParam1, WORD wParam2, WORD wParam3)
- {
--    STACK16FRAME* stack16 = MapSL((SEGPTR)NtCurrentTeb()->WOW32Reserved);
-+    STACK16FRAME* stack16 = MapSL((SEGPTR)NtCurrentTeb()->SystemReserved1[0]);
-     HANDLE16 oldDS = stack16->ds;
-     DWORD ret = (DWORD)-1;
- 
-@@ -1787,7 +1787,7 @@ UINT16 WINAPI RealizePalette16( HDC16 hdc )
-  */
- WORD WINAPI GetFreeSystemResources16( WORD resType )
- {
--    STACK16FRAME* stack16 = MapSL((SEGPTR)NtCurrentTeb()->WOW32Reserved);
-+    STACK16FRAME* stack16 = MapSL((SEGPTR)NtCurrentTeb()->SystemReserved1[0]);
-     HANDLE16 oldDS = stack16->ds;
-     int userPercent, gdiPercent;
- 
-diff --git a/dlls/user.exe16/window.c b/dlls/user.exe16/window.c
-index bf86719325b8..1f53bdc95402 100644
---- a/dlls/user.exe16/window.c
-+++ b/dlls/user.exe16/window.c
-@@ -456,7 +456,7 @@ HWND16 WINAPI GetParent16( HWND16 hwnd )
-  */
- BOOL16 WINAPI IsWindow16( HWND16 hwnd )
- {
--    STACK16FRAME *frame = MapSL( (SEGPTR)NtCurrentTeb()->WOW32Reserved );
-+    STACK16FRAME *frame = MapSL( (SEGPTR)NtCurrentTeb()->SystemReserved1[0] );
-     frame->es = USER_HeapSel;
-     /* don't use WIN_Handle32 here, we don't care about the full handle */
-     return IsWindow( HWND_32(hwnd) );
-diff --git a/include/winternl.h b/include/winternl.h
-index 87eb0d32926b..2d9f54b89d8c 100644
---- a/include/winternl.h
-+++ b/include/winternl.h
-@@ -363,7 +363,7 @@ typedef struct _TEB
-     PVOID                        WOW32Reserved;                     /* 0c0/0100 */
-     ULONG                        CurrentLocale;                     /* 0c4/0108 */
-     ULONG                        FpSoftwareStatusRegister;          /* 0c8/010c */
--    PVOID                        SystemReserved1[54];               /* 0cc/0110 used for kernel32 private data in Wine */
-+    PVOID                        SystemReserved1[54];               /* 0cc/0110 used for krnl386.exe16 private data in Wine */
-     LONG                         ExceptionCode;                     /* 1a4/02c0 */
-     ACTIVATION_CONTEXT_STACK     ActivationContextStack;            /* 1a8/02c8 */
-     BYTE                         SpareBytes1[24];                   /* 1bc/02e8 */
-diff --git a/tools/winebuild/relay.c b/tools/winebuild/relay.c
-index 29d0a74c833c..01bb97e02b4c 100644
---- a/tools/winebuild/relay.c
-+++ b/tools/winebuild/relay.c
-@@ -31,7 +31,7 @@
- #include "build.h"
- 
- /* offset of the stack pointer relative to %fs:(0) */
--#define STACKOFFSET 0xc0  /* FIELD_OFFSET(TEB,WOW32Reserved) */
-+#define STACKOFFSET 0xcc  /* FIELD_OFFSET(TEB,SystemReserved1[0]) */
- 
- /* fix this if the x86_thread_data structure is changed */
- #define GS_OFFSET  0x1d8  /* FIELD_OFFSET(TEB,SystemReserved2) + FIELD_OFFSET(struct x86_thread_data,gs) */
--- 
-2.26.2
-
diff --git a/patches/winebuild-Fake_Dlls/0003-winebuild-Generate-syscall-thunks-for-ntdll-exports.patch b/patches/winebuild-Fake_Dlls/0003-winebuild-Generate-syscall-thunks-for-ntdll-exports.patch
deleted file mode 100644
index 23030329d..000000000
--- a/patches/winebuild-Fake_Dlls/0003-winebuild-Generate-syscall-thunks-for-ntdll-exports.patch
+++ /dev/null
@@ -1,554 +0,0 @@
-From 9cbc0d6d9404dc93016ba7db6a10a2cad873cbba Mon Sep 17 00:00:00 2001
-From: =?UTF-8?q?Michael=20M=C3=BCller?= <michael@fds-team.de>
-Date: Thu, 11 May 2017 05:32:55 +0200
-Subject: [PATCH] winebuild: Generate syscall thunks for ntdll exports.
-
-Based on a patch by Erich E. Hoover.
----
- dlls/ntdll/loader.c            |   3 +
- dlls/ntdll/signal_i386.c       |   4 +-
- dlls/ntdll/tests/exception.c   |   2 +
- dlls/ntdll/thread.c            |  10 +++-
- dlls/ntdll/unix/thread.c       |   3 +-
- dlls/ntdll/unix/unix_private.h |   2 +-
- dlls/ntdll/unixlib.h           |   2 +-
- include/winternl.h             |   2 +-
- tools/winebuild/build.h        |   7 +++
- tools/winebuild/import.c       |  10 ++--
- tools/winebuild/parser.c       |  59 +++++++++++++++++++
- tools/winebuild/spec16.c       |  22 +------
- tools/winebuild/spec32.c       | 104 +++++++++++++++++++++++++++++++++
- tools/winebuild/utils.c        |  21 +++++++
- 14 files changed, 220 insertions(+), 31 deletions(-)
-
-diff --git a/dlls/ntdll/loader.c b/dlls/ntdll/loader.c
-index 42cdc628021..339b54a9e67 100644
---- a/dlls/ntdll/loader.c
-+++ b/dlls/ntdll/loader.c
-@@ -3387,6 +3387,7 @@ PIMAGE_NT_HEADERS WINAPI RtlImageNtHeader(HMODULE hModule)
-     return ret;
- }
- 
-+extern void DECLSPEC_NORETURN __wine_syscall_dispatcher( void );
- 
- /******************************************************************
-  *		LdrInitializeThunk (NTDLL.@)
-@@ -3403,6 +3404,8 @@ void WINAPI LdrInitializeThunk( CONTEXT *context, void **entry, ULONG_PTR unknow
-     WINE_MODREF *wm;
-     LPCWSTR load_path = NtCurrentTeb()->Peb->ProcessParameters->DllPath.Buffer;
- 
-+    NtCurrentTeb()->WOW32Reserved = __wine_syscall_dispatcher;
-+
-     if (process_detaching) return;
- 
-     RtlEnterCriticalSection( &loader_section );
-diff --git a/dlls/ntdll/signal_i386.c b/dlls/ntdll/signal_i386.c
-index bda19bf4632..5dccee926b9 100644
---- a/dlls/ntdll/signal_i386.c
-+++ b/dlls/ntdll/signal_i386.c
-@@ -336,6 +336,8 @@ __ASM_STDCALL_FUNC( RtlCaptureContext, 4,
-                     "ret $4" )
- 
- 
-+extern NTSTATUS WINAPI __syscall_NtGetContextThread( HANDLE handle, CONTEXT *context );
-+
- /***********************************************************************
-  *              NtGetContextThread  (NTDLL.@)
-  *              ZwGetContextThread  (NTDLL.@)
-@@ -360,7 +362,7 @@ NTSTATUS CDECL DECLSPEC_HIDDEN __regs_NtGetContextThread( DWORD edi, DWORD esi,
-     {
-         context->Ebp    = ebp;
-         context->Esp    = (DWORD)&retaddr;
--        context->Eip    = *(&edi - 1);
-+        context->Eip    = (DWORD)__syscall_NtGetContextThread + 18;
-         context->EFlags = eflags;
-     }
-     return unix_funcs->NtGetContextThread( handle, context );
-diff --git a/dlls/ntdll/tests/exception.c b/dlls/ntdll/tests/exception.c
-index 411439f180f..cd019fd5add 100644
---- a/dlls/ntdll/tests/exception.c
-+++ b/dlls/ntdll/tests/exception.c
-@@ -1643,6 +1643,8 @@ static void test_thread_context(void)
-     ok( (char *)context.Eip >= (char *)pNtGetContextThread - 0x40000 &&
-         (char *)context.Eip <= (char *)pNtGetContextThread + 0x40000,
-         "wrong Eip %08x/%08x\n", context.Eip, (DWORD)pNtGetContextThread );
-+    ok( *(WORD *)context.Eip == 0xc483 || *(WORD *)context.Eip == 0x08c2 || *(WORD *)context.Eip == 0x8dc3,
-+        "expected 0xc483 or 0x08c2 or 0x8dc3, got %04x\n", *(WORD *)context.Eip );
-     /* segment registers clear the high word */
-     ok( context.SegCs == LOWORD(expect.SegCs), "wrong SegCs %08x/%08x\n", context.SegCs, expect.SegCs );
-     ok( context.SegDs == LOWORD(expect.SegDs), "wrong SegDs %08x/%08x\n", context.SegDs, expect.SegDs );
-diff --git a/dlls/ntdll/thread.c b/dlls/ntdll/thread.c
-index fc57f186544..780b3b153da 100644
---- a/dlls/ntdll/thread.c
-+++ b/dlls/ntdll/thread.c
-@@ -94,6 +94,14 @@ int __cdecl __wine_dbg_output( const char *str )
-     return unix_funcs->dbg_output( str );
- }
- 
-+#if defined(__i386__) || defined(__x86_64__)
-+extern void DECLSPEC_NORETURN __wine_syscall_dispatcher( void );
-+#else
-+void __wine_syscall_dispatcher( void )
-+{
-+    FIXME("Syscall dispatcher is not available for this architecture.\n");
-+}
-+#endif
- 
- /***********************************************************************
-  *           thread_init
-@@ -105,7 +113,7 @@ int __cdecl __wine_dbg_output( const char *str )
- TEB *thread_init( SIZE_T *info_size )
- {
-     ULONG_PTR val;
--    TEB *teb = unix_funcs->init_threading( &nb_threads, &__wine_ldt_copy, info_size );
-+    TEB *teb = unix_funcs->init_threading( &nb_threads, &__wine_ldt_copy, info_size, __wine_syscall_dispatcher );
- 
-     peb = teb->Peb;
-     peb->FastPebLock        = &peb_lock;
-diff --git a/dlls/ntdll/unix/thread.c b/dlls/ntdll/unix/thread.c
-index f3dddd2b02a..7952497645e 100644
---- a/dlls/ntdll/unix/thread.c
-+++ b/dlls/ntdll/unix/thread.c
-@@ -84,7 +84,7 @@ static void pthread_exit_wrapper( int status )
- /***********************************************************************
-  *           init_threading
-  */
--TEB * CDECL init_threading( int *nb_threads_ptr, struct ldt_copy **ldt_copy, SIZE_T *size )
-+TEB * CDECL init_threading( int *nb_threads_ptr, struct ldt_copy **ldt_copy, SIZE_T *size, void *syscall_handler )
- {
-     TEB *teb;
-     BOOL suspend;
-@@ -96,6 +96,7 @@ TEB * CDECL init_threading( int *nb_threads_ptr, struct ldt_copy **ldt_copy, SIZ
-     nb_threads = nb_threads_ptr;
- 
-     teb = virtual_alloc_first_teb();
-+    teb->WOW32Reserved = syscall_handler;
- 
-     signal_init_threading();
-     signal_alloc_thread( teb );
-diff --git a/dlls/ntdll/unix/unix_private.h b/dlls/ntdll/unix/unix_private.h
-index 707ca819e0e..72987a0041b 100644
---- a/dlls/ntdll/unix/unix_private.h
-+++ b/dlls/ntdll/unix/unix_private.h
-@@ -115,7 +115,7 @@ extern NTSTATUS CDECL server_handle_to_fd( HANDLE handle, unsigned int access, i
-                                            unsigned int *options ) DECLSPEC_HIDDEN;
- extern void CDECL server_release_fd( HANDLE handle, int unix_fd ) DECLSPEC_HIDDEN;
- extern void CDECL server_init_process_done( void *relay ) DECLSPEC_HIDDEN;
--extern TEB * CDECL init_threading( int *nb_threads_ptr, struct ldt_copy **ldt_copy, SIZE_T *size ) DECLSPEC_HIDDEN;
-+extern TEB * CDECL init_threading( int *nb_threads_ptr, struct ldt_copy **ldt_copy, SIZE_T *size, void *syscall_handler ) DECLSPEC_HIDDEN;
- extern void CDECL DECLSPEC_NORETURN exit_thread( int status ) DECLSPEC_HIDDEN;
- extern void CDECL DECLSPEC_NORETURN exit_process( int status ) DECLSPEC_HIDDEN;
- extern NTSTATUS CDECL exec_process( UNICODE_STRING *path, UNICODE_STRING *cmdline, NTSTATUS status ) DECLSPEC_HIDDEN;
-diff --git a/dlls/ntdll/unixlib.h b/dlls/ntdll/unixlib.h
-index b14adce4a70..b5b7cb07c80 100644
---- a/dlls/ntdll/unixlib.h
-+++ b/dlls/ntdll/unixlib.h
-@@ -304,7 +304,7 @@ struct unix_funcs
-     void          (CDECL *virtual_set_large_address_space)(void);
- 
-     /* thread/process functions */
--    TEB *         (CDECL *init_threading)( int *nb_threads_ptr, struct ldt_copy **ldt_copy, SIZE_T *size );
-+    TEB *         (CDECL *init_threading)( int *nb_threads_ptr, struct ldt_copy **ldt_copy, SIZE_T *size, void *syscall_handler );
-     void          (CDECL *exit_thread)( int status );
-     void          (CDECL *exit_process)( int status );
-     NTSTATUS      (CDECL *exec_process)( UNICODE_STRING *path, UNICODE_STRING *cmdline, NTSTATUS status );
-diff --git a/include/winternl.h b/include/winternl.h
-index 34d2737b705..ef848272f7f 100644
---- a/include/winternl.h
-+++ b/include/winternl.h
-@@ -359,7 +359,7 @@ typedef struct _TEB
-     PVOID                        CsrClientThread;                   /* 03c/0070 */
-     PVOID                        Win32ThreadInfo;                   /* 040/0078 */
-     ULONG                        Win32ClientInfo[31];               /* 044/0080 used for user32 private data in Wine */
--    PVOID                        WOW32Reserved;                     /* 0c0/0100 */
-+    PVOID                        WOW32Reserved;                     /* 0c0/0100 used for ntdll syscall thunks */
-     ULONG                        CurrentLocale;                     /* 0c4/0108 */
-     ULONG                        FpSoftwareStatusRegister;          /* 0c8/010c */
-     PVOID                        SystemReserved1[54];               /* 0cc/0110 used for krnl386.exe16 private data in Wine */
-diff --git a/tools/winebuild/build.h b/tools/winebuild/build.h
-index c162888a035..55d5b0b9dc2 100644
---- a/tools/winebuild/build.h
-+++ b/tools/winebuild/build.h
-@@ -105,6 +105,7 @@ typedef struct
-     int         flags;
-     char       *name;         /* public name of this function */
-     char       *link_name;    /* name of the C symbol to link to */
-+    char       *impl_name;    /* name of the C symbol of the real implementation (thunks only) */
-     char       *export_name;  /* name exported under for noname exports */
-     union
-     {
-@@ -131,6 +132,7 @@ typedef struct
-     int              alloc_entry_points; /* number of allocated entry points */
-     int              nb_names;           /* number of entry points with names */
-     unsigned int     nb_resources;       /* number of resources */
-+    int              nb_syscalls;        /* number of syscalls */
-     int              characteristics;    /* characteristics for the PE header */
-     int              dll_characteristics;/* DLL characteristics for the PE header */
-     int              subsystem;          /* subsystem id */
-@@ -140,6 +142,7 @@ typedef struct
-     ORDDEF         **names;              /* array of entry point names (points into entry_points) */
-     ORDDEF         **ordinals;           /* array of dll ordinals (points into entry_points) */
-     struct resource *resources;          /* array of dll resources (format differs between Win16/Win32) */
-+    ORDDEF         **syscalls;           /* array of syscalls (points into entry_points) */
- } DLLSPEC;
- 
- enum target_cpu
-@@ -182,8 +185,10 @@ struct strarray
- #define FLAG_FORWARD   0x1000  /* function is a forwarded name */
- #define FLAG_EXT_LINK  0x2000  /* function links to an external symbol */
- #define FLAG_EXPORT32  0x4000  /* 32-bit export in 16-bit spec file */
-+#define FLAG_SYSCALL   0x8000  /* function should be called through a syscall thunk */
- 
- #define FLAG_CPU(cpu)  (0x10000 << (cpu))
-+
- #define FLAG_CPU_MASK  (FLAG_CPU(CPU_LAST + 1) - FLAG_CPU(0))
- #define FLAG_CPU_WIN64 (FLAG_CPU(CPU_x86_64) | FLAG_CPU(CPU_ARM64))
- #define FLAG_CPU_WIN32 (FLAG_CPU_MASK & ~FLAG_CPU_WIN64)
-@@ -327,6 +332,8 @@ extern void add_16bit_exports( DLLSPEC *spec32, DLLSPEC *spec16 );
- extern int parse_spec_file( FILE *file, DLLSPEC *spec );
- extern int parse_def_file( FILE *file, DLLSPEC *spec );
- 
-+extern int sort_func_list( ORDDEF **list, int count, int (*compare)(const void *, const void *) );
-+
- /* buffer management */
- 
- extern int byte_swapped;
-diff --git a/tools/winebuild/import.c b/tools/winebuild/import.c
-index 04ab433dd65..0c6bafed8e5 100644
---- a/tools/winebuild/import.c
-+++ b/tools/winebuild/import.c
-@@ -531,6 +531,7 @@ static void check_undefined_forwards( DLLSPEC *spec )
- /* flag the dll exports that link to an undefined symbol */
- static void check_undefined_exports( DLLSPEC *spec )
- {
-+    const char *name;
-     int i;
- 
-     for (i = 0; i < spec->nb_entry_points; i++)
-@@ -538,7 +539,8 @@ static void check_undefined_exports( DLLSPEC *spec )
-         ORDDEF *odp = &spec->entry_points[i];
-         if (odp->type == TYPE_STUB || odp->type == TYPE_ABS || odp->type == TYPE_VARIABLE) continue;
-         if (odp->flags & FLAG_FORWARD) continue;
--        if (find_name( odp->link_name, &undef_symbols ))
-+        name = odp->impl_name ? odp->impl_name : odp->link_name;
-+        if (find_name( name, &undef_symbols ))
-         {
-             switch(odp->type)
-             {
-@@ -549,14 +551,14 @@ static void check_undefined_exports( DLLSPEC *spec )
-                 if (link_ext_symbols)
-                 {
-                     odp->flags |= FLAG_EXT_LINK;
--                    strarray_add( &ext_link_imports, odp->link_name, NULL );
-+                    strarray_add( &ext_link_imports, name, NULL );
-                 }
-                 else error( "%s:%d: function '%s' not defined\n",
--                            spec->src_name, odp->lineno, odp->link_name );
-+                            spec->src_name, odp->lineno, name );
-                 break;
-             default:
-                 error( "%s:%d: external symbol '%s' is not a function\n",
--                       spec->src_name, odp->lineno, odp->link_name );
-+                       spec->src_name, odp->lineno, name );
-                 break;
-             }
-         }
-diff --git a/tools/winebuild/parser.c b/tools/winebuild/parser.c
-index 0207b8ac3c3..91f596f1d2d 100644
---- a/tools/winebuild/parser.c
-+++ b/tools/winebuild/parser.c
-@@ -543,6 +543,24 @@ static const char *parse_spec_flags( DLLSPEC *spec, ORDDEF *odp )
- }
- 
- 
-+static int needs_syscall( ORDDEF *odp, DLLSPEC *spec )
-+{
-+    if (target_cpu != CPU_x86)
-+        return 0;
-+    if (odp->flags & (FLAG_FORWARD | FLAG_REGISTER))
-+        return 0;
-+    if (odp->type != TYPE_STDCALL)
-+        return 0;
-+    if (!spec->dll_name || strcmp(spec->dll_name, "ntdll"))
-+        return 0;
-+    if (!odp->name)
-+        return 0;
-+    if (strncmp(odp->name, "Nt", 2) && strncmp(odp->name, "Zw", 2))
-+        return 0;
-+    return 1;
-+}
-+
-+
- /*******************************************************************
-  *         parse_spec_ordinal
-  *
-@@ -618,6 +636,14 @@ static int parse_spec_ordinal( int ordinal, DLLSPEC *spec )
-         assert( 0 );
-     }
- 
-+    if (needs_syscall( odp, spec ))
-+    {
-+        char *link_name = strmake( "__syscall_%s", odp->link_name );
-+        odp->impl_name = odp->link_name;
-+        odp->link_name = link_name;
-+        odp->flags |= FLAG_SYSCALL;
-+    }
-+
-     if ((odp->flags & FLAG_CPU_MASK) && !(odp->flags & FLAG_CPU(target_cpu)))
-     {
-         /* ignore this entry point */
-@@ -815,6 +841,37 @@ static void assign_ordinals( DLLSPEC *spec )
- }
- 
- 
-+static int link_name_compare( const void *e1, const void *e2 )
-+{
-+    const ORDDEF *odp1 = *(const ORDDEF * const *)e1;
-+    const ORDDEF *odp2 = *(const ORDDEF * const *)e2;
-+    return strcmp(odp1->link_name, odp2->link_name);
-+}
-+
-+
-+static void assign_syscalls( DLLSPEC *spec )
-+{
-+    int i;
-+
-+    spec->syscalls = xmalloc( (spec->limit - spec->base + 1) * sizeof(*spec->syscalls) );
-+    spec->nb_syscalls = 0;
-+
-+    for (i = 0; i <= spec->limit; i++)
-+    {
-+        ORDDEF *odp = spec->ordinals[i];
-+        if (!odp || !(odp->flags & FLAG_SYSCALL)) continue;
-+        spec->syscalls[spec->nb_syscalls++] = odp;
-+    }
-+
-+    spec->nb_syscalls = sort_func_list( spec->syscalls, spec->nb_syscalls, link_name_compare );
-+    if (!spec->nb_syscalls)
-+    {
-+        free( spec->syscalls );
-+        spec->syscalls = NULL;
-+    }
-+}
-+
-+
- /*******************************************************************
-  *         add_16bit_exports
-  *
-@@ -912,6 +969,8 @@ int parse_spec_file( FILE *file, DLLSPEC *spec )
-     current_line = 0;  /* no longer parsing the input file */
-     assign_names( spec );
-     assign_ordinals( spec );
-+    assign_syscalls( spec );
-+
-     return !nb_errors;
- }
- 
-diff --git a/tools/winebuild/spec16.c b/tools/winebuild/spec16.c
-index a52c03aaa6a..15ef9a3f893 100644
---- a/tools/winebuild/spec16.c
-+++ b/tools/winebuild/spec16.c
-@@ -495,27 +495,6 @@ static int relay_type_compare( const void *e1, const void *e2 )
- }
- 
- 
--/*******************************************************************
-- *         sort_func_list
-- *
-- * Sort a list of functions, removing duplicates.
-- */
--static int sort_func_list( ORDDEF **list, int count,
--                           int (*compare)(const void *, const void *) )
--{
--    int i, j;
--
--    if (!count) return 0;
--    qsort( list, count, sizeof(*list), compare );
--
--    for (i = j = 0; i < count; i++)
--    {
--        if (compare( &list[j], &list[i] )) list[++j] = list[i];
--    }
--    return j + 1;
--}
--
--
- /*******************************************************************
-  *         output_module16
-  *
-@@ -544,6 +523,7 @@ static void output_module16( DLLSPEC *spec )
-         entry_point->flags = FLAG_REGISTER;
-         entry_point->name = NULL;
-         entry_point->link_name = xstrdup( spec->init_func );
-+        entry_point->impl_name = NULL;
-         entry_point->export_name = NULL;
-         entry_point->u.func.nb_args = 0;
-         assert( !spec->ordinals[0] );
-diff --git a/tools/winebuild/spec32.c b/tools/winebuild/spec32.c
-index b1e20e0484d..22dd399cb2b 100644
---- a/tools/winebuild/spec32.c
-+++ b/tools/winebuild/spec32.c
-@@ -374,6 +374,109 @@ static void output_relay_debug( DLLSPEC *spec )
-     }
- }
- 
-+/*******************************************************************
-+ *         output_syscall_thunks
-+ *
-+ * Output entry points for system call functions
-+ */
-+static void output_syscall_thunks( DLLSPEC *spec )
-+{
-+    int i;
-+
-+    if (!spec->nb_syscalls)
-+        return;
-+
-+    output( "\n/* syscall thunks */\n\n" );
-+    output( "\t.text\n" );
-+
-+    for (i = 0; i < spec->nb_syscalls; i++)
-+    {
-+        ORDDEF *odp = spec->syscalls[i];
-+        const char *name = odp->link_name;
-+
-+        /* Chromium attempts to hook system call thunks. It expects them to
-+         * have a very specific form, or it will fail. The below matches what
-+         * Chromium expects from 64-bit Windows 8. */
-+
-+        output( "\t.balign 16, 0\n" );
-+        output( "\t%s\n", func_declaration(name) );
-+        output( "%s\n", asm_globl(name) );
-+        output_cfi( ".cfi_startproc" );
-+        output( "\t.byte 0xb8\n" );                               /* mov eax, SYSCALL */
-+        output( "\t.long %d\n", i );
-+        output( "\t.byte 0x64,0xff,0x15,0xc0,0x00,0x00,0x00\n" ); /* call dword ptr fs:[0C0h] */
-+        output( "\t.byte 0xc2\n" );                               /* ret X */
-+        output( "\t.short %d\n", get_args_size(odp) );
-+        output_cfi( ".cfi_endproc" );
-+        output_function_size( name );
-+    }
-+
-+    for (i = 0; i < 0x20; i++)
-+        output( "\t.byte 0\n" );
-+
-+    output( "\n/* syscall table */\n\n" );
-+    output( "\t.data\n" );
-+    output( "%s\n", asm_globl("__wine_syscall_table") );
-+    for (i = 0; i < spec->nb_syscalls; i++)
-+    {
-+        ORDDEF *odp = spec->syscalls[i];
-+        output ("\t%s %s\n", get_asm_ptr_keyword(), asm_name(odp->impl_name) );
-+    }
-+
-+    output( "\n/* syscall argument stack size table */\n\n" );
-+    output( "\t.data\n" );
-+    output( "%s\n", asm_globl("__wine_syscall_stack_size") );
-+    for (i = 0; i < spec->nb_syscalls; i++)
-+    {
-+        ORDDEF *odp = spec->syscalls[i];
-+        output( "\t.byte %d\n", get_args_size(odp) );
-+    }
-+
-+    output( "\n/* syscall dispatcher */\n\n" );
-+    output( "\t.text\n" );
-+    output( "\t.align %d\n", get_alignment(16) );
-+    output( "\t%s\n", func_declaration("__wine_syscall_dispatcher") );
-+    output( "%s\n", asm_globl("__wine_syscall_dispatcher") );
-+    output_cfi( ".cfi_startproc" );
-+    output( "\tpushl %%ebp\n" );
-+    output_cfi( ".cfi_adjust_cfa_offset 4\n" );
-+    output_cfi( ".cfi_rel_offset %%ebp,0\n" );
-+    output( "\tmovl %%esp,%%ebp\n" );
-+    output_cfi( ".cfi_def_cfa_register %%ebp\n" );
-+    output( "\tpushl %%esi\n" );
-+    output_cfi( ".cfi_rel_offset %%esi,-4\n" );
-+    output( "\tpushl %%edi\n" );
-+    output_cfi( ".cfi_rel_offset %%edi,-8\n" );
-+    output( "\tleal 12(%%ebp),%%esi\n" );
-+    if (UsePIC)
-+    {
-+        output( "\tcall 1f\n" );
-+        output( "1:\tpopl %%edx\n" );
-+        output( "movzbl (%s-1b)(%%edx,%%eax,1),%%ecx\n", asm_name("__wine_syscall_stack_size") );
-+    }
-+    else
-+        output( "movzbl %s(%%eax),%%ecx\n", asm_name("__wine_syscall_stack_size") );
-+
-+    output( "\tsubl %%ecx,%%esp\n" );
-+    output( "\tshrl $2,%%ecx\n" );
-+    output( "\tmovl %%esp,%%edi\n" );
-+    output( "\trep; movsl\n" );
-+    if (UsePIC)
-+        output( "\tcall *(%s-1b)(%%edx,%%eax,%d)\n", asm_name("__wine_syscall_table"), get_ptr_size() );
-+    else
-+        output( "\tcall *%s(,%%eax,%d)\n", asm_name("__wine_syscall_table"), get_ptr_size() );
-+    output( "\tpop %%edi\n" );
-+    output_cfi( ".cfi_same_value %%edi\n" );
-+    output( "\tpop %%esi\n" );
-+    output_cfi( ".cfi_same_value %%esi\n" );
-+    output( "\tleave\n" );
-+    output_cfi( ".cfi_def_cfa %%esp,4\n" );
-+    output_cfi( ".cfi_same_value %%ebp\n" );
-+    output( "\tret\n" );
-+    output_cfi( ".cfi_endproc" );
-+    output_function_size( "__wine_syscall_dispatcher" );
-+}
-+
- /*******************************************************************
-  *         output_exports
-  *
-@@ -729,6 +832,7 @@ void output_spec32_file( DLLSPEC *spec )
-     open_output_file();
-     output_standard_file_header();
-     output_module( spec );
-+    output_syscall_thunks( spec );
-     output_stubs( spec );
-     output_exports( spec );
-     output_imports( spec );
-diff --git a/tools/winebuild/utils.c b/tools/winebuild/utils.c
-index 2a1fc960926..07a579004ad 100644
---- a/tools/winebuild/utils.c
-+++ b/tools/winebuild/utils.c
-@@ -860,6 +860,7 @@ void free_dll_spec( DLLSPEC *spec )
-         free( odp->name );
-         free( odp->export_name );
-         free( odp->link_name );
-+        free( odp->impl_name );
-     }
-     free( spec->file_name );
-     free( spec->dll_name );
-@@ -869,6 +870,7 @@ void free_dll_spec( DLLSPEC *spec )
-     free( spec->names );
-     free( spec->ordinals );
-     free( spec->resources );
-+    free( spec->syscalls );
-     free( spec );
- }
- 
-@@ -1275,3 +1277,22 @@ const char *get_asm_string_section(void)
-     default:             return ".section .rodata";
-     }
- }
-+
-+/*******************************************************************
-+ *         sort_func_list
-+ *
-+ * Sort a list of functions, removing duplicates.
-+ */
-+int sort_func_list( ORDDEF **list, int count, int (*compare)(const void *, const void *) )
-+{
-+    int i, j;
-+
-+    if (!count) return 0;
-+    qsort( list, count, sizeof(*list), compare );
-+
-+    for (i = j = 0; i < count; i++)
-+    {
-+        if (compare( &list[j], &list[i] )) list[++j] = list[i];
-+    }
-+    return j + 1;
-+}
--- 
-2.27.0
-
diff --git a/patches/winebuild-Fake_Dlls/0010-tools-winebuild-Add-syscall-thunks-for-64-bit.patch b/patches/winebuild-Fake_Dlls/0010-tools-winebuild-Add-syscall-thunks-for-64-bit.patch
deleted file mode 100644
index c3742a62b..000000000
--- a/patches/winebuild-Fake_Dlls/0010-tools-winebuild-Add-syscall-thunks-for-64-bit.patch
+++ /dev/null
@@ -1,501 +0,0 @@
-From 8650aa0a3229b84a102cca1d9fe40f9dbd5a038d Mon Sep 17 00:00:00 2001
-From: =?UTF-8?q?Michael=20M=C3=BCller?= <michael@fds-team.de>
-Date: Thu, 7 Sep 2017 00:38:09 +0200
-Subject: [PATCH] tools/winebuild: Add syscall thunks for 64 bit.
-
----
- dlls/kernel32/tests/loader.c   |   7 +-
- dlls/ntdll/unix/thread.c       |   2 +-
- dlls/ntdll/unix/unix_private.h |   2 +-
- dlls/ntdll/unix/virtual.c      |  11 +-
- libs/wine/loader.c             |   4 +
- server/mapping.c               |   6 +-
- tools/winebuild/parser.c       |   2 +-
- tools/winebuild/spec32.c       | 285 ++++++++++++++++++++++++++++++++-
- 8 files changed, 305 insertions(+), 14 deletions(-)
-
-diff --git a/dlls/kernel32/tests/loader.c b/dlls/kernel32/tests/loader.c
-index d39ebe4a37c..dccd9c1fc68 100644
---- a/dlls/kernel32/tests/loader.c
-+++ b/dlls/kernel32/tests/loader.c
-@@ -1571,7 +1571,7 @@ static void test_filenames(void)
- 
- static void test_FakeDLL(void)
- {
--#ifdef __i386__
-+#if defined(__i386__) || defined(__x86_64__)
-     NTSTATUS (WINAPI *pNtSetEvent)(HANDLE, ULONG *) = NULL;
-     IMAGE_EXPORT_DIRECTORY *dir;
-     HMODULE module = GetModuleHandleA("ntdll.dll");
-@@ -1613,8 +1613,13 @@ static void test_FakeDLL(void)
- 
-         dll_func = (BYTE *)GetProcAddress(module, func_name);
-         ok(dll_func != NULL, "%s: GetProcAddress returned NULL\n", func_name);
-+#if defined(__i386__)
-         if (dll_func[0] == 0x90 && dll_func[1] == 0x90 &&
-             dll_func[2] == 0x90 && dll_func[3] == 0x90)
-+#elif defined(__x86_64__)
-+        if (dll_func[0] == 0x48 && dll_func[1] == 0x83 &&
-+            dll_func[2] == 0xec && dll_func[3] == 0x08)
-+#endif
-         {
-             todo_wine ok(0, "%s: Export is a stub-function, skipping\n", func_name);
-             continue;
-diff --git a/dlls/ntdll/unix/thread.c b/dlls/ntdll/unix/thread.c
-index 7952497645e..ca5eba4da88 100644
---- a/dlls/ntdll/unix/thread.c
-+++ b/dlls/ntdll/unix/thread.c
-@@ -104,7 +104,7 @@ TEB * CDECL init_threading( int *nb_threads_ptr, struct ldt_copy **ldt_copy, SIZ
-     dbg_init();
-     server_init_process();
-     info_size = server_init_thread( teb->Peb, &suspend );
--    virtual_map_user_shared_data();
-+    virtual_map_user_shared_data( syscall_handler );
-     virtual_create_builtin_view( ntdll_module );
-     init_cpu_info();
-     init_files();
-diff --git a/dlls/ntdll/unix/unix_private.h b/dlls/ntdll/unix/unix_private.h
-index 72987a0041b..15be5d3715a 100644
---- a/dlls/ntdll/unix/unix_private.h
-+++ b/dlls/ntdll/unix/unix_private.h
-@@ -187,7 +187,7 @@ extern TEB *virtual_alloc_first_teb(void) DECLSPEC_HIDDEN;
- extern NTSTATUS virtual_alloc_teb( TEB **ret_teb ) DECLSPEC_HIDDEN;
- extern void virtual_free_teb( TEB *teb ) DECLSPEC_HIDDEN;
- extern NTSTATUS virtual_clear_tls_index( ULONG index ) DECLSPEC_HIDDEN;
--extern void virtual_map_user_shared_data(void) DECLSPEC_HIDDEN;
-+extern void virtual_map_user_shared_data( void *syscall_handler ) DECLSPEC_HIDDEN;
- extern NTSTATUS virtual_handle_fault( LPCVOID addr, DWORD err, BOOL on_signal_stack ) DECLSPEC_HIDDEN;
- extern unsigned int virtual_locked_server_call( void *req_ptr ) DECLSPEC_HIDDEN;
- extern ssize_t virtual_locked_read( int fd, void *addr, size_t size ) DECLSPEC_HIDDEN;
-diff --git a/dlls/ntdll/unix/virtual.c b/dlls/ntdll/unix/virtual.c
-index e759cf686bd..0c8de5f2c24 100644
---- a/dlls/ntdll/unix/virtual.c
-+++ b/dlls/ntdll/unix/virtual.c
-@@ -2608,14 +2608,14 @@ TEB *virtual_alloc_first_teb(void)
-     TEB *teb;
-     PEB *peb;
-     NTSTATUS status;
--    SIZE_T data_size = page_size;
-+    SIZE_T data_size = page_size * 2;
-     SIZE_T peb_size = page_size;
-     SIZE_T teb_size = signal_stack_mask + 1;
-     SIZE_T total = 32 * teb_size;
- 
-     /* reserve space for shared user data */
-     status = NtAllocateVirtualMemory( NtCurrentProcess(), (void **)&user_shared_data, 0, &data_size,
--                                      MEM_RESERVE | MEM_COMMIT, PAGE_READONLY );
-+                                      MEM_RESERVE | MEM_COMMIT, PAGE_READWRITE );
-     if (status)
-     {
-         ERR( "wine: failed to map the shared user data: %08x\n", status );
-@@ -2839,7 +2839,7 @@ void virtual_clear_thread_stack( void *stack_end )
- /***********************************************************************
-  *           virtual_map_user_shared_data
-  */
--void virtual_map_user_shared_data(void)
-+void virtual_map_user_shared_data(void *syscall_handler)
- {
-     static const WCHAR wine_usdW[] = {'\\','K','e','r','n','e','l','O','b','j','e','c','t','s',
-                                       '\\','_','_','w','i','n','e','_','u','s','e','r','_','s','h','a','r','e','d','_','d','a','t','a',0};
-@@ -2862,6 +2862,11 @@ void virtual_map_user_shared_data(void)
-         ERR( "failed to remap the process USD: %d\n", res );
-         exit(1);
-     }
-+
-+#if defined(__APPLE__) && defined(__x86_64__)
-+    *((void **)((char*)user_shared_data + 0x1000)) = syscall_handler;
-+#endif
-+
-     if (needs_close) close( fd );
-     NtClose( section );
- }
-diff --git a/libs/wine/loader.c b/libs/wine/loader.c
-index 4597a6cb324..3d0d75e9c6d 100644
---- a/libs/wine/loader.c
-+++ b/libs/wine/loader.c
-@@ -398,7 +398,11 @@ static void *map_dll( const IMAGE_NT_HEADERS *nt_descr )
-     sec->SizeOfRawData = code_end - code_start;
-     sec->Misc.VirtualSize = sec->SizeOfRawData;
-     sec->VirtualAddress   = code_start;
-+#ifdef _WIN64
-+    sec->PointerToRawData = 0x400; /* file alignment */
-+#else
-     sec->PointerToRawData = 0x200; /* file alignment */
-+#endif
-     sec->Characteristics  = (IMAGE_SCN_CNT_CODE | IMAGE_SCN_MEM_EXECUTE | IMAGE_SCN_MEM_READ);
-     sec++;
- 
-diff --git a/server/mapping.c b/server/mapping.c
-index 0941dd87c05..002f3215af2 100644
---- a/server/mapping.c
-+++ b/server/mapping.c
-@@ -964,7 +964,11 @@ struct object *create_user_data_mapping( struct object *root, const struct unico
-     if (!(mapping = create_mapping( root, name, OBJ_OPENIF, sizeof(KSHARED_USER_DATA),
-                                     SEC_COMMIT, 0, FILE_READ_DATA | FILE_WRITE_DATA, NULL ))) return NULL;
-     ptr = mmap( NULL, mapping->size, PROT_WRITE, MAP_SHARED, get_unix_fd( mapping->fd ), 0 );
--    if (ptr != MAP_FAILED) user_shared_data = ptr;
-+    if (ptr != MAP_FAILED)
-+    {
-+        user_shared_data = ptr;
-+        user_shared_data->SystemCallPad[0] = 1;
-+    }
-     return &mapping->obj;
- }
- 
-diff --git a/tools/winebuild/parser.c b/tools/winebuild/parser.c
-index 91f596f1d2d..533ec5d2009 100644
---- a/tools/winebuild/parser.c
-+++ b/tools/winebuild/parser.c
-@@ -545,7 +545,7 @@ static const char *parse_spec_flags( DLLSPEC *spec, ORDDEF *odp )
- 
- static int needs_syscall( ORDDEF *odp, DLLSPEC *spec )
- {
--    if (target_cpu != CPU_x86)
-+    if (target_cpu != CPU_x86 && target_cpu != CPU_x86_64)
-         return 0;
-     if (odp->flags & (FLAG_FORWARD | FLAG_REGISTER))
-         return 0;
-diff --git a/tools/winebuild/spec32.c b/tools/winebuild/spec32.c
-index 07d6eed05fc..9cc4698d0d7 100644
---- a/tools/winebuild/spec32.c
-+++ b/tools/winebuild/spec32.c
-@@ -375,11 +375,11 @@ static void output_relay_debug( DLLSPEC *spec )
- }
- 
- /*******************************************************************
-- *         output_syscall_thunks
-+ *         output_syscall_thunks_x86
-  *
-  * Output entry points for system call functions
-  */
--static void output_syscall_thunks( DLLSPEC *spec )
-+static void output_syscall_thunks_x86( DLLSPEC *spec )
- {
-     const unsigned int page_size = get_page_size();
-     int i;
-@@ -488,6 +488,157 @@ static void output_syscall_thunks( DLLSPEC *spec )
-     output_function_size( "__wine_syscall_dispatcher" );
- }
- 
-+/*******************************************************************
-+ *         output_syscall_thunks_x64
-+ *
-+ * Output entry points for system call functions
-+ */
-+static void output_syscall_thunks_x64( DLLSPEC *spec )
-+{
-+    const unsigned int page_size = get_page_size();
-+    int i;
-+
-+    if (!spec->nb_syscalls)
-+        return;
-+
-+    /* Reserve space for PE header directly before syscalls. */
-+    if (target_platform == PLATFORM_APPLE)
-+        output( "\t.text\n" );
-+    else
-+        output( "\n\t.section \".text.startup\"\n" );
-+
-+    output( "\t.align %d\n", get_alignment(65536) );
-+    output( "__wine_spec_pe_header_syscalls:\n" );
-+    output( "__wine_spec_pe_header_syscalls_end:\n" );
-+    output( "\t.byte 0\n" );
-+    output( "\t.balign %d, 0\n", page_size );
-+
-+    output( "\n/* syscall thunks */\n\n" );
-+    for (i = 0; i < spec->nb_syscalls; i++)
-+    {
-+        ORDDEF *odp = spec->syscalls[i];
-+        const char *name = odp->link_name;
-+
-+        /* Chromium depends on syscall thunks having the same form as on
-+         * Windows. For 64-bit systems the only viable form we can emulate is
-+         * having an int $0x2e fallback. Since actually using an interrupt is
-+         * expensive, and since for some reason Chromium doesn't actually
-+         * validate that instruction, we can just put a jmp there instead. */
-+
-+        output( "\t.balign 16, 0\n" );
-+        output( "\t%s\n", func_declaration(name) );
-+        output( "%s\n", asm_globl(name) );
-+        output_cfi( ".cfi_startproc" );
-+        output( "\t.byte 0x4c,0x8b,0xd1\n" );                               /* mov r10, rcx */
-+        output( "\t.byte 0xb8\n" );                                         /* mov eax, SYSCALL */
-+        output( "\t.long %d\n", i );
-+        output( "\t.byte 0xf6,0x04,0x25,0x08,0x03,0xfe,0x7f,0x01\n" );      /* test byte ptr [0x7ffe0308], 1 */
-+        output( "\t.byte 0x75,0x03\n" );                                    /* jne (over syscall) */
-+        output( "\t.byte 0x0f,0x05\n" );                                    /* syscall */
-+        output( "\t.byte 0xc3\n" );                                         /* ret */
-+        output( "\t.byte 0xeb,0x01\n" );                                    /* jmp over ret */
-+        output( "\t.byte 0xc3\n" );                                         /* ret */
-+        if (target_platform == PLATFORM_APPLE)
-+        {
-+            output( "\t.byte 0xff,0x14,0x25\n" );                           /* call [0x7ffe1000] */
-+            output( "\t.long 0x7ffe1000\n" );
-+        }
-+        else
-+        {
-+            output( "\t.byte 0x65,0xff,0x14,0x25\n" );                      /* call qword ptr gs:[0x100] */
-+            output( "\t.long 0x100\n");
-+        }
-+        /* This RET is never reached, but Legends of Runeterra demands that it
-+         * exist anyway. */
-+        output( "\t.byte 0xc3\n" );                                         /* ret */
-+        output_cfi( ".cfi_endproc" );
-+        output_function_size( name );
-+    }
-+
-+    for (i = 0; i < 0x20; i++)
-+        output( "\t.byte 0\n" );
-+
-+    output( "\n/* syscall table */\n\n" );
-+    output( "\t.data\n" );
-+    output( "%s\n", asm_globl("__wine_syscall_table") );
-+    for (i = 0; i < spec->nb_syscalls; i++)
-+    {
-+        ORDDEF *odp = spec->syscalls[i];
-+        output ("\t%s %s\n", get_asm_ptr_keyword(), asm_name(odp->impl_name) );
-+    }
-+
-+    output( "\n/* syscall argument stack size table */\n\n" );
-+    output( "\t.data\n" );
-+    output( "%s\n", asm_globl("__wine_syscall_stack_size") );
-+    for (i = 0; i < spec->nb_syscalls; i++)
-+    {
-+        ORDDEF *odp = spec->syscalls[i];
-+        output( "\t.byte %d\n", max(get_args_size(odp), 32) - 32 );
-+    }
-+
-+    output( "\n/* syscall dispatcher */\n\n" );
-+    output( "\t.text\n" );
-+    output( "\t.align %d\n", get_alignment(16) );
-+    output( "\t%s\n", func_declaration("__wine_syscall_dispatcher") );
-+    output( "%s\n", asm_globl("__wine_syscall_dispatcher") );
-+
-+    /* prologue */
-+    output_cfi( ".cfi_startproc" );
-+    output( "\tpushq %%rbp\n" );
-+    output_cfi( ".cfi_adjust_cfa_offset 8" );
-+    output_cfi( ".cfi_rel_offset %%rbp,0" );
-+    output( "\tmovq %%rsp,%%rbp\n" );
-+    output_cfi( ".cfi_def_cfa_register %%rbp" );
-+    output( "\tpushq %%rsi\n" );
-+    output_cfi( ".cfi_rel_offset %%rsi,-8" );
-+    output( "\tpushq %%rdi\n" );
-+    output_cfi( ".cfi_rel_offset %%rdi,-16" );
-+
-+    /* Legends of Runeterra hooks the first system call return instruction, and
-+     * depends on us returning to it. Adjust the return address accordingly. */
-+    if (target_platform == PLATFORM_APPLE)
-+        output( "\tsubq $0xb,0x8(%%rbp)\n" );
-+    else
-+        output( "\tsubq $0xc,0x8(%%rbp)\n" );
-+
-+    /* copy over any arguments on the stack */
-+    output( "\tleaq 0x38(%%rbp),%%rsi\n" );
-+    if (UsePIC)
-+    {
-+        output( "\tleaq (%%rip), %%r11\n" );
-+        output( "1:\tmovzbq (%s-1b)(%%r11,%%rax,1),%%rcx\n", asm_name("__wine_syscall_stack_size") );
-+    }
-+    else
-+        output( "\tmovzbq %s(%%rax),%%rcx\n", asm_name("__wine_syscall_stack_size") );
-+    output( "\tsubq %%rcx,%%rsp\n" );
-+    output( "\tand $~0xf,%%rsp\n\t" ); /* ensure stack alignment. */
-+    output( "\tshrq $3,%%rcx\n" );
-+    output( "\tmovq %%rsp,%%rdi\n" );
-+    output( "\trep; movsq\n" );
-+
-+    /* call the function */
-+    output( "\tmovq %%r10,%%rcx\n" );
-+    output( "\tsubq $0x20,%%rsp\n" );
-+    if (UsePIC)
-+        output( "\tcallq *(%s-1b)(%%r11,%%rax,%d)\n", asm_name("__wine_syscall_table"), get_ptr_size() );
-+    else
-+        output( "\tcallq *%s(,%%rax,%d)\n", asm_name("__wine_syscall_table"), get_ptr_size() );
-+    output( "\tleaq -0x10(%%rbp),%%rsp\n" );
-+
-+    /* epilogue */
-+    output( "\tpopq %%rdi\n" );
-+    output_cfi( ".cfi_same_value %%rdi" );
-+    output( "\tpopq %%rsi\n" );
-+    output_cfi( ".cfi_same_value %%rsi" );
-+    output_cfi( ".cfi_def_cfa_register %%rsp" );
-+    output( "\tpopq %%rbp\n" );
-+    output_cfi( ".cfi_adjust_cfa_offset -8" );
-+    output_cfi( ".cfi_same_value %%rbp" );
-+    output( "\tret\n" );
-+    output_cfi( ".cfi_endproc" );
-+    output_function_size( "__wine_syscall_dispatcher" );
-+}
-+
- /*******************************************************************
-  *         output_exports
-  *
-@@ -845,7 +996,10 @@ void output_spec32_file( DLLSPEC *spec )
-     open_output_file();
-     output_standard_file_header();
-     output_module( spec );
--    output_syscall_thunks( spec );
-+    if (target_cpu == CPU_x86)
-+        output_syscall_thunks_x86( spec );
-+    else if (target_cpu == CPU_x86_64)
-+        output_syscall_thunks_x64( spec );
-     output_stubs( spec );
-     output_exports( spec );
-     output_imports( spec );
-@@ -858,7 +1012,7 @@ void output_spec32_file( DLLSPEC *spec )
- 
- static int needs_stub_exports( DLLSPEC *spec )
- {
--    if (target_cpu != CPU_x86)
-+    if (target_cpu != CPU_x86 && target_cpu != CPU_x86_64)
-         return 0;
-     if (!(spec->characteristics & IMAGE_FILE_DLL))
-         return 0;
-@@ -868,7 +1022,7 @@ static int needs_stub_exports( DLLSPEC *spec )
- }
- 
- 
--static void create_stub_exports_text( DLLSPEC *spec )
-+static void create_stub_exports_text_x86( DLLSPEC *spec )
- {
-     int i, nr_exports = spec->base <= spec->limit ? spec->limit - spec->base + 1 : 0;
-     size_t rva, thunk;
-@@ -1026,6 +1180,122 @@ static void create_stub_exports_text( DLLSPEC *spec )
- }
- 
- 
-+static void create_stub_exports_text_x64( DLLSPEC *spec )
-+{
-+    int i, nr_exports = spec->base <= spec->limit ? spec->limit - spec->base + 1 : 0;
-+
-+    /* output syscalls */
-+    for (i = 0; i < spec->nb_syscalls; i++)
-+    {
-+        ORDDEF *odp = spec->syscalls[i];
-+
-+        align_output_rva( 16, 16 );
-+        put_label( odp->link_name );
-+        put_byte( 0x4c ); put_byte( 0x8b ); put_byte( 0xd1 );  /* mov r10, rcx */
-+        put_byte( 0xb8 ); put_dword( i );                      /* mov eax, SYSCALL */
-+        put_byte( 0xf6 ); put_byte( 0x04 ); put_byte( 0x25 );  /* test byte ptr [0x7ffe0308], 1 */
-+                put_byte( 0x08 ); put_byte( 0x03 ); put_byte( 0xfe );
-+                put_byte( 0x7f ); put_byte( 0x01 );
-+        put_byte( 0x75 ); put_byte( 0x03 );                    /* jne */
-+        put_byte( 0x0f ); put_byte( 0x05 );                    /* syscall */
-+        put_byte( 0xc3 );                                      /* ret */
-+        put_byte( 0xeb ); put_byte( 0x01 );                    /* jmp */
-+        put_byte( 0xc3 );                                      /* ret */
-+        if (target_platform == PLATFORM_APPLE)
-+        {
-+            put_byte( 0xff ); put_byte( 0x14 );                /* call [0x7ffe1000] */
-+            put_byte( 0x25 ); put_dword( 0x7ffe1000 );
-+        }
-+        else
-+        {
-+            put_byte( 0x65 ); put_byte( 0xff );                /* call ptr gs:[0x100] */
-+            put_byte( 0x14 ); put_byte( 0x25 ); put_dword( 0x100 );
-+
-+        }
-+        put_byte( 0xc3 );                                      /* ret */
-+    }
-+
-+    if (spec->nb_syscalls)
-+    {
-+        for (i = 0; i < 0x20; i++)
-+            put_byte( 0 );
-+    }
-+
-+    /* output stub code for exports */
-+    for (i = 0; i < spec->nb_entry_points; i++)
-+    {
-+        ORDDEF *odp = &spec->entry_points[i];
-+        const char *name;
-+
-+        if (odp->flags & FLAG_SYSCALL)
-+            continue;
-+
-+        align_output_rva( 16, 16 );
-+        name = get_stub_name( odp, spec );
-+        put_label( name );
-+        put_byte( 0xcc );                                             /* int $0x3 */
-+        put_byte( 0xc3 );                                             /* ret */
-+    }
-+
-+    /* output entry point */
-+    align_output_rva( 16, 16 );
-+    put_label( "entrypoint" );
-+    put_byte( 0xb8 ); put_dword( 1 );                                 /* mov rax, 1 */
-+    put_byte( 0xc3 );                                                 /* ret */
-+
-+    /* export directory */
-+    align_output_rva( 16, 16 );
-+    put_label( "export_start" );
-+    put_dword( 0 );                             /* Characteristics */
-+    put_dword( 0 );                             /* TimeDateStamp */
-+    put_dword( 0 );                             /* MajorVersion/MinorVersion */
-+    put_dword( label_rva("dll_name") );         /* Name */
-+    put_dword( spec->base );                    /* Base */
-+    put_dword( nr_exports );                    /* NumberOfFunctions */
-+    put_dword( spec->nb_names );                /* NumberOfNames */
-+    put_dword( label_rva("export_funcs") );     /* AddressOfFunctions */
-+    put_dword( label_rva("export_names") );     /* AddressOfNames */
-+    put_dword( label_rva("export_ordinals") );  /* AddressOfNameOrdinals */
-+
-+    put_label( "export_funcs" );
-+    for (i = spec->base; i <= spec->limit; i++)
-+    {
-+        ORDDEF *odp = spec->ordinals[i];
-+        if (odp)
-+        {
-+            const char *name = (odp->flags & FLAG_SYSCALL) ? odp->link_name : get_stub_name( odp, spec );
-+            put_dword( label_rva( name ) );
-+        }
-+        else
-+            put_dword( 0 );
-+    }
-+
-+    if (spec->nb_names)
-+    {
-+        put_label( "export_names" );
-+        for (i = 0; i < spec->nb_names; i++)
-+            put_dword( label_rva(strmake("str_%s", get_stub_name(spec->names[i], spec))) );
-+
-+        put_label( "export_ordinals" );
-+        for (i = 0; i < spec->nb_names; i++)
-+            put_word( spec->names[i]->ordinal - spec->base );
-+        if (spec->nb_names % 2)
-+            put_word( 0 );
-+    }
-+
-+    put_label( "dll_name" );
-+    put_str( spec->file_name );
-+
-+    for (i = 0; i < spec->nb_names; i++)
-+    {
-+        put_label( strmake("str_%s", get_stub_name(spec->names[i], spec)) );
-+        put_str( spec->names[i]->name );
-+    }
-+
-+    put_label( "export_end" );
-+}
-+
-+
- static void create_stub_exports_data( DLLSPEC *spec )
- {
-     int i;
-@@ -1225,7 +1495,10 @@ static void output_fake_module_pass( DLLSPEC *spec )
-     if (needs_stub_exports( spec ))
-     {
-         put_label( "text_start" );
--        create_stub_exports_text( spec );
-+        if (target_cpu == CPU_x86)
-+            create_stub_exports_text_x86( spec );
-+        else if (target_cpu == CPU_x86_64)
-+            create_stub_exports_text_x64( spec );
-         put_label( "text_end" );
-     }
-     else
--- 
-2.27.0
-
diff --git a/patches/winebuild-Fake_Dlls/definition b/patches/winebuild-Fake_Dlls/definition
deleted file mode 100644
index bf2454336..000000000
--- a/patches/winebuild-Fake_Dlls/definition
+++ /dev/null
@@ -1,18 +0,0 @@
-Fixes: [21232] Chromium-based browser engines (Chrome, Opera, Comodo Dragon, SRWare Iron) crash on startup unless '--no-sandbox' is used (native API sandboxing/hooking scheme incompatible with Wine)
-Fixes: [42741] StarCraft I: 1.18 PTR fails to initialize ClientSdk.dll
-Fixes: [45349] Multiple applications and games crash due to missing support for 64-bit syscall thunks (StreetFighter V)
-Fixes: [45573] League of Legends 8.12+ fails to start a game (anticheat engine, hooking of syscall return instructions)
-Fixes: [45650] chromium 32-bit sandbox expects different syscall thunks depending on Windows version
-Depends: ntdll-WRITECOPY
-Depends: ws2_32-WSACleanup
-Depends: ntdll-ApiSetMap
-
-# As of 43be3507c04, unless I've misread, ntdll.dll no longer has the chance to
-# run code before ntdll.so performs process initialization. Unfortunately,
-# ntdll.so is still making calls to Nt* exports during that process
-# initialization, which in practice means it's calling syscall thunks. In order
-# for this series to work, we need to poke __wine_syscall_dispatcher into the
-# TEB before those calls are made. Fixing this would require a nontrivial amount
-# of effort, which will be obviated as soon as Alexandre finishes splitting
-# ntdll upstream.
-Disabled: true

diff --git a/patches/eventfd_synchronization/definition b/patches/eventfd_synchronization/definition
index 1f084c73a..a00b4e151 100644
--- a/patches/eventfd_synchronization/definition
+++ b/patches/eventfd_synchronization/definition
@@ -7,7 +7,6 @@ Depends: ws2_32-WSACleanup
 Depends: server-Realtime_Priority
 Depends: advapi32-Token_Integrity_Level
 Depends: ntdll-Junction_Points
-Depends: kernel32-K32GetPerformanceInfo
 Depends: user32-rawinput-mouse
 Depends: server-Desktop_Refcount
 Disabled: true
\ No newline at end of file
diff --git a/patches/kernel32-K32GetPerformanceInfo/0001-kernel32-Make-K32GetPerformanceInfo-faster.patch b/patches/kernel32-K32GetPerformanceInfo/0001-kernel32-Make-K32GetPerformanceInfo-faster.patch
deleted file mode 100644
index eb6fd7647..000000000
--- a/patches/kernel32-K32GetPerformanceInfo/0001-kernel32-Make-K32GetPerformanceInfo-faster.patch
+++ /dev/null
@@ -1,134 +0,0 @@
-From 659da72b956f4c59bc940736609fe8d52ec2d909 Mon Sep 17 00:00:00 2001
-From: =?UTF-8?q?Michael=20M=C3=BCller?= <michael@fds-team.de>
-Date: Sun, 19 Feb 2017 05:38:40 +0100
-Subject: [PATCH] kernel32: Make K32GetPerformanceInfo faster.
-
----
- dlls/kernelbase/debug.c | 44 ++++++++++++++---------------------------
- server/process.c        | 18 +++++++++++++++++
- server/protocol.def     |  8 ++++++++
- 3 files changed, 41 insertions(+), 29 deletions(-)
-
-diff --git a/dlls/kernelbase/debug.c b/dlls/kernelbase/debug.c
-index 6acdf0f1ea9..8f021ebb0d2 100644
---- a/dlls/kernelbase/debug.c
-+++ b/dlls/kernelbase/debug.c
-@@ -1449,7 +1449,6 @@ BOOL WINAPI DECLSPEC_HOTPATCH K32GetPerformanceInfo( PPERFORMANCE_INFORMATION in
- {
-     SYSTEM_PERFORMANCE_INFORMATION perf;
-     SYSTEM_BASIC_INFORMATION basic;
--    SYSTEM_PROCESS_INFORMATION *process, *spi;
-     DWORD info_size;
-     NTSTATUS status;
- 
-@@ -1462,9 +1461,9 @@ BOOL WINAPI DECLSPEC_HOTPATCH K32GetPerformanceInfo( PPERFORMANCE_INFORMATION in
-     }
- 
-     status = NtQuerySystemInformation( SystemPerformanceInformation, &perf, sizeof(perf), NULL );
--    if (!set_ntstatus( status )) return FALSE;
-+    if (status) goto err;
-     status = NtQuerySystemInformation( SystemBasicInformation, &basic, sizeof(basic), NULL );
--    if (!set_ntstatus( status )) return FALSE;
-+    if (status) goto err;
- 
-     info->cb                 = sizeof(*info);
-     info->CommitTotal        = perf.TotalCommittedPages;
-@@ -1478,37 +1477,24 @@ BOOL WINAPI DECLSPEC_HOTPATCH K32GetPerformanceInfo( PPERFORMANCE_INFORMATION in
-     info->KernelNonpaged     = perf.NonPagedPoolUsage;
-     info->PageSize           = basic.PageSize;
- 
--    /* fields from SYSTEM_PROCESS_INFORMATION */
--    NtQuerySystemInformation( SystemProcessInformation, NULL, 0, &info_size );
--    for (;;)
-+    SERVER_START_REQ( get_system_info )
-     {
--        process = HeapAlloc( GetProcessHeap(), 0, info_size );
--        if (!process)
-+        status = wine_server_call( req );
-+        if (!status)
-         {
--            SetLastError( ERROR_OUTOFMEMORY );
--            return FALSE;
--        }
--        status = NtQuerySystemInformation( SystemProcessInformation, process, info_size, &info_size );
--        if (!status) break;
--        HeapFree( GetProcessHeap(), 0, process );
--        if (status != STATUS_INFO_LENGTH_MISMATCH)
--        {
--            SetLastError( RtlNtStatusToDosError( status ) );
--            return FALSE;
-+            info->ProcessCount = reply->processes;
-+            info->HandleCount = reply->handles;
-+            info->ThreadCount = reply->threads;
-         }
-     }
--    info->HandleCount = info->ProcessCount = info->ThreadCount = 0;
--    spi = process;
--    for (;;)
--    {
--        info->ProcessCount++;
--        info->HandleCount += spi->HandleCount;
--        info->ThreadCount += spi->dwThreadCount;
--        if (spi->NextEntryOffset == 0) break;
--        spi = (SYSTEM_PROCESS_INFORMATION *)((char *)spi + spi->NextEntryOffset);
--    }
--    HeapFree( GetProcessHeap(), 0, process );
-+    SERVER_END_REQ;
-+
-+    if (status) goto err;
-     return TRUE;
-+
-+err:
-+    SetLastError( RtlNtStatusToDosError( status ) );
-+    return FALSE;
- }
- 
- 
-diff --git a/server/process.c b/server/process.c
-index 9482da98be5..9b7f10fffe5 100644
---- a/server/process.c
-+++ b/server/process.c
-@@ -1791,6 +1791,24 @@ DECL_HANDLER(resume_process)
-     }
- }
- 
-+/* Retrieve process, thread and handle count */
-+DECL_HANDLER(get_system_info)
-+{
-+    struct process *process;
-+
-+    reply->processes = 0;
-+    reply->threads = 0;
-+    reply->handles = 0;
-+
-+    LIST_FOR_EACH_ENTRY( process, &process_list, struct process, entry )
-+    {
-+        if (!process->running_threads) continue;
-+        reply->processes++;
-+        reply->threads += process->running_threads;
-+        reply->handles += get_handle_table_count( process );
-+    }
-+}
-+
- /* Get a list of processes and threads currently running */
- DECL_HANDLER(list_processes)
- {
-diff --git a/server/protocol.def b/server/protocol.def
-index bad8fef7903..cee75eff66d 100644
---- a/server/protocol.def
-+++ b/server/protocol.def
-@@ -3945,3 +3945,11 @@ struct handle_info
- @REQ(resume_process)
-     obj_handle_t handle;       /* process handle */
- @END
-+
-+/* Return system information values */
-+@REQ(get_system_info)
-+@REPLY
-+    unsigned int processes;   /* number of processes */
-+    unsigned int threads;     /* number of threads */
-+    unsigned int handles;     /* number of handles */
-+@END
--- 
-2.27.0
-
diff --git a/patches/kernel32-K32GetPerformanceInfo/definition b/patches/kernel32-K32GetPerformanceInfo/definition
deleted file mode 100644
index 7c05e9ab8..000000000
--- a/patches/kernel32-K32GetPerformanceInfo/definition
+++ /dev/null
@@ -1 +0,0 @@
-Fixes: Use separate wineserver call for kernel32.K32GetPerformanceInfo
diff --git a/patches/patchinstall.sh b/patches/patchinstall.sh
index a33d9f136..63c978db0 100755
--- a/patches/patchinstall.sh
+++ b/patches/patchinstall.sh
@@ -146,7 +146,6 @@ patch_enable_all ()
 	enable_kernel32_Debugger="$1"
 	enable_kernel32_FindFirstFile="$1"
 	enable_kernel32_Job_Tests="$1"
-	enable_kernel32_K32GetPerformanceInfo="$1"
 	enable_kernel32_Processor_Group="$1"
 	enable_kernel32_SetProcessDEPPolicy="$1"
 	enable_krnl386_exe16_GDT_LDT_Emulation="$1"
@@ -529,9 +528,6 @@ patch_enable ()
 		kernel32-Job_Tests)
 			enable_kernel32_Job_Tests="$2"
 			;;
-		kernel32-K32GetPerformanceInfo)
-			enable_kernel32_K32GetPerformanceInfo="$2"
-			;;
 		kernel32-Processor_Group)
 			enable_kernel32_Processor_Group="$2"
 			;;
@@ -3131,18 +3127,6 @@ if test "$enable_kernel32_Job_Tests" -eq 1; then
 	) >> "$patchlist"
 fi
 
-# Patchset kernel32-K32GetPerformanceInfo
-# |
-# | Modified files:
-# |   *	dlls/kernelbase/debug.c, server/process.c, server/protocol.def
-# |
-if test "$enable_kernel32_K32GetPerformanceInfo" -eq 1; then
-	patch_apply kernel32-K32GetPerformanceInfo/0001-kernel32-Make-K32GetPerformanceInfo-faster.patch
-	(
-		printf '%s\n' '+    { "Michael Müller", "kernel32: Make K32GetPerformanceInfo faster.", 1 },';
-	) >> "$patchlist"
-fi
-
 # Patchset kernel32-Processor_Group
 # |
 # | This patchset has the following (direct or indirect) dependencies:


diff --git a/patches/advapi32-Token_Integrity_Level/0008-ntdll-Implement-process-token-elevation-through-mani.patch b/patches/advapi32-Token_Integrity_Level/0008-ntdll-Implement-process-token-elevation-through-mani.patch
index 46b146499..98f49809e 100644
--- a/patches/advapi32-Token_Integrity_Level/0008-ntdll-Implement-process-token-elevation-through-mani.patch
+++ b/patches/advapi32-Token_Integrity_Level/0008-ntdll-Implement-process-token-elevation-through-mani.patch
@@ -1,4 +1,4 @@
-From 1f2b1bafabfd457836f18741f178b3745e129c36 Mon Sep 17 00:00:00 2001
+From b7e3ca4678d073c92f950708c1be35f37fda86d0 Mon Sep 17 00:00:00 2001
 From: =?UTF-8?q?Michael=20M=C3=BCller?= <michael@fds-team.de>
 Date: Sat, 5 Aug 2017 03:39:55 +0200
 Subject: [PATCH] ntdll: Implement process token elevation through manifests.
@@ -12,10 +12,10 @@ Subject: [PATCH] ntdll: Implement process token elevation through manifests.
  5 files changed, 67 insertions(+)
 
 diff --git a/dlls/ntdll/loader.c b/dlls/ntdll/loader.c
-index 0c8f05285c4..92ae87c6e6d 100644
+index 3513102b6f0..3b68f6685d0 100644
 --- a/dlls/ntdll/loader.c
 +++ b/dlls/ntdll/loader.c
-@@ -3898,6 +3898,32 @@ void WINAPI LdrInitializeThunk( CONTEXT *context, void **entry, ULONG_PTR unknow
+@@ -3489,6 +3489,32 @@ void WINAPI LdrInitializeThunk( CONTEXT *context, void **entry, ULONG_PTR unknow
  }
  
  
@@ -48,7 +48,7 @@ index 0c8f05285c4..92ae87c6e6d 100644
  /***********************************************************************
   *           load_global_options
   */
-@@ -4359,6 +4385,7 @@ void __wine_process_init(void)
+@@ -3922,6 +3948,7 @@ void __wine_process_init(void)
                                        'k','e','r','n','e','l','3','2','.','d','l','l',0};
      void (WINAPI *kernel32_start_process)(LPTHREAD_START_ROUTINE,void*) = NULL;
      RTL_USER_PROCESS_PARAMETERS *params;
@@ -56,7 +56,7 @@ index 0c8f05285c4..92ae87c6e6d 100644
      WINE_MODREF *wm;
      NTSTATUS status;
      ANSI_STRING func_name;
-@@ -4453,6 +4480,16 @@ void __wine_process_init(void)
+@@ -4032,6 +4059,16 @@ void __wine_process_init(void)
  
      unix_funcs->virtual_set_large_address_space();
  
@@ -74,11 +74,11 @@ index 0c8f05285c4..92ae87c6e6d 100644
      RemoveEntryList( &wm->ldr.InLoadOrderLinks );
      InsertHeadList( &peb->LdrData->InLoadOrderModuleList, &wm->ldr.InLoadOrderLinks );
 diff --git a/server/process.c b/server/process.c
-index ac85cace95d..52604ec4d61 100644
+index c414717a8d7..100cb424623 100644
 --- a/server/process.c
 +++ b/server/process.c
-@@ -1115,6 +1115,14 @@ struct process_snapshot *process_snap( int *count )
-     return snapshot;
+@@ -1086,6 +1086,14 @@ int set_process_debug_flag( struct process *process, int flag )
+     return write_process_memory( process, process->peb + 2, 1, &data );
  }
  
 +/* replace the token of a process */
@@ -93,22 +93,22 @@ index ac85cace95d..52604ec4d61 100644
  DECL_HANDLER(new_process)
  {
 diff --git a/server/process.h b/server/process.h
-index 5b83e111a6f..dfe5c4e52d8 100644
+index fb29f21cb12..d0b7ec4987b 100644
 --- a/server/process.h
 +++ b/server/process.h
-@@ -139,6 +139,7 @@ extern void kill_debugged_processes( struct thread *debugger, int exit_code );
+@@ -129,6 +129,7 @@ extern void kill_console_processes( struct thread *renderer, int exit_code );
+ extern void kill_debugged_processes( struct thread *debugger, int exit_code );
  extern void detach_debugged_processes( struct thread *debugger );
- extern struct process_snapshot *process_snap( int *count );
  extern void enum_processes( int (*cb)(struct process*, void*), void *user);
 +extern void replace_process_token( struct process *process, struct token *token );
  
  /* console functions */
  extern void inherit_console( struct thread *parent_thread, struct process *parent,
 diff --git a/server/protocol.def b/server/protocol.def
-index 7315f8ac4ea..901c380b721 100644
+index bc0d0723eb3..ec67ce7ab87 100644
 --- a/server/protocol.def
 +++ b/server/protocol.def
-@@ -3763,6 +3763,13 @@ struct handle_info
+@@ -3737,6 +3737,13 @@ struct handle_info
  @END
  
  
@@ -145,5 +145,5 @@ index 970ed1838da..1c1d49989b3 100644
 +    }
 +}
 -- 
-2.26.2
+2.27.0
 
diff --git a/patches/kernel32-K32GetPerformanceInfo/0001-kernel32-Make-K32GetPerformanceInfo-faster.patch b/patches/kernel32-K32GetPerformanceInfo/0001-kernel32-Make-K32GetPerformanceInfo-faster.patch
index 6d992a412..eb6fd7647 100644
--- a/patches/kernel32-K32GetPerformanceInfo/0001-kernel32-Make-K32GetPerformanceInfo-faster.patch
+++ b/patches/kernel32-K32GetPerformanceInfo/0001-kernel32-Make-K32GetPerformanceInfo-faster.patch
@@ -1,4 +1,4 @@
-From 223addb60e053484eaa77df434898419683e926b Mon Sep 17 00:00:00 2001
+From 659da72b956f4c59bc940736609fe8d52ec2d909 Mon Sep 17 00:00:00 2001
 From: =?UTF-8?q?Michael=20M=C3=BCller?= <michael@fds-team.de>
 Date: Sun, 19 Feb 2017 05:38:40 +0100
 Subject: [PATCH] kernel32: Make K32GetPerformanceInfo faster.
@@ -10,7 +10,7 @@ Subject: [PATCH] kernel32: Make K32GetPerformanceInfo faster.
  3 files changed, 41 insertions(+), 29 deletions(-)
 
 diff --git a/dlls/kernelbase/debug.c b/dlls/kernelbase/debug.c
-index 6acdf0f1ea95..8f021ebb0d21 100644
+index 6acdf0f1ea9..8f021ebb0d2 100644
 --- a/dlls/kernelbase/debug.c
 +++ b/dlls/kernelbase/debug.c
 @@ -1449,7 +1449,6 @@ BOOL WINAPI DECLSPEC_HOTPATCH K32GetPerformanceInfo( PPERFORMANCE_INFORMATION in
@@ -85,14 +85,13 @@ index 6acdf0f1ea95..8f021ebb0d21 100644
  
  
 diff --git a/server/process.c b/server/process.c
-index 3156e1bc82a5..da5c55e5368a 100644
+index 9482da98be5..9b7f10fffe5 100644
 --- a/server/process.c
 +++ b/server/process.c
-@@ -1830,3 +1830,21 @@ DECL_HANDLER(resume_process)
-         release_object( process );
+@@ -1791,6 +1791,24 @@ DECL_HANDLER(resume_process)
      }
  }
-+
+ 
 +/* Retrieve process, thread and handle count */
 +DECL_HANDLER(get_system_info)
 +{
@@ -110,11 +109,15 @@ index 3156e1bc82a5..da5c55e5368a 100644
 +        reply->handles += get_handle_table_count( process );
 +    }
 +}
++
+ /* Get a list of processes and threads currently running */
+ DECL_HANDLER(list_processes)
+ {
 diff --git a/server/protocol.def b/server/protocol.def
-index ef10b5e1438c..ca34c9dc1b4b 100644
+index bad8fef7903..cee75eff66d 100644
 --- a/server/protocol.def
 +++ b/server/protocol.def
-@@ -3992,3 +3992,11 @@ struct handle_info
+@@ -3945,3 +3945,11 @@ struct handle_info
  @REQ(resume_process)
      obj_handle_t handle;       /* process handle */
  @END
@@ -127,5 +130,5 @@ index ef10b5e1438c..ca34c9dc1b4b 100644
 +    unsigned int handles;     /* number of handles */
 +@END
 -- 
-2.26.2
+2.27.0
 
diff --git a/patches/ntdll-Hide_Wine_Exports/definition b/patches/ntdll-Hide_Wine_Exports/definition
index 52e3041b2..3bd69ea0b 100644
--- a/patches/ntdll-Hide_Wine_Exports/definition
+++ b/patches/ntdll-Hide_Wine_Exports/definition
@@ -1,3 +1,2 @@
 Fixes: [38656] Add support for hiding wine version information from applications
-Depends: ntdll-ThreadTime
 Depends: advapi32-Token_Integrity_Level
diff --git a/patches/ntdll-Junction_Points/0001-ntdll-Add-support-for-junction-point-creation.patch b/patches/ntdll-Junction_Points/0001-ntdll-Add-support-for-junction-point-creation.patch
index c754a1085..97ec03a38 100644
--- a/patches/ntdll-Junction_Points/0001-ntdll-Add-support-for-junction-point-creation.patch
+++ b/patches/ntdll-Junction_Points/0001-ntdll-Add-support-for-junction-point-creation.patch
@@ -1,4 +1,4 @@
-From f886d8af24ba52e791535c7a606c4ca97cc5ed8e Mon Sep 17 00:00:00 2001
+From e043e7d570fcdc0f7bc662d794d111baaa15b015 Mon Sep 17 00:00:00 2001
 From: "Erich E. Hoover" <erich.e.hoover@gmail.com>
 Date: Thu, 16 Jan 2014 20:56:49 -0700
 Subject: [PATCH] ntdll: Add support for junction point creation.
@@ -18,10 +18,10 @@ Signed-off-by: Erich E. Hoover <erich.e.hoover@gmail.com>
  create mode 100644 libs/port/renameat2.c
 
 diff --git a/configure.ac b/configure.ac
-index 9c5f76669df..201ae3c2d98 100644
+index a403c9436ca..dbd07791de7 100644
 --- a/configure.ac
 +++ b/configure.ac
-@@ -2203,6 +2203,8 @@ AC_CHECK_FUNCS(\
+@@ -2218,6 +2218,8 @@ AC_CHECK_FUNCS(\
  	pwrite \
  	readdir \
  	readlink \
@@ -31,7 +31,7 @@ index 9c5f76669df..201ae3c2d98 100644
  	select \
  	setproctitle \
 diff --git a/dlls/ntdll/tests/file.c b/dlls/ntdll/tests/file.c
-index 184b7cdad59..8b5ddbb0da1 100644
+index a502a8eec75..bce34f03920 100644
 --- a/dlls/ntdll/tests/file.c
 +++ b/dlls/ntdll/tests/file.c
 @@ -38,6 +38,7 @@
@@ -155,7 +155,7 @@ index 184b7cdad59..8b5ddbb0da1 100644
 +    test_reparse_points();
  }
 diff --git a/dlls/ntdll/unix/file.c b/dlls/ntdll/unix/file.c
-index ca6899b50f5..44cb12f90ee 100644
+index b76d07a8175..271151ed1be 100644
 --- a/dlls/ntdll/unix/file.c
 +++ b/dlls/ntdll/unix/file.c
 @@ -32,6 +32,7 @@
@@ -174,7 +174,7 @@ index ca6899b50f5..44cb12f90ee 100644
  #include "wine/server.h"
  #include "wine/list.h"
  #include "wine/debug.h"
-@@ -5607,6 +5609,104 @@ static void ignore_server_ioctl_struct_holes( ULONG code, const void *in_buffer,
+@@ -5661,6 +5663,104 @@ static void ignore_server_ioctl_struct_holes( ULONG code, const void *in_buffer,
  }
  
  
@@ -204,7 +204,7 @@ index ca6899b50f5..44cb12f90ee 100644
 +    src_allocated = TRUE;
 +    nt_dest.Buffer = dest;
 +    nt_dest.Length = dest_len;
-+    status = nt_to_unix_file_name( &nt_dest, &unix_dest, 0, FALSE );
++    status = nt_to_unix_file_name( &nt_dest, &unix_dest, 0 );
 +    if (status != STATUS_SUCCESS && status != STATUS_NO_SUCH_FILE)
 +        goto cleanup;
 +    dest_allocated = TRUE;
@@ -279,7 +279,7 @@ index ca6899b50f5..44cb12f90ee 100644
  /******************************************************************************
   *              NtFsControlFile   (NTDLL.@)
   */
-@@ -5671,6 +5771,23 @@ NTSTATUS WINAPI NtFsControlFile( HANDLE handle, HANDLE event, PIO_APC_ROUTINE ap
+@@ -5748,6 +5848,23 @@ NTSTATUS WINAPI NtFsControlFile( HANDLE handle, HANDLE event, PIO_APC_ROUTINE ap
          io->Information = 0;
          status = STATUS_SUCCESS;
          break;
@@ -304,10 +304,10 @@ index ca6899b50f5..44cb12f90ee 100644
          return server_ioctl_file( handle, event, apc, apc_context, io, code,
                                    in_buffer, in_size, out_buffer, out_size );
 diff --git a/include/Makefile.in b/include/Makefile.in
-index 9f70e72b4c7..1c5c456aa39 100644
+index 216adf0d7ae..7dc16c230b6 100644
 --- a/include/Makefile.in
 +++ b/include/Makefile.in
-@@ -518,6 +518,7 @@ SOURCES = \
+@@ -520,6 +520,7 @@ SOURCES = \
  	ntddvdeo.h \
  	ntdef.h \
  	ntdsapi.h \
@@ -364,7 +364,7 @@ index 00000000000..21d42e17325
 +
 +#endif /* __WINE_NTIFS_H */
 diff --git a/include/wine/port.h b/include/wine/port.h
-index 928730a41d7..e8434c73cca 100644
+index 930efeeea1f..7d2c7388707 100644
 --- a/include/wine/port.h
 +++ b/include/wine/port.h
 @@ -334,6 +334,15 @@ double rint(double x);
@@ -384,7 +384,7 @@ index 928730a41d7..e8434c73cca 100644
  int statvfs( const char *path, struct statvfs *buf );
  #endif
 diff --git a/libs/port/Makefile.in b/libs/port/Makefile.in
-index 7bc67fa3fee..1963afe2423 100644
+index d1de285d527..4b1ecab7516 100644
 --- a/libs/port/Makefile.in
 +++ b/libs/port/Makefile.in
 @@ -14,6 +14,7 @@ C_SRCS = \
diff --git a/patches/ntdll-Junction_Points/0005-kernel32-ntdll-Add-support-for-deleting-junction-poi.patch b/patches/ntdll-Junction_Points/0005-kernel32-ntdll-Add-support-for-deleting-junction-poi.patch
index ddf87cee9..912e45db9 100644
--- a/patches/ntdll-Junction_Points/0005-kernel32-ntdll-Add-support-for-deleting-junction-poi.patch
+++ b/patches/ntdll-Junction_Points/0005-kernel32-ntdll-Add-support-for-deleting-junction-poi.patch
@@ -1,4 +1,4 @@
-From b53336eeca65aa2dbf11c2d80a731ca904fe81de Mon Sep 17 00:00:00 2001
+From 67cacb66b16c354aa30f4c94bba9da44f7e45619 Mon Sep 17 00:00:00 2001
 From: "Erich E. Hoover" <erich.e.hoover@gmail.com>
 Date: Thu, 16 Jan 2014 21:02:11 -0700
 Subject: [PATCH] kernel32,ntdll: Add support for deleting junction points with
@@ -11,10 +11,10 @@ Signed-off-by: Erich E. Hoover <erich.e.hoover@gmail.com>
  2 files changed, 46 insertions(+), 7 deletions(-)
 
 diff --git a/dlls/kernel32/path.c b/dlls/kernel32/path.c
-index b580e367561..9fa7d4c9f27 100644
+index db2c1fb0240..6b7912359cf 100644
 --- a/dlls/kernel32/path.c
 +++ b/dlls/kernel32/path.c
-@@ -1058,6 +1058,7 @@ BOOL WINAPI CreateDirectoryExA( LPCSTR template, LPCSTR path, LPSECURITY_ATTRIBU
+@@ -233,6 +233,7 @@ BOOL WINAPI CreateDirectoryExA( LPCSTR template, LPCSTR path, LPSECURITY_ATTRIBU
   */
  BOOL WINAPI RemoveDirectoryW( LPCWSTR path )
  {
@@ -22,10 +22,10 @@ index b580e367561..9fa7d4c9f27 100644
      OBJECT_ATTRIBUTES attr;
      UNICODE_STRING nt_name;
      ANSI_STRING unix_name;
-@@ -1089,15 +1090,21 @@ BOOL WINAPI RemoveDirectoryW( LPCWSTR path )
+@@ -264,15 +265,21 @@ BOOL WINAPI RemoveDirectoryW( LPCWSTR path )
      }
  
-     status = wine_nt_to_unix_file_name( &nt_name, &unix_name, FILE_OPEN, FALSE );
+     status = wine_nt_to_unix_file_name( &nt_name, &unix_name, FILE_OPEN );
 -    RtlFreeUnicodeString( &nt_name );
 -    if (!set_ntstatus( status ))
 +    if (status == STATUS_SUCCESS)
@@ -51,10 +51,10 @@ index b580e367561..9fa7d4c9f27 100644
      return ret;
  }
 diff --git a/dlls/ntdll/tests/file.c b/dlls/ntdll/tests/file.c
-index d7b2f9aa0d9..e8cdb661772 100644
+index c7107500939..5b71f6f658b 100644
 --- a/dlls/ntdll/tests/file.c
 +++ b/dlls/ntdll/tests/file.c
-@@ -4938,7 +4938,7 @@ static void test_reparse_points(void)
+@@ -5009,7 +5009,7 @@ static void test_reparse_points(void)
      REPARSE_GUID_DATA_BUFFER guid_buffer;
      static const WCHAR dotW[] = {'.',0};
      REPARSE_DATA_BUFFER *buffer = NULL;
@@ -63,7 +63,7 @@ index d7b2f9aa0d9..e8cdb661772 100644
      INT buffer_len, string_len;
      IO_STATUS_BLOCK iosb;
      UNICODE_STRING nameW;
-@@ -5027,6 +5027,38 @@ static void test_reparse_points(void)
+@@ -5098,6 +5098,38 @@ static void test_reparse_points(void)
         "Junction point folder's access time does not match.\n");
      CloseHandle(handle);
  
@@ -103,5 +103,5 @@ index d7b2f9aa0d9..e8cdb661772 100644
      /* Cleanup */
      pRtlFreeUnicodeString(&nameW);
 -- 
-2.23.0
+2.27.0
 
diff --git a/patches/ntdll-Junction_Points/0010-ntdll-Add-support-for-relative-symlink-creation.patch b/patches/ntdll-Junction_Points/0010-ntdll-Add-support-for-relative-symlink-creation.patch
index bc081f3d7..5804ab701 100644
--- a/patches/ntdll-Junction_Points/0010-ntdll-Add-support-for-relative-symlink-creation.patch
+++ b/patches/ntdll-Junction_Points/0010-ntdll-Add-support-for-relative-symlink-creation.patch
@@ -1,4 +1,4 @@
-From 6a13b364b9b8a92d706b8ee2f4e69743ab3bee5a Mon Sep 17 00:00:00 2001
+From 2fe2cb6a67925f22e9b3fbffefd20c2fe0040775 Mon Sep 17 00:00:00 2001
 From: "Erich E. Hoover" <erich.e.hoover@gmail.com>
 Date: Thu, 11 Apr 2019 12:16:49 -0600
 Subject: [PATCH] ntdll: Add support for relative symlink creation.
@@ -11,7 +11,7 @@ Signed-off-by: Erich E. Hoover <erich.e.hoover@gmail.com>
  3 files changed, 77 insertions(+), 13 deletions(-)
 
 diff --git a/dlls/ntdll/tests/file.c b/dlls/ntdll/tests/file.c
-index df912e18496..515a84da4d6 100644
+index b93ba0e87ed..975a72e7103 100644
 --- a/dlls/ntdll/tests/file.c
 +++ b/dlls/ntdll/tests/file.c
 @@ -4972,7 +4972,8 @@ static void test_file_readonly_access(void)
@@ -101,10 +101,10 @@ index df912e18496..515a84da4d6 100644
      /* Cleanup */
      pRtlFreeUnicodeString(&nameW);
 diff --git a/dlls/ntdll/unix/file.c b/dlls/ntdll/unix/file.c
-index e35ea49d17f..eb39dc0873b 100644
+index fe945cef477..a1d1863133a 100644
 --- a/dlls/ntdll/unix/file.c
 +++ b/dlls/ntdll/unix/file.c
-@@ -5615,16 +5615,19 @@ static void ignore_server_ioctl_struct_holes( ULONG code, const void *in_buffer,
+@@ -5669,16 +5669,19 @@ static void ignore_server_ioctl_struct_holes( ULONG code, const void *in_buffer,
   */
  NTSTATUS FILE_CreateSymlink(HANDLE handle, REPARSE_DATA_BUFFER *buffer)
  {
@@ -126,7 +126,7 @@ index e35ea49d17f..eb39dc0873b 100644
      int i;
  
      switch(buffer->ReparseTag)
-@@ -5633,11 +5636,13 @@ NTSTATUS FILE_CreateSymlink(HANDLE handle, REPARSE_DATA_BUFFER *buffer)
+@@ -5687,11 +5690,13 @@ NTSTATUS FILE_CreateSymlink(HANDLE handle, REPARSE_DATA_BUFFER *buffer)
          dest_len = buffer->MountPointReparseBuffer.SubstituteNameLength;
          offset = buffer->MountPointReparseBuffer.SubstituteNameOffset;
          dest = &buffer->MountPointReparseBuffer.PathBuffer[offset];
@@ -140,7 +140,7 @@ index e35ea49d17f..eb39dc0873b 100644
          break;
      default:
          return STATUS_NOT_IMPLEMENTED;
-@@ -5649,17 +5654,54 @@ NTSTATUS FILE_CreateSymlink(HANDLE handle, REPARSE_DATA_BUFFER *buffer)
+@@ -5703,17 +5708,54 @@ NTSTATUS FILE_CreateSymlink(HANDLE handle, REPARSE_DATA_BUFFER *buffer)
      if ((status = server_get_unix_name( handle, &unix_src )))
          goto cleanup;
      src_allocated = TRUE;
@@ -173,7 +173,7 @@ index e35ea49d17f..eb39dc0873b 100644
 +        nt_dest.Length = dest_len;
 +    }
 +    nt_dest_allocated = TRUE;
-     status = nt_to_unix_file_name( &nt_dest, &unix_dest, 0, FALSE );
+     status = nt_to_unix_file_name( &nt_dest, &unix_dest, 0 );
      if (status != STATUS_SUCCESS && status != STATUS_NO_SUCH_FILE)
          goto cleanup;
      dest_allocated = TRUE;
@@ -199,7 +199,7 @@ index e35ea49d17f..eb39dc0873b 100644
      for (i = 0; i < sizeof(ULONG)*8; i++)
      {
          if ((buffer->ReparseTag >> i) & 1)
-@@ -5678,7 +5720,7 @@ NTSTATUS FILE_CreateSymlink(HANDLE handle, REPARSE_DATA_BUFFER *buffer)
+@@ -5732,7 +5774,7 @@ NTSTATUS FILE_CreateSymlink(HANDLE handle, REPARSE_DATA_BUFFER *buffer)
              strcat( magic_dest, "." );
          strcat( magic_dest, "/" );
      }
@@ -208,7 +208,7 @@ index e35ea49d17f..eb39dc0873b 100644
  
      /* Produce the link in a temporary location in the same folder */
      strcpy( tmpdir, unix_src.Buffer );
-@@ -5728,7 +5770,9 @@ NTSTATUS FILE_CreateSymlink(HANDLE handle, REPARSE_DATA_BUFFER *buffer)
+@@ -5782,7 +5824,9 @@ NTSTATUS FILE_CreateSymlink(HANDLE handle, REPARSE_DATA_BUFFER *buffer)
  
  cleanup:
      if (tempdir_created) rmdir( tmpdir );
diff --git a/patches/ntdll-Junction_Points/0013-ntdll-Allow-creation-of-dangling-reparse-points-to-n.patch b/patches/ntdll-Junction_Points/0013-ntdll-Allow-creation-of-dangling-reparse-points-to-n.patch
index d6435c86d..dc72ebb7a 100644
--- a/patches/ntdll-Junction_Points/0013-ntdll-Allow-creation-of-dangling-reparse-points-to-n.patch
+++ b/patches/ntdll-Junction_Points/0013-ntdll-Allow-creation-of-dangling-reparse-points-to-n.patch
@@ -1,4 +1,4 @@
-From 1f399151685c3d7827d39b7039abe7b3b941a3bc Mon Sep 17 00:00:00 2001
+From c1f3ec8ecefd4488bd8f49da22deb2f4f56d489c Mon Sep 17 00:00:00 2001
 From: "Erich E. Hoover" <erich.e.hoover@gmail.com>
 Date: Tue, 30 Apr 2019 16:24:54 -0600
 Subject: [PATCH] ntdll: Allow creation of dangling reparse points to
@@ -11,10 +11,10 @@ Signed-off-by: Erich E. Hoover <erich.e.hoover@gmail.com>
  2 files changed, 15 insertions(+), 1 deletion(-)
 
 diff --git a/dlls/ntdll/unix/file.c b/dlls/ntdll/unix/file.c
-index fb1e6bd3c1c..c47aea62a38 100644
+index 3cfd633df86..fc79a2fa735 100644
 --- a/dlls/ntdll/unix/file.c
 +++ b/dlls/ntdll/unix/file.c
-@@ -3218,6 +3218,19 @@ static NTSTATUS lookup_unix_name( const WCHAR *name, int name_len, char **buffer
+@@ -3273,6 +3273,19 @@ static NTSTATUS lookup_unix_name( const WCHAR *name, int name_len, char **buffer
                  status = STATUS_OBJECT_NAME_COLLISION;
              }
          }
@@ -34,20 +34,20 @@ index fb1e6bd3c1c..c47aea62a38 100644
  
          if (status != STATUS_SUCCESS) break;
  
-@@ -5682,7 +5695,7 @@ NTSTATUS FILE_CreateSymlink(HANDLE handle, REPARSE_DATA_BUFFER *buffer)
+@@ -5736,7 +5749,7 @@ NTSTATUS FILE_CreateSymlink(HANDLE handle, REPARSE_DATA_BUFFER *buffer)
          nt_dest.Length = dest_len;
      }
      nt_dest_allocated = TRUE;
--    status = nt_to_unix_file_name( &nt_dest, &unix_dest, 0, FALSE );
-+    status = nt_to_unix_file_name( &nt_dest, &unix_dest, FILE_WINE_PATH, FALSE );
+-    status = nt_to_unix_file_name( &nt_dest, &unix_dest, 0 );
++    status = nt_to_unix_file_name( &nt_dest, &unix_dest, FILE_WINE_PATH );
      if (status != STATUS_SUCCESS && status != STATUS_NO_SUCH_FILE)
          goto cleanup;
      dest_allocated = TRUE;
 diff --git a/include/winternl.h b/include/winternl.h
-index 0957561063a..0af566f518d 100644
+index 4ee32d3c9e9..3d444e7485e 100644
 --- a/include/winternl.h
 +++ b/include/winternl.h
-@@ -1839,6 +1839,7 @@ typedef struct _RTL_HANDLE_TABLE
+@@ -1869,6 +1869,7 @@ typedef struct _RTL_HANDLE_TABLE
  #define FILE_OVERWRITE                  4
  #define FILE_OVERWRITE_IF               5
  #define FILE_MAXIMUM_DISPOSITION        5
diff --git a/patches/ntdll-NtDevicePath/0001-ntdll-Implement-opening-files-through-nt-device-path.patch b/patches/ntdll-NtDevicePath/0001-ntdll-Implement-opening-files-through-nt-device-path.patch
index e39ce2ace..fd04fa01d 100644
--- a/patches/ntdll-NtDevicePath/0001-ntdll-Implement-opening-files-through-nt-device-path.patch
+++ b/patches/ntdll-NtDevicePath/0001-ntdll-Implement-opening-files-through-nt-device-path.patch
@@ -1,4 +1,4 @@
-From 351c405a950985a6d5a2262ce88b46ecf83b03ff Mon Sep 17 00:00:00 2001
+From 38833e0b211516ba54a68cb7e6f560c8caf952ff Mon Sep 17 00:00:00 2001
 From: =?UTF-8?q?Michael=20M=C3=BCller?= <michael@fds-team.de>
 Date: Fri, 26 May 2017 05:17:17 +0200
 Subject: [PATCH] ntdll: Implement opening files through nt device paths.
@@ -9,7 +9,7 @@ Subject: [PATCH] ntdll: Implement opening files through nt device paths.
  2 files changed, 147 insertions(+), 10 deletions(-)
 
 diff --git a/dlls/ntdll/tests/file.c b/dlls/ntdll/tests/file.c
-index e7918140323..7247f792941 100644
+index 9e65a1f6ddd..7b65152f7cf 100644
 --- a/dlls/ntdll/tests/file.c
 +++ b/dlls/ntdll/tests/file.c
 @@ -135,18 +135,22 @@ static void WINAPI apc( void *arg, IO_STATUS_BLOCK *iosb, ULONG reserved )
@@ -63,10 +63,10 @@ index e7918140323..7247f792941 100644
  
  static void open_file_test(void)
 diff --git a/dlls/ntdll/unix/file.c b/dlls/ntdll/unix/file.c
-index 22f34a1f008..72fea5b8aab 100644
+index a7f22e83e12..b93c169f856 100644
 --- a/dlls/ntdll/unix/file.c
 +++ b/dlls/ntdll/unix/file.c
-@@ -3360,16 +3360,10 @@ static NTSTATUS nt_to_unix_file_name_attr( const OBJECT_ATTRIBUTES *attr, ANSI_S
+@@ -3307,16 +3307,10 @@ static NTSTATUS nt_to_unix_file_name_attr( const OBJECT_ATTRIBUTES *attr, ANSI_S
  
  
  /******************************************************************************
@@ -80,13 +80,13 @@ index 22f34a1f008..72fea5b8aab 100644
 + *           nt_to_unix_file_name_internal
   */
 -NTSTATUS CDECL nt_to_unix_file_name( const UNICODE_STRING *nameW, ANSI_STRING *unix_name_ret,
--                                     UINT disposition, BOOLEAN check_case )
+-                                     UINT disposition )
 +static NTSTATUS nt_to_unix_file_name_internal( const UNICODE_STRING *nameW, ANSI_STRING *unix_name_ret,
-+                                               UINT disposition, BOOLEAN check_case )
++                                               UINT disposition )
  {
      static const WCHAR unixW[] = {'u','n','i','x'};
      static const WCHAR pipeW[] = {'p','i','p','e'};
-@@ -3482,6 +3476,126 @@ NTSTATUS CDECL nt_to_unix_file_name( const UNICODE_STRING *nameW, ANSI_STRING *u
+@@ -3430,6 +3424,126 @@ NTSTATUS CDECL nt_to_unix_file_name( const UNICODE_STRING *nameW, ANSI_STRING *u
      return status;
  }
  
@@ -166,7 +166,7 @@ index 22f34a1f008..72fea5b8aab 100644
 + * returned, but the unix name is still filled in properly.
 + */
 +NTSTATUS CDECL nt_to_unix_file_name( const UNICODE_STRING *nameW, ANSI_STRING *unix_name_ret,
-+                                          UINT disposition, BOOLEAN check_case )
++                                     UINT disposition )
 +{
 +    static const WCHAR systemrootW[] = {'\\','S','y','s','t','e','m','R','o','o','t','\\',0};
 +    static const WCHAR dosprefixW[] = {'\\','?','?','\\'};
@@ -189,7 +189,7 @@ index 22f34a1f008..72fea5b8aab 100644
 +        prefix = user_shared_data->NtSystemRoot;
 +    }
 +    else
-+        return nt_to_unix_file_name_internal( nameW, unix_name_ret, disposition, check_case );
++        return nt_to_unix_file_name_internal( nameW, unix_name_ret, disposition );
 +
 +    name_len = sizeof(dosprefixW) + wcslen(prefix) * sizeof(WCHAR) +
 +               nameW->Length - offset * sizeof(WCHAR) + sizeof(WCHAR);
@@ -205,7 +205,7 @@ index 22f34a1f008..72fea5b8aab 100644
 +    ptr[ nameW->Length / sizeof(WCHAR) - offset ] = 0;
 +
 +    RtlInitUnicodeString( &dospathW, name );
-+    status = nt_to_unix_file_name_internal( &dospathW, unix_name_ret, disposition, check_case );
++    status = nt_to_unix_file_name_internal( &dospathW, unix_name_ret, disposition );
 +
 +    RtlFreeHeap( GetProcessHeap(), 0, name );
 +    return status;
diff --git a/patches/ntdll-Pipe_SpecialCharacters/0001-ntdll-Allow-special-characters-in-pipe-names.patch b/patches/ntdll-Pipe_SpecialCharacters/0001-ntdll-Allow-special-characters-in-pipe-names.patch
index bdcf5a10d..4fd35b35b 100644
--- a/patches/ntdll-Pipe_SpecialCharacters/0001-ntdll-Allow-special-characters-in-pipe-names.patch
+++ b/patches/ntdll-Pipe_SpecialCharacters/0001-ntdll-Allow-special-characters-in-pipe-names.patch
@@ -1,4 +1,4 @@
-From d4166e5e9761c9a3d896486b1eb2582ca6f20482 Mon Sep 17 00:00:00 2001
+From addb612dfe7429c29adeb31144976713cb0756b4 Mon Sep 17 00:00:00 2001
 From: =?UTF-8?q?Michael=20M=C3=BCller?= <michael@fds-team.de>
 Date: Sun, 27 Jul 2014 03:35:42 +0200
 Subject: [PATCH] ntdll: Allow special characters in pipe names.
@@ -38,26 +38,26 @@ index 3c7ca06a045..453dcc80b7b 100644
  }
  
 diff --git a/dlls/ntdll/unix/file.c b/dlls/ntdll/unix/file.c
-index 13096e085e8..31a6c761c7c 100644
+index 61340a0e010..a7f22e83e12 100644
 --- a/dlls/ntdll/unix/file.c
 +++ b/dlls/ntdll/unix/file.c
-@@ -2830,6 +2830,7 @@ NTSTATUS CDECL nt_to_unix_file_name( const UNICODE_STRING *nameW, ANSI_STRING *u
-                                      UINT disposition, BOOLEAN check_case )
+@@ -3319,6 +3319,7 @@ NTSTATUS CDECL nt_to_unix_file_name( const UNICODE_STRING *nameW, ANSI_STRING *u
+                                      UINT disposition )
  {
      static const WCHAR unixW[] = {'u','n','i','x'};
 +    static const WCHAR pipeW[] = {'p','i','p','e'};
      static const WCHAR invalid_charsW[] = { INVALID_NT_CHARS, 0 };
  
      NTSTATUS status = STATUS_SUCCESS;
-@@ -2839,6 +2840,7 @@ NTSTATUS CDECL nt_to_unix_file_name( const UNICODE_STRING *nameW, ANSI_STRING *u
-     int pos, ret, name_len, unix_len, prefix_len;
+@@ -3329,6 +3330,7 @@ NTSTATUS CDECL nt_to_unix_file_name( const UNICODE_STRING *nameW, ANSI_STRING *u
      WCHAR prefix[MAX_DIR_ENTRY_LEN + 1];
+     BOOLEAN check_case = FALSE;
      BOOLEAN is_unix = FALSE;
 +    BOOLEAN is_pipe = FALSE;
  
      name     = nameW->Buffer;
      name_len = nameW->Length / sizeof(WCHAR);
-@@ -2872,13 +2874,17 @@ NTSTATUS CDECL nt_to_unix_file_name( const UNICODE_STRING *nameW, ANSI_STRING *u
+@@ -3362,13 +3364,17 @@ NTSTATUS CDECL nt_to_unix_file_name( const UNICODE_STRING *nameW, ANSI_STRING *u
      name += prefix_len;
      name_len -= prefix_len;
  
diff --git a/patches/ntdll-ThreadTime/definition b/patches/ntdll-ThreadTime/definition
index 7a231fe65..6b2dd9c77 100644
--- a/patches/ntdll-ThreadTime/definition
+++ b/patches/ntdll-ThreadTime/definition
@@ -2,3 +2,4 @@ Fixes: Return correct thread creation time in SystemProcessInformation
 Fixes: Fill process virtual memory counters in NtQuerySystemInformation
 # Patch 6 is broken. We should really be returning this information from the
 # server, but that needs a bit more work.
+Disabled: true
 
diff --git a/patches/patchinstall.sh b/patches/patchinstall.sh
index 2c8c8ac5c..a33d9f136 100755
--- a/patches/patchinstall.sh
+++ b/patches/patchinstall.sh
@@ -196,7 +196,6 @@ patch_enable_all ()
 	enable_ntdll_SystemInterruptInformation="$1"
 	enable_ntdll_SystemModuleInformation="$1"
 	enable_ntdll_SystemRoot_Symlink="$1"
-	enable_ntdll_ThreadTime="$1"
 	enable_ntdll_WRITECOPY="$1"
 	enable_ntdll_Zero_mod_name="$1"
 	enable_ntdll_aarch_TEB="$1"
@@ -680,9 +679,6 @@ patch_enable ()
 		ntdll-SystemRoot_Symlink)
 			enable_ntdll_SystemRoot_Symlink="$2"
 			;;
-		ntdll-ThreadTime)
-			enable_ntdll_ThreadTime="$2"
-			;;
 		ntdll-WRITECOPY)
 			enable_ntdll_WRITECOPY="$2"
 			;;
@@ -1558,13 +1554,6 @@ if test "$enable_shell32_Progress_Dialog" -eq 1; then
 	enable_shell32_SHFileOperation_Move=1
 fi
 
-if test "$enable_server_Realtime_Priority" -eq 1; then
-	if test "$enable_ntdll_ThreadTime" -gt 1; then
-		abort "Patchset ntdll-ThreadTime disabled, but server-Realtime_Priority depends on that."
-	fi
-	enable_ntdll_ThreadTime=1
-fi
-
 if test "$enable_server_Object_Types" -eq 1; then
 	if test "$enable_ntdll_SystemModuleInformation" -gt 1; then
 		abort "Patchset ntdll-SystemModuleInformation disabled, but server-Object_Types depends on that."
@@ -1661,11 +1650,7 @@ if test "$enable_ntdll_Hide_Wine_Exports" -eq 1; then
 	if test "$enable_advapi32_Token_Integrity_Level" -gt 1; then
 		abort "Patchset advapi32-Token_Integrity_Level disabled, but ntdll-Hide_Wine_Exports depends on that."
 	fi
-	if test "$enable_ntdll_ThreadTime" -gt 1; then
-		abort "Patchset ntdll-ThreadTime disabled, but ntdll-Hide_Wine_Exports depends on that."
-	fi
 	enable_advapi32_Token_Integrity_Level=1
-	enable_ntdll_ThreadTime=1
 fi
 
 if test "$enable_ntdll_Builtin_Prot" -eq 1; then
@@ -3655,24 +3640,10 @@ if test "$enable_ntdll_Heap_Improvements" -eq 1; then
 	) >> "$patchlist"
 fi
 
-# Patchset ntdll-ThreadTime
-# |
-# | Modified files:
-# |   *	dlls/ntdll/unix/system.c, server/protocol.def, server/snapshot.c, server/thread.h
-# |
-if test "$enable_ntdll_ThreadTime" -eq 1; then
-	patch_apply ntdll-ThreadTime/0002-ntdll-Set-correct-thread-creation-time-for-SystemPro.patch
-	patch_apply ntdll-ThreadTime/0004-ntdll-Set-process-start-time.patch
-	(
-		printf '%s\n' '+    { "Michael Müller", "ntdll: Set correct thread creation time for SystemProcessInformation in NtQuerySystemInformation.", 1 },';
-		printf '%s\n' '+    { "Michael Müller", "ntdll: Set process start time.", 1 },';
-	) >> "$patchlist"
-fi
-
 # Patchset ntdll-Hide_Wine_Exports
 # |
 # | This patchset has the following (direct or indirect) dependencies:
-# |   *	Staging, advapi32-CreateRestrictedToken, advapi32-Token_Integrity_Level, ntdll-ThreadTime
+# |   *	Staging, advapi32-CreateRestrictedToken, advapi32-Token_Integrity_Level
 # |
 # | This patchset fixes the following Wine bugs:
 # |   *	[#38656] Add support for hiding wine version information from applications
@@ -4383,8 +4354,8 @@ fi
 # | 	server/console.c, server/debugger.c, server/device.c, server/directory.c, server/event.c, server/fd.c, server/file.c,
 # | 	server/handle.c, server/handle.h, server/hook.c, server/mailslot.c, server/mapping.c, server/mutex.c,
 # | 	server/named_pipe.c, server/object.c, server/object.h, server/process.c, server/queue.c, server/registry.c,
-# | 	server/request.c, server/semaphore.c, server/serial.c, server/signal.c, server/snapshot.c, server/sock.c,
-# | 	server/symlink.c, server/thread.c, server/timer.c, server/token.c, server/winstation.c
+# | 	server/request.c, server/semaphore.c, server/serial.c, server/signal.c, server/sock.c, server/symlink.c,
+# | 	server/thread.c, server/timer.c, server/token.c, server/winstation.c
 # |
 if test "$enable_server_Desktop_Refcount" -eq 1; then
 	patch_apply server-Desktop_Refcount/0001-server-Introduce-a-new-alloc_handle-object-callback..patch
@@ -4557,9 +4528,6 @@ fi
 
 # Patchset server-Realtime_Priority
 # |
-# | This patchset has the following (direct or indirect) dependencies:
-# |   *	ntdll-ThreadTime
-# |
 # | Modified files:
 # |   *	server/Makefile.in, server/main.c, server/scheduler.c, server/thread.c, server/thread.h
 # |
diff --git a/patches/server-Desktop_Refcount/0001-server-Introduce-a-new-alloc_handle-object-callback..patch b/patches/server-Desktop_Refcount/0001-server-Introduce-a-new-alloc_handle-object-callback..patch
index b87350285..5502e9a89 100644
--- a/patches/server-Desktop_Refcount/0001-server-Introduce-a-new-alloc_handle-object-callback..patch
+++ b/patches/server-Desktop_Refcount/0001-server-Introduce-a-new-alloc_handle-object-callback..patch
@@ -1,4 +1,4 @@
-From 07f5dd1db6399c54be793ca496546bb28947aaae Mon Sep 17 00:00:00 2001
+From 057f64581fd7acc3834bae2c6ebccd812f26b722 Mon Sep 17 00:00:00 2001
 From: Sebastian Lackner <sebastian@fds-team.de>
 Date: Fri, 4 Dec 2015 10:36:47 +0100
 Subject: [PATCH] server: Introduce a new alloc_handle object callback. (v2)
@@ -32,14 +32,13 @@ Signed-off-by: Sebastian Lackner <sebastian@fds-team.de>
  server/semaphore.c  |  1 +
  server/serial.c     |  1 +
  server/signal.c     |  1 +
- server/snapshot.c   |  1 +
  server/sock.c       |  2 ++
  server/symlink.c    |  1 +
  server/thread.c     |  3 +++
  server/timer.c      |  1 +
  server/token.c      |  1 +
  server/winstation.c |  2 ++
- 34 files changed, 79 insertions(+), 4 deletions(-)
+ 33 files changed, 78 insertions(+), 4 deletions(-)
 
 diff --git a/server/async.c b/server/async.c
 index 03994e8fac2..9feafd01847 100644
@@ -110,10 +109,10 @@ index db04727b93b..e72a155eeeb 100644
      completion_destroy         /* destroy */
  };
 diff --git a/server/console.c b/server/console.c
-index 729cfa40612..a0d9bd87ab4 100644
+index d6673dca1bd..8ed0c1f2d81 100644
 --- a/server/console.c
 +++ b/server/console.c
-@@ -97,6 +97,7 @@ static const struct object_ops console_input_ops =
+@@ -99,6 +99,7 @@ static const struct object_ops console_input_ops =
      NULL,                             /* unlink_name */
      console_input_open_file,          /* open_file */
      no_kernel_obj_list,               /* get_kernel_obj_list */
@@ -121,7 +120,7 @@ index 729cfa40612..a0d9bd87ab4 100644
      no_close_handle,                  /* close_handle */
      console_input_destroy             /* destroy */
  };
-@@ -132,6 +133,7 @@ static const struct object_ops console_input_events_ops =
+@@ -134,6 +135,7 @@ static const struct object_ops console_input_events_ops =
      NULL,                             /* unlink_name */
      no_open_file,                     /* open_file */
      no_kernel_obj_list,               /* get_kernel_obj_list */
@@ -129,7 +128,7 @@ index 729cfa40612..a0d9bd87ab4 100644
      no_close_handle,                  /* close_handle */
      console_input_events_destroy      /* destroy */
  };
-@@ -195,6 +197,7 @@ static const struct object_ops screen_buffer_ops =
+@@ -197,6 +199,7 @@ static const struct object_ops screen_buffer_ops =
      NULL,                             /* unlink_name */
      screen_buffer_open_file,          /* open_file */
      no_kernel_obj_list,               /* get_kernel_obj_list */
@@ -137,7 +136,7 @@ index 729cfa40612..a0d9bd87ab4 100644
      no_close_handle,                  /* close_handle */
      screen_buffer_destroy             /* destroy */
  };
-@@ -241,6 +244,7 @@ static const struct object_ops console_device_ops =
+@@ -244,6 +247,7 @@ static const struct object_ops console_device_ops =
      default_unlink_name,              /* unlink_name */
      console_device_open_file,         /* open_file */
      no_kernel_obj_list,               /* get_kernel_obj_list */
@@ -375,7 +374,7 @@ index 781e6f3141a..6f0321393e2 100644
      mailslot_device_destroy         /* destroy */
  };
 diff --git a/server/mapping.c b/server/mapping.c
-index 0941dd87c05..42c207b3367 100644
+index 07c51c246d6..796855ac8e5 100644
 --- a/server/mapping.c
 +++ b/server/mapping.c
 @@ -79,6 +79,7 @@ static const struct object_ops ranges_ops =
@@ -500,10 +499,10 @@ index f0b889d5899..13c59694c46 100644
  extern void no_destroy( struct object *obj );
  #ifdef DEBUG_OBJECTS
 diff --git a/server/process.c b/server/process.c
-index 283edc09c5e..3134bf415a0 100644
+index 9482da98be5..4166f1ce8df 100644
 --- a/server/process.c
 +++ b/server/process.c
-@@ -88,6 +88,7 @@ static const struct object_ops process_ops =
+@@ -89,6 +89,7 @@ static const struct object_ops process_ops =
      NULL,                        /* unlink_name */
      no_open_file,                /* open_file */
      process_get_kernel_obj_list, /* get_kernel_obj_list */
@@ -511,7 +510,7 @@ index 283edc09c5e..3134bf415a0 100644
      no_close_handle,             /* close_handle */
      process_destroy              /* destroy */
  };
-@@ -138,6 +139,7 @@ static const struct object_ops startup_info_ops =
+@@ -139,6 +140,7 @@ static const struct object_ops startup_info_ops =
      NULL,                          /* unlink_name */
      no_open_file,                  /* open_file */
      no_kernel_obj_list,            /* get_kernel_obj_list */
@@ -519,7 +518,7 @@ index 283edc09c5e..3134bf415a0 100644
      no_close_handle,               /* close_handle */
      startup_info_destroy           /* destroy */
  };
-@@ -183,6 +185,7 @@ static const struct object_ops job_ops =
+@@ -184,6 +186,7 @@ static const struct object_ops job_ops =
      default_unlink_name,           /* unlink_name */
      no_open_file,                  /* open_file */
      no_kernel_obj_list,            /* get_kernel_obj_list */
@@ -528,7 +527,7 @@ index 283edc09c5e..3134bf415a0 100644
      job_destroy                    /* destroy */
  };
 diff --git a/server/queue.c b/server/queue.c
-index c3925dd6646..e30cc0c13ad 100644
+index a65eab38bdc..d658c48323f 100644
 --- a/server/queue.c
 +++ b/server/queue.c
 @@ -182,6 +182,7 @@ static const struct object_ops msg_queue_ops =
@@ -607,18 +606,6 @@ index c81f6b8e989..b8dd87d86f1 100644
      no_close_handle,          /* close_handle */
      handler_destroy           /* destroy */
  };
-diff --git a/server/snapshot.c b/server/snapshot.c
-index a0f2ea17a3e..d5ba720980a 100644
---- a/server/snapshot.c
-+++ b/server/snapshot.c
-@@ -72,6 +72,7 @@ static const struct object_ops snapshot_ops =
-     NULL,                         /* unlink_name */
-     no_open_file,                 /* open_file */
-     no_kernel_obj_list,           /* get_kernel_obj_list */
-+    no_alloc_handle,              /* alloc_handle */
-     no_close_handle,              /* close_handle */
-     snapshot_destroy              /* destroy */
- };
 diff --git a/server/sock.c b/server/sock.c
 index 5095a6ef9f0..7b10b74cc4e 100644
 --- a/server/sock.c
@@ -652,7 +639,7 @@ index 7a2f8642d5f..7bb28c8d7ce 100644
      symlink_destroy               /* destroy */
  };
 diff --git a/server/thread.c b/server/thread.c
-index e2bfa50c7ba..9faef2dcd34 100644
+index 9b14174578e..e3783351eb1 100644
 --- a/server/thread.c
 +++ b/server/thread.c
 @@ -121,6 +121,7 @@ static const struct object_ops thread_apc_ops =
diff --git a/patches/server-Key_State/0001-server-Introduce-a-helper-function-to-update-the-thr.patch b/patches/server-Key_State/0001-server-Introduce-a-helper-function-to-update-the-thr.patch
index 2f57b1f83..c34e64b30 100644
--- a/patches/server-Key_State/0001-server-Introduce-a-helper-function-to-update-the-thr.patch
+++ b/patches/server-Key_State/0001-server-Introduce-a-helper-function-to-update-the-thr.patch
@@ -1,4 +1,4 @@
-From 0fefda7a02d52d1c8813d7caaf2ca3cc6e352a29 Mon Sep 17 00:00:00 2001
+From f20e406fad78eeebea4e07407e6b05e069c8475f Mon Sep 17 00:00:00 2001
 From: Sebastian Lackner <sebastian@fds-team.de>
 Date: Thu, 12 Mar 2015 00:44:25 +0100
 Subject: [PATCH] server: Introduce a helper function to update the
@@ -9,7 +9,7 @@ Subject: [PATCH] server: Introduce a helper function to update the
  1 file changed, 23 insertions(+), 17 deletions(-)
 
 diff --git a/server/queue.c b/server/queue.c
-index 432885f9e4c..0a20bd3639d 100644
+index a65eab38bdc..b8943bc4b61 100644
 --- a/server/queue.c
 +++ b/server/queue.c
 @@ -1295,9 +1295,9 @@ static void set_input_key_state( unsigned char *keystate, unsigned char key, int
@@ -61,16 +61,16 @@ index 432885f9e4c..0a20bd3639d 100644
  }
  
  /* release the hardware message currently being processed by the given thread */
-@@ -1413,7 +1419,7 @@ static void release_hardware_message( struct msg_queue *queue, unsigned int hw_i
-         }
-         if (clr_bit) clear_queue_bits( queue, clr_bit );
- 
--        update_input_key_state( input->desktop, input->keystate, msg->msg, msg->wparam );
-+        update_input_key_state( input, msg->msg, msg->wparam );
-         list_remove( &msg->entry );
-         free_message( msg );
+@@ -1408,7 +1414,7 @@ static void release_hardware_message( struct msg_queue *queue, unsigned int hw_i
      }
-@@ -1532,7 +1538,7 @@ static void queue_hardware_message( struct desktop *desktop, struct message *msg
+     if (clr_bit) clear_queue_bits( queue, clr_bit );
+ 
+-    update_input_key_state( input->desktop, input->keystate, msg->msg, msg->wparam );
++    update_input_key_state( input, msg->msg, msg->wparam );
+     list_remove( &msg->entry );
+     free_message( msg );
+ }
+@@ -1526,7 +1532,7 @@ static void queue_hardware_message( struct desktop *desktop, struct message *msg
      struct thread_input *input;
      unsigned int msg_code;
  
@@ -79,7 +79,7 @@ index 432885f9e4c..0a20bd3639d 100644
      last_input_time = get_tick_count();
      if (msg->msg != WM_MOUSEMOVE) always_queue = 1;
  
-@@ -1567,7 +1573,7 @@ static void queue_hardware_message( struct desktop *desktop, struct message *msg
+@@ -1561,7 +1567,7 @@ static void queue_hardware_message( struct desktop *desktop, struct message *msg
      win = find_hardware_message_window( desktop, input, msg, &msg_code, &thread );
      if (!win || !thread)
      {
@@ -88,7 +88,7 @@ index 432885f9e4c..0a20bd3639d 100644
          free_message( msg );
          return;
      }
-@@ -1905,7 +1911,7 @@ static int queue_keyboard_message( struct desktop *desktop, user_handle_t win, c
+@@ -1899,7 +1905,7 @@ static int queue_keyboard_message( struct desktop *desktop, user_handle_t win, c
  
      if ((device = current->process->rawinput_kbd) && (device->flags & RIDEV_NOLEGACY))
      {
@@ -97,7 +97,7 @@ index 432885f9e4c..0a20bd3639d 100644
          return 0;
      }
  
-@@ -2034,7 +2040,7 @@ static int get_hardware_message( struct thread *thread, unsigned int hw_id, user
+@@ -2028,7 +2034,7 @@ static int get_hardware_message( struct thread *thread, unsigned int hw_id, user
          if (!win || !win_thread)
          {
              /* no window at all, remove it */
@@ -106,7 +106,7 @@ index 432885f9e4c..0a20bd3639d 100644
              list_remove( &msg->entry );
              free_message( msg );
              continue;
-@@ -2050,7 +2056,7 @@ static int get_hardware_message( struct thread *thread, unsigned int hw_id, user
+@@ -2044,7 +2050,7 @@ static int get_hardware_message( struct thread *thread, unsigned int hw_id, user
              else
              {
                  /* for another thread input, drop it */
diff --git a/patches/server-PeekMessage/0001-server-Fix-handling-of-GetMessage-after-previous-Pee.patch b/patches/server-PeekMessage/0001-server-Fix-handling-of-GetMessage-after-previous-Pee.patch
index c1f1af9ab..ce7ec607e 100644
--- a/patches/server-PeekMessage/0001-server-Fix-handling-of-GetMessage-after-previous-Pee.patch
+++ b/patches/server-PeekMessage/0001-server-Fix-handling-of-GetMessage-after-previous-Pee.patch
@@ -1,8 +1,8 @@
-From 52837e975cb343d78e626bd8a9464db59d27565b Mon Sep 17 00:00:00 2001
+From c527f32596831ae31b055cd77cb3bc848f83a8a8 Mon Sep 17 00:00:00 2001
 From: Sebastian Lackner <sebastian@fds-team.de>
 Date: Sun, 15 Mar 2015 01:05:48 +0100
-Subject: server: Fix handling of GetMessage after previous PeekMessage call.
- (v3)
+Subject: [PATCH] server: Fix handling of GetMessage after previous PeekMessage
+ call. (v3)
 
 Changes in v2:
 * accept_hardware_message should also reset ignore_post_msg.
@@ -10,15 +10,15 @@ Changes in v2:
 Changes in v3:
 * Fix remaining todo_wine.
 ---
- dlls/user32/tests/msg.c | 29 +++++++++++++++++++---------
- server/queue.c          | 50 +++++++++++++++++++++++++++++++++++++++++--------
+ dlls/user32/tests/msg.c | 29 ++++++++++++++++--------
+ server/queue.c          | 50 ++++++++++++++++++++++++++++++++++-------
  2 files changed, 62 insertions(+), 17 deletions(-)
 
 diff --git a/dlls/user32/tests/msg.c b/dlls/user32/tests/msg.c
-index 45b5222deba..e36d0f8af49 100644
+index f84525a0bf9..80cc0daa6c6 100644
 --- a/dlls/user32/tests/msg.c
 +++ b/dlls/user32/tests/msg.c
-@@ -11037,13 +11037,10 @@ static void test_PeekMessage3(void)
+@@ -12429,13 +12429,10 @@ static void test_PeekMessage3(void)
      ok(msg.message == WM_TIMER, "msg.message = %u instead of WM_TIMER\n", msg.message);
      PostMessageA(hwnd, WM_USER, 0, 0);
      ret = PeekMessageA(&msg, NULL, 0, 0, PM_NOREMOVE);
@@ -32,7 +32,7 @@ index 45b5222deba..e36d0f8af49 100644
      ok(ret && msg.message == WM_USER, "msg.message = %u instead of WM_USER\n", msg.message);
      ret = PeekMessageA(&msg, NULL, 0, 0, 0);
      ok(!ret, "expected PeekMessage to return FALSE, got %u\n", ret);
-@@ -11053,10 +11050,8 @@ static void test_PeekMessage3(void)
+@@ -12445,10 +12442,8 @@ static void test_PeekMessage3(void)
      ok(msg.message == WM_TIMER, "msg.message = %u instead of WM_TIMER\n", msg.message);
      PostMessageA(hwnd, WM_USER, 0, 0);
      ret = PeekMessageA(&msg, NULL, 0, 0, PM_REMOVE);
@@ -43,7 +43,7 @@ index 45b5222deba..e36d0f8af49 100644
      ok(ret && msg.message == WM_USER, "msg.message = %u instead of WM_USER\n", msg.message);
      ret = PeekMessageA(&msg, NULL, 0, 0, 0);
      ok(!ret, "expected PeekMessage to return FALSE, got %u\n", ret);
-@@ -11068,10 +11063,8 @@ static void test_PeekMessage3(void)
+@@ -12460,10 +12455,8 @@ static void test_PeekMessage3(void)
      ok(msg.message == WM_TIMER, "msg.message = %u instead of WM_TIMER\n", msg.message);
      PostMessageA(hwnd, WM_USER, 0, 0);
      ret = GetMessageA(&msg, NULL, 0, 0);
@@ -54,7 +54,7 @@ index 45b5222deba..e36d0f8af49 100644
      ok(ret && msg.message == WM_USER, "msg.message = %u instead of WM_USER\n", msg.message);
      ret = PeekMessageA(&msg, NULL, 0, 0, 0);
      ok(!ret, "expected PeekMessage to return FALSE, got %u\n", ret);
-@@ -11099,14 +11092,32 @@ static void test_PeekMessage3(void)
+@@ -12491,14 +12484,32 @@ static void test_PeekMessage3(void)
      ret = GetMessageA(&msg, NULL, 0, 0);
      ok(ret && msg.message == WM_USER, "msg.message = %u instead of WM_USER\n", msg.message);
      ret = GetMessageA(&msg, NULL, 0, 0);
@@ -90,7 +90,7 @@ index 45b5222deba..e36d0f8af49 100644
       * because both messages are in the same queue. */
  
 diff --git a/server/queue.c b/server/queue.c
-index c479b388bd6..fdb09d93238 100644
+index a65eab38bdc..bf315f5008c 100644
 --- a/server/queue.c
 +++ b/server/queue.c
 @@ -140,6 +140,7 @@ struct msg_queue
@@ -101,7 +101,7 @@ index c479b388bd6..fdb09d93238 100644
  };
  
  struct hotkey
-@@ -298,6 +299,7 @@ static struct msg_queue *create_msg_queue( struct thread *thread, struct thread_
+@@ -300,6 +301,7 @@ static struct msg_queue *create_msg_queue( struct thread *thread, struct thread_
          queue->input           = (struct thread_input *)grab_object( input );
          queue->hooks           = NULL;
          queue->last_get_msg    = current_time;
@@ -109,7 +109,7 @@ index c479b388bd6..fdb09d93238 100644
          list_init( &queue->send_result );
          list_init( &queue->callback_result );
          list_init( &queue->pending_timers );
-@@ -495,13 +497,21 @@ static inline struct msg_queue *get_current_queue(void)
+@@ -529,13 +531,21 @@ static inline struct msg_queue *get_current_queue(void)
  }
  
  /* get a (pseudo-)unique id to tag hardware messages */
@@ -132,7 +132,7 @@ index c479b388bd6..fdb09d93238 100644
  /* try to merge a message with the last in the list; return 1 if successful */
  static int merge_message( struct thread_input *input, const struct message *msg )
  {
-@@ -779,7 +789,7 @@ static int match_window( user_handle_t win, user_handle_t msg_win )
+@@ -813,7 +823,7 @@ static int match_window( user_handle_t win, user_handle_t msg_win )
  }
  
  /* retrieve a posted message */
@@ -141,7 +141,7 @@ index c479b388bd6..fdb09d93238 100644
                                 unsigned int first, unsigned int last, unsigned int flags,
                                 struct get_message_reply *reply )
  {
-@@ -790,6 +800,7 @@ static int get_posted_message( struct msg_queue *queue, user_handle_t win,
+@@ -824,6 +834,7 @@ static int get_posted_message( struct msg_queue *queue, user_handle_t win,
      {
          if (!match_window( win, msg->win )) continue;
          if (!check_msg_filter( msg->msg, first, last )) continue;
@@ -149,7 +149,7 @@ index c479b388bd6..fdb09d93238 100644
          goto found; /* found one */
      }
      return 0;
-@@ -1387,6 +1398,7 @@ found:
+@@ -1439,6 +1450,7 @@ found:
      msg->msg       = WM_HOTKEY;
      msg->wparam    = hotkey->id;
      msg->lparam    = ((hotkey->vkey & 0xffff) << 16) | modifiers;
@@ -157,7 +157,7 @@ index c479b388bd6..fdb09d93238 100644
  
      free( msg->data );
      msg->data      = NULL;
-@@ -1992,7 +2004,7 @@ static int get_hardware_message( struct thread *thread, unsigned int hw_id, user
+@@ -2061,7 +2073,7 @@ static int get_hardware_message( struct thread *thread, unsigned int hw_id, user
              continue;
          }
          /* now we can return it */
@@ -166,7 +166,7 @@ index c479b388bd6..fdb09d93238 100644
          reply->type   = MSG_HARDWARE;
          reply->win    = win;
          reply->msg    = msg_code;
-@@ -2098,6 +2110,7 @@ void post_message( user_handle_t win, unsigned int message, lparam_t wparam, lpa
+@@ -2167,6 +2179,7 @@ void post_message( user_handle_t win, unsigned int message, lparam_t wparam, lpa
          msg->result    = NULL;
          msg->data      = NULL;
          msg->data_size = 0;
@@ -174,7 +174,7 @@ index c479b388bd6..fdb09d93238 100644
  
          get_message_defaults( thread->queue, &msg->x, &msg->y, &msg->time );
  
-@@ -2342,6 +2355,7 @@ DECL_HANDLER(send_message)
+@@ -2411,6 +2424,7 @@ DECL_HANDLER(send_message)
              set_queue_bits( recv_queue, QS_SENDMESSAGE );
              break;
          case MSG_POSTED:
@@ -182,7 +182,7 @@ index c479b388bd6..fdb09d93238 100644
              list_add_tail( &recv_queue->msg_list[POST_MESSAGE], &msg->entry );
              set_queue_bits( recv_queue, QS_POSTMESSAGE|QS_ALLPOSTMESSAGE );
              if (msg->msg == WM_HOTKEY)
-@@ -2455,12 +2469,12 @@ DECL_HANDLER(get_message)
+@@ -2531,12 +2545,12 @@ DECL_HANDLER(get_message)
  
      /* then check for posted messages */
      if ((filter & QS_POSTMESSAGE) &&
@@ -197,7 +197,7 @@ index c479b388bd6..fdb09d93238 100644
          return;
  
      /* only check for quit messages if not posted messages pending */
-@@ -2471,7 +2485,7 @@ DECL_HANDLER(get_message)
+@@ -2547,7 +2561,7 @@ DECL_HANDLER(get_message)
      if ((filter & QS_INPUT) &&
          filter_contains_hw_range( req->get_first, req->get_last ) &&
          get_hardware_message( current, req->hw_id, get_win, req->get_first, req->get_last, req->flags, reply ))
@@ -206,7 +206,7 @@ index c479b388bd6..fdb09d93238 100644
  
      /* now check for WM_PAINT */
      if ((filter & QS_PAINT) &&
-@@ -2484,7 +2498,7 @@ DECL_HANDLER(get_message)
+@@ -2560,7 +2574,7 @@ DECL_HANDLER(get_message)
          reply->wparam = 0;
          reply->lparam = 0;
          get_message_defaults( queue, &reply->x, &reply->y, &reply->time );
@@ -215,7 +215,7 @@ index c479b388bd6..fdb09d93238 100644
      }
  
      /* now check for timer */
-@@ -2500,13 +2514,30 @@ DECL_HANDLER(get_message)
+@@ -2576,13 +2590,30 @@ DECL_HANDLER(get_message)
          get_message_defaults( queue, &reply->x, &reply->y, &reply->time );
          if (!(req->flags & PM_NOYIELD) && current->process->idle_event)
              set_event( current->process->idle_event );
@@ -247,17 +247,17 @@ index c479b388bd6..fdb09d93238 100644
  }
  
  
-@@ -2524,7 +2555,10 @@ DECL_HANDLER(reply_message)
+@@ -2600,7 +2631,10 @@ DECL_HANDLER(reply_message)
  DECL_HANDLER(accept_hardware_message)
  {
      if (current->queue)
 +    {
-         release_hardware_message( current->queue, req->hw_id, req->remove );
-+        if (req->remove) current->queue->ignore_post_msg = 0;
+         release_hardware_message( current->queue, req->hw_id );
++        current->queue->ignore_post_msg = 0;
 +    }
      else
          set_error( STATUS_ACCESS_DENIED );
  }
 -- 
-2.11.0
+2.27.0
 
diff --git a/patches/server-Realtime_Priority/0001-wineserver-Draft-to-implement-priority-levels-throug.patch b/patches/server-Realtime_Priority/0001-wineserver-Draft-to-implement-priority-levels-throug.patch
index ea32210e0..6c7846b05 100644
--- a/patches/server-Realtime_Priority/0001-wineserver-Draft-to-implement-priority-levels-throug.patch
+++ b/patches/server-Realtime_Priority/0001-wineserver-Draft-to-implement-priority-levels-throug.patch
@@ -1,4 +1,4 @@
-From 98bc215910ff978093b666607f2cff3f1c93b7d3 Mon Sep 17 00:00:00 2001
+From 13a0529750a14a032bb9ef5af97a48bc4f1aff14 Mon Sep 17 00:00:00 2001
 From: Joakim Hernberg <jhernberg@alchemy.lu>
 Date: Tue, 31 Mar 2015 20:58:20 +0200
 Subject: [PATCH] wineserver: Draft to implement priority levels through POSIX
@@ -19,7 +19,7 @@ Changes by Sebastian Lackner <sebastian@fds-team.de>:
  create mode 100644 server/scheduler.c
 
 diff --git a/server/Makefile.in b/server/Makefile.in
-index 3f3761faab6..89c1d8a4cdb 100644
+index e90c5d1336c..9a695cefc30 100644
 --- a/server/Makefile.in
 +++ b/server/Makefile.in
 @@ -30,6 +30,7 @@ C_SRCS = \
@@ -215,10 +215,10 @@ index 00000000000..4a5d82b208d
 +
 +#endif
 diff --git a/server/thread.c b/server/thread.c
-index 23c0538150f..7feda374487 100644
+index 9b14174578e..7280f87012d 100644
 --- a/server/thread.c
 +++ b/server/thread.c
-@@ -607,7 +607,10 @@ static void set_thread_info( struct thread *thread,
+@@ -608,7 +608,10 @@ static void set_thread_info( struct thread *thread,
          if ((req->priority >= min && req->priority <= max) ||
              req->priority == THREAD_PRIORITY_IDLE ||
              req->priority == THREAD_PRIORITY_TIME_CRITICAL)
@@ -230,12 +230,12 @@ index 23c0538150f..7feda374487 100644
              set_error( STATUS_INVALID_PARAMETER );
      }
 diff --git a/server/thread.h b/server/thread.h
-index 43b17534693..924f28a8697 100644
+index 650bc44628d..2599f7629c3 100644
 --- a/server/thread.h
 +++ b/server/thread.h
-@@ -152,4 +152,9 @@ static inline void set_win32_error( unsigned int err ) { set_error( 0xc0010000 |
+@@ -144,4 +144,9 @@ static inline void set_win32_error( unsigned int err ) { set_error( 0xc0010000 |
+ 
  static inline thread_id_t get_thread_id( struct thread *thread ) { return thread->id; }
- static inline timeout_t get_thread_creation_time( struct thread *thread ) { return thread->creation_time; }
  
 +/* scheduler functions */
 +
diff --git a/patches/server-Realtime_Priority/definition b/patches/server-Realtime_Priority/definition
index de7045a92..a8e417cdf 100644
--- a/patches/server-Realtime_Priority/definition
+++ b/patches/server-Realtime_Priority/definition
@@ -1,2 +1 @@
 Fixes: Support for linux priority levels for faster performance
-Depends: ntdll-ThreadTime
diff --git a/patches/server-Signal_Thread/0001-server-Do-not-signal-thread-until-it-is-really-gone.patch b/patches/server-Signal_Thread/0001-server-Do-not-signal-thread-until-it-is-really-gone.patch
index dbac44006..ad9665b32 100644
--- a/patches/server-Signal_Thread/0001-server-Do-not-signal-thread-until-it-is-really-gone.patch
+++ b/patches/server-Signal_Thread/0001-server-Do-not-signal-thread-until-it-is-really-gone.patch
@@ -1,4 +1,4 @@
-From a2401a21b78201f2310d571f8d66ac574dd0d830 Mon Sep 17 00:00:00 2001
+From d05ac476a0ca682ecb7ae13aa9e578c94b71e3f8 Mon Sep 17 00:00:00 2001
 From: Sebastian Lackner <sebastian@fds-team.de>
 Date: Mon, 12 Nov 2018 18:10:32 +0200
 Subject: [PATCH] server: Do not signal violently terminated threads until they
@@ -27,10 +27,10 @@ Signed-off-by: Gabriel Ivăncescu <gabrielopcode@gmail.com>
  2 files changed, 30 insertions(+), 3 deletions(-)
 
 diff --git a/server/thread.c b/server/thread.c
-index 1c0fbd4179b..f8962221d9a 100644
+index 9b14174578e..2f32cb4b62e 100644
 --- a/server/thread.c
 +++ b/server/thread.c
-@@ -203,6 +203,7 @@ static inline void init_thread_structure( struct thread *thread )
+@@ -239,6 +239,7 @@ static inline void init_thread_structure( struct thread *thread )
      thread->token           = NULL;
      thread->desc            = NULL;
      thread->desc_len        = 0;
@@ -38,7 +38,7 @@ index 1c0fbd4179b..f8962221d9a 100644
  
      thread->creation_time = current_time;
      thread->exit_time     = 0;
-@@ -361,6 +362,7 @@ static void destroy_thread( struct object *obj )
+@@ -430,6 +431,7 @@ static void destroy_thread( struct object *obj )
      list_remove( &thread->entry );
      cleanup_thread( thread );
      release_object( thread->process );
@@ -46,7 +46,7 @@ index 1c0fbd4179b..f8962221d9a 100644
      if (thread->id) free_ptid( thread->id );
      if (thread->token) release_object( thread->token );
  }
-@@ -385,7 +387,7 @@ static struct object_type *thread_get_type( struct object *obj )
+@@ -454,7 +456,7 @@ static struct object_type *thread_get_type( struct object *obj )
  static int thread_signaled( struct object *obj, struct wait_queue_entry *entry )
  {
      struct thread *mythread = (struct thread *)obj;
@@ -55,7 +55,7 @@ index 1c0fbd4179b..f8962221d9a 100644
  }
  
  static unsigned int thread_map_access( struct object *obj, unsigned int access )
-@@ -1171,6 +1173,26 @@ int thread_get_inflight_fd( struct thread *thread, int client )
+@@ -1245,6 +1247,26 @@ int thread_get_inflight_fd( struct thread *thread, int client )
      return -1;
  }
  
@@ -82,7 +82,7 @@ index 1c0fbd4179b..f8962221d9a 100644
  /* kill a thread on the spot */
  void kill_thread( struct thread *thread, int violent_death )
  {
-@@ -1191,8 +1213,12 @@ void kill_thread( struct thread *thread, int violent_death )
+@@ -1265,8 +1287,12 @@ void kill_thread( struct thread *thread, int violent_death )
      kill_console_processes( thread, 0 );
      debug_exit_thread( thread );
      abandon_mutexes( thread );
@@ -98,17 +98,17 @@ index 1c0fbd4179b..f8962221d9a 100644
      remove_process_thread( thread->process, thread );
      release_object( thread );
 diff --git a/server/thread.h b/server/thread.h
-index 7957557b6cc..880419c5924 100644
+index 650bc44628d..668cc4ebd79 100644
 --- a/server/thread.h
 +++ b/server/thread.h
-@@ -90,6 +90,7 @@ struct thread
+@@ -91,6 +91,7 @@ struct thread
      struct list            kernel_object; /* list of kernel object pointers */
      data_size_t            desc_len;      /* thread description length in bytes */
      WCHAR                 *desc;          /* thread description string */
 +    struct timeout_user   *exit_poll;     /* poll if the thread/process has exited already */
  };
  
- struct thread_snapshot
+ extern struct thread *current;
 -- 
-2.24.0
+2.27.0
 
diff --git a/patches/winebuild-Fake_Dlls/0004-winebuild-Use-multipass-label-system-to-generate-fak.patch b/patches/winebuild-Fake_Dlls/0004-winebuild-Use-multipass-label-system-to-generate-fak.patch
deleted file mode 100644
index d4813799e..000000000
--- a/patches/winebuild-Fake_Dlls/0004-winebuild-Use-multipass-label-system-to-generate-fak.patch
+++ /dev/null
@@ -1,430 +0,0 @@
-From 344eb39bdfee74d4d826fa2f61a95736f0ee9823 Mon Sep 17 00:00:00 2001
-From: =?UTF-8?q?Michael=20M=C3=BCller?= <michael@fds-team.de>
-Date: Mon, 15 May 2017 02:05:49 +0200
-Subject: [PATCH] winebuild: Use multipass label system to generate fake dlls.
-
----
- tools/winebuild/build.h  |   6 ++
- tools/winebuild/res32.c  |   1 -
- tools/winebuild/spec32.c | 145 ++++++++++++++++++++++-----------------
- tools/winebuild/utils.c  |  92 +++++++++++++++++++++++++
- 4 files changed, 181 insertions(+), 63 deletions(-)
-
-diff --git a/tools/winebuild/build.h b/tools/winebuild/build.h
-index 55d5b0b9dc28..8930df408d3b 100644
---- a/tools/winebuild/build.h
-+++ b/tools/winebuild/build.h
-@@ -343,6 +343,7 @@ extern size_t input_buffer_pos;
- extern size_t input_buffer_size;
- extern unsigned char *output_buffer;
- extern size_t output_buffer_pos;
-+extern size_t output_buffer_rva;
- extern size_t output_buffer_size;
- 
- extern void init_input_buffer( const char *file );
-@@ -358,6 +359,11 @@ extern void put_dword( unsigned int val );
- extern void put_qword( unsigned int val );
- extern void put_pword( unsigned int val );
- extern void align_output( unsigned int align );
-+extern void align_output_rva( unsigned int file_align, unsigned int rva_align );
-+extern size_t label_pos( const char *name );
-+extern size_t label_rva( const char *name );
-+extern size_t label_rva_align( const char *name );
-+extern void put_label( const char *name );
- 
- /* global variables */
- 
-diff --git a/tools/winebuild/res32.c b/tools/winebuild/res32.c
-index bd55bb2fa5c4..d9329019f8a3 100644
---- a/tools/winebuild/res32.c
-+++ b/tools/winebuild/res32.c
-@@ -539,7 +539,6 @@ void output_bin_resources( DLLSPEC *spec, unsigned int start_rva )
-     if (!spec->nb_resources) return;
- 
-     tree = build_resource_tree( spec, &data_offset );
--    init_output_buffer();
- 
-     /* output the resource directories */
- 
-diff --git a/tools/winebuild/spec32.c b/tools/winebuild/spec32.c
-index 22dd399cb2b4..c38f1fe663c7 100644
---- a/tools/winebuild/spec32.c
-+++ b/tools/winebuild/spec32.c
-@@ -844,11 +844,11 @@ void output_spec32_file( DLLSPEC *spec )
- 
- 
- /*******************************************************************
-- *         output_fake_module
-+ *         output_fake_module_pass
-  *
-- * Build a fake binary module from a spec file.
-+ * Helper to create a fake binary module from a spec file.
-  */
--void output_fake_module( DLLSPEC *spec )
-+static void output_fake_module_pass( DLLSPEC *spec )
- {
-     static const unsigned char dll_code_section[] = { 0x31, 0xc0,          /* xor %eax,%eax */
-                                                       0xc2, 0x0c, 0x00 };  /* ret $12 */
-@@ -860,21 +860,8 @@ void output_fake_module( DLLSPEC *spec )
-     const unsigned int section_align = page_size;
-     const unsigned int file_align = 0x200;
-     const unsigned int reloc_size = 8;
--    const unsigned int lfanew = 0x40 + sizeof(fakedll_signature);
-+    const unsigned int lfanew = (0x40 + sizeof(fakedll_signature) + 15) & ~15;
-     const unsigned int nb_sections = 2 + (spec->nb_resources != 0);
--    const unsigned int text_size = (spec->characteristics & IMAGE_FILE_DLL) ?
--                                    sizeof(dll_code_section) : sizeof(exe_code_section);
--    unsigned char *resources;
--    unsigned int resources_size;
--    unsigned int image_size = 3 * section_align;
--
--    resolve_imports( spec );
--    output_bin_resources( spec, 3 * section_align );
--    resources = output_buffer;
--    resources_size = output_buffer_pos;
--    if (resources_size) image_size += (resources_size + section_align - 1) & ~(section_align - 1);
--
--    init_output_buffer();
- 
-     put_word( 0x5a4d );       /* e_magic */
-     put_word( 0x40 );         /* e_cblp */
-@@ -902,6 +889,7 @@ void output_fake_module( DLLSPEC *spec )
-     put_dword( lfanew );
- 
-     put_data( fakedll_signature, sizeof(fakedll_signature) );
-+    align_output_rva( 16, 16 );
- 
-     put_dword( 0x4550 );                             /* Signature */
-     switch(target_cpu)
-@@ -925,11 +913,11 @@ void output_fake_module( DLLSPEC *spec )
-               IMAGE_NT_OPTIONAL_HDR32_MAGIC );       /* Magic */
-     put_byte(  7 );                                  /* MajorLinkerVersion */
-     put_byte(  10 );                                 /* MinorLinkerVersion */
--    put_dword( text_size );                          /* SizeOfCode */
-+    put_dword( label_pos("text_end") - label_pos("text_start") ); /* SizeOfCode */
-     put_dword( 0 );                                  /* SizeOfInitializedData */
-     put_dword( 0 );                                  /* SizeOfUninitializedData */
--    put_dword( section_align );                      /* AddressOfEntryPoint */
--    put_dword( section_align );                      /* BaseOfCode */
-+    put_dword( label_rva("entrypoint") );            /* AddressOfEntryPoint */
-+    put_dword( label_rva("text_start") );            /* BaseOfCode */
-     if (get_ptr_size() == 4) put_dword( 0 );         /* BaseOfData */
-     put_pword( 0x10000000 );                         /* ImageBase */
-     put_dword( section_align );                      /* SectionAlignment */
-@@ -941,8 +929,8 @@ void output_fake_module( DLLSPEC *spec )
-     put_word( spec->subsystem_major );               /* MajorSubsystemVersion */
-     put_word( spec->subsystem_minor );               /* MinorSubsystemVersion */
-     put_dword( 0 );                                  /* Win32VersionValue */
--    put_dword( image_size );                         /* SizeOfImage */
--    put_dword( file_align );                         /* SizeOfHeaders */
-+    put_dword( label_rva_align("file_end") );        /* SizeOfImage */
-+    put_dword( label_pos("header_end") );            /* SizeOfHeaders */
-     put_dword( 0 );                                  /* CheckSum */
-     put_word( spec->subsystem );                     /* Subsystem */
-     put_word( spec->dll_characteristics );           /* DllCharacteristics */
-@@ -955,10 +943,10 @@ void output_fake_module( DLLSPEC *spec )
- 
-     put_dword( 0 ); put_dword( 0 );   /* DataDirectory[IMAGE_DIRECTORY_ENTRY_EXPORT] */
-     put_dword( 0 ); put_dword( 0 );   /* DataDirectory[IMAGE_DIRECTORY_ENTRY_IMPORT] */
--    if (resources_size)   /* DataDirectory[IMAGE_DIRECTORY_ENTRY_RESOURCE] */
-+    if (spec->nb_resources)           /* DataDirectory[IMAGE_DIRECTORY_ENTRY_RESOURCE] */
-     {
--        put_dword( 3 * section_align );
--        put_dword( resources_size );
-+        put_dword( label_rva("res_start") );
-+        put_dword( label_pos("res_end") - label_pos("res_start") );
-     }
-     else
-     {
-@@ -968,8 +956,8 @@ void output_fake_module( DLLSPEC *spec )
- 
-     put_dword( 0 ); put_dword( 0 );   /* DataDirectory[IMAGE_DIRECTORY_ENTRY_EXCEPTION] */
-     put_dword( 0 ); put_dword( 0 );   /* DataDirectory[IMAGE_DIRECTORY_ENTRY_SECURITY] */
--    put_dword( 2 * section_align );   /* DataDirectory[IMAGE_DIRECTORY_ENTRY_BASERELOC] */
--    put_dword( reloc_size );
-+    put_dword( label_rva("reloc_start") ); /* DataDirectory[IMAGE_DIRECTORY_ENTRY_BASERELOC] */
-+    put_dword( label_pos("reloc_end") - label_pos("reloc_start") );
-     put_dword( 0 ); put_dword( 0 );   /* DataDirectory[IMAGE_DIRECTORY_ENTRY_DEBUG] */
-     put_dword( 0 ); put_dword( 0 );   /* DataDirectory[IMAGE_DIRECTORY_ENTRY_COPYRIGHT] */
-     put_dword( 0 ); put_dword( 0 );   /* DataDirectory[IMAGE_DIRECTORY_ENTRY_GLOBALPTR] */
-@@ -982,62 +970,95 @@ void output_fake_module( DLLSPEC *spec )
-     put_dword( 0 ); put_dword( 0 );   /* DataDirectory[15] */
- 
-     /* .text section */
--    put_data( ".text\0\0", 8 );    /* Name */
--    put_dword( section_align );    /* VirtualSize */
--    put_dword( section_align );    /* VirtualAddress */
--    put_dword( text_size );        /* SizeOfRawData */
--    put_dword( file_align );       /* PointerToRawData */
--    put_dword( 0 );                /* PointerToRelocations */
--    put_dword( 0 );                /* PointerToLinenumbers */
--    put_word( 0 );                 /* NumberOfRelocations */
--    put_word( 0 );                 /* NumberOfLinenumbers */
--    put_dword( 0x60000020 /* CNT_CODE|MEM_EXECUTE|MEM_READ */ ); /* Characteristics  */
-+    put_data( ".text\0\0", 8 );                                           /* Name */
-+    put_dword( label_rva_align("text_end") - label_rva("text_start") );   /* VirtualSize */
-+    put_dword( label_rva("text_start") );                                 /* VirtualAddress */
-+    put_dword( label_pos("text_end") - label_pos("text_start") );         /* SizeOfRawData */
-+    put_dword( label_pos("text_start") );                                 /* PointerToRawData */
-+    put_dword( 0 );                                                       /* PointerToRelocations */
-+    put_dword( 0 );                                                       /* PointerToLinenumbers */
-+    put_word( 0 );                                                        /* NumberOfRelocations */
-+    put_word( 0 );                                                        /* NumberOfLinenumbers */
-+    put_dword( 0x60000020 /* CNT_CODE|MEM_EXECUTE|MEM_READ */ );          /* Characteristics  */
- 
-     /* .reloc section */
--    put_data( ".reloc\0", 8 );     /* Name */
--    put_dword( section_align );    /* VirtualSize */
--    put_dword( 2 * section_align );/* VirtualAddress */
--    put_dword( reloc_size );       /* SizeOfRawData */
--    put_dword( 2 * file_align );   /* PointerToRawData */
--    put_dword( 0 );                /* PointerToRelocations */
--    put_dword( 0 );                /* PointerToLinenumbers */
--    put_word( 0 );                 /* NumberOfRelocations */
--    put_word( 0 );                 /* NumberOfLinenumbers */
-+    put_data( ".reloc\0", 8 );                                            /* Name */
-+    put_dword( label_rva_align("reloc_end") - label_rva("reloc_start") ); /* VirtualSize */
-+    put_dword( label_rva("reloc_start") );                                /* VirtualAddress */
-+    put_dword( label_pos("reloc_end") - label_pos("reloc_start") );       /* SizeOfRawData */
-+    put_dword( label_pos("reloc_start") );                                /* PointerToRawData */
-+    put_dword( 0 );                                                       /* PointerToRelocations */
-+    put_dword( 0 );                                                       /* PointerToLinenumbers */
-+    put_word( 0 );                                                        /* NumberOfRelocations */
-+    put_word( 0 );                                                        /* NumberOfLinenumbers */
-     put_dword( 0x42000040 /* CNT_INITIALIZED_DATA|MEM_DISCARDABLE|MEM_READ */ ); /* Characteristics */
- 
-     /* .rsrc section */
--    if (resources_size)
-+    if (spec->nb_resources)
-     {
--        put_data( ".rsrc\0\0", 8 );    /* Name */
--        put_dword( (resources_size + section_align - 1) & ~(section_align - 1) ); /* VirtualSize */
--        put_dword( 3 * section_align );/* VirtualAddress */
--        put_dword( resources_size );   /* SizeOfRawData */
--        put_dword( 3 * file_align );   /* PointerToRawData */
--        put_dword( 0 );                /* PointerToRelocations */
--        put_dword( 0 );                /* PointerToLinenumbers */
--        put_word( 0 );                 /* NumberOfRelocations */
--        put_word( 0 );                 /* NumberOfLinenumbers */
--        put_dword( 0x40000040 /* CNT_INITIALIZED_DATA|MEM_READ */ ); /* Characteristics */
-+        put_data( ".rsrc\0\0", 8 );                                       /* Name */
-+        put_dword( label_rva_align("res_end") - label_rva("res_start") ); /* VirtualSize */
-+        put_dword( label_rva("res_start") );                              /* VirtualAddress */
-+        put_dword( label_pos("res_end") - label_pos("res_start") );       /* SizeOfRawData */
-+        put_dword( label_pos("res_start") );                              /* PointerToRawData */
-+        put_dword( 0 );                                                   /* PointerToRelocations */
-+        put_dword( 0 );                                                   /* PointerToLinenumbers */
-+        put_word( 0 );                                                    /* NumberOfRelocations */
-+        put_word( 0 );                                                    /* NumberOfLinenumbers */
-+        put_dword( 0x40000040 /* CNT_INITIALIZED_DATA|MEM_READ */ );      /* Characteristics */
-     }
- 
-+    align_output_rva( file_align, file_align );
-+    put_label( "header_end" );
-+
-     /* .text contents */
--    align_output( file_align );
-+    align_output_rva( file_align, section_align );
-+    put_label( "text_start" );
-+    put_label( "entrypoint" );
-     if (spec->characteristics & IMAGE_FILE_DLL)
-         put_data( dll_code_section, sizeof(dll_code_section) );
-     else
-         put_data( exe_code_section, sizeof(exe_code_section) );
-+    put_label( "text_end" );
- 
-     /* .reloc contents */
--    align_output( file_align );
-+    align_output_rva( file_align, section_align );
-+    put_label( "reloc_start" );
-     put_dword( 0 );   /* VirtualAddress */
-     put_dword( 0 );   /* SizeOfBlock */
-+    put_label( "reloc_end" );
- 
-     /* .rsrc contents */
--    if (resources_size)
-+    if (spec->nb_resources)
-     {
--        align_output( file_align );
--        put_data( resources, resources_size );
-+        align_output_rva( file_align, section_align );
-+        put_label( "res_start" );
-+        output_bin_resources( spec, label_rva("res_start") );
-+        put_label( "res_end" );
-     }
-+
-+    put_label( "file_end" );
-+}
-+
-+
-+/*******************************************************************
-+ *         output_fake_module
-+ *
-+ * Build a fake binary module from a spec file.
-+ */
-+void output_fake_module( DLLSPEC *spec )
-+{
-+    resolve_imports( spec );
-+
-+    /* First pass */
-+    init_output_buffer();
-+    output_fake_module_pass( spec );
-+
-+    /* Second pass */
-+    output_buffer_pos = 0;
-+    output_buffer_rva = 0;
-+    output_fake_module_pass( spec );
-+
-     flush_output_buffer();
- }
- 
-diff --git a/tools/winebuild/utils.c b/tools/winebuild/utils.c
-index 07a579004adc..80dec6db29ea 100644
---- a/tools/winebuild/utils.c
-+++ b/tools/winebuild/utils.c
-@@ -34,6 +34,7 @@
- # include <sys/stat.h>
- #endif
- 
-+#include "wine/list.h"
- #include "build.h"
- 
- #if defined(_WIN32) && !defined(__CYGWIN__)
-@@ -542,8 +543,86 @@ size_t input_buffer_pos;
- size_t input_buffer_size;
- unsigned char *output_buffer;
- size_t output_buffer_pos;
-+size_t output_buffer_rva;
- size_t output_buffer_size;
- 
-+struct label
-+{
-+    struct list entry;
-+    const char *name;
-+    size_t pos;
-+    size_t rva;
-+};
-+
-+static struct list labels = LIST_INIT( labels );
-+
-+struct label *get_label( const char *name )
-+{
-+    struct label *label;
-+
-+    LIST_FOR_EACH_ENTRY( label, &labels, struct label, entry )
-+    {
-+        if (!strcmp(name, label->name))
-+            return label;
-+    }
-+
-+    label = xmalloc( sizeof(*label) );
-+    label->name = name;
-+    label->pos = 0;
-+    label->rva = 0;
-+
-+    list_add_tail( &labels, &label->entry );
-+
-+    return label;
-+}
-+
-+size_t label_pos( const char *name )
-+{
-+    struct label *label = get_label( name );
-+    return label->pos;
-+}
-+
-+size_t label_rva( const char *name )
-+{
-+    struct label *label = get_label( name );
-+    return label->rva;
-+}
-+
-+size_t label_rva_align( const char *name )
-+{
-+    const unsigned int page_size = get_page_size();
-+    size_t rva = label_rva( name );
-+    size_t size = page_size - (rva % page_size);
-+
-+    if (size != page_size) rva += size;
-+    return rva;
-+}
-+
-+void put_label( const char *name )
-+{
-+    struct label *label = get_label( name );
-+
-+    if (label->pos || label->rva)
-+    {
-+        assert( label->pos == output_buffer_pos );
-+        assert( label->rva == output_buffer_rva );
-+    }
-+
-+    label->pos = output_buffer_pos;
-+    label->rva = output_buffer_rva;
-+}
-+
-+void free_labels( void )
-+{
-+    struct label *label, *label2;
-+
-+    LIST_FOR_EACH_ENTRY_SAFE( label, label2, &labels, struct label, entry )
-+    {
-+        list_remove( &label->entry );
-+        free( label );
-+    }
-+}
-+
- static void check_output_buffer_space( size_t size )
- {
-     if (output_buffer_pos + size >= output_buffer_size)
-@@ -575,7 +654,9 @@ void init_output_buffer(void)
- {
-     output_buffer_size = 1024;
-     output_buffer_pos = 0;
-+    output_buffer_rva = 0;
-     output_buffer = xmalloc( output_buffer_size );
-+    free_labels();
- }
- 
- void flush_output_buffer(void)
-@@ -585,6 +666,7 @@ void flush_output_buffer(void)
-         fatal_error( "Error writing to %s\n", output_file_name );
-     close_output_file();
-     free( output_buffer );
-+    free_labels();
- }
- 
- unsigned char get_byte(void)
-@@ -624,12 +706,14 @@ void put_data( const void *data, size_t size )
-     check_output_buffer_space( size );
-     memcpy( output_buffer + output_buffer_pos, data, size );
-     output_buffer_pos += size;
-+    output_buffer_rva += size;
- }
- 
- void put_byte( unsigned char val )
- {
-     check_output_buffer_space( 1 );
-     output_buffer[output_buffer_pos++] = val;
-+    output_buffer_rva++;
- }
- 
- void put_word( unsigned short val )
-@@ -676,6 +760,14 @@ void align_output( unsigned int align )
-     output_buffer_pos += size;
- }
- 
-+void align_output_rva( unsigned int file_align, unsigned int rva_align )
-+{
-+    size_t size = rva_align - (output_buffer_rva % rva_align);
-+
-+    if (size != rva_align) output_buffer_rva += size;
-+    align_output( file_align );
-+}
-+
- /* output a standard header for generated files */
- void output_standard_file_header(void)
- {
--- 
-2.26.2
-
diff --git a/patches/winebuild-Fake_Dlls/0005-winebuild-Add-stub-functions-in-fake-dlls.patch b/patches/winebuild-Fake_Dlls/0005-winebuild-Add-stub-functions-in-fake-dlls.patch
deleted file mode 100644
index ddd580f10..000000000
--- a/patches/winebuild-Fake_Dlls/0005-winebuild-Add-stub-functions-in-fake-dlls.patch
+++ /dev/null
@@ -1,469 +0,0 @@
-From 56e581b1709c2def25db836cc8126c0eabfb11e7 Mon Sep 17 00:00:00 2001
-From: =?UTF-8?q?Michael=20M=C3=BCller?= <michael@fds-team.de>
-Date: Mon, 15 May 2017 16:27:56 +0200
-Subject: [PATCH] winebuild: Add stub functions in fake dlls.
-
----
- dlls/kernel32/tests/loader.c |   8 +-
- dlls/ntdll/loader.c          |   2 +
- dlls/ntdll/thread.c          |  35 ++++++
- include/winternl.h           |   2 +-
- tools/winebuild/build.h      |   1 +
- tools/winebuild/spec32.c     | 209 +++++++++++++++++++++++++++++++++--
- tools/winebuild/utils.c      |  10 +-
- 7 files changed, 252 insertions(+), 15 deletions(-)
-
-diff --git a/dlls/kernel32/tests/loader.c b/dlls/kernel32/tests/loader.c
-index 984246681cb..78100205c9d 100644
---- a/dlls/kernel32/tests/loader.c
-+++ b/dlls/kernel32/tests/loader.c
-@@ -1594,9 +1594,7 @@ static void test_FakeDLL(void)
-     ok(ptr != NULL, "MapViewOfFile failed with error %u\n", GetLastError());
- 
-     dir = RtlImageDirectoryEntryToData(ptr, TRUE, IMAGE_DIRECTORY_ENTRY_EXPORT, &size);
--todo_wine
-     ok(dir != NULL, "RtlImageDirectoryEntryToData failed\n");
--    if (dir == NULL) goto done;
- 
-     names    = RVAToAddr(dir->AddressOfNames, ptr);
-     ordinals = RVAToAddr(dir->AddressOfNameOrdinals, ptr);
-@@ -1625,17 +1623,20 @@ todo_wine
-         /* check position in memory */
-         dll_rva = (DWORD_PTR)dll_func - (DWORD_PTR)module;
-         map_rva = funcs[ordinals[i]];
-+    todo_wine
-         ok(map_rva == dll_rva, "%s: Rva of mapped function (0x%x) does not match dll (0x%x)\n",
-            func_name, dll_rva, map_rva);
- 
-         /* check position in file */
-         map_offset = (DWORD_PTR)RtlImageRvaToVa(RtlImageNtHeader(ptr),    ptr,    map_rva, NULL) - (DWORD_PTR)ptr;
-         dll_offset = (DWORD_PTR)RtlImageRvaToVa(RtlImageNtHeader(module), module, dll_rva, NULL) - (DWORD_PTR)module;
-+    todo_wine
-         ok(map_offset == dll_offset, "%s: File offset of mapped function (0x%x) does not match dll (0x%x)\n",
-            func_name, map_offset, dll_offset);
- 
-         /* check function content */
-         map_func = RVAToAddr(map_rva, ptr);
-+    todo_wine
-         ok(!memcmp(map_func, dll_func, 0x20), "%s: Function content does not match!\n", func_name);
- 
-         if (!strcmp(func_name, "NtSetEvent"))
-@@ -1649,10 +1650,11 @@ todo_wine
-         ok(event != NULL, "CreateEvent failed with error %u\n", GetLastError());
-         pNtSetEvent(event, 0);
-         ok(WaitForSingleObject(event, 0) == WAIT_OBJECT_0, "Event was not signaled\n");
-+        pNtSetEvent(event, 0);
-+        ok(WaitForSingleObject(event, 0) == WAIT_OBJECT_0, "Event was not signaled\n");
-         CloseHandle(event);
-     }
- 
--done:
-     UnmapViewOfFile(ptr);
-     CloseHandle(map);
-     CloseHandle(file);
-diff --git a/dlls/ntdll/loader.c b/dlls/ntdll/loader.c
-index 339b54a9e67..995dcd48786 100644
---- a/dlls/ntdll/loader.c
-+++ b/dlls/ntdll/loader.c
-@@ -3388,6 +3388,7 @@ PIMAGE_NT_HEADERS WINAPI RtlImageNtHeader(HMODULE hModule)
- }
- 
- extern void DECLSPEC_NORETURN __wine_syscall_dispatcher( void );
-+extern void *WINAPI __wine_fakedll_dispatcher( const char *module, ULONG ord );
- 
- /******************************************************************
-  *		LdrInitializeThunk (NTDLL.@)
-@@ -3405,6 +3406,7 @@ void WINAPI LdrInitializeThunk( CONTEXT *context, void **entry, ULONG_PTR unknow
-     LPCWSTR load_path = NtCurrentTeb()->Peb->ProcessParameters->DllPath.Buffer;
- 
-     NtCurrentTeb()->WOW32Reserved = __wine_syscall_dispatcher;
-+    NtCurrentTeb()->Spare2 = (ULONG_PTR)__wine_fakedll_dispatcher;
- 
-     if (process_detaching) return;
- 
-diff --git a/dlls/ntdll/thread.c b/dlls/ntdll/thread.c
-index 3f84beb8f26..0eb7d901c4d 100644
---- a/dlls/ntdll/thread.c
-+++ b/dlls/ntdll/thread.c
-@@ -36,6 +36,7 @@
- #include "ddk/wdm.h"
- #include "wine/exception.h"
- 
-+WINE_DEFAULT_DEBUG_CHANNEL(thread);
- WINE_DECLARE_DEBUG_CHANNEL(relay);
- 
- struct _KUSER_SHARED_DATA *user_shared_data = (void *)0x7ffe0000;
-@@ -104,6 +105,39 @@ void __wine_syscall_dispatcher( void )
- }
- #endif
- 
-+void *WINAPI __wine_fakedll_dispatcher( const char *module, ULONG ord )
-+{
-+    UNICODE_STRING name;
-+    NTSTATUS status;
-+    HMODULE base;
-+    WCHAR *moduleW;
-+    void *proc = NULL;
-+    DWORD len = strlen(module);
-+
-+    TRACE( "(%s, %u)\n", debugstr_a(module), ord );
-+
-+    if (!(moduleW = RtlAllocateHeap( GetProcessHeap(), 0, (len + 1) * sizeof(WCHAR) )))
-+        return NULL;
-+
-+    ascii_to_unicode( moduleW, module, len );
-+    moduleW[ len ] = 0;
-+    RtlInitUnicodeString( &name, moduleW );
-+
-+    status = LdrGetDllHandle( NULL, 0, &name, &base );
-+    if (status == STATUS_DLL_NOT_FOUND)
-+        status = LdrLoadDll( NULL, 0, &name, &base );
-+    if (status == STATUS_SUCCESS)
-+        status = LdrAddRefDll( LDR_ADDREF_DLL_PIN, base );
-+    if (status == STATUS_SUCCESS)
-+        status = LdrGetProcedureAddress( base, NULL, ord, &proc );
-+
-+    if (status)
-+        FIXME( "No procedure address found for %s.#%u, status %x\n", debugstr_a(module), ord, status );
-+
-+    RtlFreeHeap( GetProcessHeap(), 0, moduleW );
-+    return proc;
-+}
-+
- /***********************************************************************
-  *           thread_init
-  *
-@@ -116,6 +150,7 @@ TEB *thread_init( SIZE_T *info_size )
-     ULONG_PTR val;
-     TEB *teb = unix_funcs->init_threading( &nb_threads, &__wine_ldt_copy, info_size, __wine_syscall_dispatcher );
- 
-+    teb->Spare2 = (ULONG_PTR)__wine_fakedll_dispatcher;
-     peb = teb->Peb;
-     peb->FastPebLock        = &peb_lock;
-     peb->ApiSetMap          = &apiset_map;
-diff --git a/include/winternl.h b/include/winternl.h
-index 6de209d6f07..d9c31156025 100644
---- a/include/winternl.h
-+++ b/include/winternl.h
-@@ -399,7 +399,7 @@ typedef struct _TEB
-     PVOID                        Instrumentation[16];               /* f2c/16b8 */
-     PVOID                        WinSockData;                       /* f6c/1738 */
-     ULONG                        GdiBatchCount;                     /* f70/1740 */
--    ULONG                        Spare2;                            /* f74/1744 */
-+    ULONG                        Spare2;                            /* f74/1744  used for fakedll thunks */
-     ULONG                        GuaranteedStackBytes;              /* f78/1748 */
-     PVOID                        ReservedForPerf;                   /* f7c/1750 */
-     PVOID                        ReservedForOle;                    /* f80/1758 */
-diff --git a/tools/winebuild/build.h b/tools/winebuild/build.h
-index 8930df408d3..44113bad28a 100644
---- a/tools/winebuild/build.h
-+++ b/tools/winebuild/build.h
-@@ -358,6 +358,7 @@ extern void put_word( unsigned short val );
- extern void put_dword( unsigned int val );
- extern void put_qword( unsigned int val );
- extern void put_pword( unsigned int val );
-+extern void put_str( const char *str );
- extern void align_output( unsigned int align );
- extern void align_output_rva( unsigned int file_align, unsigned int rva_align );
- extern size_t label_pos( const char *name );
-diff --git a/tools/winebuild/spec32.c b/tools/winebuild/spec32.c
-index c38f1fe663c..bf82ca497c0 100644
---- a/tools/winebuild/spec32.c
-+++ b/tools/winebuild/spec32.c
-@@ -843,6 +843,163 @@ void output_spec32_file( DLLSPEC *spec )
- }
- 
- 
-+static int needs_stub_exports( DLLSPEC *spec )
-+{
-+    if (target_cpu != CPU_x86)
-+        return 0;
-+    if (!(spec->characteristics & IMAGE_FILE_DLL))
-+        return 0;
-+    if (!spec->nb_entry_points)
-+        return 0;
-+    return 1;
-+}
-+
-+
-+static void create_stub_exports_text( DLLSPEC *spec )
-+{
-+    int i, nr_exports = spec->base <= spec->limit ? spec->limit - spec->base + 1 : 0;
-+    size_t rva, thunk;
-+
-+    /* output stub code for exports */
-+    for (i = 0; i < spec->nb_entry_points; i++)
-+    {
-+        ORDDEF *odp = &spec->entry_points[i];
-+        const char *name = get_stub_name( odp, spec );
-+
-+        align_output_rva( 16, 16 );
-+        put_label( name );
-+        put_byte( 0x8b ); put_byte( 0xff );                           /* mov edi, edi */
-+        put_byte( 0x55 );                                             /* push ebp */
-+        put_byte( 0x8b ); put_byte( 0xec );                           /* mov ebp, esp */
-+        put_byte( 0x68 ); put_dword( 0 );                             /* push dword 0 */
-+        put_byte( 0x68 ); put_dword( odp->ordinal );                  /* push ORDINAL */
-+        rva = output_buffer_rva + 5;
-+        put_byte( 0xe8 ); put_dword( label_rva("_forward") - rva );   /* call _forward */
-+        put_byte( 0x89 ); put_byte( 0xec );                           /* mov esp, ebp */
-+        put_byte( 0x5d );                                             /* pop ebp */
-+        if (odp->type == TYPE_STDCALL)
-+        {
-+            put_byte( 0xc2 ); put_word( get_args_size(odp) );         /* ret X */
-+        }
-+        else
-+        {
-+            put_byte( 0xc3 );                                         /* ret */
-+        }
-+    }
-+
-+    /* output entry point */
-+    align_output_rva( 16, 16 );
-+    put_label( "entrypoint" );
-+    put_byte( 0xb8 ); put_dword( 1 );                                 /* mov eax, 1 */
-+    put_byte( 0xc2 ); put_word( 12 );                                 /* ret 12 */
-+
-+    /* output forward function */
-+    align_output_rva( 16, 16 );
-+    put_label( "_forward" );
-+    put_byte( 0x8b ); put_byte( 0x6d ); put_byte( 0x00 );             /* mov ebp, dword[ebp] */
-+    put_byte( 0x89 ); put_byte( 0x44 );                               /* mov dword[esp+8], eax */
-+    put_byte( 0x24 ); put_byte( 0x08 );
-+    put_byte( 0x89 ); put_byte( 0x14 ); put_byte( 0x24 );             /* mov dword[esp], edx */
-+    put_byte( 0x8b ); put_byte( 0x54 );                               /* mov edx, dword[esp+4] */
-+    put_byte( 0x24 ); put_byte( 0x04 );
-+    put_byte( 0x89 ); put_byte( 0x4c );                               /* mov dword[esp+4], ecx */
-+    put_byte( 0x24 ); put_byte( 0x04 );
-+    put_byte( 0xe8 ); put_dword( 0 );                                 /* call 1f */
-+    thunk = output_buffer_rva;
-+    put_byte( 0x59 );                                                 /* pop ecx */
-+    put_byte( 0x8b ); put_byte( 0x84 ); put_byte( 0x91 );             /* mov eax, dword[_functions + 4 * (edx - BASE)] */
-+    put_dword( label_rva("_functions") - thunk - 4 * spec->base );
-+    put_byte( 0x09 ); put_byte( 0xc0 );                               /* or eax, eax */
-+    rva = output_buffer_rva + 2;
-+    put_byte( 0x74 ); put_byte( label_rva("_forward_load") - rva );   /* je _forward_load */
-+
-+    put_label( "_forward_done" );
-+    put_byte( 0x89 ); put_byte( 0x44 );                               /* mov dword[esp+12], eax */
-+    put_byte( 0x24 ); put_byte( 0x0c );
-+    put_byte( 0x5a );                                                 /* pop edx */
-+    put_byte( 0x59 );                                                 /* pop ecx */
-+    put_byte( 0x58 );                                                 /* pop eax */
-+    put_byte( 0xc3 );                                                 /* ret */
-+
-+    align_output_rva( 16, 16 );
-+    put_label( "_forward_load" );
-+    put_byte( 0x8d ); put_byte( 0x84 ); put_byte( 0x91 );             /* lea eax, [_functions + 4 * (edx - BASE)] */
-+    put_dword( label_rva("_functions") - thunk - 4 * spec->base );
-+    put_byte( 0x50 );                                                 /* push eax */
-+    put_byte( 0x52 );                                                 /* push edx */
-+    put_byte( 0x8d ); put_byte( 0x81 );                               /* lea eax, [dll_name] */
-+    put_dword( label_rva("dll_name") - thunk );
-+    put_byte( 0x50 );                                                 /* push eax */
-+    put_byte( 0x64 ); put_byte( 0xff );                               /* call dword ptr fs:[0F74h] */
-+    put_byte( 0x15 ); put_dword( 0xf74 );
-+    put_byte( 0x5a );                                                 /* pop edx */
-+    put_byte( 0x89 ); put_byte( 0x02 );                               /* mov dword[edx], eax */
-+    rva = output_buffer_rva + 2;
-+    put_byte( 0xeb ); put_byte( label_rva("_forward_done") - rva );   /* jmp _forward_done */
-+
-+    /* export directory */
-+    align_output_rva( 16, 16 );
-+    put_label( "export_start" );
-+    put_dword( 0 );                             /* Characteristics */
-+    put_dword( 0 );                             /* TimeDateStamp */
-+    put_dword( 0 );                             /* MajorVersion/MinorVersion */
-+    put_dword( label_rva("dll_name") );         /* Name */
-+    put_dword( spec->base );                    /* Base */
-+    put_dword( nr_exports );                    /* NumberOfFunctions */
-+    put_dword( spec->nb_names );                /* NumberOfNames */
-+    put_dword( label_rva("export_funcs") );     /* AddressOfFunctions */
-+    put_dword( label_rva("export_names") );     /* AddressOfNames */
-+    put_dword( label_rva("export_ordinals") );  /* AddressOfNameOrdinals */
-+
-+    put_label( "export_funcs" );
-+    for (i = spec->base; i <= spec->limit; i++)
-+    {
-+        ORDDEF *odp = spec->ordinals[i];
-+        if (odp)
-+        {
-+            const char *name = get_stub_name( odp, spec );
-+            put_dword( label_rva( name ) );
-+        }
-+        else
-+            put_dword( 0 );
-+    }
-+
-+    if (spec->nb_names)
-+    {
-+        put_label( "export_names" );
-+        for (i = 0; i < spec->nb_names; i++)
-+            put_dword( label_rva(strmake("str_%s", get_stub_name(spec->names[i], spec))) );
-+
-+        put_label( "export_ordinals" );
-+        for (i = 0; i < spec->nb_names; i++)
-+            put_word( spec->names[i]->ordinal - spec->base );
-+        if (spec->nb_names % 2)
-+            put_word( 0 );
-+    }
-+
-+    put_label( "dll_name" );
-+    put_str( spec->file_name );
-+
-+    for (i = 0; i < spec->nb_names; i++)
-+    {
-+        put_label( strmake("str_%s", get_stub_name(spec->names[i], spec)) );
-+        put_str( spec->names[i]->name );
-+    }
-+
-+    put_label( "export_end" );
-+}
-+
-+
-+static void create_stub_exports_data( DLLSPEC *spec )
-+{
-+    int i;
-+
-+    put_label( "_functions" );
-+    for (i = spec->base; i <= spec->limit; i++)
-+        put_dword( 0 );
-+}
-+
-+
- /*******************************************************************
-  *         output_fake_module_pass
-  *
-@@ -861,7 +1018,7 @@ static void output_fake_module_pass( DLLSPEC *spec )
-     const unsigned int file_align = 0x200;
-     const unsigned int reloc_size = 8;
-     const unsigned int lfanew = (0x40 + sizeof(fakedll_signature) + 15) & ~15;
--    const unsigned int nb_sections = 2 + (spec->nb_resources != 0);
-+    const unsigned int nb_sections = 2 + (needs_stub_exports( spec ) != 0) + (spec->nb_resources != 0);
- 
-     put_word( 0x5a4d );       /* e_magic */
-     put_word( 0x40 );         /* e_cblp */
-@@ -918,7 +1075,7 @@ static void output_fake_module_pass( DLLSPEC *spec )
-     put_dword( 0 );                                  /* SizeOfUninitializedData */
-     put_dword( label_rva("entrypoint") );            /* AddressOfEntryPoint */
-     put_dword( label_rva("text_start") );            /* BaseOfCode */
--    if (get_ptr_size() == 4) put_dword( 0 );         /* BaseOfData */
-+    if (get_ptr_size() == 4) put_dword( label_rva("data_start") ); /* BaseOfData */
-     put_pword( 0x10000000 );                         /* ImageBase */
-     put_dword( section_align );                      /* SectionAlignment */
-     put_dword( file_align );                         /* FileAlignment */
-@@ -941,7 +1098,8 @@ static void output_fake_module_pass( DLLSPEC *spec )
-     put_dword( 0 );                                  /* LoaderFlags */
-     put_dword( 16 );                                 /* NumberOfRvaAndSizes */
- 
--    put_dword( 0 ); put_dword( 0 );   /* DataDirectory[IMAGE_DIRECTORY_ENTRY_EXPORT] */
-+    put_dword( label_rva("export_start") ); /* DataDirectory[IMAGE_DIRECTORY_ENTRY_EXPORT] */
-+    put_dword( label_pos("export_end") - label_pos("export_start") );
-     put_dword( 0 ); put_dword( 0 );   /* DataDirectory[IMAGE_DIRECTORY_ENTRY_IMPORT] */
-     if (spec->nb_resources)           /* DataDirectory[IMAGE_DIRECTORY_ENTRY_RESOURCE] */
-     {
-@@ -981,6 +1139,21 @@ static void output_fake_module_pass( DLLSPEC *spec )
-     put_word( 0 );                                                        /* NumberOfLinenumbers */
-     put_dword( 0x60000020 /* CNT_CODE|MEM_EXECUTE|MEM_READ */ );          /* Characteristics  */
- 
-+    /* .data section */
-+    if (needs_stub_exports( spec ))
-+    {
-+        put_data( ".data\0\0", 8 );                                       /* Name */
-+        put_dword( label_rva_align("data_end") - label_rva("data_start") ); /* VirtualSize */
-+        put_dword( label_rva("data_start") );                             /* VirtualAddress */
-+        put_dword( label_pos("data_end") - label_pos("data_start") );     /* SizeOfRawData */
-+        put_dword( label_pos("data_start") );                             /* PointerToRawData */
-+        put_dword( 0 );                                                   /* PointerToRelocations */
-+        put_dword( 0 );                                                   /* PointerToLinenumbers */
-+        put_word( 0 );                                                    /* NumberOfRelocations */
-+        put_word( 0 );                                                    /* NumberOfLinenumbers */
-+        put_dword( 0xc0000040 /* CNT_INITIALIZED_DATA|MEM_READ|MEM_WRITE */ ); /* Characteristics  */
-+    }
-+
-     /* .reloc section */
-     put_data( ".reloc\0", 8 );                                            /* Name */
-     put_dword( label_rva_align("reloc_end") - label_rva("reloc_start") ); /* VirtualSize */
-@@ -1013,13 +1186,31 @@ static void output_fake_module_pass( DLLSPEC *spec )
- 
-     /* .text contents */
-     align_output_rva( file_align, section_align );
--    put_label( "text_start" );
--    put_label( "entrypoint" );
--    if (spec->characteristics & IMAGE_FILE_DLL)
--        put_data( dll_code_section, sizeof(dll_code_section) );
-+    if (needs_stub_exports( spec ))
-+    {
-+        put_label( "text_start" );
-+        create_stub_exports_text( spec );
-+        put_label( "text_end" );
-+    }
-     else
--        put_data( exe_code_section, sizeof(exe_code_section) );
--    put_label( "text_end" );
-+    {
-+        put_label( "text_start" );
-+        put_label( "entrypoint" );
-+        if (spec->characteristics & IMAGE_FILE_DLL)
-+            put_data( dll_code_section, sizeof(dll_code_section) );
-+        else
-+            put_data( exe_code_section, sizeof(exe_code_section) );
-+        put_label( "text_end" );
-+    }
-+
-+    /* .data contents */
-+    align_output_rva( file_align, section_align );
-+    if (needs_stub_exports( spec ))
-+    {
-+        put_label( "data_start" );
-+        create_stub_exports_data( spec );
-+        put_label( "data_end" );
-+    }
- 
-     /* .reloc contents */
-     align_output_rva( file_align, section_align );
-diff --git a/tools/winebuild/utils.c b/tools/winebuild/utils.c
-index 80dec6db29e..d394a1382c6 100644
---- a/tools/winebuild/utils.c
-+++ b/tools/winebuild/utils.c
-@@ -549,7 +549,7 @@ size_t output_buffer_size;
- struct label
- {
-     struct list entry;
--    const char *name;
-+    char *name;
-     size_t pos;
-     size_t rva;
- };
-@@ -567,7 +567,7 @@ struct label *get_label( const char *name )
-     }
- 
-     label = xmalloc( sizeof(*label) );
--    label->name = name;
-+    label->name = xstrdup( name );
-     label->pos = 0;
-     label->rva = 0;
- 
-@@ -619,6 +619,7 @@ void free_labels( void )
-     LIST_FOR_EACH_ENTRY_SAFE( label, label2, &labels, struct label, entry )
-     {
-         list_remove( &label->entry );
-+        free( label->name );
-         free( label );
-     }
- }
-@@ -750,6 +751,11 @@ void put_pword( unsigned int val )
-     else put_dword( val );
- }
- 
-+void put_str( const char *str )
-+{
-+    put_data( str, strlen(str) + 1 );
-+}
-+
- void align_output( unsigned int align )
- {
-     size_t size = align - (output_buffer_pos % align);
--- 
-2.27.0
-
diff --git a/patches/winebuild-Fake_Dlls/0006-winebuild-Add-syscall-thunks-in-fake-dlls.patch b/patches/winebuild-Fake_Dlls/0006-winebuild-Add-syscall-thunks-in-fake-dlls.patch
deleted file mode 100644
index 13f46d6b0..000000000
--- a/patches/winebuild-Fake_Dlls/0006-winebuild-Add-syscall-thunks-in-fake-dlls.patch
+++ /dev/null
@@ -1,76 +0,0 @@
-From fd72d405abba827ab5e2603551d48200aedad3ce Mon Sep 17 00:00:00 2001
-From: =?UTF-8?q?Michael=20M=C3=BCller?= <michael@fds-team.de>
-Date: Mon, 15 May 2017 17:56:48 +0200
-Subject: [PATCH] winebuild: Add syscall thunks in fake dlls.
-
----
- dlls/kernel32/tests/loader.c |  1 -
- tools/winebuild/spec32.c     | 27 +++++++++++++++++++++++++--
- 2 files changed, 25 insertions(+), 3 deletions(-)
-
-diff --git a/dlls/kernel32/tests/loader.c b/dlls/kernel32/tests/loader.c
-index 182b61b731a2..98369c7d508c 100644
---- a/dlls/kernel32/tests/loader.c
-+++ b/dlls/kernel32/tests/loader.c
-@@ -1639,7 +1639,6 @@ static void test_FakeDLL(void)
- 
-         /* check function content */
-         map_func = RVAToAddr(map_rva, ptr);
--    todo_wine
-         ok(!memcmp(map_func, dll_func, 0x20), "%s: Function content does not match!\n", func_name);
- 
-         if (!strcmp(func_name, "NtSetEvent"))
-diff --git a/tools/winebuild/spec32.c b/tools/winebuild/spec32.c
-index bf82ca497c0d..6968e41260f1 100644
---- a/tools/winebuild/spec32.c
-+++ b/tools/winebuild/spec32.c
-@@ -860,13 +860,36 @@ static void create_stub_exports_text( DLLSPEC *spec )
-     int i, nr_exports = spec->base <= spec->limit ? spec->limit - spec->base + 1 : 0;
-     size_t rva, thunk;
- 
-+    /* output syscalls */
-+    for (i = 0; i < spec->nb_syscalls; i++)
-+    {
-+        ORDDEF *odp = spec->syscalls[i];
-+
-+        align_output_rva( 16, 16 );
-+        put_label( odp->link_name );
-+        put_byte( 0xb8 ); put_dword( i );                     /* mov eax, SYSCALL */
-+        put_byte( 0x64 ); put_byte( 0xff );                   /* call dword ptr fs:[0C0h] */
-+        put_byte( 0x15 ); put_dword( 0xc0 );
-+        put_byte( 0xc2 ); put_word( get_args_size(odp) );     /* ret X */
-+    }
-+
-+    if (spec->nb_syscalls)
-+    {
-+        for (i = 0; i < 0x20; i++)
-+            put_byte( 0 );
-+    }
-+
-     /* output stub code for exports */
-     for (i = 0; i < spec->nb_entry_points; i++)
-     {
-         ORDDEF *odp = &spec->entry_points[i];
--        const char *name = get_stub_name( odp, spec );
-+        const char *name;
-+
-+        if (odp->flags & FLAG_SYSCALL)
-+            continue;
- 
-         align_output_rva( 16, 16 );
-+        name = get_stub_name( odp, spec );
-         put_label( name );
-         put_byte( 0x8b ); put_byte( 0xff );                           /* mov edi, edi */
-         put_byte( 0x55 );                                             /* push ebp */
-@@ -957,7 +980,7 @@ static void create_stub_exports_text( DLLSPEC *spec )
-         ORDDEF *odp = spec->ordinals[i];
-         if (odp)
-         {
--            const char *name = get_stub_name( odp, spec );
-+            const char *name = (odp->flags & FLAG_SYSCALL) ? odp->link_name : get_stub_name( odp, spec );
-             put_dword( label_rva( name ) );
-         }
-         else
--- 
-2.26.2
-
diff --git a/patches/winebuild-Fake_Dlls/0007-winebuild-Fix-size-of-relocation-information-in-fake.patch b/patches/winebuild-Fake_Dlls/0007-winebuild-Fix-size-of-relocation-information-in-fake.patch
deleted file mode 100644
index 3b3745ed6..000000000
--- a/patches/winebuild-Fake_Dlls/0007-winebuild-Fix-size-of-relocation-information-in-fake.patch
+++ /dev/null
@@ -1,27 +0,0 @@
-From f92fc0572be02ce2eee2a9cbf60724372678a5af Mon Sep 17 00:00:00 2001
-From: =?UTF-8?q?Michael=20M=C3=BCller?= <michael@fds-team.de>
-Date: Thu, 25 May 2017 03:22:25 +0200
-Subject: [PATCH] winebuild: Fix size of relocation information in fake dlls.
-
----
- tools/winebuild/spec32.c | 4 ++--
- 1 file changed, 2 insertions(+), 2 deletions(-)
-
-diff --git a/tools/winebuild/spec32.c b/tools/winebuild/spec32.c
-index 6968e41260f1..f95b45b9a0d5 100644
---- a/tools/winebuild/spec32.c
-+++ b/tools/winebuild/spec32.c
-@@ -1238,8 +1238,8 @@ static void output_fake_module_pass( DLLSPEC *spec )
-     /* .reloc contents */
-     align_output_rva( file_align, section_align );
-     put_label( "reloc_start" );
--    put_dword( 0 );   /* VirtualAddress */
--    put_dword( 0 );   /* SizeOfBlock */
-+    put_dword( label_rva("text_start") );   /* VirtualAddress */
-+    put_dword( 8 );                         /* SizeOfBlock */
-     put_label( "reloc_end" );
- 
-     /* .rsrc contents */
--- 
-2.26.2
-
diff --git a/patches/winebuild-Fake_Dlls/0008-winebuild-Try-to-make-sure-RVA-matches-between-fake-.patch b/patches/winebuild-Fake_Dlls/0008-winebuild-Try-to-make-sure-RVA-matches-between-fake-.patch
deleted file mode 100644
index 2cb4b7cf1..000000000
--- a/patches/winebuild-Fake_Dlls/0008-winebuild-Try-to-make-sure-RVA-matches-between-fake-.patch
+++ /dev/null
@@ -1,99 +0,0 @@
-From 59efee63a7442dfee4d9e76b11f651a11a4b523e Mon Sep 17 00:00:00 2001
-From: =?UTF-8?q?Michael=20M=C3=BCller?= <michael@fds-team.de>
-Date: Thu, 25 May 2017 21:46:27 +0200
-Subject: [PATCH] winebuild: Try to make sure RVA matches between fake and
- builtin DLLs.
-
----
- dlls/kernel32/tests/loader.c |  1 -
- libs/wine/loader.c           | 13 +++++++++++--
- tools/winebuild/spec32.c     | 17 +++++++++++++++--
- 3 files changed, 26 insertions(+), 5 deletions(-)
-
-diff --git a/dlls/kernel32/tests/loader.c b/dlls/kernel32/tests/loader.c
-index 98369c7d508c..77e73b3ca37b 100644
---- a/dlls/kernel32/tests/loader.c
-+++ b/dlls/kernel32/tests/loader.c
-@@ -1626,7 +1626,6 @@ static void test_FakeDLL(void)
-         /* check position in memory */
-         dll_rva = (DWORD_PTR)dll_func - (DWORD_PTR)module;
-         map_rva = funcs[ordinals[i]];
--    todo_wine
-         ok(map_rva == dll_rva, "%s: Rva of mapped function (0x%x) does not match dll (0x%x)\n",
-            func_name, dll_rva, map_rva);
- 
-diff --git a/libs/wine/loader.c b/libs/wine/loader.c
-index c3b59d902243..b6847ca77b31 100644
---- a/libs/wine/loader.c
-+++ b/libs/wine/loader.c
-@@ -335,8 +335,12 @@ static void *map_dll( const IMAGE_NT_HEADERS *nt_descr )
-     assert( size <= page_size );
- 
-     /* module address must be aligned on 64K boundary */
--    addr = (BYTE *)((nt_descr->OptionalHeader.ImageBase + 0xffff) & ~0xffff);
--    if (wine_anon_mmap( addr, page_size, PROT_READ|PROT_WRITE, MAP_FIXED ) != addr) return NULL;
-+    addr = *(BYTE **)&nt_descr->OptionalHeader.DataDirectory[15];
-+    if (!addr || ((ULONG_PTR)addr & 0xffff) || mprotect( addr, page_size, PROT_READ | PROT_WRITE ))
-+    {
-+        addr = (BYTE *)((nt_descr->OptionalHeader.ImageBase + 0xffff) & ~0xffff);
-+        if (wine_anon_mmap( addr, page_size, PROT_READ|PROT_WRITE, MAP_FIXED ) != addr) return NULL;
-+    }
- 
-     dos    = (IMAGE_DOS_HEADER *)addr;
-     nt     = (IMAGE_NT_HEADERS *)(dos + 1);
-@@ -383,6 +387,11 @@ static void *map_dll( const IMAGE_NT_HEADERS *nt_descr )
-     nt->OptionalHeader.SizeOfImage                 = data_end;
-     nt->OptionalHeader.ImageBase                   = (ULONG_PTR)addr;
- 
-+    /* Clear DataDirectory[15] */
-+
-+    nt->OptionalHeader.DataDirectory[15].VirtualAddress = 0;
-+    nt->OptionalHeader.DataDirectory[15].Size = 0;
-+
-     /* Build the code section */
- 
-     memcpy( sec->Name, ".text", sizeof(".text") );
-diff --git a/tools/winebuild/spec32.c b/tools/winebuild/spec32.c
-index f95b45b9a0d5..07d6eed05fcc 100644
---- a/tools/winebuild/spec32.c
-+++ b/tools/winebuild/spec32.c
-@@ -381,14 +381,25 @@ static void output_relay_debug( DLLSPEC *spec )
-  */
- static void output_syscall_thunks( DLLSPEC *spec )
- {
-+    const unsigned int page_size = get_page_size();
-     int i;
- 
-     if (!spec->nb_syscalls)
-         return;
- 
--    output( "\n/* syscall thunks */\n\n" );
--    output( "\t.text\n" );
-+    /* Reserve space for PE header directly before syscalls. */
-+    if (target_platform == PLATFORM_APPLE)
-+        output( "\t.text\n" );
-+    else
-+        output( "\n\t.section \".text.startup\"\n" );
-+
-+    output( "\t.align %d\n", get_alignment(65536) );
-+    output( "__wine_spec_pe_header_syscalls:\n" );
-+    output( "__wine_spec_pe_header_syscalls_end:\n" );
-+    output( "\t.byte 0\n" );
-+    output( "\t.balign %d, 0\n", page_size );
- 
-+    output( "\n/* syscall thunks */\n\n" );
-     for (i = 0; i < spec->nb_syscalls; i++)
-     {
-         ORDDEF *odp = spec->syscalls[i];
-@@ -813,6 +824,8 @@ void output_module( DLLSPEC *spec )
-         data_dirs[1] = ".L__wine_spec_imports";   /* DataDirectory[IMAGE_DIRECTORY_ENTRY_IMPORT] */
-     if (spec->nb_resources)
-         data_dirs[2] = ".L__wine_spec_resources"; /* DataDirectory[IMAGE_DIRECTORY_ENTRY_RESOURCE] */
-+    if (spec->nb_syscalls)
-+        data_dirs[15] = "__wine_spec_pe_header_syscalls";
- 
-     output_data_directories( data_dirs );
- 
--- 
-2.26.2
-
diff --git a/patches/winebuild-Fake_Dlls/0009-libs-wine-Use-same-file-alignment-for-fake-and-built.patch b/patches/winebuild-Fake_Dlls/0009-libs-wine-Use-same-file-alignment-for-fake-and-built.patch
deleted file mode 100644
index 9113beb5f..000000000
--- a/patches/winebuild-Fake_Dlls/0009-libs-wine-Use-same-file-alignment-for-fake-and-built.patch
+++ /dev/null
@@ -1,38 +0,0 @@
-From 370eccb19c65a8b02abfa31a76651ae533dda22f Mon Sep 17 00:00:00 2001
-From: =?UTF-8?q?Michael=20M=C3=BCller?= <michael@fds-team.de>
-Date: Thu, 25 May 2017 21:56:06 +0200
-Subject: [PATCH] libs/wine: Use same file alignment for fake and builtin DLLs.
-
----
- dlls/kernel32/tests/loader.c | 1 -
- libs/wine/loader.c           | 2 +-
- 2 files changed, 1 insertion(+), 2 deletions(-)
-
-diff --git a/dlls/kernel32/tests/loader.c b/dlls/kernel32/tests/loader.c
-index 77e73b3ca37b..1f525194ce73 100644
---- a/dlls/kernel32/tests/loader.c
-+++ b/dlls/kernel32/tests/loader.c
-@@ -1632,7 +1632,6 @@ static void test_FakeDLL(void)
-         /* check position in file */
-         map_offset = (DWORD_PTR)RtlImageRvaToVa(RtlImageNtHeader(ptr),    ptr,    map_rva, NULL) - (DWORD_PTR)ptr;
-         dll_offset = (DWORD_PTR)RtlImageRvaToVa(RtlImageNtHeader(module), module, dll_rva, NULL) - (DWORD_PTR)module;
--    todo_wine
-         ok(map_offset == dll_offset, "%s: File offset of mapped function (0x%x) does not match dll (0x%x)\n",
-            func_name, map_offset, dll_offset);
- 
-diff --git a/libs/wine/loader.c b/libs/wine/loader.c
-index b6847ca77b31..4597a6cb3243 100644
---- a/libs/wine/loader.c
-+++ b/libs/wine/loader.c
-@@ -398,7 +398,7 @@ static void *map_dll( const IMAGE_NT_HEADERS *nt_descr )
-     sec->SizeOfRawData = code_end - code_start;
-     sec->Misc.VirtualSize = sec->SizeOfRawData;
-     sec->VirtualAddress   = code_start;
--    sec->PointerToRawData = code_start;
-+    sec->PointerToRawData = 0x200; /* file alignment */
-     sec->Characteristics  = (IMAGE_SCN_CNT_CODE | IMAGE_SCN_MEM_EXECUTE | IMAGE_SCN_MEM_READ);
-     sec++;
- 
--- 
-2.26.2
-
diff --git a/patches/winebuild-Fake_Dlls/0011-ntdll-Call-NtOpenFile-through-syscall-thunk.patch b/patches/winebuild-Fake_Dlls/0011-ntdll-Call-NtOpenFile-through-syscall-thunk.patch
deleted file mode 100644
index 460b270f4..000000000
--- a/patches/winebuild-Fake_Dlls/0011-ntdll-Call-NtOpenFile-through-syscall-thunk.patch
+++ /dev/null
@@ -1,104 +0,0 @@
-From ac99500b2479f2c9cfed43408c26e0f78261c46b Mon Sep 17 00:00:00 2001
-From: Paul Gofman <gofmanp@gmail.com>
-Date: Fri, 3 Jan 2020 17:39:08 +0300
-Subject: [PATCH] ntdll: Call NtOpenFile through syscall thunk.
-
-Wine-Bug: https://bugs.winehq.org/show_bug.cgi?id=48410
----
- dlls/ntdll/actctx.c     | 4 ++--
- dlls/ntdll/loader.c     | 2 +-
- dlls/ntdll/locale.c     | 4 ++--
- dlls/ntdll/ntdll_misc.h | 8 ++++++++
- dlls/ntdll/path.c       | 2 +-
- 5 files changed, 14 insertions(+), 6 deletions(-)
-
-diff --git a/dlls/ntdll/actctx.c b/dlls/ntdll/actctx.c
-index 1fa97ac0379..9bf425c6e2d 100644
---- a/dlls/ntdll/actctx.c
-+++ b/dlls/ntdll/actctx.c
-@@ -2926,7 +2926,7 @@ static NTSTATUS open_nt_file( HANDLE *handle, UNICODE_STRING *name )
-     attr.ObjectName = name;
-     attr.SecurityDescriptor = NULL;
-     attr.SecurityQualityOfService = NULL;
--    return NtOpenFile( handle, GENERIC_READ | SYNCHRONIZE, &attr, &io, FILE_SHARE_READ, FILE_SYNCHRONOUS_IO_ALERT );
-+    return __syscall_NtOpenFile( handle, GENERIC_READ | SYNCHRONIZE, &attr, &io, FILE_SHARE_READ, FILE_SYNCHRONOUS_IO_ALERT );
- }
- 
- static NTSTATUS get_manifest_in_module( struct actctx_loader* acl, struct assembly_identity* ai,
-@@ -3243,7 +3243,7 @@ static NTSTATUS lookup_winsxs(struct actctx_loader* acl, struct assembly_identit
-     attr.SecurityDescriptor = NULL;
-     attr.SecurityQualityOfService = NULL;
- 
--    if (!NtOpenFile( &handle, GENERIC_READ | SYNCHRONIZE, &attr, &io, FILE_SHARE_READ | FILE_SHARE_WRITE,
-+    if (!__syscall_NtOpenFile( &handle, GENERIC_READ | SYNCHRONIZE, &attr, &io, FILE_SHARE_READ | FILE_SHARE_WRITE,
-                      FILE_DIRECTORY_FILE | FILE_SYNCHRONOUS_IO_NONALERT ))
-     {
-         sxs_ai = *ai;
-diff --git a/dlls/ntdll/loader.c b/dlls/ntdll/loader.c
-index 5b26a556f0d..053d6a8ef1d 100644
---- a/dlls/ntdll/loader.c
-+++ b/dlls/ntdll/loader.c
-@@ -2327,7 +2327,7 @@ static NTSTATUS open_dll_file( UNICODE_STRING *nt_name, WINE_MODREF **pwm,
-     attr.ObjectName = nt_name;
-     attr.SecurityDescriptor = NULL;
-     attr.SecurityQualityOfService = NULL;
--    if ((status = NtOpenFile( &handle, GENERIC_READ | SYNCHRONIZE, &attr, &io,
-+    if ((status = __syscall_NtOpenFile( &handle, GENERIC_READ | SYNCHRONIZE, &attr, &io,
-                               FILE_SHARE_READ | FILE_SHARE_DELETE,
-                               FILE_SYNCHRONOUS_IO_NONALERT | FILE_NON_DIRECTORY_FILE )))
-     {
-diff --git a/dlls/ntdll/locale.c b/dlls/ntdll/locale.c
-index d6bde700e42..16a7f911173 100644
---- a/dlls/ntdll/locale.c
-+++ b/dlls/ntdll/locale.c
-@@ -654,7 +654,7 @@ static NTSTATUS open_nls_data_file( ULONG type, ULONG id, HANDLE *file )
-         return STATUS_NO_MEMORY;
-     valueW.Length = NTDLL_swprintf( valueW.Buffer, pathfmtW, dir, name ) * sizeof(WCHAR);
-     InitializeObjectAttributes( &attr, &valueW, 0, 0, NULL );
--    status = NtOpenFile( file, GENERIC_READ, &attr, &io, FILE_SHARE_READ, FILE_SYNCHRONOUS_IO_ALERT );
-+    status = __syscall_NtOpenFile( file, GENERIC_READ, &attr, &io, FILE_SHARE_READ, FILE_SYNCHRONOUS_IO_ALERT );
-     if (!status) TRACE( "found %s\n", debugstr_w( valueW.Buffer ));
-     RtlFreeUnicodeString( &valueW );
-     if (status != STATUS_OBJECT_NAME_NOT_FOUND && status != STATUS_OBJECT_PATH_NOT_FOUND) return status;
-@@ -678,7 +678,7 @@ static NTSTATUS open_nls_data_file( ULONG type, ULONG id, HANDLE *file )
-         wcscat( valueW.Buffer, name );
-         valueW.Length = wcslen(valueW.Buffer) * sizeof(WCHAR);
-         InitializeObjectAttributes( &attr, &valueW, 0, 0, NULL );
--        status = NtOpenFile( file, GENERIC_READ, &attr, &io, FILE_SHARE_READ, FILE_SYNCHRONOUS_IO_ALERT );
-+        status = __syscall_NtOpenFile( file, GENERIC_READ, &attr, &io, FILE_SHARE_READ, FILE_SYNCHRONOUS_IO_ALERT );
-         if (!status) TRACE( "found %s\n", debugstr_w( valueW.Buffer ));
-     }
-     RtlFreeUnicodeString( &valueW );
-diff --git a/dlls/ntdll/ntdll_misc.h b/dlls/ntdll/ntdll_misc.h
-index 47800db41b1..749edaa57cf 100644
---- a/dlls/ntdll/ntdll_misc.h
-+++ b/dlls/ntdll/ntdll_misc.h
-@@ -227,4 +227,12 @@ static inline void ascii_to_unicode( WCHAR *dst, const char *src, size_t len )
-     while (len--) *dst++ = (unsigned char)*src++;
- }
- 
-+#if defined(__i386__) || defined(__x86_64__)
-+NTSTATUS WINAPI __syscall_NtOpenFile( PHANDLE handle, ACCESS_MASK access,
-+                            POBJECT_ATTRIBUTES attr, PIO_STATUS_BLOCK io,
-+                            ULONG sharing, ULONG options );
-+#else
-+#define __syscall_NtOpenFile NtOpenFile
-+#endif
-+
- #endif
-diff --git a/dlls/ntdll/path.c b/dlls/ntdll/path.c
-index 5f4eb11316f..d2112d1af0d 100644
---- a/dlls/ntdll/path.c
-+++ b/dlls/ntdll/path.c
-@@ -929,7 +929,7 @@ NTSTATUS WINAPI RtlSetCurrentDirectory_U(const UNICODE_STRING* dir)
-     attr.SecurityDescriptor = NULL;
-     attr.SecurityQualityOfService = NULL;
- 
--    nts = NtOpenFile( &handle, FILE_TRAVERSE | SYNCHRONIZE, &attr, &io, FILE_SHARE_READ | FILE_SHARE_WRITE,
-+    nts = __syscall_NtOpenFile( &handle, FILE_TRAVERSE | SYNCHRONIZE, &attr, &io, FILE_SHARE_READ | FILE_SHARE_WRITE,
-                       FILE_DIRECTORY_FILE | FILE_SYNCHRONOUS_IO_NONALERT );
-     if (nts != STATUS_SUCCESS) goto out;
- 
--- 
-2.27.0
-

From 2e111fae102c9b00238ab0a7b09efff069198dd1 Mon Sep 17 00:00:00 2001
From: Zebediah Figura <z.figura12@gmail.com>
Date: Fri, 3 Jul 2020 19:21:33 -0500
Subject: [PATCH] ntdll-NtQueryVirtualMemory: Correct rebase.

---
 ...NtQueryVirtualMemory-MemorySectionNa.patch | 57 ++++++++++++++-----
 1 file changed, 42 insertions(+), 15 deletions(-)

diff --git a/patches/ntdll-NtQueryVirtualMemory/0003-ntdll-Implement-NtQueryVirtualMemory-MemorySectionNa.patch b/patches/ntdll-NtQueryVirtualMemory/0003-ntdll-Implement-NtQueryVirtualMemory-MemorySectionNa.patch
index 17522de47..f91e8238b 100644
--- a/patches/ntdll-NtQueryVirtualMemory/0003-ntdll-Implement-NtQueryVirtualMemory-MemorySectionNa.patch
+++ b/patches/ntdll-NtQueryVirtualMemory/0003-ntdll-Implement-NtQueryVirtualMemory-MemorySectionNa.patch
@@ -1,4 +1,4 @@
-From fb9c617c12858107700c919aec3dfa5fbf0a65dc Mon Sep 17 00:00:00 2001
+From 30bc9bbd5b1b413c7a574d5e9574f79a03b48d16 Mon Sep 17 00:00:00 2001
 From: Dmitry Timoshkov <dmitry@baikal.ru>
 Date: Sun, 28 May 2017 05:19:30 +0200
 Subject: [PATCH] ntdll: Implement NtQueryVirtualMemory(MemorySectionName).
@@ -6,17 +6,44 @@ Subject: [PATCH] ntdll: Implement NtQueryVirtualMemory(MemorySectionName).
 
 Contains several improvements by Sebastian Lackner <sebastian@fds-team.de>.
 ---
- dlls/ntdll/unix/virtual.c     | 91 ++++++++++++++++++++++++++++++++++-
- dlls/psapi/tests/psapi_main.c |  8 +--
- server/mapping.c              | 29 +++++++++++
- server/protocol.def           |  9 ++++
- 4 files changed, 129 insertions(+), 8 deletions(-)
+ dlls/ntdll/unix/file.c         |  2 +-
+ dlls/ntdll/unix/unix_private.h |  1 +
+ dlls/ntdll/unix/virtual.c      | 91 +++++++++++++++++++++++++++++++++-
+ dlls/psapi/tests/psapi_main.c  |  8 +--
+ server/mapping.c               | 29 +++++++++++
+ server/protocol.def            |  9 ++++
+ 6 files changed, 131 insertions(+), 9 deletions(-)
 
+diff --git a/dlls/ntdll/unix/file.c b/dlls/ntdll/unix/file.c
+index 551d0450584..49e807a5f24 100644
+--- a/dlls/ntdll/unix/file.c
++++ b/dlls/ntdll/unix/file.c
+@@ -1767,7 +1767,7 @@ static NTSTATUS fill_file_info( const struct stat *st, ULONG attr, void *ptr,
+ }
+ 
+ 
+-static NTSTATUS server_get_unix_name( HANDLE handle, ANSI_STRING *unix_name )
++NTSTATUS server_get_unix_name( HANDLE handle, ANSI_STRING *unix_name )
+ {
+     data_size_t size = 1024;
+     NTSTATUS ret;
+diff --git a/dlls/ntdll/unix/unix_private.h b/dlls/ntdll/unix/unix_private.h
+index e14da3ff7ec..b9a96424b4c 100644
+--- a/dlls/ntdll/unix/unix_private.h
++++ b/dlls/ntdll/unix/unix_private.h
+@@ -173,6 +173,7 @@ extern unsigned int server_queue_process_apc( HANDLE process, const apc_call_t *
+                                               apc_result_t *result ) DECLSPEC_HIDDEN;
+ extern int server_get_unix_fd( HANDLE handle, unsigned int wanted_access, int *unix_fd,
+                                int *needs_close, enum server_fd_type *type, unsigned int *options ) DECLSPEC_HIDDEN;
++extern NTSTATUS server_get_unix_name( HANDLE handle, ANSI_STRING *unix_name ) DECLSPEC_HIDDEN;
+ extern void server_init_process(void) DECLSPEC_HIDDEN;
+ extern size_t server_init_thread( void *entry_point, BOOL *suspend ) DECLSPEC_HIDDEN;
+ extern int server_pipe( int fd[2] ) DECLSPEC_HIDDEN;
 diff --git a/dlls/ntdll/unix/virtual.c b/dlls/ntdll/unix/virtual.c
-index 0346d0d9753..06796f441ae 100644
+index c49c60166c2..086943bdae8 100644
 --- a/dlls/ntdll/unix/virtual.c
 +++ b/dlls/ntdll/unix/virtual.c
-@@ -3695,6 +3695,93 @@ static NTSTATUS get_working_set_ex( HANDLE process, LPCVOID addr,
+@@ -4011,6 +4011,93 @@ static NTSTATUS get_working_set_ex( HANDLE process, LPCVOID addr,
      return STATUS_SUCCESS;
  }
  
@@ -46,7 +73,7 @@ index 0346d0d9753..06796f441ae 100644
 +    if (!status && mapping)
 +    {
 +        status = server_get_unix_name( mapping, &unix_name );
-+        close_handle( mapping );
++        NtClose( mapping );
 +        if (!status)
 +        {
 +            status = wine_unix_to_nt_file_name( &unix_name, &nt_name );
@@ -110,7 +137,7 @@ index 0346d0d9753..06796f441ae 100644
  #define UNIMPLEMENTED_INFO_CLASS(c) \
      case c: \
          FIXME("(process=%p,addr=%p) Unimplemented information class: " #c "\n", process, addr); \
-@@ -3719,8 +3806,10 @@ NTSTATUS WINAPI NtQueryVirtualMemory( HANDLE process, LPCVOID addr,
+@@ -4035,8 +4122,10 @@ NTSTATUS WINAPI NtQueryVirtualMemory( HANDLE process, LPCVOID addr,
          case MemoryWorkingSetExInformation:
              return get_working_set_ex( process, addr, buffer, len, res_len );
  
@@ -150,10 +177,10 @@ index da7524dd60a..bfe14231a9b 100644
      }
  
 diff --git a/server/mapping.c b/server/mapping.c
-index 0941dd87c05..487cd2a6131 100644
+index 07c51c246d6..7f19a7572df 100644
 --- a/server/mapping.c
 +++ b/server/mapping.c
-@@ -1091,6 +1091,35 @@ DECL_HANDLER(unmap_view)
+@@ -1095,6 +1095,35 @@ DECL_HANDLER(unmap_view)
      if (view) free_memory_view( view );
  }
  
@@ -190,10 +217,10 @@ index 0941dd87c05..487cd2a6131 100644
  DECL_HANDLER(get_mapping_committed_range)
  {
 diff --git a/server/protocol.def b/server/protocol.def
-index 632c996dc0e..223b45db1a8 100644
+index 6416306c0a1..bdc1eeeb5c3 100644
 --- a/server/protocol.def
 +++ b/server/protocol.def
-@@ -1849,6 +1849,15 @@ enum char_info_mode
+@@ -1853,6 +1853,15 @@ enum char_info_mode
  @END
  
  
@@ -210,5 +237,5 @@ index 632c996dc0e..223b45db1a8 100644
  @REQ(get_mapping_committed_range)
      client_ptr_t base;          /* view base address */
 -- 
-2.26.2
+2.27.0
 

diff --git a/patches/ntdll-NtQueryVirtualMemory/0008-ntdll-Resolve-drive-symlinks-before-returning-sectio.patch b/patches/ntdll-NtQueryVirtualMemory/0008-ntdll-Resolve-drive-symlinks-before-returning-sectio.patch
index 0ef87c87a..8bc31e862 100644
--- a/patches/ntdll-NtQueryVirtualMemory/0008-ntdll-Resolve-drive-symlinks-before-returning-sectio.patch
+++ b/patches/ntdll-NtQueryVirtualMemory/0008-ntdll-Resolve-drive-symlinks-before-returning-sectio.patch
@@ -1,20 +1,20 @@
-From 02ea4a27a1d6598e3d6a1ab5c2a25d5459e5390c Mon Sep 17 00:00:00 2001
+From 01031e9eb282bffce2449891e68eb9efeded1ee9 Mon Sep 17 00:00:00 2001
 From: Sebastian Lackner <sebastian@fds-team.de>
 Date: Sun, 28 May 2017 11:17:26 +0200
 Subject: [PATCH] ntdll: Resolve drive symlinks before returning section name.
 
 ---
- dlls/ntdll/directory.c        |  2 +-
- dlls/ntdll/ntdll_misc.h       |  1 +
- dlls/ntdll/unix/virtual.c     | 37 +++++++++++++++++++++++++++++------
- dlls/psapi/tests/psapi_main.c |  6 +-----
+ dlls/ntdll/unix/file.c         |  2 +-
+ dlls/ntdll/unix/unix_private.h |  1 +
+ dlls/ntdll/unix/virtual.c      | 37 ++++++++++++++++++++++++++++------
+ dlls/psapi/tests/psapi_main.c  |  6 +-----
  4 files changed, 34 insertions(+), 12 deletions(-)
 
-diff --git a/dlls/ntdll/directory.c b/dlls/ntdll/directory.c
-index 453568d641e..12da4316e88 100644
---- a/dlls/ntdll/directory.c
-+++ b/dlls/ntdll/directory.c
-@@ -2798,7 +2798,7 @@ static NTSTATUS nt_to_unix_file_name_internal( const UNICODE_STRING *nameW, ANSI
+diff --git a/dlls/ntdll/unix/file.c b/dlls/ntdll/unix/file.c
+index 551d0450584..65ddf0df4a2 100644
+--- a/dlls/ntdll/unix/file.c
++++ b/dlls/ntdll/unix/file.c
+@@ -3425,7 +3425,7 @@ static NTSTATUS nt_to_unix_file_name_internal( const UNICODE_STRING *nameW, ANSI
  }
  
  /* read the contents of an NT symlink object */
@@ -23,23 +23,23 @@ index 453568d641e..12da4316e88 100644
  {
      OBJECT_ATTRIBUTES attr;
      UNICODE_STRING targetW;
-diff --git a/dlls/ntdll/ntdll_misc.h b/dlls/ntdll/ntdll_misc.h
-index e9a3230e814..750b01bd059 100644
---- a/dlls/ntdll/ntdll_misc.h
-+++ b/dlls/ntdll/ntdll_misc.h
-@@ -175,6 +175,7 @@ extern NTSTATUS nt_to_unix_file_name_attr( const OBJECT_ATTRIBUTES *attr, ANSI_S
-                                            UINT disposition ) DECLSPEC_HIDDEN;
- 
- /* virtual memory */
+diff --git a/dlls/ntdll/unix/unix_private.h b/dlls/ntdll/unix/unix_private.h
+index e14da3ff7ec..5410248e8a7 100644
+--- a/dlls/ntdll/unix/unix_private.h
++++ b/dlls/ntdll/unix/unix_private.h
+@@ -103,6 +103,7 @@ extern void CDECL get_initial_directory( UNICODE_STRING *dir ) DECLSPEC_HIDDEN;
+ extern void CDECL get_initial_console( HANDLE *handle, HANDLE *std_in, HANDLE *std_out, HANDLE *std_err ) DECLSPEC_HIDDEN;
+ extern USHORT * CDECL get_unix_codepage_data(void) DECLSPEC_HIDDEN;
+ extern void CDECL get_locales( WCHAR *sys, WCHAR *user ) DECLSPEC_HIDDEN;
 +extern NTSTATUS read_nt_symlink( HANDLE root, UNICODE_STRING *name, WCHAR *target, size_t length ) DECLSPEC_HIDDEN;
- extern NTSTATUS virtual_map_section( HANDLE handle, PVOID *addr_ptr, unsigned short zero_bits_64, SIZE_T commit_size,
-                                      const LARGE_INTEGER *offset_ptr, SIZE_T *size_ptr, ULONG alloc_type,
-                                      ULONG protect, pe_image_info_t *image_info ) DECLSPEC_HIDDEN;
+ extern NTSTATUS CDECL virtual_map_section( HANDLE handle, PVOID *addr_ptr, unsigned short zero_bits_64, SIZE_T commit_size,
+                                            const LARGE_INTEGER *offset_ptr, SIZE_T *size_ptr, ULONG alloc_type,
+                                            ULONG protect, pe_image_info_t *image_info ) DECLSPEC_HIDDEN;
 diff --git a/dlls/ntdll/unix/virtual.c b/dlls/ntdll/unix/virtual.c
-index 97244822082..15b4697c441 100644
+index 1515963b9c7..5cee0da5d24 100644
 --- a/dlls/ntdll/unix/virtual.c
 +++ b/dlls/ntdll/unix/virtual.c
-@@ -194,6 +194,8 @@ static BYTE **pages_vprot;
+@@ -188,6 +188,8 @@ static BYTE **pages_vprot;
  static BYTE *pages_vprot;
  #endif
  
@@ -48,7 +48,7 @@ index 97244822082..15b4697c441 100644
  static struct file_view *view_block_start, *view_block_end, *next_free_view;
  #ifdef _WIN64
  static const size_t view_block_size = 0x200000;
-@@ -3836,12 +3838,15 @@ static NTSTATUS get_section_name( HANDLE process, LPCVOID addr,
+@@ -4016,12 +4018,15 @@ static NTSTATUS get_section_name( HANDLE process, LPCVOID addr,
                                    MEMORY_SECTION_NAME *info,
                                    SIZE_T len, SIZE_T *res_len )
  {
@@ -65,7 +65,7 @@ index 97244822082..15b4697c441 100644
  
      if (!addr || !info || !res_len) return STATUS_INVALID_PARAMETER;
  
-@@ -3900,14 +3905,34 @@ static NTSTATUS get_section_name( HANDLE process, LPCVOID addr,
+@@ -4080,14 +4085,34 @@ static NTSTATUS get_section_name( HANDLE process, LPCVOID addr,
      }
  
  found:
@@ -151,5 +151,5 @@ index f6a7b69eca0..a8263a2f44b 100644
  
      SetLastError(0xdeadbeef);
 -- 
-2.26.2
+2.27.0
 
diff --git a/patches/ntdll-NtQueryVirtualMemory/definition b/patches/ntdll-NtQueryVirtualMemory/definition
index b33d61eaa..ba2685333 100644
--- a/patches/ntdll-NtQueryVirtualMemory/definition
+++ b/patches/ntdll-NtQueryVirtualMemory/definition
@@ -2,5 +2,3 @@ Fixes: [23999] Implement MemorySectionName class in NtQueryVirtualMemory
 Fixes: [27248] Implement K32GetMappedFileName
 Depends: ntdll-NtDevicePath
 Depends: ntdll-ForceBottomUpAlloc
-# Disable for now, until some other things are moved down to ntdll.so.
-Disabled: true
diff --git a/patches/patchinstall.sh b/patches/patchinstall.sh
index 953e5230b..95d7fad7d 100755
--- a/patches/patchinstall.sh
+++ b/patches/patchinstall.sh
@@ -183,6 +183,7 @@ patch_enable_all ()
 	enable_ntdll_NtAccessCheck="$1"
 	enable_ntdll_NtDevicePath="$1"
 	enable_ntdll_NtQuerySection="$1"
+	enable_ntdll_NtQueryVirtualMemory="$1"
 	enable_ntdll_NtSetLdtEntries="$1"
 	enable_ntdll_Pipe_SpecialCharacters="$1"
 	enable_ntdll_ProcessQuotaLimits="$1"
@@ -640,6 +641,9 @@ patch_enable ()
 		ntdll-NtQuerySection)
 			enable_ntdll_NtQuerySection="$2"
 			;;
+		ntdll-NtQueryVirtualMemory)
+			enable_ntdll_NtQueryVirtualMemory="$2"
+			;;
 		ntdll-NtSetLdtEntries)
 			enable_ntdll_NtSetLdtEntries="$2"
 			;;
@@ -1628,6 +1632,17 @@ if test "$enable_ntdll_SystemCodeIntegrityInformation" -eq 1; then
 	enable_ntdll_SystemExtendedProcessInformation=1
 fi
 
+if test "$enable_ntdll_NtQueryVirtualMemory" -eq 1; then
+	if test "$enable_ntdll_ForceBottomUpAlloc" -gt 1; then
+		abort "Patchset ntdll-ForceBottomUpAlloc disabled, but ntdll-NtQueryVirtualMemory depends on that."
+	fi
+	if test "$enable_ntdll_NtDevicePath" -gt 1; then
+		abort "Patchset ntdll-NtDevicePath disabled, but ntdll-NtQueryVirtualMemory depends on that."
+	fi
+	enable_ntdll_ForceBottomUpAlloc=1
+	enable_ntdll_NtDevicePath=1
+fi
+
 if test "$enable_ntdll_NtDevicePath" -eq 1; then
 	if test "$enable_ntdll_Pipe_SpecialCharacters" -gt 1; then
 		abort "Patchset ntdll-Pipe_SpecialCharacters disabled, but ntdll-NtDevicePath depends on that."
@@ -3813,6 +3828,36 @@ if test "$enable_ntdll_NtQuerySection" -eq 1; then
 	) >> "$patchlist"
 fi
 
+# Patchset ntdll-NtQueryVirtualMemory
+# |
+# | This patchset has the following (direct or indirect) dependencies:
+# |   *	ntdll-ForceBottomUpAlloc, ntdll-Pipe_SpecialCharacters, ntdll-NtDevicePath
+# |
+# | This patchset fixes the following Wine bugs:
+# |   *	[#23999] Implement MemorySectionName class in NtQueryVirtualMemory
+# |   *	[#27248] Implement K32GetMappedFileName
+# |
+# | Modified files:
+# |   *	dlls/kernelbase/debug.c, dlls/ntdll/tests/info.c, dlls/ntdll/unix/file.c, dlls/ntdll/unix/unix_private.h,
+# | 	dlls/ntdll/unix/virtual.c, dlls/psapi/tests/psapi_main.c, server/mapping.c, server/protocol.def
+# |
+if test "$enable_ntdll_NtQueryVirtualMemory" -eq 1; then
+	patch_apply ntdll-NtQueryVirtualMemory/0003-ntdll-Implement-NtQueryVirtualMemory-MemorySectionNa.patch
+	patch_apply ntdll-NtQueryVirtualMemory/0004-ntdll-tests-Add-tests-for-NtQueryVirtualMemory-Memor.patch
+	patch_apply ntdll-NtQueryVirtualMemory/0005-ntdll-tests-Add-test-to-ensure-section-name-is-full-.patch
+	patch_apply ntdll-NtQueryVirtualMemory/0006-ntdll-Allow-to-query-section-names-from-other-proces.patch
+	patch_apply ntdll-NtQueryVirtualMemory/0007-kernel32-Implement-K32GetMappedFileName.-v2.patch
+	patch_apply ntdll-NtQueryVirtualMemory/0008-ntdll-Resolve-drive-symlinks-before-returning-sectio.patch
+	(
+		printf '%s\n' '+    { "Dmitry Timoshkov", "ntdll: Implement NtQueryVirtualMemory(MemorySectionName).", 3 },';
+		printf '%s\n' '+    { "Dmitry Timoshkov", "ntdll/tests: Add tests for NtQueryVirtualMemory(MemorySectionName).", 1 },';
+		printf '%s\n' '+    { "Sebastian Lackner", "ntdll/tests: Add test to ensure section name is full path.", 1 },';
+		printf '%s\n' '+    { "Sebastian Lackner", "ntdll: Allow to query section names from other processes.", 2 },';
+		printf '%s\n' '+    { "Dmitry Timoshkov", "kernel32: Implement K32GetMappedFileName.", 2 },';
+		printf '%s\n' '+    { "Sebastian Lackner", "ntdll: Resolve drive symlinks before returning section name.", 1 },';
+	) >> "$patchlist"
+fi
+
 # Patchset ntdll-NtSetLdtEntries
 # |
 # | Modified files:

diff --git a/patches/ntdll-APC_Performance/0001-ntdll-Reuse-old-async-fileio-structures-if-possible.patch b/patches/ntdll-APC_Performance/0001-ntdll-Reuse-old-async-fileio-structures-if-possible.patch
index f50cc4b8d..636c62150 100644
--- a/patches/ntdll-APC_Performance/0001-ntdll-Reuse-old-async-fileio-structures-if-possible.patch
+++ b/patches/ntdll-APC_Performance/0001-ntdll-Reuse-old-async-fileio-structures-if-possible.patch
@@ -1,4 +1,4 @@
-From 2fc74d8b5fd617e4b614e80c2eba9971a2dea00e Mon Sep 17 00:00:00 2001
+From 4a46bc2a1bf83744f8f5ad97594328986edd693e Mon Sep 17 00:00:00 2001
 From: Sebastian Lackner <sebastian@fds-team.de>
 Date: Tue, 3 Mar 2015 03:39:12 +0100
 Subject: [PATCH] ntdll: Reuse old async fileio structures if possible.
@@ -11,10 +11,10 @@ often possible to reuse old fileio structures.
  1 file changed, 18 insertions(+), 6 deletions(-)
 
 diff --git a/dlls/ntdll/unix/file.c b/dlls/ntdll/unix/file.c
-index ca6899b50f5..4c3f3dac465 100644
+index a10c4bf81aa..370dfe95471 100644
 --- a/dlls/ntdll/unix/file.c
 +++ b/dlls/ntdll/unix/file.c
-@@ -4433,6 +4433,7 @@ struct async_fileio
+@@ -4553,6 +4553,7 @@ struct async_fileio
  {
      async_callback_t    *callback; /* must be the first field */
      struct async_fileio *next;
@@ -22,7 +22,7 @@ index ca6899b50f5..4c3f3dac465 100644
      HANDLE               handle;
  };
  
-@@ -4484,18 +4485,29 @@ static void release_fileio( struct async_fileio *io )
+@@ -4604,18 +4605,29 @@ static void release_fileio( struct async_fileio *io )
  static struct async_fileio *alloc_fileio( DWORD size, async_callback_t callback, HANDLE handle )
  {
      /* first free remaining previous fileinfos */
@@ -34,7 +34,7 @@ index ca6899b50f5..4c3f3dac465 100644
 +    while (old_io)
      {
 -        struct async_fileio *next = io->next;
--        RtlFreeHeap( GetProcessHeap(), 0, io );
+-        free( io );
 -        io = next;
 +        if (!io && old_io->size >= size && old_io->size <= max(4096, 4 * size))
 +        {
@@ -45,13 +45,13 @@ index ca6899b50f5..4c3f3dac465 100644
 +        else
 +        {
 +            struct async_fileio *next = old_io->next;
-+            RtlFreeHeap( GetProcessHeap(), 0, old_io );
++            free( old_io );
 +            old_io = next;
 +        }
      }
  
--    if ((io = RtlAllocateHeap( GetProcessHeap(), 0, size )))
-+    if (io || (io = RtlAllocateHeap( GetProcessHeap(), 0, size )))
+-    if ((io = malloc( size )))
++    if (io || (io = malloc( size )))
      {
          io->callback = callback;
 +        io->size     = size;
diff --git a/patches/ntdll-Builtin_Prot/0001-ntdll-Fix-holes-in-ELF-mappings.patch b/patches/ntdll-Builtin_Prot/0001-ntdll-Fix-holes-in-ELF-mappings.patch
index 9c3036cac..315bd86b7 100644
--- a/patches/ntdll-Builtin_Prot/0001-ntdll-Fix-holes-in-ELF-mappings.patch
+++ b/patches/ntdll-Builtin_Prot/0001-ntdll-Fix-holes-in-ELF-mappings.patch
@@ -1,4 +1,4 @@
-From be204ab84d031b7efb223ac7c4962246549c8eb0 Mon Sep 17 00:00:00 2001
+From aa9b48c7e76994f4b93fbc516eee5d39a597f63f Mon Sep 17 00:00:00 2001
 From: =?UTF-8?q?Michael=20M=C3=BCller?= <michael@fds-team.de>
 Date: Thu, 1 Jun 2017 06:04:53 +0200
 Subject: [PATCH] ntdll: Fix holes in ELF mappings. (v2)
@@ -10,10 +10,10 @@ Based on a patch by Andrew Wesie.
  2 files changed, 36 insertions(+), 1 deletion(-)
 
 diff --git a/dlls/ntdll/unix/virtual.c b/dlls/ntdll/unix/virtual.c
-index e824b9ced25..90143f5c07b 100644
+index 66bcde8aff1..734dd130817 100644
 --- a/dlls/ntdll/unix/virtual.c
 +++ b/dlls/ntdll/unix/virtual.c
-@@ -966,6 +966,16 @@ static inline BOOL is_write_watch_range( const void *addr, size_t size )
+@@ -959,6 +959,16 @@ static inline BOOL is_write_watch_range( const void *addr, size_t size )
  }
  
  
@@ -30,7 +30,7 @@ index e824b9ced25..90143f5c07b 100644
  /***********************************************************************
   *           find_view_range
   *
-@@ -2812,6 +2822,19 @@ NTSTATUS CDECL virtual_handle_fault( LPCVOID addr, DWORD err, BOOL on_signal_sta
+@@ -2920,6 +2930,19 @@ NTSTATUS virtual_handle_fault( LPCVOID addr, DWORD err, BOOL on_signal_stack )
          /* ignore fault if page is writable now */
          if (get_unix_prot( get_page_vprot( page ) ) & PROT_WRITE) ret = STATUS_SUCCESS;
      }
@@ -47,7 +47,7 @@ index e824b9ced25..90143f5c07b 100644
 +        else
 +            set_page_vprot_bits( page, page_size, 0, VPROT_READ | VPROT_EXEC );
 +    }
-     server_leave_uninterrupted_section( &csVirtual, &sigset );
+     server_leave_uninterrupted_section( &virtual_mutex, &sigset );
      return ret;
  }
 diff --git a/dlls/psapi/tests/psapi_main.c b/dlls/psapi/tests/psapi_main.c
@@ -86,5 +86,5 @@ index eb52fc690cf..178f5605a23 100644
  
  static BOOL check_with_margin(SIZE_T perf, SIZE_T sysperf, int margin)
 -- 
-2.26.2
+2.27.0
 
diff --git a/patches/ntdll-DOS_Attributes/0004-ntdll-Implement-storing-DOS-attributes-in-NtCreateFi.patch b/patches/ntdll-DOS_Attributes/0004-ntdll-Implement-storing-DOS-attributes-in-NtCreateFi.patch
index e78705b39..7fdc0af23 100644
--- a/patches/ntdll-DOS_Attributes/0004-ntdll-Implement-storing-DOS-attributes-in-NtCreateFi.patch
+++ b/patches/ntdll-DOS_Attributes/0004-ntdll-Implement-storing-DOS-attributes-in-NtCreateFi.patch
@@ -1,14 +1,14 @@
-From 769a1043bb174557b600c9ce38765846a3126e7f Mon Sep 17 00:00:00 2001
+From 7fbcb02d4e88819dead5b944c3b4676fb4c3bc35 Mon Sep 17 00:00:00 2001
 From: "Erich E. Hoover" <erich.e.hoover@gmail.com>
 Date: Wed, 20 Aug 2014 15:28:00 -0600
 Subject: [PATCH] ntdll: Implement storing DOS attributes in NtCreateFile.
 
 ---
- dlls/ntdll/tests/directory.c | 24 ++++++------
- dlls/ntdll/unix/file.c       | 74 +++++++++++++++++++++++-------------
+ dlls/ntdll/tests/directory.c | 24 +++++------
+ dlls/ntdll/unix/file.c       | 78 +++++++++++++++++++++++-------------
  include/wine/port.h          |  2 +
- libs/port/xattr.c            | 20 ++++++++++
- 4 files changed, 81 insertions(+), 39 deletions(-)
+ libs/port/xattr.c            | 20 +++++++++
+ 4 files changed, 83 insertions(+), 41 deletions(-)
 
 diff --git a/dlls/ntdll/tests/directory.c b/dlls/ntdll/tests/directory.c
 index 248ed99ab20..e0f4debc624 100644
@@ -60,10 +60,10 @@ index 248ed99ab20..e0f4debc624 100644
          }
          testfiles[i].nfound++;
 diff --git a/dlls/ntdll/unix/file.c b/dlls/ntdll/unix/file.c
-index 66ce2eb5fe4..0546039cc47 100644
+index e3477f5cb5b..73bacabb4f3 100644
 --- a/dlls/ntdll/unix/file.c
 +++ b/dlls/ntdll/unix/file.c
-@@ -3004,6 +3004,20 @@ void CDECL set_show_dot_files( BOOL enable )
+@@ -3572,6 +3572,20 @@ void CDECL set_show_dot_files( BOOL enable )
      show_dot_files = enable;
  }
  
@@ -84,7 +84,7 @@ index 66ce2eb5fe4..0546039cc47 100644
  
  /******************************************************************************
   *              NtCreateFile   (NTDLL.@)
-@@ -3013,6 +3027,10 @@ NTSTATUS WINAPI NtCreateFile( HANDLE *handle, ACCESS_MASK access, OBJECT_ATTRIBU
+@@ -3581,6 +3595,10 @@ NTSTATUS WINAPI NtCreateFile( HANDLE *handle, ACCESS_MASK access, OBJECT_ATTRIBU
                                ULONG attributes, ULONG sharing, ULONG disposition,
                                ULONG options, void *ea_buffer, ULONG ea_length )
  {
@@ -95,7 +95,7 @@ index 66ce2eb5fe4..0546039cc47 100644
      ANSI_STRING unix_name;
      BOOL created = FALSE;
  
-@@ -3055,36 +3073,34 @@ NTSTATUS WINAPI NtCreateFile( HANDLE *handle, ACCESS_MASK access, OBJECT_ATTRIBU
+@@ -3623,36 +3641,34 @@ NTSTATUS WINAPI NtCreateFile( HANDLE *handle, ACCESS_MASK access, OBJECT_ATTRIBU
          io->u.Status = STATUS_SUCCESS;
      }
  
@@ -106,10 +106,7 @@ index 66ce2eb5fe4..0546039cc47 100644
 -        OBJECT_ATTRIBUTES unix_attr = *attr;
 -        data_size_t len;
 -        struct object_attributes *objattr;
-+        WARN("%s not found (%x)\n", debugstr_us(attr->ObjectName), io->u.Status );
-+        return io->u.Status;
-+    }
- 
+-
 -        unix_attr.ObjectName = &empty_string;  /* we send the unix name instead */
 -        if ((io->u.Status = alloc_object_attributes( &unix_attr, &objattr, &len )))
 -        {
@@ -129,15 +126,20 @@ index 66ce2eb5fe4..0546039cc47 100644
 -            *handle = wine_server_ptr_handle( reply->handle );
 -        }
 -        SERVER_END_REQ;
--        RtlFreeHeap( GetProcessHeap(), 0, objattr );
+-        free( objattr );
+-        RtlFreeAnsiString( &unix_name );
++        WARN("%s not found (%x)\n", debugstr_us(attr->ObjectName), io->u.Status );
++        return io->u.Status;
+     }
+-    else WARN( "%s not found (%x)\n", debugstr_us(attr->ObjectName), io->u.Status );
++
 +    unix_attr = *attr;
 +    unix_attr.ObjectName = &empty_string;  /* we send the unix name instead */
 +    if ((io->u.Status = alloc_object_attributes( &unix_attr, &objattr, &len )))
 +    {
-         RtlFreeAnsiString( &unix_name );
++        RtlFreeAnsiString( &unix_name );
 +        return io->u.Status;
-     }
--    else WARN( "%s not found (%x)\n", debugstr_us(attr->ObjectName), io->u.Status );
++    }
 +
 +    SERVER_START_REQ( create_file )
 +    {
@@ -152,11 +154,11 @@ index 66ce2eb5fe4..0546039cc47 100644
 +        *handle = wine_server_ptr_handle( reply->handle );
 +    }
 +    SERVER_END_REQ;
-+    RtlFreeHeap( GetProcessHeap(), 0, objattr );
++    free( objattr );
  
      if (io->u.Status == STATUS_SUCCESS)
      {
-@@ -3106,6 +3122,11 @@ NTSTATUS WINAPI NtCreateFile( HANDLE *handle, ACCESS_MASK access, OBJECT_ATTRIBU
+@@ -3674,6 +3690,11 @@ NTSTATUS WINAPI NtCreateFile( HANDLE *handle, ACCESS_MASK access, OBJECT_ATTRIBU
              io->Information = FILE_OVERWRITTEN;
              break;
          }
@@ -168,7 +170,7 @@ index 66ce2eb5fe4..0546039cc47 100644
      }
      else if (io->u.Status == STATUS_TOO_MANY_OPENED_FILES)
      {
-@@ -3113,6 +3134,7 @@ NTSTATUS WINAPI NtCreateFile( HANDLE *handle, ACCESS_MASK access, OBJECT_ATTRIBU
+@@ -3681,6 +3702,7 @@ NTSTATUS WINAPI NtCreateFile( HANDLE *handle, ACCESS_MASK access, OBJECT_ATTRIBU
          if (!once++) ERR_(winediag)( "Too many open files, ulimit -n probably needs to be increased\n" );
      }
  
@@ -177,10 +179,10 @@ index 66ce2eb5fe4..0546039cc47 100644
  }
  
 diff --git a/include/wine/port.h b/include/wine/port.h
-index f90396727d6..7d2c7388707 100644
+index e0249b4c59f..930efeeea1f 100644
 --- a/include/wine/port.h
 +++ b/include/wine/port.h
-@@ -371,6 +371,8 @@ extern int xattr_fget( int filedes, const char *name, void *value, size_t size )
+@@ -362,6 +362,8 @@ extern int xattr_fget( int filedes, const char *name, void *value, size_t size )
  extern int xattr_fremove( int filedes, const char *name );
  extern int xattr_fset( int filedes, const char *name, void *value, size_t size );
  extern int xattr_get( const char *path, const char *name, void *value, size_t size );
diff --git a/patches/ntdll-Dealloc_Thread_Stack/0001-ntdll-Do-not-allow-to-allocate-thread-stack-for-curr.patch b/patches/ntdll-Dealloc_Thread_Stack/0001-ntdll-Do-not-allow-to-allocate-thread-stack-for-curr.patch
index d0fb38b3e..f7e1fc010 100644
--- a/patches/ntdll-Dealloc_Thread_Stack/0001-ntdll-Do-not-allow-to-allocate-thread-stack-for-curr.patch
+++ b/patches/ntdll-Dealloc_Thread_Stack/0001-ntdll-Do-not-allow-to-allocate-thread-stack-for-curr.patch
@@ -1,4 +1,4 @@
-From fcb28ef6b7e083e5b5d0992efc60a9bef6f08708 Mon Sep 17 00:00:00 2001
+From 299205b6bbf5156bad5514dd52cd1bcd67dc4f14 Mon Sep 17 00:00:00 2001
 From: Sebastian Lackner <sebastian@fds-team.de>
 Date: Fri, 21 Aug 2015 06:39:47 +0800
 Subject: [PATCH] ntdll: Do not allow to deallocate thread stack for current
@@ -10,10 +10,10 @@ Subject: [PATCH] ntdll: Do not allow to deallocate thread stack for current
  2 files changed, 13 insertions(+)
 
 diff --git a/dlls/ntdll/unix/unix_private.h b/dlls/ntdll/unix/unix_private.h
-index 71d6ee7d4f2..33326deea20 100644
+index b509994f7ab..2c7cf2c9b07 100644
 --- a/dlls/ntdll/unix/unix_private.h
 +++ b/dlls/ntdll/unix/unix_private.h
-@@ -56,6 +56,7 @@ struct ntdll_thread_data
+@@ -57,6 +57,7 @@ struct ntdll_thread_data
      int                wait_fd[2];    /* fd for sleeping server requests */
      BOOL               wow64_redir;   /* Wow64 filesystem redirection flag */
      pthread_t          pthread_id;    /* pthread thread id */
@@ -22,19 +22,19 @@ index 71d6ee7d4f2..33326deea20 100644
  };
  
 diff --git a/dlls/ntdll/unix/virtual.c b/dlls/ntdll/unix/virtual.c
-index d998966b5fa..086eaa0b34e 100644
+index 66bcde8aff1..a08ef1ce140 100644
 --- a/dlls/ntdll/unix/virtual.c
 +++ b/dlls/ntdll/unix/virtual.c
-@@ -2781,6 +2781,8 @@ NTSTATUS CDECL virtual_alloc_thread_stack( INITIAL_TEB *stack, SIZE_T reserve_si
+@@ -2819,6 +2819,8 @@ NTSTATUS CDECL virtual_alloc_thread_stack( INITIAL_TEB *stack, SIZE_T reserve_si
      stack->DeallocationStack = view->base;
      stack->StackBase = (char *)view->base + view->size;
      stack->StackLimit = (char *)view->base + 2 * page_size;
 +    ((struct ntdll_thread_data *)&NtCurrentTeb()->GdiTebBatch)->pthread_stack = view->base;
 +
  done:
-     server_leave_uninterrupted_section( &csVirtual, &sigset );
+     server_leave_uninterrupted_section( &virtual_mutex, &sigset );
      return status;
-@@ -3530,6 +3532,16 @@ NTSTATUS WINAPI NtFreeVirtualMemory( HANDLE process, PVOID *addr_ptr, SIZE_T *si
+@@ -3590,6 +3592,16 @@ NTSTATUS WINAPI NtFreeVirtualMemory( HANDLE process, PVOID *addr_ptr, SIZE_T *si
          /* Free the pages */
  
          if (size || (base != view->base)) status = STATUS_INVALID_PARAMETER;
diff --git a/patches/ntdll-ForceBottomUpAlloc/0005-ntdll-Use-free-area-list-for-virtual-memory-allocati.patch b/patches/ntdll-ForceBottomUpAlloc/0005-ntdll-Use-free-area-list-for-virtual-memory-allocati.patch
index 19d09a62d..9eb2f3f14 100644
--- a/patches/ntdll-ForceBottomUpAlloc/0005-ntdll-Use-free-area-list-for-virtual-memory-allocati.patch
+++ b/patches/ntdll-ForceBottomUpAlloc/0005-ntdll-Use-free-area-list-for-virtual-memory-allocati.patch
@@ -1,4 +1,4 @@
-From 93e4ba286e3eee3cb846d05014cea4e92bee6c1b Mon Sep 17 00:00:00 2001
+From 04a45064d81f63de64effc2748b70cf15bba5f5d Mon Sep 17 00:00:00 2001
 From: Paul Gofman <pgofman@codeweavers.com>
 Date: Tue, 14 Jan 2020 21:42:21 +0300
 Subject: [PATCH] ntdll: Use free area list for virtual memory allocation.
@@ -8,10 +8,10 @@ Subject: [PATCH] ntdll: Use free area list for virtual memory allocation.
  1 file changed, 230 insertions(+), 112 deletions(-)
 
 diff --git a/dlls/ntdll/unix/virtual.c b/dlls/ntdll/unix/virtual.c
-index f4dba39cb160..4827a1d785a4 100644
+index 00b29bc5d1d..667401aaa93 100644
 --- a/dlls/ntdll/unix/virtual.c
 +++ b/dlls/ntdll/unix/virtual.c
-@@ -195,7 +195,11 @@ static BYTE *pages_vprot;
+@@ -186,7 +186,11 @@ static BYTE *pages_vprot;
  #endif
  
  static struct file_view *view_block_start, *view_block_end, *next_free_view;
@@ -22,8 +22,8 @@ index f4dba39cb160..4827a1d785a4 100644
 +#endif
  static void *preload_reserve_start;
  static void *preload_reserve_end;
- static BOOL use_locks;
-@@ -546,13 +550,13 @@ static struct range_entry *free_ranges_lower_bound( void *addr )
+ static BOOL force_exec_prot;  /* whether to force PROT_EXEC on all PROT_READ mmaps */
+@@ -521,13 +525,13 @@ static struct range_entry *free_ranges_lower_bound( void *addr )
   *
   * Updates the free_ranges after a new view has been created.
   */
@@ -40,7 +40,7 @@ index f4dba39cb160..4827a1d785a4 100644
      /* free_ranges initial value is such that the view is either inside range or before another one. */
      assert( range != free_ranges_end );
      assert( range->end > view_base || next != free_ranges_end );
-@@ -563,7 +567,7 @@ static void free_ranges_insert_view( struct file_view *view )
+@@ -538,7 +542,7 @@ static void free_ranges_insert_view( struct file_view *view )
          (range->end == view_base && next->base >= view_end))
      {
          /* on Win64, assert that it's correctly aligned so we're not going to be in trouble later */
@@ -49,7 +49,7 @@ index f4dba39cb160..4827a1d785a4 100644
          WARN( "range %p - %p is already mapped\n", view_base, view_end );
          return;
      }
-@@ -603,6 +607,12 @@ static void free_ranges_insert_view( struct file_view *view )
+@@ -578,6 +582,12 @@ static void free_ranges_insert_view( struct file_view *view )
      }
  }
  
@@ -62,7 +62,7 @@ index f4dba39cb160..4827a1d785a4 100644
  
  /***********************************************************************
   *           free_ranges_remove_view
-@@ -633,6 +643,7 @@ static void free_ranges_remove_view( struct file_view *view )
+@@ -608,6 +618,7 @@ static void free_ranges_remove_view( struct file_view *view )
          return;
      }
  #endif
@@ -70,7 +70,7 @@ index f4dba39cb160..4827a1d785a4 100644
  
      /* free_ranges initial value is such that the view is either inside range or before another one. */
      assert( range != free_ranges_end );
-@@ -1008,44 +1019,6 @@ static struct file_view *find_view_range( const void *addr, size_t size )
+@@ -954,44 +965,6 @@ static struct file_view *find_view_range( const void *addr, size_t size )
  }
  
  
@@ -78,7 +78,7 @@ index f4dba39cb160..4827a1d785a4 100644
 - *           find_view_inside_range
 - *
 - * Find first (resp. last, if top_down) view inside a range.
-- * The csVirtual section must be held by caller.
+- * virtual_mutex must be held by caller.
 - */
 -static struct wine_rb_entry *find_view_inside_range( void **base_ptr, void **end_ptr, int top_down )
 -{
@@ -115,7 +115,7 @@ index f4dba39cb160..4827a1d785a4 100644
  /***********************************************************************
   *           try_map_free_area
   *
-@@ -1089,65 +1062,11 @@ static void* try_map_free_area( void *base, void *end, ptrdiff_t step,
+@@ -1035,65 +1008,11 @@ static void* try_map_free_area( void *base, void *end, ptrdiff_t step,
      return NULL;
  }
  
@@ -124,7 +124,7 @@ index f4dba39cb160..4827a1d785a4 100644
 - *           map_free_area
 - *
 - * Find a free area between views inside the specified range and map it.
-- * The csVirtual section must be held by caller.
+- * virtual_mutex must be held by caller.
 - */
 -static void *map_free_area( void *base, void *end, size_t size, int top_down, int unix_prot )
 -{
@@ -176,12 +176,12 @@ index f4dba39cb160..4827a1d785a4 100644
   *           find_reserved_free_area
   *
   * Find a free area between views inside the specified range.
-  * The csVirtual section must be held by caller.
+  * virtual_mutex must be held by caller.
 - * The range must be inside the preloader reserved range.
   */
  static void *find_reserved_free_area( void *base, void *end, size_t size, int top_down )
  {
-@@ -1361,8 +1280,7 @@ static void delete_view( struct file_view *view ) /* [in] View */
+@@ -1307,8 +1226,7 @@ static void delete_view( struct file_view *view ) /* [in] View */
  {
      if (!(view->protect & VPROT_SYSTEM)) unmap_area( view->base, view->size );
      set_page_vprot( view->base, view->size, 0 );
@@ -191,7 +191,7 @@ index f4dba39cb160..4827a1d785a4 100644
      wine_rb_remove( &views_tree, &view->entry );
      *(struct file_view **)view = next_free_view;
      next_free_view = view;
-@@ -1410,8 +1328,7 @@ static NTSTATUS create_view( struct file_view **view_ret, void *base, size_t siz
+@@ -1356,8 +1274,7 @@ static NTSTATUS create_view( struct file_view **view_ret, void *base, size_t siz
      set_page_vprot( base, size, vprot );
  
      wine_rb_put( &views_tree, view->base, &view->entry );
@@ -201,7 +201,7 @@ index f4dba39cb160..4827a1d785a4 100644
  
      *view_ret = view;
  
-@@ -1656,6 +1573,7 @@ struct alloc_area
+@@ -1589,6 +1506,7 @@ struct alloc_area
      int    top_down;
      void  *limit;
      void  *result;
@@ -209,7 +209,7 @@ index f4dba39cb160..4827a1d785a4 100644
  };
  
  /***********************************************************************
-@@ -1697,6 +1615,210 @@ static int CDECL alloc_reserved_area_callback( void *start, SIZE_T size, void *a
+@@ -1630,6 +1548,210 @@ static int CDECL alloc_reserved_area_callback( void *start, SIZE_T size, void *a
      return 0;
  }
  
@@ -420,7 +420,7 @@ index f4dba39cb160..4827a1d785a4 100644
  /***********************************************************************
   *           map_fixed_area
   *
-@@ -1782,11 +1904,15 @@ static NTSTATUS map_view( struct file_view **view_ret, void *base, size_t size,
+@@ -1715,11 +1837,15 @@ static NTSTATUS map_view( struct file_view **view_ret, void *base, size_t size,
          alloc.size = size;
          alloc.top_down = top_down;
          alloc.limit = (void*)(get_zero_bits_64_mask( zero_bits_64 ) & (UINT_PTR)user_space_limit);
@@ -439,7 +439,7 @@ index f4dba39cb160..4827a1d785a4 100644
          }
  
          if (mmap_enum_reserved_areas( alloc_reserved_area_callback, &alloc, top_down ))
-@@ -1798,15 +1924,6 @@ static NTSTATUS map_view( struct file_view **view_ret, void *base, size_t size,
+@@ -1731,15 +1857,6 @@ static NTSTATUS map_view( struct file_view **view_ret, void *base, size_t size,
              goto done;
          }
  
@@ -455,7 +455,7 @@ index f4dba39cb160..4827a1d785a4 100644
          view_size = size + granularity_mask + 1;
  
          for (;;)
-@@ -2500,6 +2617,7 @@ void virtual_init(void)
+@@ -2392,6 +2509,7 @@ void virtual_init(void)
              if (preload_reserve_start)
                  address_space_start = min( address_space_start, preload_reserve_start );
          }
@@ -464,5 +464,5 @@ index f4dba39cb160..4827a1d785a4 100644
  
      size = ROUND_SIZE( 0, sizeof(TEB) ) + max( MINSIGSTKSZ, 8192 );
 -- 
-2.26.2
+2.27.0
 
diff --git a/patches/ntdll-ForceBottomUpAlloc/0006-ntdll-Permanently-exclude-natively-mapped-areas-from.patch b/patches/ntdll-ForceBottomUpAlloc/0006-ntdll-Permanently-exclude-natively-mapped-areas-from.patch
index cc9507c9f..d173bb9e8 100644
--- a/patches/ntdll-ForceBottomUpAlloc/0006-ntdll-Permanently-exclude-natively-mapped-areas-from.patch
+++ b/patches/ntdll-ForceBottomUpAlloc/0006-ntdll-Permanently-exclude-natively-mapped-areas-from.patch
@@ -1,4 +1,4 @@
-From 957fc1577fb1b1f3184cb9d7710f7e9a2afebdb1 Mon Sep 17 00:00:00 2001
+From eda2aae6a4845e3b0f5e4edb805fb4add4316f17 Mon Sep 17 00:00:00 2001
 From: Paul Gofman <pgofman@codeweavers.com>
 Date: Tue, 2 Jun 2020 21:06:33 +0300
 Subject: [PATCH] ntdll: Permanently exclude natively mapped areas from free
@@ -9,20 +9,20 @@ Subject: [PATCH] ntdll: Permanently exclude natively mapped areas from free
  1 file changed, 25 insertions(+)
 
 diff --git a/dlls/ntdll/unix/virtual.c b/dlls/ntdll/unix/virtual.c
-index 4827a1d785a4..ef5c5dafe8fb 100644
+index 667401aaa93..c49c60166c2 100644
 --- a/dlls/ntdll/unix/virtual.c
 +++ b/dlls/ntdll/unix/virtual.c
 @@ -124,6 +124,9 @@ static const BYTE VIRTUAL_Win32Flags[16] =
- 
  static struct wine_rb_tree views_tree;
+ static pthread_mutex_t virtual_mutex;
  
 +static void *last_already_mapped;
 +static size_t last_already_mapped_size;
 +
- static RTL_CRITICAL_SECTION csVirtual;
- static RTL_CRITICAL_SECTION_DEBUG critsect_debug =
- {
-@@ -1051,6 +1054,13 @@ static void* try_map_free_area( void *base, void *end, ptrdiff_t step,
+ static const BOOL is_win64 = (sizeof(void *) > sizeof(int));
+ static const UINT page_shift = 12;
+ static const UINT_PTR page_mask = 0xfff;
+@@ -997,6 +1000,13 @@ static void* try_map_free_area( void *base, void *end, ptrdiff_t step,
          if (ptr != (void *)-1)
              munmap( ptr, size );
  
@@ -36,7 +36,7 @@ index 4827a1d785a4..ef5c5dafe8fb 100644
          if ((step > 0 && (char *)end - (char *)start < step) ||
              (step < 0 && (char *)start - (char *)base < -step) ||
              step == 0)
-@@ -1908,9 +1918,24 @@ static NTSTATUS map_view( struct file_view **view_ret, void *base, size_t size,
+@@ -1841,9 +1851,24 @@ static NTSTATUS map_view( struct file_view **view_ret, void *base, size_t size,
  
          if (is_win64 || zero_bits_64)
          {
@@ -62,5 +62,5 @@ index 4827a1d785a4..ef5c5dafe8fb 100644
              goto done;
          }
 -- 
-2.26.2
+2.27.0
 
diff --git a/patches/ntdll-NtSetLdtEntries/0002-libs-wine-Allow-to-modify-reserved-LDT-entries.patch b/patches/ntdll-NtSetLdtEntries/0002-libs-wine-Allow-to-modify-reserved-LDT-entries.patch
index 1b87d3de8..1be49d6d0 100644
--- a/patches/ntdll-NtSetLdtEntries/0002-libs-wine-Allow-to-modify-reserved-LDT-entries.patch
+++ b/patches/ntdll-NtSetLdtEntries/0002-libs-wine-Allow-to-modify-reserved-LDT-entries.patch
@@ -1,4 +1,4 @@
-From f4d2bffd85329aed25b1add735fafd4efa69e7e3 Mon Sep 17 00:00:00 2001
+From 13b77a54bad4d9b390d2e31f70d8f130eab48635 Mon Sep 17 00:00:00 2001
 From: Dmitry Timoshkov <dmitry@baikal.ru>
 Date: Thu, 28 Apr 2016 17:01:16 +0200
 Subject: [PATCH] libs/wine: Allow to modify reserved LDT entries.
@@ -22,7 +22,7 @@ fails.
  3 files changed, 1 insertion(+), 9 deletions(-)
 
 diff --git a/dlls/kernel32/tests/thread.c b/dlls/kernel32/tests/thread.c
-index 2c2a0fda843..dae3d8d97d7 100644
+index a76d74cb698..881db6d6513 100644
 --- a/dlls/kernel32/tests/thread.c
 +++ b/dlls/kernel32/tests/thread.c
 @@ -1341,16 +1341,12 @@ static void test_NtSetLdtEntries(void)
@@ -43,17 +43,17 @@ index 2c2a0fda843..dae3d8d97d7 100644
      }
  }
 diff --git a/dlls/ntdll/unix/signal_i386.c b/dlls/ntdll/unix/signal_i386.c
-index a52490a096b..7b04be577ab 100644
+index 30f1aee4d62..0ab09c1b4df 100644
 --- a/dlls/ntdll/unix/signal_i386.c
 +++ b/dlls/ntdll/unix/signal_i386.c
-@@ -502,8 +502,6 @@ NTSTATUS WINAPI NtSetLdtEntries( ULONG sel1, LDT_ENTRY entry1, ULONG sel2, LDT_E
+@@ -2098,8 +2098,6 @@ NTSTATUS WINAPI NtSetLdtEntries( ULONG sel1, LDT_ENTRY entry1, ULONG sel2, LDT_E
      sigset_t sigset;
  
      if (sel1 >> 16 || sel2 >> 16) return STATUS_INVALID_LDT_DESCRIPTOR;
 -    if (sel1 && (sel1 >> 3) < first_ldt_entry) return STATUS_INVALID_LDT_DESCRIPTOR;
 -    if (sel2 && (sel2 >> 3) < first_ldt_entry) return STATUS_INVALID_LDT_DESCRIPTOR;
  
-     server_enter_uninterrupted_section( &ldt_section, &sigset );
+     server_enter_uninterrupted_section( &ldt_mutex, &sigset );
      if (sel1) ldt_set_entry( sel1, entry1 );
 diff --git a/libs/wine/ldt.c b/libs/wine/ldt.c
 index 18b0b9be9bf..30d9b945f73 100644
@@ -78,5 +78,5 @@ index 18b0b9be9bf..30d9b945f73 100644
      return ret;
  }
 -- 
-2.26.2
+2.27.0
 
diff --git a/patches/ntdll-WRITECOPY/0004-ntdll-Properly-handle-PAGE_WRITECOPY-protection.-try.patch b/patches/ntdll-WRITECOPY/0004-ntdll-Properly-handle-PAGE_WRITECOPY-protection.-try.patch
index 6c4b17def..19150af8d 100644
--- a/patches/ntdll-WRITECOPY/0004-ntdll-Properly-handle-PAGE_WRITECOPY-protection.-try.patch
+++ b/patches/ntdll-WRITECOPY/0004-ntdll-Properly-handle-PAGE_WRITECOPY-protection.-try.patch
@@ -1,4 +1,4 @@
-From f5019b4f92b14ef22e7e96a38442f7f864488b10 Mon Sep 17 00:00:00 2001
+From d85f01d0f447026a9cb266cd85934f6f0874ef75 Mon Sep 17 00:00:00 2001
 From: =?UTF-8?q?Michael=20M=C3=BCller?= <michael@fds-team.de>
 Date: Sat, 4 Oct 2014 03:22:09 +0200
 Subject: [PATCH] ntdll: Properly handle PAGE_WRITECOPY protection. (try 5)
@@ -9,10 +9,10 @@ For now, only enable it when a special environment variable is set.
  1 file changed, 39 insertions(+), 7 deletions(-)
 
 diff --git a/dlls/ntdll/unix/virtual.c b/dlls/ntdll/unix/virtual.c
-index 0346d0d9753..5a8ba8bae2a 100644
+index 90dfb62eed1..b059261b3c0 100644
 --- a/dlls/ntdll/unix/virtual.c
 +++ b/dlls/ntdll/unix/virtual.c
-@@ -498,6 +498,21 @@ int CDECL mmap_enum_reserved_areas( int (CDECL *enum_func)(void *base, SIZE_T si
+@@ -491,6 +491,21 @@ int CDECL mmap_enum_reserved_areas( int (CDECL *enum_func)(void *base, SIZE_T si
      return ret;
  }
  
@@ -34,7 +34,7 @@ index 0346d0d9753..5a8ba8bae2a 100644
  
  /***********************************************************************
   *           free_ranges_lower_bound
-@@ -799,8 +814,19 @@ static int get_unix_prot( BYTE vprot )
+@@ -792,8 +807,19 @@ static int get_unix_prot( BYTE vprot )
      {
          if (vprot & VPROT_READ) prot |= PROT_READ;
          if (vprot & VPROT_WRITE) prot |= PROT_WRITE | PROT_READ;
@@ -55,7 +55,7 @@ index 0346d0d9753..5a8ba8bae2a 100644
          if (vprot & VPROT_WRITEWATCH) prot &= ~PROT_WRITE;
      }
      if (!prot) prot = PROT_NONE;
-@@ -1539,7 +1565,7 @@ static void update_write_watches( void *base, size_t size, size_t accessed_size
+@@ -1532,7 +1558,7 @@ static void update_write_watches( void *base, size_t size, size_t accessed_size
  {
      TRACE( "updating watch %p-%p-%p\n", base, (char *)base + accessed_size, (char *)base + size );
      /* clear write watch flag on accessed pages */
@@ -64,7 +64,7 @@ index 0346d0d9753..5a8ba8bae2a 100644
      /* restore page protections on the entire range */
      mprotect_range( base, size, 0, 0 );
  }
-@@ -2746,12 +2772,13 @@ NTSTATUS CDECL virtual_handle_fault( LPCVOID addr, DWORD err, BOOL on_signal_sta
+@@ -2854,12 +2880,13 @@ NTSTATUS virtual_handle_fault( LPCVOID addr, DWORD err, BOOL on_signal_stack )
              set_page_vprot_bits( page, page_size, 0, VPROT_WRITEWATCH );
              mprotect_range( page, page_size, 0, 0 );
          }
@@ -80,9 +80,9 @@ index 0346d0d9753..5a8ba8bae2a 100644
 +        /* ignore fault if page is writable now */
 +        if (get_unix_prot( get_page_vprot( page ) ) & PROT_WRITE) ret = STATUS_SUCCESS;
      }
-     server_leave_uninterrupted_section( &csVirtual, &sigset );
+     server_leave_uninterrupted_section( &virtual_mutex, &sigset );
      return ret;
-@@ -2773,11 +2800,16 @@ static NTSTATUS check_write_access( void *base, size_t size, BOOL *has_write_wat
+@@ -2881,11 +2908,16 @@ static NTSTATUS check_write_access( void *base, size_t size, BOOL *has_write_wat
      {
          BYTE vprot = get_page_vprot( addr + i );
          if (vprot & VPROT_WRITEWATCH) *has_write_watch = TRUE;
@@ -101,5 +101,5 @@ index 0346d0d9753..5a8ba8bae2a 100644
  }
  
 -- 
-2.26.2
+2.27.0
 
diff --git a/patches/ntdll-WRITECOPY/0005-ntdll-Track-if-a-WRITECOPY-page-has-been-modified.patch b/patches/ntdll-WRITECOPY/0005-ntdll-Track-if-a-WRITECOPY-page-has-been-modified.patch
index 4e32ba6f8..43a37ee54 100644
--- a/patches/ntdll-WRITECOPY/0005-ntdll-Track-if-a-WRITECOPY-page-has-been-modified.patch
+++ b/patches/ntdll-WRITECOPY/0005-ntdll-Track-if-a-WRITECOPY-page-has-been-modified.patch
@@ -1,4 +1,4 @@
-From 6836700fb6d9e0221de770c8b020822b6f4c9b55 Mon Sep 17 00:00:00 2001
+From f59e093e93d4ed55111489186ae73f8f3d7ee632 Mon Sep 17 00:00:00 2001
 From: Andrew Wesie <awesie@gmail.com>
 Date: Fri, 24 Apr 2020 14:55:14 -0500
 Subject: [PATCH] ntdll: Track if a WRITECOPY page has been modified.
@@ -12,7 +12,7 @@ Signed-off-by: Andrew Wesie <awesie@gmail.com>
  1 file changed, 19 insertions(+), 6 deletions(-)
 
 diff --git a/dlls/ntdll/unix/virtual.c b/dlls/ntdll/unix/virtual.c
-index 5a8ba8bae2a..c81104bd266 100644
+index b059261b3c0..0a6d7691575 100644
 --- a/dlls/ntdll/unix/virtual.c
 +++ b/dlls/ntdll/unix/virtual.c
 @@ -97,6 +97,7 @@ struct file_view
@@ -23,7 +23,7 @@ index 5a8ba8bae2a..c81104bd266 100644
  /* per-mapping protection flags */
  #define VPROT_SYSTEM     0x0200  /* system view (underlying mmap not under our control) */
  
-@@ -818,7 +819,7 @@ static int get_unix_prot( BYTE vprot )
+@@ -811,7 +812,7 @@ static int get_unix_prot( BYTE vprot )
  #if defined(__i386__)
          if (vprot & VPROT_WRITECOPY)
          {
@@ -32,7 +32,7 @@ index 5a8ba8bae2a..c81104bd266 100644
                  prot = (prot & ~PROT_WRITE) | PROT_READ;
              else
                  prot |= PROT_WRITE | PROT_READ;
-@@ -1397,7 +1398,11 @@ static NTSTATUS create_view( struct file_view **view_ret, void *base, size_t siz
+@@ -1390,7 +1391,11 @@ static NTSTATUS create_view( struct file_view **view_ret, void *base, size_t siz
   */
  static DWORD get_win32_prot( BYTE vprot, unsigned int map_prot )
  {
@@ -45,7 +45,7 @@ index 5a8ba8bae2a..c81104bd266 100644
      if (vprot & VPROT_GUARD) ret |= PAGE_GUARD;
      if (map_prot & SEC_NOCACHE) ret |= PAGE_NOCACHE;
      return ret;
-@@ -1508,7 +1513,7 @@ static BOOL set_vprot( struct file_view *view, void *base, size_t size, BYTE vpr
+@@ -1501,7 +1506,7 @@ static BOOL set_vprot( struct file_view *view, void *base, size_t size, BYTE vpr
      if (view->protect & VPROT_WRITEWATCH)
      {
          /* each page may need different protections depending on write watch flag */
@@ -54,7 +54,7 @@ index 5a8ba8bae2a..c81104bd266 100644
          mprotect_range( base, size, 0, 0 );
          return TRUE;
      }
-@@ -1524,10 +1529,18 @@ static BOOL set_vprot( struct file_view *view, void *base, size_t size, BYTE vpr
+@@ -1517,10 +1522,18 @@ static BOOL set_vprot( struct file_view *view, void *base, size_t size, BYTE vpr
          return TRUE;
      }
  
@@ -74,7 +74,7 @@ index 5a8ba8bae2a..c81104bd266 100644
      return TRUE;
  }
  
-@@ -2774,7 +2787,7 @@ NTSTATUS CDECL virtual_handle_fault( LPCVOID addr, DWORD err, BOOL on_signal_sta
+@@ -2882,7 +2895,7 @@ NTSTATUS virtual_handle_fault( LPCVOID addr, DWORD err, BOOL on_signal_stack )
          }
          if (vprot & VPROT_WRITECOPY)
          {
@@ -83,7 +83,7 @@ index 5a8ba8bae2a..c81104bd266 100644
              mprotect_range( page, page_size, 0, 0 );
          }
          /* ignore fault if page is writable now */
-@@ -3660,7 +3673,7 @@ static NTSTATUS get_basic_memory_info( HANDLE process, LPCVOID addr,
+@@ -3812,7 +3825,7 @@ static NTSTATUS get_basic_memory_info( HANDLE process, LPCVOID addr,
          else if (view->protect & (SEC_FILE | SEC_RESERVE | SEC_COMMIT)) info->Type = MEM_MAPPED;
          else info->Type = MEM_PRIVATE;
          for (ptr = base; ptr < base + range_size; ptr += page_size)
@@ -91,7 +91,7 @@ index 5a8ba8bae2a..c81104bd266 100644
 +            if ((get_page_vprot( ptr ) ^ vprot) & ~(VPROT_WRITEWATCH|VPROT_WRITTEN)) break;
          info->RegionSize = ptr - base;
      }
-     server_leave_uninterrupted_section( &csVirtual, &sigset );
+     server_leave_uninterrupted_section( &virtual_mutex, &sigset );
 -- 
-2.26.2
+2.27.0
 

diff --git a/patches/patchinstall.sh b/patches/patchinstall.sh
index 5f0f44918..01a93c3ba 100755
--- a/patches/patchinstall.sh
+++ b/patches/patchinstall.sh
@@ -223,6 +223,7 @@ patch_enable_all ()
 	enable_server_FileEndOfFileInformation="$1"
 	enable_server_File_Permissions="$1"
 	enable_server_Inherited_ACLs="$1"
+	enable_server_Key_State="$1"
 	enable_server_Object_Types="$1"
 	enable_server_PeekMessage="$1"
 	enable_server_Realtime_Priority="$1"
@@ -759,6 +760,9 @@ patch_enable ()
 		server-Inherited_ACLs)
 			enable_server_Inherited_ACLs="$2"
 			;;
+		server-Key_State)
+			enable_server_Key_State="$2"
+			;;
 		server-Object_Types)
 			enable_server_Object_Types="$2"
 			;;
@@ -4438,6 +4442,24 @@ if test "$enable_server_Inherited_ACLs" -eq 1; then
 	) >> "$patchlist"
 fi
 
+# Patchset server-Key_State
+# |
+# | This patchset fixes the following Wine bugs:
+# |   *	[#31899] Implement locking and synchronization of key states
+# |   *	[#35907] Fix caps lock state issues with multiple processes
+# |
+# | Modified files:
+# |   *	server/queue.c
+# |
+if test "$enable_server_Key_State" -eq 1; then
+	patch_apply server-Key_State/0001-server-Introduce-a-helper-function-to-update-the-thr.patch
+	patch_apply server-Key_State/0002-server-Implement-locking-and-synchronization-of-keys.patch
+	(
+		printf '%s\n' '+    { "Sebastian Lackner", "server: Introduce a helper function to update the thread_input key state.", 1 },';
+		printf '%s\n' '+    { "Sebastian Lackner", "server: Implement locking and synchronization of keystate buffer.", 3 },';
+	) >> "$patchlist"
+fi
+
 # Patchset server-Object_Types
 # |
 # | This patchset has the following (direct or indirect) dependencies:
diff --git a/patches/server-Shared_Memory/0004-user32-Avoid-unnecessary-wineserver-calls-in-PeekMes.patch b/patches/server-Shared_Memory/0004-user32-Avoid-unnecessary-wineserver-calls-in-PeekMes.patch
--- a/patches/server-Shared_Memory/0004-user32-Avoid-unnecessary-wineserver-calls-in-PeekMes.patch
+++ b/patches/server-Shared_Memory/0004-user32-Avoid-unnecessary-wineserver-calls-in-PeekMes.patch
@@ -51,9 +51,9 @@
  
 +#include <pshpack1.h>
 +
- /* on windows the buffer capacity is quite large as well, enough to */
- /* hold up to 10s of 1kHz mouse rawinput events */
- #define RAWINPUT_BUFFER_SIZE (512*1024)
+ /* this is the structure stored in TEB->Win32ClientInfo */
+ /* no attempt is made to keep the layout compatible with the Windows one */
+ struct user_thread_info
 @@ -189,6 +191,7 @@ struct user_thread_info
      DWORD                         GetMessageTimeVal;      /* Value for GetMessageTime */
      DWORD                         GetMessagePosVal;       /* Value for GetMessagePos */
diff --git a/patches/advapi32-Token_Integrity_Level/0006-ntdll-Add-function-to-create-new-tokens-for-elevatio.patch b/patches/advapi32-Token_Integrity_Level/0006-ntdll-Add-function-to-create-new-tokens-for-elevatio.patch
index 542f2a79c..026272eac 100644
--- a/patches/advapi32-Token_Integrity_Level/0006-ntdll-Add-function-to-create-new-tokens-for-elevatio.patch
+++ b/patches/advapi32-Token_Integrity_Level/0006-ntdll-Add-function-to-create-new-tokens-for-elevatio.patch
@@ -1,4 +1,4 @@
-From 478b58d0ff4d333f25b30a506d779fd2395b2b04 Mon Sep 17 00:00:00 2001
+From 2588eb4eb5fe56aca7d229ea42b0eaa3786ff600 Mon Sep 17 00:00:00 2001
 From: =?UTF-8?q?Michael=20M=C3=BCller?= <michael@fds-team.de>
 Date: Sat, 5 Aug 2017 01:45:29 +0200
 Subject: [PATCH] ntdll: Add function to create new tokens for elevation
@@ -14,7 +14,7 @@ Subject: [PATCH] ntdll: Add function to create new tokens for elevation
  6 files changed, 117 insertions(+)
 
 diff --git a/dlls/ntdll/ntdll.spec b/dlls/ntdll/ntdll.spec
-index 9fc12485592..f3e765e25a1 100644
+index e5db07f0a4e..d52f6b76aa4 100644
 --- a/dlls/ntdll/ntdll.spec
 +++ b/dlls/ntdll/ntdll.spec
 @@ -1594,6 +1594,9 @@
@@ -25,13 +25,13 @@ index 9fc12485592..f3e765e25a1 100644
 +@ cdecl __wine_create_default_token(long)
 +
  # Version
- @ cdecl wine_get_version() NTDLL_wine_get_version
- @ cdecl wine_get_build_id() NTDLL_wine_get_build_id
+ @ cdecl wine_get_version()
+ @ cdecl wine_get_build_id()
 diff --git a/dlls/ntdll/ntdll_misc.h b/dlls/ntdll/ntdll_misc.h
-index f36929c5acb..1afda71c3ad 100644
+index 92fcde95a8a..80be882e76d 100644
 --- a/dlls/ntdll/ntdll_misc.h
 +++ b/dlls/ntdll/ntdll_misc.h
-@@ -71,6 +71,9 @@ extern void init_locale( HMODULE module ) DECLSPEC_HIDDEN;
+@@ -69,6 +69,9 @@ extern void init_locale( HMODULE module ) DECLSPEC_HIDDEN;
  extern void init_user_process_params(void) DECLSPEC_HIDDEN;
  extern NTSTATUS restart_process( RTL_USER_PROCESS_PARAMETERS *params, NTSTATUS status ) DECLSPEC_HIDDEN;
  
@@ -42,10 +42,10 @@ index f36929c5acb..1afda71c3ad 100644
  extern BOOL is_wow64 DECLSPEC_HIDDEN;
  extern NTSTATUS alloc_object_attributes( const OBJECT_ATTRIBUTES *attr, struct object_attributes **ret,
 diff --git a/dlls/ntdll/process.c b/dlls/ntdll/process.c
-index b1cc307d2ae..2e5fee216ef 100644
+index 992721d133f..24cb8f53de2 100644
 --- a/dlls/ntdll/process.c
 +++ b/dlls/ntdll/process.c
-@@ -85,6 +85,24 @@ HANDLE CDECL __wine_make_process_system(void)
+@@ -82,6 +82,24 @@ HANDLE CDECL __wine_make_process_system(void)
      return ret;
  }
  
@@ -71,10 +71,10 @@ index b1cc307d2ae..2e5fee216ef 100644
  *  NtQueryInformationProcess		[NTDLL.@]
  *  ZwQueryInformationProcess		[NTDLL.@]
 diff --git a/server/protocol.def b/server/protocol.def
-index 62c93423104..4001b3cd095 100644
+index 96bc9250ab0..14b811684d8 100644
 --- a/server/protocol.def
 +++ b/server/protocol.def
-@@ -3757,6 +3757,14 @@ struct handle_info
+@@ -3759,6 +3759,14 @@ struct handle_info
  @END
  
  
diff --git a/patches/ntdll-CriticalSection/0002-ntdll-Add-inline-versions-of-RtlEnterCriticalSection.patch b/patches/ntdll-CriticalSection/0002-ntdll-Add-inline-versions-of-RtlEnterCriticalSection.patch
index 0b626cc08..5ee1a6a75 100644
--- a/patches/ntdll-CriticalSection/0002-ntdll-Add-inline-versions-of-RtlEnterCriticalSection.patch
+++ b/patches/ntdll-CriticalSection/0002-ntdll-Add-inline-versions-of-RtlEnterCriticalSection.patch
@@ -1,18 +1,18 @@
-From bb92d36109c9d4931051c69c0ab789b5c1396e66 Mon Sep 17 00:00:00 2001
+From fea92ad5c12ddb8d0a4d2363f21afe9c199359d1 Mon Sep 17 00:00:00 2001
 From: Sebastian Lackner <sebastian@fds-team.de>
 Date: Sat, 5 Aug 2017 03:38:38 +0200
 Subject: [PATCH] ntdll: Add inline versions of RtlEnterCriticalSection /
  RtlLeaveCriticalSections.
 
 ---
- dlls/ntdll/ntdll_misc.h | 38 ++++++++++++++++++++++++++++++++++++++
- 1 file changed, 38 insertions(+)
+ dlls/ntdll/ntdll_misc.h | 34 ++++++++++++++++++++++++++++++++++
+ 1 file changed, 34 insertions(+)
 
 diff --git a/dlls/ntdll/ntdll_misc.h b/dlls/ntdll/ntdll_misc.h
-index 27e7141bc65..d1fe4ba99d0 100644
+index 92fcde95a8a..51a9069e290 100644
 --- a/dlls/ntdll/ntdll_misc.h
 +++ b/dlls/ntdll/ntdll_misc.h
-@@ -28,6 +28,7 @@
+@@ -26,6 +26,7 @@
  #include "winnt.h"
  #include "winternl.h"
  #include "unixlib.h"
@@ -20,12 +20,10 @@ index 27e7141bc65..d1fe4ba99d0 100644
  #include "wine/server.h"
  #include "wine/asm.h"
  
-@@ -237,6 +238,43 @@ extern int ntdll_wcstoumbs( const WCHAR* src, DWORD srclen, char* dst, DWORD dst
+@@ -103,6 +104,39 @@ extern int ntdll_wcstoumbs( const WCHAR* src, DWORD srclen, char* dst, DWORD dst
  extern int CDECL NTDLL__vsnprintf( char *str, SIZE_T len, const char *format, __ms_va_list args ) DECLSPEC_HIDDEN;
  extern int CDECL NTDLL__vsnwprintf( WCHAR *str, SIZE_T len, const WCHAR *format, __ms_va_list args ) DECLSPEC_HIDDEN;
  
-+#ifdef __WINE_WINE_PORT_H
-+
 +/* inline version of RtlEnterCriticalSection */
 +static inline void enter_critical_section( RTL_CRITICAL_SECTION *crit )
 +{
@@ -58,12 +56,10 @@ index 27e7141bc65..d1fe4ba99d0 100644
 +            RtlpUnWaitCriticalSection( crit );
 +    }
 +}
-+
-+#endif  /* __WINE_WINE_PORT_H */
 +
  /* load order */
  
  enum loadorder
 -- 
-2.26.2
+2.27.0
 
diff --git a/patches/ntdll-Dealloc_Thread_Stack/0001-ntdll-Do-not-allow-to-allocate-thread-stack-for-curr.patch b/patches/ntdll-Dealloc_Thread_Stack/0001-ntdll-Do-not-allow-to-allocate-thread-stack-for-curr.patch
index dc21fef71..d0fb38b3e 100644
--- a/patches/ntdll-Dealloc_Thread_Stack/0001-ntdll-Do-not-allow-to-allocate-thread-stack-for-curr.patch
+++ b/patches/ntdll-Dealloc_Thread_Stack/0001-ntdll-Do-not-allow-to-allocate-thread-stack-for-curr.patch
@@ -1,32 +1,19 @@
-From d39ff3852f684bd9c0ca3c08d7e82e4e50be239d Mon Sep 17 00:00:00 2001
+From fcb28ef6b7e083e5b5d0992efc60a9bef6f08708 Mon Sep 17 00:00:00 2001
 From: Sebastian Lackner <sebastian@fds-team.de>
 Date: Fri, 21 Aug 2015 06:39:47 +0800
 Subject: [PATCH] ntdll: Do not allow to deallocate thread stack for current
  thread.
 
 ---
- dlls/ntdll/ntdll_misc.h        |  1 +
  dlls/ntdll/unix/unix_private.h |  1 +
  dlls/ntdll/unix/virtual.c      | 12 ++++++++++++
- 3 files changed, 14 insertions(+)
+ 2 files changed, 13 insertions(+)
 
-diff --git a/dlls/ntdll/ntdll_misc.h b/dlls/ntdll/ntdll_misc.h
-index 47800db41b1..be285013afc 100644
---- a/dlls/ntdll/ntdll_misc.h
-+++ b/dlls/ntdll/ntdll_misc.h
-@@ -154,6 +154,7 @@ struct ntdll_thread_data
-     int                wait_fd[2];    /* fd for sleeping server requests */
-     BOOL               wow64_redir;   /* Wow64 filesystem redirection flag */
-     pthread_t          pthread_id;    /* pthread thread id */
-+    void              *pthread_stack; /* pthread stack */
- };
- 
- C_ASSERT( sizeof(struct ntdll_thread_data) <= sizeof(((TEB *)0)->GdiTebBatch) );
 diff --git a/dlls/ntdll/unix/unix_private.h b/dlls/ntdll/unix/unix_private.h
-index 9904ef7bfd5..232dea18bee 100644
+index 71d6ee7d4f2..33326deea20 100644
 --- a/dlls/ntdll/unix/unix_private.h
 +++ b/dlls/ntdll/unix/unix_private.h
-@@ -46,6 +46,7 @@ struct ntdll_thread_data
+@@ -56,6 +56,7 @@ struct ntdll_thread_data
      int                wait_fd[2];    /* fd for sleeping server requests */
      BOOL               wow64_redir;   /* Wow64 filesystem redirection flag */
      pthread_t          pthread_id;    /* pthread thread id */
@@ -35,10 +22,10 @@ index 9904ef7bfd5..232dea18bee 100644
  };
  
 diff --git a/dlls/ntdll/unix/virtual.c b/dlls/ntdll/unix/virtual.c
-index 6166507871c..0bb8cef6d3b 100644
+index d998966b5fa..086eaa0b34e 100644
 --- a/dlls/ntdll/unix/virtual.c
 +++ b/dlls/ntdll/unix/virtual.c
-@@ -2772,6 +2772,8 @@ NTSTATUS CDECL virtual_alloc_thread_stack( INITIAL_TEB *stack, SIZE_T reserve_si
+@@ -2781,6 +2781,8 @@ NTSTATUS CDECL virtual_alloc_thread_stack( INITIAL_TEB *stack, SIZE_T reserve_si
      stack->DeallocationStack = view->base;
      stack->StackBase = (char *)view->base + view->size;
      stack->StackLimit = (char *)view->base + 2 * page_size;
@@ -47,7 +34,7 @@ index 6166507871c..0bb8cef6d3b 100644
  done:
      server_leave_uninterrupted_section( &csVirtual, &sigset );
      return status;
-@@ -3521,6 +3523,16 @@ NTSTATUS WINAPI NtFreeVirtualMemory( HANDLE process, PVOID *addr_ptr, SIZE_T *si
+@@ -3530,6 +3532,16 @@ NTSTATUS WINAPI NtFreeVirtualMemory( HANDLE process, PVOID *addr_ptr, SIZE_T *si
          /* Free the pages */
  
          if (size || (base != view->base)) status = STATUS_INVALID_PARAMETER;
diff --git a/patches/ntdll-HashLinks/0001-ntdll-Implement-HashLinks-field-in-LDR-module-data.patch b/patches/ntdll-HashLinks/0001-ntdll-Implement-HashLinks-field-in-LDR-module-data.patch
index b8a981a69..859208e07 100644
--- a/patches/ntdll-HashLinks/0001-ntdll-Implement-HashLinks-field-in-LDR-module-data.patch
+++ b/patches/ntdll-HashLinks/0001-ntdll-Implement-HashLinks-field-in-LDR-module-data.patch
@@ -1,16 +1,16 @@
-From 54796a7cba6fd2017c4826874ccd09a9662aff00 Mon Sep 17 00:00:00 2001
+From 1532ada677d566e60146cbe246f31d133b4dc955 Mon Sep 17 00:00:00 2001
 From: =?UTF-8?q?Michael=20M=C3=BCller?= <michael@fds-team.de>
 Date: Mon, 3 Apr 2017 05:30:27 +0200
 Subject: [PATCH] ntdll: Implement HashLinks field in LDR module data.
 
 ---
- dlls/kernel32/tests/loader.c | 76 ++++++++++++++++++++++++++++++++++++
+ dlls/kernel32/tests/loader.c | 75 ++++++++++++++++++++++++++++++++++++
  dlls/ntdll/loader.c          | 64 ++++++++++++++++++++++++++++++
  include/winternl.h           |  2 +-
- 3 files changed, 141 insertions(+), 1 deletion(-)
+ 3 files changed, 140 insertions(+), 1 deletion(-)
 
 diff --git a/dlls/kernel32/tests/loader.c b/dlls/kernel32/tests/loader.c
-index 59965984a67..95f18fb71e3 100644
+index 757a230ae15..466e5a444f4 100644
 --- a/dlls/kernel32/tests/loader.c
 +++ b/dlls/kernel32/tests/loader.c
 @@ -30,6 +30,7 @@
@@ -21,7 +21,7 @@ index 59965984a67..95f18fb71e3 100644
  #include "wine/test.h"
  #include "delayloadhandler.h"
  
-@@ -3968,6 +3969,79 @@ static void test_LoadPackagedLibrary(void)
+@@ -3970,6 +3971,79 @@ static void test_LoadPackagedLibrary(void)
              h, GetLastError());
  }
  
@@ -101,24 +101,19 @@ index 59965984a67..95f18fb71e3 100644
  START_TEST(loader)
  {
      int argc;
-@@ -4040,10 +4114,12 @@ START_TEST(loader)
+@@ -4042,6 +4116,7 @@ START_TEST(loader)
      test_InMemoryOrderModuleList();
      test_LoadPackagedLibrary();
      test_wow64_redirection();
 +    test_HashLinks();
-     test_dll_file( "ntdll.dll" );
-     test_dll_file( "kernel32.dll" );
-     test_dll_file( "advapi32.dll" );
-     test_dll_file( "user32.dll" );
-+
-     /* loader test must be last, it can corrupt the internal loader state on Windows */
-     test_Loader();
- }
+     test_dll_file( "ntdll.dll", FALSE );
+     test_dll_file( "kernel32.dll", TRUE );
+     test_dll_file( "advapi32.dll", TRUE );
 diff --git a/dlls/ntdll/loader.c b/dlls/ntdll/loader.c
-index efacc0c081e..b0b5c93b41b 100644
+index 3513102b6f0..485fd895787 100644
 --- a/dlls/ntdll/loader.c
 +++ b/dlls/ntdll/loader.c
-@@ -121,6 +121,9 @@ struct file_id
+@@ -118,6 +118,9 @@ struct file_id
      BYTE ObjectId[16];
  };
  
@@ -128,7 +123,7 @@ index efacc0c081e..b0b5c93b41b 100644
  /* internal representation of loaded modules */
  typedef struct _wine_modref
  {
-@@ -460,6 +463,52 @@ static void call_ldr_notifications( ULONG reason, LDR_DATA_TABLE_ENTRY *module )
+@@ -457,6 +460,52 @@ static void call_ldr_notifications( ULONG reason, LDR_DATA_TABLE_ENTRY *module )
      }
  }
  
@@ -181,7 +176,7 @@ index efacc0c081e..b0b5c93b41b 100644
  /*************************************************************************
   *		get_modref
   *
-@@ -1202,7 +1251,12 @@ static WINE_MODREF *alloc_module( HMODULE hModule, const UNICODE_STRING *nt_name
+@@ -1198,7 +1247,12 @@ static WINE_MODREF *alloc_module( HMODULE hModule, const UNICODE_STRING *nt_name
                     &wm->ldr.InLoadOrderLinks);
      InsertTailList(&NtCurrentTeb()->Peb->LdrData->InMemoryOrderModuleList,
                     &wm->ldr.InMemoryOrderLinks);
@@ -194,7 +189,7 @@ index efacc0c081e..b0b5c93b41b 100644
  
      if (!(nt->OptionalHeader.DllCharacteristics & IMAGE_DLLCHARACTERISTICS_NX_COMPAT))
      {
-@@ -1908,6 +1962,7 @@ static NTSTATUS build_module( LPCWSTR load_path, const UNICODE_STRING *nt_name,
+@@ -1903,6 +1957,7 @@ static NTSTATUS build_module( LPCWSTR load_path, const UNICODE_STRING *nt_name,
              /* the module has only be inserted in the load & memory order lists */
              RemoveEntryList(&wm->ldr.InLoadOrderLinks);
              RemoveEntryList(&wm->ldr.InMemoryOrderLinks);
@@ -202,7 +197,7 @@ index efacc0c081e..b0b5c93b41b 100644
  
              /* FIXME: there are several more dangling references
               * left. Including dlls loaded by this dll before the
-@@ -3244,6 +3299,7 @@ static void free_modref( WINE_MODREF *wm )
+@@ -3239,6 +3294,7 @@ static void free_modref( WINE_MODREF *wm )
  {
      RemoveEntryList(&wm->ldr.InLoadOrderLinks);
      RemoveEntryList(&wm->ldr.InMemoryOrderLinks);
@@ -210,7 +205,7 @@ index efacc0c081e..b0b5c93b41b 100644
      if (wm->ldr.InInitializationOrderLinks.Flink)
          RemoveEntryList(&wm->ldr.InInitializationOrderLinks);
  
-@@ -3937,6 +3993,7 @@ void __wine_process_init(void)
+@@ -3931,6 +3987,7 @@ void __wine_process_init(void)
      ULONG_PTR val;
      TEB *teb = NtCurrentTeb();
      PEB *peb = teb->Peb;
@@ -218,7 +213,7 @@ index efacc0c081e..b0b5c93b41b 100644
  
      peb->LdrData            = &ldr;
      peb->FastPebLock        = &peb_lock;
-@@ -3974,6 +4031,10 @@ void __wine_process_init(void)
+@@ -3968,6 +4025,10 @@ void __wine_process_init(void)
      load_global_options();
      version_init();
  
@@ -228,8 +223,8 @@ index efacc0c081e..b0b5c93b41b 100644
 +
      /* setup the load callback and create ntdll modref */
      RtlInitUnicodeString( &nt_name, ntdllW );
-     status = build_so_dll_module( params->DllPath.Buffer, &nt_name, ntdll_module, 0, &wm );
-@@ -4047,6 +4108,9 @@ void __wine_process_init(void)
+     NtQueryVirtualMemory( GetCurrentProcess(), __wine_process_init, MemoryBasicInformation,
+@@ -4043,6 +4104,9 @@ void __wine_process_init(void)
      teb->Tib.StackLimit = stack.StackLimit;
      teb->DeallocationStack = stack.DeallocationStack;
  
diff --git a/patches/ntdll-Heap_Improvements/0002-ntdll-Improve-heap-allocation-performance.patch b/patches/ntdll-Heap_Improvements/0002-ntdll-Improve-heap-allocation-performance.patch
index 950be1b4c..cf68be1a2 100644
--- a/patches/ntdll-Heap_Improvements/0002-ntdll-Improve-heap-allocation-performance.patch
+++ b/patches/ntdll-Heap_Improvements/0002-ntdll-Improve-heap-allocation-performance.patch
@@ -1,35 +1,14 @@
-From d7997c1fffbf407f08fc18464c2fe3f17a3038a4 Mon Sep 17 00:00:00 2001
+From a64bc7c1b8d5625fcb7b1b666d95aced4009341b Mon Sep 17 00:00:00 2001
 From: Sebastian Lackner <sebastian@fds-team.de>
 Date: Sat, 22 Jul 2017 07:21:45 +0200
 Subject: [PATCH] ntdll: Improve heap allocation performance. (v2)
 
 ---
- configure.ac      |   9 ++
- dlls/ntdll/heap.c | 321 ++++++++++++++++++++++++++++++++--------------
- 2 files changed, 234 insertions(+), 96 deletions(-)
+ dlls/ntdll/heap.c | 306 +++++++++++++++++++++++++++++++---------------
+ 1 file changed, 210 insertions(+), 96 deletions(-)
 
-diff --git a/configure.ac b/configure.ac
-index 0ce3cb5c573..2fa1c7d4223 100644
---- a/configure.ac
-+++ b/configure.ac
-@@ -2790,6 +2790,15 @@ AC_CHECK_FUNCS(\
- )
- LIBS="$ac_save_LIBS"
- 
-+dnl Check for __builtin_ctzl
-+AC_CACHE_CHECK([for __builtin_ctzl], ac_cv_have___builtin_ctzl,
-+               AC_LINK_IFELSE([AC_LANG_PROGRAM(,[[return __builtin_ctzl(1)]])],
-+               [ac_cv_have___builtin_ctzl="yes"], [ac_cv_have___builtin_ctzl="no"]))
-+if test "$ac_cv_have___builtin_ctzl" = "yes"
-+then
-+    AC_DEFINE(HAVE___BUILTIN_CTZL, 1, [Define to 1 if you have the `__builtin_ctzl' built-in function.])
-+fi
-+
- dnl Check for __builtin_popcount
- AC_CACHE_CHECK([for __builtin_popcount], ac_cv_have___builtin_popcount,
-                AC_LINK_IFELSE([AC_LANG_PROGRAM(,[[return __builtin_popcount(1)]])],
 diff --git a/dlls/ntdll/heap.c b/dlls/ntdll/heap.c
-index db5c039bb76..f51dc63f371 100644
+index 3cbbff2de35..fc669d9dc4d 100644
 --- a/dlls/ntdll/heap.c
 +++ b/dlls/ntdll/heap.c
 @@ -3,6 +3,7 @@
@@ -40,7 +19,7 @@ index db5c039bb76..f51dc63f371 100644
   *
   * This library is free software; you can redistribute it and/or
   * modify it under the terms of the GNU Lesser General Public
-@@ -41,6 +42,7 @@
+@@ -35,6 +36,7 @@
  #include "winternl.h"
  #include "ntdll_misc.h"
  #include "wine/list.h"
@@ -48,7 +27,7 @@ index db5c039bb76..f51dc63f371 100644
  #include "wine/debug.h"
  #include "wine/server.h"
  
-@@ -62,7 +64,11 @@ typedef struct tagARENA_FREE
+@@ -56,7 +58,11 @@ typedef struct tagARENA_FREE
  {
      DWORD                 size;     /* Block size; must be the first field */
      DWORD                 magic;    /* Magic number */
@@ -61,7 +40,7 @@ index db5c039bb76..f51dc63f371 100644
  } ARENA_FREE;
  
  typedef struct
-@@ -75,9 +81,11 @@ typedef struct
+@@ -69,9 +75,11 @@ typedef struct
      DWORD                 magic;      /* these must remain at the end of the structure */
  } ARENA_LARGE;
  
@@ -76,7 +55,7 @@ index db5c039bb76..f51dc63f371 100644
  #define ARENA_LARGE_SIZE       0xfedcba90  /* magic value for 'size' field in large blocks */
  
  /* Value for arena 'magic' field */
-@@ -95,6 +103,8 @@ typedef struct
+@@ -89,6 +97,8 @@ typedef struct
  #define LARGE_ALIGNMENT        16  /* large blocks have stricter alignment */
  #define ARENA_OFFSET           (ALIGNMENT - sizeof(ARENA_INUSE))
  
@@ -85,7 +64,7 @@ index db5c039bb76..f51dc63f371 100644
  C_ASSERT( sizeof(ARENA_LARGE) % LARGE_ALIGNMENT == 0 );
  
  #define ROUND_SIZE(size)       ((((size) + ALIGNMENT - 1) & ~(ALIGNMENT-1)) + ARENA_OFFSET)
-@@ -103,9 +113,7 @@ C_ASSERT( sizeof(ARENA_LARGE) % LARGE_ALIGNMENT == 0 );
+@@ -97,9 +107,7 @@ C_ASSERT( sizeof(ARENA_LARGE) % LARGE_ALIGNMENT == 0 );
  #define NOISY                  0           /* Report all errors  */
  
  /* minimum data size (without arenas) of an allocated block */
@@ -96,7 +75,7 @@ index db5c039bb76..f51dc63f371 100644
  /* minimum size that must remain to shrink an allocated block */
  #define HEAP_MIN_SHRINK_SIZE  (HEAP_MIN_DATA_SIZE+sizeof(ARENA_FREE))
  /* minimum size to start allocating large blocks */
-@@ -114,23 +122,14 @@ C_ASSERT( sizeof(ARENA_LARGE) % LARGE_ALIGNMENT == 0 );
+@@ -108,23 +116,14 @@ C_ASSERT( sizeof(ARENA_LARGE) % LARGE_ALIGNMENT == 0 );
  #define HEAP_TAIL_EXTRA_SIZE(flags) \
      ((flags & HEAP_TAIL_CHECKING_ENABLED) || RUNNING_ON_VALGRIND ? ALIGNMENT : 0)
  
@@ -128,17 +107,17 @@ index db5c039bb76..f51dc63f371 100644
  
  struct tagHEAP;
  
-@@ -163,9 +162,17 @@ typedef struct tagHEAP
+@@ -157,9 +156,17 @@ typedef struct tagHEAP
      DWORD            pending_pos;   /* Position in pending free requests ring */
      ARENA_INUSE    **pending_free;  /* Ring buffer for pending free requests */
      RTL_CRITICAL_SECTION critSection; /* Critical section for serialization */
 -    FREE_LIST_ENTRY *freeList;      /* Free lists */
 +    struct list     *freeList;      /* Free lists */
 +    struct wine_rb_tree freeTree;   /* Free tree */
-+    unsigned long    freeMask[HEAP_NB_FREE_LISTS / (8 * sizeof(unsigned long))];
++    DWORD            freeMask[HEAP_NB_FREE_LISTS / (8 * sizeof(DWORD))];
  } HEAP;
  
-+#define HEAP_FREEMASK_BLOCK    (8 * sizeof(unsigned long))
++#define HEAP_FREEMASK_BLOCK    (8 * sizeof(DWORD))
 +#define HEAP_FREEMASK_INDEX(x) ((x) / HEAP_FREEMASK_BLOCK)
 +#define HEAP_FREEMASK_BIT(x)   (1UL << ((x) & (HEAP_FREEMASK_BLOCK - 1)))
 +
@@ -147,7 +126,7 @@ index db5c039bb76..f51dc63f371 100644
  #define HEAP_MAGIC       ((DWORD)('H' | ('E'<<8) | ('A'<<16) | ('P'<<24)))
  
  #define HEAP_DEF_SIZE        0x110000   /* Default heap size = 1Mb + 64Kb */
-@@ -182,6 +189,30 @@ static HEAP *processHeap;  /* main process heap */
+@@ -176,6 +183,13 @@ static HEAP *processHeap;  /* main process heap */
  
  static BOOL HEAP_IsRealArena( HEAP *heapPtr, DWORD flags, LPCVOID block, BOOL quiet );
  
@@ -157,28 +136,11 @@ index db5c039bb76..f51dc63f371 100644
 +    ARENA_FREE *arena = WINE_RB_ENTRY_VALUE( entry, ARENA_FREE, entry.tree );
 +    return (arena->size & ARENA_SIZE_MASK);
 +}
-+
-+/* return number of trailing 0-bits in x */
-+static inline int ctzl(unsigned long x)
-+{
-+#ifdef HAVE___BUILTIN_CTZL
-+    return __builtin_ctzl(x);
-+#else
-+    int c = 1;
-+    if (!(x & 0xffffffff)) { x >>= 32; c += 32; }
-+    if (!(x & 0x0000ffff)) { x >>= 16; c += 16; }
-+    if (!(x & 0x000000ff)) { x >>=  8; c +=  8; }
-+    if (!(x & 0x0000000f)) { x >>=  4; c +=  4; }
-+    if (!(x & 0x00000003)) { x >>=  2; c +=  2; }
-+    c -= (x & 0x00000001);
-+    return c;
-+#endif
-+}
 +
  /* mark a block of memory as free for debugging purposes */
  static inline void mark_block_free( void *ptr, SIZE_T size, DWORD flags )
  {
-@@ -303,20 +334,6 @@ static void subheap_notify_free_all(SUBHEAP const *subheap)
+@@ -297,20 +311,6 @@ static void subheap_notify_free_all(SUBHEAP const *subheap)
  #endif
  }
  
@@ -199,7 +161,7 @@ index db5c039bb76..f51dc63f371 100644
  /* get the memory protection type to use for a given heap */
  static inline ULONG get_protection_type( DWORD flags )
  {
-@@ -344,13 +361,31 @@ static void HEAP_Dump( HEAP *heap )
+@@ -338,13 +338,31 @@ static void HEAP_Dump( HEAP *heap )
      TRACE( "Next: %p  Sub-heaps:", LIST_ENTRY( heap->entry.next, HEAP, entry ) );
      LIST_FOR_EACH_ENTRY( subheap, &heap->subheap_list, SUBHEAP, entry ) TRACE( " %p", subheap );
  
@@ -237,7 +199,7 @@ index db5c039bb76..f51dc63f371 100644
  
      LIST_FOR_EACH_ENTRY( subheap, &heap->subheap_list, SUBHEAP, entry )
      {
-@@ -365,11 +400,32 @@ static void HEAP_Dump( HEAP *heap )
+@@ -359,11 +377,32 @@ static void HEAP_Dump( HEAP *heap )
              if (*(DWORD *)ptr & ARENA_FLAG_FREE)
              {
                  ARENA_FREE *pArena = (ARENA_FREE *)ptr;
@@ -275,7 +237,7 @@ index db5c039bb76..f51dc63f371 100644
                  ptr += sizeof(*pArena) + (pArena->size & ARENA_SIZE_MASK);
                  arenaSize += sizeof(ARENA_FREE);
                  freeSize += pArena->size & ARENA_SIZE_MASK;
-@@ -477,20 +533,19 @@ static HEAP *HEAP_GetPtr(
+@@ -471,20 +510,19 @@ static HEAP *HEAP_GetPtr(
   */
  static inline void HEAP_InsertFreeBlock( HEAP *heap, ARENA_FREE *pArena, BOOL last )
  {
@@ -304,7 +266,7 @@ index db5c039bb76..f51dc63f371 100644
  }
  
  
-@@ -501,7 +556,19 @@ static inline void HEAP_InsertFreeBlock( HEAP *heap, ARENA_FREE *pArena, BOOL la
+@@ -495,7 +533,19 @@ static inline void HEAP_InsertFreeBlock( HEAP *heap, ARENA_FREE *pArena, BOOL la
   */
  static inline void HEAP_DeleteFreeBlock( HEAP *heap, ARENA_FREE *pArena )
  {
@@ -325,7 +287,7 @@ index db5c039bb76..f51dc63f371 100644
  }
  
  
-@@ -880,6 +947,15 @@ static BOOL validate_large_arena( HEAP *heap, const ARENA_LARGE *arena, BOOL qui
+@@ -875,6 +925,15 @@ static BOOL validate_large_arena( HEAP *heap, const ARENA_LARGE *arena, BOOL qui
  }
  
  
@@ -341,7 +303,7 @@ index db5c039bb76..f51dc63f371 100644
  /***********************************************************************
   *           HEAP_CreateSubHeap
   */
-@@ -887,7 +963,6 @@ static SUBHEAP *HEAP_CreateSubHeap( HEAP *heap, LPVOID address, DWORD flags,
+@@ -882,7 +941,6 @@ static SUBHEAP *HEAP_CreateSubHeap( HEAP *heap, LPVOID address, DWORD flags,
                                      SIZE_T commitSize, SIZE_T totalSize )
  {
      SUBHEAP *subheap;
@@ -349,7 +311,7 @@ index db5c039bb76..f51dc63f371 100644
      unsigned int i;
  
      if (!address)
-@@ -948,17 +1023,21 @@ static SUBHEAP *HEAP_CreateSubHeap( HEAP *heap, LPVOID address, DWORD flags,
+@@ -943,17 +1001,21 @@ static SUBHEAP *HEAP_CreateSubHeap( HEAP *heap, LPVOID address, DWORD flags,
          subheap->headerSize = ROUND_SIZE( sizeof(HEAP) );
          list_add_head( &heap->subheap_list, &subheap->entry );
  
@@ -376,12 +338,12 @@ index db5c039bb76..f51dc63f371 100644
 +
 +        /* Initialize the free mask */
 +
-+        for (i = 0; i < sizeof(heap->freeMask) / sizeof(heap->freeMask[0]); i++)
++        for (i = 0; i < ARRAY_SIZE(heap->freeMask); i++)
 +            heap->freeMask[i] = 0;
  
          /* Initialize critical section */
  
-@@ -1001,6 +1080,34 @@ static SUBHEAP *HEAP_CreateSubHeap( HEAP *heap, LPVOID address, DWORD flags,
+@@ -996,6 +1058,34 @@ static SUBHEAP *HEAP_CreateSubHeap( HEAP *heap, LPVOID address, DWORD flags,
  }
  
  
@@ -416,12 +378,12 @@ index db5c039bb76..f51dc63f371 100644
  /***********************************************************************
   *           HEAP_FindFreeBlock
   *
-@@ -1010,26 +1117,39 @@ static SUBHEAP *HEAP_CreateSubHeap( HEAP *heap, LPVOID address, DWORD flags,
+@@ -1005,26 +1095,41 @@ static SUBHEAP *HEAP_CreateSubHeap( HEAP *heap, LPVOID address, DWORD flags,
  static ARENA_FREE *HEAP_FindFreeBlock( HEAP *heap, SIZE_T size,
                                         SUBHEAP **ppSubHeap )
  {
 +    struct wine_rb_entry *ptr;
-+    unsigned long mask;
++    DWORD mask;
 +    ARENA_FREE *arena;
      SUBHEAP *subheap;
 -    struct list *ptr;
@@ -445,7 +407,9 @@ index db5c039bb76..f51dc63f371 100644
          {
 -            subheap = HEAP_FindSubHeap( heap, pArena );
 -            if (!HEAP_Commit( subheap, (ARENA_INUSE *)pArena, size )) return NULL;
-+            index = (index & ~(HEAP_FREEMASK_BLOCK - 1)) | ctzl( mask );
++            DWORD ctz;
++            BitScanForward( &ctz, mask );
++            index = (index & ~(HEAP_FREEMASK_BLOCK - 1)) | ctz;
 +            arena = LIST_ENTRY( heap->freeList[index].next, ARENA_FREE, entry.list );
 +            subheap = HEAP_FindSubHeap( heap, arena );
 +            if (!HEAP_Commit( subheap, (ARENA_INUSE *)arena, size )) return NULL;
@@ -468,7 +432,7 @@ index db5c039bb76..f51dc63f371 100644
      }
  
      /* If no block was found, attempt to grow the heap */
-@@ -1075,13 +1195,10 @@ static ARENA_FREE *HEAP_FindFreeBlock( HEAP *heap, SIZE_T size,
+@@ -1070,13 +1175,10 @@ static ARENA_FREE *HEAP_FindFreeBlock( HEAP *heap, SIZE_T size,
   */
  static BOOL HEAP_IsValidArenaPtr( const HEAP *heap, const ARENA_FREE *ptr )
  {
@@ -482,7 +446,7 @@ index db5c039bb76..f51dc63f371 100644
      return FALSE;
  }
  
-@@ -1093,7 +1210,7 @@ static BOOL HEAP_ValidateFreeArena( SUBHEAP *subheap, ARENA_FREE *pArena )
+@@ -1088,7 +1190,7 @@ static BOOL HEAP_ValidateFreeArena( SUBHEAP *subheap, ARENA_FREE *pArena )
  {
      DWORD flags = subheap->heap->flags;
      SIZE_T size;
@@ -491,7 +455,7 @@ index db5c039bb76..f51dc63f371 100644
      char *heapEnd = (char *)subheap->base + subheap->size;
  
      /* Check for unaligned pointers */
-@@ -1110,7 +1227,8 @@ static BOOL HEAP_ValidateFreeArena( SUBHEAP *subheap, ARENA_FREE *pArena )
+@@ -1105,7 +1207,8 @@ static BOOL HEAP_ValidateFreeArena( SUBHEAP *subheap, ARENA_FREE *pArena )
          return FALSE;
      }
      /* Check size flags */
@@ -501,7 +465,7 @@ index db5c039bb76..f51dc63f371 100644
          (pArena->size & ARENA_FLAG_PREV_FREE))
      {
          ERR("Heap %p: bad flags %08x for free arena %p\n",
-@@ -1124,34 +1242,45 @@ static BOOL HEAP_ValidateFreeArena( SUBHEAP *subheap, ARENA_FREE *pArena )
+@@ -1119,34 +1222,45 @@ static BOOL HEAP_ValidateFreeArena( SUBHEAP *subheap, ARENA_FREE *pArena )
          ERR("Heap %p: bad size %08lx for free arena %p\n", subheap->heap, size, pArena );
          return FALSE;
      }
@@ -556,5 +520,5 @@ index db5c039bb76..f51dc63f371 100644
              subheap->heap, prev, pArena );
          return FALSE;
 -- 
-2.24.0.rc1
+2.27.0
 
diff --git a/patches/ntdll-Hide_Wine_Exports/0001-ntdll-Add-support-for-hiding-wine-version-informatio.patch b/patches/ntdll-Hide_Wine_Exports/0001-ntdll-Add-support-for-hiding-wine-version-informatio.patch
index bf2a22407..92c5cc812 100644
--- a/patches/ntdll-Hide_Wine_Exports/0001-ntdll-Add-support-for-hiding-wine-version-informatio.patch
+++ b/patches/ntdll-Hide_Wine_Exports/0001-ntdll-Add-support-for-hiding-wine-version-informatio.patch
@@ -1,27 +1,19 @@
-From dceb199f694af989df0655f7846a40ae29c67ea0 Mon Sep 17 00:00:00 2001
+From 2afb2a42779c13459bf07921b57fe0d0e5cc65c6 Mon Sep 17 00:00:00 2001
 From: Sebastian Lackner <sebastian@fds-team.de>
 Date: Sat, 30 May 2015 02:23:15 +0200
 Subject: [PATCH] ntdll: Add support for hiding wine version information from
  applications.
 
 ---
- dlls/ntdll/loader.c     | 100 +++++++++++++++++++++++++++++++++++++++-
- dlls/ntdll/ntdll_misc.h |   5 ++
- 2 files changed, 104 insertions(+), 1 deletion(-)
+ dlls/ntdll/loader.c     | 99 ++++++++++++++++++++++++++++++++++++++++-
+ dlls/ntdll/ntdll_misc.h |  5 +++
+ 2 files changed, 103 insertions(+), 1 deletion(-)
 
 diff --git a/dlls/ntdll/loader.c b/dlls/ntdll/loader.c
-index c471755139f..e36764d9a3e 100644
+index 3b68f6685d0..63c7109a763 100644
 --- a/dlls/ntdll/loader.c
 +++ b/dlls/ntdll/loader.c
-@@ -71,6 +71,7 @@ const WCHAR system_dir[] = {'C',':','\\','w','i','n','d','o','w','s','\\',
- const WCHAR syswow64_dir[] = {'C',':','\\','w','i','n','d','o','w','s','\\',
-                               's','y','s','w','o','w','6','4','\\',0};
- 
-+
- /* system search path */
- static const WCHAR system_path[] =
-     {'C',':','\\','w','i','n','d','o','w','s','\\','s','y','s','t','e','m','3','2',';',
-@@ -79,6 +80,9 @@ static const WCHAR system_path[] =
+@@ -76,6 +76,9 @@ static const WCHAR system_path[] =
  
  static const WCHAR dotW[] = {'.',0};
  
@@ -31,7 +23,7 @@ index c471755139f..e36764d9a3e 100644
  static BOOL imports_fixup_done = FALSE;  /* set once the imports have been fixed up, before attaching them */
  static BOOL process_detaching = FALSE;  /* set on process detach to avoid deadlocks with thread detach */
  static int free_lib_count;   /* recursion depth of LdrUnloadDll calls */
-@@ -95,6 +99,8 @@ struct dll_dir_entry
+@@ -92,6 +95,8 @@ struct dll_dir_entry
  
  static struct list dll_dir_list = LIST_INIT( dll_dir_list );  /* extra dirs from LdrAddDllDirectory */
  
@@ -40,7 +32,7 @@ index c471755139f..e36764d9a3e 100644
  struct ldr_notification
  {
      struct list                    entry;
-@@ -1709,6 +1715,96 @@ NTSTATUS WINAPI LdrUnlockLoaderLock( ULONG flags, ULONG_PTR magic )
+@@ -1704,6 +1709,96 @@ NTSTATUS WINAPI LdrUnlockLoaderLock( ULONG flags, ULONG_PTR magic )
  }
  
  
@@ -128,16 +120,16 @@ index c471755139f..e36764d9a3e 100644
 + */
 +static BOOL is_hidden_export( void *proc )
 +{
-+    return hide_wine_exports && (proc == &NTDLL_wine_get_version ||
-+                                 proc == &NTDLL_wine_get_build_id ||
-+                                 proc == &NTDLL_wine_get_host_version);
++    return hide_wine_exports && (proc == &wine_get_version ||
++                                 proc == &wine_get_build_id ||
++                                 proc == &wine_get_host_version);
 +}
 +
 +
  /******************************************************************
   *		LdrGetProcedureAddress  (NTDLL.@)
   */
-@@ -1729,7 +1825,7 @@ NTSTATUS WINAPI LdrGetProcedureAddress(HMODULE module, const ANSI_STRING *name,
+@@ -1724,7 +1819,7 @@ NTSTATUS WINAPI LdrGetProcedureAddress(HMODULE module, const ANSI_STRING *name,
          LPCWSTR load_path = NtCurrentTeb()->Peb->ProcessParameters->DllPath.Buffer;
          void *proc = name ? find_named_export( module, exports, exp_size, name->Buffer, -1, load_path )
                            : find_ordinal_export( module, exports, exp_size, ord - exports->Base, load_path );
@@ -146,7 +138,7 @@ index c471755139f..e36764d9a3e 100644
          {
              *address = proc;
              ret = STATUS_SUCCESS;
-@@ -4061,6 +4157,8 @@ void __wine_process_init(void)
+@@ -4057,6 +4152,8 @@ void __wine_process_init(void)
          NtTerminateProcess( GetCurrentProcess(), status );
      }
  
@@ -156,21 +148,21 @@ index c471755139f..e36764d9a3e 100644
  
      /* elevate process if necessary */
 diff --git a/dlls/ntdll/ntdll_misc.h b/dlls/ntdll/ntdll_misc.h
-index 1afda71c3ad..d489b850963 100644
+index 80be882e76d..783c5499d46 100644
 --- a/dlls/ntdll/ntdll_misc.h
 +++ b/dlls/ntdll/ntdll_misc.h
-@@ -153,6 +153,11 @@ void     WINAPI LdrInitializeThunk(CONTEXT*,void**,ULONG_PTR,ULONG_PTR);
+@@ -150,6 +150,11 @@ void     WINAPI LdrInitializeThunk(CONTEXT*,void**,ULONG_PTR,ULONG_PTR);
  #define InterlockedCompareExchange64(dest,xchg,cmp) RtlInterlockedCompareExchange64(dest,xchg,cmp)
  #endif
  
 +/* version */
-+extern const char * CDECL NTDLL_wine_get_version(void);
-+extern const char * CDECL NTDLL_wine_get_build_id(void);
-+extern void CDECL NTDLL_wine_get_host_version( const char **sysname, const char **release );
++extern const char * CDECL wine_get_version(void);
++extern const char * CDECL wine_get_build_id(void);
++extern void CDECL wine_get_host_version( const char **sysname, const char **release );
 +
- /* string functions */
- void * __cdecl NTDLL_memchr( const void *ptr, int c, size_t n );
- char * __cdecl NTDLL_strcat( char *dst, const char *src );
+ /* convert from straight ASCII to Unicode without depending on the current codepage */
+ static inline void ascii_to_unicode( WCHAR *dst, const char *src, size_t len )
+ {
 -- 
 2.27.0
 
diff --git a/patches/ntdll-ThreadTime/definition b/patches/ntdll-ThreadTime/definition
index 95158a91b..7a231fe65 100644
--- a/patches/ntdll-ThreadTime/definition
+++ b/patches/ntdll-ThreadTime/definition
@@ -1,2 +1,4 @@
 Fixes: Return correct thread creation time in SystemProcessInformation
 Fixes: Fill process virtual memory counters in NtQuerySystemInformation
+# Patch 6 is broken. We should really be returning this information from the
+# server, but that needs a bit more work.
diff --git a/patches/patchinstall.sh b/patches/patchinstall.sh
index 4c153e8c6..3cf00f04b 100755
--- a/patches/patchinstall.sh
+++ b/patches/patchinstall.sh
@@ -3479,7 +3479,7 @@ fi
 # Patchset ntdll-Dealloc_Thread_Stack
 # |
 # | Modified files:
-# |   *	dlls/ntdll/ntdll_misc.h, dlls/ntdll/unix/unix_private.h, dlls/ntdll/unix/virtual.c
+# |   *	dlls/ntdll/unix/unix_private.h, dlls/ntdll/unix/virtual.c
 # |
 if test "$enable_ntdll_Dealloc_Thread_Stack" -eq 1; then
 	patch_apply ntdll-Dealloc_Thread_Stack/0001-ntdll-Do-not-allow-to-allocate-thread-stack-for-curr.patch
@@ -3626,7 +3626,7 @@ fi
 # |   *	[#38656] Add support for hiding wine version information from applications
 # |
 # | Modified files:
-# |   *	dlls/ntdll/loader.c, dlls/ntdll/ntdll_misc.h
+# |   *	dlls/ntdll/loader.c
 # |
 if test "$enable_ntdll_Hide_Wine_Exports" -eq 1; then
 	patch_apply ntdll-Hide_Wine_Exports/0001-ntdll-Add-support-for-hiding-wine-version-informatio.patch
diff --git a/patches/ntdll-ThreadTime/0002-ntdll-Set-correct-thread-creation-time-for-SystemPro.patch b/patches/ntdll-ThreadTime/0002-ntdll-Set-correct-thread-creation-time-for-SystemPro.patch
index 08061e177..5dd91b833 100644
--- a/patches/ntdll-ThreadTime/0002-ntdll-Set-correct-thread-creation-time-for-SystemPro.patch
+++ b/patches/ntdll-ThreadTime/0002-ntdll-Set-correct-thread-creation-time-for-SystemPro.patch
@@ -1,26 +1,42 @@
-From be1561c5ef6fcc9ef06f998bc06ea245bd187915 Mon Sep 17 00:00:00 2001
+From 11ce8824189ece2741a98c932b22ac7ccf2f4388 Mon Sep 17 00:00:00 2001
 From: =?UTF-8?q?Michael=20M=C3=BCller?= <michael@fds-team.de>
 Date: Thu, 9 Mar 2017 00:00:46 +0100
 Subject: [PATCH] ntdll: Set correct thread creation time for
  SystemProcessInformation in NtQuerySystemInformation.
 
 ---
- dlls/ntdll/unix/system.c |  2 +-
+ dlls/ntdll/unix/system.c |  4 +++-
  server/protocol.def      |  1 +
  server/snapshot.c        | 13 +++++++------
  server/thread.h          |  1 +
- 4 files changed, 10 insertions(+), 7 deletions(-)
+ 4 files changed, 12 insertions(+), 7 deletions(-)
 
 diff --git a/dlls/ntdll/unix/system.c b/dlls/ntdll/unix/system.c
-index 7045bc1550b..f137ccf97a7 100644
+index 7045bc1550b..3d37578b34a 100644
 --- a/dlls/ntdll/unix/system.c
 +++ b/dlls/ntdll/unix/system.c
-@@ -2184,7 +2184,7 @@ NTSTATUS WINAPI NtQuerySystemInformation( SYSTEM_INFORMATION_CLASS class,
+@@ -2162,6 +2162,7 @@ NTSTATUS WINAPI NtQuerySystemInformation( SYSTEM_INFORMATION_CLASS class,
+                 while (ret == STATUS_SUCCESS)
+                 {
+                     int unix_tid, pid, tid, base_pri, delta_pri;
++                    timeout_t creation_time;
+                     SERVER_START_REQ( next_thread )
+                     {
+                         req->handle = wine_server_obj_handle( handle );
+@@ -2173,6 +2174,7 @@ NTSTATUS WINAPI NtQuerySystemInformation( SYSTEM_INFORMATION_CLASS class,
+                             tid = reply->tid;
+                             base_pri = reply->base_pri;
+                             delta_pri = reply->delta_pri;
++                            creation_time = reply->creation_time;
+                             j++;
+                         }
+                     }
+@@ -2184,7 +2186,7 @@ NTSTATUS WINAPI NtQuerySystemInformation( SYSTEM_INFORMATION_CLASS class,
                          {
                              memset(&spi->ti[i], 0, sizeof(spi->ti));
  
 -                            spi->ti[i].CreateTime.QuadPart = 0xdeadbeef;
-+                            spi->ti[i].CreateTime.QuadPart = reply->creation_time;
++                            spi->ti[i].CreateTime.QuadPart = creation_time;
                              spi->ti[i].ClientId.UniqueProcess = UlongToHandle(pid);
                              spi->ti[i].ClientId.UniqueThread  = UlongToHandle(tid);
                              spi->ti[i].dwCurrentPriority = base_pri + delta_pri;
diff --git a/patches/ntdll-Hide_Wine_Exports/0001-ntdll-Add-support-for-hiding-wine-version-informatio.patch b/patches/ntdll-Hide_Wine_Exports/0001-ntdll-Add-support-for-hiding-wine-version-informatio.patch
index 91aec80f8..bf2a22407 100644
--- a/patches/ntdll-Hide_Wine_Exports/0001-ntdll-Add-support-for-hiding-wine-version-informatio.patch
+++ b/patches/ntdll-Hide_Wine_Exports/0001-ntdll-Add-support-for-hiding-wine-version-informatio.patch
@@ -1,4 +1,4 @@
-From 463baa9359f163b4e152f681a3703e602347ab04 Mon Sep 17 00:00:00 2001
+From dceb199f694af989df0655f7846a40ae29c67ea0 Mon Sep 17 00:00:00 2001
 From: Sebastian Lackner <sebastian@fds-team.de>
 Date: Sat, 30 May 2015 02:23:15 +0200
 Subject: [PATCH] ntdll: Add support for hiding wine version information from
@@ -10,10 +10,10 @@ Subject: [PATCH] ntdll: Add support for hiding wine version information from
  2 files changed, 104 insertions(+), 1 deletion(-)
 
 diff --git a/dlls/ntdll/loader.c b/dlls/ntdll/loader.c
-index 71efed5fa32..ec9ddc73e9c 100644
+index c471755139f..e36764d9a3e 100644
 --- a/dlls/ntdll/loader.c
 +++ b/dlls/ntdll/loader.c
-@@ -77,6 +77,7 @@ const WCHAR system_dir[] = {'C',':','\\','w','i','n','d','o','w','s','\\',
+@@ -71,6 +71,7 @@ const WCHAR system_dir[] = {'C',':','\\','w','i','n','d','o','w','s','\\',
  const WCHAR syswow64_dir[] = {'C',':','\\','w','i','n','d','o','w','s','\\',
                                's','y','s','w','o','w','6','4','\\',0};
  
@@ -21,7 +21,7 @@ index 71efed5fa32..ec9ddc73e9c 100644
  /* system search path */
  static const WCHAR system_path[] =
      {'C',':','\\','w','i','n','d','o','w','s','\\','s','y','s','t','e','m','3','2',';',
-@@ -85,6 +86,9 @@ static const WCHAR system_path[] =
+@@ -79,6 +80,9 @@ static const WCHAR system_path[] =
  
  static const WCHAR dotW[] = {'.',0};
  
@@ -31,7 +31,7 @@ index 71efed5fa32..ec9ddc73e9c 100644
  static BOOL imports_fixup_done = FALSE;  /* set once the imports have been fixed up, before attaching them */
  static BOOL process_detaching = FALSE;  /* set on process detach to avoid deadlocks with thread detach */
  static int free_lib_count;   /* recursion depth of LdrUnloadDll calls */
-@@ -101,6 +105,8 @@ struct dll_dir_entry
+@@ -95,6 +99,8 @@ struct dll_dir_entry
  
  static struct list dll_dir_list = LIST_INIT( dll_dir_list );  /* extra dirs from LdrAddDllDirectory */
  
@@ -40,7 +40,7 @@ index 71efed5fa32..ec9ddc73e9c 100644
  struct ldr_notification
  {
      struct list                    entry;
-@@ -1810,6 +1816,96 @@ NTSTATUS WINAPI LdrUnlockLoaderLock( ULONG flags, ULONG_PTR magic )
+@@ -1709,6 +1715,96 @@ NTSTATUS WINAPI LdrUnlockLoaderLock( ULONG flags, ULONG_PTR magic )
  }
  
  
@@ -137,7 +137,7 @@ index 71efed5fa32..ec9ddc73e9c 100644
  /******************************************************************
   *		LdrGetProcedureAddress  (NTDLL.@)
   */
-@@ -1830,7 +1926,7 @@ NTSTATUS WINAPI LdrGetProcedureAddress(HMODULE module, const ANSI_STRING *name,
+@@ -1729,7 +1825,7 @@ NTSTATUS WINAPI LdrGetProcedureAddress(HMODULE module, const ANSI_STRING *name,
          LPCWSTR load_path = NtCurrentTeb()->Peb->ProcessParameters->DllPath.Buffer;
          void *proc = name ? find_named_export( module, exports, exp_size, name->Buffer, -1, load_path )
                            : find_ordinal_export( module, exports, exp_size, ord - exports->Base, load_path );
@@ -146,7 +146,7 @@ index 71efed5fa32..ec9ddc73e9c 100644
          {
              *address = proc;
              ret = STATUS_SUCCESS;
-@@ -4491,6 +4587,8 @@ void __wine_process_init(void)
+@@ -4061,6 +4157,8 @@ void __wine_process_init(void)
          NtTerminateProcess( GetCurrentProcess(), status );
      }
  
@@ -156,10 +156,10 @@ index 71efed5fa32..ec9ddc73e9c 100644
  
      /* elevate process if necessary */
 diff --git a/dlls/ntdll/ntdll_misc.h b/dlls/ntdll/ntdll_misc.h
-index dbd9a826429..b4666d82c8b 100644
+index 1afda71c3ad..d489b850963 100644
 --- a/dlls/ntdll/ntdll_misc.h
 +++ b/dlls/ntdll/ntdll_misc.h
-@@ -283,6 +283,11 @@ void     WINAPI LdrInitializeThunk(CONTEXT*,void**,ULONG_PTR,ULONG_PTR);
+@@ -153,6 +153,11 @@ void     WINAPI LdrInitializeThunk(CONTEXT*,void**,ULONG_PTR,ULONG_PTR);
  #define InterlockedCompareExchange64(dest,xchg,cmp) RtlInterlockedCompareExchange64(dest,xchg,cmp)
  #endif
  
@@ -168,9 +168,9 @@ index dbd9a826429..b4666d82c8b 100644
 +extern const char * CDECL NTDLL_wine_get_build_id(void);
 +extern void CDECL NTDLL_wine_get_host_version( const char **sysname, const char **release );
 +
- /* process / thread time */
- extern BOOL read_process_time(int unix_pid, int unix_tid, unsigned long clk_tck,
-                               LARGE_INTEGER *kernel, LARGE_INTEGER *user) DECLSPEC_HIDDEN;
+ /* string functions */
+ void * __cdecl NTDLL_memchr( const void *ptr, int c, size_t n );
+ char * __cdecl NTDLL_strcat( char *dst, const char *src );
 -- 
-2.26.2
+2.27.0
 
diff --git a/patches/ntdll-Hide_Wine_Exports/definition b/patches/ntdll-Hide_Wine_Exports/definition
index 0b58aa388..52e3041b2 100644
--- a/patches/ntdll-Hide_Wine_Exports/definition
+++ b/patches/ntdll-Hide_Wine_Exports/definition
@@ -1,5 +1,3 @@
 Fixes: [38656] Add support for hiding wine version information from applications
 Depends: ntdll-ThreadTime
 Depends: advapi32-Token_Integrity_Level
-# Re-enable me when ntdll-ThreadTime gets re-enabled!
-Disabled: true
diff --git a/patches/ntdll-ThreadTime/0001-ntdll-Return-correct-values-in-GetThreadTimes-for-al.patch b/patches/ntdll-ThreadTime/0001-ntdll-Return-correct-values-in-GetThreadTimes-for-al.patch
deleted file mode 100644
index 58a46b341..000000000
--- a/patches/ntdll-ThreadTime/0001-ntdll-Return-correct-values-in-GetThreadTimes-for-al.patch
+++ /dev/null
@@ -1,163 +0,0 @@
-From 4b31157383a5e422660c17d47fd4cda511a991a4 Mon Sep 17 00:00:00 2001
-From: Sebastian Lackner <sebastian@fds-team.de>
-Date: Fri, 7 Nov 2014 03:26:18 +0100
-Subject: [PATCH] ntdll: Return correct values in GetThreadTimes() for all
- threads.
-
-Based on a patch by Ray Hinchliffe <ray@pobox.co.uk>.
----
- dlls/ntdll/thread.c | 82 ++++++++++++++++++++++++++++++++++++++++++-----------
- server/protocol.def |  2 ++
- server/thread.c     |  2 ++
- 3 files changed, 69 insertions(+), 17 deletions(-)
-
-diff --git a/dlls/ntdll/thread.c b/dlls/ntdll/thread.c
-index c999d4b..1491ebb 100644
---- a/dlls/ntdll/thread.c
-+++ b/dlls/ntdll/thread.c
-@@ -23,6 +23,8 @@
- 
- #include <assert.h>
- #include <stdarg.h>
-+#include <string.h>
-+#include <stdio.h>
- #include <limits.h>
- #include <sys/types.h>
- #ifdef HAVE_SYS_MMAN_H
-@@ -1017,7 +1019,10 @@ NTSTATUS WINAPI NtQueryInformationThread( HANDLE handle, THREADINFOCLASS class,
-     case ThreadTimes:
-         {
-             KERNEL_USER_TIMES   kusrt;
-+            int unix_pid, unix_tid;
- 
-+            /* We need to do a server call to get the creation time, exit time, PID and TID */
-+            /* This works on any thread */
-             SERVER_START_REQ( get_thread_times )
-             {
-                 req->handle = wine_server_obj_handle( handle );
-@@ -1026,36 +1031,79 @@ NTSTATUS WINAPI NtQueryInformationThread( HANDLE handle, THREADINFOCLASS class,
-                 {
-                     kusrt.CreateTime.QuadPart = reply->creation_time;
-                     kusrt.ExitTime.QuadPart = reply->exit_time;
-+                    unix_pid = reply->unix_pid;
-+                    unix_tid = reply->unix_tid;
-                 }
-             }
-             SERVER_END_REQ;
-             if (status == STATUS_SUCCESS)
-             {
--                /* We call times(2) for kernel time or user time */
--                /* We can only (portably) do this for the current thread */
--                if (handle == GetCurrentThread())
-+                unsigned long clk_tck = sysconf(_SC_CLK_TCK);
-+                BOOL filled_times = FALSE;
-+
-+#ifdef __linux__
-+                /* only /proc provides exact values for a specific thread */
-+                if (unix_pid != -1 && unix_tid != -1)
-                 {
--                    struct tms time_buf;
--                    long clocks_per_sec = sysconf(_SC_CLK_TCK);
-+                    unsigned long usr, sys;
-+                    char buf[512], *pos;
-+                    FILE *fp;
-+                    int i;
-+
-+                    /* based on https://github.com/torvalds/linux/blob/master/fs/proc/array.c */
-+                    sprintf( buf, "/proc/%u/task/%u/stat", unix_pid, unix_tid );
-+                    if ((fp = fopen( buf, "r" )))
-+                    {
-+                        pos = fgets( buf, sizeof(buf), fp );
-+                        fclose( fp );
-+
-+                        /* format of first chunk is "%d (%s) %c" - we have to skip to the last ')'
-+                         * to avoid misinterpreting the string. */
-+                        if (pos) pos = strrchr( pos, ')' );
-+                        if (pos) pos = strchr( pos + 1, ' ' );
-+                        if (pos) pos++;
-+
-+                        /* skip over the following fields: state, ppid, pgid, sid, tty_nr, tty_pgrp,
-+                         * task->flags, min_flt, cmin_flt, maj_flt, cmaj_flt */
-+                        for (i = 0; (i < 11) && pos; i++)
-+                        {
-+                            pos = strchr( pos + 1, ' ' );
-+                            if (pos) pos++;
-+                        }
-+
-+                        /* the next two values are user and system time */
-+                        if (pos && (sscanf( pos, "%lu %lu", &usr, &sys ) == 2))
-+                        {
-+                            kusrt.KernelTime.QuadPart = (ULONGLONG)sys * 10000000 / clk_tck;
-+                            kusrt.UserTime.QuadPart   = (ULONGLONG)usr * 10000000 / clk_tck;
-+                            filled_times = TRUE;
-+                        }
-+                    }
-+                }
-+#endif
- 
-+                /* get values for current process instead */
-+                if (!filled_times && handle == GetCurrentThread())
-+                {
-+                    struct tms time_buf;
-                     times(&time_buf);
--                    kusrt.KernelTime.QuadPart = (ULONGLONG)time_buf.tms_stime * 10000000 / clocks_per_sec;
--                    kusrt.UserTime.QuadPart = (ULONGLONG)time_buf.tms_utime * 10000000 / clocks_per_sec;
-+
-+                    kusrt.KernelTime.QuadPart = (ULONGLONG)time_buf.tms_stime * 10000000 / clk_tck;
-+                    kusrt.UserTime.QuadPart   = (ULONGLONG)time_buf.tms_utime * 10000000 / clk_tck;
-+                    filled_times = TRUE;
-                 }
--                else
-+
-+                /* unable to determine exact values, fill with zero */
-+                if (!filled_times)
-                 {
--                    static BOOL reported = FALSE;
-+                    static int once;
-+                    if (!once++)
-+                        FIXME("Cannot get kerneltime or usertime of other threads\n");
- 
-                     kusrt.KernelTime.QuadPart = 0;
--                    kusrt.UserTime.QuadPart = 0;
--                    if (reported)
--                        TRACE("Cannot get kerneltime or usertime of other threads\n");
--                    else
--                    {
--                        FIXME("Cannot get kerneltime or usertime of other threads\n");
--                        reported = TRUE;
--                    }
-+                    kusrt.UserTime.QuadPart   = 0;
-                 }
-+
-                 if (data) memcpy( data, &kusrt, min( length, sizeof(kusrt) ));
-                 if (ret_len) *ret_len = min( length, sizeof(kusrt) );
-             }
-diff --git a/server/protocol.def b/server/protocol.def
-index 3bed47a..031b490 100644
---- a/server/protocol.def
-+++ b/server/protocol.def
-@@ -908,6 +908,8 @@ struct rawinput_device
- @REPLY
-     timeout_t    creation_time; /* thread creation time */
-     timeout_t    exit_time;     /* thread exit time */
-+    int          unix_pid;      /* thread native pid */
-+    int          unix_tid;      /* thread native pid */
- @END
- 
- 
-diff --git a/server/thread.c b/server/thread.c
-index 2cf5054..46fc9a7 100644
---- a/server/thread.c
-+++ b/server/thread.c
-@@ -1413,6 +1413,8 @@ DECL_HANDLER(get_thread_times)
-     {
-         reply->creation_time  = thread->creation_time;
-         reply->exit_time      = thread->exit_time;
-+        reply->unix_pid       = thread->unix_pid;
-+        reply->unix_tid       = thread->unix_tid;
- 
-         release_object( thread );
-     }
--- 
-1.9.1
-
diff --git a/patches/ntdll-ThreadTime/0002-ntdll-Set-correct-thread-creation-time-for-SystemPro.patch b/patches/ntdll-ThreadTime/0002-ntdll-Set-correct-thread-creation-time-for-SystemPro.patch
index f72185ece..08061e177 100644
--- a/patches/ntdll-ThreadTime/0002-ntdll-Set-correct-thread-creation-time-for-SystemPro.patch
+++ b/patches/ntdll-ThreadTime/0002-ntdll-Set-correct-thread-creation-time-for-SystemPro.patch
@@ -1,46 +1,46 @@
-From e6832d1b0f923e7589424ade7571cc67dc768c4d Mon Sep 17 00:00:00 2001
+From be1561c5ef6fcc9ef06f998bc06ea245bd187915 Mon Sep 17 00:00:00 2001
 From: =?UTF-8?q?Michael=20M=C3=BCller?= <michael@fds-team.de>
 Date: Thu, 9 Mar 2017 00:00:46 +0100
-Subject: ntdll: Set correct thread creation time for SystemProcessInformation
- in NtQuerySystemInformation.
+Subject: [PATCH] ntdll: Set correct thread creation time for
+ SystemProcessInformation in NtQuerySystemInformation.
 
 ---
- dlls/ntdll/nt.c     |  2 +-
- server/protocol.def |  1 +
- server/snapshot.c   | 11 ++++++-----
- server/thread.h     |  1 +
- 4 files changed, 9 insertions(+), 6 deletions(-)
+ dlls/ntdll/unix/system.c |  2 +-
+ server/protocol.def      |  1 +
+ server/snapshot.c        | 13 +++++++------
+ server/thread.h          |  1 +
+ 4 files changed, 10 insertions(+), 7 deletions(-)
 
-diff --git a/dlls/ntdll/nt.c b/dlls/ntdll/nt.c
-index 86beb031e9c..fc8e3b1eb4e 100644
---- a/dlls/ntdll/nt.c
-+++ b/dlls/ntdll/nt.c
-@@ -2012,7 +2012,7 @@ NTSTATUS WINAPI NtQuerySystemInformation(
+diff --git a/dlls/ntdll/unix/system.c b/dlls/ntdll/unix/system.c
+index 7045bc1550b..f137ccf97a7 100644
+--- a/dlls/ntdll/unix/system.c
++++ b/dlls/ntdll/unix/system.c
+@@ -2184,7 +2184,7 @@ NTSTATUS WINAPI NtQuerySystemInformation( SYSTEM_INFORMATION_CLASS class,
+                         {
+                             memset(&spi->ti[i], 0, sizeof(spi->ti));
  
-                                     memset(&spi->ti[i], 0, sizeof(spi->ti));
- 
--                                    spi->ti[i].CreateTime.QuadPart = 0xdeadbeef;
-+                                    spi->ti[i].CreateTime.QuadPart = reply->creation_time;
-                                     spi->ti[i].ClientId.UniqueProcess = UlongToHandle(reply->pid);
-                                     spi->ti[i].ClientId.UniqueThread  = UlongToHandle(reply->tid);
-                                     spi->ti[i].dwCurrentPriority = reply->base_pri + reply->delta_pri;
+-                            spi->ti[i].CreateTime.QuadPart = 0xdeadbeef;
++                            spi->ti[i].CreateTime.QuadPart = reply->creation_time;
+                             spi->ti[i].ClientId.UniqueProcess = UlongToHandle(pid);
+                             spi->ti[i].ClientId.UniqueThread  = UlongToHandle(tid);
+                             spi->ti[i].dwCurrentPriority = base_pri + delta_pri;
 diff --git a/server/protocol.def b/server/protocol.def
-index 60865a6ffc2..15adc51462f 100644
+index 38079f23daf..89a0332691c 100644
 --- a/server/protocol.def
 +++ b/server/protocol.def
-@@ -1783,6 +1783,7 @@ enum char_info_mode
+@@ -1911,6 +1911,7 @@ enum char_info_mode
      int          count;         /* thread usage count */
      process_id_t pid;           /* process id */
      thread_id_t  tid;           /* thread id */
 +    timeout_t    creation_time; /* thread creation time */
      int          base_pri;      /* base priority */
      int          delta_pri;     /* delta priority */
- @END
+     int          unix_tid;      /* thread native pid */
 diff --git a/server/snapshot.c b/server/snapshot.c
-index e35588a136c..858fca898a7 100644
+index bdceaef5302..fe25e07e02a 100644
 --- a/server/snapshot.c
 +++ b/server/snapshot.c
-@@ -144,11 +144,12 @@ static int snapshot_next_thread( struct snapshot *snapshot, struct next_thread_r
+@@ -145,12 +145,13 @@ static int snapshot_next_thread( struct snapshot *snapshot, struct next_thread_r
          return 0;
      }
      ptr = &snapshot->threads[snapshot->thread_pos++];
@@ -49,20 +49,22 @@ index e35588a136c..858fca898a7 100644
 -    reply->tid       = get_thread_id( ptr->thread );
 -    reply->base_pri  = ptr->priority;
 -    reply->delta_pri = 0;  /* FIXME */
+-    reply->unix_tid  = ptr->thread->unix_tid;
 +    reply->count         = ptr->count;
 +    reply->pid           = get_process_id( ptr->thread->process );
 +    reply->tid           = get_thread_id( ptr->thread );
 +    reply->creation_time = get_thread_creation_time( ptr->thread );
 +    reply->base_pri      = ptr->priority;
 +    reply->delta_pri     = 0;  /* FIXME */
++    reply->unix_tid      = ptr->thread->unix_tid;
      return 1;
  }
  
 diff --git a/server/thread.h b/server/thread.h
-index 282199149e6..2098c76a472 100644
+index 5d12d24dd89..43b17534693 100644
 --- a/server/thread.h
 +++ b/server/thread.h
-@@ -145,5 +145,6 @@ static inline void clear_error(void)             { set_error(0); }
+@@ -150,5 +150,6 @@ static inline void clear_error(void)             { set_error(0); }
  static inline void set_win32_error( unsigned int err ) { set_error( 0xc0010000 | err ); }
  
  static inline thread_id_t get_thread_id( struct thread *thread ) { return thread->id; }
@@ -70,5 +72,5 @@ index 282199149e6..2098c76a472 100644
  
  #endif  /* __WINE_SERVER_THREAD_H */
 -- 
-2.11.0
+2.27.0
 
diff --git a/patches/ntdll-ThreadTime/0003-ntdll-Fill-process-kernel-and-user-time.patch b/patches/ntdll-ThreadTime/0003-ntdll-Fill-process-kernel-and-user-time.patch
deleted file mode 100644
index 529f621e3..000000000
--- a/patches/ntdll-ThreadTime/0003-ntdll-Fill-process-kernel-and-user-time.patch
+++ /dev/null
@@ -1,162 +0,0 @@
-From 2fb8a13c53a38377e8c64d202f91c2b5997669d7 Mon Sep 17 00:00:00 2001
-From: =?UTF-8?q?Michael=20M=C3=BCller?= <michael@fds-team.de>
-Date: Thu, 9 Mar 2017 16:27:23 +0100
-Subject: [PATCH] ntdll: Fill process kernel and user time.
-
----
- dlls/ntdll/nt.c         |  6 ++-
- dlls/ntdll/ntdll_misc.h |  4 ++
- dlls/ntdll/thread.c     | 84 +++++++++++++++++++++++------------------
- 3 files changed, 57 insertions(+), 37 deletions(-)
-
-diff --git a/dlls/ntdll/nt.c b/dlls/ntdll/nt.c
-index 6f17225b983..bdd169fb335 100644
---- a/dlls/ntdll/nt.c
-+++ b/dlls/ntdll/nt.c
-@@ -2646,6 +2646,7 @@ NTSTATUS WINAPI NtQuerySystemInformation(
-         {
-             SYSTEM_PROCESS_INFORMATION* spi = SystemInformation;
-             SYSTEM_PROCESS_INFORMATION* last = NULL;
-+            unsigned long clk_tck = sysconf(_SC_CLK_TCK);
-             HANDLE hSnap = 0;
-             WCHAR procname[1024];
-             WCHAR* exename;
-@@ -2683,7 +2684,7 @@ NTSTATUS WINAPI NtQuerySystemInformation(
- 
-                         if (Length >= len + procstructlen)
-                         {
--                            /* ftCreationTime, ftUserTime, ftKernelTime;
-+                            /* ftCreationTime;
-                              * vmCounters, ioCounters
-                              */
-  
-@@ -2701,6 +2702,9 @@ NTSTATUS WINAPI NtQuerySystemInformation(
- 
-                             /* spi->ti will be set later on */
- 
-+                            if (reply->unix_pid != -1)
-+                                read_process_time(reply->unix_pid, -1, clk_tck,
-+                                                  &spi->KernelTime, &spi->UserTime);
-                         }
-                         len += procstructlen;
-                     }
-diff --git a/dlls/ntdll/ntdll_misc.h b/dlls/ntdll/ntdll_misc.h
-index 27e7141bc65..f30cfa2e36b 100644
---- a/dlls/ntdll/ntdll_misc.h
-+++ b/dlls/ntdll/ntdll_misc.h
-@@ -301,6 +301,10 @@ void     WINAPI LdrInitializeThunk(CONTEXT*,void**,ULONG_PTR,ULONG_PTR);
- #define InterlockedCompareExchange64(dest,xchg,cmp) RtlInterlockedCompareExchange64(dest,xchg,cmp)
- #endif
- 
-+/* process / thread time */
-+extern BOOL read_process_time(int unix_pid, int unix_tid, unsigned long clk_tck,
-+                              LARGE_INTEGER *kernel, LARGE_INTEGER *user) DECLSPEC_HIDDEN;
-+
- /* string functions */
- int    __cdecl NTDLL_tolower( int c );
- int    __cdecl _stricmp( LPCSTR str1, LPCSTR str2 );
-diff --git a/dlls/ntdll/thread.c b/dlls/ntdll/thread.c
-index de355c51fdd..18f4f5533e2 100644
---- a/dlls/ntdll/thread.c
-+++ b/dlls/ntdll/thread.c
-@@ -154,6 +154,53 @@ static ULONG_PTR get_image_addr(void)
- #endif
- 
- 
-+
-+BOOL read_process_time(int unix_pid, int unix_tid, unsigned long clk_tck,
-+                       LARGE_INTEGER *kernel, LARGE_INTEGER *user)
-+{
-+#ifdef __linux__
-+    unsigned long usr, sys;
-+    char buf[512], *pos;
-+    FILE *fp;
-+    int i;
-+
-+    /* based on https://github.com/torvalds/linux/blob/master/fs/proc/array.c */
-+    if (unix_tid != -1)
-+        sprintf( buf, "/proc/%u/task/%u/stat", unix_pid, unix_tid );
-+    else
-+        sprintf( buf, "/proc/%u/stat", unix_pid );
-+    if ((fp = fopen( buf, "r" )))
-+    {
-+        pos = fgets( buf, sizeof(buf), fp );
-+        fclose( fp );
-+
-+        /* format of first chunk is "%d (%s) %c" - we have to skip to the last ')'
-+         * to avoid misinterpreting the string. */
-+        if (pos) pos = strrchr( pos, ')' );
-+        if (pos) pos = strchr( pos + 1, ' ' );
-+        if (pos) pos++;
-+
-+        /* skip over the following fields: state, ppid, pgid, sid, tty_nr, tty_pgrp,
-+         * task->flags, min_flt, cmin_flt, maj_flt, cmaj_flt */
-+        for (i = 0; (i < 11) && pos; i++)
-+        {
-+            pos = strchr( pos + 1, ' ' );
-+            if (pos) pos++;
-+        }
-+
-+        /* the next two values are user and system time */
-+        if (pos && (sscanf( pos, "%lu %lu", &usr, &sys ) == 2))
-+        {
-+            kernel->QuadPart = (ULONGLONG)sys * 10000000 / clk_tck;
-+            user->QuadPart   = (ULONGLONG)usr * 10000000 / clk_tck;
-+            return TRUE;
-+        }
-+    }
-+#endif
-+    return FALSE;
-+}
-+
-+
- /***********************************************************************
-  *		__wine_dbg_get_channel_flags  (NTDLL.@)
-  *
-@@ -988,42 +1035,7 @@ NTSTATUS WINAPI NtQueryInformationThread( HANDLE handle, THREADINFOCLASS class,
- #ifdef __linux__
-                 /* only /proc provides exact values for a specific thread */
-                 if (unix_pid != -1 && unix_tid != -1)
--                {
--                    unsigned long usr, sys;
--                    char buf[512], *pos;
--                    FILE *fp;
--                    int i;
--
--                    /* based on https://github.com/torvalds/linux/blob/master/fs/proc/array.c */
--                    sprintf( buf, "/proc/%u/task/%u/stat", unix_pid, unix_tid );
--                    if ((fp = fopen( buf, "r" )))
--                    {
--                        pos = fgets( buf, sizeof(buf), fp );
--                        fclose( fp );
--
--                        /* format of first chunk is "%d (%s) %c" - we have to skip to the last ')'
--                         * to avoid misinterpreting the string. */
--                        if (pos) pos = strrchr( pos, ')' );
--                        if (pos) pos = strchr( pos + 1, ' ' );
--                        if (pos) pos++;
--
--                        /* skip over the following fields: state, ppid, pgid, sid, tty_nr, tty_pgrp,
--                         * task->flags, min_flt, cmin_flt, maj_flt, cmaj_flt */
--                        for (i = 0; (i < 11) && pos; i++)
--                        {
--                            pos = strchr( pos + 1, ' ' );
--                            if (pos) pos++;
--                        }
--
--                        /* the next two values are user and system time */
--                        if (pos && (sscanf( pos, "%lu %lu", &usr, &sys ) == 2))
--                        {
--                            kusrt.KernelTime.QuadPart = (ULONGLONG)sys * 10000000 / clk_tck;
--                            kusrt.UserTime.QuadPart   = (ULONGLONG)usr * 10000000 / clk_tck;
--                            filled_times = TRUE;
--                        }
--                    }
--                }
-+                    filled_times = read_process_time(unix_pid, unix_tid, clk_tck, &kusrt.KernelTime, &kusrt.UserTime);
- #endif
- 
-                 /* get values for current process instead */
--- 
-2.26.2
-
diff --git a/patches/ntdll-ThreadTime/0004-ntdll-Set-process-start-time.patch b/patches/ntdll-ThreadTime/0004-ntdll-Set-process-start-time.patch
index e905d2544..10bdb13e5 100644
--- a/patches/ntdll-ThreadTime/0004-ntdll-Set-process-start-time.patch
+++ b/patches/ntdll-ThreadTime/0004-ntdll-Set-process-start-time.patch
@@ -1,31 +1,31 @@
-From e048ad0cd3879fb8f752af7e2eeda770864f9982 Mon Sep 17 00:00:00 2001
+From 72c4b3f95ad4c8a8ed31ad61c3678cf7d534fba9 Mon Sep 17 00:00:00 2001
 From: =?UTF-8?q?Michael=20M=C3=BCller?= <michael@fds-team.de>
 Date: Thu, 9 Mar 2017 16:32:59 +0100
-Subject: ntdll: Set process start time.
+Subject: [PATCH] ntdll: Set process start time.
 
 ---
- dlls/ntdll/nt.c     |  1 +
- server/protocol.def |  1 +
- server/snapshot.c   | 15 ++++++++-------
+ dlls/ntdll/unix/system.c |  1 +
+ server/protocol.def      |  1 +
+ server/snapshot.c        | 15 ++++++++-------
  3 files changed, 10 insertions(+), 7 deletions(-)
 
-diff --git a/dlls/ntdll/nt.c b/dlls/ntdll/nt.c
-index 03cfd032bc..45572cb393 100644
---- a/dlls/ntdll/nt.c
-+++ b/dlls/ntdll/nt.c
-@@ -2058,6 +2058,7 @@ NTSTATUS WINAPI NtQuerySystemInformation(
-                             spi->UniqueProcessId = UlongToHandle(reply->pid);
-                             spi->ParentProcessId = UlongToHandle(reply->ppid);
-                             spi->HandleCount = reply->handles;
-+                            spi->CreationTime.QuadPart = reply->start_time;
+diff --git a/dlls/ntdll/unix/system.c b/dlls/ntdll/unix/system.c
+index f137ccf97a7..94915bd9e47 100644
+--- a/dlls/ntdll/unix/system.c
++++ b/dlls/ntdll/unix/system.c
+@@ -2137,6 +2137,7 @@ NTSTATUS WINAPI NtQuerySystemInformation( SYSTEM_INFORMATION_CLASS class,
+                         spi->UniqueProcessId = UlongToHandle(reply->pid);
+                         spi->ParentProcessId = UlongToHandle(reply->ppid);
+                         spi->HandleCount = reply->handles;
++                        spi->CreationTime.QuadPart = reply->start_time;
  
-                             /* spi->ti will be set later on */
+                         /* spi->ti will be set later on */
  
 diff --git a/server/protocol.def b/server/protocol.def
-index 320e34384a..1347defe70 100644
+index 89a0332691c..b29e014958e 100644
 --- a/server/protocol.def
 +++ b/server/protocol.def
-@@ -1808,6 +1808,7 @@ enum char_info_mode
+@@ -1899,6 +1899,7 @@ enum char_info_mode
      int          priority;      /* process priority */
      int          handles;       /* number of handles */
      int          unix_pid;      /* Unix pid */
@@ -34,7 +34,7 @@ index 320e34384a..1347defe70 100644
  @END
  
 diff --git a/server/snapshot.c b/server/snapshot.c
-index f2903d522e..e509e0aca9 100644
+index fe25e07e02a..b6b790e21bd 100644
 --- a/server/snapshot.c
 +++ b/server/snapshot.c
 @@ -114,13 +114,14 @@ static int snapshot_next_process( struct snapshot *snapshot, struct next_process
@@ -60,5 +60,5 @@ index f2903d522e..e509e0aca9 100644
      {
          data_size_t len = min( exe_module->namelen, get_reply_max_size() );
 -- 
-2.11.0
+2.27.0
 
diff --git a/patches/ntdll-ThreadTime/0005-ntdll-Fill-out-thread-times-in-process-enumeration.patch b/patches/ntdll-ThreadTime/0005-ntdll-Fill-out-thread-times-in-process-enumeration.patch
deleted file mode 100644
index 0c317b378..000000000
--- a/patches/ntdll-ThreadTime/0005-ntdll-Fill-out-thread-times-in-process-enumeration.patch
+++ /dev/null
@@ -1,82 +0,0 @@
-From 6c3b7e0065c239b488bb224c1c67ff971562fdca Mon Sep 17 00:00:00 2001
-From: =?UTF-8?q?Michael=20M=C3=BCller?= <michael@fds-team.de>
-Date: Thu, 9 Mar 2017 21:14:13 +0100
-Subject: ntdll: Fill out thread times in process enumeration.
-
----
- dlls/ntdll/nt.c     | 6 ++++++
- server/protocol.def | 1 +
- server/snapshot.c   | 1 +
- server/thread.h     | 1 +
- 4 files changed, 9 insertions(+)
-
-diff --git a/dlls/ntdll/nt.c b/dlls/ntdll/nt.c
-index 8c54e7edfb..8b84cd865b 100644
---- a/dlls/ntdll/nt.c
-+++ b/dlls/ntdll/nt.c
-@@ -1928,6 +1928,7 @@ NTSTATUS WINAPI NtQuerySystemInformation(
-             WCHAR* exename;
-             DWORD wlen = 0;
-             DWORD procstructlen = 0;
-+            int unix_pid = -1;
- 
-             SERVER_START_REQ( create_snapshot )
-             {
-@@ -1982,6 +1983,7 @@ NTSTATUS WINAPI NtQuerySystemInformation(
-                             if (reply->unix_pid != -1)
-                                 read_process_time(reply->unix_pid, -1, clk_tck,
-                                                   &spi->KernelTime, &spi->UserTime);
-+                            unix_pid = reply->unix_pid;
-                         }
-                         len += procstructlen;
-                     }
-@@ -2022,6 +2024,10 @@ NTSTATUS WINAPI NtQuerySystemInformation(
-                                     spi->ti[i].ClientId.UniqueThread  = UlongToHandle(reply->tid);
-                                     spi->ti[i].dwCurrentPriority = reply->base_pri + reply->delta_pri;
-                                     spi->ti[i].dwBasePriority = reply->base_pri;
-+
-+                                    if (unix_pid != -1 && reply->unix_tid != -1)
-+                                        read_process_time(unix_pid, reply->unix_tid, clk_tck,
-+                                                          &spi->ti[i].KernelTime, &spi->ti[i].UserTime);
-                                     i++;
-                                 }
-                             }
-diff --git a/server/protocol.def b/server/protocol.def
-index b0b837cb93..542060decd 100644
---- a/server/protocol.def
-+++ b/server/protocol.def
-@@ -1789,6 +1789,7 @@ enum char_info_mode
-     timeout_t    creation_time; /* thread creation time */
-     int          base_pri;      /* base priority */
-     int          delta_pri;     /* delta priority */
-+    int          unix_tid;      /* Unix tid */
- @END
- 
- 
-diff --git a/server/snapshot.c b/server/snapshot.c
-index cc8a9be1b5..a32207c720 100644
---- a/server/snapshot.c
-+++ b/server/snapshot.c
-@@ -151,6 +151,7 @@ static int snapshot_next_thread( struct snapshot *snapshot, struct next_thread_r
-     reply->creation_time = get_thread_creation_time( ptr->thread );
-     reply->base_pri      = ptr->priority;
-     reply->delta_pri     = 0;  /* FIXME */
-+    reply->unix_tid      = get_thread_unix_tid( ptr->thread );
-     return 1;
- }
- 
-diff --git a/server/thread.h b/server/thread.h
-index 2098c76a47..9614e2140d 100644
---- a/server/thread.h
-+++ b/server/thread.h
-@@ -145,6 +145,7 @@ static inline void clear_error(void)             { set_error(0); }
- static inline void set_win32_error( unsigned int err ) { set_error( 0xc0010000 | err ); }
- 
- static inline thread_id_t get_thread_id( struct thread *thread ) { return thread->id; }
-+static inline int get_thread_unix_tid( struct thread *thread ) { return thread->unix_tid; }
- static inline timeout_t get_thread_creation_time( struct thread *thread ) { return thread->creation_time; }
- 
- #endif  /* __WINE_SERVER_THREAD_H */
--- 
-2.11.0
-
diff --git a/patches/ntdll-ThreadTime/definition b/patches/ntdll-ThreadTime/definition
index 7693a411a..95158a91b 100644
--- a/patches/ntdll-ThreadTime/definition
+++ b/patches/ntdll-ThreadTime/definition
@@ -1,5 +1,2 @@
-Fixes: [20230] Return correct values for GetThreadTimes function
 Fixes: Return correct thread creation time in SystemProcessInformation
 Fixes: Fill process virtual memory counters in NtQuerySystemInformation
-# Split awkwardly between .so and .dll parts (NtQuerySystemInformation vs NtQueryProcess/ThreadInformation).
-Disabled: true
diff --git a/patches/ntdll-ThreadTime/0006-ntdll-Fill-process-virtual-memory-counters-in-NtQuer.patch b/patches/ntdll-ThreadTime/xxx6-ntdll-Fill-process-virtual-memory-counters-in-NtQuer.patch
similarity index 100%
rename from patches/ntdll-ThreadTime/0006-ntdll-Fill-process-virtual-memory-counters-in-NtQuer.patch
rename to patches/ntdll-ThreadTime/xxx6-ntdll-Fill-process-virtual-memory-counters-in-NtQuer.patch
diff --git a/patches/patchinstall.sh b/patches/patchinstall.sh
index 1017d0983..4c153e8c6 100755
--- a/patches/patchinstall.sh
+++ b/patches/patchinstall.sh
@@ -176,6 +176,7 @@ patch_enable_all ()
 	enable_ntdll_ForceBottomUpAlloc="$1"
 	enable_ntdll_HashLinks="$1"
 	enable_ntdll_Heap_Improvements="$1"
+	enable_ntdll_Hide_Wine_Exports="$1"
 	enable_ntdll_Interrupt_0x2e="$1"
 	enable_ntdll_Junction_Points="$1"
 	enable_ntdll_Manifest_Range="$1"
@@ -194,6 +195,7 @@ patch_enable_all ()
 	enable_ntdll_SystemInterruptInformation="$1"
 	enable_ntdll_SystemModuleInformation="$1"
 	enable_ntdll_SystemRoot_Symlink="$1"
+	enable_ntdll_ThreadTime="$1"
 	enable_ntdll_WRITECOPY="$1"
 	enable_ntdll_Zero_mod_name="$1"
 	enable_ntdll_aarch_TEB="$1"
@@ -223,6 +225,7 @@ patch_enable_all ()
 	enable_server_Inherited_ACLs="$1"
 	enable_server_Object_Types="$1"
 	enable_server_PeekMessage="$1"
+	enable_server_Realtime_Priority="$1"
 	enable_server_Registry_Notifications="$1"
 	enable_server_Signal_Thread="$1"
 	enable_server_Stored_ACLs="$1"
@@ -612,6 +615,9 @@ patch_enable ()
 		ntdll-Heap_Improvements)
 			enable_ntdll_Heap_Improvements="$2"
 			;;
+		ntdll-Hide_Wine_Exports)
+			enable_ntdll_Hide_Wine_Exports="$2"
+			;;
 		ntdll-Interrupt-0x2e)
 			enable_ntdll_Interrupt_0x2e="$2"
 			;;
@@ -666,6 +672,9 @@ patch_enable ()
 		ntdll-SystemRoot_Symlink)
 			enable_ntdll_SystemRoot_Symlink="$2"
 			;;
+		ntdll-ThreadTime)
+			enable_ntdll_ThreadTime="$2"
+			;;
 		ntdll-WRITECOPY)
 			enable_ntdll_WRITECOPY="$2"
 			;;
@@ -753,6 +762,9 @@ patch_enable ()
 		server-PeekMessage)
 			enable_server_PeekMessage="$2"
 			;;
+		server-Realtime_Priority)
+			enable_server_Realtime_Priority="$2"
+			;;
 		server-Registry_Notifications)
 			enable_server_Registry_Notifications="$2"
 			;;
@@ -1505,6 +1517,13 @@ if test "$enable_shell32_Progress_Dialog" -eq 1; then
 	enable_shell32_SHFileOperation_Move=1
 fi
 
+if test "$enable_server_Realtime_Priority" -eq 1; then
+	if test "$enable_ntdll_ThreadTime" -gt 1; then
+		abort "Patchset ntdll-ThreadTime disabled, but server-Realtime_Priority depends on that."
+	fi
+	enable_ntdll_ThreadTime=1
+fi
+
 if test "$enable_server_Object_Types" -eq 1; then
 	if test "$enable_ntdll_SystemModuleInformation" -gt 1; then
 		abort "Patchset ntdll-SystemModuleInformation disabled, but server-Object_Types depends on that."
@@ -1586,6 +1605,17 @@ if test "$enable_ntdll_Junction_Points" -eq 1; then
 	enable_ntdll_DOS_Attributes=1
 fi
 
+if test "$enable_ntdll_Hide_Wine_Exports" -eq 1; then
+	if test "$enable_advapi32_Token_Integrity_Level" -gt 1; then
+		abort "Patchset advapi32-Token_Integrity_Level disabled, but ntdll-Hide_Wine_Exports depends on that."
+	fi
+	if test "$enable_ntdll_ThreadTime" -gt 1; then
+		abort "Patchset ntdll-ThreadTime disabled, but ntdll-Hide_Wine_Exports depends on that."
+	fi
+	enable_advapi32_Token_Integrity_Level=1
+	enable_ntdll_ThreadTime=1
+fi
+
 if test "$enable_ntdll_Builtin_Prot" -eq 1; then
 	if test "$enable_ntdll_WRITECOPY" -gt 1; then
 		abort "Patchset ntdll-WRITECOPY disabled, but ntdll-Builtin_Prot depends on that."
@@ -3573,6 +3603,38 @@ if test "$enable_ntdll_Heap_Improvements" -eq 1; then
 	) >> "$patchlist"
 fi
 
+# Patchset ntdll-ThreadTime
+# |
+# | Modified files:
+# |   *	dlls/ntdll/unix/system.c, server/protocol.def, server/snapshot.c, server/thread.h
+# |
+if test "$enable_ntdll_ThreadTime" -eq 1; then
+	patch_apply ntdll-ThreadTime/0002-ntdll-Set-correct-thread-creation-time-for-SystemPro.patch
+	patch_apply ntdll-ThreadTime/0004-ntdll-Set-process-start-time.patch
+	(
+		printf '%s\n' '+    { "Michael Müller", "ntdll: Set correct thread creation time for SystemProcessInformation in NtQuerySystemInformation.", 1 },';
+		printf '%s\n' '+    { "Michael Müller", "ntdll: Set process start time.", 1 },';
+	) >> "$patchlist"
+fi
+
+# Patchset ntdll-Hide_Wine_Exports
+# |
+# | This patchset has the following (direct or indirect) dependencies:
+# |   *	Staging, advapi32-CreateRestrictedToken, advapi32-Token_Integrity_Level, ntdll-ThreadTime
+# |
+# | This patchset fixes the following Wine bugs:
+# |   *	[#38656] Add support for hiding wine version information from applications
+# |
+# | Modified files:
+# |   *	dlls/ntdll/loader.c, dlls/ntdll/ntdll_misc.h
+# |
+if test "$enable_ntdll_Hide_Wine_Exports" -eq 1; then
+	patch_apply ntdll-Hide_Wine_Exports/0001-ntdll-Add-support-for-hiding-wine-version-informatio.patch
+	(
+		printf '%s\n' '+    { "Sebastian Lackner", "ntdll: Add support for hiding wine version information from applications.", 1 },';
+	) >> "$patchlist"
+fi
+
 # Patchset ntdll-Interrupt-0x2e
 # |
 # | This patchset fixes the following Wine bugs:
@@ -4393,6 +4455,21 @@ if test "$enable_server_PeekMessage" -eq 1; then
 	) >> "$patchlist"
 fi
 
+# Patchset server-Realtime_Priority
+# |
+# | This patchset has the following (direct or indirect) dependencies:
+# |   *	ntdll-ThreadTime
+# |
+# | Modified files:
+# |   *	server/Makefile.in, server/main.c, server/scheduler.c, server/thread.c, server/thread.h
+# |
+if test "$enable_server_Realtime_Priority" -eq 1; then
+	patch_apply server-Realtime_Priority/0001-wineserver-Draft-to-implement-priority-levels-throug.patch
+	(
+		printf '%s\n' '+    { "Joakim Hernberg", "wineserver: Draft to implement priority levels through POSIX scheduling policies on linux.", 1 },';
+	) >> "$patchlist"
+fi
+
 # Patchset server-Registry_Notifications
 # |
 # | Modified files:
diff --git a/patches/server-Realtime_Priority/0001-wineserver-Draft-to-implement-priority-levels-throug.patch b/patches/server-Realtime_Priority/0001-wineserver-Draft-to-implement-priority-levels-throug.patch
index 4691e8142..ea32210e0 100644
--- a/patches/server-Realtime_Priority/0001-wineserver-Draft-to-implement-priority-levels-throug.patch
+++ b/patches/server-Realtime_Priority/0001-wineserver-Draft-to-implement-priority-levels-throug.patch
@@ -1,4 +1,4 @@
-From c85f5ea67bddac0afecdf6d0cd54bf3c6c4df42d Mon Sep 17 00:00:00 2001
+From 98bc215910ff978093b666607f2cff3f1c93b7d3 Mon Sep 17 00:00:00 2001
 From: Joakim Hernberg <jhernberg@alchemy.lu>
 Date: Tue, 31 Mar 2015 20:58:20 +0200
 Subject: [PATCH] wineserver: Draft to implement priority levels through POSIX
@@ -215,10 +215,10 @@ index 00000000000..4a5d82b208d
 +
 +#endif
 diff --git a/server/thread.c b/server/thread.c
-index d6d80a9a864..f161c8f3e24 100644
+index 23c0538150f..7feda374487 100644
 --- a/server/thread.c
 +++ b/server/thread.c
-@@ -539,7 +539,10 @@ static void set_thread_info( struct thread *thread,
+@@ -607,7 +607,10 @@ static void set_thread_info( struct thread *thread,
          if ((req->priority >= min && req->priority <= max) ||
              req->priority == THREAD_PRIORITY_IDLE ||
              req->priority == THREAD_PRIORITY_TIME_CRITICAL)
@@ -230,11 +230,11 @@ index d6d80a9a864..f161c8f3e24 100644
              set_error( STATUS_INVALID_PARAMETER );
      }
 diff --git a/server/thread.h b/server/thread.h
-index 26dbc494f3c..7957557b6cc 100644
+index 43b17534693..924f28a8697 100644
 --- a/server/thread.h
 +++ b/server/thread.h
-@@ -154,4 +154,9 @@ static inline thread_id_t get_thread_id( struct thread *thread ) { return thread
- static inline int get_thread_unix_tid( struct thread *thread ) { return thread->unix_tid; }
+@@ -152,4 +152,9 @@ static inline void set_win32_error( unsigned int err ) { set_error( 0xc0010000 |
+ static inline thread_id_t get_thread_id( struct thread *thread ) { return thread->id; }
  static inline timeout_t get_thread_creation_time( struct thread *thread ) { return thread->creation_time; }
  
 +/* scheduler functions */
@@ -244,5 +244,5 @@ index 26dbc494f3c..7957557b6cc 100644
 +
  #endif  /* __WINE_SERVER_THREAD_H */
 -- 
-2.26.0
+2.27.0
 
diff --git a/patches/server-Realtime_Priority/definition b/patches/server-Realtime_Priority/definition
index 1d17edf22..de7045a92 100644
--- a/patches/server-Realtime_Priority/definition
+++ b/patches/server-Realtime_Priority/definition
@@ -1,4 +1,2 @@
 Fixes: Support for linux priority levels for faster performance
 Depends: ntdll-ThreadTime
-# Re-enable me when ntdll-ThreadTime gets re-enabled!
-Disabled: true

diff --git a/patches/advapi32-Token_Integrity_Level/0006-ntdll-Add-function-to-create-new-tokens-for-elevatio.patch b/patches/advapi32-Token_Integrity_Level/0006-ntdll-Add-function-to-create-new-tokens-for-elevatio.patch
index f0c849a5c..542f2a79c 100644
--- a/patches/advapi32-Token_Integrity_Level/0006-ntdll-Add-function-to-create-new-tokens-for-elevatio.patch
+++ b/patches/advapi32-Token_Integrity_Level/0006-ntdll-Add-function-to-create-new-tokens-for-elevatio.patch
@@ -1,4 +1,4 @@
-From d768c632777d80f52327ba0d525a0157b113f45a Mon Sep 17 00:00:00 2001
+From 478b58d0ff4d333f25b30a506d779fd2395b2b04 Mon Sep 17 00:00:00 2001
 From: =?UTF-8?q?Michael=20M=C3=BCller?= <michael@fds-team.de>
 Date: Sat, 5 Aug 2017 01:45:29 +0200
 Subject: [PATCH] ntdll: Add function to create new tokens for elevation
@@ -14,7 +14,7 @@ Subject: [PATCH] ntdll: Add function to create new tokens for elevation
  6 files changed, 117 insertions(+)
 
 diff --git a/dlls/ntdll/ntdll.spec b/dlls/ntdll/ntdll.spec
-index 0d19e12768f..e313d5807b3 100644
+index 9fc12485592..f3e765e25a1 100644
 --- a/dlls/ntdll/ntdll.spec
 +++ b/dlls/ntdll/ntdll.spec
 @@ -1594,6 +1594,9 @@
@@ -28,11 +28,11 @@ index 0d19e12768f..e313d5807b3 100644
  @ cdecl wine_get_version() NTDLL_wine_get_version
  @ cdecl wine_get_build_id() NTDLL_wine_get_build_id
 diff --git a/dlls/ntdll/ntdll_misc.h b/dlls/ntdll/ntdll_misc.h
-index b5b08fc47ef..8476907e7ec 100644
+index f36929c5acb..1afda71c3ad 100644
 --- a/dlls/ntdll/ntdll_misc.h
 +++ b/dlls/ntdll/ntdll_misc.h
-@@ -72,6 +72,9 @@ extern void init_locale( HMODULE module ) DECLSPEC_HIDDEN;
- extern void init_user_process_params( SIZE_T data_size ) DECLSPEC_HIDDEN;
+@@ -71,6 +71,9 @@ extern void init_locale( HMODULE module ) DECLSPEC_HIDDEN;
+ extern void init_user_process_params(void) DECLSPEC_HIDDEN;
  extern NTSTATUS restart_process( RTL_USER_PROCESS_PARAMETERS *params, NTSTATUS status ) DECLSPEC_HIDDEN;
  
 +/* token */
@@ -71,10 +71,10 @@ index b1cc307d2ae..2e5fee216ef 100644
  *  NtQueryInformationProcess		[NTDLL.@]
  *  ZwQueryInformationProcess		[NTDLL.@]
 diff --git a/server/protocol.def b/server/protocol.def
-index 6e0f309450a..7315f8ac4ea 100644
+index 62c93423104..4001b3cd095 100644
 --- a/server/protocol.def
 +++ b/server/protocol.def
-@@ -3755,6 +3755,14 @@ struct handle_info
+@@ -3757,6 +3757,14 @@ struct handle_info
  @END
  
  
diff --git a/patches/ntdll-ApiSetMap/0001-ntdll-Add-dummy-apiset-to-PEB.patch b/patches/ntdll-ApiSetMap/0001-ntdll-Add-dummy-apiset-to-PEB.patch
index 3987c7cdf..aa1d626e3 100644
--- a/patches/ntdll-ApiSetMap/0001-ntdll-Add-dummy-apiset-to-PEB.patch
+++ b/patches/ntdll-ApiSetMap/0001-ntdll-Add-dummy-apiset-to-PEB.patch
@@ -1,38 +1,38 @@
-From 708e627172f61b5d0744135e31d4e9e3f7b32536 Mon Sep 17 00:00:00 2001
+From 803d1e468279ef5efc5f8f872e2fb9db2466cd75 Mon Sep 17 00:00:00 2001
 From: =?UTF-8?q?Michael=20M=C3=BCller?= <michael@fds-team.de>
 Date: Mon, 3 Apr 2017 01:06:26 +0200
 Subject: [PATCH] ntdll: Add dummy apiset to PEB.
 
 ---
- dlls/ntdll/thread.c |  2 ++
+ dlls/ntdll/loader.c |  2 ++
  include/Makefile.in |  1 +
  include/apiset.h    | 37 +++++++++++++++++++++++++++++++++++++
  include/winternl.h  |  3 ++-
  4 files changed, 42 insertions(+), 1 deletion(-)
  create mode 100644 include/apiset.h
 
-diff --git a/dlls/ntdll/thread.c b/dlls/ntdll/thread.c
-index 21e8b0c08f8..24254d4b43c 100644
---- a/dlls/ntdll/thread.c
-+++ b/dlls/ntdll/thread.c
-@@ -71,6 +71,7 @@ static PEB_LDR_DATA ldr;
+diff --git a/dlls/ntdll/loader.c b/dlls/ntdll/loader.c
+index bd19474e844..00a146278a5 100644
+--- a/dlls/ntdll/loader.c
++++ b/dlls/ntdll/loader.c
+@@ -166,6 +166,7 @@ static PEB_LDR_DATA ldr = { sizeof(ldr), TRUE };
  static RTL_BITMAP tls_bitmap;
  static RTL_BITMAP tls_expansion_bitmap;
  static RTL_BITMAP fls_bitmap;
 +static API_SET_NAMESPACE_ARRAY apiset_map;
- static int nb_threads = 1;
  
- struct ldt_copy *__wine_ldt_copy = NULL;
-@@ -300,6 +301,7 @@ TEB *thread_init(void)
+ static CRITICAL_SECTION fls_section;
+ static CRITICAL_SECTION_DEBUG fls_critsect_debug =
+@@ -4016,6 +4017,7 @@ void __wine_process_init(void)
  
-     peb = teb->Peb;
+     peb->LdrData            = &ldr;
      peb->FastPebLock        = &peb_lock;
 +    peb->ApiSetMap          = &apiset_map;
      peb->TlsBitmap          = &tls_bitmap;
      peb->TlsExpansionBitmap = &tls_expansion_bitmap;
      peb->FlsBitmap          = &fls_bitmap;
 diff --git a/include/Makefile.in b/include/Makefile.in
-index 9796dd8e5d9..2bc410f4308 100644
+index 90fb873f203..015ad7c6942 100644
 --- a/include/Makefile.in
 +++ b/include/Makefile.in
 @@ -15,6 +15,7 @@ SOURCES = \
@@ -87,7 +87,7 @@ index 00000000000..6801cd5f509
 +
 +#endif
 diff --git a/include/winternl.h b/include/winternl.h
-index f362790dbca..b33e346885f 100644
+index 9a70a2014f1..1d3ef1f5adb 100644
 --- a/include/winternl.h
 +++ b/include/winternl.h
 @@ -23,6 +23,7 @@
@@ -108,5 +108,5 @@ index f362790dbca..b33e346885f 100644
      PRTL_BITMAP                  TlsBitmap;                         /* 040/078 */
      ULONG                        TlsBitmapBits[2];                  /* 044/080 */
 -- 
-2.26.2
+2.27.0
 
diff --git a/patches/ntdll-ApiSetMap/definition b/patches/ntdll-ApiSetMap/definition
index 042ee383c..617c1fef4 100644
--- a/patches/ntdll-ApiSetMap/definition
+++ b/patches/ntdll-ApiSetMap/definition
@@ -1 +1,2 @@
 Fixes: [44658] Add dummy apiset to PEB struct
+Depends: ntdll-FLS_Callbacks
diff --git a/patches/ntdll-FLS_Callbacks/0001-kernelbase-Maintain-FLS-storage-list-in-PEB.patch b/patches/ntdll-FLS_Callbacks/0001-kernelbase-Maintain-FLS-storage-list-in-PEB.patch
index 4761fc87e..1280bddee 100644
--- a/patches/ntdll-FLS_Callbacks/0001-kernelbase-Maintain-FLS-storage-list-in-PEB.patch
+++ b/patches/ntdll-FLS_Callbacks/0001-kernelbase-Maintain-FLS-storage-list-in-PEB.patch
@@ -1,4 +1,4 @@
-From 96a5e54b5f72d99a9c3d03ac4c5800fe324e44c0 Mon Sep 17 00:00:00 2001
+From 44e9e950fc95d382d7a1038743e54d897da94107 Mon Sep 17 00:00:00 2001
 From: Paul Gofman <pgofman@codeweavers.com>
 Date: Thu, 23 Apr 2020 14:32:23 +0300
 Subject: [PATCH] kernelbase: Maintain FLS storage list in PEB.
@@ -92,7 +92,7 @@ index b91d279e327..924f19703bf 100644
     test_threadpool();
  }
 diff --git a/dlls/kernelbase/thread.c b/dlls/kernelbase/thread.c
-index f44f2ff6538..3423fe8c727 100644
+index f20d460d07d..3c77b6a42f4 100644
 --- a/dlls/kernelbase/thread.c
 +++ b/dlls/kernelbase/thread.c
 @@ -38,6 +38,10 @@
@@ -106,7 +106,7 @@ index f44f2ff6538..3423fe8c727 100644
  
  /***********************************************************************
   * Threads
-@@ -928,6 +932,19 @@ static void init_fiber_context( struct fiber_data *fiber )
+@@ -915,6 +919,19 @@ static void init_fiber_context( struct fiber_data *fiber )
  #endif
  }
  
@@ -126,7 +126,7 @@ index f44f2ff6538..3423fe8c727 100644
  
  /***********************************************************************
   *           CreateFiber   (kernelbase.@)
-@@ -1035,7 +1052,16 @@ void WINAPI DECLSPEC_HOTPATCH DeleteFiber( LPVOID fiber_ptr )
+@@ -1022,7 +1039,16 @@ void WINAPI DECLSPEC_HOTPATCH DeleteFiber( LPVOID fiber_ptr )
          RtlExitUserThread( 1 );
      }
      RtlFreeUserStack( fiber->stack_allocation );
@@ -144,7 +144,7 @@ index f44f2ff6538..3423fe8c727 100644
      HeapFree( GetProcessHeap(), 0, fiber );
  }
  
-@@ -1057,6 +1083,19 @@ void WINAPI DECLSPEC_HOTPATCH SwitchToFiber( LPVOID fiber )
+@@ -1044,6 +1070,19 @@ void WINAPI DECLSPEC_HOTPATCH SwitchToFiber( LPVOID fiber )
      struct fiber_data *new_fiber = fiber;
      struct fiber_data *current_fiber = NtCurrentTeb()->Tib.u.FiberData;
  
@@ -164,7 +164,7 @@ index f44f2ff6538..3423fe8c727 100644
      current_fiber->except      = NtCurrentTeb()->Tib.ExceptionList;
      current_fiber->stack_limit = NtCurrentTeb()->Tib.StackLimit;
      current_fiber->fls_slots   = NtCurrentTeb()->FlsSlots;
-@@ -1082,9 +1121,7 @@ DWORD WINAPI DECLSPEC_HOTPATCH FlsAlloc( PFLS_CALLBACK_FUNCTION callback )
+@@ -1069,9 +1108,7 @@ DWORD WINAPI DECLSPEC_HOTPATCH FlsAlloc( PFLS_CALLBACK_FUNCTION callback )
      PEB * const peb = NtCurrentTeb()->Peb;
  
      RtlAcquirePebLock();
@@ -175,7 +175,7 @@ index f44f2ff6538..3423fe8c727 100644
      {
          SetLastError( ERROR_NOT_ENOUGH_MEMORY );
          index = FLS_OUT_OF_INDEXES;
-@@ -1094,9 +1131,7 @@ DWORD WINAPI DECLSPEC_HOTPATCH FlsAlloc( PFLS_CALLBACK_FUNCTION callback )
+@@ -1081,9 +1118,7 @@ DWORD WINAPI DECLSPEC_HOTPATCH FlsAlloc( PFLS_CALLBACK_FUNCTION callback )
          index = RtlFindClearBitsAndSet( peb->FlsBitmap, 1, 1 );
          if (index != ~0U)
          {
@@ -186,7 +186,7 @@ index f44f2ff6538..3423fe8c727 100644
              {
                  RtlClearBits( peb->FlsBitmap, index, 1 );
                  index = FLS_OUT_OF_INDEXES;
-@@ -1104,8 +1139,8 @@ DWORD WINAPI DECLSPEC_HOTPATCH FlsAlloc( PFLS_CALLBACK_FUNCTION callback )
+@@ -1091,8 +1126,8 @@ DWORD WINAPI DECLSPEC_HOTPATCH FlsAlloc( PFLS_CALLBACK_FUNCTION callback )
              }
              else
              {
@@ -197,7 +197,7 @@ index f44f2ff6538..3423fe8c727 100644
              }
          }
          else SetLastError( ERROR_NO_MORE_ITEMS );
-@@ -1129,7 +1164,7 @@ BOOL WINAPI DECLSPEC_HOTPATCH FlsFree( DWORD index )
+@@ -1116,7 +1151,7 @@ BOOL WINAPI DECLSPEC_HOTPATCH FlsFree( DWORD index )
      {
          /* FIXME: call Fls callback */
          /* FIXME: add equivalent of ThreadZeroTlsCell here */
@@ -206,7 +206,7 @@ index f44f2ff6538..3423fe8c727 100644
      }
      else SetLastError( ERROR_INVALID_PARAMETER );
      RtlReleasePebLock();
-@@ -1148,7 +1183,7 @@ PVOID WINAPI DECLSPEC_HOTPATCH FlsGetValue( DWORD index )
+@@ -1135,7 +1170,7 @@ PVOID WINAPI DECLSPEC_HOTPATCH FlsGetValue( DWORD index )
          return NULL;
      }
      SetLastError( ERROR_SUCCESS );
@@ -215,7 +215,7 @@ index f44f2ff6538..3423fe8c727 100644
  }
  
  
-@@ -1162,14 +1197,12 @@ BOOL WINAPI DECLSPEC_HOTPATCH FlsSetValue( DWORD index, PVOID data )
+@@ -1149,14 +1184,12 @@ BOOL WINAPI DECLSPEC_HOTPATCH FlsSetValue( DWORD index, PVOID data )
          SetLastError( ERROR_INVALID_PARAMETER );
          return FALSE;
      }
@@ -233,12 +233,12 @@ index f44f2ff6538..3423fe8c727 100644
  }
  
 diff --git a/dlls/ntdll/loader.c b/dlls/ntdll/loader.c
-index b884b43b154..c0a18669590 100644
+index efacc0c081e..e61c6e5abc7 100644
 --- a/dlls/ntdll/loader.c
 +++ b/dlls/ntdll/loader.c
-@@ -153,6 +153,15 @@ static CRITICAL_SECTION_DEBUG dlldir_critsect_debug =
- };
- static CRITICAL_SECTION dlldir_section = { &dlldir_critsect_debug, -1, 0, 0, 0, 0 };
+@@ -167,6 +167,15 @@ static RTL_BITMAP tls_bitmap;
+ static RTL_BITMAP tls_expansion_bitmap;
+ static RTL_BITMAP fls_bitmap;
  
 +static CRITICAL_SECTION fls_section;
 +static CRITICAL_SECTION_DEBUG fls_critsect_debug =
@@ -252,7 +252,7 @@ index b884b43b154..c0a18669590 100644
  static WINE_MODREF *cached_modref;
  static WINE_MODREF *current_modref;
  static WINE_MODREF *last_failed_modref;
-@@ -193,6 +202,16 @@ static RTL_UNLOAD_EVENT_TRACE unload_traces[RTL_UNLOAD_EVENT_TRACE_NUMBER];
+@@ -207,6 +216,16 @@ static RTL_UNLOAD_EVENT_TRACE unload_traces[RTL_UNLOAD_EVENT_TRACE_NUMBER];
  static RTL_UNLOAD_EVENT_TRACE *unload_trace_ptr;
  static unsigned int unload_trace_seq;
  
@@ -269,7 +269,7 @@ index b884b43b154..c0a18669590 100644
  static void module_push_unload_trace( const LDR_DATA_TABLE_ENTRY *ldr )
  {
      RTL_UNLOAD_EVENT_TRACE *ptr = &unload_traces[unload_trace_seq];
-@@ -3187,6 +3206,13 @@ void WINAPI LdrShutdownThread(void)
+@@ -3201,6 +3220,13 @@ void WINAPI LdrShutdownThread(void)
      /* don't do any detach calls if process is exiting */
      if (process_detaching) return;
  
@@ -283,7 +283,7 @@ index b884b43b154..c0a18669590 100644
      RtlEnterCriticalSection( &loader_section );
      wm = get_modref( NtCurrentTeb()->Peb->ImageBaseAddress );
  
-@@ -3400,6 +3426,7 @@ PIMAGE_NT_HEADERS WINAPI RtlImageNtHeader(HMODULE hModule)
+@@ -3414,6 +3440,7 @@ PIMAGE_NT_HEADERS WINAPI RtlImageNtHeader(HMODULE hModule)
   */
  void WINAPI LdrInitializeThunk( CONTEXT *context, void **entry, ULONG_PTR unknown3, ULONG_PTR unknown4 )
  {
@@ -291,7 +291,7 @@ index b884b43b154..c0a18669590 100644
      static int attach_done;
      int i;
      NTSTATUS status;
-@@ -3435,6 +3462,25 @@ void WINAPI LdrInitializeThunk( CONTEXT *context, void **entry, ULONG_PTR unknow
+@@ -3449,6 +3476,25 @@ void WINAPI LdrInitializeThunk( CONTEXT *context, void **entry, ULONG_PTR unknow
      InsertHeadList( &tls_links, &NtCurrentTeb()->TlsLinks );
      RtlReleasePebLock();
  
diff --git a/patches/ntdll-HashLinks/0001-ntdll-Implement-HashLinks-field-in-LDR-module-data.patch b/patches/ntdll-HashLinks/0001-ntdll-Implement-HashLinks-field-in-LDR-module-data.patch
index 98e7d7ca5..b8a981a69 100644
--- a/patches/ntdll-HashLinks/0001-ntdll-Implement-HashLinks-field-in-LDR-module-data.patch
+++ b/patches/ntdll-HashLinks/0001-ntdll-Implement-HashLinks-field-in-LDR-module-data.patch
@@ -1,4 +1,4 @@
-From 250b8699aa64096bb4b38d454c03b57afe91a619 Mon Sep 17 00:00:00 2001
+From 54796a7cba6fd2017c4826874ccd09a9662aff00 Mon Sep 17 00:00:00 2001
 From: =?UTF-8?q?Michael=20M=C3=BCller?= <michael@fds-team.de>
 Date: Mon, 3 Apr 2017 05:30:27 +0200
 Subject: [PATCH] ntdll: Implement HashLinks field in LDR module data.
@@ -115,7 +115,7 @@ index 59965984a67..95f18fb71e3 100644
      test_Loader();
  }
 diff --git a/dlls/ntdll/loader.c b/dlls/ntdll/loader.c
-index 42cdc628021..df8e0c69185 100644
+index efacc0c081e..b0b5c93b41b 100644
 --- a/dlls/ntdll/loader.c
 +++ b/dlls/ntdll/loader.c
 @@ -121,6 +121,9 @@ struct file_id
@@ -128,7 +128,7 @@ index 42cdc628021..df8e0c69185 100644
  /* internal representation of loaded modules */
  typedef struct _wine_modref
  {
-@@ -446,6 +449,52 @@ static void call_ldr_notifications( ULONG reason, LDR_DATA_TABLE_ENTRY *module )
+@@ -460,6 +463,52 @@ static void call_ldr_notifications( ULONG reason, LDR_DATA_TABLE_ENTRY *module )
      }
  }
  
@@ -181,7 +181,7 @@ index 42cdc628021..df8e0c69185 100644
  /*************************************************************************
   *		get_modref
   *
-@@ -1188,7 +1237,12 @@ static WINE_MODREF *alloc_module( HMODULE hModule, const UNICODE_STRING *nt_name
+@@ -1202,7 +1251,12 @@ static WINE_MODREF *alloc_module( HMODULE hModule, const UNICODE_STRING *nt_name
                     &wm->ldr.InLoadOrderLinks);
      InsertTailList(&NtCurrentTeb()->Peb->LdrData->InMemoryOrderModuleList,
                     &wm->ldr.InMemoryOrderLinks);
@@ -194,7 +194,7 @@ index 42cdc628021..df8e0c69185 100644
  
      if (!(nt->OptionalHeader.DllCharacteristics & IMAGE_DLLCHARACTERISTICS_NX_COMPAT))
      {
-@@ -1894,6 +1948,7 @@ static NTSTATUS build_module( LPCWSTR load_path, const UNICODE_STRING *nt_name,
+@@ -1908,6 +1962,7 @@ static NTSTATUS build_module( LPCWSTR load_path, const UNICODE_STRING *nt_name,
              /* the module has only be inserted in the load & memory order lists */
              RemoveEntryList(&wm->ldr.InLoadOrderLinks);
              RemoveEntryList(&wm->ldr.InMemoryOrderLinks);
@@ -202,7 +202,7 @@ index 42cdc628021..df8e0c69185 100644
  
              /* FIXME: there are several more dangling references
               * left. Including dlls loaded by this dll before the
-@@ -3226,6 +3281,7 @@ static void free_modref( WINE_MODREF *wm )
+@@ -3244,6 +3299,7 @@ static void free_modref( WINE_MODREF *wm )
  {
      RemoveEntryList(&wm->ldr.InLoadOrderLinks);
      RemoveEntryList(&wm->ldr.InMemoryOrderLinks);
@@ -210,15 +210,15 @@ index 42cdc628021..df8e0c69185 100644
      if (wm->ldr.InInitializationOrderLinks.Flink)
          RemoveEntryList(&wm->ldr.InInitializationOrderLinks);
  
-@@ -3945,6 +4001,7 @@ void __wine_process_init(void)
-     SIZE_T info_size;
-     TEB *teb;
-     PEB *peb;
+@@ -3937,6 +3993,7 @@ void __wine_process_init(void)
+     ULONG_PTR val;
+     TEB *teb = NtCurrentTeb();
+     PEB *peb = teb->Peb;
 +    DWORD i;
  
-     if (!unix_funcs) load_ntdll_so( ntdll_module, &__wine_spec_nt_header );
- 
-@@ -3961,6 +4018,10 @@ void __wine_process_init(void)
+     peb->LdrData            = &ldr;
+     peb->FastPebLock        = &peb_lock;
+@@ -3974,6 +4031,10 @@ void __wine_process_init(void)
      load_global_options();
      version_init();
  
@@ -229,7 +229,7 @@ index 42cdc628021..df8e0c69185 100644
      /* setup the load callback and create ntdll modref */
      RtlInitUnicodeString( &nt_name, ntdllW );
      status = build_so_dll_module( params->DllPath.Buffer, &nt_name, ntdll_module, 0, &wm );
-@@ -4034,6 +4095,9 @@ void __wine_process_init(void)
+@@ -4047,6 +4108,9 @@ void __wine_process_init(void)
      teb->Tib.StackLimit = stack.StackLimit;
      teb->DeallocationStack = stack.DeallocationStack;
  
@@ -240,10 +240,10 @@ index 42cdc628021..df8e0c69185 100644
  }
  
 diff --git a/include/winternl.h b/include/winternl.h
-index 3ff15f28c15..59e9eddd26d 100644
+index 9a70a2014f1..424481b1a6d 100644
 --- a/include/winternl.h
 +++ b/include/winternl.h
-@@ -2369,8 +2369,8 @@ typedef struct _LDR_DATA_TABLE_ENTRY
+@@ -2370,8 +2370,8 @@ typedef struct _LDR_DATA_TABLE_ENTRY
      ULONG               Flags;
      SHORT               LoadCount;
      SHORT               TlsIndex;
diff --git a/patches/ntdll-Syscall_Emulation/definition b/patches/ntdll-Syscall_Emulation/definition
index 035c18c1f..c914e59bd 100644
--- a/patches/ntdll-Syscall_Emulation/definition
+++ b/patches/ntdll-Syscall_Emulation/definition
@@ -1,2 +1,4 @@
 Fixes: [48291] Detroit: Become Human crashes on launch
 Depends: winebuild-Fake_Dlls
+# Re-enable me when winebuild-Fake_Dlls gets re-enabled!
+Disabled: true
diff --git a/patches/ntdll-Threading/definition b/patches/ntdll-Threading/definition
index d0e88f9b5..7e5979135 100644
--- a/patches/ntdll-Threading/definition
+++ b/patches/ntdll-Threading/definition
@@ -1 +1,3 @@
 Fixes: Fix race-condition when threads are killed during shutdown
+# Needs careful review to determine if this is still needed. Deferring.
+Disabled: true
diff --git a/patches/patchinstall.sh b/patches/patchinstall.sh
index 99376f3dd..1017d0983 100755
--- a/patches/patchinstall.sh
+++ b/patches/patchinstall.sh
@@ -189,13 +189,11 @@ patch_enable_all ()
 	enable_ntdll_RtlQueryRegistryValuesEx="$1"
 	enable_ntdll_Serial_Port_Detection="$1"
 	enable_ntdll_Status_Mapping="$1"
-	enable_ntdll_Syscall_Emulation="$1"
 	enable_ntdll_SystemCodeIntegrityInformation="$1"
 	enable_ntdll_SystemExtendedProcessInformation="$1"
 	enable_ntdll_SystemInterruptInformation="$1"
 	enable_ntdll_SystemModuleInformation="$1"
 	enable_ntdll_SystemRoot_Symlink="$1"
-	enable_ntdll_Threading="$1"
 	enable_ntdll_WRITECOPY="$1"
 	enable_ntdll_Zero_mod_name="$1"
 	enable_ntdll_aarch_TEB="$1"
@@ -280,7 +278,6 @@ patch_enable_all ()
 	enable_wineboot_HKEY_DYN_DATA="$1"
 	enable_wineboot_ProxySettings="$1"
 	enable_wineboot_drivers_etc_Stubs="$1"
-	enable_winebuild_Fake_Dlls="$1"
 	enable_winecfg_Libraries="$1"
 	enable_winecfg_Staging="$1"
 	enable_wined3d_Accounting="$1"
@@ -654,9 +651,6 @@ patch_enable ()
 		ntdll-Status_Mapping)
 			enable_ntdll_Status_Mapping="$2"
 			;;
-		ntdll-Syscall_Emulation)
-			enable_ntdll_Syscall_Emulation="$2"
-			;;
 		ntdll-SystemCodeIntegrityInformation)
 			enable_ntdll_SystemCodeIntegrityInformation="$2"
 			;;
@@ -672,9 +666,6 @@ patch_enable ()
 		ntdll-SystemRoot_Symlink)
 			enable_ntdll_SystemRoot_Symlink="$2"
 			;;
-		ntdll-Threading)
-			enable_ntdll_Threading="$2"
-			;;
 		ntdll-WRITECOPY)
 			enable_ntdll_WRITECOPY="$2"
 			;;
@@ -927,9 +918,6 @@ patch_enable ()
 		wineboot-drivers_etc_Stubs)
 			enable_wineboot_drivers_etc_Stubs="$2"
 			;;
-		winebuild-Fake_Dlls)
-			enable_winebuild_Fake_Dlls="$2"
-			;;
 		winecfg-Libraries)
 			enable_winecfg_Libraries="$2"
 			;;
@@ -1584,28 +1572,6 @@ if test "$enable_ntdll_SystemCodeIntegrityInformation" -eq 1; then
 	enable_ntdll_SystemExtendedProcessInformation=1
 fi
 
-if test "$enable_ntdll_Syscall_Emulation" -eq 1; then
-	if test "$enable_winebuild_Fake_Dlls" -gt 1; then
-		abort "Patchset winebuild-Fake_Dlls disabled, but ntdll-Syscall_Emulation depends on that."
-	fi
-	enable_winebuild_Fake_Dlls=1
-fi
-
-if test "$enable_winebuild_Fake_Dlls" -eq 1; then
-	if test "$enable_ntdll_ApiSetMap" -gt 1; then
-		abort "Patchset ntdll-ApiSetMap disabled, but winebuild-Fake_Dlls depends on that."
-	fi
-	if test "$enable_ntdll_WRITECOPY" -gt 1; then
-		abort "Patchset ntdll-WRITECOPY disabled, but winebuild-Fake_Dlls depends on that."
-	fi
-	if test "$enable_ws2_32_WSACleanup" -gt 1; then
-		abort "Patchset ws2_32-WSACleanup disabled, but winebuild-Fake_Dlls depends on that."
-	fi
-	enable_ntdll_ApiSetMap=1
-	enable_ntdll_WRITECOPY=1
-	enable_ws2_32_WSACleanup=1
-fi
-
 if test "$enable_ntdll_NtDevicePath" -eq 1; then
 	if test "$enable_ntdll_Pipe_SpecialCharacters" -gt 1; then
 		abort "Patchset ntdll-Pipe_SpecialCharacters disabled, but ntdll-NtDevicePath depends on that."
@@ -1627,6 +1593,13 @@ if test "$enable_ntdll_Builtin_Prot" -eq 1; then
 	enable_ntdll_WRITECOPY=1
 fi
 
+if test "$enable_ntdll_ApiSetMap" -eq 1; then
+	if test "$enable_ntdll_FLS_Callbacks" -gt 1; then
+		abort "Patchset ntdll-FLS_Callbacks disabled, but ntdll-ApiSetMap depends on that."
+	fi
+	enable_ntdll_FLS_Callbacks=1
+fi
+
 if test "$enable_kernel32_Processor_Group" -eq 1; then
 	if test "$enable_api_ms_win_Stub_DLLs" -gt 1; then
 		abort "Patchset api-ms-win-Stub_DLLs disabled, but kernel32-Processor_Group depends on that."
@@ -3331,13 +3304,42 @@ if test "$enable_ntdll_Activation_Context" -eq 1; then
 	) >> "$patchlist"
 fi
 
+# Patchset ntdll-FLS_Callbacks
+# |
+# | This patchset fixes the following Wine bugs:
+# |   *	[#49012] Application build with .NET CoreRT crashes due to FLS callbacks not being called
+# |
+# | Modified files:
+# |   *	dlls/kernel32/tests/fiber.c, dlls/kernel32/tests/loader.c, dlls/kernel32/tests/thread.c, dlls/kernelbase/thread.c,
+# | 	dlls/ntdll/loader.c
+# |
+if test "$enable_ntdll_FLS_Callbacks" -eq 1; then
+	patch_apply ntdll-FLS_Callbacks/0001-kernelbase-Maintain-FLS-storage-list-in-PEB.patch
+	patch_apply ntdll-FLS_Callbacks/0002-kernelbase-Don-t-use-PEB-lock-for-FLS-data.patch
+	patch_apply ntdll-FLS_Callbacks/0003-kernelbase-Zero-all-FLS-slots-instances-in-FlsFree.patch
+	patch_apply ntdll-FLS_Callbacks/0004-ntdll-Call-FLS-callbacks-on-thread-shutdown.patch
+	patch_apply ntdll-FLS_Callbacks/0005-kernelbase-Call-FLS-callbacks-from-FlsFree.patch
+	patch_apply ntdll-FLS_Callbacks/0006-kernelbase-Call-FLS-callbacks-from-DeleteFiber.patch
+	(
+		printf '%s\n' '+    { "Paul Gofman", "kernelbase: Maintain FLS storage list in PEB.", 1 },';
+		printf '%s\n' '+    { "Paul Gofman", "kernelbase: Don'\''t use PEB lock for FLS data.", 1 },';
+		printf '%s\n' '+    { "Paul Gofman", "kernelbase: Zero all FLS slots instances in FlsFree().", 1 },';
+		printf '%s\n' '+    { "Paul Gofman", "ntdll: Call FLS callbacks on thread shutdown.", 1 },';
+		printf '%s\n' '+    { "Paul Gofman", "kernelbase: Call FLS callbacks from FlsFree().", 1 },';
+		printf '%s\n' '+    { "Paul Gofman", "kernelbase: Call FLS callbacks from DeleteFiber().", 1 },';
+	) >> "$patchlist"
+fi
+
 # Patchset ntdll-ApiSetMap
 # |
+# | This patchset has the following (direct or indirect) dependencies:
+# |   *	ntdll-FLS_Callbacks
+# |
 # | This patchset fixes the following Wine bugs:
 # |   *	[#44658] Add dummy apiset to PEB struct
 # |
 # | Modified files:
-# |   *	dlls/ntdll/thread.c, include/Makefile.in, include/apiset.h, include/winternl.h
+# |   *	dlls/ntdll/loader.c, include/Makefile.in, include/apiset.h, include/winternl.h
 # |
 if test "$enable_ntdll_ApiSetMap" -eq 1; then
 	patch_apply ntdll-ApiSetMap/0001-ntdll-Add-dummy-apiset-to-PEB.patch
@@ -3486,32 +3488,6 @@ if test "$enable_ntdll_Exception" -eq 1; then
 	) >> "$patchlist"
 fi
 
-# Patchset ntdll-FLS_Callbacks
-# |
-# | This patchset fixes the following Wine bugs:
-# |   *	[#49012] Application build with .NET CoreRT crashes due to FLS callbacks not being called
-# |
-# | Modified files:
-# |   *	dlls/kernel32/tests/fiber.c, dlls/kernel32/tests/loader.c, dlls/kernel32/tests/thread.c, dlls/kernelbase/thread.c,
-# | 	dlls/ntdll/loader.c
-# |
-if test "$enable_ntdll_FLS_Callbacks" -eq 1; then
-	patch_apply ntdll-FLS_Callbacks/0001-kernelbase-Maintain-FLS-storage-list-in-PEB.patch
-	patch_apply ntdll-FLS_Callbacks/0002-kernelbase-Don-t-use-PEB-lock-for-FLS-data.patch
-	patch_apply ntdll-FLS_Callbacks/0003-kernelbase-Zero-all-FLS-slots-instances-in-FlsFree.patch
-	patch_apply ntdll-FLS_Callbacks/0004-ntdll-Call-FLS-callbacks-on-thread-shutdown.patch
-	patch_apply ntdll-FLS_Callbacks/0005-kernelbase-Call-FLS-callbacks-from-FlsFree.patch
-	patch_apply ntdll-FLS_Callbacks/0006-kernelbase-Call-FLS-callbacks-from-DeleteFiber.patch
-	(
-		printf '%s\n' '+    { "Paul Gofman", "kernelbase: Maintain FLS storage list in PEB.", 1 },';
-		printf '%s\n' '+    { "Paul Gofman", "kernelbase: Don'\''t use PEB lock for FLS data.", 1 },';
-		printf '%s\n' '+    { "Paul Gofman", "kernelbase: Zero all FLS slots instances in FlsFree().", 1 },';
-		printf '%s\n' '+    { "Paul Gofman", "ntdll: Call FLS callbacks on thread shutdown.", 1 },';
-		printf '%s\n' '+    { "Paul Gofman", "kernelbase: Call FLS callbacks from FlsFree().", 1 },';
-		printf '%s\n' '+    { "Paul Gofman", "kernelbase: Call FLS callbacks from DeleteFiber().", 1 },';
-	) >> "$patchlist"
-fi
-
 # Patchset ntdll-FileFsFullSizeInformation
 # |
 # | Modified files:
@@ -3822,96 +3798,6 @@ if test "$enable_ntdll_Status_Mapping" -eq 1; then
 	) >> "$patchlist"
 fi
 
-# Patchset ws2_32-WSACleanup
-# |
-# | This patchset fixes the following Wine bugs:
-# |   *	[#18670] Properly close sockets when WSACleanup is called
-# |
-# | Modified files:
-# |   *	dlls/ntdll/ntdll.spec, dlls/ntdll/server.c, dlls/ntdll/unix/loader.c, dlls/ntdll/unix/server.c,
-# | 	dlls/ntdll/unix/unix_private.h, dlls/ntdll/unixlib.h, dlls/ws2_32/socket.c, dlls/ws2_32/tests/sock.c,
-# | 	include/wine/server.h, server/protocol.def, server/sock.c
-# |
-if test "$enable_ws2_32_WSACleanup" -eq 1; then
-	patch_apply ws2_32-WSACleanup/0001-ws2_32-Proper-WSACleanup-implementation-using-winese.patch
-	patch_apply ws2_32-WSACleanup/0002-ws2_32-Invalidate-client-side-file-descriptor-cache-.patch
-	(
-		printf '%s\n' '+    { "Matt Durgavich", "ws2_32: Proper WSACleanup implementation using wineserver function.", 2 },';
-		printf '%s\n' '+    { "Sebastian Lackner", "ws2_32: Invalidate client-side file descriptor cache in WSACleanup.", 1 },';
-	) >> "$patchlist"
-fi
-
-# Patchset winebuild-Fake_Dlls
-# |
-# | This patchset has the following (direct or indirect) dependencies:
-# |   *	ntdll-ApiSetMap, ntdll-WRITECOPY, ws2_32-WSACleanup
-# |
-# | This patchset fixes the following Wine bugs:
-# |   *	[#21232] Chromium-based browser engines (Chrome, Opera, Comodo Dragon, SRWare Iron) crash on startup unless '--no-
-# | 	sandbox' is used (native API sandboxing/hooking scheme incompatible with Wine)
-# |   *	[#42741] StarCraft I: 1.18 PTR fails to initialize ClientSdk.dll
-# |   *	[#45349] Multiple applications and games crash due to missing support for 64-bit syscall thunks (StreetFighter V)
-# |   *	[#45573] League of Legends 8.12+ fails to start a game (anticheat engine, hooking of syscall return instructions)
-# |   *	[#45650] chromium 32-bit sandbox expects different syscall thunks depending on Windows version
-# |
-# | Modified files:
-# |   *	dlls/dbghelp/cpu_i386.c, dlls/kernel32/tests/loader.c, dlls/krnl386.exe16/kernel.c,
-# | 	dlls/krnl386.exe16/kernel16_private.h, dlls/krnl386.exe16/ne_module.c, dlls/krnl386.exe16/ne_segment.c,
-# | 	dlls/krnl386.exe16/task.c, dlls/krnl386.exe16/thunk.c, dlls/krnl386.exe16/wowthunk.c, dlls/ntdll/actctx.c,
-# | 	dlls/ntdll/loader.c, dlls/ntdll/locale.c, dlls/ntdll/ntdll_misc.h, dlls/ntdll/path.c, dlls/ntdll/signal_i386.c,
-# | 	dlls/ntdll/tests/exception.c, dlls/ntdll/thread.c, dlls/ntdll/unix/signal_i386.c, dlls/ntdll/unix/thread.c,
-# | 	dlls/ntdll/unix/unix_private.h, dlls/ntdll/unix/virtual.c, dlls/ntdll/unixlib.h, dlls/system.drv16/system.c,
-# | 	dlls/toolhelp.dll16/toolhelp.c, dlls/user.exe16/message.c, dlls/user.exe16/user.c, dlls/user.exe16/window.c,
-# | 	include/winternl.h, libs/wine/loader.c, server/mapping.c, tools/winebuild/build.h, tools/winebuild/import.c,
-# | 	tools/winebuild/parser.c, tools/winebuild/relay.c, tools/winebuild/res32.c, tools/winebuild/spec16.c,
-# | 	tools/winebuild/spec32.c, tools/winebuild/utils.c
-# |
-if test "$enable_winebuild_Fake_Dlls" -eq 1; then
-	patch_apply winebuild-Fake_Dlls/0001-kernel32-tests-Add-basic-tests-for-fake-dlls.patch
-	patch_apply winebuild-Fake_Dlls/0002-krnl386.exe16-Do-not-abuse-WOW32Reserved-field-for-1.patch
-	patch_apply winebuild-Fake_Dlls/0003-winebuild-Generate-syscall-thunks-for-ntdll-exports.patch
-	patch_apply winebuild-Fake_Dlls/0004-winebuild-Use-multipass-label-system-to-generate-fak.patch
-	patch_apply winebuild-Fake_Dlls/0005-winebuild-Add-stub-functions-in-fake-dlls.patch
-	patch_apply winebuild-Fake_Dlls/0006-winebuild-Add-syscall-thunks-in-fake-dlls.patch
-	patch_apply winebuild-Fake_Dlls/0007-winebuild-Fix-size-of-relocation-information-in-fake.patch
-	patch_apply winebuild-Fake_Dlls/0008-winebuild-Try-to-make-sure-RVA-matches-between-fake-.patch
-	patch_apply winebuild-Fake_Dlls/0009-libs-wine-Use-same-file-alignment-for-fake-and-built.patch
-	patch_apply winebuild-Fake_Dlls/0010-tools-winebuild-Add-syscall-thunks-for-64-bit.patch
-	patch_apply winebuild-Fake_Dlls/0011-ntdll-Call-NtOpenFile-through-syscall-thunk.patch
-	(
-		printf '%s\n' '+    { "Michael Müller", "kernel32/tests: Add basic tests for fake dlls.", 1 },';
-		printf '%s\n' '+    { "Sebastian Lackner", "krnl386.exe16: Do not abuse WOW32Reserved field for 16-bit stack address.", 1 },';
-		printf '%s\n' '+    { "Michael Müller", "winebuild: Generate syscall thunks for ntdll exports.", 1 },';
-		printf '%s\n' '+    { "Michael Müller", "winebuild: Use multipass label system to generate fake dlls.", 1 },';
-		printf '%s\n' '+    { "Michael Müller", "winebuild: Add stub functions in fake dlls.", 1 },';
-		printf '%s\n' '+    { "Michael Müller", "winebuild: Add syscall thunks in fake dlls.", 1 },';
-		printf '%s\n' '+    { "Michael Müller", "winebuild: Fix size of relocation information in fake dlls.", 1 },';
-		printf '%s\n' '+    { "Michael Müller", "winebuild: Try to make sure RVA matches between fake and builtin DLLs.", 1 },';
-		printf '%s\n' '+    { "Michael Müller", "libs/wine: Use same file alignment for fake and builtin DLLs.", 1 },';
-		printf '%s\n' '+    { "Michael Müller", "tools/winebuild: Add syscall thunks for 64 bit.", 1 },';
-		printf '%s\n' '+    { "Paul Gofman", "ntdll: Call NtOpenFile through syscall thunk.", 1 },';
-	) >> "$patchlist"
-fi
-
-# Patchset ntdll-Syscall_Emulation
-# |
-# | This patchset has the following (direct or indirect) dependencies:
-# |   *	ntdll-ApiSetMap, ntdll-WRITECOPY, ws2_32-WSACleanup, winebuild-Fake_Dlls
-# |
-# | This patchset fixes the following Wine bugs:
-# |   *	[#48291] Detroit: Become Human crashes on launch
-# |
-# | Modified files:
-# |   *	configure.ac, dlls/ntdll/thread.c, dlls/ntdll/unix/signal_x86_64.c, dlls/ntdll/unix/thread.c,
-# | 	dlls/ntdll/unix/unix_private.h, dlls/ntdll/unixlib.h, tools/winebuild/spec32.c
-# |
-if test "$enable_ntdll_Syscall_Emulation" -eq 1; then
-	patch_apply ntdll-Syscall_Emulation/0001-ntdll-Support-x86_64-syscall-emulation.patch
-	(
-		printf '%s\n' '+    { "Paul Gofman", "ntdll: Support x86_64 syscall emulation.", 1 },';
-	) >> "$patchlist"
-fi
-
 # Patchset ntdll-SystemExtendedProcessInformation
 # |
 # | This patchset fixes the following Wine bugs:
@@ -3995,18 +3881,6 @@ if test "$enable_ntdll_SystemRoot_Symlink" -eq 1; then
 	) >> "$patchlist"
 fi
 
-# Patchset ntdll-Threading
-# |
-# | Modified files:
-# |   *	dlls/ntdll/thread.c, dlls/ntdll/unix/thread.c
-# |
-if test "$enable_ntdll_Threading" -eq 1; then
-	patch_apply ntdll-Threading/0001-ntdll-Fix-race-condition-when-threads-are-killed-dur.patch
-	(
-		printf '%s\n' '+    { "Sebastian Lackner", "ntdll: Fix race-condition when threads are killed during shutdown.", 1 },';
-	) >> "$patchlist"
-fi
-
 # Patchset ntdll-Zero_mod_name
 # |
 # | Modified files:
@@ -4333,6 +4207,25 @@ if test "$enable_riched20_IText_Interface" -eq 1; then
 	) >> "$patchlist"
 fi
 
+# Patchset ws2_32-WSACleanup
+# |
+# | This patchset fixes the following Wine bugs:
+# |   *	[#18670] Properly close sockets when WSACleanup is called
+# |
+# | Modified files:
+# |   *	dlls/ntdll/ntdll.spec, dlls/ntdll/server.c, dlls/ntdll/unix/loader.c, dlls/ntdll/unix/server.c,
+# | 	dlls/ntdll/unix/unix_private.h, dlls/ntdll/unixlib.h, dlls/ws2_32/socket.c, dlls/ws2_32/tests/sock.c,
+# | 	include/wine/server.h, server/protocol.def, server/sock.c
+# |
+if test "$enable_ws2_32_WSACleanup" -eq 1; then
+	patch_apply ws2_32-WSACleanup/0001-ws2_32-Proper-WSACleanup-implementation-using-winese.patch
+	patch_apply ws2_32-WSACleanup/0002-ws2_32-Invalidate-client-side-file-descriptor-cache-.patch
+	(
+		printf '%s\n' '+    { "Matt Durgavich", "ws2_32: Proper WSACleanup implementation using wineserver function.", 2 },';
+		printf '%s\n' '+    { "Sebastian Lackner", "ws2_32: Invalidate client-side file descriptor cache in WSACleanup.", 1 },';
+	) >> "$patchlist"
+fi
+
 # Patchset server-Desktop_Refcount
 # |
 # | This patchset has the following (direct or indirect) dependencies:
diff --git a/patches/winebuild-Fake_Dlls/definition b/patches/winebuild-Fake_Dlls/definition
index 2f30fce6c..bf2454336 100644
--- a/patches/winebuild-Fake_Dlls/definition
+++ b/patches/winebuild-Fake_Dlls/definition
@@ -6,3 +6,13 @@ Fixes: [45650] chromium 32-bit sandbox expects different syscall thunks dependin
 Depends: ntdll-WRITECOPY
 Depends: ws2_32-WSACleanup
 Depends: ntdll-ApiSetMap
+
+# As of 43be3507c04, unless I've misread, ntdll.dll no longer has the chance to
+# run code before ntdll.so performs process initialization. Unfortunately,
+# ntdll.so is still making calls to Nt* exports during that process
+# initialization, which in practice means it's calling syscall thunks. In order
+# for this series to work, we need to poke __wine_syscall_dispatcher into the
+# TEB before those calls are made. Fixing this would require a nontrivial amount
+# of effort, which will be obviated as soon as Alexandre finishes splitting
+# ntdll upstream.
+Disabled: true
diff --git a/patches/wow64cpu-Wow64Transition/0002-ntdll-Add-a-stub-implementation-of-Wow64Transition.patch b/patches/wow64cpu-Wow64Transition/0002-ntdll-Add-a-stub-implementation-of-Wow64Transition.patch
index f5c5c6c58..8bb5f9a96 100644
--- a/patches/wow64cpu-Wow64Transition/0002-ntdll-Add-a-stub-implementation-of-Wow64Transition.patch
+++ b/patches/wow64cpu-Wow64Transition/0002-ntdll-Add-a-stub-implementation-of-Wow64Transition.patch
@@ -1,4 +1,4 @@
-From 384a965d9dd8ad2d946682e45c409795bba292a2 Mon Sep 17 00:00:00 2001
+From 5dc9d48bb56202065ebbf2888834f138505bb6a7 Mon Sep 17 00:00:00 2001
 From: Zebediah Figura <z.figura12@gmail.com>
 Date: Wed, 8 Aug 2018 20:00:15 -0500
 Subject: [PATCH] ntdll: Add a stub implementation of Wow64Transition.
@@ -9,10 +9,10 @@ Subject: [PATCH] ntdll: Add a stub implementation of Wow64Transition.
  2 files changed, 13 insertions(+), 1 deletion(-)
 
 diff --git a/dlls/ntdll/loader.c b/dlls/ntdll/loader.c
-index 42b681e4cd3..c8cdf4f5436 100644
+index c471755139f..57f1805bf18 100644
 --- a/dlls/ntdll/loader.c
 +++ b/dlls/ntdll/loader.c
-@@ -4324,6 +4324,7 @@ NTSTATUS WINAPI NtLoadDriver( const UNICODE_STRING *DriverServiceName )
+@@ -3918,6 +3918,7 @@ NTSTATUS WINAPI NtLoadDriver( const UNICODE_STRING *DriverServiceName )
      return STATUS_NOT_IMPLEMENTED;
  }
  
@@ -20,7 +20,7 @@ index 42b681e4cd3..c8cdf4f5436 100644
  
  /***********************************************************************
   *           NtUnloadDriver   (NTDLL.@)
-@@ -4382,13 +4383,16 @@ void __wine_process_init(void)
+@@ -3949,13 +3950,16 @@ void __wine_process_init(void)
      static const WCHAR ntdllW[] = {'\\','?','?','\\','C',':','\\','w','i','n','d','o','w','s','\\',
                                     's','y','s','t','e','m','3','2','\\',
                                     'n','t','d','l','l','.','d','l','l',0};
@@ -38,9 +38,9 @@ index 42b681e4cd3..c8cdf4f5436 100644
      NTSTATUS status;
      ANSI_STRING func_name;
      UNICODE_STRING nt_name;
-@@ -4431,6 +4435,13 @@ void __wine_process_init(void)
+@@ -4012,6 +4016,13 @@ void __wine_process_init(void)
          MESSAGE( "wine: could not load kernel32.dll, status %x\n", status );
-         exit(1);
+         NtTerminateProcess( GetCurrentProcess(), status );
      }
 +
 +    RtlInitUnicodeString( &nt_name, wow64cpuW );
@@ -53,7 +53,7 @@ index 42b681e4cd3..c8cdf4f5436 100644
      if ((status = LdrGetProcedureAddress( wm->ldr.DllBase, &func_name,
                                            0, (void **)&kernel32_start_process )) != STATUS_SUCCESS)
 diff --git a/dlls/ntdll/ntdll.spec b/dlls/ntdll/ntdll.spec
-index e313d5807b3..b20ded3d108 100644
+index f3e765e25a1..4d448dc8f37 100644
 --- a/dlls/ntdll/ntdll.spec
 +++ b/dlls/ntdll/ntdll.spec
 @@ -1112,6 +1112,7 @@
@@ -65,5 +65,5 @@ index e313d5807b3..b20ded3d108 100644
  @ stdcall -private ZwAccessCheck(ptr long long ptr ptr ptr ptr ptr) NtAccessCheck
  @ stdcall -private ZwAccessCheckAndAuditAlarm(ptr long ptr ptr ptr long ptr long ptr ptr ptr) NtAccessCheckAndAuditAlarm
 -- 
-2.26.2
+2.27.0
 

diff --git a/patches/server-Desktop_Refcount/0001-server-Introduce-a-new-alloc_handle-object-callback..patch b/patches/server-Desktop_Refcount/0001-server-Introduce-a-new-alloc_handle-object-callback..patch
index 4a5801bc2..b87350285 100644
--- a/patches/server-Desktop_Refcount/0001-server-Introduce-a-new-alloc_handle-object-callback..patch
+++ b/patches/server-Desktop_Refcount/0001-server-Introduce-a-new-alloc_handle-object-callback..patch
@@ -1,4 +1,4 @@
-From 1a225cf237fa461cffb5ecb9287ffa2c46d26a44 Mon Sep 17 00:00:00 2001
+From 07f5dd1db6399c54be793ca496546bb28947aaae Mon Sep 17 00:00:00 2001
 From: Sebastian Lackner <sebastian@fds-team.de>
 Date: Fri, 4 Dec 2015 10:36:47 +0100
 Subject: [PATCH] server: Introduce a new alloc_handle object callback. (v2)
@@ -10,7 +10,7 @@ Signed-off-by: Sebastian Lackner <sebastian@fds-team.de>
  server/change.c     |  1 +
  server/clipboard.c  |  1 +
  server/completion.c |  1 +
- server/console.c    |  3 +++
+ server/console.c    |  4 ++++
  server/debugger.c   |  2 ++
  server/device.c     |  4 ++++
  server/directory.c  |  2 ++
@@ -39,7 +39,7 @@ Signed-off-by: Sebastian Lackner <sebastian@fds-team.de>
  server/timer.c      |  1 +
  server/token.c      |  1 +
  server/winstation.c |  2 ++
- 34 files changed, 78 insertions(+), 4 deletions(-)
+ 34 files changed, 79 insertions(+), 4 deletions(-)
 
 diff --git a/server/async.c b/server/async.c
 index 03994e8fac2..9feafd01847 100644
@@ -110,7 +110,7 @@ index db04727b93b..e72a155eeeb 100644
      completion_destroy         /* destroy */
  };
 diff --git a/server/console.c b/server/console.c
-index 729cfa40612..71db7b36f44 100644
+index 729cfa40612..a0d9bd87ab4 100644
 --- a/server/console.c
 +++ b/server/console.c
 @@ -97,6 +97,7 @@ static const struct object_ops console_input_ops =
@@ -137,6 +137,14 @@ index 729cfa40612..71db7b36f44 100644
      no_close_handle,                  /* close_handle */
      screen_buffer_destroy             /* destroy */
  };
+@@ -241,6 +244,7 @@ static const struct object_ops console_device_ops =
+     default_unlink_name,              /* unlink_name */
+     console_device_open_file,         /* open_file */
+     no_kernel_obj_list,               /* get_kernel_obj_list */
++    no_alloc_handle,                  /* alloc_handle */
+     no_close_handle,                  /* close_handle */
+     no_destroy                        /* destroy */
+ };
 diff --git a/server/debugger.c b/server/debugger.c
 index 401ce36a47a..b7746d55c0e 100644
 --- a/server/debugger.c
@@ -234,10 +242,10 @@ index d339d85aa45..a78d73d9e78 100644
      no_destroy                   /* destroy */
  };
 diff --git a/server/fd.c b/server/fd.c
-index df0c5bb3f78..6d999dee17d 100644
+index 7ea8ac273e5..a4741724fb6 100644
 --- a/server/fd.c
 +++ b/server/fd.c
-@@ -225,6 +225,7 @@ static const struct object_ops fd_ops =
+@@ -221,6 +221,7 @@ static const struct object_ops fd_ops =
      NULL,                     /* unlink_name */
      no_open_file,             /* open_file */
      no_kernel_obj_list,       /* get_kernel_obj_list */
@@ -245,7 +253,7 @@ index df0c5bb3f78..6d999dee17d 100644
      no_close_handle,          /* close_handle */
      fd_destroy                /* destroy */
  };
-@@ -265,6 +266,7 @@ static const struct object_ops device_ops =
+@@ -261,6 +262,7 @@ static const struct object_ops device_ops =
      NULL,                     /* unlink_name */
      no_open_file,             /* open_file */
      no_kernel_obj_list,       /* get_kernel_obj_list */
@@ -253,7 +261,7 @@ index df0c5bb3f78..6d999dee17d 100644
      no_close_handle,          /* close_handle */
      device_destroy            /* destroy */
  };
-@@ -304,6 +306,7 @@ static const struct object_ops inode_ops =
+@@ -300,6 +302,7 @@ static const struct object_ops inode_ops =
      NULL,                     /* unlink_name */
      no_open_file,             /* open_file */
      no_kernel_obj_list,       /* get_kernel_obj_list */
@@ -261,7 +269,7 @@ index df0c5bb3f78..6d999dee17d 100644
      no_close_handle,          /* close_handle */
      inode_destroy             /* destroy */
  };
-@@ -345,6 +348,7 @@ static const struct object_ops file_lock_ops =
+@@ -341,6 +344,7 @@ static const struct object_ops file_lock_ops =
      NULL,                       /* unlink_name */
      no_open_file,               /* open_file */
      no_kernel_obj_list,         /* get_kernel_obj_list */
@@ -367,7 +375,7 @@ index 781e6f3141a..6f0321393e2 100644
      mailslot_device_destroy         /* destroy */
  };
 diff --git a/server/mapping.c b/server/mapping.c
-index 002f3215af2..da60f768603 100644
+index 0941dd87c05..42c207b3367 100644
 --- a/server/mapping.c
 +++ b/server/mapping.c
 @@ -79,6 +79,7 @@ static const struct object_ops ranges_ops =
@@ -492,7 +500,7 @@ index f0b889d5899..13c59694c46 100644
  extern void no_destroy( struct object *obj );
  #ifdef DEBUG_OBJECTS
 diff --git a/server/process.c b/server/process.c
-index 5060e760e0a..638d785dafd 100644
+index 283edc09c5e..3134bf415a0 100644
 --- a/server/process.c
 +++ b/server/process.c
 @@ -88,6 +88,7 @@ static const struct object_ops process_ops =
@@ -552,7 +560,7 @@ index dcbb3f791e1..6e5eddcd257 100644
      key_destroy              /* destroy */
  };
 diff --git a/server/request.c b/server/request.c
-index 321bb6cfa81..1f34e7e9a54 100644
+index 4c1f30a5fe7..42cc83c3037 100644
 --- a/server/request.c
 +++ b/server/request.c
 @@ -107,6 +107,7 @@ static const struct object_ops master_socket_ops =
@@ -684,10 +692,10 @@ index 6460acbf519..2b5ae29a45a 100644
      timer_destroy              /* destroy */
  };
 diff --git a/server/token.c b/server/token.c
-index 23bc1cc13f7..3e8e60016a3 100644
+index 2fa95e17aaf..8464eaf83eb 100644
 --- a/server/token.c
 +++ b/server/token.c
-@@ -161,6 +161,7 @@ static const struct object_ops token_ops =
+@@ -157,6 +157,7 @@ static const struct object_ops token_ops =
      NULL,                      /* unlink_name */
      no_open_file,              /* open_file */
      no_kernel_obj_list,        /* get_kernel_obj_list */

diff --git a/patches/server-Desktop_Refcount/0001-server-Introduce-a-new-alloc_handle-object-callback..patch b/patches/server-Desktop_Refcount/0001-server-Introduce-a-new-alloc_handle-object-callback..patch
index 645514f53..4a5801bc2 100644
--- a/patches/server-Desktop_Refcount/0001-server-Introduce-a-new-alloc_handle-object-callback..patch
+++ b/patches/server-Desktop_Refcount/0001-server-Introduce-a-new-alloc_handle-object-callback..patch
@@ -1,4 +1,4 @@
-From adbfc52aca7f4bd1b103dde52f0beb3e6ea52c14 Mon Sep 17 00:00:00 2001
+From 1a225cf237fa461cffb5ecb9287ffa2c46d26a44 Mon Sep 17 00:00:00 2001
 From: Sebastian Lackner <sebastian@fds-team.de>
 Date: Fri, 4 Dec 2015 10:36:47 +0100
 Subject: [PATCH] server: Introduce a new alloc_handle object callback. (v2)
@@ -110,18 +110,18 @@ index db04727b93b..e72a155eeeb 100644
      completion_destroy         /* destroy */
  };
 diff --git a/server/console.c b/server/console.c
-index 302be6a1c1a..26545baea47 100644
+index 729cfa40612..71db7b36f44 100644
 --- a/server/console.c
 +++ b/server/console.c
-@@ -95,6 +95,7 @@ static const struct object_ops console_input_ops =
+@@ -97,6 +97,7 @@ static const struct object_ops console_input_ops =
      NULL,                             /* unlink_name */
-     no_open_file,                     /* open_file */
+     console_input_open_file,          /* open_file */
      no_kernel_obj_list,               /* get_kernel_obj_list */
 +    no_alloc_handle,                  /* alloc_handle */
      no_close_handle,                  /* close_handle */
      console_input_destroy             /* destroy */
  };
-@@ -130,6 +131,7 @@ static const struct object_ops console_input_events_ops =
+@@ -132,6 +133,7 @@ static const struct object_ops console_input_events_ops =
      NULL,                             /* unlink_name */
      no_open_file,                     /* open_file */
      no_kernel_obj_list,               /* get_kernel_obj_list */
@@ -129,9 +129,9 @@ index 302be6a1c1a..26545baea47 100644
      no_close_handle,                  /* close_handle */
      console_input_events_destroy      /* destroy */
  };
-@@ -191,6 +193,7 @@ static const struct object_ops screen_buffer_ops =
+@@ -195,6 +197,7 @@ static const struct object_ops screen_buffer_ops =
      NULL,                             /* unlink_name */
-     no_open_file,                     /* open_file */
+     screen_buffer_open_file,          /* open_file */
      no_kernel_obj_list,               /* get_kernel_obj_list */
 +    no_alloc_handle,                  /* alloc_handle */
      no_close_handle,                  /* close_handle */
@@ -194,7 +194,7 @@ index 01e08f295f7..90150e1b251 100644
      device_file_destroy               /* destroy */
  };
 diff --git a/server/directory.c b/server/directory.c
-index 74cbb3ca974..0092b37b0be 100644
+index 4d38393a6c8..ce6f20723b0 100644
 --- a/server/directory.c
 +++ b/server/directory.c
 @@ -68,6 +68,7 @@ static const struct object_ops object_type_ops =
@@ -234,10 +234,10 @@ index d339d85aa45..a78d73d9e78 100644
      no_destroy                   /* destroy */
  };
 diff --git a/server/fd.c b/server/fd.c
-index 06d1d81bdb0..81089321e53 100644
+index df0c5bb3f78..6d999dee17d 100644
 --- a/server/fd.c
 +++ b/server/fd.c
-@@ -220,6 +220,7 @@ static const struct object_ops fd_ops =
+@@ -225,6 +225,7 @@ static const struct object_ops fd_ops =
      NULL,                     /* unlink_name */
      no_open_file,             /* open_file */
      no_kernel_obj_list,       /* get_kernel_obj_list */
@@ -245,7 +245,7 @@ index 06d1d81bdb0..81089321e53 100644
      no_close_handle,          /* close_handle */
      fd_destroy                /* destroy */
  };
-@@ -260,6 +261,7 @@ static const struct object_ops device_ops =
+@@ -265,6 +266,7 @@ static const struct object_ops device_ops =
      NULL,                     /* unlink_name */
      no_open_file,             /* open_file */
      no_kernel_obj_list,       /* get_kernel_obj_list */
@@ -253,7 +253,7 @@ index 06d1d81bdb0..81089321e53 100644
      no_close_handle,          /* close_handle */
      device_destroy            /* destroy */
  };
-@@ -299,6 +301,7 @@ static const struct object_ops inode_ops =
+@@ -304,6 +306,7 @@ static const struct object_ops inode_ops =
      NULL,                     /* unlink_name */
      no_open_file,             /* open_file */
      no_kernel_obj_list,       /* get_kernel_obj_list */
@@ -261,7 +261,7 @@ index 06d1d81bdb0..81089321e53 100644
      no_close_handle,          /* close_handle */
      inode_destroy             /* destroy */
  };
-@@ -340,6 +343,7 @@ static const struct object_ops file_lock_ops =
+@@ -345,6 +348,7 @@ static const struct object_ops file_lock_ops =
      NULL,                       /* unlink_name */
      no_open_file,               /* open_file */
      no_kernel_obj_list,         /* get_kernel_obj_list */
@@ -270,10 +270,10 @@ index 06d1d81bdb0..81089321e53 100644
      no_destroy                  /* destroy */
  };
 diff --git a/server/file.c b/server/file.c
-index bce202138e0..d4697c953ac 100644
+index 38260cfd2b3..ba9358c0ee0 100644
 --- a/server/file.c
 +++ b/server/file.c
-@@ -97,6 +97,7 @@ static const struct object_ops file_ops =
+@@ -96,6 +96,7 @@ static const struct object_ops file_ops =
      NULL,                         /* unlink_name */
      file_open_file,               /* open_file */
      file_get_kernel_obj_list,     /* get_kernel_obj_list */
@@ -367,7 +367,7 @@ index 781e6f3141a..6f0321393e2 100644
      mailslot_device_destroy         /* destroy */
  };
 diff --git a/server/mapping.c b/server/mapping.c
-index 0941dd87c05..42c207b3367 100644
+index 002f3215af2..da60f768603 100644
 --- a/server/mapping.c
 +++ b/server/mapping.c
 @@ -79,6 +79,7 @@ static const struct object_ops ranges_ops =
@@ -468,7 +468,7 @@ index dacfe1d71a0..55321dddd87 100644
  {
      return 1;  /* ok to close */
 diff --git a/server/object.h b/server/object.h
-index 3144eb56678..a903479bb69 100644
+index f0b889d5899..13c59694c46 100644
 --- a/server/object.h
 +++ b/server/object.h
 @@ -91,8 +91,10 @@ struct object_ops
@@ -492,7 +492,7 @@ index 3144eb56678..a903479bb69 100644
  extern void no_destroy( struct object *obj );
  #ifdef DEBUG_OBJECTS
 diff --git a/server/process.c b/server/process.c
-index 76bb6faa91a..f76bc7167bf 100644
+index 5060e760e0a..638d785dafd 100644
 --- a/server/process.c
 +++ b/server/process.c
 @@ -88,6 +88,7 @@ static const struct object_ops process_ops =
@@ -511,7 +511,7 @@ index 76bb6faa91a..f76bc7167bf 100644
      no_close_handle,               /* close_handle */
      startup_info_destroy           /* destroy */
  };
-@@ -182,6 +184,7 @@ static const struct object_ops job_ops =
+@@ -183,6 +185,7 @@ static const struct object_ops job_ops =
      default_unlink_name,           /* unlink_name */
      no_open_file,                  /* open_file */
      no_kernel_obj_list,            /* get_kernel_obj_list */
@@ -520,7 +520,7 @@ index 76bb6faa91a..f76bc7167bf 100644
      job_destroy                    /* destroy */
  };
 diff --git a/server/queue.c b/server/queue.c
-index 84ee0f9a4ea..a963c68c45d 100644
+index c3925dd6646..e30cc0c13ad 100644
 --- a/server/queue.c
 +++ b/server/queue.c
 @@ -182,6 +182,7 @@ static const struct object_ops msg_queue_ops =
@@ -552,7 +552,7 @@ index dcbb3f791e1..6e5eddcd257 100644
      key_destroy              /* destroy */
  };
 diff --git a/server/request.c b/server/request.c
-index 4c1f30a5fe7..42cc83c3037 100644
+index 321bb6cfa81..1f34e7e9a54 100644
 --- a/server/request.c
 +++ b/server/request.c
 @@ -107,6 +107,7 @@ static const struct object_ops master_socket_ops =
@@ -632,7 +632,7 @@ index 5095a6ef9f0..7b10b74cc4e 100644
      ifchange_destroy         /* destroy */
  };
 diff --git a/server/symlink.c b/server/symlink.c
-index e5ee09f015a..d60611d592a 100644
+index 7a2f8642d5f..7bb28c8d7ce 100644
 --- a/server/symlink.c
 +++ b/server/symlink.c
 @@ -71,6 +71,7 @@ static const struct object_ops symlink_ops =
@@ -684,10 +684,10 @@ index 6460acbf519..2b5ae29a45a 100644
      timer_destroy              /* destroy */
  };
 diff --git a/server/token.c b/server/token.c
-index 2fa95e17aaf..8464eaf83eb 100644
+index 23bc1cc13f7..3e8e60016a3 100644
 --- a/server/token.c
 +++ b/server/token.c
-@@ -157,6 +157,7 @@ static const struct object_ops token_ops =
+@@ -161,6 +161,7 @@ static const struct object_ops token_ops =
      NULL,                      /* unlink_name */
      no_open_file,              /* open_file */
      no_kernel_obj_list,        /* get_kernel_obj_list */
@@ -696,7 +696,7 @@ index 2fa95e17aaf..8464eaf83eb 100644
      token_destroy              /* destroy */
  };
 diff --git a/server/winstation.c b/server/winstation.c
-index 43d112334d4..993a41178c6 100644
+index 2962ea0df4a..79a38d4069e 100644
 --- a/server/winstation.c
 +++ b/server/winstation.c
 @@ -75,6 +75,7 @@ static const struct object_ops winstation_ops =
@@ -716,5 +716,5 @@ index 43d112334d4..993a41178c6 100644
      desktop_destroy               /* destroy */
  };
 -- 
-2.26.2
+2.27.0

diff --git a/patches/ntdll-SystemCodeIntegrityInformation/0001-ntdll-NtQuerySystemInformation-support-SystemCodeInt.patch b/patches/ntdll-SystemCodeIntegrityInformation/0001-ntdll-NtQuerySystemInformation-support-SystemCodeInt.patch
index 229aa915c..dfb341494 100644
--- a/patches/ntdll-SystemCodeIntegrityInformation/0001-ntdll-NtQuerySystemInformation-support-SystemCodeInt.patch
+++ b/patches/ntdll-SystemCodeIntegrityInformation/0001-ntdll-NtQuerySystemInformation-support-SystemCodeInt.patch
@@ -1,4 +1,4 @@
-From ab4c2acb67c445abb2b6db274f6e94bd5f3877ba Mon Sep 17 00:00:00 2001
+From cef4355bf086ab493401931ae635792bad1186f3 Mon Sep 17 00:00:00 2001
 From: Alistair Leslie-Hughes <leslie_alistair@hotmail.com>
 Date: Fri, 22 May 2020 16:37:37 +1000
 Subject: [PATCH] ntdll: NtQuerySystemInformation support
@@ -12,10 +12,10 @@ Signed-off-by: Alistair Leslie-Hughes <leslie_alistair@hotmail.com>
  2 files changed, 44 insertions(+)
 
 diff --git a/dlls/ntdll/unix/system.c b/dlls/ntdll/unix/system.c
-index c5b2018bf30..6a0f4778790 100644
+index 909a7c5672f..cf36faf2b78 100644
 --- a/dlls/ntdll/unix/system.c
 +++ b/dlls/ntdll/unix/system.c
-@@ -2151,6 +2151,28 @@ NTSTATUS WINAPI NtQuerySystemInformation( SYSTEM_INFORMATION_CLASS class,
+@@ -2557,6 +2557,28 @@ NTSTATUS WINAPI NtQuerySystemInformation( SYSTEM_INFORMATION_CLASS class,
          ret = STATUS_SUCCESS;
          break;
  
@@ -45,13 +45,13 @@ index c5b2018bf30..6a0f4778790 100644
  	FIXME( "(0x%08x,%p,0x%08x,%p) stub\n", class, info, size, ret_size );
  
 diff --git a/include/winternl.h b/include/winternl.h
-index 3ff15f28c15..bcc20b2d99e 100644
+index 9226f000557..7e85ee02552 100644
 --- a/include/winternl.h
 +++ b/include/winternl.h
-@@ -986,10 +986,32 @@ typedef enum _SYSTEM_INFORMATION_CLASS {
-     SystemSuperfetchInformation = 79,
+@@ -988,10 +988,32 @@ typedef enum _SYSTEM_INFORMATION_CLASS {
      SystemMemoryListInformation = 80,
      SystemFileCacheInformationEx = 81,
+     SystemDynamicTimeZoneInformation = 102,
 +    SystemCodeIntegrityInformation = 103,
      SystemLogicalProcessorInformationEx = 107,
      SystemInformationClassMax
diff --git a/patches/ntdll-SystemModuleInformation/0002-ntdll-Return-ntdll.dll-as-the-first-entry-for-System.patch b/patches/ntdll-SystemModuleInformation/0002-ntdll-Return-ntdll.dll-as-the-first-entry-for-System.patch
index 64b850e36..e88a05231 100644
--- a/patches/ntdll-SystemModuleInformation/0002-ntdll-Return-ntdll.dll-as-the-first-entry-for-System.patch
+++ b/patches/ntdll-SystemModuleInformation/0002-ntdll-Return-ntdll.dll-as-the-first-entry-for-System.patch
@@ -1,4 +1,4 @@
-From b4fb299179bc4c04fd78909a21b24fd7a6667e4c Mon Sep 17 00:00:00 2001
+From fb6d3997445d70ea0744205f47ede1d3be8c50c1 Mon Sep 17 00:00:00 2001
 From: Andrew Wesie <awesie@gmail.com>
 Date: Fri, 12 Apr 2019 20:04:03 -0500
 Subject: [PATCH] ntdll: Return ntdll.dll as the first entry for
@@ -9,7 +9,7 @@ Subject: [PATCH] ntdll: Return ntdll.dll as the first entry for
  1 file changed, 27 insertions(+), 1 deletion(-)
 
 diff --git a/dlls/ntdll/unix/system.c b/dlls/ntdll/unix/system.c
-index a57b040c533..f118db8a89f 100644
+index 0aa55a69ba1..60a92f39a7c 100644
 --- a/dlls/ntdll/unix/system.c
 +++ b/dlls/ntdll/unix/system.c
 @@ -1630,6 +1630,32 @@ static void get_performance_info( SYSTEM_PERFORMANCE_INFORMATION *info )
@@ -43,9 +43,9 @@ index a57b040c533..f118db8a89f 100644
 +    sm->NameOffset = (ptr != NULL) ? (ptr - str.Buffer + 1) : 0;
 +}
  
- /******************************************************************************
-  *              NtQuerySystemInformation  (NTDLL.@)
-@@ -1943,7 +1969,7 @@ NTSTATUS WINAPI NtQuerySystemInformation( SYSTEM_INFORMATION_CLASS class,
+ /* calculate the mday of dst change date, so that for instance Sun 5 Oct 2007
+  * (last Sunday in October of 2007) becomes Sun Oct 28 2007
+@@ -2319,7 +2345,7 @@ NTSTATUS WINAPI NtQuerySystemInformation( SYSTEM_INFORMATION_CLASS class,
  
              FIXME("returning fake driver list\n");
              smi->ModulesCount = 1;
diff --git a/patches/server-Object_Types/0010-ntdll-Mimic-object-type-behavior-for-different-windo.patch b/patches/server-Object_Types/0010-ntdll-Mimic-object-type-behavior-for-different-windo.patch
index f3c4131f4..36280992b 100644
--- a/patches/server-Object_Types/0010-ntdll-Mimic-object-type-behavior-for-different-windo.patch
+++ b/patches/server-Object_Types/0010-ntdll-Mimic-object-type-behavior-for-different-windo.patch
@@ -1,4 +1,4 @@
-From aff46ac5cdbb7e202e4b153b2f869c55a17da1fa Mon Sep 17 00:00:00 2001
+From 76c342fe6c01c59bfcf387f19046d78415227f3d Mon Sep 17 00:00:00 2001
 From: =?UTF-8?q?Michael=20M=C3=BCller?= <michael@fds-team.de>
 Date: Wed, 8 Mar 2017 19:39:29 +0100
 Subject: [PATCH] ntdll: Mimic object type behavior for different windows
@@ -7,8 +7,8 @@ Subject: [PATCH] ntdll: Mimic object type behavior for different windows
 ---
  dlls/ntdll/om.c          |  5 +++-
  dlls/ntdll/tests/om.c    | 65 +++++++++++++++++++++++++++++++++++++++-
- dlls/ntdll/unix/system.c | 18 +++++++++--
- 3 files changed, 83 insertions(+), 5 deletions(-)
+ dlls/ntdll/unix/system.c | 17 +++++++++--
+ 3 files changed, 82 insertions(+), 5 deletions(-)
 
 diff --git a/dlls/ntdll/om.c b/dlls/ntdll/om.c
 index 4fea106cc46..eea095acbf9 100644
@@ -135,11 +135,11 @@ index 398ad6bed4e..b538160f6d0 100644
      test_case_sensitive();
      test_namespace_pipe();
 diff --git a/dlls/ntdll/unix/system.c b/dlls/ntdll/unix/system.c
-index b1b53256905..e317d34755c 100644
+index 9b42c475b47..828b891be9c 100644
 --- a/dlls/ntdll/unix/system.c
 +++ b/dlls/ntdll/unix/system.c
-@@ -1657,6 +1657,19 @@ static void get_ntdll_system_module(SYSTEM_MODULE *sm)
-     sm->NameOffset = (ptr != NULL) ? (ptr - str.Buffer + 1) : 0;
+@@ -2024,6 +2024,18 @@ static void get_timezone_info( RTL_DYNAMIC_TIME_ZONE_INFORMATION *tzi )
+     RtlLeaveCriticalSection( &TIME_tz_section );
  }
  
 +static DWORD translate_object_index(DWORD index)
@@ -154,11 +154,10 @@ index b1b53256905..e317d34755c 100644
 +    else
 +        return index + 1;
 +}
-+
+ 
  /******************************************************************************
   *              NtQuerySystemInformation  (NTDLL.@)
-  */
-@@ -2031,7 +2044,7 @@ NTSTATUS WINAPI NtQuerySystemInformation( SYSTEM_INFORMATION_CLASS class,
+@@ -2407,7 +2419,7 @@ NTSTATUS WINAPI NtQuerySystemInformation( SYSTEM_INFORMATION_CLASS class,
                      shi->Handle[i].OwnerPid     = handle_info[i].owner;
                      shi->Handle[i].HandleValue  = handle_info[i].handle;
                      shi->Handle[i].AccessMask   = handle_info[i].access;
@@ -167,7 +166,7 @@ index b1b53256905..e317d34755c 100644
                      /* FIXME: Fill out HandleFlags, ObjectPointer */
                  }
              }
-@@ -2084,7 +2097,7 @@ NTSTATUS WINAPI NtQuerySystemInformation( SYSTEM_INFORMATION_CLASS class,
+@@ -2460,7 +2472,7 @@ NTSTATUS WINAPI NtQuerySystemInformation( SYSTEM_INFORMATION_CLASS class,
                      shi->Handle[i].UniqueProcessId = handle_info[i].owner;
                      shi->Handle[i].HandleValue     = handle_info[i].handle;
                      shi->Handle[i].GrantedAccess   = handle_info[i].access;
@@ -176,7 +175,7 @@ index b1b53256905..e317d34755c 100644
                      /* FIXME: Fill out remaining fields */
                  }
              }
-@@ -2314,7 +2327,6 @@ NTSTATUS WINAPI NtQuerySystemInformation( SYSTEM_INFORMATION_CLASS class,
+@@ -2720,7 +2732,6 @@ NTSTATUS WINAPI NtQuerySystemInformation( SYSTEM_INFORMATION_CLASS class,
      return ret;
  }
  
diff --git a/patches/advapi32-Token_Integrity_Level/0006-ntdll-Add-function-to-create-new-tokens-for-elevatio.patch b/patches/advapi32-Token_Integrity_Level/0006-ntdll-Add-function-to-create-new-tokens-for-elevatio.patch
index cd9a46491..f0c849a5c 100644
--- a/patches/advapi32-Token_Integrity_Level/0006-ntdll-Add-function-to-create-new-tokens-for-elevatio.patch
+++ b/patches/advapi32-Token_Integrity_Level/0006-ntdll-Add-function-to-create-new-tokens-for-elevatio.patch
@@ -1,4 +1,4 @@
-From 44e752d89a76ba4a686f5d6b822d95c427b35bc0 Mon Sep 17 00:00:00 2001
+From d768c632777d80f52327ba0d525a0157b113f45a Mon Sep 17 00:00:00 2001
 From: =?UTF-8?q?Michael=20M=C3=BCller?= <michael@fds-team.de>
 Date: Sat, 5 Aug 2017 01:45:29 +0200
 Subject: [PATCH] ntdll: Add function to create new tokens for elevation
@@ -28,19 +28,19 @@ index 0d19e12768f..e313d5807b3 100644
  @ cdecl wine_get_version() NTDLL_wine_get_version
  @ cdecl wine_get_build_id() NTDLL_wine_get_build_id
 diff --git a/dlls/ntdll/ntdll_misc.h b/dlls/ntdll/ntdll_misc.h
-index e2e4d378085..14cd0bafdc0 100644
+index b5b08fc47ef..8476907e7ec 100644
 --- a/dlls/ntdll/ntdll_misc.h
 +++ b/dlls/ntdll/ntdll_misc.h
-@@ -73,6 +73,9 @@ extern void init_user_process_params( SIZE_T data_size ) DECLSPEC_HIDDEN;
- extern char **build_envp( const WCHAR *envW ) DECLSPEC_HIDDEN;
+@@ -72,6 +72,9 @@ extern void init_locale( HMODULE module ) DECLSPEC_HIDDEN;
+ extern void init_user_process_params( SIZE_T data_size ) DECLSPEC_HIDDEN;
  extern NTSTATUS restart_process( RTL_USER_PROCESS_PARAMETERS *params, NTSTATUS status ) DECLSPEC_HIDDEN;
  
 +/* token */
 +extern HANDLE CDECL __wine_create_default_token(BOOL admin);
 +
  /* server support */
- extern const char *build_dir DECLSPEC_HIDDEN;
- extern const char *data_dir DECLSPEC_HIDDEN;
+ extern BOOL is_wow64 DECLSPEC_HIDDEN;
+ extern NTSTATUS alloc_object_attributes( const OBJECT_ATTRIBUTES *attr, struct object_attributes **ret,
 diff --git a/dlls/ntdll/process.c b/dlls/ntdll/process.c
 index b1cc307d2ae..2e5fee216ef 100644
 --- a/dlls/ntdll/process.c

diff --git a/patches/ntdll-FLS_Callbacks/0001-kernelbase-Maintain-FLS-storage-list-in-PEB.patch b/patches/ntdll-FLS_Callbacks/0001-kernelbase-Maintain-FLS-storage-list-in-PEB.patch
index 40f2a0b86..4761fc87e 100644
--- a/patches/ntdll-FLS_Callbacks/0001-kernelbase-Maintain-FLS-storage-list-in-PEB.patch
+++ b/patches/ntdll-FLS_Callbacks/0001-kernelbase-Maintain-FLS-storage-list-in-PEB.patch
@@ -286,9 +286,9 @@ index 5e8de8821dd..71ef1cfea0a 100644
  void WINAPI LdrInitializeThunk( CONTEXT *context, void **entry, ULONG_PTR unknown3, ULONG_PTR unknown4 )
  {
 +    static const unsigned int fls_slot_count = 8 * sizeof(NtCurrentTeb()->Peb->FlsBitmapBits);
-     static const LARGE_INTEGER zero;
      static int attach_done;
      int i;
+     NTSTATUS status;
 @@ -3435,6 +3462,25 @@ void WINAPI LdrInitializeThunk( CONTEXT *context, void **entry, ULONG_PTR unknow
      InsertHeadList( &tls_links, &NtCurrentTeb()->TlsLinks );
      RtlReleasePebLock();

diff --git a/patches/advapi32-Token_Integrity_Level/0006-ntdll-Add-function-to-create-new-tokens-for-elevatio.patch b/patches/advapi32-Token_Integrity_Level/0006-ntdll-Add-function-to-create-new-tokens-for-elevatio.patch
index 41efe2b28..cd9a46491 100644
--- a/patches/advapi32-Token_Integrity_Level/0006-ntdll-Add-function-to-create-new-tokens-for-elevatio.patch
+++ b/patches/advapi32-Token_Integrity_Level/0006-ntdll-Add-function-to-create-new-tokens-for-elevatio.patch
@@ -1,4 +1,4 @@
-From ed999d4430c1aca8f90f26670d3615cdaaab300d Mon Sep 17 00:00:00 2001
+From 44e752d89a76ba4a686f5d6b822d95c427b35bc0 Mon Sep 17 00:00:00 2001
 From: =?UTF-8?q?Michael=20M=C3=BCller?= <michael@fds-team.de>
 Date: Sat, 5 Aug 2017 01:45:29 +0200
 Subject: [PATCH] ntdll: Add function to create new tokens for elevation
@@ -28,12 +28,12 @@ index 0d19e12768f..e313d5807b3 100644
  @ cdecl wine_get_version() NTDLL_wine_get_version
  @ cdecl wine_get_build_id() NTDLL_wine_get_build_id
 diff --git a/dlls/ntdll/ntdll_misc.h b/dlls/ntdll/ntdll_misc.h
-index 47800db41b1..12e7b721cb5 100644
+index e2e4d378085..14cd0bafdc0 100644
 --- a/dlls/ntdll/ntdll_misc.h
 +++ b/dlls/ntdll/ntdll_misc.h
-@@ -86,6 +86,9 @@ extern int __wine_main_argc;
- extern char **__wine_main_argv;
- extern WCHAR **__wine_main_wargv;
+@@ -73,6 +73,9 @@ extern void init_user_process_params( SIZE_T data_size ) DECLSPEC_HIDDEN;
+ extern char **build_envp( const WCHAR *envW ) DECLSPEC_HIDDEN;
+ extern NTSTATUS restart_process( RTL_USER_PROCESS_PARAMETERS *params, NTSTATUS status ) DECLSPEC_HIDDEN;
  
 +/* token */
 +extern HANDLE CDECL __wine_create_default_token(BOOL admin);
diff --git a/patches/ntdll-HashLinks/0001-ntdll-Implement-HashLinks-field-in-LDR-module-data.patch b/patches/ntdll-HashLinks/0001-ntdll-Implement-HashLinks-field-in-LDR-module-data.patch
index eea5e9e78..98e7d7ca5 100644
--- a/patches/ntdll-HashLinks/0001-ntdll-Implement-HashLinks-field-in-LDR-module-data.patch
+++ b/patches/ntdll-HashLinks/0001-ntdll-Implement-HashLinks-field-in-LDR-module-data.patch
@@ -1,13 +1,13 @@
-From b1af584b5d5b8905bf4dd3ec6be9227e5221a744 Mon Sep 17 00:00:00 2001
+From 250b8699aa64096bb4b38d454c03b57afe91a619 Mon Sep 17 00:00:00 2001
 From: =?UTF-8?q?Michael=20M=C3=BCller?= <michael@fds-team.de>
 Date: Mon, 3 Apr 2017 05:30:27 +0200
 Subject: [PATCH] ntdll: Implement HashLinks field in LDR module data.
 
 ---
  dlls/kernel32/tests/loader.c | 76 ++++++++++++++++++++++++++++++++++++
- dlls/ntdll/loader.c          | 65 ++++++++++++++++++++++++++++++
+ dlls/ntdll/loader.c          | 64 ++++++++++++++++++++++++++++++
  include/winternl.h           |  2 +-
- 3 files changed, 142 insertions(+), 1 deletion(-)
+ 3 files changed, 141 insertions(+), 1 deletion(-)
 
 diff --git a/dlls/kernel32/tests/loader.c b/dlls/kernel32/tests/loader.c
 index 59965984a67..95f18fb71e3 100644
@@ -115,10 +115,10 @@ index 59965984a67..95f18fb71e3 100644
      test_Loader();
  }
 diff --git a/dlls/ntdll/loader.c b/dlls/ntdll/loader.c
-index c90cdcc860b..63e1227cc55 100644
+index 42cdc628021..df8e0c69185 100644
 --- a/dlls/ntdll/loader.c
 +++ b/dlls/ntdll/loader.c
-@@ -128,6 +128,9 @@ struct file_id
+@@ -121,6 +121,9 @@ struct file_id
      BYTE ObjectId[16];
  };
  
@@ -128,7 +128,7 @@ index c90cdcc860b..63e1227cc55 100644
  /* internal representation of loaded modules */
  typedef struct _wine_modref
  {
-@@ -467,6 +470,52 @@ static void call_ldr_notifications( ULONG reason, LDR_DATA_TABLE_ENTRY *module )
+@@ -446,6 +449,52 @@ static void call_ldr_notifications( ULONG reason, LDR_DATA_TABLE_ENTRY *module )
      }
  }
  
@@ -181,7 +181,7 @@ index c90cdcc860b..63e1227cc55 100644
  /*************************************************************************
   *		get_modref
   *
-@@ -1231,7 +1280,12 @@ static WINE_MODREF *alloc_module( HMODULE hModule, const UNICODE_STRING *nt_name
+@@ -1188,7 +1237,12 @@ static WINE_MODREF *alloc_module( HMODULE hModule, const UNICODE_STRING *nt_name
                     &wm->ldr.InLoadOrderLinks);
      InsertTailList(&NtCurrentTeb()->Peb->LdrData->InMemoryOrderModuleList,
                     &wm->ldr.InMemoryOrderLinks);
@@ -194,15 +194,7 @@ index c90cdcc860b..63e1227cc55 100644
  
      if (!(nt->OptionalHeader.DllCharacteristics & IMAGE_DLLCHARACTERISTICS_NX_COMPAT))
      {
-@@ -1892,6 +1946,7 @@ static NTSTATUS build_so_dll_module( const WCHAR *load_path, const UNICODE_STRIN
-             /* the module has only been inserted in the load & memory order lists */
-             RemoveEntryList(&wm->ldr.InLoadOrderLinks);
-             RemoveEntryList(&wm->ldr.InMemoryOrderLinks);
-+            RemoveEntryList(&wm->ldr.HashLinks);
-             /* FIXME: free the modref */
-             return status;
-         }
-@@ -2433,6 +2488,7 @@ static NTSTATUS load_native_dll( LPCWSTR load_path, const UNICODE_STRING *nt_nam
+@@ -1894,6 +1948,7 @@ static NTSTATUS build_module( LPCWSTR load_path, const UNICODE_STRING *nt_name,
              /* the module has only be inserted in the load & memory order lists */
              RemoveEntryList(&wm->ldr.InLoadOrderLinks);
              RemoveEntryList(&wm->ldr.InMemoryOrderLinks);
@@ -210,7 +202,7 @@ index c90cdcc860b..63e1227cc55 100644
  
              /* FIXME: there are several more dangling references
               * left. Including dlls loaded by this dll before the
-@@ -3652,6 +3708,7 @@ static void free_modref( WINE_MODREF *wm )
+@@ -3226,6 +3281,7 @@ static void free_modref( WINE_MODREF *wm )
  {
      RemoveEntryList(&wm->ldr.InLoadOrderLinks);
      RemoveEntryList(&wm->ldr.InMemoryOrderLinks);
@@ -218,7 +210,7 @@ index c90cdcc860b..63e1227cc55 100644
      if (wm->ldr.InInitializationOrderLinks.Flink)
          RemoveEntryList(&wm->ldr.InInitializationOrderLinks);
  
-@@ -4372,6 +4429,7 @@ void __wine_process_init(void)
+@@ -3945,6 +4001,7 @@ void __wine_process_init(void)
      SIZE_T info_size;
      TEB *teb;
      PEB *peb;
@@ -226,7 +218,7 @@ index c90cdcc860b..63e1227cc55 100644
  
      if (!unix_funcs) load_ntdll_so( ntdll_module, &__wine_spec_nt_header );
  
-@@ -4388,6 +4446,10 @@ void __wine_process_init(void)
+@@ -3961,6 +4018,10 @@ void __wine_process_init(void)
      load_global_options();
      version_init();
  
@@ -237,7 +229,7 @@ index c90cdcc860b..63e1227cc55 100644
      /* setup the load callback and create ntdll modref */
      RtlInitUnicodeString( &nt_name, ntdllW );
      status = build_so_dll_module( params->DllPath.Buffer, &nt_name, ntdll_module, 0, &wm );
-@@ -4463,6 +4525,9 @@ void __wine_process_init(void)
+@@ -4034,6 +4095,9 @@ void __wine_process_init(void)
      teb->Tib.StackLimit = stack.StackLimit;
      teb->DeallocationStack = stack.DeallocationStack;
  
diff --git a/patches/ntdll-Syscall_Emulation/0001-ntdll-Support-x86_64-syscall-emulation.patch b/patches/ntdll-Syscall_Emulation/0001-ntdll-Support-x86_64-syscall-emulation.patch
index bd1c98819..a99729dc4 100644
--- a/patches/ntdll-Syscall_Emulation/0001-ntdll-Support-x86_64-syscall-emulation.patch
+++ b/patches/ntdll-Syscall_Emulation/0001-ntdll-Support-x86_64-syscall-emulation.patch
@@ -1,4 +1,4 @@
-From 4236b5607067148efa76cbe090d9efd58b297e32 Mon Sep 17 00:00:00 2001
+From 6a2146342b48977513f83a59cd16d182850767a9 Mon Sep 17 00:00:00 2001
 From: Paul Gofman <pgofman@codeweavers.com>
 Date: Mon, 30 Dec 2019 13:27:53 +0300
 Subject: [PATCH] ntdll: Support x86_64 syscall emulation.
@@ -12,14 +12,14 @@ is used for trapping syscalls.
  configure.ac                    |   1 +
  dlls/ntdll/thread.c             |   8 ++-
  dlls/ntdll/unix/signal_x86_64.c | 105 ++++++++++++++++++++++++++++++++
- dlls/ntdll/unix/thread.c        |   8 ++-
- dlls/ntdll/unix/unix_private.h  |   6 +-
- dlls/ntdll/unixlib.h            |   3 +-
+ dlls/ntdll/unix/thread.c        |   7 ++-
+ dlls/ntdll/unix/unix_private.h  |   5 +-
+ dlls/ntdll/unixlib.h            |   2 +-
  tools/winebuild/spec32.c        |   9 ++-
- 7 files changed, 134 insertions(+), 6 deletions(-)
+ 7 files changed, 131 insertions(+), 6 deletions(-)
 
 diff --git a/configure.ac b/configure.ac
-index 9c5f76669df..f245c2f1507 100644
+index a78610c6490..eabd16b4732 100644
 --- a/configure.ac
 +++ b/configure.ac
 @@ -464,6 +464,7 @@ AC_CHECK_HEADERS(\
@@ -31,10 +31,10 @@ index 9c5f76669df..f245c2f1507 100644
  	linux/types.h \
  	linux/ucdrom.h \
 diff --git a/dlls/ntdll/thread.c b/dlls/ntdll/thread.c
-index 557747062e4..0d65546588f 100644
+index 0eb7d901c4d..c5391fb0512 100644
 --- a/dlls/ntdll/thread.c
 +++ b/dlls/ntdll/thread.c
-@@ -103,6 +103,12 @@ void __wine_syscall_dispatcher( void )
+@@ -105,6 +105,12 @@ void __wine_syscall_dispatcher( void )
  }
  #endif
  
@@ -47,14 +47,14 @@ index 557747062e4..0d65546588f 100644
  void *WINAPI __wine_fakedll_dispatcher( const char *module, ULONG ord )
  {
      UNICODE_STRING name;
-@@ -146,7 +152,7 @@ void *WINAPI __wine_fakedll_dispatcher( const char *module, ULONG ord )
- TEB *thread_init( SIZE_T *info_size, BOOL *suspend )
+@@ -148,7 +154,7 @@ void *WINAPI __wine_fakedll_dispatcher( const char *module, ULONG ord )
+ TEB *thread_init( SIZE_T *info_size )
  {
-     TEB *teb = unix_funcs->init_threading( &nb_threads, &__wine_ldt_copy, info_size, suspend, &server_cpus,
--                                           &is_wow64, &server_start_time, __wine_syscall_dispatcher );
-+                                           &is_wow64, &server_start_time, __wine_syscall_dispatcher, __wine_nb_syscalls );
-     teb->Spare2 = (ULONG_PTR)__wine_fakedll_dispatcher;
+     ULONG_PTR val;
+-    TEB *teb = unix_funcs->init_threading( &nb_threads, &__wine_ldt_copy, info_size, __wine_syscall_dispatcher );
++    TEB *teb = unix_funcs->init_threading( &nb_threads, &__wine_ldt_copy, info_size, __wine_syscall_dispatcher, __wine_nb_syscalls );
  
+     teb->Spare2 = (ULONG_PTR)__wine_fakedll_dispatcher;
      peb = teb->Peb;
 diff --git a/dlls/ntdll/unix/signal_x86_64.c b/dlls/ntdll/unix/signal_x86_64.c
 index 12ea74f7f5c..26097702985 100644
@@ -194,7 +194,7 @@ index 12ea74f7f5c..26097702985 100644
  
   error:
 diff --git a/dlls/ntdll/unix/thread.c b/dlls/ntdll/unix/thread.c
-index 196dc2d8c4e..dae792bd78b 100644
+index ca5eba4da88..36126a56f45 100644
 --- a/dlls/ntdll/unix/thread.c
 +++ b/dlls/ntdll/unix/thread.c
 @@ -58,6 +58,9 @@ WINE_DEFAULT_DEBUG_CHANNEL(seh);
@@ -207,17 +207,16 @@ index 196dc2d8c4e..dae792bd78b 100644
  static int *nb_threads;
  
  static inline int get_unix_exit_code( NTSTATUS status )
-@@ -85,7 +88,8 @@ static void pthread_exit_wrapper( int status )
+@@ -84,7 +87,7 @@ static void pthread_exit_wrapper( int status )
+ /***********************************************************************
   *           init_threading
   */
- TEB * CDECL init_threading( int *nb_threads_ptr, struct ldt_copy **ldt_copy, SIZE_T *size, BOOL *suspend,
--                            unsigned int *cpus, BOOL *wow64, timeout_t *start_time, void *syscall_handler )
-+                            unsigned int *cpus, BOOL *wow64, timeout_t *start_time, void *syscall_handler,
-+                            unsigned int syscall_count )
+-TEB * CDECL init_threading( int *nb_threads_ptr, struct ldt_copy **ldt_copy, SIZE_T *size, void *syscall_handler )
++TEB * CDECL init_threading( int *nb_threads_ptr, struct ldt_copy **ldt_copy, SIZE_T *size, void *syscall_handler, unsigned int syscall_count )
  {
      TEB *teb;
-     SIZE_T info_size;
-@@ -94,6 +98,8 @@ TEB * CDECL init_threading( int *nb_threads_ptr, struct ldt_copy **ldt_copy, SIZ
+     BOOL suspend;
+@@ -94,6 +97,8 @@ TEB * CDECL init_threading( int *nb_threads_ptr, struct ldt_copy **ldt_copy, SIZ
      *ldt_copy = &__wine_ldt_copy;
  #endif
      nb_threads = nb_threads_ptr;
@@ -227,20 +226,19 @@ index 196dc2d8c4e..dae792bd78b 100644
      teb = virtual_alloc_first_teb();
      teb->WOW32Reserved = syscall_handler;
 diff --git a/dlls/ntdll/unix/unix_private.h b/dlls/ntdll/unix/unix_private.h
-index df508e569f9..bcb80ddab85 100644
+index 15be5d3715a..516a6cfa1fe 100644
 --- a/dlls/ntdll/unix/unix_private.h
 +++ b/dlls/ntdll/unix/unix_private.h
-@@ -113,7 +113,8 @@ extern void CDECL server_release_fd( HANDLE handle, int unix_fd ) DECLSPEC_HIDDE
+@@ -115,7 +115,7 @@ extern NTSTATUS CDECL server_handle_to_fd( HANDLE handle, unsigned int access, i
+                                            unsigned int *options ) DECLSPEC_HIDDEN;
+ extern void CDECL server_release_fd( HANDLE handle, int unix_fd ) DECLSPEC_HIDDEN;
  extern void CDECL server_init_process_done( void *relay ) DECLSPEC_HIDDEN;
- extern TEB * CDECL init_threading( int *nb_threads_ptr, struct ldt_copy **ldt_copy, SIZE_T *size,
-                                    BOOL *suspend, unsigned int *cpus, BOOL *wow64,
--                                   timeout_t *start_time, void *syscall_handler ) DECLSPEC_HIDDEN;
-+                                   timeout_t *start_time, void *syscall_handler,
-+                                   unsigned int syscall_count ) DECLSPEC_HIDDEN;
+-extern TEB * CDECL init_threading( int *nb_threads_ptr, struct ldt_copy **ldt_copy, SIZE_T *size, void *syscall_handler ) DECLSPEC_HIDDEN;
++extern TEB * CDECL init_threading( int *nb_threads_ptr, struct ldt_copy **ldt_copy, SIZE_T *size, void *syscall_handler, unsigned int syscall_count ) DECLSPEC_HIDDEN;
  extern void CDECL DECLSPEC_NORETURN exit_thread( int status ) DECLSPEC_HIDDEN;
  extern void CDECL DECLSPEC_NORETURN exit_process( int status ) DECLSPEC_HIDDEN;
  extern NTSTATUS CDECL exec_process( UNICODE_STRING *path, UNICODE_STRING *cmdline, NTSTATUS status ) DECLSPEC_HIDDEN;
-@@ -146,6 +147,9 @@ extern NTSTATUS exec_wineloader( char **argv, int socketfd, int is_child_64bit,
+@@ -152,6 +152,9 @@ extern NTSTATUS exec_wineloader( char **argv, int socketfd, int is_child_64bit,
  extern void start_server( BOOL debug ) DECLSPEC_HIDDEN;
  extern ULONG_PTR get_image_address(void) DECLSPEC_HIDDEN;
  
@@ -251,16 +249,15 @@ index df508e569f9..bcb80ddab85 100644
  extern void server_enter_uninterrupted_section( RTL_CRITICAL_SECTION *cs, sigset_t *sigset ) DECLSPEC_HIDDEN;
  extern void server_leave_uninterrupted_section( RTL_CRITICAL_SECTION *cs, sigset_t *sigset ) DECLSPEC_HIDDEN;
 diff --git a/dlls/ntdll/unixlib.h b/dlls/ntdll/unixlib.h
-index a9803478a37..e3bb8f7ce8e 100644
+index b5b7cb07c80..f61e0ed8525 100644
 --- a/dlls/ntdll/unixlib.h
 +++ b/dlls/ntdll/unixlib.h
-@@ -302,7 +302,8 @@ struct unix_funcs
+@@ -304,7 +304,7 @@ struct unix_funcs
+     void          (CDECL *virtual_set_large_address_space)(void);
  
      /* thread/process functions */
-     TEB *         (CDECL *init_threading)( int *nb_threads_ptr, struct ldt_copy **ldt_copy, SIZE_T *size,
--                                           BOOL *suspend, unsigned int *cpus, BOOL *wow64, timeout_t *start_time, void *syscall_handler );
-+                                           BOOL *suspend, unsigned int *cpus, BOOL *wow64, timeout_t *start_time,
-+                                           void *syscall_handler, unsigned int syscall_count );
+-    TEB *         (CDECL *init_threading)( int *nb_threads_ptr, struct ldt_copy **ldt_copy, SIZE_T *size, void *syscall_handler );
++    TEB *         (CDECL *init_threading)( int *nb_threads_ptr, struct ldt_copy **ldt_copy, SIZE_T *size, void *syscall_handler, unsigned int syscall_count );
      void          (CDECL *exit_thread)( int status );
      void          (CDECL *exit_process)( int status );
      NTSTATUS      (CDECL *exec_process)( UNICODE_STRING *path, UNICODE_STRING *cmdline, NTSTATUS status );
diff --git a/patches/ntdll-SystemCodeIntegrityInformation/0001-ntdll-NtQuerySystemInformation-support-SystemCodeInt.patch b/patches/ntdll-SystemCodeIntegrityInformation/0001-ntdll-NtQuerySystemInformation-support-SystemCodeInt.patch
index 80c42839a..229aa915c 100644
--- a/patches/ntdll-SystemCodeIntegrityInformation/0001-ntdll-NtQuerySystemInformation-support-SystemCodeInt.patch
+++ b/patches/ntdll-SystemCodeIntegrityInformation/0001-ntdll-NtQuerySystemInformation-support-SystemCodeInt.patch
@@ -1,4 +1,4 @@
-From 7421907b2ecc21493308aa31478b6828f4341e29 Mon Sep 17 00:00:00 2001
+From ab4c2acb67c445abb2b6db274f6e94bd5f3877ba Mon Sep 17 00:00:00 2001
 From: Alistair Leslie-Hughes <leslie_alistair@hotmail.com>
 Date: Fri, 22 May 2020 16:37:37 +1000
 Subject: [PATCH] ntdll: NtQuerySystemInformation support
@@ -7,47 +7,48 @@ Subject: [PATCH] ntdll: NtQuerySystemInformation support
 Wine-Bug: https://bugs.winehq.org/show_bug.cgi?id=49192
 Signed-off-by: Alistair Leslie-Hughes <leslie_alistair@hotmail.com>
 ---
- dlls/ntdll/nt.c    | 21 +++++++++++++++++++++
- include/winternl.h | 22 ++++++++++++++++++++++
- 2 files changed, 43 insertions(+)
+ dlls/ntdll/unix/system.c | 22 ++++++++++++++++++++++
+ include/winternl.h       | 22 ++++++++++++++++++++++
+ 2 files changed, 44 insertions(+)
 
-diff --git a/dlls/ntdll/nt.c b/dlls/ntdll/nt.c
-index 1d31f80a5f55..99b0d8dc0921 100644
---- a/dlls/ntdll/nt.c
-+++ b/dlls/ntdll/nt.c
-@@ -3179,6 +3179,27 @@ NTSTATUS WINAPI NtQuerySystemInformation(
-         memset(SystemInformation, 0, Length);
+diff --git a/dlls/ntdll/unix/system.c b/dlls/ntdll/unix/system.c
+index c5b2018bf30..6a0f4778790 100644
+--- a/dlls/ntdll/unix/system.c
++++ b/dlls/ntdll/unix/system.c
+@@ -2151,6 +2151,28 @@ NTSTATUS WINAPI NtQuerySystemInformation( SYSTEM_INFORMATION_CLASS class,
          ret = STATUS_SUCCESS;
          break;
+ 
 +    case SystemCodeIntegrityInformation:
 +    {
-+        SYSTEM_CODEINTEGRITY_INFORMATION *info = (SYSTEM_CODEINTEGRITY_INFORMATION*)SystemInformation;
++        SYSTEM_CODEINTEGRITY_INFORMATION *scii = info;
 +
-+        FIXME("SystemCodeIntegrityInformation, len %u, buffer %p, stub!\n", Length, info);
++        FIXME("SystemCodeIntegrityInformation, size %u, info %p, stub!\n", size, info);
 +
-+        if (Length < sizeof(SYSTEM_CODEINTEGRITY_INFORMATION))
++        if (size < sizeof(SYSTEM_CODEINTEGRITY_INFORMATION))
 +        {
 +            ret = STATUS_INFO_LENGTH_MISMATCH;
 +            break;
 +        }
 +
-+        if (!SystemInformation)
++        if (!info)
 +        {
 +            ret = STATUS_ACCESS_VIOLATION;
 +            break;
 +        }
 +
-+        info->CodeIntegrityOptions = CODEINTEGRITY_OPTION_ENABLED;
++        scii->CodeIntegrityOptions = CODEINTEGRITY_OPTION_ENABLED;
 +        break;
 +    }
++
      default:
- 	FIXME("(0x%08x,%p,0x%08x,%p) stub\n",
- 	      SystemInformationClass,SystemInformation,Length,ResultLength);
+ 	FIXME( "(0x%08x,%p,0x%08x,%p) stub\n", class, info, size, ret_size );
+ 
 diff --git a/include/winternl.h b/include/winternl.h
-index 640dbe5db354..1ae249c59404 100644
+index 3ff15f28c15..bcc20b2d99e 100644
 --- a/include/winternl.h
 +++ b/include/winternl.h
-@@ -972,10 +972,32 @@ typedef enum _SYSTEM_INFORMATION_CLASS {
+@@ -986,10 +986,32 @@ typedef enum _SYSTEM_INFORMATION_CLASS {
      SystemSuperfetchInformation = 79,
      SystemMemoryListInformation = 80,
      SystemFileCacheInformationEx = 81,
@@ -81,5 +82,5 @@ index 640dbe5db354..1ae249c59404 100644
      ThreadBasicInformation = 0,
      ThreadTimes,
 -- 
-2.26.2
+2.27.0
 
diff --git a/patches/ntdll-SystemExtendedProcessInformation/0001-ntdll-Add-stub-for-NtQuerySystemInformation-SystemEx.patch b/patches/ntdll-SystemExtendedProcessInformation/0001-ntdll-Add-stub-for-NtQuerySystemInformation-SystemEx.patch
index cdf3324b3..bdad3ffa3 100644
--- a/patches/ntdll-SystemExtendedProcessInformation/0001-ntdll-Add-stub-for-NtQuerySystemInformation-SystemEx.patch
+++ b/patches/ntdll-SystemExtendedProcessInformation/0001-ntdll-Add-stub-for-NtQuerySystemInformation-SystemEx.patch
@@ -1,29 +1,30 @@
-From 317b8941e2c36fd568799915c8023332b5054331 Mon Sep 17 00:00:00 2001
+From a74718ea86178b8aa580d542bed872a313bdd546 Mon Sep 17 00:00:00 2001
 From: Zebediah Figura <z.figura12@gmail.com>
 Date: Sat, 6 Apr 2019 21:31:55 -0500
 Subject: [PATCH] ntdll: Add stub for
  NtQuerySystemInformation(SystemExtendedProcessInformation).
 
 ---
- dlls/ntdll/nt.c | 5 +++++
- 1 file changed, 5 insertions(+)
+ dlls/ntdll/unix/system.c | 6 ++++++
+ 1 file changed, 6 insertions(+)
 
-diff --git a/dlls/ntdll/nt.c b/dlls/ntdll/nt.c
-index f42934969..c019a9c29 100644
---- a/dlls/ntdll/nt.c
-+++ b/dlls/ntdll/nt.c
-@@ -2768,6 +2768,11 @@ NTSTATUS WINAPI NtQuerySystemInformation(
-             }
-         }
+diff --git a/dlls/ntdll/unix/system.c b/dlls/ntdll/unix/system.c
+index 68de16b7e5b..c5b2018bf30 100644
+--- a/dlls/ntdll/unix/system.c
++++ b/dlls/ntdll/unix/system.c
+@@ -2145,6 +2145,12 @@ NTSTATUS WINAPI NtQuerySystemInformation( SYSTEM_INFORMATION_CLASS class,
          break;
+     }
+ 
 +    case SystemExtendedProcessInformation:
-+        FIXME("SystemExtendedProcessInformation, len %u, buffer %p, stub!\n", Length, SystemInformation);
-+        memset(SystemInformation, 0, Length);
++        FIXME("SystemExtendedProcessInformation, size %u, info %p, stub!\n", size, info);
++        memset( info, 0, size );
 +        ret = STATUS_SUCCESS;
 +        break;
++
      default:
- 	FIXME("(0x%08x,%p,0x%08x,%p) stub\n",
- 	      SystemInformationClass,SystemInformation,Length,ResultLength);
+ 	FIXME( "(0x%08x,%p,0x%08x,%p) stub\n", class, info, size, ret_size );
+ 
 -- 
-2.20.1
+2.27.0
 
diff --git a/patches/ntdll-SystemInterruptInformation/0001-ntdll-Return-buffer-filled-with-random-values-from-S.patch b/patches/ntdll-SystemInterruptInformation/0001-ntdll-Return-buffer-filled-with-random-values-from-S.patch
index e49935a61..086f075e5 100644
--- a/patches/ntdll-SystemInterruptInformation/0001-ntdll-Return-buffer-filled-with-random-values-from-S.patch
+++ b/patches/ntdll-SystemInterruptInformation/0001-ntdll-Return-buffer-filled-with-random-values-from-S.patch
@@ -1,39 +1,38 @@
-From e42cdb8305dcebca77afba4a56e59391f2cb4a38 Mon Sep 17 00:00:00 2001
+From 0cb2647baa3ea72babb05e24d2f1fa23cdedb0a1 Mon Sep 17 00:00:00 2001
 From: Sebastian Lackner <sebastian@fds-team.de>
 Date: Thu, 7 Jan 2016 06:01:01 +0100
-Subject: ntdll: Return buffer filled with random values from
+Subject: [PATCH] ntdll: Return buffer filled with random values from
  SystemInterruptInformation.
 
 ---
- dlls/ntdll/nt.c | 11 +++++++++++
- 1 file changed, 11 insertions(+)
+ dlls/ntdll/unix/system.c | 12 ++++++++++++
+ 1 file changed, 12 insertions(+)
 
-diff --git a/dlls/ntdll/nt.c b/dlls/ntdll/nt.c
-index 9ee1923..fe3e8e8 100644
---- a/dlls/ntdll/nt.c
-+++ b/dlls/ntdll/nt.c
-@@ -2070,10 +2070,21 @@ NTSTATUS WINAPI NtQuerySystemInformation(
+diff --git a/dlls/ntdll/unix/system.c b/dlls/ntdll/unix/system.c
+index 68de16b7e5b..5ba9fb41156 100644
+--- a/dlls/ntdll/unix/system.c
++++ b/dlls/ntdll/unix/system.c
+@@ -2003,8 +2003,20 @@ NTSTATUS WINAPI NtQuerySystemInformation( SYSTEM_INFORMATION_CLASS class,
      case SystemInterruptInformation:
-         {
-             SYSTEM_INTERRUPT_INFORMATION sii;
-+            int dev_random;
- 
-             memset(&sii, 0, sizeof(sii));
-             len = sizeof(sii);
+     {
+         SYSTEM_INTERRUPT_INFORMATION sii = {{ 0 }};
++        int dev_random;
  
-+            /* Some applications use the returned buffer for random number
-+             * generation. Its unlikely that an app depends on the exact
-+             * layout, so just fill with values from /dev/urandom. */
-+            dev_random = open( "/dev/urandom", O_RDONLY );
-+            if (dev_random != -1)
-+            {
-+                read( dev_random, &sii, sizeof(sii) );
-+                close( dev_random );
-+            }
+         len = sizeof(sii);
 +
-             if ( Length >= len)
-             {
-                 if (!SystemInformation) ret = STATUS_ACCESS_VIOLATION;
++        /* Some applications use the returned buffer for random number
++         * generation. Its unlikely that an app depends on the exact
++         * layout, so just fill with values from /dev/urandom. */
++        dev_random = open( "/dev/urandom", O_RDONLY );
++        if (dev_random != -1)
++        {
++            read( dev_random, &sii, sizeof(sii) );
++            close( dev_random );
++        }
++
+         if (size >= len)
+         {
+             if (!info) ret = STATUS_ACCESS_VIOLATION;
 -- 
-2.6.4
+2.27.0
 
diff --git a/patches/ntdll-SystemModuleInformation/0001-ntdll-Don-t-call-LdrQueryProcessModuleInformation-in.patch b/patches/ntdll-SystemModuleInformation/0001-ntdll-Don-t-call-LdrQueryProcessModuleInformation-in.patch
index 9e03568dd..d68b212d9 100644
--- a/patches/ntdll-SystemModuleInformation/0001-ntdll-Don-t-call-LdrQueryProcessModuleInformation-in.patch
+++ b/patches/ntdll-SystemModuleInformation/0001-ntdll-Don-t-call-LdrQueryProcessModuleInformation-in.patch
@@ -1,4 +1,4 @@
-From ee3f09c31baedd50ab53179249b482eb51fcb0f3 Mon Sep 17 00:00:00 2001
+From e2f505d4c63dde39dbbcc215a7801020b04e3c25 Mon Sep 17 00:00:00 2001
 From: Zebediah Figura <z.figura12@gmail.com>
 Date: Mon, 6 Aug 2018 21:32:56 -0500
 Subject: [PATCH] ntdll: Don't call LdrQueryProcessModuleInformation in
@@ -12,30 +12,30 @@ This makes the anticheat engine in League of Legends 8.15+ happy.
 
 Wine-Bug: https://bugs.winehq.org/show_bug.cgi?id=45550
 ---
- dlls/ntdll/nt.c | 19 ++++++++++++++++---
+ dlls/ntdll/unix/system.c | 19 ++++++++++++++++---
  1 file changed, 16 insertions(+), 3 deletions(-)
 
-diff --git a/dlls/ntdll/nt.c b/dlls/ntdll/nt.c
-index af22e58..80d3ef8 100644
---- a/dlls/ntdll/nt.c
-+++ b/dlls/ntdll/nt.c
-@@ -2493,9 +2493,22 @@ NTSTATUS WINAPI NtQuerySystemInformation(
-         }
-         break;
+diff --git a/dlls/ntdll/unix/system.c b/dlls/ntdll/unix/system.c
+index 68de16b7e5b..a57b040c533 100644
+--- a/dlls/ntdll/unix/system.c
++++ b/dlls/ntdll/unix/system.c
+@@ -1930,9 +1930,22 @@ NTSTATUS WINAPI NtQuerySystemInformation( SYSTEM_INFORMATION_CLASS class,
+     }
+ 
      case SystemModuleInformation:
 -        /* FIXME: should be system-wide */
--        if (!SystemInformation) ret = STATUS_ACCESS_VIOLATION;
--        else ret = LdrQueryProcessModuleInformation( SystemInformation, Length, &len );
-+        if (!SystemInformation)
+-        if (!info) ret = STATUS_ACCESS_VIOLATION;
+-        else ret = LdrQueryProcessModuleInformation( info, size, &len );
++        if (!info)
 +            ret = STATUS_ACCESS_VIOLATION;
-+        else if (Length < FIELD_OFFSET( SYSTEM_MODULE_INFORMATION, Modules[1] ))
++        else if (size < FIELD_OFFSET( SYSTEM_MODULE_INFORMATION, Modules[1] ))
 +        {
 +            len = FIELD_OFFSET( SYSTEM_MODULE_INFORMATION, Modules[1] );
 +            ret = STATUS_INFO_LENGTH_MISMATCH;
 +        }
 +        else
 +        {
-+            SYSTEM_MODULE_INFORMATION *smi = SystemInformation;
++            SYSTEM_MODULE_INFORMATION *smi = info;
 +
 +            FIXME("returning fake driver list\n");
 +            smi->ModulesCount = 1;
@@ -43,8 +43,8 @@ index af22e58..80d3ef8 100644
 +            ret = STATUS_SUCCESS;
 +        }
          break;
+ 
      case SystemHandleInformation:
-         {
 -- 
-2.7.4
+2.27.0
 
diff --git a/patches/ntdll-SystemModuleInformation/0002-ntdll-Return-ntdll.dll-as-the-first-entry-for-System.patch b/patches/ntdll-SystemModuleInformation/0002-ntdll-Return-ntdll.dll-as-the-first-entry-for-System.patch
index 1b4f25b04..64b850e36 100644
--- a/patches/ntdll-SystemModuleInformation/0002-ntdll-Return-ntdll.dll-as-the-first-entry-for-System.patch
+++ b/patches/ntdll-SystemModuleInformation/0002-ntdll-Return-ntdll.dll-as-the-first-entry-for-System.patch
@@ -1,19 +1,19 @@
-From 77f0bfa7bbd70231a661397236124088af1ad76f Mon Sep 17 00:00:00 2001
+From b4fb299179bc4c04fd78909a21b24fd7a6667e4c Mon Sep 17 00:00:00 2001
 From: Andrew Wesie <awesie@gmail.com>
 Date: Fri, 12 Apr 2019 20:04:03 -0500
 Subject: [PATCH] ntdll: Return ntdll.dll as the first entry for
  SystemModuleInformation.
 
 ---
- dlls/ntdll/nt.c | 29 ++++++++++++++++++++++++++++-
- 1 file changed, 28 insertions(+), 1 deletion(-)
+ dlls/ntdll/unix/system.c | 28 +++++++++++++++++++++++++++-
+ 1 file changed, 27 insertions(+), 1 deletion(-)
 
-diff --git a/dlls/ntdll/nt.c b/dlls/ntdll/nt.c
-index 54626307ede..77db670623c 100644
---- a/dlls/ntdll/nt.c
-+++ b/dlls/ntdll/nt.c
-@@ -2493,6 +2493,33 @@ BOOLEAN WINAPI RtlIsProcessorFeaturePresent( UINT feature )
-     return feature < PROCESSOR_FEATURE_MAX && user_shared_data->ProcessorFeatures[feature];
+diff --git a/dlls/ntdll/unix/system.c b/dlls/ntdll/unix/system.c
+index a57b040c533..f118db8a89f 100644
+--- a/dlls/ntdll/unix/system.c
++++ b/dlls/ntdll/unix/system.c
+@@ -1630,6 +1630,32 @@ static void get_performance_info( SYSTEM_PERFORMANCE_INFORMATION *info )
+     info->TotalCommitLimit    = (totalram + totalswap) / page_size;
  }
  
 +static void get_ntdll_system_module(SYSTEM_MODULE *sm)
@@ -42,11 +42,10 @@ index 54626307ede..77db670623c 100644
 +    ptr = strrchr(str.Buffer, '\\');
 +    sm->NameOffset = (ptr != NULL) ? (ptr - str.Buffer + 1) : 0;
 +}
-+
+ 
  /******************************************************************************
-  * NtQuerySystemInformation [NTDLL.@]
-  * ZwQuerySystemInformation [NTDLL.@]
-@@ -2829,7 +2856,7 @@ NTSTATUS WINAPI NtQuerySystemInformation(
+  *              NtQuerySystemInformation  (NTDLL.@)
+@@ -1943,7 +1969,7 @@ NTSTATUS WINAPI NtQuerySystemInformation( SYSTEM_INFORMATION_CLASS class,
  
              FIXME("returning fake driver list\n");
              smi->ModulesCount = 1;
diff --git a/patches/ntdll-SystemModuleInformation/0003-ntdll-Add-stub-for-NtQuerySystemInformation-SystemMo.patch b/patches/ntdll-SystemModuleInformation/0003-ntdll-Add-stub-for-NtQuerySystemInformation-SystemMo.patch
index fd52fcfaf..5657b038f 100644
--- a/patches/ntdll-SystemModuleInformation/0003-ntdll-Add-stub-for-NtQuerySystemInformation-SystemMo.patch
+++ b/patches/ntdll-SystemModuleInformation/0003-ntdll-Add-stub-for-NtQuerySystemInformation-SystemMo.patch
@@ -1,33 +1,33 @@
-From 120d2e0cf3f75c087be14f65953980f5605f652e Mon Sep 17 00:00:00 2001
+From ab068a620223a6566c2a1d089fb4583992359bd2 Mon Sep 17 00:00:00 2001
 From: Andrew Wesie <awesie@gmail.com>
 Date: Fri, 12 Apr 2019 20:06:08 -0500
 Subject: [PATCH] ntdll: Add stub for
  NtQuerySystemInformation(SystemModuleInformationEx).
 
 ---
- dlls/ntdll/nt.c    | 21 +++++++++++++++++++++
- include/winternl.h |  9 +++++++++
- 2 files changed, 30 insertions(+)
+ dlls/ntdll/unix/system.c | 22 ++++++++++++++++++++++
+ include/winternl.h       |  9 +++++++++
+ 2 files changed, 31 insertions(+)
 
-diff --git a/dlls/ntdll/nt.c b/dlls/ntdll/nt.c
-index 3ce1b344dbd..935c6abec7f 100644
---- a/dlls/ntdll/nt.c
-+++ b/dlls/ntdll/nt.c
-@@ -3008,6 +3008,27 @@ NTSTATUS WINAPI NtQuerySystemInformation(
-             ret = STATUS_SUCCESS;
+diff --git a/dlls/ntdll/unix/system.c b/dlls/ntdll/unix/system.c
+index f118db8a89f..eecde7dcf97 100644
+--- a/dlls/ntdll/unix/system.c
++++ b/dlls/ntdll/unix/system.c
+@@ -1974,6 +1974,28 @@ NTSTATUS WINAPI NtQuerySystemInformation( SYSTEM_INFORMATION_CLASS class,
          }
          break;
+ 
 +    case SystemModuleInformationEx:
-+        if (!SystemInformation)
++        if (!info)
 +            ret = STATUS_ACCESS_VIOLATION;
-+        else if (Length < sizeof(SYSTEM_MODULE_INFORMATION_EX))
++        else if (size < sizeof(SYSTEM_MODULE_INFORMATION_EX))
 +        {
 +            len = sizeof(SYSTEM_MODULE_INFORMATION_EX);
 +            ret = STATUS_INFO_LENGTH_MISMATCH;
 +        }
 +        else
 +        {
-+            SYSTEM_MODULE_INFORMATION_EX *info = SystemInformation;
++            SYSTEM_MODULE_INFORMATION_EX *info = info;
 +
 +            FIXME("info_class SystemModuleInformationEx stub!\n");
 +            get_ntdll_system_module(&info->BaseInfo);
@@ -38,14 +38,15 @@ index 3ce1b344dbd..935c6abec7f 100644
 +            ret = STATUS_SUCCESS;
 +        }
 +        break;
++
      case SystemHandleInformation:
-         {
-             struct handle_info *info;
+     {
+         struct handle_info *handle_info;
 diff --git a/include/winternl.h b/include/winternl.h
-index d315d68be8f..d2d1001897d 100644
+index 3ff15f28c15..879b0931fc5 100644
 --- a/include/winternl.h
 +++ b/include/winternl.h
-@@ -2478,6 +2478,15 @@ typedef struct _SYSTEM_MODULE_INFORMATION
+@@ -2469,6 +2469,15 @@ typedef struct _SYSTEM_MODULE_INFORMATION
  #define PROCESS_CREATE_FLAGS_SUSPENDED              0x00000200
  #define PROCESS_CREATE_FLAGS_EXTENDED_UNKNOWN       0x00000400
  
@@ -62,5 +63,5 @@ index d315d68be8f..d2d1001897d 100644
  #define THREAD_CREATE_FLAGS_SKIP_THREAD_ATTACH      0x00000002
  #define THREAD_CREATE_FLAGS_HIDE_FROM_DEBUGGER      0x00000004
 -- 
-2.26.2
+2.27.0
 
diff --git a/patches/ntdll-WRITECOPY/0003-ntdll-Setup-a-temporary-signal-handler-during-proces.patch b/patches/ntdll-WRITECOPY/0003-ntdll-Setup-a-temporary-signal-handler-during-proces.patch
index 6cd4783d4..1b1f2bb5c 100644
--- a/patches/ntdll-WRITECOPY/0003-ntdll-Setup-a-temporary-signal-handler-during-proces.patch
+++ b/patches/ntdll-WRITECOPY/0003-ntdll-Setup-a-temporary-signal-handler-during-proces.patch
@@ -1,4 +1,4 @@
-From 9cdc9d195760a55263ba0bb7926e6e4d776cbd04 Mon Sep 17 00:00:00 2001
+From 2efee8f30caa027977f7cfb91a84b748a5fd17cd Mon Sep 17 00:00:00 2001
 From: =?UTF-8?q?Michael=20M=C3=BCller?= <michael@fds-team.de>
 Date: Sat, 4 Oct 2014 02:53:22 +0200
 Subject: [PATCH] ntdll: Setup a temporary signal handler during process
@@ -14,19 +14,19 @@ Subject: [PATCH] ntdll: Setup a temporary signal handler during process
  6 files changed, 73 insertions(+)
 
 diff --git a/dlls/ntdll/unix/loader.c b/dlls/ntdll/unix/loader.c
-index 4db78fec823..91b98c44b3f 100644
+index 73c24eff549..8881d073684 100644
 --- a/dlls/ntdll/unix/loader.c
 +++ b/dlls/ntdll/unix/loader.c
-@@ -1244,6 +1244,7 @@ void __wine_main( int argc, char *argv[], char *envp[] )
+@@ -1761,6 +1761,7 @@ void __wine_main( int argc, char *argv[], char *envp[] )
  #endif
  
      virtual_init();
 +    signal_init_early();
  
-     module = load_ntdll();
-     fixup_ntdll_imports( &__wine_spec_nt_header, module );
+     ntdll_module = load_ntdll();
+     fixup_ntdll_imports( &__wine_spec_nt_header );
 diff --git a/dlls/ntdll/unix/signal_arm.c b/dlls/ntdll/unix/signal_arm.c
-index faa2952a483..43e0fb848a3 100644
+index e65b8a93d18..d7a9323a195 100644
 --- a/dlls/ntdll/unix/signal_arm.c
 +++ b/dlls/ntdll/unix/signal_arm.c
 @@ -869,6 +869,12 @@ void signal_init_process(void)
@@ -43,7 +43,7 @@ index faa2952a483..43e0fb848a3 100644
  /***********************************************************************
   *           init_thread_context
 diff --git a/dlls/ntdll/unix/signal_arm64.c b/dlls/ntdll/unix/signal_arm64.c
-index e2c52a1a4f6..f3c67e1f5f4 100644
+index 7f8fb708ccd..574633dbd5d 100644
 --- a/dlls/ntdll/unix/signal_arm64.c
 +++ b/dlls/ntdll/unix/signal_arm64.c
 @@ -791,6 +791,13 @@ void signal_init_process(void)
@@ -61,7 +61,7 @@ index e2c52a1a4f6..f3c67e1f5f4 100644
   *           init_thread_context
   */
 diff --git a/dlls/ntdll/unix/signal_i386.c b/dlls/ntdll/unix/signal_i386.c
-index adf622ca673..44d0848a1ee 100644
+index 2f5d397ed55..c29a006736a 100644
 --- a/dlls/ntdll/unix/signal_i386.c
 +++ b/dlls/ntdll/unix/signal_i386.c
 @@ -1644,6 +1644,30 @@ static BOOL handle_interrupt( unsigned int interrupt, ucontext_t *sigcontext, st
@@ -131,7 +131,7 @@ index adf622ca673..44d0848a1ee 100644
  /***********************************************************************
   *           init_thread_context
 diff --git a/dlls/ntdll/unix/signal_x86_64.c b/dlls/ntdll/unix/signal_x86_64.c
-index 1bf8f5e8b8e..73c6ba4c34e 100644
+index 88ee18461a2..dedc17bf60e 100644
 --- a/dlls/ntdll/unix/signal_x86_64.c
 +++ b/dlls/ntdll/unix/signal_x86_64.c
 @@ -1415,6 +1415,12 @@ void signal_init_process(void)
@@ -148,10 +148,10 @@ index 1bf8f5e8b8e..73c6ba4c34e 100644
  /***********************************************************************
   *           init_thread_context
 diff --git a/dlls/ntdll/unix/unix_private.h b/dlls/ntdll/unix/unix_private.h
-index 95d4e2c2441..d88cf97f4b7 100644
+index 7dbfde43b34..fbcd200c420 100644
 --- a/dlls/ntdll/unix/unix_private.h
 +++ b/dlls/ntdll/unix/unix_private.h
-@@ -193,6 +193,7 @@ extern NTSTATUS signal_alloc_thread( TEB *teb ) DECLSPEC_HIDDEN;
+@@ -207,6 +207,7 @@ extern NTSTATUS signal_alloc_thread( TEB *teb ) DECLSPEC_HIDDEN;
  extern void signal_free_thread( TEB *teb ) DECLSPEC_HIDDEN;
  extern void signal_init_thread( TEB *teb ) DECLSPEC_HIDDEN;
  extern void signal_init_process(void) DECLSPEC_HIDDEN;
diff --git a/patches/ntdll-Zero_mod_name/0001-ntdll-Initialize-mod_name-to-zero.patch b/patches/ntdll-Zero_mod_name/0001-ntdll-Initialize-mod_name-to-zero.patch
index 80c23f588..0f4a4abf1 100644
--- a/patches/ntdll-Zero_mod_name/0001-ntdll-Initialize-mod_name-to-zero.patch
+++ b/patches/ntdll-Zero_mod_name/0001-ntdll-Initialize-mod_name-to-zero.patch
@@ -1,4 +1,4 @@
-From 8fe1b6c64671ab1fc5af0099b23021eae0a046d7 Mon Sep 17 00:00:00 2001
+From d1536aa5b9df87c3764dc2090bdde76f708fda94 Mon Sep 17 00:00:00 2001
 From: Qian Hong <qhong@codeweavers.com>
 Date: Wed, 9 Sep 2015 05:31:18 +0800
 Subject: [PATCH] ntdll: Initialize mod_name to zero.
@@ -8,11 +8,11 @@ Subject: [PATCH] ntdll: Initialize mod_name to zero.
  1 file changed, 2 insertions(+)
 
 diff --git a/dlls/ntdll/loader.c b/dlls/ntdll/loader.c
-index 0568be63ad8..98472b060e1 100644
+index 42cdc628021..ef1e28af2e7 100644
 --- a/dlls/ntdll/loader.c
 +++ b/dlls/ntdll/loader.c
-@@ -1363,6 +1363,8 @@ static NTSTATUS MODULE_InitDLL( WINE_MODREF *wm, UINT reason, LPVOID lpReserved
-     if (wm->so_handle && reason == DLL_PROCESS_ATTACH) call_constructors( wm );
+@@ -1299,6 +1299,8 @@ static NTSTATUS MODULE_InitDLL( WINE_MODREF *wm, UINT reason, LPVOID lpReserved
+         unix_funcs->init_builtin_dll( wm->ldr.DllBase );
      if (!entry) return STATUS_SUCCESS;
  
 +    memset( mod_name, 0, sizeof(mod_name) );
@@ -21,5 +21,5 @@ index 0568be63ad8..98472b060e1 100644
      {
          size_t len = min( wm->ldr.BaseDllName.Length, sizeof(mod_name)-sizeof(WCHAR) );
 -- 
-2.26.0
+2.27.0
 
diff --git a/patches/ntdll-aarch-TEB/0002-ntdll-Always-restore-TEB-to-x18-on-aarch-64-on-retur.patch b/patches/ntdll-aarch-TEB/0002-ntdll-Always-restore-TEB-to-x18-on-aarch-64-on-retur.patch
index 25268c388..28c8daa3b 100644
--- a/patches/ntdll-aarch-TEB/0002-ntdll-Always-restore-TEB-to-x18-on-aarch-64-on-retur.patch
+++ b/patches/ntdll-aarch-TEB/0002-ntdll-Always-restore-TEB-to-x18-on-aarch-64-on-retur.patch
@@ -1,4 +1,4 @@
-From e25066ea9c9e0442d4c18c13818071c104a9c5d2 Mon Sep 17 00:00:00 2001
+From f8c60f99727799ff3d5910e99155db0a356e4d77 Mon Sep 17 00:00:00 2001
 From: Martin Storsjo <martin@martin.st>
 Date: Wed, 16 Aug 2017 23:48:40 +0300
 Subject: [PATCH] ntdll: Always restore TEB to x18 on aarch 64 on return from
@@ -20,24 +20,24 @@ Signed-off-by: Martin Storsjo <martin@martin.st>
  2 files changed, 11 insertions(+), 1 deletion(-)
 
 diff --git a/dlls/ntdll/loader.c b/dlls/ntdll/loader.c
-index 0568be63ad8..b7612dcc9a7 100644
+index 42cdc628021..7b92330e874 100644
 --- a/dlls/ntdll/loader.c
 +++ b/dlls/ntdll/loader.c
-@@ -2036,7 +2036,13 @@ static NTSTATUS build_so_dll_module( const WCHAR *load_path, const UNICODE_STRIN
-     SERVER_END_REQ;
+@@ -1924,7 +1924,13 @@ static NTSTATUS build_module( LPCWSTR load_path, const UNICODE_STRING *nt_name,
  
-     /* setup relay debugging entry points */
--    if (TRACE_ON(relay)) RELAY_SetupDLL( module );
+     if (image_info->image_flags & IMAGE_FLAGS_WineBuiltin)
+     {
+-        if (TRACE_ON(relay)) RELAY_SetupDLL( *module );
 +#ifdef __aarch64__
-+    /* Always enable relay entry points on aarch64, to allow restoring
-+     * the TEB to x18. */
++        /* Always enable relay entry points on aarch64, to allow restoring
++         * the TEB to x18. */
 +#else
-+    if (TRACE_ON(relay))
++        if (TRACE_ON(relay))
 +#endif
-+        RELAY_SetupDLL( module );
- 
-     *pwm = wm;
-     return STATUS_SUCCESS;
++            RELAY_SetupDLL( *module );
+     }
+     else
+     {
 diff --git a/dlls/ntdll/relay.c b/dlls/ntdll/relay.c
 index acccf088811..35dd4161d8b 100644
 --- a/dlls/ntdll/relay.c
@@ -56,5 +56,5 @@ index acccf088811..35dd4161d8b 100644
  }
  
 -- 
-2.26.0
+2.27.0
 
diff --git a/patches/patchinstall.sh b/patches/patchinstall.sh
index 00d97d7ac..374c6f5c3 100755
--- a/patches/patchinstall.sh
+++ b/patches/patchinstall.sh
@@ -1577,6 +1573,13 @@ if test "$enable_shell32_Progress_Dialog" -eq 1; then
 	enable_shell32_SHFileOperation_Move=1
 fi
 
+if test "$enable_server_Object_Types" -eq 1; then
+	if test "$enable_ntdll_SystemModuleInformation" -gt 1; then
+		abort "Patchset ntdll-SystemModuleInformation disabled, but server-Object_Types depends on that."
+	fi
+	enable_ntdll_SystemModuleInformation=1
+fi
+
 if test "$enable_server_Inherited_ACLs" -eq 1; then
 	if test "$enable_server_Stored_ACLs" -gt 1; then
 		abort "Patchset server-Stored_ACLs disabled, but server-Inherited_ACLs depends on that."
@@ -1645,12 +1648,16 @@ if test "$enable_ntdll_Syscall_Emulation" -eq 1; then
 fi
 
 if test "$enable_winebuild_Fake_Dlls" -eq 1; then
+	if test "$enable_ntdll_ApiSetMap" -gt 1; then
+		abort "Patchset ntdll-ApiSetMap disabled, but winebuild-Fake_Dlls depends on that."
+	fi
 	if test "$enable_ntdll_WRITECOPY" -gt 1; then
 		abort "Patchset ntdll-WRITECOPY disabled, but winebuild-Fake_Dlls depends on that."
 	fi
 	if test "$enable_ws2_32_WSACleanup" -gt 1; then
 		abort "Patchset ws2_32-WSACleanup disabled, but winebuild-Fake_Dlls depends on that."
 	fi
+	enable_ntdll_ApiSetMap=1
 	enable_ntdll_WRITECOPY=1
 	enable_ws2_32_WSACleanup=1
 fi
@@ -3916,7 +3917,7 @@ fi
 # Patchset winebuild-Fake_Dlls
 # |
 # | This patchset has the following (direct or indirect) dependencies:
-# |   *	ntdll-WRITECOPY, ws2_32-WSACleanup
+# |   *	ntdll-ApiSetMap, ntdll-WRITECOPY, ws2_32-WSACleanup
 # |
 # | This patchset fixes the following Wine bugs:
 # |   *	[#21232] Chromium-based browser engines (Chrome, Opera, Comodo Dragon, SRWare Iron) crash on startup unless '--no-
@@ -3968,7 +3969,7 @@ fi
 # Patchset ntdll-Syscall_Emulation
 # |
 # | This patchset has the following (direct or indirect) dependencies:
-# |   *	ntdll-WRITECOPY, ws2_32-WSACleanup, winebuild-Fake_Dlls
+# |   *	ntdll-ApiSetMap, ntdll-WRITECOPY, ws2_32-WSACleanup, winebuild-Fake_Dlls
 # |
 # | This patchset fixes the following Wine bugs:
 # |   *	[#48291] Detroit: Become Human crashes on launch
@@ -3991,7 +3992,7 @@ fi
 # | 	SystemExtendedProcessInformation)
 # |
 # | Modified files:
-# |   *	dlls/ntdll/nt.c
+# |   *	dlls/ntdll/unix/system.c
 # |
 if test "$enable_ntdll_SystemExtendedProcessInformation" -eq 1; then
 	patch_apply ntdll-SystemExtendedProcessInformation/0001-ntdll-Add-stub-for-NtQuerySystemInformation-SystemEx.patch
@@ -4009,7 +4010,7 @@ fi
 # |   *	[#49192] ntdll: NtQuerySystemInformation support SystemCodeIntegrityInformation
 # |
 # | Modified files:
-# |   *	dlls/ntdll/nt.c, include/winternl.h
+# |   *	dlls/ntdll/unix/system.c, include/winternl.h
 # |
 if test "$enable_ntdll_SystemCodeIntegrityInformation" -eq 1; then
 	patch_apply ntdll-SystemCodeIntegrityInformation/0001-ntdll-NtQuerySystemInformation-support-SystemCodeInt.patch
@@ -4024,7 +4025,7 @@ fi
 # |   *	[#39123] Return buffer filled with random values from SystemInterruptInformation
 # |
 # | Modified files:
-# |   *	dlls/ntdll/nt.c
+# |   *	dlls/ntdll/unix/system.c
 # |
 if test "$enable_ntdll_SystemInterruptInformation" -eq 1; then
 	patch_apply ntdll-SystemInterruptInformation/0001-ntdll-Return-buffer-filled-with-random-values-from-S.patch
@@ -4042,7 +4043,7 @@ fi
 # | 	NtQuerySystemInformation(SystemModuleInformationEx) in Windows Vista+ mode
 # |
 # | Modified files:
-# |   *	dlls/ntdll/nt.c, include/winternl.h
+# |   *	dlls/ntdll/unix/system.c, include/winternl.h
 # |
 if test "$enable_ntdll_SystemModuleInformation" -eq 1; then
 	patch_apply ntdll-SystemModuleInformation/0001-ntdll-Don-t-call-LdrQueryProcessModuleInformation-in.patch
@@ -4559,12 +4543,15 @@ fi
 
 # Patchset server-Object_Types
 # |
+# | This patchset has the following (direct or indirect) dependencies:
+# |   *	ntdll-SystemModuleInformation
+# |
 # | This patchset fixes the following Wine bugs:
 # |   *	[#44629] Process Hacker can't enumerate handles
 # |   *	[#45374] Yet Another Process Monitor (.NET 2.0 app) reports System.AccessViolationException
 # |
 # | Modified files:
-# |   *	dlls/ntdll/nt.c, dlls/ntdll/om.c, dlls/ntdll/tests/info.c, dlls/ntdll/tests/om.c, include/winternl.h,
+# |   *	dlls/ntdll/om.c, dlls/ntdll/tests/info.c, dlls/ntdll/tests/om.c, dlls/ntdll/unix/system.c, include/winternl.h,
 # | 	server/completion.c, server/directory.c, server/event.c, server/file.c, server/handle.c, server/mailslot.c,
 # | 	server/main.c, server/mapping.c, server/mutex.c, server/named_pipe.c, server/object.c, server/object.h,
 # | 	server/process.c, server/protocol.def, server/registry.c, server/semaphore.c, server/symlink.c, server/thread.c,
diff --git a/patches/server-Desktop_Refcount/definition b/patches/server-Desktop_Refcount/definition
index 413dc31ad..03d22d5fa 100644
--- a/patches/server-Desktop_Refcount/definition
+++ b/patches/server-Desktop_Refcount/definition
@@ -1,4 +1,3 @@
 Fixes: Fix possible leak of explorer.exe processes and implement proper desktop refcounting
-Fixes: Assign random name when trying to create Window Station without name
 Fixes: [46967] GOG Galaxy doesn't run in virtual desktop.
 Depends: ws2_32-WSACleanup
diff --git a/patches/server-Object_Types/0001-ntdll-Implement-SystemExtendedHandleInformation-in-N.patch b/patches/server-Object_Types/0001-ntdll-Implement-SystemExtendedHandleInformation-in-N.patch
index 3b9b864cc..f88a5491e 100644
--- a/patches/server-Object_Types/0001-ntdll-Implement-SystemExtendedHandleInformation-in-N.patch
+++ b/patches/server-Object_Types/0001-ntdll-Implement-SystemExtendedHandleInformation-in-N.patch
@@ -1,82 +1,20 @@
-From 0384d32afa328e76bff7f8e508201ce2535ee763 Mon Sep 17 00:00:00 2001
+From e57cb9c97ea1147595a9c29e236515a2be69f9bd Mon Sep 17 00:00:00 2001
 From: =?UTF-8?q?Michael=20M=C3=BCller?= <michael@fds-team.de>
 Date: Tue, 7 Mar 2017 18:30:33 +0100
-Subject: ntdll: Implement SystemExtendedHandleInformation in
+Subject: [PATCH] ntdll: Implement SystemExtendedHandleInformation in
  NtQuerySystemInformation.
 
 ---
- dlls/ntdll/nt.c         | 51 +++++++++++++++++++++++++++++++++++++++++
- dlls/ntdll/tests/info.c | 60 +++++++++++++++++++++++++++++++++++++++++++++++++
- include/winternl.h      | 21 +++++++++++++++++
- 3 files changed, 132 insertions(+)
+ dlls/ntdll/tests/info.c  | 60 ++++++++++++++++++++++++++++++++++++++++
+ dlls/ntdll/unix/system.c | 52 ++++++++++++++++++++++++++++++++++
+ include/winternl.h       | 21 ++++++++++++++
+ 3 files changed, 133 insertions(+)
 
-diff --git a/dlls/ntdll/nt.c b/dlls/ntdll/nt.c
-index de8f16f9a0..a939298d19 100644
---- a/dlls/ntdll/nt.c
-+++ b/dlls/ntdll/nt.c
-@@ -2294,6 +2294,57 @@ NTSTATUS WINAPI NtQuerySystemInformation(
-             RtlFreeHeap( GetProcessHeap(), 0, info );
-         }
-         break;
-+    case SystemExtendedHandleInformation:
-+        {
-+            struct handle_info *info;
-+            DWORD i, num_handles;
-+
-+            if (Length < sizeof(SYSTEM_HANDLE_INFORMATION_EX))
-+            {
-+                ret = STATUS_INFO_LENGTH_MISMATCH;
-+                break;
-+            }
-+
-+            if (!SystemInformation)
-+            {
-+                ret = STATUS_ACCESS_VIOLATION;
-+                break;
-+            }
-+
-+            num_handles = (Length - FIELD_OFFSET( SYSTEM_HANDLE_INFORMATION_EX, Handle ));
-+            num_handles /= sizeof(SYSTEM_HANDLE_TABLE_ENTRY_INFO_EX);
-+            if (!(info = RtlAllocateHeap( GetProcessHeap(), 0, sizeof(*info) * num_handles )))
-+                return STATUS_NO_MEMORY;
-+
-+            SERVER_START_REQ( get_system_handles )
-+            {
-+                wine_server_set_reply( req, info, sizeof(*info) * num_handles );
-+                if (!(ret = wine_server_call( req )))
-+                {
-+                    SYSTEM_HANDLE_INFORMATION_EX *shi = SystemInformation;
-+                    shi->Count = wine_server_reply_size( req ) / sizeof(*info);
-+                    shi->Reserved = 0;
-+                    len = FIELD_OFFSET( SYSTEM_HANDLE_INFORMATION_EX, Handle[shi->Count] );
-+                    for (i = 0; i < shi->Count; i++)
-+                    {
-+                        memset( &shi->Handle[i], 0, sizeof(shi->Handle[i]) );
-+                        shi->Handle[i].UniqueProcessId = info[i].owner;
-+                        shi->Handle[i].HandleValue     = info[i].handle;
-+                        shi->Handle[i].GrantedAccess   = info[i].access;
-+                        /* FIXME: Fill out remaining fields */
-+                    }
-+                }
-+                else if (ret == STATUS_BUFFER_TOO_SMALL)
-+                {
-+                    len = FIELD_OFFSET( SYSTEM_HANDLE_INFORMATION_EX, Handle[reply->count] );
-+                    ret = STATUS_INFO_LENGTH_MISMATCH;
-+                }
-+            }
-+            SERVER_END_REQ;
-+
-+            RtlFreeHeap( GetProcessHeap(), 0, info );
-+        }
-+        break;
-     case SystemCacheInformation:
-         {
-             SYSTEM_CACHE_INFORMATION sci;
 diff --git a/dlls/ntdll/tests/info.c b/dlls/ntdll/tests/info.c
-index 32cb4f5a5d..c65a74bf5e 100644
+index eaf2f1a45b7..1728ab82225 100644
 --- a/dlls/ntdll/tests/info.c
 +++ b/dlls/ntdll/tests/info.c
-@@ -561,6 +561,62 @@ done:
+@@ -662,6 +662,62 @@ done:
      HeapFree( GetProcessHeap(), 0, shi);
  }
  
@@ -139,7 +77,7 @@ index 32cb4f5a5d..c65a74bf5e 100644
  static void test_query_cache(void)
  {
      NTSTATUS status;
-@@ -2147,6 +2203,10 @@ START_TEST(info)
+@@ -2715,6 +2771,10 @@ START_TEST(info)
      trace("Starting test_query_handle()\n");
      test_query_handle();
  
@@ -150,11 +88,74 @@ index 32cb4f5a5d..c65a74bf5e 100644
      /* 0x15 SystemCacheInformation */
      trace("Starting test_query_cache()\n");
      test_query_cache();
+diff --git a/dlls/ntdll/unix/system.c b/dlls/ntdll/unix/system.c
+index 5ba9fb41156..df4e11a0f56 100644
+--- a/dlls/ntdll/unix/system.c
++++ b/dlls/ntdll/unix/system.c
+@@ -1985,6 +1985,58 @@ NTSTATUS WINAPI NtQuerySystemInformation( SYSTEM_INFORMATION_CLASS class,
+         break;
+     }
+ 
++    case SystemExtendedHandleInformation:
++    {
++        struct handle_info *handle_info;
++        DWORD i, num_handles;
++
++        if (size < sizeof(SYSTEM_HANDLE_INFORMATION_EX))
++        {
++            ret = STATUS_INFO_LENGTH_MISMATCH;
++            break;
++        }
++
++        if (!info)
++        {
++            ret = STATUS_ACCESS_VIOLATION;
++            break;
++        }
++
++        num_handles = size - FIELD_OFFSET( SYSTEM_HANDLE_INFORMATION_EX, Handle );
++        num_handles /= sizeof(SYSTEM_HANDLE_TABLE_ENTRY_INFO_EX);
++        if (!(handle_info = RtlAllocateHeap( GetProcessHeap(), 0, sizeof(*handle_info) * num_handles )))
++            return STATUS_NO_MEMORY;
++
++        SERVER_START_REQ( get_system_handles )
++        {
++            wine_server_set_reply( req, handle_info, sizeof(*handle_info) * num_handles );
++            if (!(ret = wine_server_call( req )))
++            {
++                SYSTEM_HANDLE_INFORMATION_EX *shi = info;
++                shi->Count = wine_server_reply_size( req ) / sizeof(*handle_info);
++                shi->Reserved = 0;
++                len = FIELD_OFFSET( SYSTEM_HANDLE_INFORMATION_EX, Handle[shi->Count] );
++                for (i = 0; i < shi->Count; i++)
++                {
++                    memset( &shi->Handle[i], 0, sizeof(shi->Handle[i]) );
++                    shi->Handle[i].UniqueProcessId = handle_info[i].owner;
++                    shi->Handle[i].HandleValue     = handle_info[i].handle;
++                    shi->Handle[i].GrantedAccess   = handle_info[i].access;
++                    /* FIXME: Fill out remaining fields */
++                }
++            }
++            else if (ret == STATUS_BUFFER_TOO_SMALL)
++            {
++                len = FIELD_OFFSET( SYSTEM_HANDLE_INFORMATION_EX, Handle[reply->count] );
++                ret = STATUS_INFO_LENGTH_MISMATCH;
++            }
++        }
++        SERVER_END_REQ;
++
++        RtlFreeHeap( GetProcessHeap(), 0, handle_info );
++        break;
++    }
++
+     case SystemCacheInformation:
+     {
+         SYSTEM_CACHE_INFORMATION sci = { 0 };
 diff --git a/include/winternl.h b/include/winternl.h
-index 87b2c4d253..7ffe4f6c81 100644
+index 3ff15f28c15..66cd05dac15 100644
 --- a/include/winternl.h
 +++ b/include/winternl.h
-@@ -1442,6 +1442,27 @@ typedef struct _SYSTEM_HANDLE_INFORMATION {
+@@ -1531,6 +1531,27 @@ typedef struct _SYSTEM_HANDLE_INFORMATION {
      SYSTEM_HANDLE_ENTRY Handle[1];
  } SYSTEM_HANDLE_INFORMATION, *PSYSTEM_HANDLE_INFORMATION;
  
@@ -183,5 +184,5 @@ index 87b2c4d253..7ffe4f6c81 100644
  
  typedef struct _SYSTEM_CACHE_INFORMATION {
 -- 
-2.11.0
+2.27.0
 
diff --git a/patches/server-Object_Types/0009-ntdll-Set-object-type-for-System-Extended-HandleInfo.patch b/patches/server-Object_Types/0009-ntdll-Set-object-type-for-System-Extended-HandleInfo.patch
index 72db5626c..7eeb98f06 100644
--- a/patches/server-Object_Types/0009-ntdll-Set-object-type-for-System-Extended-HandleInfo.patch
+++ b/patches/server-Object_Types/0009-ntdll-Set-object-type-for-System-Extended-HandleInfo.patch
@@ -1,44 +1,44 @@
-From ba10e334a375c7dde7cd890554fbbade1be81a9d Mon Sep 17 00:00:00 2001
+From f4c44206896c0fdbcff7c465e631acff98bc920e Mon Sep 17 00:00:00 2001
 From: =?UTF-8?q?Michael=20M=C3=BCller?= <michael@fds-team.de>
 Date: Wed, 8 Mar 2017 17:44:17 +0100
-Subject: ntdll: Set object type for System(Extended)HandleInformation in
- NtQuerySystemInformation.
+Subject: [PATCH] ntdll: Set object type for System(Extended)HandleInformation
+ in NtQuerySystemInformation.
 
 ---
- dlls/ntdll/nt.c     |  4 +++-
- server/directory.c  |  6 ++++++
- server/handle.c     | 10 ++++++++++
- server/object.h     |  1 +
- server/protocol.def |  1 +
+ dlls/ntdll/unix/system.c |  4 +++-
+ server/directory.c       |  6 ++++++
+ server/handle.c          | 10 ++++++++++
+ server/object.h          |  1 +
+ server/protocol.def      |  1 +
  5 files changed, 21 insertions(+), 1 deletion(-)
 
-diff --git a/dlls/ntdll/nt.c b/dlls/ntdll/nt.c
-index a939298d19..211b67f98b 100644
---- a/dlls/ntdll/nt.c
-+++ b/dlls/ntdll/nt.c
-@@ -2280,7 +2280,8 @@ NTSTATUS WINAPI NtQuerySystemInformation(
-                         shi->Handle[i].OwnerPid     = info[i].owner;
-                         shi->Handle[i].HandleValue  = info[i].handle;
-                         shi->Handle[i].AccessMask   = info[i].access;
--                        /* FIXME: Fill out ObjectType, HandleFlags, ObjectPointer */
-+                        shi->Handle[i].ObjectType   = info[i].type;
-+                        /* FIXME: Fill out HandleFlags, ObjectPointer */
-                     }
+diff --git a/dlls/ntdll/unix/system.c b/dlls/ntdll/unix/system.c
+index 34cea04f852..7ae3f12753b 100644
+--- a/dlls/ntdll/unix/system.c
++++ b/dlls/ntdll/unix/system.c
+@@ -1970,7 +1970,8 @@ NTSTATUS WINAPI NtQuerySystemInformation( SYSTEM_INFORMATION_CLASS class,
+                     shi->Handle[i].OwnerPid     = handle_info[i].owner;
+                     shi->Handle[i].HandleValue  = handle_info[i].handle;
+                     shi->Handle[i].AccessMask   = handle_info[i].access;
+-                    /* FIXME: Fill out ObjectType, HandleFlags, ObjectPointer */
++                    shi->Handle[i].ObjectType   = handle_info[i].type;
++                    /* FIXME: Fill out HandleFlags, ObjectPointer */
                  }
-                 else if (ret == STATUS_BUFFER_TOO_SMALL)
-@@ -2331,6 +2332,7 @@ NTSTATUS WINAPI NtQuerySystemInformation(
-                         shi->Handle[i].UniqueProcessId = info[i].owner;
-                         shi->Handle[i].HandleValue     = info[i].handle;
-                         shi->Handle[i].GrantedAccess   = info[i].access;
-+                        shi->Handle[i].ObjectTypeIndex = info[i].type;
-                         /* FIXME: Fill out remaining fields */
-                     }
+             }
+             else if (ret == STATUS_BUFFER_TOO_SMALL)
+@@ -2022,6 +2023,7 @@ NTSTATUS WINAPI NtQuerySystemInformation( SYSTEM_INFORMATION_CLASS class,
+                     shi->Handle[i].UniqueProcessId = handle_info[i].owner;
+                     shi->Handle[i].HandleValue     = handle_info[i].handle;
+                     shi->Handle[i].GrantedAccess   = handle_info[i].access;
++                    shi->Handle[i].ObjectTypeIndex = handle_info[i].type;
+                     /* FIXME: Fill out remaining fields */
                  }
+             }
 diff --git a/server/directory.c b/server/directory.c
-index 59c8194d09..f61a5cecf1 100644
+index e6c1edc719a..021bc149c4d 100644
 --- a/server/directory.c
 +++ b/server/directory.c
-@@ -249,6 +249,12 @@ struct object_type *get_object_type( const struct unicode_str *name )
+@@ -247,6 +247,12 @@ struct object_type *get_object_type( const struct unicode_str *name )
      return type;
  }
  
@@ -52,10 +52,10 @@ index 59c8194d09..f61a5cecf1 100644
  
  static void create_session( unsigned int id )
 diff --git a/server/handle.c b/server/handle.c
-index 0e909ff27e..e29cead46b 100644
+index a2a8bb5479c..e40e9e95d8f 100644
 --- a/server/handle.c
 +++ b/server/handle.c
-@@ -971,6 +971,7 @@ static int enum_handles( struct process *process, void *user )
+@@ -790,6 +790,7 @@ static int enum_handles( struct process *process, void *user )
      struct handle_table *table = process->handles;
      struct handle_entry *entry;
      struct handle_info *handle;
@@ -63,7 +63,7 @@ index 0e909ff27e..e29cead46b 100644
      unsigned int i;
  
      if (!table)
-@@ -989,6 +990,15 @@ static int enum_handles( struct process *process, void *user )
+@@ -808,6 +809,15 @@ static int enum_handles( struct process *process, void *user )
          handle->owner  = process->id;
          handle->handle = index_to_handle(i);
          handle->access = entry->access & ~RESERVED_ALL;
@@ -80,10 +80,10 @@ index 0e909ff27e..e29cead46b 100644
      }
  
 diff --git a/server/object.h b/server/object.h
-index 3ba3f4b431..4a5d282a47 100644
+index f3f7617394d..1517e8c98fb 100644
 --- a/server/object.h
 +++ b/server/object.h
-@@ -264,6 +264,7 @@ static const WCHAR type_Type[] =          {'T','y','p','e'};
+@@ -262,6 +262,7 @@ static const WCHAR type_Type[] =          {'T','y','p','e'};
  static const WCHAR type_WindowStation[] = {'W','i','n','d','o','w','S','t','a','t','i','o','n'};
  
  extern void init_types(void);
@@ -92,10 +92,10 @@ index 3ba3f4b431..4a5d282a47 100644
  /* symbolic link functions */
  
 diff --git a/server/protocol.def b/server/protocol.def
-index d6847f8d55..35730d60cb 100644
+index 2ec81bb6ad1..72f148b12e7 100644
 --- a/server/protocol.def
 +++ b/server/protocol.def
-@@ -3433,6 +3433,7 @@ struct handle_info
+@@ -3493,6 +3493,7 @@ struct handle_info
      process_id_t owner;
      obj_handle_t handle;
      unsigned int access;
@@ -104,5 +104,5 @@ index d6847f8d55..35730d60cb 100644
  
  /* Return a list of all opened handles */
 -- 
-2.11.0
+2.27.0
 
diff --git a/patches/server-Object_Types/0010-ntdll-Mimic-object-type-behavior-for-different-windo.patch b/patches/server-Object_Types/0010-ntdll-Mimic-object-type-behavior-for-different-windo.patch
index 18a607c81..f3c4131f4 100644
--- a/patches/server-Object_Types/0010-ntdll-Mimic-object-type-behavior-for-different-windo.patch
+++ b/patches/server-Object_Types/0010-ntdll-Mimic-object-type-behavior-for-different-windo.patch
@@ -1,62 +1,20 @@
-From 963a3aedc5b1539187d9aa5065ff16d6c60b6477 Mon Sep 17 00:00:00 2001
+From aff46ac5cdbb7e202e4b153b2f869c55a17da1fa Mon Sep 17 00:00:00 2001
 From: =?UTF-8?q?Michael=20M=C3=BCller?= <michael@fds-team.de>
 Date: Wed, 8 Mar 2017 19:39:29 +0100
 Subject: [PATCH] ntdll: Mimic object type behavior for different windows
  versions.
 
 ---
- dlls/ntdll/nt.c       | 17 +++++++++--
- dlls/ntdll/om.c       |  5 +++-
- dlls/ntdll/tests/om.c | 65 ++++++++++++++++++++++++++++++++++++++++++-
- 3 files changed, 83 insertions(+), 4 deletions(-)
+ dlls/ntdll/om.c          |  5 +++-
+ dlls/ntdll/tests/om.c    | 65 +++++++++++++++++++++++++++++++++++++++-
+ dlls/ntdll/unix/system.c | 18 +++++++++--
+ 3 files changed, 83 insertions(+), 5 deletions(-)
 
-diff --git a/dlls/ntdll/nt.c b/dlls/ntdll/nt.c
-index d194f863..452fad15 100644
---- a/dlls/ntdll/nt.c
-+++ b/dlls/ntdll/nt.c
-@@ -126,6 +126,19 @@ struct smbios_chassis {
- #define FIRM 0x4649524D
- #define RSMB 0x52534D42
- 
-+static DWORD translate_object_index(DWORD index)
-+{
-+    WORD version = MAKEWORD(NtCurrentTeb()->Peb->OSMinorVersion, NtCurrentTeb()->Peb->OSMajorVersion);
-+
-+    /* Process Hacker depends on this logic */
-+    if (version >= 0x0602)
-+        return index;
-+    else if (version == 0x0601)
-+        return index + 2;
-+    else
-+        return index + 1;
-+}
-+
- /*
-  *	Token
-  */
-@@ -2617,7 +2630,7 @@ NTSTATUS WINAPI NtQuerySystemInformation(
-                         shi->Handle[i].OwnerPid     = info[i].owner;
-                         shi->Handle[i].HandleValue  = info[i].handle;
-                         shi->Handle[i].AccessMask   = info[i].access;
--                        shi->Handle[i].ObjectType   = info[i].type;
-+                        shi->Handle[i].ObjectType   = translate_object_index(info[i].type);
-                         /* FIXME: Fill out HandleFlags, ObjectPointer */
-                     }
-                 }
-@@ -2669,7 +2682,7 @@ NTSTATUS WINAPI NtQuerySystemInformation(
-                         shi->Handle[i].UniqueProcessId = info[i].owner;
-                         shi->Handle[i].HandleValue     = info[i].handle;
-                         shi->Handle[i].GrantedAccess   = info[i].access;
--                        shi->Handle[i].ObjectTypeIndex = info[i].type;
-+                        shi->Handle[i].ObjectTypeIndex = translate_object_index(info[i].type);
-                         /* FIXME: Fill out remaining fields */
-                     }
-                 }
 diff --git a/dlls/ntdll/om.c b/dlls/ntdll/om.c
-index c0479ea6..2156fad5 100644
+index 4fea106cc46..eea095acbf9 100644
 --- a/dlls/ntdll/om.c
 +++ b/dlls/ntdll/om.c
-@@ -185,7 +185,10 @@ NTSTATUS WINAPI NtQueryObject(IN HANDLE handle,
+@@ -182,7 +182,10 @@ NTSTATUS WINAPI NtQueryObject(IN HANDLE handle,
                      }
                      if (status == STATUS_SUCCESS)
                      {
@@ -69,10 +27,10 @@ index c0479ea6..2156fad5 100644
                  }
              }
 diff --git a/dlls/ntdll/tests/om.c b/dlls/ntdll/tests/om.c
-index a94b9866..54ef3955 100644
+index 398ad6bed4e..b538160f6d0 100644
 --- a/dlls/ntdll/tests/om.c
 +++ b/dlls/ntdll/tests/om.c
-@@ -74,6 +74,7 @@ static NTSTATUS (WINAPI *pNtQuerySystemTime)( LARGE_INTEGER * );
+@@ -76,6 +76,7 @@ static NTSTATUS (WINAPI *pNtQuerySystemTime)( LARGE_INTEGER * );
  static NTSTATUS (WINAPI *pRtlWaitOnAddress)( const void *, const void *, SIZE_T, const LARGE_INTEGER * );
  static void     (WINAPI *pRtlWakeAddressAll)( const void * );
  static void     (WINAPI *pRtlWakeAddressSingle)( const void * );
@@ -80,7 +38,7 @@ index a94b9866..54ef3955 100644
  
  #define KEYEDEVENT_WAIT       0x0001
  #define KEYEDEVENT_WAKE       0x0002
-@@ -1594,13 +1595,31 @@ static void test_query_object(void)
+@@ -1598,13 +1599,31 @@ static void test_query_object(void)
  
  }
  
@@ -113,7 +71,7 @@ index a94b9866..54ef3955 100644
  
      buffer = HeapAlloc( GetProcessHeap(), 0, sizeof(OBJECT_TYPES_INFORMATION) );
      ok( buffer != NULL, "Failed to allocate memory\n" );
-@@ -1628,11 +1647,54 @@ static void test_query_object_types(void)
+@@ -1632,11 +1651,54 @@ static void test_query_object_types(void)
              ok( type->TypeName.Length == sizeof(typeW) && !strncmpW(typeW, type->TypeName.Buffer, 4),
                  "Expected 'Type' as first type, got %s\n", wine_dbgstr_us(&type->TypeName) );
          }
@@ -168,7 +126,7 @@ index a94b9866..54ef3955 100644
  }
  
  static void test_type_mismatch(void)
-@@ -2226,6 +2288,7 @@ START_TEST(om)
+@@ -2263,6 +2325,7 @@ START_TEST(om)
      pRtlWaitOnAddress       =  (void *)GetProcAddress(hntdll, "RtlWaitOnAddress");
      pRtlWakeAddressAll      =  (void *)GetProcAddress(hntdll, "RtlWakeAddressAll");
      pRtlWakeAddressSingle   =  (void *)GetProcAddress(hntdll, "RtlWakeAddressSingle");
@@ -176,6 +134,56 @@ index a94b9866..54ef3955 100644
  
      test_case_sensitive();
      test_namespace_pipe();
+diff --git a/dlls/ntdll/unix/system.c b/dlls/ntdll/unix/system.c
+index b1b53256905..e317d34755c 100644
+--- a/dlls/ntdll/unix/system.c
++++ b/dlls/ntdll/unix/system.c
+@@ -1657,6 +1657,19 @@ static void get_ntdll_system_module(SYSTEM_MODULE *sm)
+     sm->NameOffset = (ptr != NULL) ? (ptr - str.Buffer + 1) : 0;
+ }
+ 
++static DWORD translate_object_index(DWORD index)
++{
++    WORD version = MAKEWORD(NtCurrentTeb()->Peb->OSMinorVersion, NtCurrentTeb()->Peb->OSMajorVersion);
++
++    /* Process Hacker depends on this logic */
++    if (version >= 0x0602)
++        return index;
++    else if (version == 0x0601)
++        return index + 2;
++    else
++        return index + 1;
++}
++
+ /******************************************************************************
+  *              NtQuerySystemInformation  (NTDLL.@)
+  */
+@@ -2031,7 +2044,7 @@ NTSTATUS WINAPI NtQuerySystemInformation( SYSTEM_INFORMATION_CLASS class,
+                     shi->Handle[i].OwnerPid     = handle_info[i].owner;
+                     shi->Handle[i].HandleValue  = handle_info[i].handle;
+                     shi->Handle[i].AccessMask   = handle_info[i].access;
+-                    shi->Handle[i].ObjectType   = handle_info[i].type;
++                    shi->Handle[i].ObjectType   = translate_object_index( handle_info[i].type );
+                     /* FIXME: Fill out HandleFlags, ObjectPointer */
+                 }
+             }
+@@ -2084,7 +2097,7 @@ NTSTATUS WINAPI NtQuerySystemInformation( SYSTEM_INFORMATION_CLASS class,
+                     shi->Handle[i].UniqueProcessId = handle_info[i].owner;
+                     shi->Handle[i].HandleValue     = handle_info[i].handle;
+                     shi->Handle[i].GrantedAccess   = handle_info[i].access;
+-                    shi->Handle[i].ObjectTypeIndex = handle_info[i].type;
++                    shi->Handle[i].ObjectTypeIndex = translate_object_index( handle_info[i].type );
+                     /* FIXME: Fill out remaining fields */
+                 }
+             }
+@@ -2314,7 +2327,6 @@ NTSTATUS WINAPI NtQuerySystemInformation( SYSTEM_INFORMATION_CLASS class,
+     return ret;
+ }
+ 
+-
+ /******************************************************************************
+  *              NtQuerySystemInformationEx  (NTDLL.@)
+  */
 -- 
-2.20.1
+2.27.0
 
diff --git a/patches/server-Object_Types/definition b/patches/server-Object_Types/definition
index 724bb014f..1da5e3dcc 100644
--- a/patches/server-Object_Types/definition
+++ b/patches/server-Object_Types/definition
@@ -1,3 +1,4 @@
 Fixes: [44629] Process Hacker can't enumerate handles
 Fixes: [45374] Yet Another Process Monitor (.NET 2.0 app) reports System.AccessViolationException
+Depends: ntdll-SystemModuleInformation
 #Depends: server-Shared_Memory
diff --git a/patches/winebuild-Fake_Dlls/0003-winebuild-Generate-syscall-thunks-for-ntdll-exports.patch b/patches/winebuild-Fake_Dlls/0003-winebuild-Generate-syscall-thunks-for-ntdll-exports.patch
index c3803c17b..23030329d 100644
--- a/patches/winebuild-Fake_Dlls/0003-winebuild-Generate-syscall-thunks-for-ntdll-exports.patch
+++ b/patches/winebuild-Fake_Dlls/0003-winebuild-Generate-syscall-thunks-for-ntdll-exports.patch
@@ -1,4 +1,4 @@
-From 488721840b4825a33c7e51aabf473cb81033c682 Mon Sep 17 00:00:00 2001
+From 9cbc0d6d9404dc93016ba7db6a10a2cad873cbba Mon Sep 17 00:00:00 2001
 From: =?UTF-8?q?Michael=20M=C3=BCller?= <michael@fds-team.de>
 Date: Thu, 11 May 2017 05:32:55 +0200
 Subject: [PATCH] winebuild: Generate syscall thunks for ntdll exports.
@@ -22,10 +22,10 @@ Based on a patch by Erich E. Hoover.
  14 files changed, 220 insertions(+), 31 deletions(-)
 
 diff --git a/dlls/ntdll/loader.c b/dlls/ntdll/loader.c
-index 87a65e4fc11..05d32ab167e 100644
+index 42cdc628021..339b54a9e67 100644
 --- a/dlls/ntdll/loader.c
 +++ b/dlls/ntdll/loader.c
-@@ -3812,6 +3812,7 @@ PIMAGE_NT_HEADERS WINAPI RtlImageNtHeader(HMODULE hModule)
+@@ -3387,6 +3387,7 @@ PIMAGE_NT_HEADERS WINAPI RtlImageNtHeader(HMODULE hModule)
      return ret;
  }
  
@@ -33,7 +33,7 @@ index 87a65e4fc11..05d32ab167e 100644
  
  /******************************************************************
   *		LdrInitializeThunk (NTDLL.@)
-@@ -3828,6 +3829,8 @@ void WINAPI LdrInitializeThunk( CONTEXT *context, void **entry, ULONG_PTR unknow
+@@ -3403,6 +3404,8 @@ void WINAPI LdrInitializeThunk( CONTEXT *context, void **entry, ULONG_PTR unknow
      WINE_MODREF *wm;
      LPCWSTR load_path = NtCurrentTeb()->Peb->ProcessParameters->DllPath.Buffer;
  
@@ -43,10 +43,10 @@ index 87a65e4fc11..05d32ab167e 100644
  
      RtlEnterCriticalSection( &loader_section );
 diff --git a/dlls/ntdll/signal_i386.c b/dlls/ntdll/signal_i386.c
-index 21cc1b3ead4..18be5693a7d 100644
+index bda19bf4632..5dccee926b9 100644
 --- a/dlls/ntdll/signal_i386.c
 +++ b/dlls/ntdll/signal_i386.c
-@@ -346,6 +346,8 @@ __ASM_STDCALL_FUNC( RtlCaptureContext, 4,
+@@ -336,6 +336,8 @@ __ASM_STDCALL_FUNC( RtlCaptureContext, 4,
                      "ret $4" )
  
  
@@ -55,7 +55,7 @@ index 21cc1b3ead4..18be5693a7d 100644
  /***********************************************************************
   *              NtGetContextThread  (NTDLL.@)
   *              ZwGetContextThread  (NTDLL.@)
-@@ -370,7 +372,7 @@ NTSTATUS CDECL DECLSPEC_HIDDEN __regs_NtGetContextThread( DWORD edi, DWORD esi,
+@@ -360,7 +362,7 @@ NTSTATUS CDECL DECLSPEC_HIDDEN __regs_NtGetContextThread( DWORD edi, DWORD esi,
      {
          context->Ebp    = ebp;
          context->Esp    = (DWORD)&retaddr;
@@ -65,7 +65,7 @@ index 21cc1b3ead4..18be5693a7d 100644
      }
      return unix_funcs->NtGetContextThread( handle, context );
 diff --git a/dlls/ntdll/tests/exception.c b/dlls/ntdll/tests/exception.c
-index a5e6faa461a..51938bf84cc 100644
+index 411439f180f..cd019fd5add 100644
 --- a/dlls/ntdll/tests/exception.c
 +++ b/dlls/ntdll/tests/exception.c
 @@ -1643,6 +1643,8 @@ static void test_thread_context(void)
@@ -78,7 +78,7 @@ index a5e6faa461a..51938bf84cc 100644
      ok( context.SegCs == LOWORD(expect.SegCs), "wrong SegCs %08x/%08x\n", context.SegCs, expect.SegCs );
      ok( context.SegDs == LOWORD(expect.SegDs), "wrong SegDs %08x/%08x\n", context.SegDs, expect.SegDs );
 diff --git a/dlls/ntdll/thread.c b/dlls/ntdll/thread.c
-index 7329aa177ba..a878a7a27fa 100644
+index fc57f186544..780b3b153da 100644
 --- a/dlls/ntdll/thread.c
 +++ b/dlls/ntdll/thread.c
 @@ -94,6 +94,14 @@ int __cdecl __wine_dbg_output( const char *str )
@@ -97,27 +97,27 @@ index 7329aa177ba..a878a7a27fa 100644
  /***********************************************************************
   *           thread_init
 @@ -105,7 +113,7 @@ int __cdecl __wine_dbg_output( const char *str )
- TEB *thread_init( SIZE_T *info_size, BOOL *suspend )
+ TEB *thread_init( SIZE_T *info_size )
  {
-     TEB *teb = unix_funcs->init_threading( &nb_threads, &__wine_ldt_copy, info_size, suspend, &server_cpus,
--                                           &is_wow64, &server_start_time );
-+                                           &is_wow64, &server_start_time, __wine_syscall_dispatcher );
+     ULONG_PTR val;
+-    TEB *teb = unix_funcs->init_threading( &nb_threads, &__wine_ldt_copy, info_size );
++    TEB *teb = unix_funcs->init_threading( &nb_threads, &__wine_ldt_copy, info_size, __wine_syscall_dispatcher );
  
      peb = teb->Peb;
      peb->FastPebLock        = &peb_lock;
 diff --git a/dlls/ntdll/unix/thread.c b/dlls/ntdll/unix/thread.c
-index d26e0a98cac..cb44bbfd5ea 100644
+index f3dddd2b02a..7952497645e 100644
 --- a/dlls/ntdll/unix/thread.c
 +++ b/dlls/ntdll/unix/thread.c
-@@ -85,7 +85,7 @@ static void pthread_exit_wrapper( int status )
+@@ -84,7 +84,7 @@ static void pthread_exit_wrapper( int status )
+ /***********************************************************************
   *           init_threading
   */
- TEB * CDECL init_threading( int *nb_threads_ptr, struct ldt_copy **ldt_copy, SIZE_T *size, BOOL *suspend,
--                            unsigned int *cpus, BOOL *wow64, timeout_t *start_time )
-+                            unsigned int *cpus, BOOL *wow64, timeout_t *start_time, void *syscall_handler )
+-TEB * CDECL init_threading( int *nb_threads_ptr, struct ldt_copy **ldt_copy, SIZE_T *size )
++TEB * CDECL init_threading( int *nb_threads_ptr, struct ldt_copy **ldt_copy, SIZE_T *size, void *syscall_handler )
  {
      TEB *teb;
-     SIZE_T info_size;
+     BOOL suspend;
 @@ -96,6 +96,7 @@ TEB * CDECL init_threading( int *nb_threads_ptr, struct ldt_copy **ldt_copy, SIZ
      nb_threads = nb_threads_ptr;
  
@@ -127,33 +127,33 @@ index d26e0a98cac..cb44bbfd5ea 100644
      signal_init_threading();
      signal_alloc_thread( teb );
 diff --git a/dlls/ntdll/unix/unix_private.h b/dlls/ntdll/unix/unix_private.h
-index 8811fd6c21d..166a6542724 100644
+index 707ca819e0e..72987a0041b 100644
 --- a/dlls/ntdll/unix/unix_private.h
 +++ b/dlls/ntdll/unix/unix_private.h
-@@ -113,7 +113,7 @@ extern void CDECL server_release_fd( HANDLE handle, int unix_fd ) DECLSPEC_HIDDE
+@@ -115,7 +115,7 @@ extern NTSTATUS CDECL server_handle_to_fd( HANDLE handle, unsigned int access, i
+                                            unsigned int *options ) DECLSPEC_HIDDEN;
+ extern void CDECL server_release_fd( HANDLE handle, int unix_fd ) DECLSPEC_HIDDEN;
  extern void CDECL server_init_process_done( void *relay ) DECLSPEC_HIDDEN;
- extern TEB * CDECL init_threading( int *nb_threads_ptr, struct ldt_copy **ldt_copy, SIZE_T *size,
-                                    BOOL *suspend, unsigned int *cpus, BOOL *wow64,
--                                   timeout_t *start_time ) DECLSPEC_HIDDEN;
-+                                   timeout_t *start_time, void *syscall_handler ) DECLSPEC_HIDDEN;
+-extern TEB * CDECL init_threading( int *nb_threads_ptr, struct ldt_copy **ldt_copy, SIZE_T *size ) DECLSPEC_HIDDEN;
++extern TEB * CDECL init_threading( int *nb_threads_ptr, struct ldt_copy **ldt_copy, SIZE_T *size, void *syscall_handler ) DECLSPEC_HIDDEN;
  extern void CDECL DECLSPEC_NORETURN exit_thread( int status ) DECLSPEC_HIDDEN;
  extern void CDECL DECLSPEC_NORETURN exit_process( int status ) DECLSPEC_HIDDEN;
  extern NTSTATUS CDECL exec_process( UNICODE_STRING *path, UNICODE_STRING *cmdline, NTSTATUS status ) DECLSPEC_HIDDEN;
 diff --git a/dlls/ntdll/unixlib.h b/dlls/ntdll/unixlib.h
-index 7dec512cb09..a9803478a37 100644
+index b14adce4a70..b5b7cb07c80 100644
 --- a/dlls/ntdll/unixlib.h
 +++ b/dlls/ntdll/unixlib.h
-@@ -302,7 +302,7 @@ struct unix_funcs
+@@ -304,7 +304,7 @@ struct unix_funcs
+     void          (CDECL *virtual_set_large_address_space)(void);
  
      /* thread/process functions */
-     TEB *         (CDECL *init_threading)( int *nb_threads_ptr, struct ldt_copy **ldt_copy, SIZE_T *size,
--                                           BOOL *suspend, unsigned int *cpus, BOOL *wow64, timeout_t *start_time );
-+                                           BOOL *suspend, unsigned int *cpus, BOOL *wow64, timeout_t *start_time, void *syscall_handler );
+-    TEB *         (CDECL *init_threading)( int *nb_threads_ptr, struct ldt_copy **ldt_copy, SIZE_T *size );
++    TEB *         (CDECL *init_threading)( int *nb_threads_ptr, struct ldt_copy **ldt_copy, SIZE_T *size, void *syscall_handler );
      void          (CDECL *exit_thread)( int status );
      void          (CDECL *exit_process)( int status );
      NTSTATUS      (CDECL *exec_process)( UNICODE_STRING *path, UNICODE_STRING *cmdline, NTSTATUS status );
 diff --git a/include/winternl.h b/include/winternl.h
-index 4b3202cdc20..5f58366f649 100644
+index 34d2737b705..ef848272f7f 100644
 --- a/include/winternl.h
 +++ b/include/winternl.h
 @@ -359,7 +359,7 @@ typedef struct _TEB
@@ -254,7 +254,7 @@ index 04ab433dd65..0c6bafed8e5 100644
              }
          }
 diff --git a/tools/winebuild/parser.c b/tools/winebuild/parser.c
-index 0f2b9c1e10a..74216f8bb6e 100644
+index 0207b8ac3c3..91f596f1d2d 100644
 --- a/tools/winebuild/parser.c
 +++ b/tools/winebuild/parser.c
 @@ -543,6 +543,24 @@ static const char *parse_spec_flags( DLLSPEC *spec, ORDDEF *odp )
@@ -335,7 +335,7 @@ index 0f2b9c1e10a..74216f8bb6e 100644
  /*******************************************************************
   *         add_16bit_exports
   *
-@@ -916,6 +973,8 @@ int parse_spec_file( FILE *file, DLLSPEC *spec )
+@@ -912,6 +969,8 @@ int parse_spec_file( FILE *file, DLLSPEC *spec )
      current_line = 0;  /* no longer parsing the input file */
      assign_names( spec );
      assign_ordinals( spec );
diff --git a/patches/winebuild-Fake_Dlls/0005-winebuild-Add-stub-functions-in-fake-dlls.patch b/patches/winebuild-Fake_Dlls/0005-winebuild-Add-stub-functions-in-fake-dlls.patch
index 15cb684c2..ddd580f10 100644
--- a/patches/winebuild-Fake_Dlls/0005-winebuild-Add-stub-functions-in-fake-dlls.patch
+++ b/patches/winebuild-Fake_Dlls/0005-winebuild-Add-stub-functions-in-fake-dlls.patch
@@ -1,4 +1,4 @@
-From ce23308632979fdff714da4322e4f56905873374 Mon Sep 17 00:00:00 2001
+From 56e581b1709c2def25db836cc8126c0eabfb11e7 Mon Sep 17 00:00:00 2001
 From: =?UTF-8?q?Michael=20M=C3=BCller?= <michael@fds-team.de>
 Date: Mon, 15 May 2017 16:27:56 +0200
 Subject: [PATCH] winebuild: Add stub functions in fake dlls.
@@ -62,10 +62,10 @@ index 984246681cb..78100205c9d 100644
      CloseHandle(map);
      CloseHandle(file);
 diff --git a/dlls/ntdll/loader.c b/dlls/ntdll/loader.c
-index 05d32ab167e..5b26a556f0d 100644
+index 339b54a9e67..995dcd48786 100644
 --- a/dlls/ntdll/loader.c
 +++ b/dlls/ntdll/loader.c
-@@ -3813,6 +3813,7 @@ PIMAGE_NT_HEADERS WINAPI RtlImageNtHeader(HMODULE hModule)
+@@ -3388,6 +3388,7 @@ PIMAGE_NT_HEADERS WINAPI RtlImageNtHeader(HMODULE hModule)
  }
  
  extern void DECLSPEC_NORETURN __wine_syscall_dispatcher( void );
@@ -73,7 +73,7 @@ index 05d32ab167e..5b26a556f0d 100644
  
  /******************************************************************
   *		LdrInitializeThunk (NTDLL.@)
-@@ -3830,6 +3831,7 @@ void WINAPI LdrInitializeThunk( CONTEXT *context, void **entry, ULONG_PTR unknow
+@@ -3405,6 +3406,7 @@ void WINAPI LdrInitializeThunk( CONTEXT *context, void **entry, ULONG_PTR unknow
      LPCWSTR load_path = NtCurrentTeb()->Peb->ProcessParameters->DllPath.Buffer;
  
      NtCurrentTeb()->WOW32Reserved = __wine_syscall_dispatcher;
@@ -82,7 +82,7 @@ index 05d32ab167e..5b26a556f0d 100644
      if (process_detaching) return;
  
 diff --git a/dlls/ntdll/thread.c b/dlls/ntdll/thread.c
-index a878a7a27fa..21ae0e9ebbd 100644
+index 3f84beb8f26..0eb7d901c4d 100644
 --- a/dlls/ntdll/thread.c
 +++ b/dlls/ntdll/thread.c
 @@ -36,6 +36,7 @@
@@ -93,7 +93,7 @@ index a878a7a27fa..21ae0e9ebbd 100644
  WINE_DECLARE_DEBUG_CHANNEL(relay);
  
  struct _KUSER_SHARED_DATA *user_shared_data = (void *)0x7ffe0000;
-@@ -103,6 +104,39 @@ void __wine_syscall_dispatcher( void )
+@@ -104,6 +105,39 @@ void __wine_syscall_dispatcher( void )
  }
  #endif
  
@@ -133,19 +133,19 @@ index a878a7a27fa..21ae0e9ebbd 100644
  /***********************************************************************
   *           thread_init
   *
-@@ -114,6 +148,7 @@ TEB *thread_init( SIZE_T *info_size, BOOL *suspend )
- {
-     TEB *teb = unix_funcs->init_threading( &nb_threads, &__wine_ldt_copy, info_size, suspend, &server_cpus,
-                                            &is_wow64, &server_start_time, __wine_syscall_dispatcher );
-+    teb->Spare2 = (ULONG_PTR)__wine_fakedll_dispatcher;
+@@ -116,6 +150,7 @@ TEB *thread_init( SIZE_T *info_size )
+     ULONG_PTR val;
+     TEB *teb = unix_funcs->init_threading( &nb_threads, &__wine_ldt_copy, info_size, __wine_syscall_dispatcher );
  
++    teb->Spare2 = (ULONG_PTR)__wine_fakedll_dispatcher;
      peb = teb->Peb;
      peb->FastPebLock        = &peb_lock;
+     peb->ApiSetMap          = &apiset_map;
 diff --git a/include/winternl.h b/include/winternl.h
-index 5f58366f649..d3b708c3e0d 100644
+index 6de209d6f07..d9c31156025 100644
 --- a/include/winternl.h
 +++ b/include/winternl.h
-@@ -398,7 +398,7 @@ typedef struct _TEB
+@@ -399,7 +399,7 @@ typedef struct _TEB
      PVOID                        Instrumentation[16];               /* f2c/16b8 */
      PVOID                        WinSockData;                       /* f6c/1738 */
      ULONG                        GdiBatchCount;                     /* f70/1740 */
diff --git a/patches/winebuild-Fake_Dlls/0010-tools-winebuild-Add-syscall-thunks-for-64-bit.patch b/patches/winebuild-Fake_Dlls/0010-tools-winebuild-Add-syscall-thunks-for-64-bit.patch
index a8f6ebc4e..c3742a62b 100644
--- a/patches/winebuild-Fake_Dlls/0010-tools-winebuild-Add-syscall-thunks-for-64-bit.patch
+++ b/patches/winebuild-Fake_Dlls/0010-tools-winebuild-Add-syscall-thunks-for-64-bit.patch
@@ -1,4 +1,4 @@
-From 2f3bcc431318c7db08080c6e2c9f9b566f9123ec Mon Sep 17 00:00:00 2001
+From 8650aa0a3229b84a102cca1d9fe40f9dbd5a038d Mon Sep 17 00:00:00 2001
 From: =?UTF-8?q?Michael=20M=C3=BCller?= <michael@fds-team.de>
 Date: Thu, 7 Sep 2017 00:38:09 +0200
 Subject: [PATCH] tools/winebuild: Add syscall thunks for 64 bit.
@@ -42,23 +42,23 @@ index d39ebe4a37c..dccd9c1fc68 100644
              todo_wine ok(0, "%s: Export is a stub-function, skipping\n", func_name);
              continue;
 diff --git a/dlls/ntdll/unix/thread.c b/dlls/ntdll/unix/thread.c
-index cb44bbfd5ea..196dc2d8c4e 100644
+index 7952497645e..ca5eba4da88 100644
 --- a/dlls/ntdll/unix/thread.c
 +++ b/dlls/ntdll/unix/thread.c
 @@ -104,7 +104,7 @@ TEB * CDECL init_threading( int *nb_threads_ptr, struct ldt_copy **ldt_copy, SIZ
      dbg_init();
      server_init_process();
-     info_size = server_init_thread( teb->Peb, suspend );
+     info_size = server_init_thread( teb->Peb, &suspend );
 -    virtual_map_user_shared_data();
-+    virtual_map_user_shared_data(syscall_handler);
++    virtual_map_user_shared_data( syscall_handler );
+     virtual_create_builtin_view( ntdll_module );
+     init_cpu_info();
      init_files();
-     NtCreateKeyedEvent( &keyed_event, GENERIC_READ | GENERIC_WRITE, NULL, 0 );
- 
 diff --git a/dlls/ntdll/unix/unix_private.h b/dlls/ntdll/unix/unix_private.h
-index 166a6542724..df508e569f9 100644
+index 72987a0041b..15be5d3715a 100644
 --- a/dlls/ntdll/unix/unix_private.h
 +++ b/dlls/ntdll/unix/unix_private.h
-@@ -177,7 +177,7 @@ extern TEB *virtual_alloc_first_teb(void) DECLSPEC_HIDDEN;
+@@ -187,7 +187,7 @@ extern TEB *virtual_alloc_first_teb(void) DECLSPEC_HIDDEN;
  extern NTSTATUS virtual_alloc_teb( TEB **ret_teb ) DECLSPEC_HIDDEN;
  extern void virtual_free_teb( TEB *teb ) DECLSPEC_HIDDEN;
  extern NTSTATUS virtual_clear_tls_index( ULONG index ) DECLSPEC_HIDDEN;
@@ -68,10 +68,10 @@ index 166a6542724..df508e569f9 100644
  extern unsigned int virtual_locked_server_call( void *req_ptr ) DECLSPEC_HIDDEN;
  extern ssize_t virtual_locked_read( int fd, void *addr, size_t size ) DECLSPEC_HIDDEN;
 diff --git a/dlls/ntdll/unix/virtual.c b/dlls/ntdll/unix/virtual.c
-index ca25cdd304e..7f7660d0795 100644
+index e759cf686bd..0c8de5f2c24 100644
 --- a/dlls/ntdll/unix/virtual.c
 +++ b/dlls/ntdll/unix/virtual.c
-@@ -2607,14 +2607,14 @@ TEB *virtual_alloc_first_teb(void)
+@@ -2608,14 +2608,14 @@ TEB *virtual_alloc_first_teb(void)
      TEB *teb;
      PEB *peb;
      NTSTATUS status;
@@ -88,7 +88,7 @@ index ca25cdd304e..7f7660d0795 100644
      if (status)
      {
          ERR( "wine: failed to map the shared user data: %08x\n", status );
-@@ -2838,7 +2838,7 @@ void virtual_clear_thread_stack( void *stack_end )
+@@ -2839,7 +2839,7 @@ void virtual_clear_thread_stack( void *stack_end )
  /***********************************************************************
   *           virtual_map_user_shared_data
   */
@@ -97,7 +97,7 @@ index ca25cdd304e..7f7660d0795 100644
  {
      static const WCHAR wine_usdW[] = {'\\','K','e','r','n','e','l','O','b','j','e','c','t','s',
                                        '\\','_','_','w','i','n','e','_','u','s','e','r','_','s','h','a','r','e','d','_','d','a','t','a',0};
-@@ -2861,6 +2861,11 @@ void virtual_map_user_shared_data(void)
+@@ -2862,6 +2862,11 @@ void virtual_map_user_shared_data(void)
          ERR( "failed to remap the process USD: %d\n", res );
          exit(1);
      }
@@ -143,7 +143,7 @@ index 0941dd87c05..002f3215af2 100644
  }
  
 diff --git a/tools/winebuild/parser.c b/tools/winebuild/parser.c
-index 74216f8bb6e..820516329a4 100644
+index 91f596f1d2d..533ec5d2009 100644
 --- a/tools/winebuild/parser.c
 +++ b/tools/winebuild/parser.c
 @@ -545,7 +545,7 @@ static const char *parse_spec_flags( DLLSPEC *spec, ORDDEF *odp )
diff --git a/patches/winebuild-Fake_Dlls/definition b/patches/winebuild-Fake_Dlls/definition
index 99799c336..2f30fce6c 100644
--- a/patches/winebuild-Fake_Dlls/definition
+++ b/patches/winebuild-Fake_Dlls/definition
@@ -4,4 +4,5 @@ Fixes: [45349] Multiple applications and games crash due to missing support for
 Fixes: [45573] League of Legends 8.12+ fails to start a game (anticheat engine, hooking of syscall return instructions)
 Fixes: [45650] chromium 32-bit sandbox expects different syscall thunks depending on Windows version
 Depends: ntdll-WRITECOPY
-Depends: ws2_32-WSACleanup
\ No newline at end of file
+Depends: ws2_32-WSACleanup
+Depends: ntdll-ApiSetMap

diff --git a/patches/ntdll-HashLinks/0001-ntdll-Implement-HashLinks-field-in-LDR-module-data.patch b/patches/ntdll-HashLinks/0001-ntdll-Implement-HashLinks-field-in-LDR-module-data.patch
index ade275815..eea5e9e78 100644
--- a/patches/ntdll-HashLinks/0001-ntdll-Implement-HashLinks-field-in-LDR-module-data.patch
+++ b/patches/ntdll-HashLinks/0001-ntdll-Implement-HashLinks-field-in-LDR-module-data.patch
@@ -1,4 +1,4 @@
-From 6f7c87fdffe6aca49a2795eb29821557f20858c2 Mon Sep 17 00:00:00 2001
+From b1af584b5d5b8905bf4dd3ec6be9227e5221a744 Mon Sep 17 00:00:00 2001
 From: =?UTF-8?q?Michael=20M=C3=BCller?= <michael@fds-team.de>
 Date: Mon, 3 Apr 2017 05:30:27 +0200
 Subject: [PATCH] ntdll: Implement HashLinks field in LDR module data.
@@ -10,7 +10,7 @@ Subject: [PATCH] ntdll: Implement HashLinks field in LDR module data.
  3 files changed, 142 insertions(+), 1 deletion(-)
 
 diff --git a/dlls/kernel32/tests/loader.c b/dlls/kernel32/tests/loader.c
-index 4bafd0f6349..f8a65e10758 100644
+index 59965984a67..95f18fb71e3 100644
 --- a/dlls/kernel32/tests/loader.c
 +++ b/dlls/kernel32/tests/loader.c
 @@ -30,6 +30,7 @@
@@ -21,7 +21,7 @@ index 4bafd0f6349..f8a65e10758 100644
  #include "wine/test.h"
  #include "delayloadhandler.h"
  
-@@ -3970,6 +3971,79 @@ static void test_LoadPackagedLibrary(void)
+@@ -3968,6 +3969,79 @@ static void test_LoadPackagedLibrary(void)
              h, GetLastError());
  }
  
@@ -101,7 +101,7 @@ index 4bafd0f6349..f8a65e10758 100644
  START_TEST(loader)
  {
      int argc;
-@@ -4042,10 +4116,12 @@ START_TEST(loader)
+@@ -4040,10 +4114,12 @@ START_TEST(loader)
      test_InMemoryOrderModuleList();
      test_LoadPackagedLibrary();
      test_wow64_redirection();
@@ -115,20 +115,20 @@ index 4bafd0f6349..f8a65e10758 100644
      test_Loader();
  }
 diff --git a/dlls/ntdll/loader.c b/dlls/ntdll/loader.c
-index 0c8f05285c4..ebbd910d6cd 100644
+index c90cdcc860b..63e1227cc55 100644
 --- a/dlls/ntdll/loader.c
 +++ b/dlls/ntdll/loader.c
-@@ -122,6 +122,9 @@ static const char * const reason_names[] =
- 
- static const WCHAR dllW[] = {'.','d','l','l',0};
+@@ -128,6 +128,9 @@ struct file_id
+     BYTE ObjectId[16];
+ };
  
 +#define HASH_MAP_SIZE 32
 +static LIST_ENTRY hash_table[HASH_MAP_SIZE];
 +
- /* internal representation of 32bit modules. per process. */
+ /* internal representation of loaded modules */
  typedef struct _wine_modref
  {
-@@ -462,6 +465,52 @@ static void call_ldr_notifications( ULONG reason, LDR_DATA_TABLE_ENTRY *module )
+@@ -467,6 +470,52 @@ static void call_ldr_notifications( ULONG reason, LDR_DATA_TABLE_ENTRY *module )
      }
  }
  
@@ -181,7 +181,7 @@ index 0c8f05285c4..ebbd910d6cd 100644
  /*************************************************************************
   *		get_modref
   *
-@@ -1227,7 +1276,12 @@ static WINE_MODREF *alloc_module( HMODULE hModule, const UNICODE_STRING *nt_name
+@@ -1231,7 +1280,12 @@ static WINE_MODREF *alloc_module( HMODULE hModule, const UNICODE_STRING *nt_name
                     &wm->ldr.InLoadOrderLinks);
      InsertTailList(&NtCurrentTeb()->Peb->LdrData->InMemoryOrderModuleList,
                     &wm->ldr.InMemoryOrderLinks);
@@ -194,7 +194,7 @@ index 0c8f05285c4..ebbd910d6cd 100644
  
      if (!(nt->OptionalHeader.DllCharacteristics & IMAGE_DLLCHARACTERISTICS_NX_COMPAT))
      {
-@@ -1886,6 +1940,7 @@ static NTSTATUS build_so_dll_module( const WCHAR *load_path, const UNICODE_STRIN
+@@ -1892,6 +1946,7 @@ static NTSTATUS build_so_dll_module( const WCHAR *load_path, const UNICODE_STRIN
              /* the module has only been inserted in the load & memory order lists */
              RemoveEntryList(&wm->ldr.InLoadOrderLinks);
              RemoveEntryList(&wm->ldr.InMemoryOrderLinks);
@@ -202,7 +202,7 @@ index 0c8f05285c4..ebbd910d6cd 100644
              /* FIXME: free the modref */
              return status;
          }
-@@ -2429,6 +2484,7 @@ static NTSTATUS load_native_dll( LPCWSTR load_path, const UNICODE_STRING *nt_nam
+@@ -2433,6 +2488,7 @@ static NTSTATUS load_native_dll( LPCWSTR load_path, const UNICODE_STRING *nt_nam
              /* the module has only be inserted in the load & memory order lists */
              RemoveEntryList(&wm->ldr.InLoadOrderLinks);
              RemoveEntryList(&wm->ldr.InMemoryOrderLinks);
@@ -210,7 +210,7 @@ index 0c8f05285c4..ebbd910d6cd 100644
  
              /* FIXME: there are several more dangling references
               * left. Including dlls loaded by this dll before the
-@@ -3649,6 +3705,7 @@ static void free_modref( WINE_MODREF *wm )
+@@ -3652,6 +3708,7 @@ static void free_modref( WINE_MODREF *wm )
  {
      RemoveEntryList(&wm->ldr.InLoadOrderLinks);
      RemoveEntryList(&wm->ldr.InMemoryOrderLinks);
@@ -218,7 +218,7 @@ index 0c8f05285c4..ebbd910d6cd 100644
      if (wm->ldr.InInitializationOrderLinks.Flink)
          RemoveEntryList(&wm->ldr.InInitializationOrderLinks);
  
-@@ -4369,6 +4426,7 @@ void __wine_process_init(void)
+@@ -4372,6 +4429,7 @@ void __wine_process_init(void)
      SIZE_T info_size;
      TEB *teb;
      PEB *peb;
@@ -226,7 +226,7 @@ index 0c8f05285c4..ebbd910d6cd 100644
  
      if (!unix_funcs) load_ntdll_so( ntdll_module, &__wine_spec_nt_header );
  
-@@ -4389,6 +4447,10 @@ void __wine_process_init(void)
+@@ -4388,6 +4446,10 @@ void __wine_process_init(void)
      load_global_options();
      version_init();
  
@@ -237,7 +237,7 @@ index 0c8f05285c4..ebbd910d6cd 100644
      /* setup the load callback and create ntdll modref */
      RtlInitUnicodeString( &nt_name, ntdllW );
      status = build_so_dll_module( params->DllPath.Buffer, &nt_name, ntdll_module, 0, &wm );
-@@ -4464,6 +4526,9 @@ void __wine_process_init(void)
+@@ -4463,6 +4525,9 @@ void __wine_process_init(void)
      teb->Tib.StackLimit = stack.StackLimit;
      teb->DeallocationStack = stack.DeallocationStack;
  
@@ -248,10 +248,10 @@ index 0c8f05285c4..ebbd910d6cd 100644
  }
  
 diff --git a/include/winternl.h b/include/winternl.h
-index acbce20c212..150a3777d4b 100644
+index 3ff15f28c15..59e9eddd26d 100644
 --- a/include/winternl.h
 +++ b/include/winternl.h
-@@ -2354,8 +2354,8 @@ typedef struct _LDR_DATA_TABLE_ENTRY
+@@ -2369,8 +2369,8 @@ typedef struct _LDR_DATA_TABLE_ENTRY
      ULONG               Flags;
      SHORT               LoadCount;
      SHORT               TlsIndex;
@@ -262,5 +262,5 @@ index acbce20c212..150a3777d4b 100644
      HANDLE              ActivationContext;
      void*               Lock;
 -- 
-2.26.2
+2.27.0
 
diff --git a/patches/ntdll-NtQueryEaFile/definition b/patches/ntdll-NtQueryEaFile/definition
index a86870c2f..0a8262fcf 100644
--- a/patches/ntdll-NtQueryEaFile/definition
+++ b/patches/ntdll-NtQueryEaFile/definition
@@ -1,3 +1,5 @@
 Fixes: Improve stub for NtQueryEaFile
 # Depends: ntdll-Syscall_Wrappers
 Depends: ntdll-Junction_Points
+# Temporarily disabled until it's moved to unixlib.
+Disabled: true
diff --git a/patches/patchinstall.sh b/patches/patchinstall.sh
index 4a8188d32..00d97d7ac 100755
--- a/patches/patchinstall.sh
+++ b/patches/patchinstall.sh
@@ -183,7 +182,6 @@ patch_enable_all ()
 	enable_ntdll_Manifest_Range="$1"
 	enable_ntdll_NtAccessCheck="$1"
 	enable_ntdll_NtDevicePath="$1"
-	enable_ntdll_NtQueryEaFile="$1"
 	enable_ntdll_NtQuerySection="$1"
 	enable_ntdll_NtSetLdtEntries="$1"
 	enable_ntdll_Pipe_SpecialCharacters="$1"
@@ -644,9 +639,6 @@ patch_enable ()
 		ntdll-NtDevicePath)
 			enable_ntdll_NtDevicePath="$2"
 			;;
-		ntdll-NtQueryEaFile)
-			enable_ntdll_NtQueryEaFile="$2"
-			;;
 		ntdll-NtQuerySection)
 			enable_ntdll_NtQuerySection="$2"
 			;;
@@ -1667,13 +1655,6 @@ if test "$enable_winebuild_Fake_Dlls" -eq 1; then
 	enable_ws2_32_WSACleanup=1
 fi
 
-if test "$enable_ntdll_NtQueryEaFile" -eq 1; then
-	if test "$enable_ntdll_Junction_Points" -gt 1; then
-		abort "Patchset ntdll-Junction_Points disabled, but ntdll-NtQueryEaFile depends on that."
-	fi
-	enable_ntdll_Junction_Points=1
-fi
-
 if test "$enable_ntdll_NtDevicePath" -eq 1; then
 	if test "$enable_ntdll_Pipe_SpecialCharacters" -gt 1; then
 		abort "Patchset ntdll-Pipe_SpecialCharacters disabled, but ntdll-NtDevicePath depends on that."
@@ -3858,21 +3798,6 @@ if test "$enable_ntdll_NtDevicePath" -eq 1; then
 	) >> "$patchlist"
 fi
 
-# Patchset ntdll-NtQueryEaFile
-# |
-# | This patchset has the following (direct or indirect) dependencies:
-# |   *	ntdll-DOS_Attributes, ntdll-Junction_Points
-# |
-# | Modified files:
-# |   *	dlls/ntdll/file.c, dlls/ntdll/tests/file.c
-# |
-if test "$enable_ntdll_NtQueryEaFile" -eq 1; then
-	patch_apply ntdll-NtQueryEaFile/0001-ntdll-Improve-stub-of-NtQueryEaFile.patch
-	(
-		printf '%s\n' '+    { "Sebastian Lackner", "ntdll: Improve stub of NtQueryEaFile.", 1 },';
-	) >> "$patchlist"
-fi
-
 # Patchset ntdll-NtQuerySection
 # |
 # | Modified files:
diff --git a/patches/ws2_32-WSACleanup/0002-ws2_32-Invalidate-client-side-file-descriptor-cache-.patch b/patches/ws2_32-WSACleanup/0002-ws2_32-Invalidate-client-side-file-descriptor-cache-.patch
index 5a1970a0d..833c76477 100644
--- a/patches/ws2_32-WSACleanup/0002-ws2_32-Invalidate-client-side-file-descriptor-cache-.patch
+++ b/patches/ws2_32-WSACleanup/0002-ws2_32-Invalidate-client-side-file-descriptor-cache-.patch
@@ -1,4 +1,4 @@
-From 87580d2eef0c3d91a89be07e912dea3053c26d71 Mon Sep 17 00:00:00 2001
+From 95070fa887dfecb93e3fbf8afd0cd4ac17e03b69 Mon Sep 17 00:00:00 2001
 From: Sebastian Lackner <sebastian@fds-team.de>
 Date: Sun, 6 Sep 2015 12:41:17 +0200
 Subject: [PATCH] ws2_32: Invalidate client-side file descriptor cache in
@@ -17,10 +17,10 @@ Subject: [PATCH] ws2_32: Invalidate client-side file descriptor cache in
  9 files changed, 35 insertions(+), 4 deletions(-)
 
 diff --git a/dlls/ntdll/ntdll.spec b/dlls/ntdll/ntdll.spec
-index a9422723b71..e4f2f0e9c2b 100644
+index 0b0d4587969..99d4c57cdfe 100644
 --- a/dlls/ntdll/ntdll.spec
 +++ b/dlls/ntdll/ntdll.spec
-@@ -1578,6 +1578,7 @@
+@@ -1577,6 +1577,7 @@
  
  # Server interface
  @ cdecl -norelay wine_server_call(ptr)
@@ -48,22 +48,22 @@ index 9e1cc85a36e..3f4ba60b7bb 100644
  /***********************************************************************
   *           wine_server_release_fd   (NTDLL.@)
 diff --git a/dlls/ntdll/unix/loader.c b/dlls/ntdll/unix/loader.c
-index 91b98c44b3f..105dc07c085 100644
+index 51ff7f950e8..5da6dc7fa9d 100644
 --- a/dlls/ntdll/unix/loader.c
 +++ b/dlls/ntdll/unix/loader.c
-@@ -974,6 +974,7 @@ static struct unix_funcs unix_funcs =
+@@ -1024,6 +1024,7 @@ static struct unix_funcs unix_funcs =
      exec_process,
      wine_server_call,
      server_send_fd,
 +    server_remove_fds_from_cache_by_type,
-     server_get_unix_fd,
      server_fd_to_handle,
      server_handle_to_fd,
+     server_release_fd,
 diff --git a/dlls/ntdll/unix/server.c b/dlls/ntdll/unix/server.c
-index a4d1bdf9373..eacc38c984d 100644
+index 299a311496b..0fac751d12f 100644
 --- a/dlls/ntdll/unix/server.c
 +++ b/dlls/ntdll/unix/server.c
-@@ -1001,6 +1001,26 @@ static int remove_fd_from_cache( HANDLE handle )
+@@ -981,6 +981,26 @@ static int remove_fd_from_cache( HANDLE handle )
      return fd;
  }
  
@@ -91,34 +91,34 @@ index a4d1bdf9373..eacc38c984d 100644
  /***********************************************************************
   *           server_get_unix_fd
 diff --git a/dlls/ntdll/unix/unix_private.h b/dlls/ntdll/unix/unix_private.h
-index 9361092f0f1..fc5269ed1ec 100644
+index e0bc5a9603e..c24b7503ede 100644
 --- a/dlls/ntdll/unix/unix_private.h
 +++ b/dlls/ntdll/unix/unix_private.h
-@@ -100,6 +100,7 @@ extern void CDECL virtual_release_address_space(void) DECLSPEC_HIDDEN;
+@@ -111,6 +111,7 @@ extern void CDECL virtual_release_address_space(void) DECLSPEC_HIDDEN;
  extern void CDECL virtual_set_large_address_space(void) DECLSPEC_HIDDEN;
  
  extern void CDECL server_send_fd( int fd ) DECLSPEC_HIDDEN;
 +extern void CDECL server_remove_fds_from_cache_by_type( enum server_fd_type type ) DECLSPEC_HIDDEN;
- extern int CDECL server_get_unix_fd( HANDLE handle, unsigned int wanted_access, int *unix_fd,
-                                      int *needs_close, enum server_fd_type *type,
-                                      unsigned int *options ) DECLSPEC_HIDDEN;
+ extern NTSTATUS CDECL server_fd_to_handle( int fd, unsigned int access, unsigned int attributes,
+                                            HANDLE *handle ) DECLSPEC_HIDDEN;
+ extern NTSTATUS CDECL server_handle_to_fd( HANDLE handle, unsigned int access, int *unix_fd,
 diff --git a/dlls/ntdll/unixlib.h b/dlls/ntdll/unixlib.h
-index 4169e3e8ece..0709c7e7441 100644
+index 311d99f482d..39b30566365 100644
 --- a/dlls/ntdll/unixlib.h
 +++ b/dlls/ntdll/unixlib.h
-@@ -291,6 +291,7 @@ struct unix_funcs
+@@ -310,6 +310,7 @@ struct unix_funcs
      /* server functions */
      unsigned int  (CDECL *server_call)( void *req_ptr );
      void          (CDECL *server_send_fd)( int fd );
 +    void          (CDECL *server_remove_fds_from_cache_by_type)( enum server_fd_type type );
-     int           (CDECL *server_get_unix_fd)( HANDLE handle, unsigned int wanted_access, int *unix_fd,
-                                                int *needs_close, enum server_fd_type *type, unsigned int *options );
      NTSTATUS      (CDECL *server_fd_to_handle)( int fd, unsigned int access, unsigned int attributes,
+                                                 HANDLE *handle );
+     NTSTATUS      (CDECL *server_handle_to_fd)( HANDLE handle, unsigned int access, int *unix_fd,
 diff --git a/dlls/ws2_32/socket.c b/dlls/ws2_32/socket.c
-index bbc44ca2c20..37d110d216f 100644
+index f81d23650bc..27b309172ea 100644
 --- a/dlls/ws2_32/socket.c
 +++ b/dlls/ws2_32/socket.c
-@@ -1729,6 +1729,7 @@ INT WINAPI WSACleanup(void)
+@@ -1740,6 +1740,7 @@ INT WINAPI WSACleanup(void)
  
      if (!--num_startup)
      {

diff --git a/patches/ntdll-Junction_Points/0001-ntdll-Add-support-for-junction-point-creation.patch b/patches/ntdll-Junction_Points/0001-ntdll-Add-support-for-junction-point-creation.patch
index fa2e04106..c754a1085 100644
--- a/patches/ntdll-Junction_Points/0001-ntdll-Add-support-for-junction-point-creation.patch
+++ b/patches/ntdll-Junction_Points/0001-ntdll-Add-support-for-junction-point-creation.patch
@@ -1,4 +1,4 @@
-From e3e2a837a2dd411b3e265581388fba1050e08c53 Mon Sep 17 00:00:00 2001
+From f886d8af24ba52e791535c7a606c4ca97cc5ed8e Mon Sep 17 00:00:00 2001
 From: "Erich E. Hoover" <erich.e.hoover@gmail.com>
 Date: Thu, 16 Jan 2014 20:56:49 -0700
 Subject: [PATCH] ntdll: Add support for junction point creation.
@@ -6,19 +6,19 @@ Subject: [PATCH] ntdll: Add support for junction point creation.
 Signed-off-by: Erich E. Hoover <erich.e.hoover@gmail.com>
 ---
  configure.ac            |   2 +
- dlls/ntdll/file.c       | 118 ++++++++++++++++++++++++++++++++++++++++
  dlls/ntdll/tests/file.c | 101 ++++++++++++++++++++++++++++++++++
+ dlls/ntdll/unix/file.c  | 117 ++++++++++++++++++++++++++++++++++++++++
  include/Makefile.in     |   1 +
- include/ntifs.h         |  42 ++++++++++++++
- include/wine/port.h     |   9 +++
+ include/ntifs.h         |  42 +++++++++++++++
+ include/wine/port.h     |   9 ++++
  libs/port/Makefile.in   |   1 +
  libs/port/renameat2.c   |  55 +++++++++++++++++++
- 8 files changed, 329 insertions(+)
+ 8 files changed, 328 insertions(+)
  create mode 100644 include/ntifs.h
  create mode 100644 libs/port/renameat2.c
 
 diff --git a/configure.ac b/configure.ac
-index 8a76b74e83d..d3bd12a6340 100644
+index 9c5f76669df..201ae3c2d98 100644
 --- a/configure.ac
 +++ b/configure.ac
 @@ -2203,6 +2203,8 @@ AC_CHECK_FUNCS(\
@@ -30,156 +30,6 @@ index 8a76b74e83d..d3bd12a6340 100644
  	sched_yield \
  	select \
  	setproctitle \
-diff --git a/dlls/ntdll/file.c b/dlls/ntdll/file.c
-index b3e881ac3c9..5a4004a61a4 100644
---- a/dlls/ntdll/file.c
-+++ b/dlls/ntdll/file.c
-@@ -21,6 +21,7 @@
- 
- #include <stdlib.h>
- #include <string.h>
-+#include <libgen.h>
- #include <stdio.h>
- #include <errno.h>
- #include <assert.h>
-@@ -109,6 +110,7 @@
- #include "ddk/ntddser.h"
- #define WINE_MOUNTMGR_EXTENSIONS
- #include "ddk/mountmgr.h"
-+#include "ntifs.h"
- 
- WINE_DEFAULT_DEBUG_CHANNEL(ntdll);
- 
-@@ -1545,6 +1547,104 @@ NTSTATUS WINAPI NtDeviceIoControlFile(HANDLE handle, HANDLE event,
- }
- 
- 
-+/*
-+ * Retrieve the unix name corresponding to a file handle, remove that directory, and then symlink the
-+ * requested directory to the location of the old directory.
-+ */
-+NTSTATUS FILE_CreateSymlink(HANDLE handle, REPARSE_DATA_BUFFER *buffer)
-+{
-+    BOOL src_allocated = FALSE, dest_allocated = FALSE, tempdir_created = FALSE;
-+    int dest_len = buffer->MountPointReparseBuffer.SubstituteNameLength;
-+    int offset = buffer->MountPointReparseBuffer.SubstituteNameOffset;
-+    WCHAR *dest = &buffer->MountPointReparseBuffer.PathBuffer[offset];
-+    char tmpdir[PATH_MAX], tmplink[PATH_MAX], *d;
-+    ANSI_STRING unix_src, unix_dest;
-+    char magic_dest[PATH_MAX];
-+    int dest_fd, needs_close;
-+    UNICODE_STRING nt_dest;
-+    NTSTATUS status;
-+    int i;
-+
-+    if ((status = unix_funcs->server_get_unix_fd( handle, FILE_SPECIAL_ACCESS, &dest_fd, &needs_close, NULL, NULL )))
-+        return status;
-+
-+    if ((status = server_get_unix_name( handle, &unix_src )))
-+        goto cleanup;
-+    src_allocated = TRUE;
-+    nt_dest.Buffer = dest;
-+    nt_dest.Length = dest_len;
-+    status = wine_nt_to_unix_file_name( &nt_dest, &unix_dest, 0, FALSE );
-+    if (status != STATUS_SUCCESS && status != STATUS_NO_SUCH_FILE)
-+        goto cleanup;
-+    dest_allocated = TRUE;
-+
-+    TRACE("Linking %s to %s\n", unix_src.Buffer, unix_dest.Buffer);
-+
-+    /* Encode the reparse tag into the symlink */
-+    strcpy( magic_dest, "/" );
-+    for (i = 0; i < sizeof(ULONG)*8; i++)
-+    {
-+        if ((buffer->ReparseTag >> i) & 1)
-+            strcat( magic_dest, "." );
-+        strcat( magic_dest, "/" );
-+    }
-+    strcat( magic_dest, unix_dest.Buffer );
-+
-+    /* Produce the link in a temporary location in the same folder */
-+    strcpy( tmpdir, unix_src.Buffer );
-+    d = dirname( tmpdir);
-+    if (d != tmpdir) strcpy( tmpdir, d );
-+    strcat( tmpdir, "/.winelink.XXXXXX" );
-+    if (mkdtemp( tmpdir ) == NULL)
-+    {
-+        status = FILE_GetNtStatus();
-+        goto cleanup;
-+    }
-+    tempdir_created = TRUE;
-+    strcpy( tmplink, tmpdir );
-+    strcat( tmplink, "/tmplink" );
-+    if (symlink( magic_dest, tmplink ))
-+    {
-+        status = FILE_GetNtStatus();
-+        goto cleanup;
-+    }
-+    /* Atomically move the link into position */
-+    if (!renameat2( -1, tmplink, -1, unix_src.Buffer, RENAME_EXCHANGE ))
-+    {
-+        /* success: link and folder have switched locations */
-+        rmdir( tmplink ); /* remove the folder (at link location) */
-+    }
-+    else if (errno == ENOSYS)
-+    {
-+        FIXME( "Atomic exchange of directory with symbolic link unsupported on this system, "
-+               "using unsafe exchange instead.\n" );
-+        if (rmdir( unix_src.Buffer ))
-+        {
-+            status = FILE_GetNtStatus();
-+            goto cleanup;
-+        }
-+        if (rename( tmplink, unix_src.Buffer ))
-+        {
-+            status = FILE_GetNtStatus();
-+            goto cleanup; /* not moved, orignal file/folder at destination is orphaned */
-+        }
-+    }
-+    else
-+    {
-+        status = FILE_GetNtStatus();
-+        goto cleanup;
-+    }
-+    status = STATUS_SUCCESS;
-+
-+cleanup:
-+    if (tempdir_created) rmdir( tmpdir );
-+    if (dest_allocated) RtlFreeAnsiString( &unix_dest );
-+    if (src_allocated) RtlFreeAnsiString( &unix_src );
-+    if (needs_close) close( dest_fd );
-+    return status;
-+}
-+
-+
- /**************************************************************************
-  *              NtFsControlFile                 [NTDLL.@]
-  *              ZwFsControlFile                 [NTDLL.@]
-@@ -1629,6 +1729,24 @@ NTSTATUS WINAPI NtFsControlFile(HANDLE handle, HANDLE event, PIO_APC_ROUTINE apc
-         io->Information = 0;
-         status = STATUS_SUCCESS;
-         break;
-+
-+    case FSCTL_SET_REPARSE_POINT:
-+    {
-+        REPARSE_DATA_BUFFER *buffer = (REPARSE_DATA_BUFFER *)in_buffer;
-+
-+        switch(buffer->ReparseTag)
-+        {
-+        case IO_REPARSE_TAG_MOUNT_POINT:
-+            status = FILE_CreateSymlink( handle, buffer );
-+            break;
-+        default:
-+            FIXME("stub: FSCTL_SET_REPARSE_POINT(%x)\n", buffer->ReparseTag);
-+            status = STATUS_NOT_IMPLEMENTED;
-+            break;
-+        }
-+        break;
-+    }
-+
-     default:
-         return server_ioctl_file( handle, event, apc, apc_context, io, code,
-                                   in_buffer, in_size, out_buffer, out_size );
 diff --git a/dlls/ntdll/tests/file.c b/dlls/ntdll/tests/file.c
 index 184b7cdad59..8b5ddbb0da1 100644
 --- a/dlls/ntdll/tests/file.c
@@ -304,6 +154,155 @@ index 184b7cdad59..8b5ddbb0da1 100644
      test_flush_buffers_file();
 +    test_reparse_points();
  }
+diff --git a/dlls/ntdll/unix/file.c b/dlls/ntdll/unix/file.c
+index ca6899b50f5..44cb12f90ee 100644
+--- a/dlls/ntdll/unix/file.c
++++ b/dlls/ntdll/unix/file.c
+@@ -32,6 +32,7 @@
+ #include <dirent.h>
+ #include <errno.h>
+ #include <fcntl.h>
++#include <libgen.h>
+ #include <stdarg.h>
+ #include <string.h>
+ #include <stdlib.h>
+@@ -122,6 +123,7 @@
+ #include "ddk/wdm.h"
+ #define WINE_MOUNTMGR_EXTENSIONS
+ #include "ddk/mountmgr.h"
++#include "ntifs.h"
+ #include "wine/server.h"
+ #include "wine/list.h"
+ #include "wine/debug.h"
+@@ -5607,6 +5609,104 @@ static void ignore_server_ioctl_struct_holes( ULONG code, const void *in_buffer,
+ }
+ 
+ 
++/*
++ * Retrieve the unix name corresponding to a file handle, remove that directory, and then symlink the
++ * requested directory to the location of the old directory.
++ */
++NTSTATUS FILE_CreateSymlink(HANDLE handle, REPARSE_DATA_BUFFER *buffer)
++{
++    BOOL src_allocated = FALSE, dest_allocated = FALSE, tempdir_created = FALSE;
++    int dest_len = buffer->MountPointReparseBuffer.SubstituteNameLength;
++    int offset = buffer->MountPointReparseBuffer.SubstituteNameOffset;
++    WCHAR *dest = &buffer->MountPointReparseBuffer.PathBuffer[offset];
++    char tmpdir[PATH_MAX], tmplink[PATH_MAX], *d;
++    ANSI_STRING unix_src, unix_dest;
++    char magic_dest[PATH_MAX];
++    int dest_fd, needs_close;
++    UNICODE_STRING nt_dest;
++    NTSTATUS status;
++    int i;
++
++    if ((status = server_get_unix_fd( handle, FILE_SPECIAL_ACCESS, &dest_fd, &needs_close, NULL, NULL )))
++        return status;
++
++    if ((status = server_get_unix_name( handle, &unix_src )))
++        goto cleanup;
++    src_allocated = TRUE;
++    nt_dest.Buffer = dest;
++    nt_dest.Length = dest_len;
++    status = nt_to_unix_file_name( &nt_dest, &unix_dest, 0, FALSE );
++    if (status != STATUS_SUCCESS && status != STATUS_NO_SUCH_FILE)
++        goto cleanup;
++    dest_allocated = TRUE;
++
++    TRACE("Linking %s to %s\n", unix_src.Buffer, unix_dest.Buffer);
++
++    /* Encode the reparse tag into the symlink */
++    strcpy( magic_dest, "/" );
++    for (i = 0; i < sizeof(ULONG)*8; i++)
++    {
++        if ((buffer->ReparseTag >> i) & 1)
++            strcat( magic_dest, "." );
++        strcat( magic_dest, "/" );
++    }
++    strcat( magic_dest, unix_dest.Buffer );
++
++    /* Produce the link in a temporary location in the same folder */
++    strcpy( tmpdir, unix_src.Buffer );
++    d = dirname( tmpdir);
++    if (d != tmpdir) strcpy( tmpdir, d );
++    strcat( tmpdir, "/.winelink.XXXXXX" );
++    if (mkdtemp( tmpdir ) == NULL)
++    {
++        status = errno_to_status( errno );
++        goto cleanup;
++    }
++    tempdir_created = TRUE;
++    strcpy( tmplink, tmpdir );
++    strcat( tmplink, "/tmplink" );
++    if (symlink( magic_dest, tmplink ))
++    {
++        status = errno_to_status( errno );
++        goto cleanup;
++    }
++    /* Atomically move the link into position */
++    if (!renameat2( -1, tmplink, -1, unix_src.Buffer, RENAME_EXCHANGE ))
++    {
++        /* success: link and folder have switched locations */
++        rmdir( tmplink ); /* remove the folder (at link location) */
++    }
++    else if (errno == ENOSYS)
++    {
++        FIXME( "Atomic exchange of directory with symbolic link unsupported on this system, "
++               "using unsafe exchange instead.\n" );
++        if (rmdir( unix_src.Buffer ))
++        {
++            status = errno_to_status( errno );
++            goto cleanup;
++        }
++        if (rename( tmplink, unix_src.Buffer ))
++        {
++            status = errno_to_status( errno );
++            goto cleanup; /* not moved, orignal file/folder at destination is orphaned */
++        }
++    }
++    else
++    {
++        status = errno_to_status( errno );
++        goto cleanup;
++    }
++    status = STATUS_SUCCESS;
++
++cleanup:
++    if (tempdir_created) rmdir( tmpdir );
++    if (dest_allocated) RtlFreeAnsiString( &unix_dest );
++    if (src_allocated) RtlFreeAnsiString( &unix_src );
++    if (needs_close) close( dest_fd );
++    return status;
++}
++
++
+ /******************************************************************************
+  *              NtFsControlFile   (NTDLL.@)
+  */
+@@ -5671,6 +5771,23 @@ NTSTATUS WINAPI NtFsControlFile( HANDLE handle, HANDLE event, PIO_APC_ROUTINE ap
+         io->Information = 0;
+         status = STATUS_SUCCESS;
+         break;
++
++    case FSCTL_SET_REPARSE_POINT:
++    {
++        REPARSE_DATA_BUFFER *buffer = (REPARSE_DATA_BUFFER *)in_buffer;
++
++        switch(buffer->ReparseTag)
++        {
++        case IO_REPARSE_TAG_MOUNT_POINT:
++            status = FILE_CreateSymlink( handle, buffer );
++            break;
++        default:
++            FIXME("stub: FSCTL_SET_REPARSE_POINT(%x)\n", buffer->ReparseTag);
++            status = STATUS_NOT_IMPLEMENTED;
++            break;
++        }
++        break;
++    }
+     default:
+         return server_ioctl_file( handle, event, apc, apc_context, io, code,
+                                   in_buffer, in_size, out_buffer, out_size );
 diff --git a/include/Makefile.in b/include/Makefile.in
 index 9f70e72b4c7..1c5c456aa39 100644
 --- a/include/Makefile.in
diff --git a/patches/ntdll-Junction_Points/0002-ntdll-Add-support-for-reading-junction-points.patch b/patches/ntdll-Junction_Points/0002-ntdll-Add-support-for-reading-junction-points.patch
index f8b80c693..c03364e80 100644
--- a/patches/ntdll-Junction_Points/0002-ntdll-Add-support-for-reading-junction-points.patch
+++ b/patches/ntdll-Junction_Points/0002-ntdll-Add-support-for-reading-junction-points.patch
@@ -1,19 +1,53 @@
-From daf6a4fc8ae19ab9f9df39f958109c09232b5426 Mon Sep 17 00:00:00 2001
+From f601df88922fd3719b34376344488fe2a04afe6b Mon Sep 17 00:00:00 2001
 From: "Erich E. Hoover" <erich.e.hoover@gmail.com>
 Date: Thu, 16 Jan 2014 20:57:57 -0700
 Subject: [PATCH] ntdll: Add support for reading junction points.
 
 Signed-off-by: Erich E. Hoover <erich.e.hoover@gmail.com>
 ---
- dlls/ntdll/file.c       | 106 ++++++++++++++++++++++++++++++++++++++++
  dlls/ntdll/tests/file.c |  14 +++++-
+ dlls/ntdll/unix/file.c  | 106 ++++++++++++++++++++++++++++++++++++++++
  2 files changed, 119 insertions(+), 1 deletion(-)
 
-diff --git a/dlls/ntdll/file.c b/dlls/ntdll/file.c
-index 37dca75651c..5a05217102d 100644
---- a/dlls/ntdll/file.c
-+++ b/dlls/ntdll/file.c
-@@ -1763,6 +1763,106 @@ cleanup:
+diff --git a/dlls/ntdll/tests/file.c b/dlls/ntdll/tests/file.c
+index 8b5ddbb0da1..938ef2026e3 100644
+--- a/dlls/ntdll/tests/file.c
++++ b/dlls/ntdll/tests/file.c
+@@ -5008,9 +5008,10 @@ static void test_reparse_points(void)
+     static const WCHAR dotW[] = {'.',0};
+     REPARSE_DATA_BUFFER *buffer = NULL;
+     DWORD dwret, dwLen, dwFlags;
++    INT buffer_len, string_len;
+     UNICODE_STRING nameW;
+-    INT buffer_len;
+     HANDLE handle;
++    WCHAR *dest;
+     BOOL bret;
+ 
+     /* Create a temporary folder for the junction point tests */
+@@ -5058,6 +5059,17 @@ static void test_reparse_points(void)
+     buffer_len = build_reparse_buffer(nameW.Buffer, &buffer);
+     bret = DeviceIoControl(handle, FSCTL_SET_REPARSE_POINT, (LPVOID)buffer, buffer_len, NULL, 0, &dwret, 0);
+     ok(bret, "Failed to create junction point! (0x%x)\n", GetLastError());
++
++    /* Read back the junction point */
++    HeapFree(GetProcessHeap(), 0, buffer);
++    buffer_len = sizeof(*buffer) + MAX_PATH*sizeof(WCHAR);
++    buffer = HeapAlloc(GetProcessHeap(), HEAP_ZERO_MEMORY, buffer_len);
++    bret = DeviceIoControl(handle, FSCTL_GET_REPARSE_POINT, NULL, 0, (LPVOID)buffer, buffer_len, &dwret, 0);
++    ok(bret, "Failed to read junction point!\n");
++    string_len = buffer->MountPointReparseBuffer.SubstituteNameLength;
++    dest = &buffer->MountPointReparseBuffer.PathBuffer[buffer->MountPointReparseBuffer.SubstituteNameOffset/sizeof(WCHAR)];
++    ok((memcmp(dest, nameW.Buffer, string_len) == 0), "Junction point destination does not match ('%s' != '%s')!\n",
++                                                      wine_dbgstr_w(dest), wine_dbgstr_w(nameW.Buffer));
+     CloseHandle(handle);
+ 
+ cleanup:
+diff --git a/dlls/ntdll/unix/file.c b/dlls/ntdll/unix/file.c
+index 44cb12f90ee..52520f5f78f 100644
+--- a/dlls/ntdll/unix/file.c
++++ b/dlls/ntdll/unix/file.c
+@@ -5707,6 +5707,106 @@ cleanup:
  }
  
  
@@ -35,7 +69,7 @@ index 37dca75651c..5a05217102d 100644
 +    char *p;
 +    int i;
 +
-+    if ((status = unix_funcs->server_get_unix_fd( handle, FILE_ANY_ACCESS, &dest_fd, &needs_close, NULL, NULL )))
++    if ((status = server_get_unix_fd( handle, FILE_ANY_ACCESS, &dest_fd, &needs_close, NULL, NULL )))
 +        return status;
 +
 +    if ((status = server_get_unix_name( handle, &unix_src )))
@@ -47,7 +81,7 @@ index 37dca75651c..5a05217102d 100644
 +    ret = readlink( unix_src.Buffer, unix_dest.Buffer, unix_dest.MaximumLength );
 +    if (ret < 0)
 +    {
-+        status = FILE_GetNtStatus();
++        status = errno_to_status( errno );
 +        goto cleanup;
 +    }
 +    unix_dest.Length = ret;
@@ -79,7 +113,7 @@ index 37dca75651c..5a05217102d 100644
 +    unix_dest.Length -= (p - unix_dest.Buffer);
 +    memmove(unix_dest.Buffer, p, unix_dest.Length);
 +
-+    if ((status = wine_unix_to_nt_file_name( &unix_dest, &nt_dest )))
++    if ((status = unix_to_nt_file_name( &unix_dest, &nt_dest )))
 +        goto cleanup;
 +
 +    prefix_len = strlen("\\??\\");
@@ -117,10 +151,10 @@ index 37dca75651c..5a05217102d 100644
 +}
 +
 +
- /**************************************************************************
-  *              NtFsControlFile                 [NTDLL.@]
-  *              ZwFsControlFile                 [NTDLL.@]
-@@ -1848,6 +1948,12 @@ NTSTATUS WINAPI NtFsControlFile(HANDLE handle, HANDLE event, PIO_APC_ROUTINE apc
+ /******************************************************************************
+  *              NtFsControlFile   (NTDLL.@)
+  */
+@@ -5772,6 +5872,12 @@ NTSTATUS WINAPI NtFsControlFile( HANDLE handle, HANDLE event, PIO_APC_ROUTINE ap
          status = STATUS_SUCCESS;
          break;
  
@@ -133,40 +167,6 @@ index 37dca75651c..5a05217102d 100644
      case FSCTL_SET_REPARSE_POINT:
      {
          REPARSE_DATA_BUFFER *buffer = (REPARSE_DATA_BUFFER *)in_buffer;
-diff --git a/dlls/ntdll/tests/file.c b/dlls/ntdll/tests/file.c
-index 046b49c2d2b..9197a234703 100644
---- a/dlls/ntdll/tests/file.c
-+++ b/dlls/ntdll/tests/file.c
-@@ -4990,9 +4990,10 @@ static void test_reparse_points(void)
-     static const WCHAR dotW[] = {'.',0};
-     REPARSE_DATA_BUFFER *buffer = NULL;
-     DWORD dwret, dwLen, dwFlags;
-+    INT buffer_len, string_len;
-     UNICODE_STRING nameW;
--    INT buffer_len;
-     HANDLE handle;
-+    WCHAR *dest;
-     BOOL bret;
- 
-     /* Create a temporary folder for the junction point tests */
-@@ -5040,6 +5041,17 @@ static void test_reparse_points(void)
-     buffer_len = build_reparse_buffer(nameW.Buffer, &buffer);
-     bret = DeviceIoControl(handle, FSCTL_SET_REPARSE_POINT, (LPVOID)buffer, buffer_len, NULL, 0, &dwret, 0);
-     ok(bret, "Failed to create junction point! (0x%x)\n", GetLastError());
-+
-+    /* Read back the junction point */
-+    HeapFree(GetProcessHeap(), 0, buffer);
-+    buffer_len = sizeof(*buffer) + MAX_PATH*sizeof(WCHAR);
-+    buffer = HeapAlloc(GetProcessHeap(), HEAP_ZERO_MEMORY, buffer_len);
-+    bret = DeviceIoControl(handle, FSCTL_GET_REPARSE_POINT, NULL, 0, (LPVOID)buffer, buffer_len, &dwret, 0);
-+    ok(bret, "Failed to read junction point!\n");
-+    string_len = buffer->MountPointReparseBuffer.SubstituteNameLength;
-+    dest = &buffer->MountPointReparseBuffer.PathBuffer[buffer->MountPointReparseBuffer.SubstituteNameOffset/sizeof(WCHAR)];
-+    ok((memcmp(dest, nameW.Buffer, string_len) == 0), "Junction point destination does not match ('%s' != '%s')!\n",
-+                                                      wine_dbgstr_w(dest), wine_dbgstr_w(nameW.Buffer));
-     CloseHandle(handle);
- 
- cleanup:
 -- 
-2.26.2
+2.27.0
 
diff --git a/patches/ntdll-Junction_Points/0003-ntdll-Add-support-for-deleting-junction-points.patch b/patches/ntdll-Junction_Points/0003-ntdll-Add-support-for-deleting-junction-points.patch
index 0ec1c91ee..2289a24ee 100644
--- a/patches/ntdll-Junction_Points/0003-ntdll-Add-support-for-deleting-junction-points.patch
+++ b/patches/ntdll-Junction_Points/0003-ntdll-Add-support-for-deleting-junction-points.patch
@@ -1,20 +1,81 @@
-From 10508a815ca734c8a94472f82e6c0f5ebe5fbbd9 Mon Sep 17 00:00:00 2001
+From 864570de933285164823fad9d6861dd018ff5a19 Mon Sep 17 00:00:00 2001
 From: "Erich E. Hoover" <erich.e.hoover@gmail.com>
 Date: Thu, 16 Jan 2014 21:00:21 -0700
 Subject: [PATCH] ntdll: Add support for deleting junction points.
 
 Signed-off-by: Erich E. Hoover <erich.e.hoover@gmail.com>
 ---
- dlls/ntdll/file.c       | 97 +++++++++++++++++++++++++++++++++++++++++
  dlls/ntdll/tests/file.c | 23 +++++++++-
+ dlls/ntdll/unix/file.c  | 97 +++++++++++++++++++++++++++++++++++++++++
  include/ntifs.h         | 12 +++++
  3 files changed, 131 insertions(+), 1 deletion(-)
 
-diff --git a/dlls/ntdll/file.c b/dlls/ntdll/file.c
-index 5a05217102d..98f37af8793 100644
---- a/dlls/ntdll/file.c
-+++ b/dlls/ntdll/file.c
-@@ -1863,6 +1863,87 @@ cleanup:
+diff --git a/dlls/ntdll/tests/file.c b/dlls/ntdll/tests/file.c
+index 938ef2026e3..80a532282c7 100644
+--- a/dlls/ntdll/tests/file.c
++++ b/dlls/ntdll/tests/file.c
+@@ -5003,12 +5003,15 @@ static void test_reparse_points(void)
+     static const WCHAR reparseW[] = {'\\','r','e','p','a','r','s','e',0};
+     WCHAR path[MAX_PATH], reparse_path[MAX_PATH], target_path[MAX_PATH];
+     static const WCHAR targetW[] = {'\\','t','a','r','g','e','t',0};
++    FILE_BASIC_INFORMATION old_attrib, new_attrib;
+     static const WCHAR fooW[] = {'f','o','o',0};
+     static WCHAR volW[] = {'c',':','\\',0};
++    REPARSE_GUID_DATA_BUFFER guid_buffer;
+     static const WCHAR dotW[] = {'.',0};
+     REPARSE_DATA_BUFFER *buffer = NULL;
+     DWORD dwret, dwLen, dwFlags;
+     INT buffer_len, string_len;
++    IO_STATUS_BLOCK iosb;
+     UNICODE_STRING nameW;
+     HANDLE handle;
+     WCHAR *dest;
+@@ -5056,6 +5059,8 @@ static void test_reparse_points(void)
+         win_skip("Failed to open junction point directory handle (0x%x).\n", GetLastError());
+         goto cleanup;
+     }
++    dwret = NtQueryInformationFile(handle, &iosb, &old_attrib, sizeof(old_attrib), FileBasicInformation);
++    ok(dwret == STATUS_SUCCESS, "Failed to get junction point folder's attributes (0x%x).\n", dwret);
+     buffer_len = build_reparse_buffer(nameW.Buffer, &buffer);
+     bret = DeviceIoControl(handle, FSCTL_SET_REPARSE_POINT, (LPVOID)buffer, buffer_len, NULL, 0, &dwret, 0);
+     ok(bret, "Failed to create junction point! (0x%x)\n", GetLastError());
+@@ -5070,6 +5075,22 @@ static void test_reparse_points(void)
+     dest = &buffer->MountPointReparseBuffer.PathBuffer[buffer->MountPointReparseBuffer.SubstituteNameOffset/sizeof(WCHAR)];
+     ok((memcmp(dest, nameW.Buffer, string_len) == 0), "Junction point destination does not match ('%s' != '%s')!\n",
+                                                       wine_dbgstr_w(dest), wine_dbgstr_w(nameW.Buffer));
++
++    /* Delete the junction point */
++    memset(&old_attrib, 0x00, sizeof(old_attrib));
++    old_attrib.LastAccessTime.QuadPart = 0x200deadcafebeef;
++    dwret = NtSetInformationFile(handle, &iosb, &old_attrib, sizeof(old_attrib), FileBasicInformation);
++    ok(dwret == STATUS_SUCCESS, "Failed to set junction point folder's attributes (0x%x).\n", dwret);
++    memset(&guid_buffer, 0x00, sizeof(guid_buffer));
++    guid_buffer.ReparseTag = IO_REPARSE_TAG_MOUNT_POINT;
++    bret = DeviceIoControl(handle, FSCTL_DELETE_REPARSE_POINT, (LPVOID)&guid_buffer,
++                           REPARSE_GUID_DATA_BUFFER_HEADER_SIZE, NULL, 0, &dwret, 0);
++    ok(bret, "Failed to delete junction point! (0x%x)\n", GetLastError());
++    memset(&new_attrib, 0x00, sizeof(new_attrib));
++    dwret = NtQueryInformationFile(handle, &iosb, &new_attrib, sizeof(new_attrib), FileBasicInformation);
++    ok(dwret == STATUS_SUCCESS, "Failed to get junction point folder's attributes (0x%x).\n", dwret);
++    ok(old_attrib.LastAccessTime.QuadPart == new_attrib.LastAccessTime.QuadPart,
++       "Junction point folder's access time does not match.\n");
+     CloseHandle(handle);
+ 
+ cleanup:
+@@ -5077,7 +5098,7 @@ cleanup:
+     pRtlFreeUnicodeString(&nameW);
+     HeapFree(GetProcessHeap(), 0, buffer);
+     bret = RemoveDirectoryW(reparse_path);
+-    todo_wine ok(bret, "Failed to remove temporary reparse point directory!\n");
++    ok(bret, "Failed to remove temporary reparse point directory!\n");
+     bret = RemoveDirectoryW(target_path);
+     ok(bret, "Failed to remove temporary target directory!\n");
+     RemoveDirectoryW(path);
+diff --git a/dlls/ntdll/unix/file.c b/dlls/ntdll/unix/file.c
+index 52520f5f78f..c65ab7de16c 100644
+--- a/dlls/ntdll/unix/file.c
++++ b/dlls/ntdll/unix/file.c
+@@ -5807,6 +5807,87 @@ cleanup:
  }
  
  
@@ -31,7 +92,7 @@ index 5a05217102d..98f37af8793 100644
 +    NTSTATUS status;
 +    struct stat st;
 +
-+    if ((status = unix_funcs->server_get_unix_fd( handle, FILE_SPECIAL_ACCESS, &dest_fd, &needs_close, NULL, NULL )))
++    if ((status = server_get_unix_fd( handle, FILE_SPECIAL_ACCESS, &dest_fd, &needs_close, NULL, NULL )))
 +        return status;
 +
 +    if ((status = server_get_unix_name( handle, &unix_name )))
@@ -42,7 +103,7 @@ index 5a05217102d..98f37af8793 100644
 +    /* Produce the directory in a temporary location in the same folder */
 +    if (fstat( dest_fd, &st ) == -1)
 +    {
-+        status = FILE_GetNtStatus();
++        status = errno_to_status( errno );
 +        goto cleanup;
 +    }
 +    strcpy( tmpdir, unix_name.Buffer );
@@ -51,7 +112,7 @@ index 5a05217102d..98f37af8793 100644
 +    strcat( tmpdir, "/.winelink.XXXXXX" );
 +    if (mkdtemp( tmpdir ) == NULL)
 +    {
-+        status = FILE_GetNtStatus();
++        status = errno_to_status( errno );
 +        goto cleanup;
 +    }
 +    tempdir_created = TRUE;
@@ -59,7 +120,7 @@ index 5a05217102d..98f37af8793 100644
 +    strcat( tmpfile, "/tmpfile" );
 +    if (mkdir( tmpfile, st.st_mode ))
 +    {
-+        status = FILE_GetNtStatus();
++        status = errno_to_status( errno );
 +        goto cleanup;
 +    }
 +    /* attemp to retain the ownership (if possible) */
@@ -76,18 +137,18 @@ index 5a05217102d..98f37af8793 100644
 +               "using unsafe exchange instead.\n" );
 +        if (unlink( unix_name.Buffer ))
 +        {
-+            status = FILE_GetNtStatus();
++            status = errno_to_status( errno );
 +            goto cleanup;
 +        }
 +        if (rename( tmpfile, unix_name.Buffer ))
 +        {
-+            status = FILE_GetNtStatus();
++            status = errno_to_status( errno );
 +            goto cleanup; /* not moved, orignal file/folder at destination is orphaned */
 +        }
 +    }
 +    else
 +    {
-+        status = FILE_GetNtStatus();
++        status = errno_to_status( errno );
 +        goto cleanup;
 +    }
 +    status = STATUS_SUCCESS;
@@ -99,10 +160,10 @@ index 5a05217102d..98f37af8793 100644
 +}
 +
 +
- /**************************************************************************
-  *              NtFsControlFile                 [NTDLL.@]
-  *              ZwFsControlFile                 [NTDLL.@]
-@@ -1948,6 +2029,22 @@ NTSTATUS WINAPI NtFsControlFile(HANDLE handle, HANDLE event, PIO_APC_ROUTINE apc
+ /******************************************************************************
+  *              NtFsControlFile   (NTDLL.@)
+  */
+@@ -5872,6 +5953,22 @@ NTSTATUS WINAPI NtFsControlFile( HANDLE handle, HANDLE event, PIO_APC_ROUTINE ap
          status = STATUS_SUCCESS;
          break;
  
@@ -125,67 +186,6 @@ index 5a05217102d..98f37af8793 100644
      case FSCTL_GET_REPARSE_POINT:
      {
          REPARSE_DATA_BUFFER *buffer = (REPARSE_DATA_BUFFER *)out_buffer;
-diff --git a/dlls/ntdll/tests/file.c b/dlls/ntdll/tests/file.c
-index 9197a234703..6f6a49afd46 100644
---- a/dlls/ntdll/tests/file.c
-+++ b/dlls/ntdll/tests/file.c
-@@ -4985,12 +4985,15 @@ static void test_reparse_points(void)
-     static const WCHAR reparseW[] = {'\\','r','e','p','a','r','s','e',0};
-     WCHAR path[MAX_PATH], reparse_path[MAX_PATH], target_path[MAX_PATH];
-     static const WCHAR targetW[] = {'\\','t','a','r','g','e','t',0};
-+    FILE_BASIC_INFORMATION old_attrib, new_attrib;
-     static const WCHAR fooW[] = {'f','o','o',0};
-     static WCHAR volW[] = {'c',':','\\',0};
-+    REPARSE_GUID_DATA_BUFFER guid_buffer;
-     static const WCHAR dotW[] = {'.',0};
-     REPARSE_DATA_BUFFER *buffer = NULL;
-     DWORD dwret, dwLen, dwFlags;
-     INT buffer_len, string_len;
-+    IO_STATUS_BLOCK iosb;
-     UNICODE_STRING nameW;
-     HANDLE handle;
-     WCHAR *dest;
-@@ -5038,6 +5041,8 @@ static void test_reparse_points(void)
-         win_skip("Failed to open junction point directory handle (0x%x).\n", GetLastError());
-         goto cleanup;
-     }
-+    dwret = NtQueryInformationFile(handle, &iosb, &old_attrib, sizeof(old_attrib), FileBasicInformation);
-+    ok(dwret == STATUS_SUCCESS, "Failed to get junction point folder's attributes (0x%x).\n", dwret);
-     buffer_len = build_reparse_buffer(nameW.Buffer, &buffer);
-     bret = DeviceIoControl(handle, FSCTL_SET_REPARSE_POINT, (LPVOID)buffer, buffer_len, NULL, 0, &dwret, 0);
-     ok(bret, "Failed to create junction point! (0x%x)\n", GetLastError());
-@@ -5052,6 +5057,22 @@ static void test_reparse_points(void)
-     dest = &buffer->MountPointReparseBuffer.PathBuffer[buffer->MountPointReparseBuffer.SubstituteNameOffset/sizeof(WCHAR)];
-     ok((memcmp(dest, nameW.Buffer, string_len) == 0), "Junction point destination does not match ('%s' != '%s')!\n",
-                                                       wine_dbgstr_w(dest), wine_dbgstr_w(nameW.Buffer));
-+
-+    /* Delete the junction point */
-+    memset(&old_attrib, 0x00, sizeof(old_attrib));
-+    old_attrib.LastAccessTime.QuadPart = 0x200deadcafebeef;
-+    dwret = NtSetInformationFile(handle, &iosb, &old_attrib, sizeof(old_attrib), FileBasicInformation);
-+    ok(dwret == STATUS_SUCCESS, "Failed to set junction point folder's attributes (0x%x).\n", dwret);
-+    memset(&guid_buffer, 0x00, sizeof(guid_buffer));
-+    guid_buffer.ReparseTag = IO_REPARSE_TAG_MOUNT_POINT;
-+    bret = DeviceIoControl(handle, FSCTL_DELETE_REPARSE_POINT, (LPVOID)&guid_buffer,
-+                           REPARSE_GUID_DATA_BUFFER_HEADER_SIZE, NULL, 0, &dwret, 0);
-+    ok(bret, "Failed to delete junction point! (0x%x)\n", GetLastError());
-+    memset(&new_attrib, 0x00, sizeof(new_attrib));
-+    dwret = NtQueryInformationFile(handle, &iosb, &new_attrib, sizeof(new_attrib), FileBasicInformation);
-+    ok(dwret == STATUS_SUCCESS, "Failed to get junction point folder's attributes (0x%x).\n", dwret);
-+    ok(old_attrib.LastAccessTime.QuadPart == new_attrib.LastAccessTime.QuadPart,
-+       "Junction point folder's access time does not match.\n");
-     CloseHandle(handle);
- 
- cleanup:
-@@ -5059,7 +5080,7 @@ cleanup:
-     pRtlFreeUnicodeString(&nameW);
-     HeapFree(GetProcessHeap(), 0, buffer);
-     bret = RemoveDirectoryW(reparse_path);
--    todo_wine ok(bret, "Failed to remove temporary reparse point directory!\n");
-+    ok(bret, "Failed to remove temporary reparse point directory!\n");
-     bret = RemoveDirectoryW(target_path);
-     ok(bret, "Failed to remove temporary target directory!\n");
-     RemoveDirectoryW(path);
 diff --git a/include/ntifs.h b/include/ntifs.h
 index 21d42e17325..4539b89d583 100644
 --- a/include/ntifs.h
@@ -208,5 +208,5 @@ index 21d42e17325..4539b89d583 100644
 +
  #endif /* __WINE_NTIFS_H */
 -- 
-2.26.2
+2.27.0
 
diff --git a/patches/ntdll-Junction_Points/0007-ntdll-Add-support-for-absolute-symlink-creation.patch b/patches/ntdll-Junction_Points/0007-ntdll-Add-support-for-absolute-symlink-creation.patch
index a0e626059..8998fb07c 100644
--- a/patches/ntdll-Junction_Points/0007-ntdll-Add-support-for-absolute-symlink-creation.patch
+++ b/patches/ntdll-Junction_Points/0007-ntdll-Add-support-for-absolute-symlink-creation.patch
@@ -1,88 +1,20 @@
-From d1024118fbb0a73abd19ef937d13d4378a61992b Mon Sep 17 00:00:00 2001
+From 3ef1ecf4b3b6db13e96d6440e51c9407f8b5dcda Mon Sep 17 00:00:00 2001
 From: "Erich E. Hoover" <erich.e.hoover@gmail.com>
 Date: Thu, 16 Jan 2014 21:06:24 -0700
 Subject: [PATCH] ntdll: Add support for absolute symlink creation.
 
 Signed-off-by: Erich E. Hoover <erich.e.hoover@gmail.com>
 ---
- dlls/ntdll/file.c       |  35 ++++++++++--
  dlls/ntdll/tests/file.c | 117 ++++++++++++++++++++++++++++++++++------
+ dlls/ntdll/unix/file.c  |  35 ++++++++++--
  include/ntifs.h         |  10 ++++
  3 files changed, 143 insertions(+), 19 deletions(-)
 
-diff --git a/dlls/ntdll/file.c b/dlls/ntdll/file.c
-index 98f37af8793..825344dab86 100644
---- a/dlls/ntdll/file.c
-+++ b/dlls/ntdll/file.c
-@@ -1672,17 +1672,33 @@ NTSTATUS WINAPI NtDeviceIoControlFile(HANDLE handle, HANDLE event,
- NTSTATUS FILE_CreateSymlink(HANDLE handle, REPARSE_DATA_BUFFER *buffer)
- {
-     BOOL src_allocated = FALSE, dest_allocated = FALSE, tempdir_created = FALSE;
--    int dest_len = buffer->MountPointReparseBuffer.SubstituteNameLength;
--    int offset = buffer->MountPointReparseBuffer.SubstituteNameOffset;
--    WCHAR *dest = &buffer->MountPointReparseBuffer.PathBuffer[offset];
-     char tmpdir[PATH_MAX], tmplink[PATH_MAX], *d;
-     ANSI_STRING unix_src, unix_dest;
-     char magic_dest[PATH_MAX];
-     int dest_fd, needs_close;
-     UNICODE_STRING nt_dest;
-+    int dest_len, offset;
-     NTSTATUS status;
-+    struct stat st;
-+    WCHAR *dest;
-     int i;
- 
-+    switch(buffer->ReparseTag)
-+    {
-+    case IO_REPARSE_TAG_MOUNT_POINT:
-+        dest_len = buffer->MountPointReparseBuffer.SubstituteNameLength;
-+        offset = buffer->MountPointReparseBuffer.SubstituteNameOffset;
-+        dest = &buffer->MountPointReparseBuffer.PathBuffer[offset];
-+        break;
-+    case IO_REPARSE_TAG_SYMLINK:
-+        dest_len = buffer->SymbolicLinkReparseBuffer.SubstituteNameLength;
-+        offset = buffer->SymbolicLinkReparseBuffer.SubstituteNameOffset;
-+        dest = &buffer->SymbolicLinkReparseBuffer.PathBuffer[offset];
-+        break;
-+    default:
-+        return STATUS_NOT_IMPLEMENTED;
-+    }
-+
-     if ((status = unix_funcs->server_get_unix_fd( handle, FILE_SPECIAL_ACCESS, &dest_fd, &needs_close, NULL, NULL )))
-         return status;
- 
-@@ -1706,6 +1722,18 @@ NTSTATUS FILE_CreateSymlink(HANDLE handle, REPARSE_DATA_BUFFER *buffer)
-             strcat( magic_dest, "." );
-         strcat( magic_dest, "/" );
-     }
-+    /* Encode the type (file or directory) if NT symlink */
-+    if (buffer->ReparseTag == IO_REPARSE_TAG_SYMLINK)
-+    {
-+        if (fstat( dest_fd, &st ) == -1)
-+        {
-+            status = FILE_GetNtStatus();
-+            goto cleanup;
-+        }
-+        if (S_ISDIR(st.st_mode))
-+            strcat( magic_dest, "." );
-+        strcat( magic_dest, "/" );
-+    }
-     strcat( magic_dest, unix_dest.Buffer );
- 
-     /* Produce the link in a temporary location in the same folder */
-@@ -2058,6 +2086,7 @@ NTSTATUS WINAPI NtFsControlFile(HANDLE handle, HANDLE event, PIO_APC_ROUTINE apc
-         switch(buffer->ReparseTag)
-         {
-         case IO_REPARSE_TAG_MOUNT_POINT:
-+        case IO_REPARSE_TAG_SYMLINK:
-             status = FILE_CreateSymlink( handle, buffer );
-             break;
-         default:
 diff --git a/dlls/ntdll/tests/file.c b/dlls/ntdll/tests/file.c
-index 89f291536b2..92f03ab3d34 100644
+index 541572c27ce..f91bb40a133 100644
 --- a/dlls/ntdll/tests/file.c
 +++ b/dlls/ntdll/tests/file.c
-@@ -4954,26 +4954,50 @@ static void test_file_readonly_access(void)
+@@ -4972,26 +4972,50 @@ static void test_file_readonly_access(void)
      DeleteFileW(path);
  }
  
@@ -141,7 +73,7 @@ index 89f291536b2..92f03ab3d34 100644
      lstrcpyW(subst_dest, filename);
      lstrcpyW(print_dest, &filename[prefix_len]);
      *pbuffer = buffer;
-@@ -4993,10 +5017,12 @@ static void test_reparse_points(void)
+@@ -5011,10 +5035,12 @@ static void test_reparse_points(void)
      REPARSE_DATA_BUFFER *buffer = NULL;
      DWORD dwret, dwLen, dwFlags, err;
      INT buffer_len, string_len;
@@ -155,7 +87,7 @@ index 89f291536b2..92f03ab3d34 100644
      BOOL bret;
  
      /* Create a temporary folder for the junction point tests */
-@@ -5043,7 +5069,7 @@ static void test_reparse_points(void)
+@@ -5061,7 +5087,7 @@ static void test_reparse_points(void)
      }
      dwret = NtQueryInformationFile(handle, &iosb, &old_attrib, sizeof(old_attrib), FileBasicInformation);
      ok(dwret == STATUS_SUCCESS, "Failed to get junction point folder's attributes (0x%x).\n", dwret);
@@ -164,7 +96,7 @@ index 89f291536b2..92f03ab3d34 100644
      bret = DeviceIoControl(handle, FSCTL_SET_REPARSE_POINT, (LPVOID)buffer, buffer_len, NULL, 0, &dwret, 0);
      ok(bret, "Failed to create junction point! (0x%x)\n", GetLastError());
  
-@@ -5084,7 +5110,7 @@ static void test_reparse_points(void)
+@@ -5102,7 +5128,7 @@ static void test_reparse_points(void)
      HeapFree(GetProcessHeap(), 0, buffer);
      handle = CreateFileW(reparse_path, GENERIC_READ | GENERIC_WRITE, 0, 0, OPEN_EXISTING,
                              FILE_FLAG_BACKUP_SEMANTICS | FILE_FLAG_OPEN_REPARSE_POINT, 0);
@@ -173,7 +105,7 @@ index 89f291536b2..92f03ab3d34 100644
      bret = DeviceIoControl(handle, FSCTL_SET_REPARSE_POINT, (LPVOID)buffer, buffer_len, NULL, 0, &dwret, 0);
      ok(bret, "Failed to create junction point! (0x%x)\n", GetLastError());
      CloseHandle(handle);
-@@ -5099,7 +5125,7 @@ static void test_reparse_points(void)
+@@ -5117,7 +5143,7 @@ static void test_reparse_points(void)
      ok(bret, "Failed to create junction point target directory.\n");
      handle = CreateFileW(reparse_path, GENERIC_READ | GENERIC_WRITE, 0, 0, OPEN_EXISTING,
                           FILE_FLAG_BACKUP_SEMANTICS | FILE_FLAG_OPEN_REPARSE_POINT, 0);
@@ -182,7 +114,7 @@ index 89f291536b2..92f03ab3d34 100644
      bret = DeviceIoControl(handle, FSCTL_SET_REPARSE_POINT, (LPVOID)buffer, buffer_len, NULL, 0, &dwret, 0);
      ok(bret, "Failed to create junction point! (0x%x)\n", GetLastError());
      CloseHandle(handle);
-@@ -5112,14 +5138,73 @@ static void test_reparse_points(void)
+@@ -5130,14 +5156,73 @@ static void test_reparse_points(void)
      ok(dwret != (DWORD)~0, "Junction point doesn't exist (attributes: 0x%x)!\n", dwret);
      ok(dwret & FILE_ATTRIBUTE_REPARSE_POINT, "File is not a junction point! (attributes: 0x%x)\n", dwret);
  
@@ -260,6 +192,74 @@ index 89f291536b2..92f03ab3d34 100644
      RemoveDirectoryW(path);
  }
  
+diff --git a/dlls/ntdll/unix/file.c b/dlls/ntdll/unix/file.c
+index c65ab7de16c..15f6a006145 100644
+--- a/dlls/ntdll/unix/file.c
++++ b/dlls/ntdll/unix/file.c
+@@ -5616,17 +5616,33 @@ static void ignore_server_ioctl_struct_holes( ULONG code, const void *in_buffer,
+ NTSTATUS FILE_CreateSymlink(HANDLE handle, REPARSE_DATA_BUFFER *buffer)
+ {
+     BOOL src_allocated = FALSE, dest_allocated = FALSE, tempdir_created = FALSE;
+-    int dest_len = buffer->MountPointReparseBuffer.SubstituteNameLength;
+-    int offset = buffer->MountPointReparseBuffer.SubstituteNameOffset;
+-    WCHAR *dest = &buffer->MountPointReparseBuffer.PathBuffer[offset];
+     char tmpdir[PATH_MAX], tmplink[PATH_MAX], *d;
+     ANSI_STRING unix_src, unix_dest;
+     char magic_dest[PATH_MAX];
+     int dest_fd, needs_close;
+     UNICODE_STRING nt_dest;
++    int dest_len, offset;
+     NTSTATUS status;
++    struct stat st;
++    WCHAR *dest;
+     int i;
+ 
++    switch(buffer->ReparseTag)
++    {
++    case IO_REPARSE_TAG_MOUNT_POINT:
++        dest_len = buffer->MountPointReparseBuffer.SubstituteNameLength;
++        offset = buffer->MountPointReparseBuffer.SubstituteNameOffset;
++        dest = &buffer->MountPointReparseBuffer.PathBuffer[offset];
++        break;
++    case IO_REPARSE_TAG_SYMLINK:
++        dest_len = buffer->SymbolicLinkReparseBuffer.SubstituteNameLength;
++        offset = buffer->SymbolicLinkReparseBuffer.SubstituteNameOffset;
++        dest = &buffer->SymbolicLinkReparseBuffer.PathBuffer[offset];
++        break;
++    default:
++        return STATUS_NOT_IMPLEMENTED;
++    }
++
+     if ((status = server_get_unix_fd( handle, FILE_SPECIAL_ACCESS, &dest_fd, &needs_close, NULL, NULL )))
+         return status;
+ 
+@@ -5650,6 +5666,18 @@ NTSTATUS FILE_CreateSymlink(HANDLE handle, REPARSE_DATA_BUFFER *buffer)
+             strcat( magic_dest, "." );
+         strcat( magic_dest, "/" );
+     }
++    /* Encode the type (file or directory) if NT symlink */
++    if (buffer->ReparseTag == IO_REPARSE_TAG_SYMLINK)
++    {
++        if (fstat( dest_fd, &st ) == -1)
++        {
++            status = errno_to_status( errno );
++            goto cleanup;
++        }
++        if (S_ISDIR(st.st_mode))
++            strcat( magic_dest, "." );
++        strcat( magic_dest, "/" );
++    }
+     strcat( magic_dest, unix_dest.Buffer );
+ 
+     /* Produce the link in a temporary location in the same folder */
+@@ -5982,6 +6010,7 @@ NTSTATUS WINAPI NtFsControlFile( HANDLE handle, HANDLE event, PIO_APC_ROUTINE ap
+         switch(buffer->ReparseTag)
+         {
+         case IO_REPARSE_TAG_MOUNT_POINT:
++        case IO_REPARSE_TAG_SYMLINK:
+             status = FILE_CreateSymlink( handle, buffer );
+             break;
+         default:
 diff --git a/include/ntifs.h b/include/ntifs.h
 index 4539b89d583..ab3273d3f81 100644
 --- a/include/ntifs.h
@@ -294,5 +294,5 @@ index 4539b89d583..ab3273d3f81 100644
  typedef struct _REPARSE_GUID_DATA_BUFFER {
      DWORD ReparseTag;
 -- 
-2.26.2
+2.27.0
 
diff --git a/patches/ntdll-Junction_Points/0008-ntdll-Add-support-for-reading-absolute-symlinks.patch b/patches/ntdll-Junction_Points/0008-ntdll-Add-support-for-reading-absolute-symlinks.patch
index 7e77364b7..26aa069da 100644
--- a/patches/ntdll-Junction_Points/0008-ntdll-Add-support-for-reading-absolute-symlinks.patch
+++ b/patches/ntdll-Junction_Points/0008-ntdll-Add-support-for-reading-absolute-symlinks.patch
@@ -1,19 +1,50 @@
-From b4c166f821e7254737bf0920c3f0ea62e0646846 Mon Sep 17 00:00:00 2001
+From 58371a3c2d5fed81abc2b1ae6f79133dd57a873d Mon Sep 17 00:00:00 2001
 From: "Erich E. Hoover" <erich.e.hoover@gmail.com>
 Date: Wed, 13 Mar 2019 12:55:20 -0600
-Subject: ntdll: Add support for reading absolute symlinks.
+Subject: [PATCH] ntdll: Add support for reading absolute symlinks.
 
 Signed-off-by: Erich E. Hoover <erich.e.hoover@gmail.com>
 ---
- dlls/ntdll/file.c       | 22 ++++++++++++++++++++++
  dlls/ntdll/tests/file.c | 13 ++++++++++++-
+ dlls/ntdll/unix/file.c  | 22 ++++++++++++++++++++++
  2 files changed, 34 insertions(+), 1 deletion(-)
 
-diff --git a/dlls/ntdll/file.c b/dlls/ntdll/file.c
-index 62941774ec..84da022325 100644
---- a/dlls/ntdll/file.c
-+++ b/dlls/ntdll/file.c
-@@ -1780,6 +1780,7 @@ NTSTATUS FILE_GetSymlink(HANDLE handle, REPARSE_DATA_BUFFER *buffer, ULONG out_s
+diff --git a/dlls/ntdll/tests/file.c b/dlls/ntdll/tests/file.c
+index f91bb40a133..5d3411d242e 100644
+--- a/dlls/ntdll/tests/file.c
++++ b/dlls/ntdll/tests/file.c
+@@ -5207,7 +5207,6 @@ static void test_reparse_points(void)
+     ok(dwret == STATUS_SUCCESS, "Failed to get symlink folder's attributes (0x%x).\n", dwret);
+     buffer_len = build_reparse_buffer(nameW.Buffer, IO_REPARSE_TAG_SYMLINK, &buffer);
+     bret = DeviceIoControl(handle, FSCTL_SET_REPARSE_POINT, (LPVOID)buffer, buffer_len, NULL, 0, &dwret, 0);
+-    CloseHandle(handle);
+     ok(bret, "Failed to create symlink! (0x%x)\n", GetLastError());
+ 
+     /* Check the file attributes of the symlink */
+@@ -5215,6 +5214,18 @@ static void test_reparse_points(void)
+     ok(dwret != (DWORD)~0, "Symlink doesn't exist (attributes: 0x%x)!\n", dwret);
+     ok(dwret & FILE_ATTRIBUTE_REPARSE_POINT, "File is not a symlink! (attributes: %d)\n", dwret);
+ 
++    /* Read back the symlink */
++    HeapFree(GetProcessHeap(), 0, buffer);
++    buffer_len = sizeof(*buffer) + MAX_PATH*sizeof(WCHAR);
++    buffer = HeapAlloc(GetProcessHeap(), HEAP_ZERO_MEMORY, buffer_len);
++    bret = DeviceIoControl(handle, FSCTL_GET_REPARSE_POINT, NULL, 0, (LPVOID)buffer, buffer_len, &dwret, 0);
++    string_len = buffer->SymbolicLinkReparseBuffer.SubstituteNameLength;
++    dest = &buffer->SymbolicLinkReparseBuffer.PathBuffer[buffer->SymbolicLinkReparseBuffer.SubstituteNameOffset/sizeof(WCHAR)];
++    ok(bret, "Failed to read symlink!\n");
++    ok((memcmp(dest, nameW.Buffer, string_len) == 0), "Symlink destination does not match ('%s' != '%s')!\n",
++                                                      wine_dbgstr_w(dest), wine_dbgstr_w(nameW.Buffer));
++    CloseHandle(handle);
++
+ cleanup:
+     /* Cleanup */
+     pRtlFreeUnicodeString(&nameW);
+diff --git a/dlls/ntdll/unix/file.c b/dlls/ntdll/unix/file.c
+index 15f6a006145..9cecf44db82 100644
+--- a/dlls/ntdll/unix/file.c
++++ b/dlls/ntdll/unix/file.c
+@@ -5748,6 +5748,7 @@ NTSTATUS FILE_GetSymlink(HANDLE handle, REPARSE_DATA_BUFFER *buffer, ULONG out_s
      UNICODE_STRING nt_dest;
      DWORD max_length;
      NTSTATUS status;
@@ -21,7 +52,7 @@ index 62941774ec..84da022325 100644
      INT prefix_len;
      ssize_t ret;
      char *p;
-@@ -1826,6 +1827,17 @@ NTSTATUS FILE_GetSymlink(HANDLE handle, REPARSE_DATA_BUFFER *buffer, ULONG out_s
+@@ -5794,6 +5795,17 @@ NTSTATUS FILE_GetSymlink(HANDLE handle, REPARSE_DATA_BUFFER *buffer, ULONG out_s
          }
          buffer->ReparseTag |= (val << i);
      }
@@ -39,7 +70,7 @@ index 62941774ec..84da022325 100644
      unix_dest.Length -= (p - unix_dest.Buffer);
      memmove(unix_dest.Buffer, p, unix_dest.Length);
  
-@@ -1844,6 +1856,16 @@ NTSTATUS FILE_GetSymlink(HANDLE handle, REPARSE_DATA_BUFFER *buffer, ULONG out_s
+@@ -5812,6 +5824,16 @@ NTSTATUS FILE_GetSymlink(HANDLE handle, REPARSE_DATA_BUFFER *buffer, ULONG out_s
          buffer->MountPointReparseBuffer.PrintNameLength = nt_dest.Length - prefix_len*sizeof(WCHAR);
          print_name = &buffer->MountPointReparseBuffer.PathBuffer[buffer->MountPointReparseBuffer.PrintNameOffset/sizeof(WCHAR)];
          break;
@@ -56,37 +87,6 @@ index 62941774ec..84da022325 100644
      default:
          /* unrecognized (regular) files should probably be treated as symlinks */
          WARN("unrecognized symbolic link\n");
-diff --git a/dlls/ntdll/tests/file.c b/dlls/ntdll/tests/file.c
-index 05ba0fc57e..526bd8a85a 100644
---- a/dlls/ntdll/tests/file.c
-+++ b/dlls/ntdll/tests/file.c
-@@ -5067,7 +5067,6 @@ static void test_reparse_points(void)
-     ok(dwret == STATUS_SUCCESS, "Failed to get symlink folder's attributes (0x%x).\n", dwret);
-     buffer_len = build_reparse_buffer(nameW.Buffer, IO_REPARSE_TAG_SYMLINK, &buffer);
-     bret = DeviceIoControl(handle, FSCTL_SET_REPARSE_POINT, (LPVOID)buffer, buffer_len, NULL, 0, &dwret, 0);
--    CloseHandle(handle);
-     ok(bret, "Failed to create symlink! (0x%x)\n", GetLastError());
- 
-     /* Check the file attributes of the symlink */
-@@ -5075,6 +5074,18 @@ static void test_reparse_points(void)
-     ok(dwret != (DWORD)~0, "Symlink doesn't exist (attributes: 0x%x)!\n", dwret);
-     ok(dwret & FILE_ATTRIBUTE_REPARSE_POINT, "File is not a symlink! (attributes: %d)\n", dwret);
- 
-+    /* Read back the symlink */
-+    HeapFree(GetProcessHeap(), 0, buffer);
-+    buffer_len = sizeof(*buffer) + MAX_PATH*sizeof(WCHAR);
-+    buffer = HeapAlloc(GetProcessHeap(), HEAP_ZERO_MEMORY, buffer_len);
-+    bret = DeviceIoControl(handle, FSCTL_GET_REPARSE_POINT, NULL, 0, (LPVOID)buffer, buffer_len, &dwret, 0);
-+    string_len = buffer->SymbolicLinkReparseBuffer.SubstituteNameLength;
-+    dest = &buffer->SymbolicLinkReparseBuffer.PathBuffer[buffer->SymbolicLinkReparseBuffer.SubstituteNameOffset/sizeof(WCHAR)];
-+    ok(bret, "Failed to read symlink!\n");
-+    ok((memcmp(dest, nameW.Buffer, string_len) == 0), "Symlink destination does not match ('%s' != '%s')!\n",
-+                                                      wine_dbgstr_w(dest), wine_dbgstr_w(nameW.Buffer));
-+    CloseHandle(handle);
-+
- cleanup:
-     /* Cleanup */
-     pRtlFreeUnicodeString(&nameW);
 -- 
-2.17.1
+2.27.0
 
diff --git a/patches/ntdll-Junction_Points/0009-ntdll-Add-support-for-deleting-symlinks.patch b/patches/ntdll-Junction_Points/0009-ntdll-Add-support-for-deleting-symlinks.patch
index 9fb157ece..f8641062a 100644
--- a/patches/ntdll-Junction_Points/0009-ntdll-Add-support-for-deleting-symlinks.patch
+++ b/patches/ntdll-Junction_Points/0009-ntdll-Add-support-for-deleting-symlinks.patch
@@ -1,31 +1,19 @@
-From 2ee26355e8261f4065b3e5e933a81ce0bfd1a1c6 Mon Sep 17 00:00:00 2001
+From 478bca2da5a745e14d4fd16a3d4415cf08855308 Mon Sep 17 00:00:00 2001
 From: "Erich E. Hoover" <erich.e.hoover@gmail.com>
 Date: Wed, 13 Mar 2019 13:02:22 -0600
-Subject: ntdll: Add support for deleting symlinks.
+Subject: [PATCH] ntdll: Add support for deleting symlinks.
 
 Signed-off-by: Erich E. Hoover <erich.e.hoover@gmail.com>
 ---
- dlls/ntdll/file.c       |  1 +
  dlls/ntdll/tests/file.c | 16 ++++++++++++++++
+ dlls/ntdll/unix/file.c  |  1 +
  2 files changed, 17 insertions(+)
 
-diff --git a/dlls/ntdll/file.c b/dlls/ntdll/file.c
-index 84da022325..c3e171ab19 100644
---- a/dlls/ntdll/file.c
-+++ b/dlls/ntdll/file.c
-@@ -2062,6 +2062,7 @@ NTSTATUS WINAPI NtFsControlFile(HANDLE handle, HANDLE event, PIO_APC_ROUTINE apc
-         switch(buffer->ReparseTag)
-         {
-         case IO_REPARSE_TAG_MOUNT_POINT:
-+        case IO_REPARSE_TAG_SYMLINK:
-             status = FILE_RemoveSymlink( handle, buffer );
-             break;
-         default:
 diff --git a/dlls/ntdll/tests/file.c b/dlls/ntdll/tests/file.c
-index 526bd8a85a..f0545feb5c 100644
+index 5d3411d242e..df912e18496 100644
 --- a/dlls/ntdll/tests/file.c
 +++ b/dlls/ntdll/tests/file.c
-@@ -5084,6 +5084,22 @@ static void test_reparse_points(void)
+@@ -5224,6 +5224,22 @@ static void test_reparse_points(void)
      ok(bret, "Failed to read symlink!\n");
      ok((memcmp(dest, nameW.Buffer, string_len) == 0), "Symlink destination does not match ('%s' != '%s')!\n",
                                                        wine_dbgstr_w(dest), wine_dbgstr_w(nameW.Buffer));
@@ -48,6 +36,18 @@ index 526bd8a85a..f0545feb5c 100644
      CloseHandle(handle);
  
  cleanup:
+diff --git a/dlls/ntdll/unix/file.c b/dlls/ntdll/unix/file.c
+index 9cecf44db82..e35ea49d17f 100644
+--- a/dlls/ntdll/unix/file.c
++++ b/dlls/ntdll/unix/file.c
+@@ -6010,6 +6010,7 @@ NTSTATUS WINAPI NtFsControlFile( HANDLE handle, HANDLE event, PIO_APC_ROUTINE ap
+         switch(buffer->ReparseTag)
+         {
+         case IO_REPARSE_TAG_MOUNT_POINT:
++        case IO_REPARSE_TAG_SYMLINK:
+             status = FILE_RemoveSymlink( handle, buffer );
+             break;
+         default:
 -- 
-2.17.1
+2.27.0
 
diff --git a/patches/ntdll-Junction_Points/0010-ntdll-Add-support-for-relative-symlink-creation.patch b/patches/ntdll-Junction_Points/0010-ntdll-Add-support-for-relative-symlink-creation.patch
index 1eafd77b7..bc081f3d7 100644
--- a/patches/ntdll-Junction_Points/0010-ntdll-Add-support-for-relative-symlink-creation.patch
+++ b/patches/ntdll-Junction_Points/0010-ntdll-Add-support-for-relative-symlink-creation.patch
@@ -1,20 +1,110 @@
-From cea567a0f38794b66e8da0f252d1f4864c299987 Mon Sep 17 00:00:00 2001
+From 6a13b364b9b8a92d706b8ee2f4e69743ab3bee5a Mon Sep 17 00:00:00 2001
 From: "Erich E. Hoover" <erich.e.hoover@gmail.com>
 Date: Thu, 11 Apr 2019 12:16:49 -0600
 Subject: [PATCH] ntdll: Add support for relative symlink creation.
 
 Signed-off-by: Erich E. Hoover <erich.e.hoover@gmail.com>
 ---
- dlls/ntdll/file.c       | 58 ++++++++++++++++++++++++++++++++++++-----
  dlls/ntdll/tests/file.c | 30 ++++++++++++++++-----
+ dlls/ntdll/unix/file.c  | 58 ++++++++++++++++++++++++++++++++++++-----
  include/ntifs.h         |  2 ++
  3 files changed, 77 insertions(+), 13 deletions(-)
 
-diff --git a/dlls/ntdll/file.c b/dlls/ntdll/file.c
-index 3d2b874e2ee..ec8050982b0 100644
---- a/dlls/ntdll/file.c
-+++ b/dlls/ntdll/file.c
-@@ -1671,16 +1671,19 @@ NTSTATUS WINAPI NtDeviceIoControlFile(HANDLE handle, HANDLE event,
+diff --git a/dlls/ntdll/tests/file.c b/dlls/ntdll/tests/file.c
+index df912e18496..515a84da4d6 100644
+--- a/dlls/ntdll/tests/file.c
++++ b/dlls/ntdll/tests/file.c
+@@ -4972,7 +4972,8 @@ static void test_file_readonly_access(void)
+     DeleteFileW(path);
+ }
+ 
+-static INT build_reparse_buffer(const WCHAR *filename, ULONG tag, REPARSE_DATA_BUFFER **pbuffer)
++static INT build_reparse_buffer(const WCHAR *filename, ULONG tag, ULONG flags,
++                                REPARSE_DATA_BUFFER **pbuffer)
+ {
+     static INT header_size = offsetof(REPARSE_DATA_BUFFER, GenericReparseBuffer);
+     INT buffer_size, struct_size, data_size, string_len, prefix_len;
+@@ -4990,7 +4991,7 @@ static INT build_reparse_buffer(const WCHAR *filename, ULONG tag, REPARSE_DATA_B
+     default:
+         return 0;
+     }
+-    prefix_len = strlen("\\??\\");
++    prefix_len = (flags == SYMLINK_FLAG_RELATIVE) ? 0 : strlen("\\??\\");
+     string_len = lstrlenW(&filename[prefix_len]);
+     data_size = (prefix_len + 2 * string_len + 2) * sizeof(WCHAR);
+     buffer_size = struct_size + data_size;
+@@ -5010,6 +5011,7 @@ static INT build_reparse_buffer(const WCHAR *filename, ULONG tag, REPARSE_DATA_B
+         buffer->SymbolicLinkReparseBuffer.SubstituteNameLength = (prefix_len + string_len) * sizeof(WCHAR);
+         buffer->SymbolicLinkReparseBuffer.PrintNameOffset = (prefix_len + string_len + 1) * sizeof(WCHAR);
+         buffer->SymbolicLinkReparseBuffer.PrintNameLength = string_len * sizeof(WCHAR);
++        buffer->SymbolicLinkReparseBuffer.Flags = flags;
+         subst_dest = &buffer->SymbolicLinkReparseBuffer.PathBuffer[0];
+         print_dest = &buffer->SymbolicLinkReparseBuffer.PathBuffer[prefix_len + string_len + 1];
+         break;
+@@ -5087,7 +5089,7 @@ static void test_reparse_points(void)
+     }
+     dwret = NtQueryInformationFile(handle, &iosb, &old_attrib, sizeof(old_attrib), FileBasicInformation);
+     ok(dwret == STATUS_SUCCESS, "Failed to get junction point folder's attributes (0x%x).\n", dwret);
+-    buffer_len = build_reparse_buffer(nameW.Buffer, IO_REPARSE_TAG_MOUNT_POINT, &buffer);
++    buffer_len = build_reparse_buffer(nameW.Buffer, IO_REPARSE_TAG_MOUNT_POINT, 0, &buffer);
+     bret = DeviceIoControl(handle, FSCTL_SET_REPARSE_POINT, (LPVOID)buffer, buffer_len, NULL, 0, &dwret, 0);
+     ok(bret, "Failed to create junction point! (0x%x)\n", GetLastError());
+ 
+@@ -5128,7 +5130,7 @@ static void test_reparse_points(void)
+     HeapFree(GetProcessHeap(), 0, buffer);
+     handle = CreateFileW(reparse_path, GENERIC_READ | GENERIC_WRITE, 0, 0, OPEN_EXISTING,
+                             FILE_FLAG_BACKUP_SEMANTICS | FILE_FLAG_OPEN_REPARSE_POINT, 0);
+-    buffer_len = build_reparse_buffer(nameW.Buffer, IO_REPARSE_TAG_MOUNT_POINT, &buffer);
++    buffer_len = build_reparse_buffer(nameW.Buffer, IO_REPARSE_TAG_MOUNT_POINT, 0, &buffer);
+     bret = DeviceIoControl(handle, FSCTL_SET_REPARSE_POINT, (LPVOID)buffer, buffer_len, NULL, 0, &dwret, 0);
+     ok(bret, "Failed to create junction point! (0x%x)\n", GetLastError());
+     CloseHandle(handle);
+@@ -5143,7 +5145,7 @@ static void test_reparse_points(void)
+     ok(bret, "Failed to create junction point target directory.\n");
+     handle = CreateFileW(reparse_path, GENERIC_READ | GENERIC_WRITE, 0, 0, OPEN_EXISTING,
+                          FILE_FLAG_BACKUP_SEMANTICS | FILE_FLAG_OPEN_REPARSE_POINT, 0);
+-    buffer_len = build_reparse_buffer(nameW.Buffer, IO_REPARSE_TAG_MOUNT_POINT, &buffer);
++    buffer_len = build_reparse_buffer(nameW.Buffer, IO_REPARSE_TAG_MOUNT_POINT, 0, &buffer);
+     bret = DeviceIoControl(handle, FSCTL_SET_REPARSE_POINT, (LPVOID)buffer, buffer_len, NULL, 0, &dwret, 0);
+     ok(bret, "Failed to create junction point! (0x%x)\n", GetLastError());
+     CloseHandle(handle);
+@@ -5205,7 +5207,7 @@ static void test_reparse_points(void)
+     }
+     dwret = NtQueryInformationFile(handle, &iosb, &old_attrib, sizeof(old_attrib), FileBasicInformation);
+     ok(dwret == STATUS_SUCCESS, "Failed to get symlink folder's attributes (0x%x).\n", dwret);
+-    buffer_len = build_reparse_buffer(nameW.Buffer, IO_REPARSE_TAG_SYMLINK, &buffer);
++    buffer_len = build_reparse_buffer(nameW.Buffer, IO_REPARSE_TAG_SYMLINK, 0, &buffer);
+     bret = DeviceIoControl(handle, FSCTL_SET_REPARSE_POINT, (LPVOID)buffer, buffer_len, NULL, 0, &dwret, 0);
+     ok(bret, "Failed to create symlink! (0x%x)\n", GetLastError());
+ 
+@@ -5242,6 +5244,22 @@ static void test_reparse_points(void)
+        "Symlink folder's access time does not match.\n");
+     CloseHandle(handle);
+ 
++    /* Create a relative directory symlink */
++    HeapFree(GetProcessHeap(), 0, buffer);
++    handle = CreateFileW(reparse_path, GENERIC_READ | GENERIC_WRITE, 0, 0, OPEN_EXISTING,
++                         FILE_FLAG_BACKUP_SEMANTICS | FILE_FLAG_OPEN_REPARSE_POINT, 0);
++    if (handle == INVALID_HANDLE_VALUE)
++    {
++        win_skip("Failed to open symlink directory handle (0x%x).\n", GetLastError());
++        goto cleanup;
++    }
++    dwret = NtQueryInformationFile(handle, &iosb, &old_attrib, sizeof(old_attrib), FileBasicInformation);
++    ok(dwret == STATUS_SUCCESS, "Failed to get symlink folder's attributes (0x%x).\n", dwret);
++    buffer_len = build_reparse_buffer(targetW, IO_REPARSE_TAG_SYMLINK, SYMLINK_FLAG_RELATIVE, &buffer);
++    bret = DeviceIoControl(handle, FSCTL_SET_REPARSE_POINT, (LPVOID)buffer, buffer_len, NULL, 0, &dwret, 0);
++    CloseHandle(handle);
++    ok(bret, "Failed to create symlink! (0x%x)\n", GetLastError());
++
+ cleanup:
+     /* Cleanup */
+     pRtlFreeUnicodeString(&nameW);
+diff --git a/dlls/ntdll/unix/file.c b/dlls/ntdll/unix/file.c
+index e35ea49d17f..eb39dc0873b 100644
+--- a/dlls/ntdll/unix/file.c
++++ b/dlls/ntdll/unix/file.c
+@@ -5615,16 +5615,19 @@ static void ignore_server_ioctl_struct_holes( ULONG code, const void *in_buffer,
   */
  NTSTATUS FILE_CreateSymlink(HANDLE handle, REPARSE_DATA_BUFFER *buffer)
  {
@@ -36,7 +126,7 @@ index 3d2b874e2ee..ec8050982b0 100644
      int i;
  
      switch(buffer->ReparseTag)
-@@ -1689,11 +1692,13 @@ NTSTATUS FILE_CreateSymlink(HANDLE handle, REPARSE_DATA_BUFFER *buffer)
+@@ -5633,11 +5636,13 @@ NTSTATUS FILE_CreateSymlink(HANDLE handle, REPARSE_DATA_BUFFER *buffer)
          dest_len = buffer->MountPointReparseBuffer.SubstituteNameLength;
          offset = buffer->MountPointReparseBuffer.SubstituteNameOffset;
          dest = &buffer->MountPointReparseBuffer.PathBuffer[offset];
@@ -50,7 +140,7 @@ index 3d2b874e2ee..ec8050982b0 100644
          break;
      default:
          return STATUS_NOT_IMPLEMENTED;
-@@ -1705,17 +1710,54 @@ NTSTATUS FILE_CreateSymlink(HANDLE handle, REPARSE_DATA_BUFFER *buffer)
+@@ -5649,17 +5654,54 @@ NTSTATUS FILE_CreateSymlink(HANDLE handle, REPARSE_DATA_BUFFER *buffer)
      if ((status = server_get_unix_name( handle, &unix_src )))
          goto cleanup;
      src_allocated = TRUE;
@@ -68,7 +158,7 @@ index 3d2b874e2ee..ec8050982b0 100644
 +        if (d != unix_path.Buffer) strcpy( unix_path.Buffer, d );
 +        strcat( unix_path.Buffer, "/");
 +        unix_path.Length = strlen( unix_path.Buffer );
-+        if ((status = wine_unix_to_nt_file_name( &unix_path, &nt_path )))
++        if ((status = unix_to_nt_file_name( &unix_path, &nt_path )))
 +            goto cleanup;
 +        nt_dest.MaximumLength = dest_len + (wcslen( nt_path.Buffer ) + 1) * sizeof(WCHAR);
 +        nt_dest.Buffer = RtlAllocateHeap( GetProcessHeap(), 0, nt_dest.MaximumLength );
@@ -83,7 +173,7 @@ index 3d2b874e2ee..ec8050982b0 100644
 +        nt_dest.Length = dest_len;
 +    }
 +    nt_dest_allocated = TRUE;
-     status = wine_nt_to_unix_file_name( &nt_dest, &unix_dest, 0, FALSE );
+     status = nt_to_unix_file_name( &nt_dest, &unix_dest, 0, FALSE );
      if (status != STATUS_SUCCESS && status != STATUS_NO_SUCH_FILE)
          goto cleanup;
      dest_allocated = TRUE;
@@ -109,7 +199,7 @@ index 3d2b874e2ee..ec8050982b0 100644
      for (i = 0; i < sizeof(ULONG)*8; i++)
      {
          if ((buffer->ReparseTag >> i) & 1)
-@@ -1734,7 +1776,7 @@ NTSTATUS FILE_CreateSymlink(HANDLE handle, REPARSE_DATA_BUFFER *buffer)
+@@ -5678,7 +5720,7 @@ NTSTATUS FILE_CreateSymlink(HANDLE handle, REPARSE_DATA_BUFFER *buffer)
              strcat( magic_dest, "." );
          strcat( magic_dest, "/" );
      }
@@ -118,7 +208,7 @@ index 3d2b874e2ee..ec8050982b0 100644
  
      /* Produce the link in a temporary location in the same folder */
      strcpy( tmpdir, unix_src.Buffer );
-@@ -1784,7 +1826,9 @@ NTSTATUS FILE_CreateSymlink(HANDLE handle, REPARSE_DATA_BUFFER *buffer)
+@@ -5728,7 +5770,9 @@ NTSTATUS FILE_CreateSymlink(HANDLE handle, REPARSE_DATA_BUFFER *buffer)
  
  cleanup:
      if (tempdir_created) rmdir( tmpdir );
@@ -128,96 +218,6 @@ index 3d2b874e2ee..ec8050982b0 100644
      if (src_allocated) RtlFreeAnsiString( &unix_src );
      if (needs_close) close( dest_fd );
      return status;
-diff --git a/dlls/ntdll/tests/file.c b/dlls/ntdll/tests/file.c
-index dc273734719..4d67a46fea6 100644
---- a/dlls/ntdll/tests/file.c
-+++ b/dlls/ntdll/tests/file.c
-@@ -4955,7 +4955,8 @@ static void test_file_readonly_access(void)
-     DeleteFileW(path);
- }
- 
--static INT build_reparse_buffer(const WCHAR *filename, ULONG tag, REPARSE_DATA_BUFFER **pbuffer)
-+static INT build_reparse_buffer(const WCHAR *filename, ULONG tag, ULONG flags,
-+                                REPARSE_DATA_BUFFER **pbuffer)
- {
-     static INT header_size = offsetof(REPARSE_DATA_BUFFER, GenericReparseBuffer);
-     INT buffer_size, struct_size, data_size, string_len, prefix_len;
-@@ -4973,7 +4974,7 @@ static INT build_reparse_buffer(const WCHAR *filename, ULONG tag, REPARSE_DATA_B
-     default:
-         return 0;
-     }
--    prefix_len = strlen("\\??\\");
-+    prefix_len = (flags == SYMLINK_FLAG_RELATIVE) ? 0 : strlen("\\??\\");
-     string_len = lstrlenW(&filename[prefix_len]);
-     data_size = (prefix_len + 2 * string_len + 2) * sizeof(WCHAR);
-     buffer_size = struct_size + data_size;
-@@ -4993,6 +4994,7 @@ static INT build_reparse_buffer(const WCHAR *filename, ULONG tag, REPARSE_DATA_B
-         buffer->SymbolicLinkReparseBuffer.SubstituteNameLength = (prefix_len + string_len) * sizeof(WCHAR);
-         buffer->SymbolicLinkReparseBuffer.PrintNameOffset = (prefix_len + string_len + 1) * sizeof(WCHAR);
-         buffer->SymbolicLinkReparseBuffer.PrintNameLength = string_len * sizeof(WCHAR);
-+        buffer->SymbolicLinkReparseBuffer.Flags = flags;
-         subst_dest = &buffer->SymbolicLinkReparseBuffer.PathBuffer[0];
-         print_dest = &buffer->SymbolicLinkReparseBuffer.PathBuffer[prefix_len + string_len + 1];
-         break;
-@@ -5070,7 +5072,7 @@ static void test_reparse_points(void)
-     }
-     dwret = NtQueryInformationFile(handle, &iosb, &old_attrib, sizeof(old_attrib), FileBasicInformation);
-     ok(dwret == STATUS_SUCCESS, "Failed to get junction point folder's attributes (0x%x).\n", dwret);
--    buffer_len = build_reparse_buffer(nameW.Buffer, IO_REPARSE_TAG_MOUNT_POINT, &buffer);
-+    buffer_len = build_reparse_buffer(nameW.Buffer, IO_REPARSE_TAG_MOUNT_POINT, 0, &buffer);
-     bret = DeviceIoControl(handle, FSCTL_SET_REPARSE_POINT, (LPVOID)buffer, buffer_len, NULL, 0, &dwret, 0);
-     ok(bret, "Failed to create junction point! (0x%x)\n", GetLastError());
- 
-@@ -5111,7 +5113,7 @@ static void test_reparse_points(void)
-     HeapFree(GetProcessHeap(), 0, buffer);
-     handle = CreateFileW(reparse_path, GENERIC_READ | GENERIC_WRITE, 0, 0, OPEN_EXISTING,
-                             FILE_FLAG_BACKUP_SEMANTICS | FILE_FLAG_OPEN_REPARSE_POINT, 0);
--    buffer_len = build_reparse_buffer(nameW.Buffer, IO_REPARSE_TAG_MOUNT_POINT, &buffer);
-+    buffer_len = build_reparse_buffer(nameW.Buffer, IO_REPARSE_TAG_MOUNT_POINT, 0, &buffer);
-     bret = DeviceIoControl(handle, FSCTL_SET_REPARSE_POINT, (LPVOID)buffer, buffer_len, NULL, 0, &dwret, 0);
-     ok(bret, "Failed to create junction point! (0x%x)\n", GetLastError());
-     CloseHandle(handle);
-@@ -5126,7 +5128,7 @@ static void test_reparse_points(void)
-     ok(bret, "Failed to create junction point target directory.\n");
-     handle = CreateFileW(reparse_path, GENERIC_READ | GENERIC_WRITE, 0, 0, OPEN_EXISTING,
-                          FILE_FLAG_BACKUP_SEMANTICS | FILE_FLAG_OPEN_REPARSE_POINT, 0);
--    buffer_len = build_reparse_buffer(nameW.Buffer, IO_REPARSE_TAG_MOUNT_POINT, &buffer);
-+    buffer_len = build_reparse_buffer(nameW.Buffer, IO_REPARSE_TAG_MOUNT_POINT, 0, &buffer);
-     bret = DeviceIoControl(handle, FSCTL_SET_REPARSE_POINT, (LPVOID)buffer, buffer_len, NULL, 0, &dwret, 0);
-     ok(bret, "Failed to create junction point! (0x%x)\n", GetLastError());
-     CloseHandle(handle);
-@@ -5188,7 +5190,7 @@ static void test_reparse_points(void)
-     }
-     dwret = NtQueryInformationFile(handle, &iosb, &old_attrib, sizeof(old_attrib), FileBasicInformation);
-     ok(dwret == STATUS_SUCCESS, "Failed to get symlink folder's attributes (0x%x).\n", dwret);
--    buffer_len = build_reparse_buffer(nameW.Buffer, IO_REPARSE_TAG_SYMLINK, &buffer);
-+    buffer_len = build_reparse_buffer(nameW.Buffer, IO_REPARSE_TAG_SYMLINK, 0, &buffer);
-     bret = DeviceIoControl(handle, FSCTL_SET_REPARSE_POINT, (LPVOID)buffer, buffer_len, NULL, 0, &dwret, 0);
-     ok(bret, "Failed to create symlink! (0x%x)\n", GetLastError());
- 
-@@ -5225,6 +5227,22 @@ static void test_reparse_points(void)
-        "Symlink folder's access time does not match.\n");
-     CloseHandle(handle);
- 
-+    /* Create a relative directory symlink */
-+    HeapFree(GetProcessHeap(), 0, buffer);
-+    handle = CreateFileW(reparse_path, GENERIC_READ | GENERIC_WRITE, 0, 0, OPEN_EXISTING,
-+                         FILE_FLAG_BACKUP_SEMANTICS | FILE_FLAG_OPEN_REPARSE_POINT, 0);
-+    if (handle == INVALID_HANDLE_VALUE)
-+    {
-+        win_skip("Failed to open symlink directory handle (0x%x).\n", GetLastError());
-+        goto cleanup;
-+    }
-+    dwret = NtQueryInformationFile(handle, &iosb, &old_attrib, sizeof(old_attrib), FileBasicInformation);
-+    ok(dwret == STATUS_SUCCESS, "Failed to get symlink folder's attributes (0x%x).\n", dwret);
-+    buffer_len = build_reparse_buffer(targetW, IO_REPARSE_TAG_SYMLINK, SYMLINK_FLAG_RELATIVE, &buffer);
-+    bret = DeviceIoControl(handle, FSCTL_SET_REPARSE_POINT, (LPVOID)buffer, buffer_len, NULL, 0, &dwret, 0);
-+    CloseHandle(handle);
-+    ok(bret, "Failed to create symlink! (0x%x)\n", GetLastError());
-+
- cleanup:
-     /* Cleanup */
-     pRtlFreeUnicodeString(&nameW);
 diff --git a/include/ntifs.h b/include/ntifs.h
 index ab3273d3f81..0d02225bc4f 100644
 --- a/include/ntifs.h
@@ -230,5 +230,5 @@ index ab3273d3f81..0d02225bc4f 100644
 +
  #endif /* __WINE_NTIFS_H */
 -- 
-2.25.1
+2.27.0
 
diff --git a/patches/ntdll-Junction_Points/0011-ntdll-Add-support-for-reading-relative-symlinks.patch b/patches/ntdll-Junction_Points/0011-ntdll-Add-support-for-reading-relative-symlinks.patch
index 60b986da2..9a8ac7f0d 100644
--- a/patches/ntdll-Junction_Points/0011-ntdll-Add-support-for-reading-relative-symlinks.patch
+++ b/patches/ntdll-Junction_Points/0011-ntdll-Add-support-for-reading-relative-symlinks.patch
@@ -1,19 +1,45 @@
-From 6e8b35c8a5c0d0dd1bd55d21c156b3ced65d376c Mon Sep 17 00:00:00 2001
+From af4840c79a9958609575553aaf8bdf13dabe68ef Mon Sep 17 00:00:00 2001
 From: "Erich E. Hoover" <erich.e.hoover@gmail.com>
 Date: Thu, 11 Apr 2019 12:31:16 -0600
 Subject: [PATCH] ntdll: Add support for reading relative symlinks.
 
 Signed-off-by: Erich E. Hoover <erich.e.hoover@gmail.com>
 ---
- dlls/ntdll/file.c       | 44 ++++++++++++++++++++++++++++++++++++++++-
  dlls/ntdll/tests/file.c | 13 +++++++++++-
+ dlls/ntdll/unix/file.c  | 44 ++++++++++++++++++++++++++++++++++++++++-
  2 files changed, 55 insertions(+), 2 deletions(-)
 
-diff --git a/dlls/ntdll/file.c b/dlls/ntdll/file.c
-index 3001b22ff30..780d65c0e96 100644
---- a/dlls/ntdll/file.c
-+++ b/dlls/ntdll/file.c
-@@ -1846,6 +1846,7 @@ NTSTATUS FILE_GetSymlink(HANDLE handle, REPARSE_DATA_BUFFER *buffer, ULONG out_s
+diff --git a/dlls/ntdll/tests/file.c b/dlls/ntdll/tests/file.c
+index 515a84da4d6..30ab4110105 100644
+--- a/dlls/ntdll/tests/file.c
++++ b/dlls/ntdll/tests/file.c
+@@ -5257,9 +5257,20 @@ static void test_reparse_points(void)
+     ok(dwret == STATUS_SUCCESS, "Failed to get symlink folder's attributes (0x%x).\n", dwret);
+     buffer_len = build_reparse_buffer(targetW, IO_REPARSE_TAG_SYMLINK, SYMLINK_FLAG_RELATIVE, &buffer);
+     bret = DeviceIoControl(handle, FSCTL_SET_REPARSE_POINT, (LPVOID)buffer, buffer_len, NULL, 0, &dwret, 0);
+-    CloseHandle(handle);
+     ok(bret, "Failed to create symlink! (0x%x)\n", GetLastError());
+ 
++    /* Read back the relative symlink */
++    HeapFree(GetProcessHeap(), 0, buffer);
++    buffer_len = sizeof(*buffer) + MAX_PATH*sizeof(WCHAR);
++    buffer = HeapAlloc(GetProcessHeap(), HEAP_ZERO_MEMORY, buffer_len);
++    bret = DeviceIoControl(handle, FSCTL_GET_REPARSE_POINT, NULL, 0, (LPVOID)buffer, buffer_len, &dwret, 0);
++    ok(bret, "Failed to read relative symlink!\n");
++    string_len = buffer->SymbolicLinkReparseBuffer.SubstituteNameLength;
++    dest = &buffer->SymbolicLinkReparseBuffer.PathBuffer[buffer->SymbolicLinkReparseBuffer.SubstituteNameOffset/sizeof(WCHAR)];
++    ok((memcmp(dest, targetW, string_len) == 0), "Symlink destination does not match ('%s' != '%s')!\n",
++                                                 wine_dbgstr_w(dest), wine_dbgstr_w(targetW));
++    CloseHandle(handle);
++
+ cleanup:
+     /* Cleanup */
+     pRtlFreeUnicodeString(&nameW);
+diff --git a/dlls/ntdll/unix/file.c b/dlls/ntdll/unix/file.c
+index eb39dc0873b..d19b48d4224 100644
+--- a/dlls/ntdll/unix/file.c
++++ b/dlls/ntdll/unix/file.c
+@@ -5790,6 +5790,7 @@ NTSTATUS FILE_GetSymlink(HANDLE handle, REPARSE_DATA_BUFFER *buffer, ULONG out_s
      BOOL dest_allocated = FALSE;
      int dest_fd, needs_close;
      UNICODE_STRING nt_dest;
@@ -21,7 +47,7 @@ index 3001b22ff30..780d65c0e96 100644
      DWORD max_length;
      NTSTATUS status;
      ULONG flags = 0;
-@@ -1873,6 +1874,11 @@ NTSTATUS FILE_GetSymlink(HANDLE handle, REPARSE_DATA_BUFFER *buffer, ULONG out_s
+@@ -5817,6 +5818,11 @@ NTSTATUS FILE_GetSymlink(HANDLE handle, REPARSE_DATA_BUFFER *buffer, ULONG out_s
  
      /* Decode the reparse tag from the symlink */
      p = unix_dest.Buffer;
@@ -33,7 +59,7 @@ index 3001b22ff30..780d65c0e96 100644
      if (*p++ != '/')
      {
          status = STATUS_NOT_IMPLEMENTED;
-@@ -1909,10 +1915,46 @@ NTSTATUS FILE_GetSymlink(HANDLE handle, REPARSE_DATA_BUFFER *buffer, ULONG out_s
+@@ -5853,10 +5859,46 @@ NTSTATUS FILE_GetSymlink(HANDLE handle, REPARSE_DATA_BUFFER *buffer, ULONG out_s
      unix_dest.Length -= (p - unix_dest.Buffer);
      memmove(unix_dest.Buffer, p, unix_dest.Length);
  
@@ -53,7 +79,7 @@ index 3001b22ff30..780d65c0e96 100644
 +        memmove( &unix_dest.Buffer[path_len], &unix_dest.Buffer[offset], unix_dest.Length + 1 );
 +        unix_dest.Length = strlen( unix_dest.Buffer );
 +    }
-     if ((status = wine_unix_to_nt_file_name( &unix_dest, &nt_dest )))
+     if ((status = unix_to_nt_file_name( &unix_dest, &nt_dest )))
          goto cleanup;
 +    /* remove the relative path from the NT path */
 +    if (flags == SYMLINK_FLAG_RELATIVE)
@@ -62,7 +88,7 @@ index 3001b22ff30..780d65c0e96 100644
 +        int relative_offset;
 +
 +        unix_dest.Length = path_len;
-+        if ((status = wine_unix_to_nt_file_name( &unix_dest, &nt_path )))
++        if ((status = unix_to_nt_file_name( &unix_dest, &nt_path )))
 +            goto cleanup;
 +        relative_offset = wcslen( nt_path.Buffer );
 +        if (wcsncmp( nt_path.Buffer, nt_dest.Buffer, relative_offset ) != 0)
@@ -81,32 +107,6 @@ index 3001b22ff30..780d65c0e96 100644
      switch(buffer->ReparseTag)
      {
      case IO_REPARSE_TAG_MOUNT_POINT:
-diff --git a/dlls/ntdll/tests/file.c b/dlls/ntdll/tests/file.c
-index 4d67a46fea6..35e674e817c 100644
---- a/dlls/ntdll/tests/file.c
-+++ b/dlls/ntdll/tests/file.c
-@@ -5240,9 +5240,20 @@ static void test_reparse_points(void)
-     ok(dwret == STATUS_SUCCESS, "Failed to get symlink folder's attributes (0x%x).\n", dwret);
-     buffer_len = build_reparse_buffer(targetW, IO_REPARSE_TAG_SYMLINK, SYMLINK_FLAG_RELATIVE, &buffer);
-     bret = DeviceIoControl(handle, FSCTL_SET_REPARSE_POINT, (LPVOID)buffer, buffer_len, NULL, 0, &dwret, 0);
--    CloseHandle(handle);
-     ok(bret, "Failed to create symlink! (0x%x)\n", GetLastError());
- 
-+    /* Read back the relative symlink */
-+    HeapFree(GetProcessHeap(), 0, buffer);
-+    buffer_len = sizeof(*buffer) + MAX_PATH*sizeof(WCHAR);
-+    buffer = HeapAlloc(GetProcessHeap(), HEAP_ZERO_MEMORY, buffer_len);
-+    bret = DeviceIoControl(handle, FSCTL_GET_REPARSE_POINT, NULL, 0, (LPVOID)buffer, buffer_len, &dwret, 0);
-+    ok(bret, "Failed to read relative symlink!\n");
-+    string_len = buffer->SymbolicLinkReparseBuffer.SubstituteNameLength;
-+    dest = &buffer->SymbolicLinkReparseBuffer.PathBuffer[buffer->SymbolicLinkReparseBuffer.SubstituteNameOffset/sizeof(WCHAR)];
-+    ok((memcmp(dest, targetW, string_len) == 0), "Symlink destination does not match ('%s' != '%s')!\n",
-+                                                 wine_dbgstr_w(dest), wine_dbgstr_w(targetW));
-+    CloseHandle(handle);
-+
- cleanup:
-     /* Cleanup */
-     pRtlFreeUnicodeString(&nameW);
 -- 
-2.25.1
+2.27.0
 
diff --git a/patches/ntdll-Junction_Points/0012-ntdll-Add-support-for-file-symlinks.patch b/patches/ntdll-Junction_Points/0012-ntdll-Add-support-for-file-symlinks.patch
index b9b349bec..185e13e81 100644
--- a/patches/ntdll-Junction_Points/0012-ntdll-Add-support-for-file-symlinks.patch
+++ b/patches/ntdll-Junction_Points/0012-ntdll-Add-support-for-file-symlinks.patch
@@ -1,19 +1,59 @@
-From 824e8fa59621da5b509297d25a95cad8d4562e68 Mon Sep 17 00:00:00 2001
+From 13ccfb68becff81e4a9cd94654ed51facbe96bb9 Mon Sep 17 00:00:00 2001
 From: "Erich E. Hoover" <erich.e.hoover@gmail.com>
 Date: Thu, 11 Apr 2019 17:57:53 -0600
-Subject: ntdll: Add support for file symlinks.
+Subject: [PATCH] ntdll: Add support for file symlinks.
 
 Signed-off-by: Erich E. Hoover <erich.e.hoover@gmail.com>
 ---
- dlls/ntdll/file.c       | 27 ++++++++++++++++++++++-----
  dlls/ntdll/tests/file.c | 29 +++++++++++++++++++++++++++++
+ dlls/ntdll/unix/file.c  | 27 ++++++++++++++++++++++-----
  2 files changed, 51 insertions(+), 5 deletions(-)
 
-diff --git a/dlls/ntdll/file.c b/dlls/ntdll/file.c
-index 7af9c6635a..2f10472eeb 100644
---- a/dlls/ntdll/file.c
-+++ b/dlls/ntdll/file.c
-@@ -1656,6 +1656,7 @@ NTSTATUS FILE_CreateSymlink(HANDLE handle, REPARSE_DATA_BUFFER *buffer)
+diff --git a/dlls/ntdll/tests/file.c b/dlls/ntdll/tests/file.c
+index 30ab4110105..ebeb1ec7713 100644
+--- a/dlls/ntdll/tests/file.c
++++ b/dlls/ntdll/tests/file.c
+@@ -5190,6 +5190,35 @@ static void test_reparse_points(void)
+     /* Delete the junction point directory and create a blank slate for symlink tests */
+     bret = RemoveDirectoryW(reparse_path);
+     ok(bret, "Failed to delete junction point!\n");
++
++    /* Create the file symlink */
++    HeapFree(GetProcessHeap(), 0, buffer);
++    handle = CreateFileW(reparse_path, GENERIC_READ | GENERIC_WRITE, 0, 0, CREATE_NEW,
++                         FILE_FLAG_BACKUP_SEMANTICS | FILE_FLAG_OPEN_REPARSE_POINT, 0);
++    ok(handle != INVALID_HANDLE_VALUE, "Failed to create symlink file.\n");
++    dwret = NtQueryInformationFile(handle, &iosb, &old_attrib, sizeof(old_attrib), FileBasicInformation);
++    ok(dwret == STATUS_SUCCESS, "Failed to get symlink file's attributes (0x%x).\n", dwret);
++    buffer_len = build_reparse_buffer(nameW.Buffer, IO_REPARSE_TAG_SYMLINK, 0, &buffer);
++    bret = DeviceIoControl(handle, FSCTL_SET_REPARSE_POINT, (LPVOID)buffer, buffer_len, NULL, 0, &dwret, 0);
++    ok(bret, "Failed to create symlink! (0x%x)\n", GetLastError());
++    CloseHandle(handle);
++
++    /* Check deleting a file symlink as if it were a directory */
++    bret = RemoveDirectoryW(reparse_path);
++    todo_wine ok(!bret, "Succeeded in deleting file symlink as a directory!\n");
++    err = GetLastError();
++    todo_wine ok(err == ERROR_DIRECTORY,
++                 "Expected last error 0x%x for RemoveDirectory on file symlink (actually 0x%x)!\n",
++                 ERROR_DIRECTORY, err);
++    dwret = GetFileAttributesW(reparse_path);
++    todo_wine ok(dwret != (DWORD)~0, "Symlink doesn't exist (attributes: 0x%x)!\n", dwret);
++    ok(dwret & FILE_ATTRIBUTE_REPARSE_POINT, "File is not a symlink! (attributes: 0x%x)\n", dwret);
++
++    /* Delete the symlink as a file */
++    bret = DeleteFileW(reparse_path);
++    todo_wine ok(bret, "Failed to delete symlink as a file!\n");
++
++    /* Create a blank slate for directory symlink tests */
+     bret = CreateDirectoryW(reparse_path, NULL);
+     ok(bret, "Failed to create junction point directory.\n");
+     dwret = GetFileAttributesW(reparse_path);
+diff --git a/dlls/ntdll/unix/file.c b/dlls/ntdll/unix/file.c
+index d19b48d4224..fb1e6bd3c1c 100644
+--- a/dlls/ntdll/unix/file.c
++++ b/dlls/ntdll/unix/file.c
+@@ -5624,6 +5624,7 @@ NTSTATUS FILE_CreateSymlink(HANDLE handle, REPARSE_DATA_BUFFER *buffer)
      int relative_offset = 0;
      UNICODE_STRING nt_dest;
      int dest_len, offset;
@@ -21,8 +61,8 @@ index 7af9c6635a..2f10472eeb 100644
      NTSTATUS status;
      struct stat st;
      WCHAR *dest;
-@@ -1748,7 +1749,8 @@ NTSTATUS FILE_CreateSymlink(HANDLE handle, REPARSE_DATA_BUFFER *buffer)
-             status = FILE_GetNtStatus();
+@@ -5716,7 +5717,8 @@ NTSTATUS FILE_CreateSymlink(HANDLE handle, REPARSE_DATA_BUFFER *buffer)
+             status = errno_to_status( errno );
              goto cleanup;
          }
 -        if (S_ISDIR(st.st_mode))
@@ -31,7 +71,7 @@ index 7af9c6635a..2f10472eeb 100644
              strcat( magic_dest, "." );
          strcat( magic_dest, "/" );
      }
-@@ -1775,8 +1777,11 @@ NTSTATUS FILE_CreateSymlink(HANDLE handle, REPARSE_DATA_BUFFER *buffer)
+@@ -5743,8 +5745,11 @@ NTSTATUS FILE_CreateSymlink(HANDLE handle, REPARSE_DATA_BUFFER *buffer)
      /* Atomically move the link into position */
      if (!renameat2( -1, tmplink, -1, unix_src.Buffer, RENAME_EXCHANGE ))
      {
@@ -45,7 +85,7 @@ index 7af9c6635a..2f10472eeb 100644
      }
      else if (errno == ENOSYS)
      {
-@@ -1985,6 +1990,7 @@ NTSTATUS FILE_RemoveSymlink(HANDLE handle, REPARSE_GUID_DATA_BUFFER *buffer)
+@@ -5953,6 +5958,7 @@ NTSTATUS FILE_RemoveSymlink(HANDLE handle, REPARSE_GUID_DATA_BUFFER *buffer)
      BOOL tempdir_created = FALSE;
      int dest_fd, needs_close;
      ANSI_STRING unix_name;
@@ -53,7 +93,7 @@ index 7af9c6635a..2f10472eeb 100644
      NTSTATUS status;
      struct stat st;
  
-@@ -1996,12 +2002,13 @@ NTSTATUS FILE_RemoveSymlink(HANDLE handle, REPARSE_GUID_DATA_BUFFER *buffer)
+@@ -5964,12 +5970,13 @@ NTSTATUS FILE_RemoveSymlink(HANDLE handle, REPARSE_GUID_DATA_BUFFER *buffer)
  
      TRACE("Deleting symlink %s\n", unix_name.Buffer);
  
@@ -61,21 +101,21 @@ index 7af9c6635a..2f10472eeb 100644
 +    /* Produce the file/directory in a temporary location in the same folder */
      if (fstat( dest_fd, &st ) == -1)
      {
-         status = FILE_GetNtStatus();
+         status = errno_to_status( errno );
          goto cleanup;
      }
 +    is_dir = S_ISDIR(st.st_mode);
      strcpy( tmpdir, unix_name.Buffer );
      d = dirname( tmpdir);
      if (d != tmpdir) strcpy( tmpdir, d );
-@@ -2014,11 +2021,21 @@ NTSTATUS FILE_RemoveSymlink(HANDLE handle, REPARSE_GUID_DATA_BUFFER *buffer)
+@@ -5982,11 +5989,21 @@ NTSTATUS FILE_RemoveSymlink(HANDLE handle, REPARSE_GUID_DATA_BUFFER *buffer)
      tempdir_created = TRUE;
      strcpy( tmpfile, tmpdir );
      strcat( tmpfile, "/tmpfile" );
 -    if (mkdir( tmpfile, st.st_mode ))
 +    if (is_dir && mkdir( tmpfile, st.st_mode ))
      {
-         status = FILE_GetNtStatus();
+         status = errno_to_status( errno );
          goto cleanup;
      }
 +    else if (!is_dir)
@@ -83,7 +123,7 @@ index 7af9c6635a..2f10472eeb 100644
 +        int fd = open( tmpfile, O_CREAT|O_WRONLY|O_TRUNC, st.st_mode );
 +        if (fd < 0)
 +            {
-+            status = FILE_GetNtStatus();
++            status = errno_to_status( errno );
 +            goto cleanup;
 +        }
 +        close( fd );
@@ -91,46 +131,6 @@ index 7af9c6635a..2f10472eeb 100644
      /* attemp to retain the ownership (if possible) */
      lchown( tmpfile, st.st_uid, st.st_gid );
      /* Atomically move the directory into position */
-diff --git a/dlls/ntdll/tests/file.c b/dlls/ntdll/tests/file.c
-index a17e792ae0..b904bc1f2d 100644
---- a/dlls/ntdll/tests/file.c
-+++ b/dlls/ntdll/tests/file.c
-@@ -5050,6 +5050,35 @@ static void test_reparse_points(void)
-     /* Delete the junction point directory and create a blank slate for symlink tests */
-     bret = RemoveDirectoryW(reparse_path);
-     ok(bret, "Failed to delete junction point!\n");
-+
-+    /* Create the file symlink */
-+    HeapFree(GetProcessHeap(), 0, buffer);
-+    handle = CreateFileW(reparse_path, GENERIC_READ | GENERIC_WRITE, 0, 0, CREATE_NEW,
-+                         FILE_FLAG_BACKUP_SEMANTICS | FILE_FLAG_OPEN_REPARSE_POINT, 0);
-+    ok(handle != INVALID_HANDLE_VALUE, "Failed to create symlink file.\n");
-+    dwret = NtQueryInformationFile(handle, &iosb, &old_attrib, sizeof(old_attrib), FileBasicInformation);
-+    ok(dwret == STATUS_SUCCESS, "Failed to get symlink file's attributes (0x%x).\n", dwret);
-+    buffer_len = build_reparse_buffer(nameW.Buffer, IO_REPARSE_TAG_SYMLINK, 0, &buffer);
-+    bret = DeviceIoControl(handle, FSCTL_SET_REPARSE_POINT, (LPVOID)buffer, buffer_len, NULL, 0, &dwret, 0);
-+    ok(bret, "Failed to create symlink! (0x%x)\n", GetLastError());
-+    CloseHandle(handle);
-+
-+    /* Check deleting a file symlink as if it were a directory */
-+    bret = RemoveDirectoryW(reparse_path);
-+    todo_wine ok(!bret, "Succeeded in deleting file symlink as a directory!\n");
-+    err = GetLastError();
-+    todo_wine ok(err == ERROR_DIRECTORY,
-+                 "Expected last error 0x%x for RemoveDirectory on file symlink (actually 0x%x)!\n",
-+                 ERROR_DIRECTORY, err);
-+    dwret = GetFileAttributesW(reparse_path);
-+    todo_wine ok(dwret != (DWORD)~0, "Symlink doesn't exist (attributes: 0x%x)!\n", dwret);
-+    ok(dwret & FILE_ATTRIBUTE_REPARSE_POINT, "File is not a symlink! (attributes: 0x%x)\n", dwret);
-+
-+    /* Delete the symlink as a file */
-+    bret = DeleteFileW(reparse_path);
-+    todo_wine ok(bret, "Failed to delete symlink as a file!\n");
-+
-+    /* Create a blank slate for directory symlink tests */
-     bret = CreateDirectoryW(reparse_path, NULL);
-     ok(bret, "Failed to create junction point directory.\n");
-     dwret = GetFileAttributesW(reparse_path);
 -- 
-2.17.1
+2.27.0
 
diff --git a/patches/ntdll-Junction_Points/0013-ntdll-Allow-creation-of-dangling-reparse-points-to-n.patch b/patches/ntdll-Junction_Points/0013-ntdll-Allow-creation-of-dangling-reparse-points-to-n.patch
index c2f5842c7..d6435c86d 100644
--- a/patches/ntdll-Junction_Points/0013-ntdll-Allow-creation-of-dangling-reparse-points-to-n.patch
+++ b/patches/ntdll-Junction_Points/0013-ntdll-Allow-creation-of-dangling-reparse-points-to-n.patch
@@ -1,4 +1,4 @@
-From 804bc6397bcf91a50ec6d13ca296e564ee19d689 Mon Sep 17 00:00:00 2001
+From 1f399151685c3d7827d39b7039abe7b3b941a3bc Mon Sep 17 00:00:00 2001
 From: "Erich E. Hoover" <erich.e.hoover@gmail.com>
 Date: Tue, 30 Apr 2019 16:24:54 -0600
 Subject: [PATCH] ntdll: Allow creation of dangling reparse points to
@@ -6,31 +6,15 @@ Subject: [PATCH] ntdll: Allow creation of dangling reparse points to
 
 Signed-off-by: Erich E. Hoover <erich.e.hoover@gmail.com>
 ---
- dlls/ntdll/file.c      |  3 ++-
- dlls/ntdll/unix/file.c | 13 +++++++++++++
+ dlls/ntdll/unix/file.c | 15 ++++++++++++++-
  include/winternl.h     |  1 +
- 3 files changed, 16 insertions(+), 1 deletion(-)
+ 2 files changed, 15 insertions(+), 1 deletion(-)
 
-diff --git a/dlls/ntdll/file.c b/dlls/ntdll/file.c
-index 6c5da524aad..aad4ba5615b 100644
---- a/dlls/ntdll/file.c
-+++ b/dlls/ntdll/file.c
-@@ -1619,8 +1619,9 @@ NTSTATUS FILE_CreateSymlink(HANDLE handle, REPARSE_DATA_BUFFER *buffer)
-         RtlCreateUnicodeString( &nt_dest, dest );
-         nt_dest.Length = dest_len;
-     }
-+
-     nt_dest_allocated = TRUE;
--    status = wine_nt_to_unix_file_name( &nt_dest, &unix_dest, 0, FALSE );
-+    status = wine_nt_to_unix_file_name( &nt_dest, &unix_dest, FILE_WINE_PATH, FALSE );
-     if (status != STATUS_SUCCESS && status != STATUS_NO_SUCH_FILE)
-         goto cleanup;
-     dest_allocated = TRUE;
 diff --git a/dlls/ntdll/unix/file.c b/dlls/ntdll/unix/file.c
-index 13096e085e8..a2fc2a6425b 100644
+index fb1e6bd3c1c..c47aea62a38 100644
 --- a/dlls/ntdll/unix/file.c
 +++ b/dlls/ntdll/unix/file.c
-@@ -2726,6 +2726,19 @@ static NTSTATUS lookup_unix_name( const WCHAR *name, int name_len, char **buffer
+@@ -3218,6 +3218,19 @@ static NTSTATUS lookup_unix_name( const WCHAR *name, int name_len, char **buffer
                  status = STATUS_OBJECT_NAME_COLLISION;
              }
          }
@@ -50,8 +34,17 @@ index 13096e085e8..a2fc2a6425b 100644
  
          if (status != STATUS_SUCCESS) break;
  
+@@ -5682,7 +5695,7 @@ NTSTATUS FILE_CreateSymlink(HANDLE handle, REPARSE_DATA_BUFFER *buffer)
+         nt_dest.Length = dest_len;
+     }
+     nt_dest_allocated = TRUE;
+-    status = nt_to_unix_file_name( &nt_dest, &unix_dest, 0, FALSE );
++    status = nt_to_unix_file_name( &nt_dest, &unix_dest, FILE_WINE_PATH, FALSE );
+     if (status != STATUS_SUCCESS && status != STATUS_NO_SUCH_FILE)
+         goto cleanup;
+     dest_allocated = TRUE;
 diff --git a/include/winternl.h b/include/winternl.h
-index 39776d36f92..2e8c3866a3a 100644
+index 0957561063a..0af566f518d 100644
 --- a/include/winternl.h
 +++ b/include/winternl.h
 @@ -1839,6 +1839,7 @@ typedef struct _RTL_HANDLE_TABLE
diff --git a/patches/ntdll-Junction_Points/0014-ntdll-Correctly-report-file-symbolic-links-as-files.patch b/patches/ntdll-Junction_Points/0014-ntdll-Correctly-report-file-symbolic-links-as-files.patch
index 63549fa60..c29c8ee24 100644
--- a/patches/ntdll-Junction_Points/0014-ntdll-Correctly-report-file-symbolic-links-as-files.patch
+++ b/patches/ntdll-Junction_Points/0014-ntdll-Correctly-report-file-symbolic-links-as-files.patch
@@ -1,21 +1,54 @@
-From 22a440051f4dd3b63977a384735cf60fad7f28f5 Mon Sep 17 00:00:00 2001
+From 6ab64d5c26ab8713b2e55911540538a700580017 Mon Sep 17 00:00:00 2001
 From: "Erich E. Hoover" <erich.e.hoover@gmail.com>
 Date: Sat, 30 Mar 2019 12:00:51 -0600
 Subject: [PATCH] ntdll: Correctly report file symbolic links as files.
 
 Signed-off-by: Erich E. Hoover <erich.e.hoover@gmail.com>
 ---
- dlls/ntdll/file.c       | 120 ++++++++++++++++++++++++++--------------
  dlls/ntdll/tests/file.c |   8 +--
+ dlls/ntdll/unix/file.c  | 120 ++++++++++++++++++++++++++--------------
  2 files changed, 84 insertions(+), 44 deletions(-)
 
-diff --git a/dlls/ntdll/file.c b/dlls/ntdll/file.c
-index 74df2aed687..7483c71a8db 100644
---- a/dlls/ntdll/file.c
-+++ b/dlls/ntdll/file.c
-@@ -123,6 +123,9 @@ mode_t FILE_umask = 0;
- #define FILE_WRITE_TO_END_OF_FILE      ((LONGLONG)-1)
- #define FILE_USE_FILE_POINTER_POSITION ((LONGLONG)-2)
+diff --git a/dlls/ntdll/tests/file.c b/dlls/ntdll/tests/file.c
+index 9530adb2a84..45cffce68ee 100644
+--- a/dlls/ntdll/tests/file.c
++++ b/dlls/ntdll/tests/file.c
+@@ -5205,13 +5205,13 @@ static void test_reparse_points(void)
+ 
+     /* Check deleting a file symlink as if it were a directory */
+     bret = RemoveDirectoryW(reparse_path);
+-    todo_wine ok(!bret, "Succeeded in deleting file symlink as a directory!\n");
++    ok(!bret, "Succeeded in deleting file symlink as a directory!\n");
+     err = GetLastError();
+     todo_wine ok(err == ERROR_DIRECTORY,
+                  "Expected last error 0x%x for RemoveDirectory on file symlink (actually 0x%x)!\n",
+                  ERROR_DIRECTORY, err);
+     dwret = GetFileAttributesW(reparse_path);
+-    todo_wine ok(dwret != (DWORD)~0, "Symlink doesn't exist (attributes: 0x%x)!\n", dwret);
++    ok(dwret != (DWORD)~0, "Symlink doesn't exist (attributes: 0x%x)!\n", dwret);
+     ok(dwret & FILE_ATTRIBUTE_REPARSE_POINT, "File is not a symlink! (attributes: 0x%x)\n", dwret);
+ 
+     /* Delete the symlink as a file */
+@@ -5220,10 +5220,10 @@ static void test_reparse_points(void)
+ 
+     /* Create a blank slate for directory symlink tests */
+     bret = CreateDirectoryW(reparse_path, NULL);
+-    ok(bret, "Failed to create junction point directory.\n");
++    todo_wine ok(bret, "Failed to create junction point directory.\n");
+     dwret = GetFileAttributesW(reparse_path);
+     ok(dwret != (DWORD)~0, "Path doesn't exist (attributes: 0x%x)!\n", dwret);
+-    ok(!(dwret & FILE_ATTRIBUTE_REPARSE_POINT), "File is already a reparse point! (attributes: %d)\n", dwret);
++    todo_wine ok(!(dwret & FILE_ATTRIBUTE_REPARSE_POINT), "File is already a reparse point! (attributes: %d)\n", dwret);
+ 
+     /* Create the directory symlink */
+     HeapFree(GetProcessHeap(), 0, buffer);
+diff --git a/dlls/ntdll/unix/file.c b/dlls/ntdll/unix/file.c
+index d77a788e0fb..9656f1eb14c 100644
+--- a/dlls/ntdll/unix/file.c
++++ b/dlls/ntdll/unix/file.c
+@@ -1470,6 +1470,9 @@ static inline int get_file_xattr( char *hexattr, int attrlen )
+     return 0;
+ }
  
 +NTSTATUS FILE_DecodeSymlink(const char *unix_src, char *unix_dest, USHORT *unix_dest_len,
 +                            DWORD *tag, ULONG *flags, BOOL *is_dir);
@@ -23,7 +56,7 @@ index 74df2aed687..7483c71a8db 100644
  /* fetch the attributes of a file */
  static inline ULONG get_file_attributes( const struct stat *st )
  {
-@@ -170,10 +173,15 @@ int get_file_info( const char *path, struct stat *st, ULONG *attr )
+@@ -1554,10 +1557,15 @@ static int get_file_info( const char *path, struct stat *st, ULONG *attr )
      if (ret == -1) return ret;
      if (S_ISLNK( st->st_mode ))
      {
@@ -43,7 +76,7 @@ index 74df2aed687..7483c71a8db 100644
      }
      else if (S_ISDIR( st->st_mode ) && (parent_path = RtlAllocateHeap( GetProcessHeap(), 0, strlen(path) + 4 )))
      {
-@@ -1841,48 +1849,33 @@ cleanup:
+@@ -5851,48 +5859,33 @@ cleanup:
  }
  
  
@@ -73,7 +106,7 @@ index 74df2aed687..7483c71a8db 100644
 -    char *p;
      int i;
  
--    if ((status = unix_funcs->server_get_unix_fd( handle, FILE_ANY_ACCESS, &dest_fd, &needs_close, NULL, NULL )))
+-    if ((status = server_get_unix_fd( handle, FILE_ANY_ACCESS, &dest_fd, &needs_close, NULL, NULL )))
 -        return status;
 -
 -    if ((status = server_get_unix_name( handle, &unix_src )))
@@ -91,7 +124,7 @@ index 74df2aed687..7483c71a8db 100644
 +        tmp = unix_dest;
 +    if ((ret = readlink( unix_src, tmp, len )) < 0)
      {
-         status = FILE_GetNtStatus();
+         status = errno_to_status( errno );
          goto cleanup;
      }
 -    unix_dest.Length = ret;
@@ -107,7 +140,7 @@ index 74df2aed687..7483c71a8db 100644
          p++;
      }
      if (*p++ != '/')
-@@ -1890,7 +1883,7 @@ NTSTATUS FILE_GetSymlink(HANDLE handle, REPARSE_DATA_BUFFER *buffer, ULONG out_s
+@@ -5900,7 +5893,7 @@ NTSTATUS FILE_GetSymlink(HANDLE handle, REPARSE_DATA_BUFFER *buffer, ULONG out_s
          status = STATUS_NOT_IMPLEMENTED;
          goto cleanup;
      }
@@ -116,7 +149,7 @@ index 74df2aed687..7483c71a8db 100644
      for (i = 0; i < sizeof(ULONG)*8; i++)
      {
          char c = *p++;
-@@ -1905,21 +1898,68 @@ NTSTATUS FILE_GetSymlink(HANDLE handle, REPARSE_DATA_BUFFER *buffer, ULONG out_s
+@@ -5915,21 +5908,68 @@ NTSTATUS FILE_GetSymlink(HANDLE handle, REPARSE_DATA_BUFFER *buffer, ULONG out_s
              status = STATUS_NOT_IMPLEMENTED;
              goto cleanup;
          }
@@ -174,7 +207,7 @@ index 74df2aed687..7483c71a8db 100644
 +    ULONG flags = 0;
 +    INT prefix_len;
 +
-+    if ((status = unix_funcs->server_get_unix_fd( handle, FILE_ANY_ACCESS, &dest_fd, &needs_close, NULL, NULL )))
++    if ((status = server_get_unix_fd( handle, FILE_ANY_ACCESS, &dest_fd, &needs_close, NULL, NULL )))
 +        return status;
 +
 +    if ((status = server_get_unix_name( handle, &unix_src )))
@@ -190,39 +223,6 @@ index 74df2aed687..7483c71a8db 100644
  
      /* convert the relative path into an absolute path */
      if (flags == SYMLINK_FLAG_RELATIVE)
-diff --git a/dlls/ntdll/tests/file.c b/dlls/ntdll/tests/file.c
-index e0116491eee..7f983583268 100644
---- a/dlls/ntdll/tests/file.c
-+++ b/dlls/ntdll/tests/file.c
-@@ -5187,13 +5187,13 @@ static void test_reparse_points(void)
- 
-     /* Check deleting a file symlink as if it were a directory */
-     bret = RemoveDirectoryW(reparse_path);
--    todo_wine ok(!bret, "Succeeded in deleting file symlink as a directory!\n");
-+    ok(!bret, "Succeeded in deleting file symlink as a directory!\n");
-     err = GetLastError();
-     todo_wine ok(err == ERROR_DIRECTORY,
-                  "Expected last error 0x%x for RemoveDirectory on file symlink (actually 0x%x)!\n",
-                  ERROR_DIRECTORY, err);
-     dwret = GetFileAttributesW(reparse_path);
--    todo_wine ok(dwret != (DWORD)~0, "Symlink doesn't exist (attributes: 0x%x)!\n", dwret);
-+    ok(dwret != (DWORD)~0, "Symlink doesn't exist (attributes: 0x%x)!\n", dwret);
-     ok(dwret & FILE_ATTRIBUTE_REPARSE_POINT, "File is not a symlink! (attributes: 0x%x)\n", dwret);
- 
-     /* Delete the symlink as a file */
-@@ -5202,10 +5202,10 @@ static void test_reparse_points(void)
- 
-     /* Create a blank slate for directory symlink tests */
-     bret = CreateDirectoryW(reparse_path, NULL);
--    ok(bret, "Failed to create junction point directory.\n");
-+    todo_wine ok(bret, "Failed to create junction point directory.\n");
-     dwret = GetFileAttributesW(reparse_path);
-     ok(dwret != (DWORD)~0, "Path doesn't exist (attributes: 0x%x)!\n", dwret);
--    ok(!(dwret & FILE_ATTRIBUTE_REPARSE_POINT), "File is already a reparse point! (attributes: %d)\n", dwret);
-+    todo_wine ok(!(dwret & FILE_ATTRIBUTE_REPARSE_POINT), "File is already a reparse point! (attributes: %d)\n", dwret);
- 
-     /* Create the directory symlink */
-     HeapFree(GetProcessHeap(), 0, buffer);
 -- 
-2.26.2
+2.27.0
 
diff --git a/patches/ntdll-Junction_Points/0017-ntdll-Always-report-symbolic-links-as-containing-zer.patch b/patches/ntdll-Junction_Points/0017-ntdll-Always-report-symbolic-links-as-containing-zer.patch
index 9caa16ea5..ebf06d754 100644
--- a/patches/ntdll-Junction_Points/0017-ntdll-Always-report-symbolic-links-as-containing-zer.patch
+++ b/patches/ntdll-Junction_Points/0017-ntdll-Always-report-symbolic-links-as-containing-zer.patch
@@ -1,32 +1,19 @@
-From 4df537eadbf20772213e02eb65d51fc1c016981e Mon Sep 17 00:00:00 2001
+From 3c058e77263895ea58b25f652b82d443bcde9dcc Mon Sep 17 00:00:00 2001
 From: "Erich E. Hoover" <erich.e.hoover@gmail.com>
 Date: Wed, 1 May 2019 12:06:20 -0600
-Subject: ntdll: Always report symbolic links as containing zero bytes.
+Subject: [PATCH] ntdll: Always report symbolic links as containing zero bytes.
 
 Signed-off-by: Erich E. Hoover <erich.e.hoover@gmail.com>
 ---
- dlls/ntdll/file.c       |  2 ++
  dlls/ntdll/tests/file.c | 46 +++++++++++++++++++++++++++++++++++++++--
+ dlls/ntdll/unix/file.c  |  2 ++
  2 files changed, 46 insertions(+), 2 deletions(-)
 
-diff --git a/dlls/ntdll/file.c b/dlls/ntdll/file.c
-index be594ea517..6bb45f34f3 100644
---- a/dlls/ntdll/file.c
-+++ b/dlls/ntdll/file.c
-@@ -167,6 +167,8 @@ int get_file_info( const char *path, struct stat *st, ULONG *attr )
- 
-         /* return information about the destination (unless this is a dangling symlink) */
-         stat( path, st );
-+        /* symbolic links always report size 0 */
-+        st->st_size = 0;
-         /* symbolic links (either junction points or NT symlinks) are "reparse points" */
-         *attr |= FILE_ATTRIBUTE_REPARSE_POINT;
-         /* whether a reparse point is a file or a directory is stored inside the link target */
 diff --git a/dlls/ntdll/tests/file.c b/dlls/ntdll/tests/file.c
-index f2c273e901..d776d12329 100644
+index cd2b294bceb..67d54c81fb0 100644
 --- a/dlls/ntdll/tests/file.c
 +++ b/dlls/ntdll/tests/file.c
-@@ -4896,7 +4896,9 @@ static void test_reparse_points(void)
+@@ -5036,7 +5036,9 @@ static void test_reparse_points(void)
      static const WCHAR dotW[] = {'.',0};
      REPARSE_DATA_BUFFER *buffer = NULL;
      DWORD dwret, dwLen, dwFlags, err;
@@ -36,7 +23,7 @@ index f2c273e901..d776d12329 100644
      HANDLE handle, token;
      IO_STATUS_BLOCK iosb;
      UNICODE_STRING nameW;
-@@ -5024,8 +5026,6 @@ static void test_reparse_points(void)
+@@ -5164,8 +5166,6 @@ static void test_reparse_points(void)
         "Unexpected junction point attributes (0x%x != 0x410)!\n", dwret);
      bret = RemoveDirectoryW(target_path);
      ok(bret, "Failed to delete junction point target!\n");
@@ -45,7 +32,7 @@ index f2c273e901..d776d12329 100644
  
      /* Establish permissions for symlink creation */
      bret = OpenProcessToken(GetCurrentProcess(), TOKEN_ALL_ACCESS, &token);
-@@ -5050,6 +5050,13 @@ static void test_reparse_points(void)
+@@ -5190,6 +5190,13 @@ static void test_reparse_points(void)
      /* Delete the junction point directory and create a blank slate for symlink tests */
      bret = RemoveDirectoryW(reparse_path);
      ok(bret, "Failed to delete junction point!\n");
@@ -59,7 +46,7 @@ index f2c273e901..d776d12329 100644
  
      /* Create the file symlink */
      HeapFree(GetProcessHeap(), 0, buffer);
-@@ -5063,6 +5070,37 @@ static void test_reparse_points(void)
+@@ -5203,6 +5210,37 @@ static void test_reparse_points(void)
      ok(bret, "Failed to create symlink! (0x%x)\n", GetLastError());
      CloseHandle(handle);
  
@@ -97,7 +84,7 @@ index f2c273e901..d776d12329 100644
      /* Check deleting a file symlink as if it were a directory */
      bret = RemoveDirectoryW(reparse_path);
      ok(!bret, "Succeeded in deleting file symlink as a directory!\n");
-@@ -5084,6 +5122,10 @@ static void test_reparse_points(void)
+@@ -5224,6 +5262,10 @@ static void test_reparse_points(void)
      dwret = GetFileAttributesW(reparse_path);
      ok(dwret != (DWORD)~0, "Path doesn't exist (attributes: 0x%x)!\n", dwret);
      ok(!(dwret & FILE_ATTRIBUTE_REPARSE_POINT), "File is already a reparse point! (attributes: %d)\n", dwret);
@@ -108,6 +95,19 @@ index f2c273e901..d776d12329 100644
  
      /* Create the directory symlink */
      HeapFree(GetProcessHeap(), 0, buffer);
+diff --git a/dlls/ntdll/unix/file.c b/dlls/ntdll/unix/file.c
+index 7b32bac7fa3..ac4e09fc732 100644
+--- a/dlls/ntdll/unix/file.c
++++ b/dlls/ntdll/unix/file.c
+@@ -1511,6 +1511,8 @@ static int get_file_info( const char *path, struct stat *st, ULONG *attr )
+ 
+         /* return information about the destination (unless this is a dangling symlink) */
+         stat( path, st );
++        /* symbolic links always report size 0 */
++        st->st_size = 0;
+         /* symbolic links (either junction points or NT symlinks) are "reparse points" */
+         *attr |= FILE_ATTRIBUTE_REPARSE_POINT;
+         /* whether a reparse point is a file or a directory is stored inside the link target */
 -- 
-2.17.1
+2.27.0
 
diff --git a/patches/ntdll-Junction_Points/definition b/patches/ntdll-Junction_Points/definition
index a1a683f34..c52d948c9 100644
--- a/patches/ntdll-Junction_Points/definition
+++ b/patches/ntdll-Junction_Points/definition
@@ -2,5 +2,4 @@ Fixes: [12401] NET Framework 2.0, 3.0, 4.0 installers and other apps that make u
 Fixes: [44948] Multiple apps (Spine (Mod starter for Gothic), MS Office 365 installer) need CreateSymbolicLinkW implementation
 # FIXME: patch 0006 was broken by e36a9c459d. We really want to get that information from ntdll instead, but the how is not trivial...
 # FIXME 2: patch 0019 needs to call RemoveDirectoryW() from kernelbase, but it's stuck in kernel32 for now...
-# As with other patch sets, temporarily disabled while it's awkwardly split between ntdll.dll and ntdll.so.
-Disabled: true
+Depends: ntdll-DOS_Attributes
diff --git a/patches/ntdll-NtQueryEaFile/definition b/patches/ntdll-NtQueryEaFile/definition
index 6bff56983..a86870c2f 100644
--- a/patches/ntdll-NtQueryEaFile/definition
+++ b/patches/ntdll-NtQueryEaFile/definition
@@ -1,5 +1,3 @@
 Fixes: Improve stub for NtQueryEaFile
 # Depends: ntdll-Syscall_Wrappers
 Depends: ntdll-Junction_Points
-# Re-enable me when ntdll-Junction_Points gets re-enabled!
-Disabled: true
diff --git a/patches/patchinstall.sh b/patches/patchinstall.sh
index 092f6855b..64089cc23 100755
--- a/patches/patchinstall.sh
+++ b/patches/patchinstall.sh
@@ -179,9 +179,11 @@ patch_enable_all ()
 	enable_ntdll_HashLinks="$1"
 	enable_ntdll_Heap_Improvements="$1"
 	enable_ntdll_Interrupt_0x2e="$1"
+	enable_ntdll_Junction_Points="$1"
 	enable_ntdll_Manifest_Range="$1"
 	enable_ntdll_NtAccessCheck="$1"
 	enable_ntdll_NtDevicePath="$1"
+	enable_ntdll_NtQueryEaFile="$1"
 	enable_ntdll_NtQuerySection="$1"
 	enable_ntdll_NtSetLdtEntries="$1"
 	enable_ntdll_Pipe_SpecialCharacters="$1"
@@ -223,10 +225,13 @@ patch_enable_all ()
 	enable_riched20_IText_Interface="$1"
 	enable_server_Desktop_Refcount="$1"
 	enable_server_FileEndOfFileInformation="$1"
+	enable_server_File_Permissions="$1"
+	enable_server_Inherited_ACLs="$1"
 	enable_server_Object_Types="$1"
 	enable_server_PeekMessage="$1"
 	enable_server_Registry_Notifications="$1"
 	enable_server_Signal_Thread="$1"
+	enable_server_Stored_ACLs="$1"
 	enable_setupapi_DiskSpaceList="$1"
 	enable_setupapi_SPFILENOTIFY_FILEINCABINET="$1"
 	enable_shdocvw_ParseURLFromOutsideSource_Tests="$1"
@@ -627,6 +632,9 @@ patch_enable ()
 		ntdll-Interrupt-0x2e)
 			enable_ntdll_Interrupt_0x2e="$2"
 			;;
+		ntdll-Junction_Points)
+			enable_ntdll_Junction_Points="$2"
+			;;
 		ntdll-Manifest_Range)
 			enable_ntdll_Manifest_Range="$2"
 			;;
@@ -636,6 +644,9 @@ patch_enable ()
 		ntdll-NtDevicePath)
 			enable_ntdll_NtDevicePath="$2"
 			;;
+		ntdll-NtQueryEaFile)
+			enable_ntdll_NtQueryEaFile="$2"
+			;;
 		ntdll-NtQuerySection)
 			enable_ntdll_NtQuerySection="$2"
 			;;
@@ -759,6 +770,12 @@ patch_enable ()
 		server-FileEndOfFileInformation)
 			enable_server_FileEndOfFileInformation="$2"
 			;;
+		server-File_Permissions)
+			enable_server_File_Permissions="$2"
+			;;
+		server-Inherited_ACLs)
+			enable_server_Inherited_ACLs="$2"
+			;;
 		server-Object_Types)
 			enable_server_Object_Types="$2"
 			;;
@@ -774,6 +791,9 @@ patch_enable ()
 		server-Signal_Thread)
 			enable_server_Signal_Thread="$2"
 			;;
+		server-Stored_ACLs)
+			enable_server_Stored_ACLs="$2"
+			;;
 		setupapi-DiskSpaceList)
 			enable_setupapi_DiskSpaceList="$2"
 			;;
@@ -1569,6 +1589,31 @@ if test "$enable_shell32_Progress_Dialog" -eq 1; then
 	enable_shell32_SHFileOperation_Move=1
 fi
 
+if test "$enable_server_Inherited_ACLs" -eq 1; then
+	if test "$enable_server_Stored_ACLs" -gt 1; then
+		abort "Patchset server-Stored_ACLs disabled, but server-Inherited_ACLs depends on that."
+	fi
+	enable_server_Stored_ACLs=1
+fi
+
+if test "$enable_server_Stored_ACLs" -eq 1; then
+	if test "$enable_ntdll_DOS_Attributes" -gt 1; then
+		abort "Patchset ntdll-DOS_Attributes disabled, but server-Stored_ACLs depends on that."
+	fi
+	if test "$enable_server_File_Permissions" -gt 1; then
+		abort "Patchset server-File_Permissions disabled, but server-Stored_ACLs depends on that."
+	fi
+	enable_ntdll_DOS_Attributes=1
+	enable_server_File_Permissions=1
+fi
+
+if test "$enable_server_File_Permissions" -eq 1; then
+	if test "$enable_ntdll_Junction_Points" -gt 1; then
+		abort "Patchset ntdll-Junction_Points disabled, but server-File_Permissions depends on that."
+	fi
+	enable_ntdll_Junction_Points=1
+fi
+
 if test "$enable_server_Desktop_Refcount" -eq 1; then
 	if test "$enable_ws2_32_WSACleanup" -gt 1; then
 		abort "Patchset ws2_32-WSACleanup disabled, but server-Desktop_Refcount depends on that."
@@ -1622,6 +1667,13 @@ if test "$enable_winebuild_Fake_Dlls" -eq 1; then
 	enable_ws2_32_WSACleanup=1
 fi
 
+if test "$enable_ntdll_NtQueryEaFile" -eq 1; then
+	if test "$enable_ntdll_Junction_Points" -gt 1; then
+		abort "Patchset ntdll-Junction_Points disabled, but ntdll-NtQueryEaFile depends on that."
+	fi
+	enable_ntdll_Junction_Points=1
+fi
+
 if test "$enable_ntdll_NtDevicePath" -eq 1; then
 	if test "$enable_ntdll_Pipe_SpecialCharacters" -gt 1; then
 		abort "Patchset ntdll-Pipe_SpecialCharacters disabled, but ntdll-NtDevicePath depends on that."
@@ -1629,6 +1681,13 @@ if test "$enable_ntdll_NtDevicePath" -eq 1; then
 	enable_ntdll_Pipe_SpecialCharacters=1
 fi
 
+if test "$enable_ntdll_Junction_Points" -eq 1; then
+	if test "$enable_ntdll_DOS_Attributes" -gt 1; then
+		abort "Patchset ntdll-DOS_Attributes disabled, but ntdll-Junction_Points depends on that."
+	fi
+	enable_ntdll_DOS_Attributes=1
+fi
+
 if test "$enable_ntdll_Builtin_Prot" -eq 1; then
 	if test "$enable_ntdll_WRITECOPY" -gt 1; then
 		abort "Patchset ntdll-WRITECOPY disabled, but ntdll-Builtin_Prot depends on that."
@@ -3685,6 +3744,60 @@ if test "$enable_ntdll_Interrupt_0x2e" -eq 1; then
 	) >> "$patchlist"
 fi
 
+# Patchset ntdll-Junction_Points
+# |
+# | This patchset has the following (direct or indirect) dependencies:
+# |   *	ntdll-DOS_Attributes
+# |
+# | This patchset fixes the following Wine bugs:
+# |   *	[#12401] NET Framework 2.0, 3.0, 4.0 installers and other apps that make use of GAC API for managed assembly
+# | 	installation on NTFS filesystems need reparse point/junction API support
+# | 	(FSCTL_SET_REPARSE_POINT/FSCTL_GET_REPARSE_POINT)
+# |   *	[#44948] Multiple apps (Spine (Mod starter for Gothic), MS Office 365 installer) need CreateSymbolicLinkW implementation
+# |
+# | Modified files:
+# |   *	configure.ac, dlls/kernel32/path.c, dlls/ntdll/tests/file.c, dlls/ntdll/unix/file.c, include/Makefile.in,
+# | 	include/ntifs.h, include/wine/port.h, include/winternl.h, libs/port/Makefile.in, libs/port/renameat2.c, server/fd.c
+# |
+if test "$enable_ntdll_Junction_Points" -eq 1; then
+	patch_apply ntdll-Junction_Points/0001-ntdll-Add-support-for-junction-point-creation.patch
+	patch_apply ntdll-Junction_Points/0002-ntdll-Add-support-for-reading-junction-points.patch
+	patch_apply ntdll-Junction_Points/0003-ntdll-Add-support-for-deleting-junction-points.patch
+	patch_apply ntdll-Junction_Points/0004-ntdll-Add-a-test-for-junction-point-advertisement.patch
+	patch_apply ntdll-Junction_Points/0005-kernel32-ntdll-Add-support-for-deleting-junction-poi.patch
+	patch_apply ntdll-Junction_Points/0007-ntdll-Add-support-for-absolute-symlink-creation.patch
+	patch_apply ntdll-Junction_Points/0008-ntdll-Add-support-for-reading-absolute-symlinks.patch
+	patch_apply ntdll-Junction_Points/0009-ntdll-Add-support-for-deleting-symlinks.patch
+	patch_apply ntdll-Junction_Points/0010-ntdll-Add-support-for-relative-symlink-creation.patch
+	patch_apply ntdll-Junction_Points/0011-ntdll-Add-support-for-reading-relative-symlinks.patch
+	patch_apply ntdll-Junction_Points/0012-ntdll-Add-support-for-file-symlinks.patch
+	patch_apply ntdll-Junction_Points/0013-ntdll-Allow-creation-of-dangling-reparse-points-to-n.patch
+	patch_apply ntdll-Junction_Points/0014-ntdll-Correctly-report-file-symbolic-links-as-files.patch
+	patch_apply ntdll-Junction_Points/0015-kernel32-Set-error-code-when-attempting-to-delete-fi.patch
+	patch_apply ntdll-Junction_Points/0016-server-Properly-handle-file-symlink-deletion.patch
+	patch_apply ntdll-Junction_Points/0017-ntdll-Always-report-symbolic-links-as-containing-zer.patch
+	patch_apply ntdll-Junction_Points/0018-ntdll-Find-dangling-symlinks-quickly.patch
+	(
+		printf '%s\n' '+    { "Erich E. Hoover", "ntdll: Add support for junction point creation.", 1 },';
+		printf '%s\n' '+    { "Erich E. Hoover", "ntdll: Add support for reading junction points.", 1 },';
+		printf '%s\n' '+    { "Erich E. Hoover", "ntdll: Add support for deleting junction points.", 1 },';
+		printf '%s\n' '+    { "Erich E. Hoover", "ntdll: Add a test for junction point advertisement.", 1 },';
+		printf '%s\n' '+    { "Erich E. Hoover", "kernel32,ntdll: Add support for deleting junction points with RemoveDirectory.", 1 },';
+		printf '%s\n' '+    { "Erich E. Hoover", "ntdll: Add support for absolute symlink creation.", 1 },';
+		printf '%s\n' '+    { "Erich E. Hoover", "ntdll: Add support for reading absolute symlinks.", 1 },';
+		printf '%s\n' '+    { "Erich E. Hoover", "ntdll: Add support for deleting symlinks.", 1 },';
+		printf '%s\n' '+    { "Erich E. Hoover", "ntdll: Add support for relative symlink creation.", 1 },';
+		printf '%s\n' '+    { "Erich E. Hoover", "ntdll: Add support for reading relative symlinks.", 1 },';
+		printf '%s\n' '+    { "Erich E. Hoover", "ntdll: Add support for file symlinks.", 1 },';
+		printf '%s\n' '+    { "Erich E. Hoover", "ntdll: Allow creation of dangling reparse points to non-existent paths.", 1 },';
+		printf '%s\n' '+    { "Erich E. Hoover", "ntdll: Correctly report file symbolic links as files.", 1 },';
+		printf '%s\n' '+    { "Erich E. Hoover", "kernel32: Set error code when attempting to delete file symlinks as directories.", 1 },';
+		printf '%s\n' '+    { "Erich E. Hoover", "server: Properly handle file symlink deletion.", 1 },';
+		printf '%s\n' '+    { "Erich E. Hoover", "ntdll: Always report symbolic links as containing zero bytes.", 1 },';
+		printf '%s\n' '+    { "Erich E. Hoover", "ntdll: Find dangling symlinks quickly.", 1 },';
+	) >> "$patchlist"
+fi
+
 # Patchset ntdll-Manifest_Range
 # |
 # | This patchset fixes the following Wine bugs:
@@ -3745,6 +3858,21 @@ if test "$enable_ntdll_NtDevicePath" -eq 1; then
 	) >> "$patchlist"
 fi
 
+# Patchset ntdll-NtQueryEaFile
+# |
+# | This patchset has the following (direct or indirect) dependencies:
+# |   *	ntdll-DOS_Attributes, ntdll-Junction_Points
+# |
+# | Modified files:
+# |   *	dlls/ntdll/file.c, dlls/ntdll/tests/file.c
+# |
+if test "$enable_ntdll_NtQueryEaFile" -eq 1; then
+	patch_apply ntdll-NtQueryEaFile/0001-ntdll-Improve-stub-of-NtQueryEaFile.patch
+	(
+		printf '%s\n' '+    { "Sebastian Lackner", "ntdll: Improve stub of NtQueryEaFile.", 1 },';
+	) >> "$patchlist"
+fi
+
 # Patchset ntdll-NtQuerySection
 # |
 # | Modified files:
@@ -4408,6 +4536,84 @@ if test "$enable_server_FileEndOfFileInformation" -eq 1; then
 	) >> "$patchlist"
 fi
 
+# Patchset server-File_Permissions
+# |
+# | This patchset has the following (direct or indirect) dependencies:
+# |   *	ntdll-DOS_Attributes, ntdll-Junction_Points
+# |
+# | This patchset fixes the following Wine bugs:
+# |   *	[#44691] Improve mapping of DACL to file permissions
+# |
+# | Modified files:
+# |   *	dlls/advapi32/tests/security.c, dlls/ntdll/tests/file.c, server/fd.c, server/file.c
+# |
+if test "$enable_server_File_Permissions" -eq 1; then
+	patch_apply server-File_Permissions/0001-server-Improve-STATUS_CANNOT_DELETE-checks-for-direc.patch
+	patch_apply server-File_Permissions/0002-server-Allow-to-open-files-without-any-permission-bi.patch
+	patch_apply server-File_Permissions/0003-server-When-creating-new-directories-temporarily-giv.patch
+	patch_apply server-File_Permissions/0004-advapi32-tests-Add-tests-for-ACL-inheritance-in-Crea.patch
+	patch_apply server-File_Permissions/0005-advapi32-tests-Add-ACL-inheritance-tests-for-creatin.patch
+	patch_apply server-File_Permissions/0006-ntdll-tests-Added-tests-for-open-behaviour-on-readon.patch
+	patch_apply server-File_Permissions/0007-server-FILE_WRITE_ATTRIBUTES-should-succeed-for-read.patch
+	patch_apply server-File_Permissions/0008-server-Improve-mapping-of-DACL-to-file-permissions.patch
+	(
+		printf '%s\n' '+    { "Sebastian Lackner", "server: Improve STATUS_CANNOT_DELETE checks for directory case.", 1 },';
+		printf '%s\n' '+    { "Sebastian Lackner", "server: Allow to open files without any permission bits.", 2 },';
+		printf '%s\n' '+    { "Sebastian Lackner", "server: When creating new directories temporarily give read-permissions until they are opened.", 1 },';
+		printf '%s\n' '+    { "Sebastian Lackner", "advapi32/tests: Add tests for ACL inheritance in CreateDirectoryA.", 1 },';
+		printf '%s\n' '+    { "Sebastian Lackner", "advapi32/tests: Add ACL inheritance tests for creating subdirectories with NtCreateFile.", 1 },';
+		printf '%s\n' '+    { "Qian Hong", "ntdll/tests: Added tests for open behaviour on readonly files.", 1 },';
+		printf '%s\n' '+    { "Sebastian Lackner", "server: FILE_WRITE_ATTRIBUTES should succeed for readonly files.", 1 },';
+		printf '%s\n' '+    { "Sebastian Lackner", "server: Improve mapping of DACL to file permissions.", 1 },';
+	) >> "$patchlist"
+fi
+
+# Patchset server-Stored_ACLs
+# |
+# | This patchset has the following (direct or indirect) dependencies:
+# |   *	ntdll-DOS_Attributes, ntdll-Junction_Points, server-File_Permissions
+# |
+# | This patchset fixes the following Wine bugs:
+# |   *	[#33576] Support for stored file ACLs
+# |
+# | Modified files:
+# |   *	dlls/advapi32/tests/security.c, include/wine/port.h, server/change.c, server/file.c, server/file.h, server/object.c,
+# | 	server/object.h
+# |
+if test "$enable_server_Stored_ACLs" -eq 1; then
+	patch_apply server-Stored_ACLs/0001-server-Unify-the-storage-of-security-attributes-for-.patch
+	patch_apply server-Stored_ACLs/0002-server-Unify-the-retrieval-of-security-attributes-fo.patch
+	patch_apply server-Stored_ACLs/0003-server-Add-a-helper-function-set_sd_from_token_inter.patch
+	patch_apply server-Stored_ACLs/0004-server-Temporarily-store-the-full-security-descripto.patch
+	patch_apply server-Stored_ACLs/0005-server-Store-file-security-attributes-with-extended-.patch
+	patch_apply server-Stored_ACLs/0006-server-Convert-return-of-file-security-masks-with-ge.patch
+	patch_apply server-Stored_ACLs/0007-server-Retrieve-file-security-attributes-with-extend.patch
+	(
+		printf '%s\n' '+    { "Erich E. Hoover", "server: Unify the storage of security attributes for files and directories.", 7 },';
+		printf '%s\n' '+    { "Erich E. Hoover", "server: Unify the retrieval of security attributes for files and directories.", 7 },';
+		printf '%s\n' '+    { "Sebastian Lackner", "server: Add a helper function set_sd_from_token_internal to merge two security descriptors.", 1 },';
+		printf '%s\n' '+    { "Sebastian Lackner", "server: Temporarily store the full security descriptor for file objects.", 1 },';
+		printf '%s\n' '+    { "Erich E. Hoover", "server: Store file security attributes with extended file attributes.", 8 },';
+		printf '%s\n' '+    { "Erich E. Hoover", "server: Convert return of file security masks with generic access mappings.", 7 },';
+		printf '%s\n' '+    { "Erich E. Hoover", "server: Retrieve file security attributes with extended file attributes.", 7 },';
+	) >> "$patchlist"
+fi
+
+# Patchset server-Inherited_ACLs
+# |
+# | This patchset has the following (direct or indirect) dependencies:
+# |   *	ntdll-DOS_Attributes, ntdll-Junction_Points, server-File_Permissions, server-Stored_ACLs
+# |
+# | Modified files:
+# |   *	dlls/advapi32/tests/security.c, server/file.c
+# |
+if test "$enable_server_Inherited_ACLs" -eq 1; then
+	patch_apply server-Inherited_ACLs/0001-server-Inherit-security-attributes-from-parent-direc.patch
+	(
+		printf '%s\n' '+    { "Erich E. Hoover", "server: Inherit security attributes from parent directories on creation.", 7 },';
+	) >> "$patchlist"
+fi
+
 # Patchset server-Object_Types
 # |
 # | This patchset fixes the following Wine bugs:
diff --git a/patches/server-File_Permissions/definition b/patches/server-File_Permissions/definition
index 4d43f0da0..a699a6fd1 100644
--- a/patches/server-File_Permissions/definition
+++ b/patches/server-File_Permissions/definition
@@ -1,5 +1,3 @@
 Fixes: Allow to open files/directories without any access rights in order to query attributes
 Fixes: [44691] Improve mapping of DACL to file permissions
 Depends: ntdll-Junction_Points
-# Re-enable me when ntdll-Junction_Points gets re-enabled!
-Disabled: true
diff --git a/patches/server-Inherited_ACLs/definition b/patches/server-Inherited_ACLs/definition
index fb18b908a..4dd0f1e9c 100644
--- a/patches/server-Inherited_ACLs/definition
+++ b/patches/server-Inherited_ACLs/definition
@@ -1,4 +1,2 @@
 Depends: server-Stored_ACLs
 Fixes: Support for inherited file ACLs
-# Re-enable me when ntdll-Junction_Points gets re-enabled!
-Disabled: true
diff --git a/patches/server-Stored_ACLs/definition b/patches/server-Stored_ACLs/definition
index 6d80bbd68..03222c477 100644
--- a/patches/server-Stored_ACLs/definition
+++ b/patches/server-Stored_ACLs/definition
@@ -1,5 +1,3 @@
 Depends: ntdll-DOS_Attributes
 Depends: server-File_Permissions
 Fixes: [33576] Support for stored file ACLs
-# Re-enable me when ntdll-Junction_Points gets re-enabled!
-Disabled: true

diff --git a/patches/advapi32-Token_Integrity_Level/0006-ntdll-Add-function-to-create-new-tokens-for-elevatio.patch b/patches/advapi32-Token_Integrity_Level/0006-ntdll-Add-function-to-create-new-tokens-for-elevatio.patch
index d3e436cd7..41efe2b28 100644
--- a/patches/advapi32-Token_Integrity_Level/0006-ntdll-Add-function-to-create-new-tokens-for-elevatio.patch
+++ b/patches/advapi32-Token_Integrity_Level/0006-ntdll-Add-function-to-create-new-tokens-for-elevatio.patch
@@ -1,4 +1,4 @@
-From 5119eda2439a1fb81042f85ec76e5e5794ab4182 Mon Sep 17 00:00:00 2001
+From ed999d4430c1aca8f90f26670d3615cdaaab300d Mon Sep 17 00:00:00 2001
 From: =?UTF-8?q?Michael=20M=C3=BCller?= <michael@fds-team.de>
 Date: Sat, 5 Aug 2017 01:45:29 +0200
 Subject: [PATCH] ntdll: Add function to create new tokens for elevation
@@ -28,10 +28,10 @@ index 0d19e12768f..e313d5807b3 100644
  @ cdecl wine_get_version() NTDLL_wine_get_version
  @ cdecl wine_get_build_id() NTDLL_wine_get_build_id
 diff --git a/dlls/ntdll/ntdll_misc.h b/dlls/ntdll/ntdll_misc.h
-index 2de9553f5c4..84801ab2f25 100644
+index 47800db41b1..12e7b721cb5 100644
 --- a/dlls/ntdll/ntdll_misc.h
 +++ b/dlls/ntdll/ntdll_misc.h
-@@ -89,6 +89,9 @@ extern int __wine_main_argc;
+@@ -86,6 +86,9 @@ extern int __wine_main_argc;
  extern char **__wine_main_argv;
  extern WCHAR **__wine_main_wargv;
  
@@ -42,10 +42,10 @@ index 2de9553f5c4..84801ab2f25 100644
  extern const char *build_dir DECLSPEC_HIDDEN;
  extern const char *data_dir DECLSPEC_HIDDEN;
 diff --git a/dlls/ntdll/process.c b/dlls/ntdll/process.c
-index a14b24219fc..5d50a7a1363 100644
+index b1cc307d2ae..2e5fee216ef 100644
 --- a/dlls/ntdll/process.c
 +++ b/dlls/ntdll/process.c
-@@ -108,6 +108,24 @@ HANDLE CDECL __wine_make_process_system(void)
+@@ -85,6 +85,24 @@ HANDLE CDECL __wine_make_process_system(void)
      return ret;
  }
  
@@ -67,9 +67,9 @@ index a14b24219fc..5d50a7a1363 100644
 +    return ret;
 +}
 +
- ULONG_PTR get_system_affinity_mask(void)
- {
-     ULONG num_cpus = NtCurrentTeb()->Peb->NumberOfProcessors;
+ /******************************************************************************
+ *  NtQueryInformationProcess		[NTDLL.@]
+ *  ZwQueryInformationProcess		[NTDLL.@]
 diff --git a/server/protocol.def b/server/protocol.def
 index 6e0f309450a..7315f8ac4ea 100644
 --- a/server/protocol.def
diff --git a/patches/ntdll-APC_Performance/0001-ntdll-Reuse-old-async-fileio-structures-if-possible.patch b/patches/ntdll-APC_Performance/0001-ntdll-Reuse-old-async-fileio-structures-if-possible.patch
index 730732823..f50cc4b8d 100644
--- a/patches/ntdll-APC_Performance/0001-ntdll-Reuse-old-async-fileio-structures-if-possible.patch
+++ b/patches/ntdll-APC_Performance/0001-ntdll-Reuse-old-async-fileio-structures-if-possible.patch
@@ -1,4 +1,4 @@
-From b03e8c0e0097e3dfd2c30f1f53f13abaa731b858 Mon Sep 17 00:00:00 2001
+From 2fc74d8b5fd617e4b614e80c2eba9971a2dea00e Mon Sep 17 00:00:00 2001
 From: Sebastian Lackner <sebastian@fds-team.de>
 Date: Tue, 3 Mar 2015 03:39:12 +0100
 Subject: [PATCH] ntdll: Reuse old async fileio structures if possible.
@@ -7,14 +7,14 @@ This should speed up apps which heavily rely on async io stuff. Some
 tests (using the kernel and ntdll wine tests) show that it is very
 often possible to reuse old fileio structures.
 ---
- dlls/ntdll/file.c | 24 ++++++++++++++++++------
+ dlls/ntdll/unix/file.c | 24 ++++++++++++++++++------
  1 file changed, 18 insertions(+), 6 deletions(-)
 
-diff --git a/dlls/ntdll/file.c b/dlls/ntdll/file.c
-index 45660b47ec2e..083a413aac5f 100644
---- a/dlls/ntdll/file.c
-+++ b/dlls/ntdll/file.c
-@@ -387,6 +387,7 @@ struct async_fileio
+diff --git a/dlls/ntdll/unix/file.c b/dlls/ntdll/unix/file.c
+index ca6899b50f5..4c3f3dac465 100644
+--- a/dlls/ntdll/unix/file.c
++++ b/dlls/ntdll/unix/file.c
+@@ -4433,6 +4433,7 @@ struct async_fileio
  {
      async_callback_t    *callback; /* must be the first field */
      struct async_fileio *next;
@@ -22,10 +22,10 @@ index 45660b47ec2e..083a413aac5f 100644
      HANDLE               handle;
  };
  
-@@ -430,18 +431,29 @@ static struct async_fileio *alloc_fileio( DWORD size, async_callback_t callback,
+@@ -4484,18 +4485,29 @@ static void release_fileio( struct async_fileio *io )
+ static struct async_fileio *alloc_fileio( DWORD size, async_callback_t callback, HANDLE handle )
  {
      /* first free remaining previous fileinfos */
- 
 -    struct async_fileio *io = InterlockedExchangePointer( (void **)&fileio_freelist, NULL );
 +    struct async_fileio *old_io = InterlockedExchangePointer( (void **)&fileio_freelist, NULL );
 +    struct async_fileio *io = NULL;
@@ -59,5 +59,5 @@ index 45660b47ec2e..083a413aac5f 100644
      }
      return io;
 -- 
-2.26.2
+2.27.0
 
diff --git a/patches/ntdll-ApiSetMap/definition b/patches/ntdll-ApiSetMap/definition
index 3bf50f08e..042ee383c 100644
--- a/patches/ntdll-ApiSetMap/definition
+++ b/patches/ntdll-ApiSetMap/definition
@@ -1,2 +1 @@
 Fixes: [44658] Add dummy apiset to PEB struct
-Depends: ntdll-ThreadTime
diff --git a/patches/ntdll-Dealloc_Thread_Stack/0001-ntdll-Do-not-allow-to-allocate-thread-stack-for-curr.patch b/patches/ntdll-Dealloc_Thread_Stack/0001-ntdll-Do-not-allow-to-allocate-thread-stack-for-curr.patch
index ab2d0968c..dc21fef71 100644
--- a/patches/ntdll-Dealloc_Thread_Stack/0001-ntdll-Do-not-allow-to-allocate-thread-stack-for-curr.patch
+++ b/patches/ntdll-Dealloc_Thread_Stack/0001-ntdll-Do-not-allow-to-allocate-thread-stack-for-curr.patch
@@ -1,4 +1,4 @@
-From 7ecb980c3b1d3ee2b5ce2ad6419adf5782b85c7a Mon Sep 17 00:00:00 2001
+From d39ff3852f684bd9c0ca3c08d7e82e4e50be239d Mon Sep 17 00:00:00 2001
 From: Sebastian Lackner <sebastian@fds-team.de>
 Date: Fri, 21 Aug 2015 06:39:47 +0800
 Subject: [PATCH] ntdll: Do not allow to deallocate thread stack for current
@@ -11,10 +11,10 @@ Subject: [PATCH] ntdll: Do not allow to deallocate thread stack for current
  3 files changed, 14 insertions(+)
 
 diff --git a/dlls/ntdll/ntdll_misc.h b/dlls/ntdll/ntdll_misc.h
-index e9a3230e814..e7a74131c30 100644
+index 47800db41b1..be285013afc 100644
 --- a/dlls/ntdll/ntdll_misc.h
 +++ b/dlls/ntdll/ntdll_misc.h
-@@ -249,6 +249,7 @@ struct ntdll_thread_data
+@@ -154,6 +154,7 @@ struct ntdll_thread_data
      int                wait_fd[2];    /* fd for sleeping server requests */
      BOOL               wow64_redir;   /* Wow64 filesystem redirection flag */
      pthread_t          pthread_id;    /* pthread thread id */
@@ -23,22 +23,22 @@ index e9a3230e814..e7a74131c30 100644
  
  C_ASSERT( sizeof(struct ntdll_thread_data) <= sizeof(((TEB *)0)->GdiTebBatch) );
 diff --git a/dlls/ntdll/unix/unix_private.h b/dlls/ntdll/unix/unix_private.h
-index 8562efb7dd4..b34adf2f07f 100644
+index 9904ef7bfd5..232dea18bee 100644
 --- a/dlls/ntdll/unix/unix_private.h
 +++ b/dlls/ntdll/unix/unix_private.h
-@@ -41,6 +41,7 @@ struct ntdll_thread_data
+@@ -46,6 +46,7 @@ struct ntdll_thread_data
      int                wait_fd[2];    /* fd for sleeping server requests */
      BOOL               wow64_redir;   /* Wow64 filesystem redirection flag */
      pthread_t          pthread_id;    /* pthread thread id */
 +    void              *pthread_stack; /* pthread stack */
+     struct list        entry;         /* entry in TEB list */
  };
  
- C_ASSERT( sizeof(struct ntdll_thread_data) <= sizeof(((TEB *)0)->GdiTebBatch) );
 diff --git a/dlls/ntdll/unix/virtual.c b/dlls/ntdll/unix/virtual.c
-index 0346d0d9753..5e995338a08 100644
+index 6166507871c..0bb8cef6d3b 100644
 --- a/dlls/ntdll/unix/virtual.c
 +++ b/dlls/ntdll/unix/virtual.c
-@@ -2715,6 +2715,8 @@ NTSTATUS CDECL virtual_alloc_thread_stack( INITIAL_TEB *stack, SIZE_T reserve_si
+@@ -2772,6 +2772,8 @@ NTSTATUS CDECL virtual_alloc_thread_stack( INITIAL_TEB *stack, SIZE_T reserve_si
      stack->DeallocationStack = view->base;
      stack->StackBase = (char *)view->base + view->size;
      stack->StackLimit = (char *)view->base + 2 * page_size;
@@ -47,7 +47,7 @@ index 0346d0d9753..5e995338a08 100644
  done:
      server_leave_uninterrupted_section( &csVirtual, &sigset );
      return status;
-@@ -3374,6 +3376,16 @@ NTSTATUS WINAPI NtFreeVirtualMemory( HANDLE process, PVOID *addr_ptr, SIZE_T *si
+@@ -3521,6 +3523,16 @@ NTSTATUS WINAPI NtFreeVirtualMemory( HANDLE process, PVOID *addr_ptr, SIZE_T *si
          /* Free the pages */
  
          if (size || (base != view->base)) status = STATUS_INVALID_PARAMETER;
@@ -65,5 +65,5 @@ index 0346d0d9753..5e995338a08 100644
          {
              delete_view( view );
 -- 
-2.26.2
+2.27.0
 
diff --git a/patches/ntdll-DeviceType_Systemroot/0001-ntdll-Return-fake-device-type-when-systemroot-is-loc.patch b/patches/ntdll-DeviceType_Systemroot/0001-ntdll-Return-fake-device-type-when-systemroot-is-loc.patch
index 839ac7a7a..0dcd93e22 100644
--- a/patches/ntdll-DeviceType_Systemroot/0001-ntdll-Return-fake-device-type-when-systemroot-is-loc.patch
+++ b/patches/ntdll-DeviceType_Systemroot/0001-ntdll-Return-fake-device-type-when-systemroot-is-loc.patch
@@ -1,18 +1,18 @@
-From 28b58832717d9c6a8032a555b0fb1035ac9fd710 Mon Sep 17 00:00:00 2001
+From 6cf9c37c1e5b2211a61e8d61f97d46f89d86d753 Mon Sep 17 00:00:00 2001
 From: Sebastian Lackner <sebastian@fds-team.de>
 Date: Fri, 29 May 2015 19:57:22 +0200
-Subject: ntdll: Return fake device type when systemroot is located on virtual
- disk.
+Subject: [PATCH] ntdll: Return fake device type when systemroot is located on
+ virtual disk.
 
 ---
- dlls/ntdll/file.c | 27 +++++++++++++++++++++++++++
+ dlls/ntdll/unix/file.c | 27 +++++++++++++++++++++++++++
  1 file changed, 27 insertions(+)
 
-diff --git a/dlls/ntdll/file.c b/dlls/ntdll/file.c
-index d081750..45b61fb 100644
---- a/dlls/ntdll/file.c
-+++ b/dlls/ntdll/file.c
-@@ -3126,9 +3126,36 @@ NTSTATUS WINAPI NtQueryVolumeInformationFile( HANDLE handle, PIO_STATUS_BLOCK io
+diff --git a/dlls/ntdll/unix/file.c b/dlls/ntdll/unix/file.c
+index ca6899b50f5..4f35de4da97 100644
+--- a/dlls/ntdll/unix/file.c
++++ b/dlls/ntdll/unix/file.c
+@@ -6136,9 +6136,36 @@ NTSTATUS WINAPI NtQueryVolumeInformationFile( HANDLE handle, IO_STATUS_BLOCK *io
          else
          {
              FILE_FS_DEVICE_INFORMATION *info = buffer;
@@ -29,7 +29,7 @@ index d081750..45b61fb 100644
 +                    !server_get_unix_name( handle, &unix_name ))
 +                {
 +                    UNICODE_STRING nt_name;
-+                    if (!wine_unix_to_nt_file_name( &unix_name, &nt_name ))
++                    if (!unix_to_nt_file_name( &unix_name, &nt_name ))
 +                    {
 +                        WCHAR *buf = nt_name.Buffer;
 +                        if (nt_name.Length >= 6 * sizeof(WCHAR) &&
@@ -48,7 +48,7 @@ index d081750..45b61fb 100644
 +            }
          }
          break;
-     case FileFsAttributeInformation:
+ 
 -- 
-2.4.2
+2.27.0
 
diff --git a/patches/ntdll-FileFsFullSizeInformation/0001-ntdll-Add-support-for-FileFsFullSizeInformation-clas.patch b/patches/ntdll-FileFsFullSizeInformation/0001-ntdll-Add-support-for-FileFsFullSizeInformation-clas.patch
index 1cdd0f732..3b4e6f7b2 100644
--- a/patches/ntdll-FileFsFullSizeInformation/0001-ntdll-Add-support-for-FileFsFullSizeInformation-clas.patch
+++ b/patches/ntdll-FileFsFullSizeInformation/0001-ntdll-Add-support-for-FileFsFullSizeInformation-clas.patch
@@ -1,21 +1,58 @@
-From 8cdd24c7d9aa7a007ffe437efc8d22f4413e4187 Mon Sep 17 00:00:00 2001
+From f4f37eddd1eb809cf491ae3a0029f3850021d69d Mon Sep 17 00:00:00 2001
 From: Jianqiu Zhang <zhangjianqiu_133@yeah.net>
 Date: Fri, 17 Apr 2015 14:33:41 +0800
-Subject: ntdll: Add support for FileFsFullSizeInformation class in
+Subject: [PATCH] ntdll: Add support for FileFsFullSizeInformation class in
  NtQueryVolumeInformationFile(try 2)
 
 ---
- dlls/ntdll/file.c       | 54 ++++++++++++++++++++++++++++++++++++++++++++++++-
- dlls/ntdll/tests/file.c |  8 +-------
+ dlls/ntdll/tests/file.c |  8 +-----
+ dlls/ntdll/unix/file.c  | 54 ++++++++++++++++++++++++++++++++++++++++-
  2 files changed, 54 insertions(+), 8 deletions(-)
 
-diff --git a/dlls/ntdll/file.c b/dlls/ntdll/file.c
-index 1cb34d3545d..0785e482be1 100644
---- a/dlls/ntdll/file.c
-+++ b/dlls/ntdll/file.c
-@@ -3374,7 +3374,59 @@ NTSTATUS WINAPI NtQueryVolumeInformationFile( HANDLE handle, PIO_STATUS_BLOCK io
-         FIXME( "%p: control info not supported\n", handle );
+diff --git a/dlls/ntdll/tests/file.c b/dlls/ntdll/tests/file.c
+index 184b7cdad59..2ef8b451457 100644
+--- a/dlls/ntdll/tests/file.c
++++ b/dlls/ntdll/tests/file.c
+@@ -1265,7 +1265,7 @@ static void test_file_full_size_information(void)
+ 
+     /* Assume No Quota Settings configured on Wine Testbot */
+     res = pNtQueryVolumeInformationFile(h, &io, &ffsi, sizeof ffsi, FileFsFullSizeInformation);
+-    todo_wine ok(res == STATUS_SUCCESS, "cannot get attributes, res %x\n", res);
++    ok(res == STATUS_SUCCESS, "cannot get attributes, res %x\n", res);
+     res = pNtQueryVolumeInformationFile(h, &io, &fsi, sizeof fsi, FileFsSizeInformation);
+     ok(res == STATUS_SUCCESS, "cannot get attributes, res %x\n", res);
+ 
+@@ -1281,8 +1281,6 @@ static void test_file_full_size_information(void)
+     ok(fsi.BytesPerSector == 512, "[fsi] BytesPerSector expected 512, got %d\n",fsi.BytesPerSector);
+     ok(fsi.SectorsPerAllocationUnit == 8, "[fsi] SectorsPerAllocationUnit expected 8, got %d\n",fsi.SectorsPerAllocationUnit);
+ 
+-    todo_wine
+-    {
+     ok(ffsi.TotalAllocationUnits.QuadPart > 0,
+         "[ffsi] TotalAllocationUnits expected positive, got negative value 0x%s\n",
+         wine_dbgstr_longlong(ffsi.TotalAllocationUnits.QuadPart));
+@@ -1300,14 +1298,10 @@ static void test_file_full_size_information(void)
+         "[ffsi] CallerAvailableAllocationUnits error fsi:0x%s, ffsi: 0x%s\n",
+         wine_dbgstr_longlong(fsi.AvailableAllocationUnits.QuadPart),
+         wine_dbgstr_longlong(ffsi.CallerAvailableAllocationUnits.QuadPart));
+-    }
+ 
+     /* Assume file system is NTFS */
+-    todo_wine
+-    {
+     ok(ffsi.BytesPerSector == 512, "[ffsi] BytesPerSector expected 512, got %d\n",ffsi.BytesPerSector);
+     ok(ffsi.SectorsPerAllocationUnit == 8, "[ffsi] SectorsPerAllocationUnit expected 8, got %d\n",ffsi.SectorsPerAllocationUnit);
+-    }
+ 
+     CloseHandle( h );
+ }
+diff --git a/dlls/ntdll/unix/file.c b/dlls/ntdll/unix/file.c
+index ca6899b50f5..389470804ee 100644
+--- a/dlls/ntdll/unix/file.c
++++ b/dlls/ntdll/unix/file.c
+@@ -6271,7 +6271,59 @@ NTSTATUS WINAPI NtQueryVolumeInformationFile( HANDLE handle, IO_STATUS_BLOCK *io
          break;
+ 
      case FileFsFullSizeInformation:
 -        FIXME( "%p: full size info not supported\n", handle );
 +        if(length < sizeof(FILE_FS_FULL_SIZE_INFORMATION))
@@ -26,7 +63,7 @@ index 1cb34d3545d..0785e482be1 100644
 +
 +            if (fstat( fd, &st ) < 0)
 +            {
-+                io->u.Status = FILE_GetNtStatus();
++                io->u.Status = errno_to_status( errno );
 +                break;
 +            }
 +            if(!S_ISREG(st.st_mode) && !S_ISDIR(st.st_mode))
@@ -41,7 +78,7 @@ index 1cb34d3545d..0785e482be1 100644
 +
 +                if(fstatvfs( fd, &stfs ) < 0)
 +                {
-+                    io->u.Status = FILE_GetNtStatus();
++                    io->u.Status = errno_to_status( errno );
 +                    break;
 +                }
 +                bsize = stfs.f_frsize;
@@ -49,7 +86,7 @@ index 1cb34d3545d..0785e482be1 100644
 +                struct statfs stfs;
 +                if(fstatfs( fd, &stfs ) < 0)
 +                {
-+                    io->u.Status = FILE_GetNtStatus();
++                    io->u.Status = errno_to_status( errno );
 +                    break;
 +                }
 +                bsize = stfs.f_bsize;
@@ -72,45 +109,8 @@ index 1cb34d3545d..0785e482be1 100644
 +            }
 +        }
          break;
-     case FileFsObjectIdInformation:
-         FIXME( "%p: object id info not supported\n", handle );
-diff --git a/dlls/ntdll/tests/file.c b/dlls/ntdll/tests/file.c
-index 18b0e5d3921..aa0d8a47f5a 100644
---- a/dlls/ntdll/tests/file.c
-+++ b/dlls/ntdll/tests/file.c
-@@ -1117,7 +1117,7 @@ static void test_file_full_size_information(void)
- 
-     /* Assume No Quota Settings configured on Wine Testbot */
-     res = pNtQueryVolumeInformationFile(h, &io, &ffsi, sizeof ffsi, FileFsFullSizeInformation);
--    todo_wine ok(res == STATUS_SUCCESS, "cannot get attributes, res %x\n", res);
-+    ok(res == STATUS_SUCCESS, "cannot get attributes, res %x\n", res);
-     res = pNtQueryVolumeInformationFile(h, &io, &fsi, sizeof fsi, FileFsSizeInformation);
-     ok(res == STATUS_SUCCESS, "cannot get attributes, res %x\n", res);
- 
-@@ -1133,8 +1133,6 @@ static void test_file_full_size_information(void)
-     ok(fsi.BytesPerSector == 512, "[fsi] BytesPerSector expected 512, got %d\n",fsi.BytesPerSector);
-     ok(fsi.SectorsPerAllocationUnit == 8, "[fsi] SectorsPerAllocationUnit expected 8, got %d\n",fsi.SectorsPerAllocationUnit);
- 
--    todo_wine
--    {
-     ok(ffsi.TotalAllocationUnits.QuadPart > 0,
-         "[ffsi] TotalAllocationUnits expected positive, got negative value 0x%s\n",
-         wine_dbgstr_longlong(ffsi.TotalAllocationUnits.QuadPart));
-@@ -1152,14 +1150,10 @@ static void test_file_full_size_information(void)
-         "[ffsi] CallerAvailableAllocationUnits error fsi:0x%s, ffsi: 0x%s\n",
-         wine_dbgstr_longlong(fsi.AvailableAllocationUnits.QuadPart),
-         wine_dbgstr_longlong(ffsi.CallerAvailableAllocationUnits.QuadPart));
--    }
  
-     /* Assume file system is NTFS */
--    todo_wine
--    {
-     ok(ffsi.BytesPerSector == 512, "[ffsi] BytesPerSector expected 512, got %d\n",ffsi.BytesPerSector);
-     ok(ffsi.SectorsPerAllocationUnit == 8, "[ffsi] SectorsPerAllocationUnit expected 8, got %d\n",ffsi.SectorsPerAllocationUnit);
--    }
- 
-     CloseHandle( h );
- }
+     case FileFsObjectIdInformation:
 -- 
-2.13.1
+2.27.0
 
diff --git a/patches/ntdll-Hide_Wine_Exports/definition b/patches/ntdll-Hide_Wine_Exports/definition
index 52e3041b2..0b58aa388 100644
--- a/patches/ntdll-Hide_Wine_Exports/definition
+++ b/patches/ntdll-Hide_Wine_Exports/definition
@@ -1,3 +1,5 @@
 Fixes: [38656] Add support for hiding wine version information from applications
 Depends: ntdll-ThreadTime
 Depends: advapi32-Token_Integrity_Level
+# Re-enable me when ntdll-ThreadTime gets re-enabled!
+Disabled: true
diff --git a/patches/ntdll-Status_Mapping/0001-ntdll-Return-STATUS_INVALID_DEVICE_REQUEST-when-tryi.patch b/patches/ntdll-Status_Mapping/0001-ntdll-Return-STATUS_INVALID_DEVICE_REQUEST-when-tryi.patch
index f310a2ac5..141319d83 100644
--- a/patches/ntdll-Status_Mapping/0001-ntdll-Return-STATUS_INVALID_DEVICE_REQUEST-when-tryi.patch
+++ b/patches/ntdll-Status_Mapping/0001-ntdll-Return-STATUS_INVALID_DEVICE_REQUEST-when-tryi.patch
@@ -1,32 +1,19 @@
-From 3e4e21b4e66f85143a029374c58a66ae54f792e8 Mon Sep 17 00:00:00 2001
+From fda39199958fc169372b7dfee2077e2d8ecfa350 Mon Sep 17 00:00:00 2001
 From: Sebastian Lackner <sebastian@fds-team.de>
 Date: Sun, 13 Sep 2015 17:16:07 +0200
-Subject: ntdll: Return STATUS_INVALID_DEVICE_REQUEST when trying to call
- NtReadFile on directory.
+Subject: [PATCH] ntdll: Return STATUS_INVALID_DEVICE_REQUEST when trying to
+ call NtReadFile on directory.
 
 ---
- dlls/ntdll/file.c       | 2 +-
  dlls/ntdll/tests/file.c | 1 -
+ dlls/ntdll/unix/file.c  | 2 +-
  2 files changed, 1 insertion(+), 2 deletions(-)
 
-diff --git a/dlls/ntdll/file.c b/dlls/ntdll/file.c
-index 8f89ba5..67a13b2 100644
---- a/dlls/ntdll/file.c
-+++ b/dlls/ntdll/file.c
-@@ -459,7 +459,7 @@ NTSTATUS FILE_GetNtStatus(void)
-     case EACCES:    return STATUS_ACCESS_DENIED;
-     case ENOTDIR:   return STATUS_OBJECT_PATH_NOT_FOUND;
-     case ENOENT:    return STATUS_OBJECT_NAME_NOT_FOUND;
--    case EISDIR:    return STATUS_FILE_IS_A_DIRECTORY;
-+    case EISDIR:    return STATUS_INVALID_DEVICE_REQUEST;
-     case EMFILE:
-     case ENFILE:    return STATUS_TOO_MANY_OPENED_FILES;
-     case EINVAL:    return STATUS_INVALID_PARAMETER;
 diff --git a/dlls/ntdll/tests/file.c b/dlls/ntdll/tests/file.c
-index b8f1847..63dd4f9 100644
+index 184b7cdad59..6f830da85a2 100644
 --- a/dlls/ntdll/tests/file.c
 +++ b/dlls/ntdll/tests/file.c
-@@ -206,7 +206,6 @@ static void create_file_test(void)
+@@ -171,7 +171,6 @@ static void create_file_test(void)
      U(io).Status = 0xdeadbeef;
      offset.QuadPart = 0;
      status = pNtReadFile( dir, NULL, NULL, NULL, &io, buf, sizeof(buf), &offset, NULL );
@@ -34,6 +21,19 @@ index b8f1847..63dd4f9 100644
      ok( status == STATUS_INVALID_DEVICE_REQUEST || status == STATUS_PENDING, "NtReadFile error %08x\n", status );
      if (status == STATUS_PENDING)
      {
+diff --git a/dlls/ntdll/unix/file.c b/dlls/ntdll/unix/file.c
+index ca6899b50f5..d160f1a050e 100644
+--- a/dlls/ntdll/unix/file.c
++++ b/dlls/ntdll/unix/file.c
+@@ -348,7 +348,7 @@ NTSTATUS errno_to_status( int err )
+     case EACCES:    return STATUS_ACCESS_DENIED;
+     case ENOTDIR:   return STATUS_OBJECT_PATH_NOT_FOUND;
+     case ENOENT:    return STATUS_OBJECT_NAME_NOT_FOUND;
+-    case EISDIR:    return STATUS_FILE_IS_A_DIRECTORY;
++    case EISDIR:    return STATUS_INVALID_DEVICE_REQUEST;
+     case EMFILE:
+     case ENFILE:    return STATUS_TOO_MANY_OPENED_FILES;
+     case EINVAL:    return STATUS_INVALID_PARAMETER;
 -- 
-2.6.0
+2.27.0
 
diff --git a/patches/ntdll-Syscall_Emulation/0001-ntdll-Support-x86_64-syscall-emulation.patch b/patches/ntdll-Syscall_Emulation/0001-ntdll-Support-x86_64-syscall-emulation.patch
index 0a88ded4c..bd1c98819 100644
--- a/patches/ntdll-Syscall_Emulation/0001-ntdll-Support-x86_64-syscall-emulation.patch
+++ b/patches/ntdll-Syscall_Emulation/0001-ntdll-Support-x86_64-syscall-emulation.patch
@@ -1,4 +1,4 @@
-From a88ac4ac286c6c345efc3722d6fd4cc5b6ad29ca Mon Sep 17 00:00:00 2001
+From 4236b5607067148efa76cbe090d9efd58b297e32 Mon Sep 17 00:00:00 2001
 From: Paul Gofman <pgofman@codeweavers.com>
 Date: Mon, 30 Dec 2019 13:27:53 +0300
 Subject: [PATCH] ntdll: Support x86_64 syscall emulation.
@@ -14,15 +14,15 @@ is used for trapping syscalls.
  dlls/ntdll/unix/signal_x86_64.c | 105 ++++++++++++++++++++++++++++++++
  dlls/ntdll/unix/thread.c        |   8 ++-
  dlls/ntdll/unix/unix_private.h  |   6 +-
- dlls/ntdll/unixlib.h            |   5 +-
+ dlls/ntdll/unixlib.h            |   3 +-
  tools/winebuild/spec32.c        |   9 ++-
- 7 files changed, 135 insertions(+), 7 deletions(-)
+ 7 files changed, 134 insertions(+), 6 deletions(-)
 
 diff --git a/configure.ac b/configure.ac
-index d57b0713856..7bd3da1e175 100644
+index 9c5f76669df..f245c2f1507 100644
 --- a/configure.ac
 +++ b/configure.ac
-@@ -474,6 +474,7 @@ AC_CHECK_HEADERS(\
+@@ -464,6 +464,7 @@ AC_CHECK_HEADERS(\
  	linux/joystick.h \
  	linux/major.h \
  	linux/param.h \
@@ -31,10 +31,10 @@ index d57b0713856..7bd3da1e175 100644
  	linux/types.h \
  	linux/ucdrom.h \
 diff --git a/dlls/ntdll/thread.c b/dlls/ntdll/thread.c
-index 18db4fd4780..e4f0293ab5a 100644
+index 557747062e4..0d65546588f 100644
 --- a/dlls/ntdll/thread.c
 +++ b/dlls/ntdll/thread.c
-@@ -229,6 +229,12 @@ void __wine_syscall_dispatcher( void )
+@@ -103,6 +103,12 @@ void __wine_syscall_dispatcher( void )
  }
  #endif
  
@@ -47,7 +47,7 @@ index 18db4fd4780..e4f0293ab5a 100644
  void *WINAPI __wine_fakedll_dispatcher( const char *module, ULONG ord )
  {
      UNICODE_STRING name;
-@@ -272,7 +278,7 @@ void *WINAPI __wine_fakedll_dispatcher( const char *module, ULONG ord )
+@@ -146,7 +152,7 @@ void *WINAPI __wine_fakedll_dispatcher( const char *module, ULONG ord )
  TEB *thread_init( SIZE_T *info_size, BOOL *suspend )
  {
      TEB *teb = unix_funcs->init_threading( &nb_threads, &__wine_ldt_copy, info_size, suspend, &server_cpus,
@@ -57,7 +57,7 @@ index 18db4fd4780..e4f0293ab5a 100644
  
      peb = teb->Peb;
 diff --git a/dlls/ntdll/unix/signal_x86_64.c b/dlls/ntdll/unix/signal_x86_64.c
-index 1d1b879310e..c8a8d1d1d33 100644
+index 12ea74f7f5c..26097702985 100644
 --- a/dlls/ntdll/unix/signal_x86_64.c
 +++ b/dlls/ntdll/unix/signal_x86_64.c
 @@ -28,6 +28,7 @@
@@ -194,7 +194,7 @@ index 1d1b879310e..c8a8d1d1d33 100644
  
   error:
 diff --git a/dlls/ntdll/unix/thread.c b/dlls/ntdll/unix/thread.c
-index 0279690806c..6969a528eeb 100644
+index 196dc2d8c4e..dae792bd78b 100644
 --- a/dlls/ntdll/unix/thread.c
 +++ b/dlls/ntdll/unix/thread.c
 @@ -58,6 +58,9 @@ WINE_DEFAULT_DEBUG_CHANNEL(seh);
@@ -217,7 +217,7 @@ index 0279690806c..6969a528eeb 100644
  {
      TEB *teb;
      SIZE_T info_size;
-@@ -95,6 +99,8 @@ TEB * CDECL init_threading( int *nb_threads_ptr, struct ldt_copy **ldt_copy, SIZ
+@@ -94,6 +98,8 @@ TEB * CDECL init_threading( int *nb_threads_ptr, struct ldt_copy **ldt_copy, SIZ
      *ldt_copy = &__wine_ldt_copy;
  #endif
      nb_threads = nb_threads_ptr;
@@ -227,10 +227,10 @@ index 0279690806c..6969a528eeb 100644
      teb = virtual_alloc_first_teb();
      teb->WOW32Reserved = syscall_handler;
 diff --git a/dlls/ntdll/unix/unix_private.h b/dlls/ntdll/unix/unix_private.h
-index 19196dbb296..e99e89864c2 100644
+index df508e569f9..bcb80ddab85 100644
 --- a/dlls/ntdll/unix/unix_private.h
 +++ b/dlls/ntdll/unix/unix_private.h
-@@ -108,7 +108,8 @@ extern void CDECL server_release_fd( HANDLE handle, int unix_fd ) DECLSPEC_HIDDE
+@@ -113,7 +113,8 @@ extern void CDECL server_release_fd( HANDLE handle, int unix_fd ) DECLSPEC_HIDDE
  extern void CDECL server_init_process_done( void *relay ) DECLSPEC_HIDDEN;
  extern TEB * CDECL init_threading( int *nb_threads_ptr, struct ldt_copy **ldt_copy, SIZE_T *size,
                                     BOOL *suspend, unsigned int *cpus, BOOL *wow64,
@@ -239,10 +239,10 @@ index 19196dbb296..e99e89864c2 100644
 +                                   unsigned int syscall_count ) DECLSPEC_HIDDEN;
  extern void CDECL DECLSPEC_NORETURN exit_thread( int status ) DECLSPEC_HIDDEN;
  extern void CDECL DECLSPEC_NORETURN exit_process( int status ) DECLSPEC_HIDDEN;
- extern NTSTATUS CDECL get_thread_ldt_entry( HANDLE handle, void *data, ULONG len, ULONG *ret_len ) DECLSPEC_HIDDEN;
-@@ -140,6 +141,9 @@ extern char **build_envp( const WCHAR *envW ) DECLSPEC_HIDDEN;
- extern NTSTATUS exec_wineloader( char **argv, int socketfd, int is_child_64bit,
-                                  ULONGLONG res_start, ULONGLONG res_end ) DECLSPEC_HIDDEN;
+ extern NTSTATUS CDECL exec_process( UNICODE_STRING *path, UNICODE_STRING *cmdline, NTSTATUS status ) DECLSPEC_HIDDEN;
+@@ -146,6 +147,9 @@ extern NTSTATUS exec_wineloader( char **argv, int socketfd, int is_child_64bit,
+ extern void start_server( BOOL debug ) DECLSPEC_HIDDEN;
+ extern ULONG_PTR get_image_address(void) DECLSPEC_HIDDEN;
  
 +extern unsigned int __wine_nb_syscalls DECLSPEC_HIDDEN;
 +extern void *__wine_syscall_dispatcher DECLSPEC_HIDDEN;
@@ -251,19 +251,10 @@ index 19196dbb296..e99e89864c2 100644
  extern void server_enter_uninterrupted_section( RTL_CRITICAL_SECTION *cs, sigset_t *sigset ) DECLSPEC_HIDDEN;
  extern void server_leave_uninterrupted_section( RTL_CRITICAL_SECTION *cs, sigset_t *sigset ) DECLSPEC_HIDDEN;
 diff --git a/dlls/ntdll/unixlib.h b/dlls/ntdll/unixlib.h
-index b09f4942f05..b952af4596a 100644
+index a9803478a37..e3bb8f7ce8e 100644
 --- a/dlls/ntdll/unixlib.h
 +++ b/dlls/ntdll/unixlib.h
-@@ -28,7 +28,7 @@ struct ldt_copy;
- struct msghdr;
- 
- /* increment this when you change the function table */
--#define NTDLL_UNIXLIB_VERSION 53
-+#define NTDLL_UNIXLIB_VERSION 54
- 
- struct unix_funcs
- {
-@@ -281,7 +281,8 @@ struct unix_funcs
+@@ -302,7 +302,8 @@ struct unix_funcs
  
      /* thread/process functions */
      TEB *         (CDECL *init_threading)( int *nb_threads_ptr, struct ldt_copy **ldt_copy, SIZE_T *size,
@@ -272,7 +263,7 @@ index b09f4942f05..b952af4596a 100644
 +                                           void *syscall_handler, unsigned int syscall_count );
      void          (CDECL *exit_thread)( int status );
      void          (CDECL *exit_process)( int status );
-     NTSTATUS      (CDECL *get_thread_ldt_entry)( HANDLE handle, void *data, ULONG len, ULONG *ret_len );
+     NTSTATUS      (CDECL *exec_process)( UNICODE_STRING *path, UNICODE_STRING *cmdline, NTSTATUS status );
 diff --git a/tools/winebuild/spec32.c b/tools/winebuild/spec32.c
 index 9cc4698d0d7..c572fe49923 100644
 --- a/tools/winebuild/spec32.c
diff --git a/patches/ntdll-SystemModuleInformation/0002-ntdll-Return-ntdll.dll-as-the-first-entry-for-System.patch b/patches/ntdll-SystemModuleInformation/0002-ntdll-Return-ntdll.dll-as-the-first-entry-for-System.patch
index b7bf86c5b..1b4f25b04 100644
--- a/patches/ntdll-SystemModuleInformation/0002-ntdll-Return-ntdll.dll-as-the-first-entry-for-System.patch
+++ b/patches/ntdll-SystemModuleInformation/0002-ntdll-Return-ntdll.dll-as-the-first-entry-for-System.patch
@@ -1,4 +1,4 @@
-From 511be7951f851cda2b2119a88b7f1895598a7165 Mon Sep 17 00:00:00 2001
+From 77f0bfa7bbd70231a661397236124088af1ad76f Mon Sep 17 00:00:00 2001
 From: Andrew Wesie <awesie@gmail.com>
 Date: Fri, 12 Apr 2019 20:04:03 -0500
 Subject: [PATCH] ntdll: Return ntdll.dll as the first entry for
@@ -9,11 +9,11 @@ Subject: [PATCH] ntdll: Return ntdll.dll as the first entry for
  1 file changed, 28 insertions(+), 1 deletion(-)
 
 diff --git a/dlls/ntdll/nt.c b/dlls/ntdll/nt.c
-index 44ffef6439b..c47219b1d33 100644
+index 54626307ede..77db670623c 100644
 --- a/dlls/ntdll/nt.c
 +++ b/dlls/ntdll/nt.c
-@@ -2665,6 +2665,33 @@ static BOOL read_process_memory_stats(int unix_pid, VM_COUNTERS *pvmi)
-     return ret;
+@@ -2493,6 +2493,33 @@ BOOLEAN WINAPI RtlIsProcessorFeaturePresent( UINT feature )
+     return feature < PROCESSOR_FEATURE_MAX && user_shared_data->ProcessorFeatures[feature];
  }
  
 +static void get_ntdll_system_module(SYSTEM_MODULE *sm)
@@ -46,7 +46,7 @@ index 44ffef6439b..c47219b1d33 100644
  /******************************************************************************
   * NtQuerySystemInformation [NTDLL.@]
   * ZwQuerySystemInformation [NTDLL.@]
-@@ -3015,7 +3042,7 @@ NTSTATUS WINAPI NtQuerySystemInformation(
+@@ -2829,7 +2856,7 @@ NTSTATUS WINAPI NtQuerySystemInformation(
  
              FIXME("returning fake driver list\n");
              smi->ModulesCount = 1;
 
diff --git a/patches/ntdll-ThreadTime/0006-ntdll-Fill-process-virtual-memory-counters-in-NtQuer.patch b/patches/ntdll-ThreadTime/0006-ntdll-Fill-process-virtual-memory-counters-in-NtQuer.patch
index cd1965ced..829d8f4dd 100644
--- a/patches/ntdll-ThreadTime/0006-ntdll-Fill-process-virtual-memory-counters-in-NtQuer.patch
+++ b/patches/ntdll-ThreadTime/0006-ntdll-Fill-process-virtual-memory-counters-in-NtQuer.patch
@@ -1,4 +1,4 @@
-From 3d5a92cbec870c2b129668b455012bf5b2693ccd Mon Sep 17 00:00:00 2001
+From ee29bbfa7e10de295db39ab6b89f2175d00692c5 Mon Sep 17 00:00:00 2001
 From: =?UTF-8?q?Michael=20M=C3=BCller?= <michael@fds-team.de>
 Date: Thu, 9 Mar 2017 22:56:45 +0100
 Subject: [PATCH] ntdll: Fill process virtual memory counters in
@@ -6,61 +6,17 @@ Subject: [PATCH] ntdll: Fill process virtual memory counters in
 
 FIXME: fill_VM_COUNTERS now uses a different method ... which one is better?
 ---
- dlls/ntdll/nt.c           | 41 +++++++++++++++++++++++++++++++++++++++
- dlls/ntdll/thread.c       |  1 -
- dlls/ntdll/unix/process.c | 39 ++++++++++++++++++++++++++++++++++++-
- 3 files changed, 79 insertions(+), 2 deletions(-)
+ dlls/ntdll/nt.c         |  3 +++
+ dlls/ntdll/ntdll_misc.h |  1 +
+ dlls/ntdll/process.c    |  2 +-
+ dlls/ntdll/thread.c     | 36 ++++++++++++++++++++++++++++++++++++
+ 4 files changed, 41 insertions(+), 1 deletion(-)
 
 diff --git a/dlls/ntdll/nt.c b/dlls/ntdll/nt.c
-index c1c7a126daf..8b450082ada 100644
+index cbb7937631d..bb078c1aa21 100644
 --- a/dlls/ntdll/nt.c
 +++ b/dlls/ntdll/nt.c
-@@ -2627,6 +2627,44 @@ BOOLEAN WINAPI RtlIsProcessorFeaturePresent( UINT feature )
-     return feature < PROCESSOR_FEATURE_MAX && user_shared_data->ProcessorFeatures[feature];
- }
- 
-+/* Remove once NtQuerySystemInformation is moved to unix directory */
-+static BOOL read_process_memory_stats(int unix_pid, VM_COUNTERS *pvmi)
-+{
-+    BOOL ret = FALSE;
-+#ifdef __linux__
-+    unsigned long size, resident, shared, trs, drs, lrs, dt;
-+    char buf[512];
-+    FILE *fp;
-+
-+    sprintf( buf, "/proc/%u/statm", unix_pid );
-+    if ((fp = fopen( buf, "r" )))
-+    {
-+        if (fscanf( fp, "%lu %lu %lu %lu %lu %lu %lu",
-+            &size, &resident, &shared, &trs, &drs, &lrs, &dt ) == 7)
-+        {
-+            pvmi->VirtualSize = size * page_size;
-+            pvmi->WorkingSetSize = resident * page_size;
-+            pvmi->PrivatePageCount = size - shared;
-+
-+            /* these values are not available through /proc/pid/statm */
-+            pvmi->PeakVirtualSize = pvmi->VirtualSize;
-+            pvmi->PageFaultCount = 0;
-+            pvmi->PeakWorkingSetSize = pvmi->WorkingSetSize;
-+            pvmi->QuotaPagedPoolUsage = pvmi->VirtualSize;
-+            pvmi->QuotaPeakPagedPoolUsage = pvmi->QuotaPagedPoolUsage;
-+            pvmi->QuotaPeakNonPagedPoolUsage = 0;
-+            pvmi->QuotaNonPagedPoolUsage = 0;
-+            pvmi->PagefileUsage = 0;
-+            pvmi->PeakPagefileUsage = 0;
-+
-+            ret = TRUE;
-+        }
-+        fclose( fp );
-+    }
-+#endif
-+    return ret;
-+}
-+
- /******************************************************************************
-  * NtQuerySystemInformation [NTDLL.@]
-  * ZwQuerySystemInformation [NTDLL.@]
-@@ -2784,8 +2822,11 @@ NTSTATUS WINAPI NtQuerySystemInformation(
+@@ -2686,8 +2686,11 @@ NTSTATUS WINAPI NtQuerySystemInformation(
                              /* spi->ti will be set later on */
  
                              if (reply->unix_pid != -1)
@@ -72,27 +28,40 @@ index c1c7a126daf..8b450082ada 100644
                              unix_pid = reply->unix_pid;
                          }
                          len += procstructlen;
+diff --git a/dlls/ntdll/ntdll_misc.h b/dlls/ntdll/ntdll_misc.h
+index 6e77694d87b..d725a678246 100644
+--- a/dlls/ntdll/ntdll_misc.h
++++ b/dlls/ntdll/ntdll_misc.h
+@@ -248,6 +248,7 @@ void     WINAPI LdrInitializeThunk(CONTEXT*,void**,ULONG_PTR,ULONG_PTR);
+ /* process / thread time */
+ extern BOOL read_process_time(int unix_pid, int unix_tid, unsigned long clk_tck,
+                               LARGE_INTEGER *kernel, LARGE_INTEGER *user) DECLSPEC_HIDDEN;
++extern BOOL read_process_memory_stats(int unix_pid, VM_COUNTERS *pvmi) DECLSPEC_HIDDEN;
+ 
+ /* string functions */
+ int    __cdecl NTDLL_tolower( int c );
+diff --git a/dlls/ntdll/process.c b/dlls/ntdll/process.c
+index 35937ce6026..b4f2dbc8160 100644
+--- a/dlls/ntdll/process.c
++++ b/dlls/ntdll/process.c
+@@ -192,7 +192,7 @@ static void fill_VM_COUNTERS(VM_COUNTERS* pvmi)
+ 
+ static void fill_VM_COUNTERS(VM_COUNTERS* pvmi)
+ {
+-    /* FIXME : real data */
++    read_process_memory_stats(getpid(), pvmi);
+ }
+ 
+ #endif
 diff --git a/dlls/ntdll/thread.c b/dlls/ntdll/thread.c
-index 29a9c19b923..320e63416cc 100644
+index 14198d77b7b..8ae8251f975 100644
 --- a/dlls/ntdll/thread.c
 +++ b/dlls/ntdll/thread.c
-@@ -373,7 +373,6 @@ NTSTATUS WINAPI NtCreateThreadEx( HANDLE *handle_ptr, ACCESS_MASK access, OBJECT
+@@ -381,6 +381,42 @@ NTSTATUS WINAPI NtCreateThreadEx( HANDLE *handle_ptr, ACCESS_MASK access, OBJECT
                                           flags, zero_bits, stack_commit, stack_reserve, attr_list );
  }
  
--
- /***********************************************************************
-  *              RtlCreateUserThread   (NTDLL.@)
-  */
-diff --git a/dlls/ntdll/unix/process.c b/dlls/ntdll/unix/process.c
-index 379a0036b63..210006f4c23 100644
---- a/dlls/ntdll/unix/process.c
-+++ b/dlls/ntdll/unix/process.c
-@@ -989,6 +989,43 @@ static void fill_VM_COUNTERS(VM_COUNTERS* pvmi)
- #endif
- }
- 
-+static BOOL read_process_memory_stats(int unix_pid, VM_COUNTERS *pvmi)
++BOOL read_process_memory_stats(int unix_pid, VM_COUNTERS *pvmi)
 +{
 +    BOOL ret = FALSE;
 +#ifdef __linux__
@@ -128,19 +97,9 @@ index 379a0036b63..210006f4c23 100644
 +#endif
 +    return ret;
 +}
-+
- #elif defined(linux)
- 
- static void fill_VM_COUNTERS(VM_COUNTERS* pvmi)
-@@ -1024,7 +1061,7 @@ static void fill_VM_COUNTERS(VM_COUNTERS* pvmi)
- 
- static void fill_VM_COUNTERS(VM_COUNTERS* pvmi)
- {
--    /* FIXME : real data */
-+    read_process_memory_stats(getpid(), pvmi);
- }
  
- #endif
+ /***********************************************************************
+  *              RtlCreateUserThread   (NTDLL.@)
 -- 
-2.27.0
+2.26.2
 
diff --git a/patches/ntdll-ThreadTime/definition b/patches/ntdll-ThreadTime/definition
index 680df20ae..7693a411a 100644
--- a/patches/ntdll-ThreadTime/definition
+++ b/patches/ntdll-ThreadTime/definition
@@ -1,3 +1,5 @@
 Fixes: [20230] Return correct values for GetThreadTimes function
 Fixes: Return correct thread creation time in SystemProcessInformation
 Fixes: Fill process virtual memory counters in NtQuerySystemInformation
+# Split awkwardly between .so and .dll parts (NtQuerySystemInformation vs NtQueryProcess/ThreadInformation).
+Disabled: true
diff --git a/patches/patchinstall.sh b/patches/patchinstall.sh
index 6b672bd48..092f6855b 100755
--- a/patches/patchinstall.sh
+++ b/patches/patchinstall.sh
@@ -178,7 +178,6 @@ patch_enable_all ()
 	enable_ntdll_ForceBottomUpAlloc="$1"
 	enable_ntdll_HashLinks="$1"
 	enable_ntdll_Heap_Improvements="$1"
-	enable_ntdll_Hide_Wine_Exports="$1"
 	enable_ntdll_Interrupt_0x2e="$1"
 	enable_ntdll_Manifest_Range="$1"
 	enable_ntdll_NtAccessCheck="$1"
@@ -198,7 +197,6 @@ patch_enable_all ()
 	enable_ntdll_SystemInterruptInformation="$1"
 	enable_ntdll_SystemModuleInformation="$1"
 	enable_ntdll_SystemRoot_Symlink="$1"
-	enable_ntdll_ThreadTime="$1"
 	enable_ntdll_Threading="$1"
 	enable_ntdll_WRITECOPY="$1"
 	enable_ntdll_Zero_mod_name="$1"
@@ -228,7 +226,6 @@ patch_enable_all ()
 	enable_server_FileEndOfFileInformation="$1"
 	enable_server_Object_Types="$1"
 	enable_server_PeekMessage="$1"
-	enable_server_Realtime_Priority="$1"
 	enable_server_Registry_Notifications="$1"
 	enable_server_Signal_Thread="$1"
 	enable_setupapi_DiskSpaceList="$1"
@@ -627,9 +624,6 @@ patch_enable ()
 		ntdll-Heap_Improvements)
 			enable_ntdll_Heap_Improvements="$2"
 			;;
-		ntdll-Hide_Wine_Exports)
-			enable_ntdll_Hide_Wine_Exports="$2"
-			;;
 		ntdll-Interrupt-0x2e)
 			enable_ntdll_Interrupt_0x2e="$2"
 			;;
@@ -687,9 +681,6 @@ patch_enable ()
 		ntdll-ThreadHideFromDebugger)
 			enable_ntdll_ThreadHideFromDebugger="$2"
 			;;
-		ntdll-ThreadTime)
-			enable_ntdll_ThreadTime="$2"
-			;;
 		ntdll-Threading)
 			enable_ntdll_Threading="$2"
 			;;
@@ -777,9 +768,6 @@ patch_enable ()
 		server-PeekMessage)
 			enable_server_PeekMessage="$2"
 			;;
-		server-Realtime_Priority)
-			enable_server_Realtime_Priority="$2"
-			;;
 		server-Registry_Notifications)
 			enable_server_Registry_Notifications="$2"
 			;;
@@ -1581,13 +1569,6 @@ if test "$enable_shell32_Progress_Dialog" -eq 1; then
 	enable_shell32_SHFileOperation_Move=1
 fi
 
-if test "$enable_server_Realtime_Priority" -eq 1; then
-	if test "$enable_ntdll_ThreadTime" -gt 1; then
-		abort "Patchset ntdll-ThreadTime disabled, but server-Realtime_Priority depends on that."
-	fi
-	enable_ntdll_ThreadTime=1
-fi
-
 if test "$enable_server_Desktop_Refcount" -eq 1; then
 	if test "$enable_ws2_32_WSACleanup" -gt 1; then
 		abort "Patchset ws2_32-WSACleanup disabled, but server-Desktop_Refcount depends on that."
@@ -1648,17 +1629,6 @@ if test "$enable_ntdll_NtDevicePath" -eq 1; then
 	enable_ntdll_Pipe_SpecialCharacters=1
 fi
 
-if test "$enable_ntdll_Hide_Wine_Exports" -eq 1; then
-	if test "$enable_advapi32_Token_Integrity_Level" -gt 1; then
-		abort "Patchset advapi32-Token_Integrity_Level disabled, but ntdll-Hide_Wine_Exports depends on that."
-	fi
-	if test "$enable_ntdll_ThreadTime" -gt 1; then
-		abort "Patchset ntdll-ThreadTime disabled, but ntdll-Hide_Wine_Exports depends on that."
-	fi
-	enable_advapi32_Token_Integrity_Level=1
-	enable_ntdll_ThreadTime=1
-fi
-
 if test "$enable_ntdll_Builtin_Prot" -eq 1; then
 	if test "$enable_ntdll_WRITECOPY" -gt 1; then
 		abort "Patchset ntdll-WRITECOPY disabled, but ntdll-Builtin_Prot depends on that."
@@ -1666,13 +1636,6 @@ if test "$enable_ntdll_Builtin_Prot" -eq 1; then
 	enable_ntdll_WRITECOPY=1
 fi
 
-if test "$enable_ntdll_ApiSetMap" -eq 1; then
-	if test "$enable_ntdll_ThreadTime" -gt 1; then
-		abort "Patchset ntdll-ThreadTime disabled, but ntdll-ApiSetMap depends on that."
-	fi
-	enable_ntdll_ThreadTime=1
-fi
-
 if test "$enable_kernel32_Processor_Group" -eq 1; then
 	if test "$enable_api_ms_win_Stub_DLLs" -gt 1; then
 		abort "Patchset api-ms-win-Stub_DLLs disabled, but kernel32-Processor_Group depends on that."
@@ -3428,7 +3383,7 @@ fi
 # Patchset ntdll-APC_Performance
 # |
 # | Modified files:
-# |   *	dlls/ntdll/file.c
+# |   *	dlls/ntdll/unix/file.c
 # |
 if test "$enable_ntdll_APC_Performance" -eq 1; then
 	patch_apply ntdll-APC_Performance/0001-ntdll-Reuse-old-async-fileio-structures-if-possible.patch
@@ -3449,37 +3404,8 @@ if test "$enable_ntdll_Activation_Context" -eq 1; then
 	) >> "$patchlist"
 fi
 
-# Patchset ntdll-ThreadTime
-# |
-# | This patchset fixes the following Wine bugs:
-# |   *	[#20230] Return correct values for GetThreadTimes function
-# |
-# | Modified files:
-# |   *	dlls/ntdll/nt.c, dlls/ntdll/ntdll_misc.h, dlls/ntdll/thread.c, dlls/ntdll/unix/process.c, server/protocol.def,
-# | 	server/snapshot.c, server/thread.c, server/thread.h
-# |
-if test "$enable_ntdll_ThreadTime" -eq 1; then
-	patch_apply ntdll-ThreadTime/0001-ntdll-Return-correct-values-in-GetThreadTimes-for-al.patch
-	patch_apply ntdll-ThreadTime/0002-ntdll-Set-correct-thread-creation-time-for-SystemPro.patch
-	patch_apply ntdll-ThreadTime/0003-ntdll-Fill-process-kernel-and-user-time.patch
-	patch_apply ntdll-ThreadTime/0004-ntdll-Set-process-start-time.patch
-	patch_apply ntdll-ThreadTime/0005-ntdll-Fill-out-thread-times-in-process-enumeration.patch
-	patch_apply ntdll-ThreadTime/0006-ntdll-Fill-process-virtual-memory-counters-in-NtQuer.patch
-	(
-		printf '%s\n' '+    { "Sebastian Lackner", "ntdll: Return correct values in GetThreadTimes() for all threads.", 1 },';
-		printf '%s\n' '+    { "Michael Müller", "ntdll: Set correct thread creation time for SystemProcessInformation in NtQuerySystemInformation.", 1 },';
-		printf '%s\n' '+    { "Michael Müller", "ntdll: Fill process kernel and user time.", 1 },';
-		printf '%s\n' '+    { "Michael Müller", "ntdll: Set process start time.", 1 },';
-		printf '%s\n' '+    { "Michael Müller", "ntdll: Fill out thread times in process enumeration.", 1 },';
-		printf '%s\n' '+    { "Michael Müller", "ntdll: Fill process virtual memory counters in NtQuerySystemInformation.", 1 },';
-	) >> "$patchlist"
-fi
-
 # Patchset ntdll-ApiSetMap
 # |
-# | This patchset has the following (direct or indirect) dependencies:
-# |   *	ntdll-ThreadTime
-# |
 # | This patchset fixes the following Wine bugs:
 # |   *	[#44658] Add dummy apiset to PEB struct
 # |
@@ -3502,8 +3428,8 @@ fi
 # | Modified files:
 # |   *	dlls/advapi32/crypt.c, dlls/advapi32/tests/security.c, dlls/kernel32/tests/virtual.c, dlls/ntdll/unix/loader.c,
 # | 	dlls/ntdll/unix/server.c, dlls/ntdll/unix/signal_arm.c, dlls/ntdll/unix/signal_arm64.c, dlls/ntdll/unix/signal_i386.c,
-# | 	dlls/ntdll/unix/signal_powerpc.c, dlls/ntdll/unix/signal_x86_64.c, dlls/ntdll/unix/unix_private.h,
-# | 	dlls/ntdll/unix/virtual.c, dlls/psapi/tests/psapi_main.c
+# | 	dlls/ntdll/unix/signal_x86_64.c, dlls/ntdll/unix/unix_private.h, dlls/ntdll/unix/virtual.c,
+# | 	dlls/psapi/tests/psapi_main.c
 # |
 if test "$enable_ntdll_WRITECOPY" -eq 1; then
 	patch_apply ntdll-WRITECOPY/0001-ntdll-Trigger-write-watches-before-passing-userdata-.patch
@@ -3609,7 +3535,7 @@ fi
 # |   *	[#36546] Return fake device type when systemroot is located on virtual disk
 # |
 # | Modified files:
-# |   *	dlls/ntdll/file.c
+# |   *	dlls/ntdll/unix/file.c
 # |
 if test "$enable_ntdll_DeviceType_Systemroot" -eq 1; then
 	patch_apply ntdll-DeviceType_Systemroot/0001-ntdll-Return-fake-device-type-when-systemroot-is-loc.patch
@@ -3662,7 +3588,7 @@ fi
 # Patchset ntdll-FileFsFullSizeInformation
 # |
 # | Modified files:
-# |   *	dlls/ntdll/file.c, dlls/ntdll/tests/file.c
+# |   *	dlls/ntdll/tests/file.c, dlls/ntdll/unix/file.c
 # |
 if test "$enable_ntdll_FileFsFullSizeInformation" -eq 1; then
 	patch_apply ntdll-FileFsFullSizeInformation/0001-ntdll-Add-support-for-FileFsFullSizeInformation-clas.patch
@@ -3744,24 +3670,6 @@ if test "$enable_ntdll_Heap_Improvements" -eq 1; then
 	) >> "$patchlist"
 fi
 
-# Patchset ntdll-Hide_Wine_Exports
-# |
-# | This patchset has the following (direct or indirect) dependencies:
-# |   *	Staging, advapi32-CreateRestrictedToken, advapi32-Token_Integrity_Level, ntdll-ThreadTime
-# |
-# | This patchset fixes the following Wine bugs:
-# |   *	[#38656] Add support for hiding wine version information from applications
-# |
-# | Modified files:
-# |   *	dlls/ntdll/loader.c, dlls/ntdll/ntdll_misc.h
-# |
-if test "$enable_ntdll_Hide_Wine_Exports" -eq 1; then
-	patch_apply ntdll-Hide_Wine_Exports/0001-ntdll-Add-support-for-hiding-wine-version-informatio.patch
-	(
-		printf '%s\n' '+    { "Sebastian Lackner", "ntdll: Add support for hiding wine version information from applications.", 1 },';
-	) >> "$patchlist"
-fi
-
 # Patchset ntdll-Interrupt-0x2e
 # |
 # | This patchset fixes the following Wine bugs:
@@ -3924,7 +3832,7 @@ fi
 # Patchset ntdll-Status_Mapping
 # |
 # | Modified files:
-# |   *	dlls/ntdll/file.c, dlls/ntdll/tests/file.c
+# |   *	dlls/ntdll/tests/file.c, dlls/ntdll/unix/file.c
 # |
 if test "$enable_ntdll_Status_Mapping" -eq 1; then
 	patch_apply ntdll-Status_Mapping/0001-ntdll-Return-STATUS_INVALID_DEVICE_REQUEST-when-tryi.patch
@@ -3969,13 +3877,13 @@ fi
 # |   *	dlls/dbghelp/cpu_i386.c, dlls/kernel32/tests/loader.c, dlls/krnl386.exe16/kernel.c,
 # | 	dlls/krnl386.exe16/kernel16_private.h, dlls/krnl386.exe16/ne_module.c, dlls/krnl386.exe16/ne_segment.c,
 # | 	dlls/krnl386.exe16/task.c, dlls/krnl386.exe16/thunk.c, dlls/krnl386.exe16/wowthunk.c, dlls/ntdll/actctx.c,
-# | 	dlls/ntdll/directory.c, dlls/ntdll/loader.c, dlls/ntdll/locale.c, dlls/ntdll/ntdll_misc.h, dlls/ntdll/path.c,
-# | 	dlls/ntdll/process.c, dlls/ntdll/signal_i386.c, dlls/ntdll/tests/exception.c, dlls/ntdll/thread.c,
-# | 	dlls/ntdll/unix/signal_i386.c, dlls/ntdll/unix/thread.c, dlls/ntdll/unix/unix_private.h, dlls/ntdll/unix/virtual.c,
-# | 	dlls/ntdll/unixlib.h, dlls/system.drv16/system.c, dlls/toolhelp.dll16/toolhelp.c, dlls/user.exe16/message.c,
-# | 	dlls/user.exe16/user.c, dlls/user.exe16/window.c, include/winternl.h, libs/wine/loader.c, server/mapping.c,
-# | 	tools/winebuild/build.h, tools/winebuild/import.c, tools/winebuild/parser.c, tools/winebuild/relay.c,
-# | 	tools/winebuild/res32.c, tools/winebuild/spec16.c, tools/winebuild/spec32.c, tools/winebuild/utils.c
+# | 	dlls/ntdll/loader.c, dlls/ntdll/locale.c, dlls/ntdll/ntdll_misc.h, dlls/ntdll/path.c, dlls/ntdll/signal_i386.c,
+# | 	dlls/ntdll/tests/exception.c, dlls/ntdll/thread.c, dlls/ntdll/unix/signal_i386.c, dlls/ntdll/unix/thread.c,
+# | 	dlls/ntdll/unix/unix_private.h, dlls/ntdll/unix/virtual.c, dlls/ntdll/unixlib.h, dlls/system.drv16/system.c,
+# | 	dlls/toolhelp.dll16/toolhelp.c, dlls/user.exe16/message.c, dlls/user.exe16/user.c, dlls/user.exe16/window.c,
+# | 	include/winternl.h, libs/wine/loader.c, server/mapping.c, tools/winebuild/build.h, tools/winebuild/import.c,
+# | 	tools/winebuild/parser.c, tools/winebuild/relay.c, tools/winebuild/res32.c, tools/winebuild/spec16.c,
+# | 	tools/winebuild/spec32.c, tools/winebuild/utils.c
 # |
 if test "$enable_winebuild_Fake_Dlls" -eq 1; then
 	patch_apply winebuild-Fake_Dlls/0001-kernel32-tests-Add-basic-tests-for-fake-dlls.patch
@@ -4565,21 +4473,6 @@ if test "$enable_server_PeekMessage" -eq 1; then
 	) >> "$patchlist"
 fi
 
-# Patchset server-Realtime_Priority
-# |
-# | This patchset has the following (direct or indirect) dependencies:
-# |   *	ntdll-ThreadTime
-# |
-# | Modified files:
-# |   *	server/Makefile.in, server/main.c, server/scheduler.c, server/thread.c, server/thread.h
-# |
-if test "$enable_server_Realtime_Priority" -eq 1; then
-	patch_apply server-Realtime_Priority/0001-wineserver-Draft-to-implement-priority-levels-throug.patch
-	(
-		printf '%s\n' '+    { "Joakim Hernberg", "wineserver: Draft to implement priority levels through POSIX scheduling policies on linux.", 1 },';
-	) >> "$patchlist"
-fi
-
 # Patchset server-Registry_Notifications
 # |
 # | Modified files:
diff --git a/patches/server-Realtime_Priority/definition b/patches/server-Realtime_Priority/definition
index de7045a92..1d17edf22 100644
--- a/patches/server-Realtime_Priority/definition
+++ b/patches/server-Realtime_Priority/definition
@@ -1,2 +1,4 @@
 Fixes: Support for linux priority levels for faster performance
 Depends: ntdll-ThreadTime
+# Re-enable me when ntdll-ThreadTime gets re-enabled!
+Disabled: true
diff --git a/patches/winebuild-Fake_Dlls/0003-winebuild-Generate-syscall-thunks-for-ntdll-exports.patch b/patches/winebuild-Fake_Dlls/0003-winebuild-Generate-syscall-thunks-for-ntdll-exports.patch
index 18c61a33d..c3803c17b 100644
--- a/patches/winebuild-Fake_Dlls/0003-winebuild-Generate-syscall-thunks-for-ntdll-exports.patch
+++ b/patches/winebuild-Fake_Dlls/0003-winebuild-Generate-syscall-thunks-for-ntdll-exports.patch
@@ -1,4 +1,4 @@
-From 51d9c664ba86df86b3fb02a281642b5940cef430 Mon Sep 17 00:00:00 2001
+From 488721840b4825a33c7e51aabf473cb81033c682 Mon Sep 17 00:00:00 2001
 From: =?UTF-8?q?Michael=20M=C3=BCller?= <michael@fds-team.de>
 Date: Thu, 11 May 2017 05:32:55 +0200
 Subject: [PATCH] winebuild: Generate syscall thunks for ntdll exports.
@@ -11,7 +11,7 @@ Based on a patch by Erich E. Hoover.
  dlls/ntdll/thread.c            |  10 +++-
  dlls/ntdll/unix/thread.c       |   3 +-
  dlls/ntdll/unix/unix_private.h |   2 +-
- dlls/ntdll/unixlib.h           |   4 +-
+ dlls/ntdll/unixlib.h           |   2 +-
  include/winternl.h             |   2 +-
  tools/winebuild/build.h        |   7 +++
  tools/winebuild/import.c       |  10 ++--
@@ -19,13 +19,13 @@ Based on a patch by Erich E. Hoover.
  tools/winebuild/spec16.c       |  22 +------
  tools/winebuild/spec32.c       | 104 +++++++++++++++++++++++++++++++++
  tools/winebuild/utils.c        |  21 +++++++
- 14 files changed, 221 insertions(+), 32 deletions(-)
+ 14 files changed, 220 insertions(+), 31 deletions(-)
 
 diff --git a/dlls/ntdll/loader.c b/dlls/ntdll/loader.c
-index 99bcff94b3e..06cdf5cd350 100644
+index 87a65e4fc11..05d32ab167e 100644
 --- a/dlls/ntdll/loader.c
 +++ b/dlls/ntdll/loader.c
-@@ -4020,6 +4020,7 @@ PIMAGE_NT_HEADERS WINAPI RtlImageNtHeader(HMODULE hModule)
+@@ -3812,6 +3812,7 @@ PIMAGE_NT_HEADERS WINAPI RtlImageNtHeader(HMODULE hModule)
      return ret;
  }
  
@@ -33,7 +33,7 @@ index 99bcff94b3e..06cdf5cd350 100644
  
  /******************************************************************
   *		LdrInitializeThunk (NTDLL.@)
-@@ -4037,6 +4038,8 @@ void WINAPI LdrInitializeThunk( CONTEXT *context, void **entry, ULONG_PTR unknow
+@@ -3828,6 +3829,8 @@ void WINAPI LdrInitializeThunk( CONTEXT *context, void **entry, ULONG_PTR unknow
      WINE_MODREF *wm;
      LPCWSTR load_path = NtCurrentTeb()->Peb->ProcessParameters->DllPath.Buffer;
  
@@ -65,7 +65,7 @@ index 21cc1b3ead4..18be5693a7d 100644
      }
      return unix_funcs->NtGetContextThread( handle, context );
 diff --git a/dlls/ntdll/tests/exception.c b/dlls/ntdll/tests/exception.c
-index 1389a542cde..54796476e25 100644
+index a5e6faa461a..51938bf84cc 100644
 --- a/dlls/ntdll/tests/exception.c
 +++ b/dlls/ntdll/tests/exception.c
 @@ -1643,6 +1643,8 @@ static void test_thread_context(void)
@@ -78,10 +78,10 @@ index 1389a542cde..54796476e25 100644
      ok( context.SegCs == LOWORD(expect.SegCs), "wrong SegCs %08x/%08x\n", context.SegCs, expect.SegCs );
      ok( context.SegDs == LOWORD(expect.SegDs), "wrong SegDs %08x/%08x\n", context.SegDs, expect.SegDs );
 diff --git a/dlls/ntdll/thread.c b/dlls/ntdll/thread.c
-index 64dee4d0c12..2a22f1ca137 100644
+index 7329aa177ba..a878a7a27fa 100644
 --- a/dlls/ntdll/thread.c
 +++ b/dlls/ntdll/thread.c
-@@ -220,6 +220,14 @@ int __cdecl __wine_dbg_output( const char *str )
+@@ -94,6 +94,14 @@ int __cdecl __wine_dbg_output( const char *str )
      return unix_funcs->dbg_output( str );
  }
  
@@ -96,7 +96,7 @@ index 64dee4d0c12..2a22f1ca137 100644
  
  /***********************************************************************
   *           thread_init
-@@ -231,7 +239,7 @@ int __cdecl __wine_dbg_output( const char *str )
+@@ -105,7 +113,7 @@ int __cdecl __wine_dbg_output( const char *str )
  TEB *thread_init( SIZE_T *info_size, BOOL *suspend )
  {
      TEB *teb = unix_funcs->init_threading( &nb_threads, &__wine_ldt_copy, info_size, suspend, &server_cpus,
@@ -106,7 +106,7 @@ index 64dee4d0c12..2a22f1ca137 100644
      peb = teb->Peb;
      peb->FastPebLock        = &peb_lock;
 diff --git a/dlls/ntdll/unix/thread.c b/dlls/ntdll/unix/thread.c
-index 34cf12885d9..212ebda0443 100644
+index d26e0a98cac..cb44bbfd5ea 100644
 --- a/dlls/ntdll/unix/thread.c
 +++ b/dlls/ntdll/unix/thread.c
 @@ -85,7 +85,7 @@ static void pthread_exit_wrapper( int status )
@@ -118,19 +118,19 @@ index 34cf12885d9..212ebda0443 100644
  {
      TEB *teb;
      SIZE_T info_size;
-@@ -97,6 +97,7 @@ TEB * CDECL init_threading( int *nb_threads_ptr, struct ldt_copy **ldt_copy, SIZ
+@@ -96,6 +96,7 @@ TEB * CDECL init_threading( int *nb_threads_ptr, struct ldt_copy **ldt_copy, SIZ
      nb_threads = nb_threads_ptr;
  
      teb = virtual_alloc_first_teb();
 +    teb->WOW32Reserved = syscall_handler;
-     thread_data = (struct ntdll_thread_data *)&teb->GdiTebBatch;
-     thread_data->request_fd = -1;
-     thread_data->reply_fd   = -1;
+ 
+     signal_init_threading();
+     signal_alloc_thread( teb );
 diff --git a/dlls/ntdll/unix/unix_private.h b/dlls/ntdll/unix/unix_private.h
-index f19c8924008..e668c8e6fbb 100644
+index 8811fd6c21d..166a6542724 100644
 --- a/dlls/ntdll/unix/unix_private.h
 +++ b/dlls/ntdll/unix/unix_private.h
-@@ -108,7 +108,7 @@ extern void CDECL server_release_fd( HANDLE handle, int unix_fd ) DECLSPEC_HIDDE
+@@ -113,7 +113,7 @@ extern void CDECL server_release_fd( HANDLE handle, int unix_fd ) DECLSPEC_HIDDE
  extern void CDECL server_init_process_done( void *relay ) DECLSPEC_HIDDEN;
  extern TEB * CDECL init_threading( int *nb_threads_ptr, struct ldt_copy **ldt_copy, SIZE_T *size,
                                     BOOL *suspend, unsigned int *cpus, BOOL *wow64,
@@ -138,21 +138,12 @@ index f19c8924008..e668c8e6fbb 100644
 +                                   timeout_t *start_time, void *syscall_handler ) DECLSPEC_HIDDEN;
  extern void CDECL DECLSPEC_NORETURN exit_thread( int status ) DECLSPEC_HIDDEN;
  extern void CDECL DECLSPEC_NORETURN exit_process( int status ) DECLSPEC_HIDDEN;
- extern NTSTATUS CDECL get_thread_ldt_entry( HANDLE handle, void *data, ULONG len, ULONG *ret_len ) DECLSPEC_HIDDEN;
+ extern NTSTATUS CDECL exec_process( UNICODE_STRING *path, UNICODE_STRING *cmdline, NTSTATUS status ) DECLSPEC_HIDDEN;
 diff --git a/dlls/ntdll/unixlib.h b/dlls/ntdll/unixlib.h
-index dbe68a1b486..b09f4942f05 100644
+index 7dec512cb09..a9803478a37 100644
 --- a/dlls/ntdll/unixlib.h
 +++ b/dlls/ntdll/unixlib.h
-@@ -28,7 +28,7 @@ struct ldt_copy;
- struct msghdr;
- 
- /* increment this when you change the function table */
--#define NTDLL_UNIXLIB_VERSION 52
-+#define NTDLL_UNIXLIB_VERSION 53
- 
- struct unix_funcs
- {
-@@ -281,7 +281,7 @@ struct unix_funcs
+@@ -302,7 +302,7 @@ struct unix_funcs
  
      /* thread/process functions */
      TEB *         (CDECL *init_threading)( int *nb_threads_ptr, struct ldt_copy **ldt_copy, SIZE_T *size,
@@ -160,12 +151,12 @@ index dbe68a1b486..b09f4942f05 100644
 +                                           BOOL *suspend, unsigned int *cpus, BOOL *wow64, timeout_t *start_time, void *syscall_handler );
      void          (CDECL *exit_thread)( int status );
      void          (CDECL *exit_process)( int status );
-     NTSTATUS      (CDECL *get_thread_ldt_entry)( HANDLE handle, void *data, ULONG len, ULONG *ret_len );
+     NTSTATUS      (CDECL *exec_process)( UNICODE_STRING *path, UNICODE_STRING *cmdline, NTSTATUS status );
 diff --git a/include/winternl.h b/include/winternl.h
-index 4f5ce4d0cfe..7d69a448e89 100644
+index 4b3202cdc20..5f58366f649 100644
 --- a/include/winternl.h
 +++ b/include/winternl.h
-@@ -360,7 +360,7 @@ typedef struct _TEB
+@@ -359,7 +359,7 @@ typedef struct _TEB
      PVOID                        CsrClientThread;                   /* 03c/0070 */
      PVOID                        Win32ThreadInfo;                   /* 040/0078 */
      ULONG                        Win32ClientInfo[31];               /* 044/0080 used for user32 private data in Wine */
diff --git a/patches/winebuild-Fake_Dlls/0005-winebuild-Add-stub-functions-in-fake-dlls.patch b/patches/winebuild-Fake_Dlls/0005-winebuild-Add-stub-functions-in-fake-dlls.patch
index 4ac05a314..15cb684c2 100644
--- a/patches/winebuild-Fake_Dlls/0005-winebuild-Add-stub-functions-in-fake-dlls.patch
+++ b/patches/winebuild-Fake_Dlls/0005-winebuild-Add-stub-functions-in-fake-dlls.patch
@@ -1,4 +1,4 @@
-From e5fc6ee60be5dd3b80af96dcbd81adb742ba7a5d Mon Sep 17 00:00:00 2001
+From ce23308632979fdff714da4322e4f56905873374 Mon Sep 17 00:00:00 2001
 From: =?UTF-8?q?Michael=20M=C3=BCller?= <michael@fds-team.de>
 Date: Mon, 15 May 2017 16:27:56 +0200
 Subject: [PATCH] winebuild: Add stub functions in fake dlls.
@@ -6,18 +6,18 @@ Subject: [PATCH] winebuild: Add stub functions in fake dlls.
 ---
  dlls/kernel32/tests/loader.c |   8 +-
  dlls/ntdll/loader.c          |   2 +
- dlls/ntdll/thread.c          |  34 ++++++
+ dlls/ntdll/thread.c          |  35 ++++++
  include/winternl.h           |   2 +-
  tools/winebuild/build.h      |   1 +
  tools/winebuild/spec32.c     | 209 +++++++++++++++++++++++++++++++++--
  tools/winebuild/utils.c      |  10 +-
- 7 files changed, 251 insertions(+), 15 deletions(-)
+ 7 files changed, 252 insertions(+), 15 deletions(-)
 
 diff --git a/dlls/kernel32/tests/loader.c b/dlls/kernel32/tests/loader.c
-index efd5a25a432d..182b61b731a2 100644
+index 984246681cb..78100205c9d 100644
 --- a/dlls/kernel32/tests/loader.c
 +++ b/dlls/kernel32/tests/loader.c
-@@ -1597,9 +1597,7 @@ static void test_FakeDLL(void)
+@@ -1594,9 +1594,7 @@ static void test_FakeDLL(void)
      ok(ptr != NULL, "MapViewOfFile failed with error %u\n", GetLastError());
  
      dir = RtlImageDirectoryEntryToData(ptr, TRUE, IMAGE_DIRECTORY_ENTRY_EXPORT, &size);
@@ -27,7 +27,7 @@ index efd5a25a432d..182b61b731a2 100644
  
      names    = RVAToAddr(dir->AddressOfNames, ptr);
      ordinals = RVAToAddr(dir->AddressOfNameOrdinals, ptr);
-@@ -1628,17 +1626,20 @@ todo_wine
+@@ -1625,17 +1623,20 @@ todo_wine
          /* check position in memory */
          dll_rva = (DWORD_PTR)dll_func - (DWORD_PTR)module;
          map_rva = funcs[ordinals[i]];
@@ -48,7 +48,7 @@ index efd5a25a432d..182b61b731a2 100644
          ok(!memcmp(map_func, dll_func, 0x20), "%s: Function content does not match!\n", func_name);
  
          if (!strcmp(func_name, "NtSetEvent"))
-@@ -1652,10 +1653,11 @@ todo_wine
+@@ -1649,10 +1650,11 @@ todo_wine
          ok(event != NULL, "CreateEvent failed with error %u\n", GetLastError());
          pNtSetEvent(event, 0);
          ok(WaitForSingleObject(event, 0) == WAIT_OBJECT_0, "Event was not signaled\n");
@@ -62,10 +62,10 @@ index efd5a25a432d..182b61b731a2 100644
      CloseHandle(map);
      CloseHandle(file);
 diff --git a/dlls/ntdll/loader.c b/dlls/ntdll/loader.c
-index cac6aae2f3dd..51d989f30b45 100644
+index 05d32ab167e..5b26a556f0d 100644
 --- a/dlls/ntdll/loader.c
 +++ b/dlls/ntdll/loader.c
-@@ -4022,6 +4022,7 @@ PIMAGE_NT_HEADERS WINAPI RtlImageNtHeader(HMODULE hModule)
+@@ -3813,6 +3813,7 @@ PIMAGE_NT_HEADERS WINAPI RtlImageNtHeader(HMODULE hModule)
  }
  
  extern void DECLSPEC_NORETURN __wine_syscall_dispatcher( void );
@@ -73,7 +73,7 @@ index cac6aae2f3dd..51d989f30b45 100644
  
  /******************************************************************
   *		LdrInitializeThunk (NTDLL.@)
-@@ -4040,6 +4041,7 @@ void WINAPI LdrInitializeThunk( CONTEXT *context, void **entry, ULONG_PTR unknow
+@@ -3830,6 +3831,7 @@ void WINAPI LdrInitializeThunk( CONTEXT *context, void **entry, ULONG_PTR unknow
      LPCWSTR load_path = NtCurrentTeb()->Peb->ProcessParameters->DllPath.Buffer;
  
      NtCurrentTeb()->WOW32Reserved = __wine_syscall_dispatcher;
@@ -82,10 +82,18 @@ index cac6aae2f3dd..51d989f30b45 100644
      if (process_detaching) return;
  
 diff --git a/dlls/ntdll/thread.c b/dlls/ntdll/thread.c
-index e93498b27ea0..a14e3a12ae0c 100644
+index a878a7a27fa..21ae0e9ebbd 100644
 --- a/dlls/ntdll/thread.c
 +++ b/dlls/ntdll/thread.c
-@@ -229,6 +229,39 @@ void __wine_syscall_dispatcher( void )
+@@ -36,6 +36,7 @@
+ #include "ddk/wdm.h"
+ #include "wine/exception.h"
+ 
++WINE_DEFAULT_DEBUG_CHANNEL(thread);
+ WINE_DECLARE_DEBUG_CHANNEL(relay);
+ 
+ struct _KUSER_SHARED_DATA *user_shared_data = (void *)0x7ffe0000;
+@@ -103,6 +104,39 @@ void __wine_syscall_dispatcher( void )
  }
  #endif
  
@@ -125,7 +133,7 @@ index e93498b27ea0..a14e3a12ae0c 100644
  /***********************************************************************
   *           thread_init
   *
-@@ -240,6 +273,7 @@ TEB *thread_init( SIZE_T *info_size, BOOL *suspend )
+@@ -114,6 +148,7 @@ TEB *thread_init( SIZE_T *info_size, BOOL *suspend )
  {
      TEB *teb = unix_funcs->init_threading( &nb_threads, &__wine_ldt_copy, info_size, suspend, &server_cpus,
                                             &is_wow64, &server_start_time, __wine_syscall_dispatcher );
@@ -134,10 +142,10 @@ index e93498b27ea0..a14e3a12ae0c 100644
      peb = teb->Peb;
      peb->FastPebLock        = &peb_lock;
 diff --git a/include/winternl.h b/include/winternl.h
-index 0c15a0ee6c34..6da672e979e5 100644
+index 5f58366f649..d3b708c3e0d 100644
 --- a/include/winternl.h
 +++ b/include/winternl.h
-@@ -399,7 +399,7 @@ typedef struct _TEB
+@@ -398,7 +398,7 @@ typedef struct _TEB
      PVOID                        Instrumentation[16];               /* f2c/16b8 */
      PVOID                        WinSockData;                       /* f6c/1738 */
      ULONG                        GdiBatchCount;                     /* f70/1740 */
@@ -147,7 +155,7 @@ index 0c15a0ee6c34..6da672e979e5 100644
      PVOID                        ReservedForPerf;                   /* f7c/1750 */
      PVOID                        ReservedForOle;                    /* f80/1758 */
 diff --git a/tools/winebuild/build.h b/tools/winebuild/build.h
-index 8930df408d3b..44113bad28af 100644
+index 8930df408d3..44113bad28a 100644
 --- a/tools/winebuild/build.h
 +++ b/tools/winebuild/build.h
 @@ -358,6 +358,7 @@ extern void put_word( unsigned short val );
@@ -159,7 +167,7 @@ index 8930df408d3b..44113bad28af 100644
  extern void align_output_rva( unsigned int file_align, unsigned int rva_align );
  extern size_t label_pos( const char *name );
 diff --git a/tools/winebuild/spec32.c b/tools/winebuild/spec32.c
-index c38f1fe663c7..bf82ca497c0d 100644
+index c38f1fe663c..bf82ca497c0 100644
 --- a/tools/winebuild/spec32.c
 +++ b/tools/winebuild/spec32.c
 @@ -843,6 +843,163 @@ void output_spec32_file( DLLSPEC *spec )
@@ -415,7 +423,7 @@ index c38f1fe663c7..bf82ca497c0d 100644
      /* .reloc contents */
      align_output_rva( file_align, section_align );
 diff --git a/tools/winebuild/utils.c b/tools/winebuild/utils.c
-index 80dec6db29ea..d394a1382c68 100644
+index 80dec6db29e..d394a1382c6 100644
 --- a/tools/winebuild/utils.c
 +++ b/tools/winebuild/utils.c
 @@ -549,7 +549,7 @@ size_t output_buffer_size;
@@ -457,5 +465,5 @@ index 80dec6db29ea..d394a1382c68 100644
  {
      size_t size = align - (output_buffer_pos % align);
 -- 
-2.26.2
+2.27.0
 
diff --git a/patches/winebuild-Fake_Dlls/0010-tools-winebuild-Add-syscall-thunks-for-64-bit.patch b/patches/winebuild-Fake_Dlls/0010-tools-winebuild-Add-syscall-thunks-for-64-bit.patch
index 102fa77af..a8f6ebc4e 100644
--- a/patches/winebuild-Fake_Dlls/0010-tools-winebuild-Add-syscall-thunks-for-64-bit.patch
+++ b/patches/winebuild-Fake_Dlls/0010-tools-winebuild-Add-syscall-thunks-for-64-bit.patch
@@ -1,4 +1,4 @@
-From 88dc845f605a87a97247d4d2c795722afeba41dc Mon Sep 17 00:00:00 2001
+From 2f3bcc431318c7db08080c6e2c9f9b566f9123ec Mon Sep 17 00:00:00 2001
 From: =?UTF-8?q?Michael=20M=C3=BCller?= <michael@fds-team.de>
 Date: Thu, 7 Sep 2017 00:38:09 +0200
 Subject: [PATCH] tools/winebuild: Add syscall thunks for 64 bit.
@@ -15,10 +15,10 @@ Subject: [PATCH] tools/winebuild: Add syscall thunks for 64 bit.
  8 files changed, 305 insertions(+), 14 deletions(-)
 
 diff --git a/dlls/kernel32/tests/loader.c b/dlls/kernel32/tests/loader.c
-index 1f525194ce7..21af7b4ce7a 100644
+index d39ebe4a37c..dccd9c1fc68 100644
 --- a/dlls/kernel32/tests/loader.c
 +++ b/dlls/kernel32/tests/loader.c
-@@ -1574,7 +1574,7 @@ static void test_filenames(void)
+@@ -1571,7 +1571,7 @@ static void test_filenames(void)
  
  static void test_FakeDLL(void)
  {
@@ -27,7 +27,7 @@ index 1f525194ce7..21af7b4ce7a 100644
      NTSTATUS (WINAPI *pNtSetEvent)(HANDLE, ULONG *) = NULL;
      IMAGE_EXPORT_DIRECTORY *dir;
      HMODULE module = GetModuleHandleA("ntdll.dll");
-@@ -1616,8 +1616,13 @@ static void test_FakeDLL(void)
+@@ -1613,8 +1613,13 @@ static void test_FakeDLL(void)
  
          dll_func = (BYTE *)GetProcAddress(module, func_name);
          ok(dll_func != NULL, "%s: GetProcAddress returned NULL\n", func_name);
@@ -42,10 +42,10 @@ index 1f525194ce7..21af7b4ce7a 100644
              todo_wine ok(0, "%s: Export is a stub-function, skipping\n", func_name);
              continue;
 diff --git a/dlls/ntdll/unix/thread.c b/dlls/ntdll/unix/thread.c
-index 212ebda0443..0279690806c 100644
+index cb44bbfd5ea..196dc2d8c4e 100644
 --- a/dlls/ntdll/unix/thread.c
 +++ b/dlls/ntdll/unix/thread.c
-@@ -110,7 +110,7 @@ TEB * CDECL init_threading( int *nb_threads_ptr, struct ldt_copy **ldt_copy, SIZ
+@@ -104,7 +104,7 @@ TEB * CDECL init_threading( int *nb_threads_ptr, struct ldt_copy **ldt_copy, SIZ
      dbg_init();
      server_init_process();
      info_size = server_init_thread( teb->Peb, suspend );
@@ -55,23 +55,23 @@ index 212ebda0443..0279690806c 100644
      NtCreateKeyedEvent( &keyed_event, GENERIC_READ | GENERIC_WRITE, NULL, 0 );
  
 diff --git a/dlls/ntdll/unix/unix_private.h b/dlls/ntdll/unix/unix_private.h
-index e668c8e6fbb..19196dbb296 100644
+index 166a6542724..df508e569f9 100644
 --- a/dlls/ntdll/unix/unix_private.h
 +++ b/dlls/ntdll/unix/unix_private.h
-@@ -171,7 +171,7 @@ extern ULONG_PTR get_system_affinity_mask(void) DECLSPEC_HIDDEN;
- extern TEB *virtual_alloc_first_teb(void) DECLSPEC_HIDDEN;
+@@ -177,7 +177,7 @@ extern TEB *virtual_alloc_first_teb(void) DECLSPEC_HIDDEN;
  extern NTSTATUS virtual_alloc_teb( TEB **ret_teb ) DECLSPEC_HIDDEN;
  extern void virtual_free_teb( TEB *teb ) DECLSPEC_HIDDEN;
+ extern NTSTATUS virtual_clear_tls_index( ULONG index ) DECLSPEC_HIDDEN;
 -extern void virtual_map_user_shared_data(void) DECLSPEC_HIDDEN;
-+extern void virtual_map_user_shared_data(void *) DECLSPEC_HIDDEN;
++extern void virtual_map_user_shared_data( void *syscall_handler ) DECLSPEC_HIDDEN;
  extern NTSTATUS virtual_handle_fault( LPCVOID addr, DWORD err, BOOL on_signal_stack ) DECLSPEC_HIDDEN;
  extern unsigned int virtual_locked_server_call( void *req_ptr ) DECLSPEC_HIDDEN;
  extern ssize_t virtual_locked_read( int fd, void *addr, size_t size ) DECLSPEC_HIDDEN;
 diff --git a/dlls/ntdll/unix/virtual.c b/dlls/ntdll/unix/virtual.c
-index a3b2cb2c477..5cf4eb626c0 100644
+index ca25cdd304e..7f7660d0795 100644
 --- a/dlls/ntdll/unix/virtual.c
 +++ b/dlls/ntdll/unix/virtual.c
-@@ -2771,14 +2771,14 @@ TEB *virtual_alloc_first_teb(void)
+@@ -2607,14 +2607,14 @@ TEB *virtual_alloc_first_teb(void)
      TEB *teb;
      PEB *peb;
      NTSTATUS status;
@@ -88,7 +88,7 @@ index a3b2cb2c477..5cf4eb626c0 100644
      if (status)
      {
          ERR( "wine: failed to map the shared user data: %08x\n", status );
-@@ -2976,7 +2976,7 @@ void virtual_clear_thread_stack( void *stack_end )
+@@ -2838,7 +2838,7 @@ void virtual_clear_thread_stack( void *stack_end )
  /***********************************************************************
   *           virtual_map_user_shared_data
   */
@@ -97,7 +97,7 @@ index a3b2cb2c477..5cf4eb626c0 100644
  {
      static const WCHAR wine_usdW[] = {'\\','K','e','r','n','e','l','O','b','j','e','c','t','s',
                                        '\\','_','_','w','i','n','e','_','u','s','e','r','_','s','h','a','r','e','d','_','d','a','t','a',0};
-@@ -2999,6 +2999,11 @@ void virtual_map_user_shared_data(void)
+@@ -2861,6 +2861,11 @@ void virtual_map_user_shared_data(void)
          ERR( "failed to remap the process USD: %d\n", res );
          exit(1);
      }
diff --git a/patches/winebuild-Fake_Dlls/0011-ntdll-Call-NtOpenFile-through-syscall-thunk.patch b/patches/winebuild-Fake_Dlls/0011-ntdll-Call-NtOpenFile-through-syscall-thunk.patch
index 00403afab..460b270f4 100644
--- a/patches/winebuild-Fake_Dlls/0011-ntdll-Call-NtOpenFile-through-syscall-thunk.patch
+++ b/patches/winebuild-Fake_Dlls/0011-ntdll-Call-NtOpenFile-through-syscall-thunk.patch
@@ -1,4 +1,4 @@
-From cae4c8ad24a127367a3cf8bcc1333af72eea8cc9 Mon Sep 17 00:00:00 2001
+From ac99500b2479f2c9cfed43408c26e0f78261c46b Mon Sep 17 00:00:00 2001
 From: Paul Gofman <gofmanp@gmail.com>
 Date: Fri, 3 Jan 2020 17:39:08 +0300
 Subject: [PATCH] ntdll: Call NtOpenFile through syscall thunk.
@@ -10,14 +10,13 @@ Wine-Bug: https://bugs.winehq.org/show_bug.cgi?id=48410
  dlls/ntdll/locale.c     | 4 ++--
  dlls/ntdll/ntdll_misc.h | 8 ++++++++
  dlls/ntdll/path.c       | 2 +-
- dlls/ntdll/process.c    | 2 +-
- 6 files changed, 15 insertions(+), 7 deletions(-)
+ 5 files changed, 14 insertions(+), 6 deletions(-)
 
 diff --git a/dlls/ntdll/actctx.c b/dlls/ntdll/actctx.c
-index e1051745db3..fcc22774338 100644
+index 1fa97ac0379..9bf425c6e2d 100644
 --- a/dlls/ntdll/actctx.c
 +++ b/dlls/ntdll/actctx.c
-@@ -2928,7 +2928,7 @@ static NTSTATUS open_nt_file( HANDLE *handle, UNICODE_STRING *name )
+@@ -2926,7 +2926,7 @@ static NTSTATUS open_nt_file( HANDLE *handle, UNICODE_STRING *name )
      attr.ObjectName = name;
      attr.SecurityDescriptor = NULL;
      attr.SecurityQualityOfService = NULL;
@@ -26,7 +25,7 @@ index e1051745db3..fcc22774338 100644
  }
  
  static NTSTATUS get_manifest_in_module( struct actctx_loader* acl, struct assembly_identity* ai,
-@@ -3245,7 +3245,7 @@ static NTSTATUS lookup_winsxs(struct actctx_loader* acl, struct assembly_identit
+@@ -3243,7 +3243,7 @@ static NTSTATUS lookup_winsxs(struct actctx_loader* acl, struct assembly_identit
      attr.SecurityDescriptor = NULL;
      attr.SecurityQualityOfService = NULL;
  
@@ -36,10 +35,10 @@ index e1051745db3..fcc22774338 100644
      {
          sxs_ai = *ai;
 diff --git a/dlls/ntdll/loader.c b/dlls/ntdll/loader.c
-index 316e5fa0b5b..675d767c5a1 100644
+index 5b26a556f0d..053d6a8ef1d 100644
 --- a/dlls/ntdll/loader.c
 +++ b/dlls/ntdll/loader.c
-@@ -2521,7 +2521,7 @@ static NTSTATUS open_dll_file( UNICODE_STRING *nt_name, WINE_MODREF **pwm,
+@@ -2327,7 +2327,7 @@ static NTSTATUS open_dll_file( UNICODE_STRING *nt_name, WINE_MODREF **pwm,
      attr.ObjectName = nt_name;
      attr.SecurityDescriptor = NULL;
      attr.SecurityQualityOfService = NULL;
@@ -71,10 +70,10 @@ index d6bde700e42..16a7f911173 100644
      }
      RtlFreeUnicodeString( &valueW );
 diff --git a/dlls/ntdll/ntdll_misc.h b/dlls/ntdll/ntdll_misc.h
-index af30044ad1f..d7076c7a2b8 100644
+index 47800db41b1..749edaa57cf 100644
 --- a/dlls/ntdll/ntdll_misc.h
 +++ b/dlls/ntdll/ntdll_misc.h
-@@ -282,4 +282,12 @@ static inline void ascii_to_unicode( WCHAR *dst, const char *src, size_t len )
+@@ -227,4 +227,12 @@ static inline void ascii_to_unicode( WCHAR *dst, const char *src, size_t len )
      while (len--) *dst++ = (unsigned char)*src++;
  }
  
@@ -100,19 +99,6 @@ index 5f4eb11316f..d2112d1af0d 100644
                        FILE_DIRECTORY_FILE | FILE_SYNCHRONOUS_IO_NONALERT );
      if (nts != STATUS_SUCCESS) goto out;
  
-diff --git a/dlls/ntdll/process.c b/dlls/ntdll/process.c
-index 533fe963cae..fd0e86ce147 100644
---- a/dlls/ntdll/process.c
-+++ b/dlls/ntdll/process.c
-@@ -396,7 +396,7 @@ static NTSTATUS get_pe_file_info( UNICODE_STRING *path, ULONG attributes,
- 
-     memset( info, 0, sizeof(*info) );
-     InitializeObjectAttributes( &attr, path, attributes, 0, 0 );
--    if ((status = NtOpenFile( handle, GENERIC_READ, &attr, &io,
-+    if ((status = __syscall_NtOpenFile( handle, GENERIC_READ, &attr, &io,
-                               FILE_SHARE_READ | FILE_SHARE_DELETE, FILE_SYNCHRONOUS_IO_NONALERT )))
-     {
-         BOOL is_64bit;
 -- 
 2.27.0
 

diff --git a/patches/ntdll-WRITECOPY/0003-ntdll-Setup-a-temporary-signal-handler-during-proces.patch b/patches/ntdll-WRITECOPY/0003-ntdll-Setup-a-temporary-signal-handler-during-proces.patch
index e02f07486..6cd4783d4 100644
--- a/patches/ntdll-WRITECOPY/0003-ntdll-Setup-a-temporary-signal-handler-during-proces.patch
+++ b/patches/ntdll-WRITECOPY/0003-ntdll-Setup-a-temporary-signal-handler-during-proces.patch
@@ -1,24 +1,23 @@
-From 42a9d6a0464a17831ae2c16df222f4de7638349e Mon Sep 17 00:00:00 2001
+From 9cdc9d195760a55263ba0bb7926e6e4d776cbd04 Mon Sep 17 00:00:00 2001
 From: =?UTF-8?q?Michael=20M=C3=BCller?= <michael@fds-team.de>
 Date: Sat, 4 Oct 2014 02:53:22 +0200
 Subject: [PATCH] ntdll: Setup a temporary signal handler during process
  startup to handle page faults. (v2)
 
 ---
- dlls/ntdll/unix/loader.c         |  1 +
- dlls/ntdll/unix/signal_arm.c     |  6 ++++
- dlls/ntdll/unix/signal_arm64.c   |  7 +++++
- dlls/ntdll/unix/signal_i386.c    | 52 ++++++++++++++++++++++++++++++++
- dlls/ntdll/unix/signal_powerpc.c |  6 ++++
- dlls/ntdll/unix/signal_x86_64.c  |  6 ++++
- dlls/ntdll/unix/unix_private.h   |  1 +
- 7 files changed, 79 insertions(+)
+ dlls/ntdll/unix/loader.c        |  1 +
+ dlls/ntdll/unix/signal_arm.c    |  6 ++++
+ dlls/ntdll/unix/signal_arm64.c  |  7 +++++
+ dlls/ntdll/unix/signal_i386.c   | 52 +++++++++++++++++++++++++++++++++
+ dlls/ntdll/unix/signal_x86_64.c |  6 ++++
+ dlls/ntdll/unix/unix_private.h  |  1 +
+ 6 files changed, 73 insertions(+)
 
 diff --git a/dlls/ntdll/unix/loader.c b/dlls/ntdll/unix/loader.c
-index eac43ba42c4..48910dd4d50 100644
+index 4db78fec823..91b98c44b3f 100644
 --- a/dlls/ntdll/unix/loader.c
 +++ b/dlls/ntdll/unix/loader.c
-@@ -1418,6 +1418,7 @@ void __wine_main( int argc, char *argv[], char *envp[] )
+@@ -1244,6 +1244,7 @@ void __wine_main( int argc, char *argv[], char *envp[] )
  #endif
  
      virtual_init();
@@ -27,7 +26,7 @@ index eac43ba42c4..48910dd4d50 100644
      module = load_ntdll();
      fixup_ntdll_imports( &__wine_spec_nt_header, module );
 diff --git a/dlls/ntdll/unix/signal_arm.c b/dlls/ntdll/unix/signal_arm.c
-index 1ef3ff6618b..5e0b25cec5d 100644
+index faa2952a483..43e0fb848a3 100644
 --- a/dlls/ntdll/unix/signal_arm.c
 +++ b/dlls/ntdll/unix/signal_arm.c
 @@ -869,6 +869,12 @@ void signal_init_process(void)
@@ -44,7 +43,7 @@ index 1ef3ff6618b..5e0b25cec5d 100644
  /***********************************************************************
   *           init_thread_context
 diff --git a/dlls/ntdll/unix/signal_arm64.c b/dlls/ntdll/unix/signal_arm64.c
-index 6c9083664e0..3a4e7d5b9cb 100644
+index e2c52a1a4f6..f3c67e1f5f4 100644
 --- a/dlls/ntdll/unix/signal_arm64.c
 +++ b/dlls/ntdll/unix/signal_arm64.c
 @@ -791,6 +791,13 @@ void signal_init_process(void)
@@ -62,7 +61,7 @@ index 6c9083664e0..3a4e7d5b9cb 100644
   *           init_thread_context
   */
 diff --git a/dlls/ntdll/unix/signal_i386.c b/dlls/ntdll/unix/signal_i386.c
-index 7ae4cda33a6..1a86b6e05f3 100644
+index adf622ca673..44d0848a1ee 100644
 --- a/dlls/ntdll/unix/signal_i386.c
 +++ b/dlls/ntdll/unix/signal_i386.c
 @@ -1644,6 +1644,30 @@ static BOOL handle_interrupt( unsigned int interrupt, ucontext_t *sigcontext, st
@@ -131,25 +130,8 @@ index 7ae4cda33a6..1a86b6e05f3 100644
  
  /***********************************************************************
   *           init_thread_context
-diff --git a/dlls/ntdll/unix/signal_powerpc.c b/dlls/ntdll/unix/signal_powerpc.c
-index f98d6fc9713..fdc5f66d092 100644
---- a/dlls/ntdll/unix/signal_powerpc.c
-+++ b/dlls/ntdll/unix/signal_powerpc.c
-@@ -978,6 +978,12 @@ void signal_init_process(void)
-     exit(1);
- }
- 
-+/**********************************************************************
-+ *    signal_init_early
-+ */
-+void signal_init_early(void)
-+{
-+}
- 
- /***********************************************************************
-  *           signal_exit_thread
 diff --git a/dlls/ntdll/unix/signal_x86_64.c b/dlls/ntdll/unix/signal_x86_64.c
-index d4a6e821a4c..98bd7bb8bed 100644
+index 1bf8f5e8b8e..73c6ba4c34e 100644
 --- a/dlls/ntdll/unix/signal_x86_64.c
 +++ b/dlls/ntdll/unix/signal_x86_64.c
 @@ -1415,6 +1415,12 @@ void signal_init_process(void)
@@ -166,10 +148,10 @@ index d4a6e821a4c..98bd7bb8bed 100644
  /***********************************************************************
   *           init_thread_context
 diff --git a/dlls/ntdll/unix/unix_private.h b/dlls/ntdll/unix/unix_private.h
-index 3e61111cba5..1319ca90b96 100644
+index 95d4e2c2441..d88cf97f4b7 100644
 --- a/dlls/ntdll/unix/unix_private.h
 +++ b/dlls/ntdll/unix/unix_private.h
-@@ -163,6 +163,7 @@ extern NTSTATUS signal_alloc_thread( TEB *teb ) DECLSPEC_HIDDEN;
+@@ -193,6 +193,7 @@ extern NTSTATUS signal_alloc_thread( TEB *teb ) DECLSPEC_HIDDEN;
  extern void signal_free_thread( TEB *teb ) DECLSPEC_HIDDEN;
  extern void signal_init_thread( TEB *teb ) DECLSPEC_HIDDEN;
  extern void signal_init_process(void) DECLSPEC_HIDDEN;
@@ -178,5 +160,5 @@ index 3e61111cba5..1319ca90b96 100644
                                                     BOOL suspend, void *relay, TEB *teb ) DECLSPEC_HIDDEN;
  extern void DECLSPEC_NORETURN signal_exit_thread( int status, void (*func)(int) ) DECLSPEC_HIDDEN;
 -- 
-2.26.2
+2.27.0
 
diff --git a/patches/winebuild-Fake_Dlls/0011-ntdll-Call-NtOpenFile-through-syscall-thunk.patch b/patches/winebuild-Fake_Dlls/0011-ntdll-Call-NtOpenFile-through-syscall-thunk.patch
index c3e065b26..00403afab 100644
--- a/patches/winebuild-Fake_Dlls/0011-ntdll-Call-NtOpenFile-through-syscall-thunk.patch
+++ b/patches/winebuild-Fake_Dlls/0011-ntdll-Call-NtOpenFile-through-syscall-thunk.patch
@@ -1,4 +1,4 @@
-From feb53ed39179603391eff600ea59edc41407b238 Mon Sep 17 00:00:00 2001
+From cae4c8ad24a127367a3cf8bcc1333af72eea8cc9 Mon Sep 17 00:00:00 2001
 From: Paul Gofman <gofmanp@gmail.com>
 Date: Fri, 3 Jan 2020 17:39:08 +0300
 Subject: [PATCH] ntdll: Call NtOpenFile through syscall thunk.
@@ -6,19 +6,18 @@ Subject: [PATCH] ntdll: Call NtOpenFile through syscall thunk.
 Wine-Bug: https://bugs.winehq.org/show_bug.cgi?id=48410
 ---
  dlls/ntdll/actctx.c     | 4 ++--
- dlls/ntdll/directory.c  | 2 +-
  dlls/ntdll/loader.c     | 2 +-
  dlls/ntdll/locale.c     | 4 ++--
  dlls/ntdll/ntdll_misc.h | 8 ++++++++
  dlls/ntdll/path.c       | 2 +-
  dlls/ntdll/process.c    | 2 +-
- 7 files changed, 16 insertions(+), 8 deletions(-)
+ 6 files changed, 15 insertions(+), 7 deletions(-)
 
 diff --git a/dlls/ntdll/actctx.c b/dlls/ntdll/actctx.c
-index a25cefa555ac..34ba0dc813c6 100644
+index e1051745db3..fcc22774338 100644
 --- a/dlls/ntdll/actctx.c
 +++ b/dlls/ntdll/actctx.c
-@@ -2894,7 +2894,7 @@ static NTSTATUS open_nt_file( HANDLE *handle, UNICODE_STRING *name )
+@@ -2928,7 +2928,7 @@ static NTSTATUS open_nt_file( HANDLE *handle, UNICODE_STRING *name )
      attr.ObjectName = name;
      attr.SecurityDescriptor = NULL;
      attr.SecurityQualityOfService = NULL;
@@ -27,7 +26,7 @@ index a25cefa555ac..34ba0dc813c6 100644
  }
  
  static NTSTATUS get_manifest_in_module( struct actctx_loader* acl, struct assembly_identity* ai,
-@@ -3211,7 +3211,7 @@ static NTSTATUS lookup_winsxs(struct actctx_loader* acl, struct assembly_identit
+@@ -3245,7 +3245,7 @@ static NTSTATUS lookup_winsxs(struct actctx_loader* acl, struct assembly_identit
      attr.SecurityDescriptor = NULL;
      attr.SecurityQualityOfService = NULL;
  
@@ -36,21 +35,8 @@ index a25cefa555ac..34ba0dc813c6 100644
                       FILE_DIRECTORY_FILE | FILE_SYNCHRONOUS_IO_NONALERT ))
      {
          sxs_ai = *ai;
-diff --git a/dlls/ntdll/directory.c b/dlls/ntdll/directory.c
-index 18428658a5b5..7a9de26ccb0c 100644
---- a/dlls/ntdll/directory.c
-+++ b/dlls/ntdll/directory.c
-@@ -3071,7 +3071,7 @@ NTSTATUS DIR_get_unix_cwd( char **cwd )
-         attr.SecurityDescriptor = NULL;
-         attr.SecurityQualityOfService = NULL;
- 
--        status = NtOpenFile( &handle, SYNCHRONIZE, &attr, &io, 0,
-+        status = __syscall_NtOpenFile( &handle, SYNCHRONIZE, &attr, &io, 0,
-                              FILE_DIRECTORY_FILE | FILE_SYNCHRONOUS_IO_NONALERT );
-         RtlFreeUnicodeString( &dirW );
-         if (status != STATUS_SUCCESS) goto done;
 diff --git a/dlls/ntdll/loader.c b/dlls/ntdll/loader.c
-index 51d989f30b45..8f1653b0d626 100644
+index 316e5fa0b5b..675d767c5a1 100644
 --- a/dlls/ntdll/loader.c
 +++ b/dlls/ntdll/loader.c
 @@ -2521,7 +2521,7 @@ static NTSTATUS open_dll_file( UNICODE_STRING *nt_name, WINE_MODREF **pwm,
@@ -63,10 +49,10 @@ index 51d989f30b45..8f1653b0d626 100644
                                FILE_SYNCHRONOUS_IO_NONALERT | FILE_NON_DIRECTORY_FILE )))
      {
 diff --git a/dlls/ntdll/locale.c b/dlls/ntdll/locale.c
-index 15ccdeb2e637..928edcb04e2c 100644
+index d6bde700e42..16a7f911173 100644
 --- a/dlls/ntdll/locale.c
 +++ b/dlls/ntdll/locale.c
-@@ -660,7 +660,7 @@ static NTSTATUS open_nls_data_file( ULONG type, ULONG id, HANDLE *file )
+@@ -654,7 +654,7 @@ static NTSTATUS open_nls_data_file( ULONG type, ULONG id, HANDLE *file )
          return STATUS_NO_MEMORY;
      valueW.Length = NTDLL_swprintf( valueW.Buffer, pathfmtW, dir, name ) * sizeof(WCHAR);
      InitializeObjectAttributes( &attr, &valueW, 0, 0, NULL );
@@ -75,7 +61,7 @@ index 15ccdeb2e637..928edcb04e2c 100644
      if (!status) TRACE( "found %s\n", debugstr_w( valueW.Buffer ));
      RtlFreeUnicodeString( &valueW );
      if (status != STATUS_OBJECT_NAME_NOT_FOUND && status != STATUS_OBJECT_PATH_NOT_FOUND) return status;
-@@ -684,7 +684,7 @@ static NTSTATUS open_nls_data_file( ULONG type, ULONG id, HANDLE *file )
+@@ -678,7 +678,7 @@ static NTSTATUS open_nls_data_file( ULONG type, ULONG id, HANDLE *file )
          wcscat( valueW.Buffer, name );
          valueW.Length = wcslen(valueW.Buffer) * sizeof(WCHAR);
          InitializeObjectAttributes( &attr, &valueW, 0, 0, NULL );
@@ -85,10 +71,10 @@ index 15ccdeb2e637..928edcb04e2c 100644
      }
      RtlFreeUnicodeString( &valueW );
 diff --git a/dlls/ntdll/ntdll_misc.h b/dlls/ntdll/ntdll_misc.h
-index 9091d1ae8c77..f8e81ae49eaf 100644
+index af30044ad1f..d7076c7a2b8 100644
 --- a/dlls/ntdll/ntdll_misc.h
 +++ b/dlls/ntdll/ntdll_misc.h
-@@ -329,4 +329,12 @@ static inline void ascii_to_unicode( WCHAR *dst, const char *src, size_t len )
+@@ -282,4 +282,12 @@ static inline void ascii_to_unicode( WCHAR *dst, const char *src, size_t len )
      while (len--) *dst++ = (unsigned char)*src++;
  }
  
@@ -102,10 +88,10 @@ index 9091d1ae8c77..f8e81ae49eaf 100644
 +
  #endif
 diff --git a/dlls/ntdll/path.c b/dlls/ntdll/path.c
-index 32e1f951af5c..71ae44dd4988 100644
+index 5f4eb11316f..d2112d1af0d 100644
 --- a/dlls/ntdll/path.c
 +++ b/dlls/ntdll/path.c
-@@ -1020,7 +1020,7 @@ NTSTATUS WINAPI RtlSetCurrentDirectory_U(const UNICODE_STRING* dir)
+@@ -929,7 +929,7 @@ NTSTATUS WINAPI RtlSetCurrentDirectory_U(const UNICODE_STRING* dir)
      attr.SecurityDescriptor = NULL;
      attr.SecurityQualityOfService = NULL;
  
@@ -115,10 +101,10 @@ index 32e1f951af5c..71ae44dd4988 100644
      if (nts != STATUS_SUCCESS) goto out;
  
 diff --git a/dlls/ntdll/process.c b/dlls/ntdll/process.c
-index 884141da060c..32a1f5107f06 100644
+index 533fe963cae..fd0e86ce147 100644
 --- a/dlls/ntdll/process.c
 +++ b/dlls/ntdll/process.c
-@@ -1357,7 +1357,7 @@ static NTSTATUS get_pe_file_info( UNICODE_STRING *path, ULONG attributes,
+@@ -396,7 +396,7 @@ static NTSTATUS get_pe_file_info( UNICODE_STRING *path, ULONG attributes,
  
      memset( info, 0, sizeof(*info) );
      InitializeObjectAttributes( &attr, path, attributes, 0, 0 );
@@ -128,5 +114,5 @@ index 884141da060c..32a1f5107f06 100644
      {
          BOOL is_64bit;
 -- 
-2.26.2
+2.27.0
 
 
diff --git a/patches/ws2_32-WSACleanup/0002-ws2_32-Invalidate-client-side-file-descriptor-cache-.patch b/patches/ws2_32-WSACleanup/0002-ws2_32-Invalidate-client-side-file-descriptor-cache-.patch
index 52165cb8b..5a1970a0d 100644
--- a/patches/ws2_32-WSACleanup/0002-ws2_32-Invalidate-client-side-file-descriptor-cache-.patch
+++ b/patches/ws2_32-WSACleanup/0002-ws2_32-Invalidate-client-side-file-descriptor-cache-.patch
@@ -1,4 +1,4 @@
-From 679dcbe5add05885cf675a43b529e569f8b5c8af Mon Sep 17 00:00:00 2001
+From 87580d2eef0c3d91a89be07e912dea3053c26d71 Mon Sep 17 00:00:00 2001
 From: Sebastian Lackner <sebastian@fds-team.de>
 Date: Sun, 6 Sep 2015 12:41:17 +0200
 Subject: [PATCH] ws2_32: Invalidate client-side file descriptor cache in
@@ -10,11 +10,11 @@ Subject: [PATCH] ws2_32: Invalidate client-side file descriptor cache in
  dlls/ntdll/unix/loader.c       |  1 +
  dlls/ntdll/unix/server.c       | 20 ++++++++++++++++++++
  dlls/ntdll/unix/unix_private.h |  1 +
- dlls/ntdll/unixlib.h           |  3 ++-
+ dlls/ntdll/unixlib.h           |  1 +
  dlls/ws2_32/socket.c           |  1 +
  dlls/ws2_32/tests/sock.c       |  5 +----
  include/wine/server.h          |  1 +
- 9 files changed, 36 insertions(+), 5 deletions(-)
+ 9 files changed, 35 insertions(+), 4 deletions(-)
 
 diff --git a/dlls/ntdll/ntdll.spec b/dlls/ntdll/ntdll.spec
 index a9422723b71..e4f2f0e9c2b 100644
@@ -48,10 +48,10 @@ index 9e1cc85a36e..3f4ba60b7bb 100644
  /***********************************************************************
   *           wine_server_release_fd   (NTDLL.@)
 diff --git a/dlls/ntdll/unix/loader.c b/dlls/ntdll/unix/loader.c
-index 0d4313089d6..1d288770573 100644
+index 91b98c44b3f..105dc07c085 100644
 --- a/dlls/ntdll/unix/loader.c
 +++ b/dlls/ntdll/unix/loader.c
-@@ -955,6 +955,7 @@ static struct unix_funcs unix_funcs =
+@@ -974,6 +974,7 @@ static struct unix_funcs unix_funcs =
      exec_process,
      wine_server_call,
      server_send_fd,
@@ -60,10 +60,10 @@ index 0d4313089d6..1d288770573 100644
      server_fd_to_handle,
      server_handle_to_fd,
 diff --git a/dlls/ntdll/unix/server.c b/dlls/ntdll/unix/server.c
-index 5faca657783..2e278480896 100644
+index a4d1bdf9373..eacc38c984d 100644
 --- a/dlls/ntdll/unix/server.c
 +++ b/dlls/ntdll/unix/server.c
-@@ -1003,6 +1003,26 @@ static int remove_fd_from_cache( HANDLE handle )
+@@ -1001,6 +1001,26 @@ static int remove_fd_from_cache( HANDLE handle )
      return fd;
  }
  
@@ -91,10 +91,10 @@ index 5faca657783..2e278480896 100644
  /***********************************************************************
   *           server_get_unix_fd
 diff --git a/dlls/ntdll/unix/unix_private.h b/dlls/ntdll/unix/unix_private.h
-index 2d4996a12f2..f19c8924008 100644
+index 9361092f0f1..fc5269ed1ec 100644
 --- a/dlls/ntdll/unix/unix_private.h
 +++ b/dlls/ntdll/unix/unix_private.h
-@@ -96,6 +96,7 @@ extern void CDECL virtual_release_address_space(void) DECLSPEC_HIDDEN;
+@@ -100,6 +100,7 @@ extern void CDECL virtual_release_address_space(void) DECLSPEC_HIDDEN;
  extern void CDECL virtual_set_large_address_space(void) DECLSPEC_HIDDEN;
  
  extern void CDECL server_send_fd( int fd ) DECLSPEC_HIDDEN;
@@ -103,19 +103,10 @@ index 2d4996a12f2..f19c8924008 100644
                                       int *needs_close, enum server_fd_type *type,
                                       unsigned int *options ) DECLSPEC_HIDDEN;
 diff --git a/dlls/ntdll/unixlib.h b/dlls/ntdll/unixlib.h
-index 7fd483dcabe..dbe68a1b486 100644
+index 4169e3e8ece..0709c7e7441 100644
 --- a/dlls/ntdll/unixlib.h
 +++ b/dlls/ntdll/unixlib.h
-@@ -28,7 +28,7 @@ struct ldt_copy;
- struct msghdr;
- 
- /* increment this when you change the function table */
--#define NTDLL_UNIXLIB_VERSION 51
-+#define NTDLL_UNIXLIB_VERSION 52
- 
- struct unix_funcs
- {
-@@ -290,6 +290,7 @@ struct unix_funcs
+@@ -291,6 +291,7 @@ struct unix_funcs
      /* server functions */
      unsigned int  (CDECL *server_call)( void *req_ptr );
      void          (CDECL *server_send_fd)( int fd );

diff --git a/patches/advapi32-Token_Integrity_Level/0006-ntdll-Add-function-to-create-new-tokens-for-elevatio.patch b/patches/advapi32-Token_Integrity_Level/0006-ntdll-Add-function-to-create-new-tokens-for-elevatio.patch
index be3a6b2f3..d3e436cd7 100644
--- a/patches/advapi32-Token_Integrity_Level/0006-ntdll-Add-function-to-create-new-tokens-for-elevatio.patch
+++ b/patches/advapi32-Token_Integrity_Level/0006-ntdll-Add-function-to-create-new-tokens-for-elevatio.patch
@@ -1,4 +1,4 @@
-From 2366247c3c27b1b815420c54ce4f94458b580686 Mon Sep 17 00:00:00 2001
+From 5119eda2439a1fb81042f85ec76e5e5794ab4182 Mon Sep 17 00:00:00 2001
 From: =?UTF-8?q?Michael=20M=C3=BCller?= <michael@fds-team.de>
 Date: Sat, 5 Aug 2017 01:45:29 +0200
 Subject: [PATCH] ntdll: Add function to create new tokens for elevation
@@ -7,11 +7,11 @@ Subject: [PATCH] ntdll: Add function to create new tokens for elevation
 ---
  dlls/ntdll/ntdll.spec   |  3 ++
  dlls/ntdll/ntdll_misc.h |  3 ++
- dlls/ntdll/process.c    | 26 +++++++++++++
+ dlls/ntdll/process.c    | 18 +++++++++
  server/protocol.def     |  8 ++++
  server/security.h       |  1 +
  server/token.c          | 84 +++++++++++++++++++++++++++++++++++++++++
- 6 files changed, 125 insertions(+)
+ 6 files changed, 117 insertions(+)
 
 diff --git a/dlls/ntdll/ntdll.spec b/dlls/ntdll/ntdll.spec
 index 0d19e12768f..e313d5807b3 100644
@@ -42,10 +42,10 @@ index 2de9553f5c4..84801ab2f25 100644
  extern const char *build_dir DECLSPEC_HIDDEN;
  extern const char *data_dir DECLSPEC_HIDDEN;
 diff --git a/dlls/ntdll/process.c b/dlls/ntdll/process.c
-index a14b24219fc..3d4887d89fc 100644
+index a14b24219fc..5d50a7a1363 100644
 --- a/dlls/ntdll/process.c
 +++ b/dlls/ntdll/process.c
-@@ -108,6 +108,32 @@ HANDLE CDECL __wine_make_process_system(void)
+@@ -108,6 +108,24 @@ HANDLE CDECL __wine_make_process_system(void)
      return ret;
  }
  
@@ -66,14 +66,6 @@ index a14b24219fc..3d4887d89fc 100644
 +    SERVER_END_REQ;
 +    return ret;
 +}
-+
-+static UINT process_error_mode;
-+
-+#define UNIMPLEMENTED_INFO_CLASS(c) \
-+    case c: \
-+        FIXME("(process=%p) Unimplemented information class: " #c "\n", ProcessHandle); \
-+        ret = STATUS_INVALID_INFO_CLASS; \
-+        break
 +
  ULONG_PTR get_system_affinity_mask(void)
  {

diff --git a/patches/advapi32-Token_Integrity_Level/0006-ntdll-Add-function-to-create-new-tokens-for-elevatio.patch b/patches/advapi32-Token_Integrity_Level/0006-ntdll-Add-function-to-create-new-tokens-for-elevatio.patch
index 08d0b4956..be3a6b2f3 100644
--- a/patches/advapi32-Token_Integrity_Level/0006-ntdll-Add-function-to-create-new-tokens-for-elevatio.patch
+++ b/patches/advapi32-Token_Integrity_Level/0006-ntdll-Add-function-to-create-new-tokens-for-elevatio.patch
@@ -1,4 +1,4 @@
-From 90474eb9f6583f2e8fe0314cfa0b0dc04797833b Mon Sep 17 00:00:00 2001
+From 2366247c3c27b1b815420c54ce4f94458b580686 Mon Sep 17 00:00:00 2001
 From: =?UTF-8?q?Michael=20M=C3=BCller?= <michael@fds-team.de>
 Date: Sat, 5 Aug 2017 01:45:29 +0200
 Subject: [PATCH] ntdll: Add function to create new tokens for elevation
@@ -7,17 +7,17 @@ Subject: [PATCH] ntdll: Add function to create new tokens for elevation
 ---
  dlls/ntdll/ntdll.spec   |  3 ++
  dlls/ntdll/ntdll_misc.h |  3 ++
- dlls/ntdll/process.c    | 18 +++++++++
+ dlls/ntdll/process.c    | 26 +++++++++++++
  server/protocol.def     |  8 ++++
  server/security.h       |  1 +
  server/token.c          | 84 +++++++++++++++++++++++++++++++++++++++++
- 6 files changed, 117 insertions(+)
+ 6 files changed, 125 insertions(+)
 
 diff --git a/dlls/ntdll/ntdll.spec b/dlls/ntdll/ntdll.spec
-index 1ebe07fc08c..7a19674b2f3 100644
+index 0d19e12768f..e313d5807b3 100644
 --- a/dlls/ntdll/ntdll.spec
 +++ b/dlls/ntdll/ntdll.spec
-@@ -1586,6 +1586,9 @@
+@@ -1594,6 +1594,9 @@
  # Virtual memory
  @ cdecl __wine_locked_recvmsg(long ptr long)
  
@@ -28,10 +28,10 @@ index 1ebe07fc08c..7a19674b2f3 100644
  @ cdecl wine_get_version() NTDLL_wine_get_version
  @ cdecl wine_get_build_id() NTDLL_wine_get_build_id
 diff --git a/dlls/ntdll/ntdll_misc.h b/dlls/ntdll/ntdll_misc.h
-index 27e7141bc65..4baf8a3967b 100644
+index 2de9553f5c4..84801ab2f25 100644
 --- a/dlls/ntdll/ntdll_misc.h
 +++ b/dlls/ntdll/ntdll_misc.h
-@@ -107,6 +107,9 @@ extern int __wine_main_argc;
+@@ -89,6 +89,9 @@ extern int __wine_main_argc;
  extern char **__wine_main_argv;
  extern WCHAR **__wine_main_wargv;
  
@@ -42,10 +42,10 @@ index 27e7141bc65..4baf8a3967b 100644
  extern const char *build_dir DECLSPEC_HIDDEN;
  extern const char *data_dir DECLSPEC_HIDDEN;
 diff --git a/dlls/ntdll/process.c b/dlls/ntdll/process.c
-index 6c5f722b2a6..df81e061e7b 100644
+index a14b24219fc..3d4887d89fc 100644
 --- a/dlls/ntdll/process.c
 +++ b/dlls/ntdll/process.c
-@@ -119,6 +119,24 @@ HANDLE CDECL __wine_make_process_system(void)
+@@ -108,6 +108,32 @@ HANDLE CDECL __wine_make_process_system(void)
      return ret;
  }
  
@@ -67,11 +67,19 @@ index 6c5f722b2a6..df81e061e7b 100644
 +    return ret;
 +}
 +
- static UINT process_error_mode;
- 
- #define UNIMPLEMENTED_INFO_CLASS(c) \
++static UINT process_error_mode;
++
++#define UNIMPLEMENTED_INFO_CLASS(c) \
++    case c: \
++        FIXME("(process=%p) Unimplemented information class: " #c "\n", ProcessHandle); \
++        ret = STATUS_INVALID_INFO_CLASS; \
++        break
++
+ ULONG_PTR get_system_affinity_mask(void)
+ {
+     ULONG num_cpus = NtCurrentTeb()->Peb->NumberOfProcessors;
 diff --git a/server/protocol.def b/server/protocol.def
-index c53ceb50d50..947a3c971f5 100644
+index 6e0f309450a..7315f8ac4ea 100644
 --- a/server/protocol.def
 +++ b/server/protocol.def
 @@ -3755,6 +3755,14 @@ struct handle_info
@@ -215,5 +223,5 @@ index c4f1cd943c2..970ed1838da 100644
 +    }
 +}
 -- 
-2.26.2
+2.27.0
 
diff --git a/patches/advapi32-Token_Integrity_Level/0010-server-Implement-support-for-creating-processes-usin.patch b/patches/advapi32-Token_Integrity_Level/0010-server-Implement-support-for-creating-processes-usin.patch
index 291992dfb..9021232be 100644
--- a/patches/advapi32-Token_Integrity_Level/0010-server-Implement-support-for-creating-processes-usin.patch
+++ b/patches/advapi32-Token_Integrity_Level/0010-server-Implement-support-for-creating-processes-usin.patch
@@ -1,4 +1,4 @@
-From 35487aacbfe53d2584e83d4f59e119577901d4ea Mon Sep 17 00:00:00 2001
+From 9c61f6acfa2c43e43f07fae1a5cd447573b9529b Mon Sep 17 00:00:00 2001
 From: =?UTF-8?q?Michael=20M=C3=BCller?= <michael@fds-team.de>
 Date: Sun, 6 Aug 2017 02:08:05 +0200
 Subject: [PATCH] server: Implement support for creating processes using a
@@ -6,7 +6,7 @@ Subject: [PATCH] server: Implement support for creating processes using a
 
 ---
  dlls/kernelbase/process.c | 24 +++++++++++++-----------
- dlls/ntdll/process.c      |  1 +
+ dlls/ntdll/unix/process.c |  1 +
  server/process.c          | 39 +++++++++++++++++++++++++++++++++++----
  server/process.h          |  2 +-
  server/protocol.def       |  1 +
@@ -117,11 +117,11 @@ index a3b168543fc..b5c8b47239d 100644
          }
          break;
      }
-diff --git a/dlls/ntdll/process.c b/dlls/ntdll/process.c
-index f7f1b7c68fd..66961530de1 100644
---- a/dlls/ntdll/process.c
-+++ b/dlls/ntdll/process.c
-@@ -1712,6 +1712,7 @@ NTSTATUS WINAPI NtCreateUserProcess( HANDLE *process_handle_ptr, HANDLE *thread_
+diff --git a/dlls/ntdll/unix/process.c b/dlls/ntdll/unix/process.c
+index cca6c2747bf..379a0036b63 100644
+--- a/dlls/ntdll/unix/process.c
++++ b/dlls/ntdll/unix/process.c
+@@ -827,6 +827,7 @@ NTSTATUS WINAPI NtCreateUserProcess( HANDLE *process_handle_ptr, HANDLE *thread_
          req->access         = process_access;
          req->cpu            = pe_info.cpu;
          req->info_size      = startup_info_size;
@@ -306,5 +306,5 @@ index 1c1d49989b3..2f466aa1b25 100644
  {
      GENERIC_MAPPING mapping;
 -- 
-2.26.2
+2.27.0
 
diff --git a/patches/ntdll-NtDevicePath/0001-ntdll-Implement-opening-files-through-nt-device-path.patch b/patches/ntdll-NtDevicePath/0001-ntdll-Implement-opening-files-through-nt-device-path.patch
index 042fb77af..e39ce2ace 100644
--- a/patches/ntdll-NtDevicePath/0001-ntdll-Implement-opening-files-through-nt-device-path.patch
+++ b/patches/ntdll-NtDevicePath/0001-ntdll-Implement-opening-files-through-nt-device-path.patch
@@ -1,4 +1,4 @@
-From c8bd4fe87f7a49a3da2c53ead6df94a9172e7bbb Mon Sep 17 00:00:00 2001
+From 351c405a950985a6d5a2262ce88b46ecf83b03ff Mon Sep 17 00:00:00 2001
 From: =?UTF-8?q?Michael=20M=C3=BCller?= <michael@fds-team.de>
 Date: Fri, 26 May 2017 05:17:17 +0200
 Subject: [PATCH] ntdll: Implement opening files through nt device paths.
@@ -9,7 +9,7 @@ Subject: [PATCH] ntdll: Implement opening files through nt device paths.
  2 files changed, 147 insertions(+), 10 deletions(-)
 
 diff --git a/dlls/ntdll/tests/file.c b/dlls/ntdll/tests/file.c
-index 184b7cdad59..87b5945a4e2 100644
+index e7918140323..7247f792941 100644
 --- a/dlls/ntdll/tests/file.c
 +++ b/dlls/ntdll/tests/file.c
 @@ -135,18 +135,22 @@ static void WINAPI apc( void *arg, IO_STATUS_BLOCK *iosb, ULONG reserved )
@@ -63,10 +63,10 @@ index 184b7cdad59..87b5945a4e2 100644
  
  static void open_file_test(void)
 diff --git a/dlls/ntdll/unix/file.c b/dlls/ntdll/unix/file.c
-index 31a6c761c7c..83e4810f00b 100644
+index 22f34a1f008..72fea5b8aab 100644
 --- a/dlls/ntdll/unix/file.c
 +++ b/dlls/ntdll/unix/file.c
-@@ -2818,16 +2818,10 @@ NTSTATUS CDECL nt_to_unix_file_name_attr( const OBJECT_ATTRIBUTES *attr, ANSI_ST
+@@ -3360,16 +3360,10 @@ static NTSTATUS nt_to_unix_file_name_attr( const OBJECT_ATTRIBUTES *attr, ANSI_S
  
  
  /******************************************************************************
@@ -86,7 +86,7 @@ index 31a6c761c7c..83e4810f00b 100644
  {
      static const WCHAR unixW[] = {'u','n','i','x'};
      static const WCHAR pipeW[] = {'p','i','p','e'};
-@@ -2940,6 +2934,126 @@ NTSTATUS CDECL nt_to_unix_file_name( const UNICODE_STRING *nameW, ANSI_STRING *u
+@@ -3482,6 +3476,126 @@ NTSTATUS CDECL nt_to_unix_file_name( const UNICODE_STRING *nameW, ANSI_STRING *u
      return status;
  }
  
@@ -211,8 +211,8 @@ index 31a6c761c7c..83e4810f00b 100644
 +    return status;
 +}
  
- /***********************************************************************
-  *           unmount_device
+ /******************************************************************
+  *           unix_to_nt_file_name
 -- 
 2.27.0
 
diff --git a/patches/ntdll-ProcessQuotaLimits/0001-ntdll-Add-fake-data-implementation-for-ProcessQuotaL.patch b/patches/ntdll-ProcessQuotaLimits/0001-ntdll-Add-fake-data-implementation-for-ProcessQuotaL.patch
index 1a617f26f..529b39638 100644
--- a/patches/ntdll-ProcessQuotaLimits/0001-ntdll-Add-fake-data-implementation-for-ProcessQuotaL.patch
+++ b/patches/ntdll-ProcessQuotaLimits/0001-ntdll-Add-fake-data-implementation-for-ProcessQuotaL.patch
@@ -1,49 +1,50 @@
-From c7ed817b9c0b4edf7969ec05f1f3e081a04155d9 Mon Sep 17 00:00:00 2001
+From 8c7d326435794a72c70e05acdff945edf506ec3c Mon Sep 17 00:00:00 2001
 From: Qian Hong <qhong@codeweavers.com>
 Date: Wed, 21 Oct 2015 06:23:22 +0800
-Subject: ntdll: Add fake data implementation for ProcessQuotaLimits class.
+Subject: [PATCH] ntdll: Add fake data implementation for ProcessQuotaLimits
+ class.
 
 ---
- dlls/ntdll/process.c | 31 ++++++++++++++++++++++++++++++-
- 1 file changed, 30 insertions(+), 1 deletion(-)
+ dlls/ntdll/unix/process.c | 32 +++++++++++++++++++++++++++++++-
+ 1 file changed, 31 insertions(+), 1 deletion(-)
 
-diff --git a/dlls/ntdll/process.c b/dlls/ntdll/process.c
-index 37c08f1..088834e 100644
---- a/dlls/ntdll/process.c
-+++ b/dlls/ntdll/process.c
-@@ -134,7 +134,6 @@ NTSTATUS WINAPI SYSCALL(NtQueryInformationProcess)(
+diff --git a/dlls/ntdll/unix/process.c b/dlls/ntdll/unix/process.c
+index 93d7e7b0140..ae3ab9a8058 100644
+--- a/dlls/ntdll/unix/process.c
++++ b/dlls/ntdll/unix/process.c
+@@ -1050,7 +1050,6 @@ NTSTATUS WINAPI NtQueryInformationProcess( HANDLE handle, PROCESSINFOCLASS class
  
-     switch (ProcessInformationClass) 
+     switch (class)
      {
 -    UNIMPLEMENTED_INFO_CLASS(ProcessQuotaLimits);
      UNIMPLEMENTED_INFO_CLASS(ProcessBasePriority);
      UNIMPLEMENTED_INFO_CLASS(ProcessRaisePriority);
      UNIMPLEMENTED_INFO_CLASS(ProcessExceptionPort);
-@@ -199,6 +198,36 @@ NTSTATUS WINAPI SYSCALL(NtQueryInformationProcess)(
-             }
+@@ -1109,6 +1108,37 @@ NTSTATUS WINAPI NtQueryInformationProcess( HANDLE handle, PROCESSINFOCLASS class
          }
          break;
+ 
 +    case ProcessQuotaLimits:
 +        {
 +            QUOTA_LIMITS pqli;
 +
-+            if (ProcessInformationLength >= sizeof(QUOTA_LIMITS))
++            if (size >= sizeof(QUOTA_LIMITS))
 +            {
-+                if (!ProcessInformation)
++                if (!info)
 +                    ret = STATUS_ACCESS_VIOLATION;
-+                else if (!ProcessHandle)
++                else if (!handle)
 +                    ret = STATUS_INVALID_HANDLE;
 +                else
 +                {
 +                    /* FIXME : real data */
 +                    memset(&pqli, 0, sizeof(QUOTA_LIMITS));
 +
-+                    memcpy(ProcessInformation, &pqli, sizeof(QUOTA_LIMITS));
++                    memcpy(info, &pqli, sizeof(QUOTA_LIMITS));
 +
 +                    len = sizeof(QUOTA_LIMITS);
 +                }
 +
-+                if (ProcessInformationLength > sizeof(QUOTA_LIMITS))
++                if (size > sizeof(QUOTA_LIMITS))
 +                    ret = STATUS_INFO_LENGTH_MISMATCH;
 +            }
 +            else
@@ -53,9 +54,10 @@ index 37c08f1..088834e 100644
 +            }
 +        }
 +        break;
++
      case ProcessIoCounters:
          {
              IO_COUNTERS pii;
 -- 
-2.6.1
+2.27.0
 
diff --git a/patches/ntdll-Syscall_Emulation/0001-ntdll-Support-x86_64-syscall-emulation.patch b/patches/ntdll-Syscall_Emulation/0001-ntdll-Support-x86_64-syscall-emulation.patch
index b2ffa77b0..0a88ded4c 100644
--- a/patches/ntdll-Syscall_Emulation/0001-ntdll-Support-x86_64-syscall-emulation.patch
+++ b/patches/ntdll-Syscall_Emulation/0001-ntdll-Support-x86_64-syscall-emulation.patch
@@ -1,4 +1,4 @@
-From d389571ffefb1cabd3b23d1c966dbc237d042e87 Mon Sep 17 00:00:00 2001
+From a88ac4ac286c6c345efc3722d6fd4cc5b6ad29ca Mon Sep 17 00:00:00 2001
 From: Paul Gofman <pgofman@codeweavers.com>
 Date: Mon, 30 Dec 2019 13:27:53 +0300
 Subject: [PATCH] ntdll: Support x86_64 syscall emulation.
@@ -19,10 +19,10 @@ is used for trapping syscalls.
  7 files changed, 135 insertions(+), 7 deletions(-)
 
 diff --git a/configure.ac b/configure.ac
-index 8a76b74e83d..d67c0be3617 100644
+index d57b0713856..7bd3da1e175 100644
 --- a/configure.ac
 +++ b/configure.ac
-@@ -464,6 +464,7 @@ AC_CHECK_HEADERS(\
+@@ -474,6 +474,7 @@ AC_CHECK_HEADERS(\
  	linux/joystick.h \
  	linux/major.h \
  	linux/param.h \
@@ -31,10 +31,10 @@ index 8a76b74e83d..d67c0be3617 100644
  	linux/types.h \
  	linux/ucdrom.h \
 diff --git a/dlls/ntdll/thread.c b/dlls/ntdll/thread.c
-index 8295b7559e7..052035750cf 100644
+index 18db4fd4780..e4f0293ab5a 100644
 --- a/dlls/ntdll/thread.c
 +++ b/dlls/ntdll/thread.c
-@@ -179,6 +179,12 @@ void __wine_syscall_dispatcher( void )
+@@ -229,6 +229,12 @@ void __wine_syscall_dispatcher( void )
  }
  #endif
  
@@ -47,7 +47,7 @@ index 8295b7559e7..052035750cf 100644
  void *WINAPI __wine_fakedll_dispatcher( const char *module, ULONG ord )
  {
      UNICODE_STRING name;
-@@ -222,7 +228,7 @@ void *WINAPI __wine_fakedll_dispatcher( const char *module, ULONG ord )
+@@ -272,7 +278,7 @@ void *WINAPI __wine_fakedll_dispatcher( const char *module, ULONG ord )
  TEB *thread_init( SIZE_T *info_size, BOOL *suspend )
  {
      TEB *teb = unix_funcs->init_threading( &nb_threads, &__wine_ldt_copy, info_size, suspend, &server_cpus,
@@ -194,7 +194,7 @@ index 1d1b879310e..c8a8d1d1d33 100644
  
   error:
 diff --git a/dlls/ntdll/unix/thread.c b/dlls/ntdll/unix/thread.c
-index 0bffa4029c1..03dc27b083c 100644
+index 0279690806c..6969a528eeb 100644
 --- a/dlls/ntdll/unix/thread.c
 +++ b/dlls/ntdll/unix/thread.c
 @@ -58,6 +58,9 @@ WINE_DEFAULT_DEBUG_CHANNEL(seh);
@@ -227,10 +227,10 @@ index 0bffa4029c1..03dc27b083c 100644
      teb = virtual_alloc_first_teb();
      teb->WOW32Reserved = syscall_handler;
 diff --git a/dlls/ntdll/unix/unix_private.h b/dlls/ntdll/unix/unix_private.h
-index b7b66b6b440..23c434dd7aa 100644
+index 19196dbb296..e99e89864c2 100644
 --- a/dlls/ntdll/unix/unix_private.h
 +++ b/dlls/ntdll/unix/unix_private.h
-@@ -111,7 +111,8 @@ extern void CDECL server_release_fd( HANDLE handle, int unix_fd ) DECLSPEC_HIDDE
+@@ -108,7 +108,8 @@ extern void CDECL server_release_fd( HANDLE handle, int unix_fd ) DECLSPEC_HIDDE
  extern void CDECL server_init_process_done( void *relay ) DECLSPEC_HIDDEN;
  extern TEB * CDECL init_threading( int *nb_threads_ptr, struct ldt_copy **ldt_copy, SIZE_T *size,
                                     BOOL *suspend, unsigned int *cpus, BOOL *wow64,
@@ -240,7 +240,7 @@ index b7b66b6b440..23c434dd7aa 100644
  extern void CDECL DECLSPEC_NORETURN exit_thread( int status ) DECLSPEC_HIDDEN;
  extern void CDECL DECLSPEC_NORETURN exit_process( int status ) DECLSPEC_HIDDEN;
  extern NTSTATUS CDECL get_thread_ldt_entry( HANDLE handle, void *data, ULONG len, ULONG *ret_len ) DECLSPEC_HIDDEN;
-@@ -147,6 +148,9 @@ extern char **build_envp( const WCHAR *envW ) DECLSPEC_HIDDEN;
+@@ -140,6 +141,9 @@ extern char **build_envp( const WCHAR *envW ) DECLSPEC_HIDDEN;
  extern NTSTATUS exec_wineloader( char **argv, int socketfd, int is_child_64bit,
                                   ULONGLONG res_start, ULONGLONG res_end ) DECLSPEC_HIDDEN;
  
@@ -251,19 +251,19 @@ index b7b66b6b440..23c434dd7aa 100644
  extern void server_enter_uninterrupted_section( RTL_CRITICAL_SECTION *cs, sigset_t *sigset ) DECLSPEC_HIDDEN;
  extern void server_leave_uninterrupted_section( RTL_CRITICAL_SECTION *cs, sigset_t *sigset ) DECLSPEC_HIDDEN;
 diff --git a/dlls/ntdll/unixlib.h b/dlls/ntdll/unixlib.h
-index dae93ab1632..5103e50d7ff 100644
+index b09f4942f05..b952af4596a 100644
 --- a/dlls/ntdll/unixlib.h
 +++ b/dlls/ntdll/unixlib.h
 @@ -28,7 +28,7 @@ struct ldt_copy;
  struct msghdr;
  
  /* increment this when you change the function table */
--#define NTDLL_UNIXLIB_VERSION 48
-+#define NTDLL_UNIXLIB_VERSION 49
+-#define NTDLL_UNIXLIB_VERSION 53
++#define NTDLL_UNIXLIB_VERSION 54
  
  struct unix_funcs
  {
-@@ -253,7 +253,8 @@ struct unix_funcs
+@@ -281,7 +281,8 @@ struct unix_funcs
  
      /* thread/process functions */
      TEB *         (CDECL *init_threading)( int *nb_threads_ptr, struct ldt_copy **ldt_copy, SIZE_T *size,
diff --git a/patches/ntdll-SystemModuleInformation/0002-ntdll-Return-ntdll.dll-as-the-first-entry-for-System.patch b/patches/ntdll-SystemModuleInformation/0002-ntdll-Return-ntdll.dll-as-the-first-entry-for-System.patch
index dba4a4a44..b7bf86c5b 100644
--- a/patches/ntdll-SystemModuleInformation/0002-ntdll-Return-ntdll.dll-as-the-first-entry-for-System.patch
+++ b/patches/ntdll-SystemModuleInformation/0002-ntdll-Return-ntdll.dll-as-the-first-entry-for-System.patch
@@ -1,4 +1,4 @@
-From 223c2c82eba0aacee744f6d9fcf9189cff2fd1e7 Mon Sep 17 00:00:00 2001
+From 511be7951f851cda2b2119a88b7f1895598a7165 Mon Sep 17 00:00:00 2001
 From: Andrew Wesie <awesie@gmail.com>
 Date: Fri, 12 Apr 2019 20:04:03 -0500
 Subject: [PATCH] ntdll: Return ntdll.dll as the first entry for
@@ -9,11 +9,11 @@ Subject: [PATCH] ntdll: Return ntdll.dll as the first entry for
  1 file changed, 28 insertions(+), 1 deletion(-)
 
 diff --git a/dlls/ntdll/nt.c b/dlls/ntdll/nt.c
-index f44c232f4e9..ebb8c94bd11 100644
+index 44ffef6439b..c47219b1d33 100644
 --- a/dlls/ntdll/nt.c
 +++ b/dlls/ntdll/nt.c
-@@ -2546,6 +2546,33 @@ BOOLEAN WINAPI RtlIsProcessorFeaturePresent( UINT feature )
-     return feature < PROCESSOR_FEATURE_MAX && user_shared_data->ProcessorFeatures[feature];
+@@ -2665,6 +2665,33 @@ static BOOL read_process_memory_stats(int unix_pid, VM_COUNTERS *pvmi)
+     return ret;
  }
  
 +static void get_ntdll_system_module(SYSTEM_MODULE *sm)
@@ -46,7 +46,7 @@ index f44c232f4e9..ebb8c94bd11 100644
  /******************************************************************************
   * NtQuerySystemInformation [NTDLL.@]
   * ZwQuerySystemInformation [NTDLL.@]
-@@ -2882,7 +2909,7 @@ NTSTATUS WINAPI NtQuerySystemInformation(
+@@ -3015,7 +3042,7 @@ NTSTATUS WINAPI NtQuerySystemInformation(
  
              FIXME("returning fake driver list\n");
              smi->ModulesCount = 1;
@@ -56,5 +56,5 @@ index f44c232f4e9..ebb8c94bd11 100644
          }
          break;
 -- 
-2.26.0
+2.27.0
 
diff --git a/patches/ntdll-ThreadTime/0006-ntdll-Fill-process-virtual-memory-counters-in-NtQuer.patch b/patches/ntdll-ThreadTime/0006-ntdll-Fill-process-virtual-memory-counters-in-NtQuer.patch
index 829d8f4dd..cd1965ced 100644
--- a/patches/ntdll-ThreadTime/0006-ntdll-Fill-process-virtual-memory-counters-in-NtQuer.patch
+++ b/patches/ntdll-ThreadTime/0006-ntdll-Fill-process-virtual-memory-counters-in-NtQuer.patch
@@ -1,4 +1,4 @@
-From ee29bbfa7e10de295db39ab6b89f2175d00692c5 Mon Sep 17 00:00:00 2001
+From 3d5a92cbec870c2b129668b455012bf5b2693ccd Mon Sep 17 00:00:00 2001
 From: =?UTF-8?q?Michael=20M=C3=BCller?= <michael@fds-team.de>
 Date: Thu, 9 Mar 2017 22:56:45 +0100
 Subject: [PATCH] ntdll: Fill process virtual memory counters in
@@ -6,17 +6,61 @@ Subject: [PATCH] ntdll: Fill process virtual memory counters in
 
 FIXME: fill_VM_COUNTERS now uses a different method ... which one is better?
 ---
- dlls/ntdll/nt.c         |  3 +++
- dlls/ntdll/ntdll_misc.h |  1 +
- dlls/ntdll/process.c    |  2 +-
- dlls/ntdll/thread.c     | 36 ++++++++++++++++++++++++++++++++++++
- 4 files changed, 41 insertions(+), 1 deletion(-)
+ dlls/ntdll/nt.c           | 41 +++++++++++++++++++++++++++++++++++++++
+ dlls/ntdll/thread.c       |  1 -
+ dlls/ntdll/unix/process.c | 39 ++++++++++++++++++++++++++++++++++++-
+ 3 files changed, 79 insertions(+), 2 deletions(-)
 
 diff --git a/dlls/ntdll/nt.c b/dlls/ntdll/nt.c
-index cbb7937631d..bb078c1aa21 100644
+index c1c7a126daf..8b450082ada 100644
 --- a/dlls/ntdll/nt.c
 +++ b/dlls/ntdll/nt.c
-@@ -2686,8 +2686,11 @@ NTSTATUS WINAPI NtQuerySystemInformation(
+@@ -2627,6 +2627,44 @@ BOOLEAN WINAPI RtlIsProcessorFeaturePresent( UINT feature )
+     return feature < PROCESSOR_FEATURE_MAX && user_shared_data->ProcessorFeatures[feature];
+ }
+ 
++/* Remove once NtQuerySystemInformation is moved to unix directory */
++static BOOL read_process_memory_stats(int unix_pid, VM_COUNTERS *pvmi)
++{
++    BOOL ret = FALSE;
++#ifdef __linux__
++    unsigned long size, resident, shared, trs, drs, lrs, dt;
++    char buf[512];
++    FILE *fp;
++
++    sprintf( buf, "/proc/%u/statm", unix_pid );
++    if ((fp = fopen( buf, "r" )))
++    {
++        if (fscanf( fp, "%lu %lu %lu %lu %lu %lu %lu",
++            &size, &resident, &shared, &trs, &drs, &lrs, &dt ) == 7)
++        {
++            pvmi->VirtualSize = size * page_size;
++            pvmi->WorkingSetSize = resident * page_size;
++            pvmi->PrivatePageCount = size - shared;
++
++            /* these values are not available through /proc/pid/statm */
++            pvmi->PeakVirtualSize = pvmi->VirtualSize;
++            pvmi->PageFaultCount = 0;
++            pvmi->PeakWorkingSetSize = pvmi->WorkingSetSize;
++            pvmi->QuotaPagedPoolUsage = pvmi->VirtualSize;
++            pvmi->QuotaPeakPagedPoolUsage = pvmi->QuotaPagedPoolUsage;
++            pvmi->QuotaPeakNonPagedPoolUsage = 0;
++            pvmi->QuotaNonPagedPoolUsage = 0;
++            pvmi->PagefileUsage = 0;
++            pvmi->PeakPagefileUsage = 0;
++
++            ret = TRUE;
++        }
++        fclose( fp );
++    }
++#endif
++    return ret;
++}
++
+ /******************************************************************************
+  * NtQuerySystemInformation [NTDLL.@]
+  * ZwQuerySystemInformation [NTDLL.@]
+@@ -2784,8 +2822,11 @@ NTSTATUS WINAPI NtQuerySystemInformation(
                              /* spi->ti will be set later on */
  
                              if (reply->unix_pid != -1)
@@ -28,40 +72,27 @@ index cbb7937631d..bb078c1aa21 100644
                              unix_pid = reply->unix_pid;
                          }
                          len += procstructlen;
-diff --git a/dlls/ntdll/ntdll_misc.h b/dlls/ntdll/ntdll_misc.h
-index 6e77694d87b..d725a678246 100644
---- a/dlls/ntdll/ntdll_misc.h
-+++ b/dlls/ntdll/ntdll_misc.h
-@@ -248,6 +248,7 @@ void     WINAPI LdrInitializeThunk(CONTEXT*,void**,ULONG_PTR,ULONG_PTR);
- /* process / thread time */
- extern BOOL read_process_time(int unix_pid, int unix_tid, unsigned long clk_tck,
-                               LARGE_INTEGER *kernel, LARGE_INTEGER *user) DECLSPEC_HIDDEN;
-+extern BOOL read_process_memory_stats(int unix_pid, VM_COUNTERS *pvmi) DECLSPEC_HIDDEN;
- 
- /* string functions */
- int    __cdecl NTDLL_tolower( int c );
-diff --git a/dlls/ntdll/process.c b/dlls/ntdll/process.c
-index 35937ce6026..b4f2dbc8160 100644
---- a/dlls/ntdll/process.c
-+++ b/dlls/ntdll/process.c
-@@ -192,7 +192,7 @@ static void fill_VM_COUNTERS(VM_COUNTERS* pvmi)
- 
- static void fill_VM_COUNTERS(VM_COUNTERS* pvmi)
- {
--    /* FIXME : real data */
-+    read_process_memory_stats(getpid(), pvmi);
- }
- 
- #endif
 diff --git a/dlls/ntdll/thread.c b/dlls/ntdll/thread.c
-index 14198d77b7b..8ae8251f975 100644
+index 29a9c19b923..320e63416cc 100644
 --- a/dlls/ntdll/thread.c
 +++ b/dlls/ntdll/thread.c
-@@ -381,6 +381,42 @@ NTSTATUS WINAPI NtCreateThreadEx( HANDLE *handle_ptr, ACCESS_MASK access, OBJECT
+@@ -373,7 +373,6 @@ NTSTATUS WINAPI NtCreateThreadEx( HANDLE *handle_ptr, ACCESS_MASK access, OBJECT
                                           flags, zero_bits, stack_commit, stack_reserve, attr_list );
  }
  
-+BOOL read_process_memory_stats(int unix_pid, VM_COUNTERS *pvmi)
+-
+ /***********************************************************************
+  *              RtlCreateUserThread   (NTDLL.@)
+  */
+diff --git a/dlls/ntdll/unix/process.c b/dlls/ntdll/unix/process.c
+index 379a0036b63..210006f4c23 100644
+--- a/dlls/ntdll/unix/process.c
++++ b/dlls/ntdll/unix/process.c
+@@ -989,6 +989,43 @@ static void fill_VM_COUNTERS(VM_COUNTERS* pvmi)
+ #endif
+ }
+ 
++static BOOL read_process_memory_stats(int unix_pid, VM_COUNTERS *pvmi)
 +{
 +    BOOL ret = FALSE;
 +#ifdef __linux__
@@ -97,9 +128,19 @@ index 14198d77b7b..8ae8251f975 100644
 +#endif
 +    return ret;
 +}
++
+ #elif defined(linux)
  
- /***********************************************************************
-  *              RtlCreateUserThread   (NTDLL.@)
+ static void fill_VM_COUNTERS(VM_COUNTERS* pvmi)
+@@ -1024,7 +1061,7 @@ static void fill_VM_COUNTERS(VM_COUNTERS* pvmi)
+ 
+ static void fill_VM_COUNTERS(VM_COUNTERS* pvmi)
+ {
+-    /* FIXME : real data */
++    read_process_memory_stats(getpid(), pvmi);
+ }
+ 
+ #endif
 -- 
-2.26.2
+2.27.0
 
diff --git a/patches/patchinstall.sh b/patches/patchinstall.sh
index 12cccae19..b40a88438 100755
--- a/patches/patchinstall.sh
+++ b/patches/patchinstall.sh
@@ -1881,9 +1881,9 @@ fi
 # | Modified files:
 # |   *	configure.ac, dlls/advapi32/tests/Makefile.in, dlls/advapi32/tests/security.c, dlls/kernelbase/process.c,
 # | 	dlls/ntdll/loader.c, dlls/ntdll/nt.c, dlls/ntdll/ntdll.spec, dlls/ntdll/ntdll_misc.h, dlls/ntdll/process.c,
-# | 	dlls/shell32/shlexec.c, dlls/user32/win.c, programs/runas/Makefile.in, programs/runas/runas.c, programs/runas/runas.h,
-# | 	programs/runas/runas.rc, server/process.c, server/process.h, server/protocol.def, server/request.c, server/security.h,
-# | 	server/token.c
+# | 	dlls/ntdll/unix/process.c, dlls/shell32/shlexec.c, dlls/user32/win.c, programs/runas/Makefile.in,
+# | 	programs/runas/runas.c, programs/runas/runas.h, programs/runas/runas.rc, server/process.c, server/process.h,
+# | 	server/protocol.def, server/request.c, server/security.h, server/token.c
 # |
 if test "$enable_advapi32_Token_Integrity_Level" -eq 1; then
 	patch_apply advapi32-Token_Integrity_Level/0001-advapi32-tests-Extend-security-label-token-integrity.patch
@@ -3455,7 +3455,7 @@ fi
 # |   *	[#20230] Return correct values for GetThreadTimes function
 # |
 # | Modified files:
-# |   *	dlls/ntdll/nt.c, dlls/ntdll/ntdll_misc.h, dlls/ntdll/process.c, dlls/ntdll/thread.c, server/protocol.def,
+# |   *	dlls/ntdll/nt.c, dlls/ntdll/ntdll_misc.h, dlls/ntdll/thread.c, dlls/ntdll/unix/process.c, server/protocol.def,
 # | 	server/snapshot.c, server/thread.c, server/thread.h
 # |
 if test "$enable_ntdll_ThreadTime" -eq 1; then
@@ -3870,7 +3870,7 @@ fi
 # | 	2.x)
 # |
 # | Modified files:
-# |   *	dlls/ntdll/process.c
+# |   *	dlls/ntdll/unix/process.c
 # |
 if test "$enable_ntdll_ProcessQuotaLimits" -eq 1; then
 	patch_apply ntdll-ProcessQuotaLimits/0001-ntdll-Add-fake-data-implementation-for-ProcessQuotaL.patch
diff --git a/patches/winebuild-Fake_Dlls/0003-winebuild-Generate-syscall-thunks-for-ntdll-exports.patch b/patches/winebuild-Fake_Dlls/0003-winebuild-Generate-syscall-thunks-for-ntdll-exports.patch
index 5231062b1..18c61a33d 100644
--- a/patches/winebuild-Fake_Dlls/0003-winebuild-Generate-syscall-thunks-for-ntdll-exports.patch
+++ b/patches/winebuild-Fake_Dlls/0003-winebuild-Generate-syscall-thunks-for-ntdll-exports.patch
@@ -1,4 +1,4 @@
-From 7e13aba360d1dd4d5a09f5b9a624dfa4e61d3ddf Mon Sep 17 00:00:00 2001
+From 51d9c664ba86df86b3fb02a281642b5940cef430 Mon Sep 17 00:00:00 2001
 From: =?UTF-8?q?Michael=20M=C3=BCller?= <michael@fds-team.de>
 Date: Thu, 11 May 2017 05:32:55 +0200
 Subject: [PATCH] winebuild: Generate syscall thunks for ntdll exports.
@@ -22,10 +22,10 @@ Based on a patch by Erich E. Hoover.
  14 files changed, 221 insertions(+), 32 deletions(-)
 
 diff --git a/dlls/ntdll/loader.c b/dlls/ntdll/loader.c
-index a09c17e3b50..d22fd0141c0 100644
+index 99bcff94b3e..06cdf5cd350 100644
 --- a/dlls/ntdll/loader.c
 +++ b/dlls/ntdll/loader.c
-@@ -3812,6 +3812,7 @@ PIMAGE_NT_HEADERS WINAPI RtlImageNtHeader(HMODULE hModule)
+@@ -4020,6 +4020,7 @@ PIMAGE_NT_HEADERS WINAPI RtlImageNtHeader(HMODULE hModule)
      return ret;
  }
  
@@ -33,7 +33,7 @@ index a09c17e3b50..d22fd0141c0 100644
  
  /******************************************************************
   *		LdrInitializeThunk (NTDLL.@)
-@@ -3828,6 +3829,8 @@ void WINAPI LdrInitializeThunk( CONTEXT *context, void **entry, ULONG_PTR unknow
+@@ -4037,6 +4038,8 @@ void WINAPI LdrInitializeThunk( CONTEXT *context, void **entry, ULONG_PTR unknow
      WINE_MODREF *wm;
      LPCWSTR load_path = NtCurrentTeb()->Peb->ProcessParameters->DllPath.Buffer;
  
@@ -65,7 +65,7 @@ index 21cc1b3ead4..18be5693a7d 100644
      }
      return unix_funcs->NtGetContextThread( handle, context );
 diff --git a/dlls/ntdll/tests/exception.c b/dlls/ntdll/tests/exception.c
-index a5e6faa461a..51938bf84cc 100644
+index 1389a542cde..54796476e25 100644
 --- a/dlls/ntdll/tests/exception.c
 +++ b/dlls/ntdll/tests/exception.c
 @@ -1643,6 +1643,8 @@ static void test_thread_context(void)
@@ -78,10 +78,10 @@ index a5e6faa461a..51938bf84cc 100644
      ok( context.SegCs == LOWORD(expect.SegCs), "wrong SegCs %08x/%08x\n", context.SegCs, expect.SegCs );
      ok( context.SegDs == LOWORD(expect.SegDs), "wrong SegDs %08x/%08x\n", context.SegDs, expect.SegDs );
 diff --git a/dlls/ntdll/thread.c b/dlls/ntdll/thread.c
-index 5a6809638ae..c6988ce08e3 100644
+index 64dee4d0c12..2a22f1ca137 100644
 --- a/dlls/ntdll/thread.c
 +++ b/dlls/ntdll/thread.c
-@@ -170,6 +170,14 @@ int __cdecl __wine_dbg_output( const char *str )
+@@ -220,6 +220,14 @@ int __cdecl __wine_dbg_output( const char *str )
      return unix_funcs->dbg_output( str );
  }
  
@@ -96,7 +96,7 @@ index 5a6809638ae..c6988ce08e3 100644
  
  /***********************************************************************
   *           thread_init
-@@ -181,7 +189,7 @@ int __cdecl __wine_dbg_output( const char *str )
+@@ -231,7 +239,7 @@ int __cdecl __wine_dbg_output( const char *str )
  TEB *thread_init( SIZE_T *info_size, BOOL *suspend )
  {
      TEB *teb = unix_funcs->init_threading( &nb_threads, &__wine_ldt_copy, info_size, suspend, &server_cpus,
@@ -106,7 +106,7 @@ index 5a6809638ae..c6988ce08e3 100644
      peb = teb->Peb;
      peb->FastPebLock        = &peb_lock;
 diff --git a/dlls/ntdll/unix/thread.c b/dlls/ntdll/unix/thread.c
-index 0470f5eaa8a..55afc1748ef 100644
+index 34cf12885d9..212ebda0443 100644
 --- a/dlls/ntdll/unix/thread.c
 +++ b/dlls/ntdll/unix/thread.c
 @@ -85,7 +85,7 @@ static void pthread_exit_wrapper( int status )
@@ -127,10 +127,10 @@ index 0470f5eaa8a..55afc1748ef 100644
      thread_data->request_fd = -1;
      thread_data->reply_fd   = -1;
 diff --git a/dlls/ntdll/unix/unix_private.h b/dlls/ntdll/unix/unix_private.h
-index 0d1d0e5025f..ac792801283 100644
+index f19c8924008..e668c8e6fbb 100644
 --- a/dlls/ntdll/unix/unix_private.h
 +++ b/dlls/ntdll/unix/unix_private.h
-@@ -111,7 +111,7 @@ extern void CDECL server_release_fd( HANDLE handle, int unix_fd ) DECLSPEC_HIDDE
+@@ -108,7 +108,7 @@ extern void CDECL server_release_fd( HANDLE handle, int unix_fd ) DECLSPEC_HIDDE
  extern void CDECL server_init_process_done( void *relay ) DECLSPEC_HIDDEN;
  extern TEB * CDECL init_threading( int *nb_threads_ptr, struct ldt_copy **ldt_copy, SIZE_T *size,
                                     BOOL *suspend, unsigned int *cpus, BOOL *wow64,
@@ -140,19 +140,19 @@ index 0d1d0e5025f..ac792801283 100644
  extern void CDECL DECLSPEC_NORETURN exit_process( int status ) DECLSPEC_HIDDEN;
  extern NTSTATUS CDECL get_thread_ldt_entry( HANDLE handle, void *data, ULONG len, ULONG *ret_len ) DECLSPEC_HIDDEN;
 diff --git a/dlls/ntdll/unixlib.h b/dlls/ntdll/unixlib.h
-index dd5c3e3784e..dae93ab1632 100644
+index dbe68a1b486..b09f4942f05 100644
 --- a/dlls/ntdll/unixlib.h
 +++ b/dlls/ntdll/unixlib.h
 @@ -28,7 +28,7 @@ struct ldt_copy;
  struct msghdr;
  
  /* increment this when you change the function table */
--#define NTDLL_UNIXLIB_VERSION 47
-+#define NTDLL_UNIXLIB_VERSION 48
+-#define NTDLL_UNIXLIB_VERSION 52
++#define NTDLL_UNIXLIB_VERSION 53
  
  struct unix_funcs
  {
-@@ -253,7 +253,7 @@ struct unix_funcs
+@@ -281,7 +281,7 @@ struct unix_funcs
  
      /* thread/process functions */
      TEB *         (CDECL *init_threading)( int *nb_threads_ptr, struct ldt_copy **ldt_copy, SIZE_T *size,
@@ -162,10 +162,10 @@ index dd5c3e3784e..dae93ab1632 100644
      void          (CDECL *exit_process)( int status );
      NTSTATUS      (CDECL *get_thread_ldt_entry)( HANDLE handle, void *data, ULONG len, ULONG *ret_len );
 diff --git a/include/winternl.h b/include/winternl.h
-index 04e5dd1f62f..2b9a12cbb31 100644
+index 4f5ce4d0cfe..7d69a448e89 100644
 --- a/include/winternl.h
 +++ b/include/winternl.h
-@@ -359,7 +359,7 @@ typedef struct _TEB
+@@ -360,7 +360,7 @@ typedef struct _TEB
      PVOID                        CsrClientThread;                   /* 03c/0070 */
      PVOID                        Win32ThreadInfo;                   /* 040/0078 */
      ULONG                        Win32ClientInfo[31];               /* 044/0080 used for user32 private data in Wine */
diff --git a/patches/winebuild-Fake_Dlls/0010-tools-winebuild-Add-syscall-thunks-for-64-bit.patch b/patches/winebuild-Fake_Dlls/0010-tools-winebuild-Add-syscall-thunks-for-64-bit.patch
index c40eb8cab..102fa77af 100644
--- a/patches/winebuild-Fake_Dlls/0010-tools-winebuild-Add-syscall-thunks-for-64-bit.patch
+++ b/patches/winebuild-Fake_Dlls/0010-tools-winebuild-Add-syscall-thunks-for-64-bit.patch
@@ -1,4 +1,4 @@
-From b37d55d71b294fb96cb4816f2cb3f2448731e115 Mon Sep 17 00:00:00 2001
+From 88dc845f605a87a97247d4d2c795722afeba41dc Mon Sep 17 00:00:00 2001
 From: =?UTF-8?q?Michael=20M=C3=BCller?= <michael@fds-team.de>
 Date: Thu, 7 Sep 2017 00:38:09 +0200
 Subject: [PATCH] tools/winebuild: Add syscall thunks for 64 bit.
@@ -15,10 +15,10 @@ Subject: [PATCH] tools/winebuild: Add syscall thunks for 64 bit.
  8 files changed, 305 insertions(+), 14 deletions(-)
 
 diff --git a/dlls/kernel32/tests/loader.c b/dlls/kernel32/tests/loader.c
-index 95939ba6bde..ae5462f6e55 100644
+index 1f525194ce7..21af7b4ce7a 100644
 --- a/dlls/kernel32/tests/loader.c
 +++ b/dlls/kernel32/tests/loader.c
-@@ -1573,7 +1573,7 @@ static void test_filenames(void)
+@@ -1574,7 +1574,7 @@ static void test_filenames(void)
  
  static void test_FakeDLL(void)
  {
@@ -27,7 +27,7 @@ index 95939ba6bde..ae5462f6e55 100644
      NTSTATUS (WINAPI *pNtSetEvent)(HANDLE, ULONG *) = NULL;
      IMAGE_EXPORT_DIRECTORY *dir;
      HMODULE module = GetModuleHandleA("ntdll.dll");
-@@ -1615,8 +1615,13 @@ static void test_FakeDLL(void)
+@@ -1616,8 +1616,13 @@ static void test_FakeDLL(void)
  
          dll_func = (BYTE *)GetProcAddress(module, func_name);
          ok(dll_func != NULL, "%s: GetProcAddress returned NULL\n", func_name);
@@ -42,7 +42,7 @@ index 95939ba6bde..ae5462f6e55 100644
              todo_wine ok(0, "%s: Export is a stub-function, skipping\n", func_name);
              continue;
 diff --git a/dlls/ntdll/unix/thread.c b/dlls/ntdll/unix/thread.c
-index 55afc1748ef..0bffa4029c1 100644
+index 212ebda0443..0279690806c 100644
 --- a/dlls/ntdll/unix/thread.c
 +++ b/dlls/ntdll/unix/thread.c
 @@ -110,7 +110,7 @@ TEB * CDECL init_threading( int *nb_threads_ptr, struct ldt_copy **ldt_copy, SIZ
@@ -55,23 +55,23 @@ index 55afc1748ef..0bffa4029c1 100644
      NtCreateKeyedEvent( &keyed_event, GENERIC_READ | GENERIC_WRITE, NULL, 0 );
  
 diff --git a/dlls/ntdll/unix/unix_private.h b/dlls/ntdll/unix/unix_private.h
-index ac792801283..b7b66b6b440 100644
+index e668c8e6fbb..19196dbb296 100644
 --- a/dlls/ntdll/unix/unix_private.h
 +++ b/dlls/ntdll/unix/unix_private.h
-@@ -176,7 +176,7 @@ extern void virtual_init(void) DECLSPEC_HIDDEN;
+@@ -171,7 +171,7 @@ extern ULONG_PTR get_system_affinity_mask(void) DECLSPEC_HIDDEN;
  extern TEB *virtual_alloc_first_teb(void) DECLSPEC_HIDDEN;
  extern NTSTATUS virtual_alloc_teb( TEB **ret_teb ) DECLSPEC_HIDDEN;
  extern void virtual_free_teb( TEB *teb ) DECLSPEC_HIDDEN;
 -extern void virtual_map_user_shared_data(void) DECLSPEC_HIDDEN;
 +extern void virtual_map_user_shared_data(void *) DECLSPEC_HIDDEN;
  extern NTSTATUS virtual_handle_fault( LPCVOID addr, DWORD err, BOOL on_signal_stack ) DECLSPEC_HIDDEN;
- extern BOOL virtual_is_valid_code_address( const void *addr, SIZE_T size ) DECLSPEC_HIDDEN;
- extern int virtual_handle_stack_fault( void *addr ) DECLSPEC_HIDDEN;
+ extern unsigned int virtual_locked_server_call( void *req_ptr ) DECLSPEC_HIDDEN;
+ extern ssize_t virtual_locked_read( int fd, void *addr, size_t size ) DECLSPEC_HIDDEN;
 diff --git a/dlls/ntdll/unix/virtual.c b/dlls/ntdll/unix/virtual.c
-index b656a62c154..9b415fe5058 100644
+index a3b2cb2c477..5cf4eb626c0 100644
 --- a/dlls/ntdll/unix/virtual.c
 +++ b/dlls/ntdll/unix/virtual.c
-@@ -2588,14 +2588,14 @@ TEB *virtual_alloc_first_teb(void)
+@@ -2771,14 +2771,14 @@ TEB *virtual_alloc_first_teb(void)
      TEB *teb;
      PEB *peb;
      NTSTATUS status;
@@ -88,7 +88,7 @@ index b656a62c154..9b415fe5058 100644
      if (status)
      {
          ERR( "wine: failed to map the shared user data: %08x\n", status );
-@@ -2791,7 +2791,7 @@ void virtual_clear_thread_stack( void *stack_end )
+@@ -2976,7 +2976,7 @@ void virtual_clear_thread_stack( void *stack_end )
  /***********************************************************************
   *           virtual_map_user_shared_data
   */
@@ -97,7 +97,7 @@ index b656a62c154..9b415fe5058 100644
  {
      static const WCHAR wine_usdW[] = {'\\','K','e','r','n','e','l','O','b','j','e','c','t','s',
                                        '\\','_','_','w','i','n','e','_','u','s','e','r','_','s','h','a','r','e','d','_','d','a','t','a',0};
-@@ -2814,6 +2814,11 @@ void virtual_map_user_shared_data(void)
+@@ -2999,6 +2999,11 @@ void virtual_map_user_shared_data(void)
          ERR( "failed to remap the process USD: %d\n", res );
          exit(1);
      }
diff --git a/patches/ws2_32-WSACleanup/0002-ws2_32-Invalidate-client-side-file-descriptor-cache-.patch b/patches/ws2_32-WSACleanup/0002-ws2_32-Invalidate-client-side-file-descriptor-cache-.patch
index a851402f4..52165cb8b 100644
--- a/patches/ws2_32-WSACleanup/0002-ws2_32-Invalidate-client-side-file-descriptor-cache-.patch
+++ b/patches/ws2_32-WSACleanup/0002-ws2_32-Invalidate-client-side-file-descriptor-cache-.patch
@@ -1,4 +1,4 @@
-From 02562df4bb8c6c805b140335b9076a2a895244bf Mon Sep 17 00:00:00 2001
+From 679dcbe5add05885cf675a43b529e569f8b5c8af Mon Sep 17 00:00:00 2001
 From: Sebastian Lackner <sebastian@fds-team.de>
 Date: Sun, 6 Sep 2015 12:41:17 +0200
 Subject: [PATCH] ws2_32: Invalidate client-side file descriptor cache in
@@ -17,10 +17,10 @@ Subject: [PATCH] ws2_32: Invalidate client-side file descriptor cache in
  9 files changed, 36 insertions(+), 5 deletions(-)
 
 diff --git a/dlls/ntdll/ntdll.spec b/dlls/ntdll/ntdll.spec
-index 0b0d4587969..99d4c57cdfe 100644
+index a9422723b71..e4f2f0e9c2b 100644
 --- a/dlls/ntdll/ntdll.spec
 +++ b/dlls/ntdll/ntdll.spec
-@@ -1577,6 +1577,7 @@
+@@ -1578,6 +1578,7 @@
  
  # Server interface
  @ cdecl -norelay wine_server_call(ptr)
@@ -48,11 +48,11 @@ index 9e1cc85a36e..3f4ba60b7bb 100644
  /***********************************************************************
   *           wine_server_release_fd   (NTDLL.@)
 diff --git a/dlls/ntdll/unix/loader.c b/dlls/ntdll/unix/loader.c
-index 73be77e7afc..2393f73b306 100644
+index 0d4313089d6..1d288770573 100644
 --- a/dlls/ntdll/unix/loader.c
 +++ b/dlls/ntdll/unix/loader.c
-@@ -952,6 +952,7 @@ static struct unix_funcs unix_funcs =
-     fork_and_exec,
+@@ -955,6 +955,7 @@ static struct unix_funcs unix_funcs =
+     exec_process,
      wine_server_call,
      server_send_fd,
 +    server_remove_fds_from_cache_by_type,
@@ -60,10 +60,10 @@ index 73be77e7afc..2393f73b306 100644
      server_fd_to_handle,
      server_handle_to_fd,
 diff --git a/dlls/ntdll/unix/server.c b/dlls/ntdll/unix/server.c
-index cf6f6c3832c..586d0ffcf72 100644
+index 5faca657783..2e278480896 100644
 --- a/dlls/ntdll/unix/server.c
 +++ b/dlls/ntdll/unix/server.c
-@@ -995,6 +995,26 @@ static int remove_fd_from_cache( HANDLE handle )
+@@ -1003,6 +1003,26 @@ static int remove_fd_from_cache( HANDLE handle )
      return fd;
  }
  
@@ -91,10 +91,10 @@ index cf6f6c3832c..586d0ffcf72 100644
  /***********************************************************************
   *           server_get_unix_fd
 diff --git a/dlls/ntdll/unix/unix_private.h b/dlls/ntdll/unix/unix_private.h
-index 223015a785a..9c385ec42d8 100644
+index 2d4996a12f2..f19c8924008 100644
 --- a/dlls/ntdll/unix/unix_private.h
 +++ b/dlls/ntdll/unix/unix_private.h
-@@ -99,6 +99,7 @@ extern void CDECL virtual_release_address_space(void) DECLSPEC_HIDDEN;
+@@ -96,6 +96,7 @@ extern void CDECL virtual_release_address_space(void) DECLSPEC_HIDDEN;
  extern void CDECL virtual_set_large_address_space(void) DECLSPEC_HIDDEN;
  
  extern void CDECL server_send_fd( int fd ) DECLSPEC_HIDDEN;
@@ -103,19 +103,19 @@ index 223015a785a..9c385ec42d8 100644
                                       int *needs_close, enum server_fd_type *type,
                                       unsigned int *options ) DECLSPEC_HIDDEN;
 diff --git a/dlls/ntdll/unixlib.h b/dlls/ntdll/unixlib.h
-index 6c8e151b554..dd5c3e3784e 100644
+index 7fd483dcabe..dbe68a1b486 100644
 --- a/dlls/ntdll/unixlib.h
 +++ b/dlls/ntdll/unixlib.h
 @@ -28,7 +28,7 @@ struct ldt_copy;
  struct msghdr;
  
  /* increment this when you change the function table */
--#define NTDLL_UNIXLIB_VERSION 46
-+#define NTDLL_UNIXLIB_VERSION 47
+-#define NTDLL_UNIXLIB_VERSION 51
++#define NTDLL_UNIXLIB_VERSION 52
  
  struct unix_funcs
  {
-@@ -267,6 +267,7 @@ struct unix_funcs
+@@ -290,6 +290,7 @@ struct unix_funcs
      /* server functions */
      unsigned int  (CDECL *server_call)( void *req_ptr );
      void          (CDECL *server_send_fd)( int fd );

diff --git a/patches/ntdll-DOS_Attributes/0003-ntdll-Implement-storing-DOS-attributes-in-NtSetInfor.patch b/patches/ntdll-DOS_Attributes/0003-ntdll-Implement-storing-DOS-attributes-in-NtSetInfor.patch
index ab1e436ac..e10656744 100644
--- a/patches/ntdll-DOS_Attributes/0003-ntdll-Implement-storing-DOS-attributes-in-NtSetInfor.patch
+++ b/patches/ntdll-DOS_Attributes/0003-ntdll-Implement-storing-DOS-attributes-in-NtSetInfor.patch
@@ -1,31 +1,71 @@
-From 9f17f2e4f9842549820691f34f7d2da5719ead0a Mon Sep 17 00:00:00 2001
+From b099458217b2855bd8615b8c97bcc2462eb74b25 Mon Sep 17 00:00:00 2001
 From: "Erich E. Hoover" <erich.e.hoover@gmail.com>
 Date: Wed, 20 Aug 2014 00:08:52 -0600
 Subject: [PATCH] ntdll: Implement storing DOS attributes in
  NtSetInformationFile.
 
 ---
- dlls/ntdll/file.c       | 54 ++++++++++++++++++++++++++---------------
  dlls/ntdll/tests/file.c |  8 +++---
+ dlls/ntdll/unix/file.c  | 54 ++++++++++++++++++++++++++---------------
  include/wine/port.h     |  2 ++
  libs/port/xattr.c       | 20 +++++++++++++++
  4 files changed, 60 insertions(+), 24 deletions(-)
 
-diff --git a/dlls/ntdll/file.c b/dlls/ntdll/file.c
-index bd6e3cbcf88..c1f9808e497 100644
---- a/dlls/ntdll/file.c
-+++ b/dlls/ntdll/file.c
-@@ -177,6 +177,39 @@ int fd_get_file_info( int fd, unsigned int options, struct stat *st, ULONG *attr
-     return ret;
+diff --git a/dlls/ntdll/tests/file.c b/dlls/ntdll/tests/file.c
+index 184b7cdad59..37e5ac5d8a5 100644
+--- a/dlls/ntdll/tests/file.c
++++ b/dlls/ntdll/tests/file.c
+@@ -1364,7 +1364,7 @@ static void test_file_basic_information(void)
+     memset(&fbi, 0, sizeof(fbi));
+     res = pNtQueryInformationFile(h, &io, &fbi, sizeof fbi, FileBasicInformation);
+     ok ( res == STATUS_SUCCESS, "can't get attributes\n");
+-    todo_wine ok ( (fbi.FileAttributes & attrib_mask) == FILE_ATTRIBUTE_SYSTEM, "attribute %x not FILE_ATTRIBUTE_SYSTEM\n", fbi.FileAttributes );
++    ok ( (fbi.FileAttributes & attrib_mask) == FILE_ATTRIBUTE_SYSTEM, "attribute %x not FILE_ATTRIBUTE_SYSTEM (ok in old linux without xattr)\n", fbi.FileAttributes );
+ 
+     /* Then HIDDEN */
+     memset(&fbi, 0, sizeof(fbi));
+@@ -1377,7 +1377,7 @@ static void test_file_basic_information(void)
+     memset(&fbi, 0, sizeof(fbi));
+     res = pNtQueryInformationFile(h, &io, &fbi, sizeof fbi, FileBasicInformation);
+     ok ( res == STATUS_SUCCESS, "can't get attributes\n");
+-    todo_wine ok ( (fbi.FileAttributes & attrib_mask) == FILE_ATTRIBUTE_HIDDEN, "attribute %x not FILE_ATTRIBUTE_HIDDEN\n", fbi.FileAttributes );
++    ok ( (fbi.FileAttributes & attrib_mask) == FILE_ATTRIBUTE_HIDDEN, "attribute %x not FILE_ATTRIBUTE_HIDDEN (ok in old linux without xattr)\n", fbi.FileAttributes );
+ 
+     /* Check NORMAL last of all (to make sure we can clear attributes) */
+     memset(&fbi, 0, sizeof(fbi));
+@@ -1434,7 +1434,7 @@ static void test_file_all_information(void)
+     memset(&fai_buf.fai, 0, sizeof(fai_buf.fai));
+     res = pNtQueryInformationFile(h, &io, &fai_buf.fai, sizeof fai_buf, FileAllInformation);
+     ok ( res == STATUS_SUCCESS, "can't get attributes, res %x\n", res);
+-    todo_wine ok ( (fai_buf.fai.BasicInformation.FileAttributes & attrib_mask) == FILE_ATTRIBUTE_SYSTEM, "attribute %x not FILE_ATTRIBUTE_SYSTEM\n", fai_buf.fai.BasicInformation.FileAttributes );
++    ok ( (fai_buf.fai.BasicInformation.FileAttributes & attrib_mask) == FILE_ATTRIBUTE_SYSTEM, "attribute %x not FILE_ATTRIBUTE_SYSTEM (ok in old linux without xattr)\n", fai_buf.fai.BasicInformation.FileAttributes );
+ 
+     /* Then HIDDEN */
+     memset(&fai_buf.fai.BasicInformation, 0, sizeof(fai_buf.fai.BasicInformation));
+@@ -1447,7 +1447,7 @@ static void test_file_all_information(void)
+     memset(&fai_buf.fai, 0, sizeof(fai_buf.fai));
+     res = pNtQueryInformationFile(h, &io, &fai_buf.fai, sizeof fai_buf, FileAllInformation);
+     ok ( res == STATUS_SUCCESS, "can't get attributes\n");
+-    todo_wine ok ( (fai_buf.fai.BasicInformation.FileAttributes & attrib_mask) == FILE_ATTRIBUTE_HIDDEN, "attribute %x not FILE_ATTRIBUTE_HIDDEN\n", fai_buf.fai.BasicInformation.FileAttributes );
++    ok ( (fai_buf.fai.BasicInformation.FileAttributes & attrib_mask) == FILE_ATTRIBUTE_HIDDEN, "attribute %x not FILE_ATTRIBUTE_HIDDEN (ok in old linux without xattr)\n", fai_buf.fai.BasicInformation.FileAttributes );
+ 
+     /* Check NORMAL last of all (to make sure we can clear attributes) */
+     memset(&fai_buf.fai.BasicInformation, 0, sizeof(fai_buf.fai.BasicInformation));
+diff --git a/dlls/ntdll/unix/file.c b/dlls/ntdll/unix/file.c
+index 70a76ca81ee..924d06b2caa 100644
+--- a/dlls/ntdll/unix/file.c
++++ b/dlls/ntdll/unix/file.c
+@@ -1497,6 +1497,39 @@ static int fd_get_file_info( int fd, unsigned int options, struct stat *st, ULON
  }
  
+ 
 +/* set the stat info and file attributes for a file (by file descriptor) */
 +NTSTATUS fd_set_file_info( int fd, ULONG attr )
 +{
 +    char hexattr[11];
 +    struct stat st;
 +
-+    if (fstat( fd, &st ) == -1) return FILE_GetNtStatus();
++    if (fstat( fd, &st ) == -1) return errno_to_status( errno );
 +    if (attr & FILE_ATTRIBUTE_READONLY)
 +    {
 +        if (S_ISDIR( st.st_mode))
@@ -36,9 +76,9 @@ index bd6e3cbcf88..c1f9808e497 100644
 +    else
 +    {
 +        /* add write permission only where we already have read permission */
-+        st.st_mode |= (0600 | ((st.st_mode & 044) >> 1)) & (~FILE_umask);
++        st.st_mode |= (0600 | ((st.st_mode & 044) >> 1)) & (~start_umask);
 +    }
-+    if (fchmod( fd, st.st_mode ) == -1) return FILE_GetNtStatus();
++    if (fchmod( fd, st.st_mode ) == -1) return errno_to_status( errno );
 +    attr &= ~FILE_ATTRIBUTE_NORMAL; /* do not store everything, but keep everything Samba can use */
 +    if (attr != 0)
 +    {
@@ -52,10 +92,10 @@ index bd6e3cbcf88..c1f9808e497 100644
 +    return STATUS_SUCCESS;
 +}
 +
+ /* get the stat info and file attributes for a file (by name) */
  static int get_file_info( const char *path, struct stat *st, ULONG *attr )
  {
-     char *parent_path;
-@@ -3113,7 +3146,6 @@ NTSTATUS WINAPI NtSetInformationFile(HANDLE handle, PIO_STATUS_BLOCK io,
+@@ -4000,7 +4033,6 @@ NTSTATUS WINAPI NtSetInformationFile( HANDLE handle, IO_STATUS_BLOCK *io,
      case FileBasicInformation:
          if (len >= sizeof(FILE_BASIC_INFORMATION))
          {
@@ -63,12 +103,12 @@ index bd6e3cbcf88..c1f9808e497 100644
              const FILE_BASIC_INFORMATION *info = ptr;
              LARGE_INTEGER mtime, atime;
  
-@@ -3127,25 +3159,7 @@ NTSTATUS WINAPI NtSetInformationFile(HANDLE handle, PIO_STATUS_BLOCK io,
+@@ -4014,25 +4046,7 @@ NTSTATUS WINAPI NtSetInformationFile( HANDLE handle, IO_STATUS_BLOCK *io,
                  io->u.Status = set_file_times( fd, &mtime, &atime );
  
              if (io->u.Status == STATUS_SUCCESS && info->FileAttributes)
 -            {
--                if (fstat( fd, &st ) == -1) io->u.Status = FILE_GetNtStatus();
+-                if (fstat( fd, &st ) == -1) io->u.Status = errno_to_status( errno );
 -                else
 -                {
 -                    if (info->FileAttributes & FILE_ATTRIBUTE_READONLY)
@@ -81,60 +121,20 @@ index bd6e3cbcf88..c1f9808e497 100644
 -                    else
 -                    {
 -                        /* add write permission only where we already have read permission */
--                        st.st_mode |= (0600 | ((st.st_mode & 044) >> 1)) & (~FILE_umask);
+-                        st.st_mode |= (0600 | ((st.st_mode & 044) >> 1)) & (~start_umask);
 -                    }
--                    if (fchmod( fd, st.st_mode ) == -1) io->u.Status = FILE_GetNtStatus();
+-                    if (fchmod( fd, st.st_mode ) == -1) io->u.Status = errno_to_status( errno );
 -                }
 -            }
 +                io->u.Status = fd_set_file_info( fd, info->FileAttributes );
  
              if (needs_close) close( fd );
          }
-diff --git a/dlls/ntdll/tests/file.c b/dlls/ntdll/tests/file.c
-index 67d54c81fb0..4c2e63d3679 100644
---- a/dlls/ntdll/tests/file.c
-+++ b/dlls/ntdll/tests/file.c
-@@ -1365,7 +1365,7 @@ static void test_file_basic_information(void)
-     memset(&fbi, 0, sizeof(fbi));
-     res = pNtQueryInformationFile(h, &io, &fbi, sizeof fbi, FileBasicInformation);
-     ok ( res == STATUS_SUCCESS, "can't get attributes\n");
--    todo_wine ok ( (fbi.FileAttributes & attrib_mask) == FILE_ATTRIBUTE_SYSTEM, "attribute %x not FILE_ATTRIBUTE_SYSTEM\n", fbi.FileAttributes );
-+    ok ( (fbi.FileAttributes & attrib_mask) == FILE_ATTRIBUTE_SYSTEM, "attribute %x not FILE_ATTRIBUTE_SYSTEM (ok in old linux without xattr)\n", fbi.FileAttributes );
- 
-     /* Then HIDDEN */
-     memset(&fbi, 0, sizeof(fbi));
-@@ -1378,7 +1378,7 @@ static void test_file_basic_information(void)
-     memset(&fbi, 0, sizeof(fbi));
-     res = pNtQueryInformationFile(h, &io, &fbi, sizeof fbi, FileBasicInformation);
-     ok ( res == STATUS_SUCCESS, "can't get attributes\n");
--    todo_wine ok ( (fbi.FileAttributes & attrib_mask) == FILE_ATTRIBUTE_HIDDEN, "attribute %x not FILE_ATTRIBUTE_HIDDEN\n", fbi.FileAttributes );
-+    ok ( (fbi.FileAttributes & attrib_mask) == FILE_ATTRIBUTE_HIDDEN, "attribute %x not FILE_ATTRIBUTE_HIDDEN (ok in old linux without xattr)\n", fbi.FileAttributes );
- 
-     /* Check NORMAL last of all (to make sure we can clear attributes) */
-     memset(&fbi, 0, sizeof(fbi));
-@@ -1435,7 +1435,7 @@ static void test_file_all_information(void)
-     memset(&fai_buf.fai, 0, sizeof(fai_buf.fai));
-     res = pNtQueryInformationFile(h, &io, &fai_buf.fai, sizeof fai_buf, FileAllInformation);
-     ok ( res == STATUS_SUCCESS, "can't get attributes, res %x\n", res);
--    todo_wine ok ( (fai_buf.fai.BasicInformation.FileAttributes & attrib_mask) == FILE_ATTRIBUTE_SYSTEM, "attribute %x not FILE_ATTRIBUTE_SYSTEM\n", fai_buf.fai.BasicInformation.FileAttributes );
-+    ok ( (fai_buf.fai.BasicInformation.FileAttributes & attrib_mask) == FILE_ATTRIBUTE_SYSTEM, "attribute %x not FILE_ATTRIBUTE_SYSTEM (ok in old linux without xattr)\n", fai_buf.fai.BasicInformation.FileAttributes );
- 
-     /* Then HIDDEN */
-     memset(&fai_buf.fai.BasicInformation, 0, sizeof(fai_buf.fai.BasicInformation));
-@@ -1448,7 +1448,7 @@ static void test_file_all_information(void)
-     memset(&fai_buf.fai, 0, sizeof(fai_buf.fai));
-     res = pNtQueryInformationFile(h, &io, &fai_buf.fai, sizeof fai_buf, FileAllInformation);
-     ok ( res == STATUS_SUCCESS, "can't get attributes\n");
--    todo_wine ok ( (fai_buf.fai.BasicInformation.FileAttributes & attrib_mask) == FILE_ATTRIBUTE_HIDDEN, "attribute %x not FILE_ATTRIBUTE_HIDDEN\n", fai_buf.fai.BasicInformation.FileAttributes );
-+    ok ( (fai_buf.fai.BasicInformation.FileAttributes & attrib_mask) == FILE_ATTRIBUTE_HIDDEN, "attribute %x not FILE_ATTRIBUTE_HIDDEN (ok in old linux without xattr)\n", fai_buf.fai.BasicInformation.FileAttributes );
- 
-     /* Check NORMAL last of all (to make sure we can clear attributes) */
-     memset(&fai_buf.fai.BasicInformation, 0, sizeof(fai_buf.fai.BasicInformation));
 diff --git a/include/wine/port.h b/include/wine/port.h
-index 6e81cb71a76..f90396727d6 100644
+index 4670891ae77..e0249b4c59f 100644
 --- a/include/wine/port.h
 +++ b/include/wine/port.h
-@@ -368,6 +368,8 @@ extern int mkstemps(char *template, int suffix_len);
+@@ -359,6 +359,8 @@ extern int mkstemps(char *template, int suffix_len);
  #endif
  
  extern int xattr_fget( int filedes, const char *name, void *value, size_t size );
diff --git a/patches/ntdll-DOS_Attributes/0008-ntdll-Always-store-SAMBA_XATTR_DOS_ATTRIB-when-path-.patch b/patches/ntdll-DOS_Attributes/0008-ntdll-Always-store-SAMBA_XATTR_DOS_ATTRIB-when-path-.patch
index a8116b974..b8529c854 100644
--- a/patches/ntdll-DOS_Attributes/0008-ntdll-Always-store-SAMBA_XATTR_DOS_ATTRIB-when-path-.patch
+++ b/patches/ntdll-DOS_Attributes/0008-ntdll-Always-store-SAMBA_XATTR_DOS_ATTRIB-when-path-.patch
@@ -1,23 +1,23 @@
-From 08ece1e8da040d80c13348c2ffeb56052779dc53 Mon Sep 17 00:00:00 2001
+From 29e0ef12afb2651e61492a8a9f021baca4c66519 Mon Sep 17 00:00:00 2001
 From: Sebastian Lackner <sebastian@fds-team.de>
 Date: Thu, 14 Jan 2016 23:09:19 +0100
 Subject: [PATCH] ntdll: Always store SAMBA_XATTR_DOS_ATTRIB when path could be
  interpreted as hidden.
 
 ---
- dlls/ntdll/file.c | 13 ++++++++-----
+ dlls/ntdll/unix/file.c | 13 ++++++++-----
  1 file changed, 8 insertions(+), 5 deletions(-)
 
-diff --git a/dlls/ntdll/file.c b/dlls/ntdll/file.c
-index a0e54c27198..61b417ef678 100644
---- a/dlls/ntdll/file.c
-+++ b/dlls/ntdll/file.c
-@@ -250,12 +250,15 @@ int get_file_info( const char *path, struct stat *st, ULONG *attr )
+diff --git a/dlls/ntdll/unix/file.c b/dlls/ntdll/unix/file.c
+index 9636c0efe3e..444332e7baa 100644
+--- a/dlls/ntdll/unix/file.c
++++ b/dlls/ntdll/unix/file.c
+@@ -1561,12 +1561,15 @@ static int get_file_info( const char *path, struct stat *st, ULONG *attr )
          RtlFreeHeap( GetProcessHeap(), 0, parent_path );
      }
      *attr |= get_file_attributes( st );
 -    /* convert Unix-style hidden files to a DOS hidden file attribute */
--    if (DIR_is_hidden_file( path ))
+-    if (is_hidden_file( path ))
 -        *attr |= FILE_ATTRIBUTE_HIDDEN;
      /* retrieve any stored DOS attributes */
      len = xattr_get( path, SAMBA_XATTR_DOS_ATTRIB, hexattr, sizeof(hexattr)-1 );
@@ -25,22 +25,22 @@ index a0e54c27198..61b417ef678 100644
 +    if (len == -1)
 +    {
 +        /* convert Unix-style hidden files to a DOS hidden file attribute */
-+        if (DIR_is_hidden_file( path ))
++        if (is_hidden_file( path ))
 +            *attr |= FILE_ATTRIBUTE_HIDDEN;
 +        return ret;
 +    }
      *attr |= get_file_xattr( hexattr, len );
      return ret;
  }
-@@ -268,7 +271,7 @@ NTSTATUS set_file_info( const char *path, ULONG attr )
+@@ -3440,7 +3443,7 @@ NTSTATUS set_file_info( const char *path, ULONG attr )
      /* Note: unix mode already set when called this way */
      attr &= ~FILE_ATTRIBUTE_NORMAL; /* do not store everything, but keep everything Samba can use */
      len = sprintf( hexattr, "0x%x", attr );
 -    if (attr != 0)
-+    if (attr != 0 || DIR_is_hidden_file( path ))
++    if (attr != 0 || is_hidden_file( path ))
          xattr_set( path, SAMBA_XATTR_DOS_ATTRIB, hexattr, len );
      else
          xattr_remove( path, SAMBA_XATTR_DOS_ATTRIB );
 -- 
-2.25.1
+2.27.0
 
diff --git a/patches/ntdll-DOS_Attributes/definition b/patches/ntdll-DOS_Attributes/definition
index 68d8e88ee..7a1a3aeb3 100644
--- a/patches/ntdll-DOS_Attributes/definition
+++ b/patches/ntdll-DOS_Attributes/definition
@@ -1,7 +1,3 @@
 Fixes: [9158] Support for DOS hidden/system file attributes
 Fixes: [15679] cygwin symlinks not working in wine
 # Depends: ntdll-Syscall_Wrappers
-Depends: ntdll-Junction_Points
-# Currently awkwardly split between ntdll.dll and ntdll.so; wait for the rest
-# of the file functions to be moved to ntdll.so before finishing the rebase.
-Disabled: true
diff --git a/patches/ntdll-FileDispositionInformation/definition b/patches/ntdll-FileDispositionInformation/definition
index b139e548a..6db46c845 100644
--- a/patches/ntdll-FileDispositionInformation/definition
+++ b/patches/ntdll-FileDispositionInformation/definition
@@ -1,4 +1,3 @@
 # Fixes: [30397] Support for NtSetInformationFile class FileDispositionInformation
 # Fixes: [30399] Support for NtSetInformationFile class FileRenameInformation
 # Fixes: Support for NtSetInformationFile class FileLinkInformation
-Depends: server-File_Permissions
diff --git a/patches/ntdll-Junction_Points/definition b/patches/ntdll-Junction_Points/definition
index 1bc08a0b9..a1a683f34 100644
--- a/patches/ntdll-Junction_Points/definition
+++ b/patches/ntdll-Junction_Points/definition
@@ -2,3 +2,5 @@ Fixes: [12401] NET Framework 2.0, 3.0, 4.0 installers and other apps that make u
 Fixes: [44948] Multiple apps (Spine (Mod starter for Gothic), MS Office 365 installer) need CreateSymbolicLinkW implementation
 # FIXME: patch 0006 was broken by e36a9c459d. We really want to get that information from ntdll instead, but the how is not trivial...
 # FIXME 2: patch 0019 needs to call RemoveDirectoryW() from kernelbase, but it's stuck in kernel32 for now...
+# As with other patch sets, temporarily disabled while it's awkwardly split between ntdll.dll and ntdll.so.
+Disabled: true
diff --git a/patches/ntdll-NtQueryEaFile/definition b/patches/ntdll-NtQueryEaFile/definition
index a86870c2f..6bff56983 100644
--- a/patches/ntdll-NtQueryEaFile/definition
+++ b/patches/ntdll-NtQueryEaFile/definition
@@ -1,3 +1,5 @@
 Fixes: Improve stub for NtQueryEaFile
 # Depends: ntdll-Syscall_Wrappers
 Depends: ntdll-Junction_Points
+# Re-enable me when ntdll-Junction_Points gets re-enabled!
+Disabled: true
diff --git a/patches/ntdll-Syscall_Emulation/0001-ntdll-Support-x86_64-syscall-emulation.patch b/patches/ntdll-Syscall_Emulation/0001-ntdll-Support-x86_64-syscall-emulation.patch
index 9164fea59..b2ffa77b0 100644
--- a/patches/ntdll-Syscall_Emulation/0001-ntdll-Support-x86_64-syscall-emulation.patch
+++ b/patches/ntdll-Syscall_Emulation/0001-ntdll-Support-x86_64-syscall-emulation.patch
@@ -1,4 +1,4 @@
-From 74831302b4eedd6df46357de283392f2b4ee62f2 Mon Sep 17 00:00:00 2001
+From d389571ffefb1cabd3b23d1c966dbc237d042e87 Mon Sep 17 00:00:00 2001
 From: Paul Gofman <pgofman@codeweavers.com>
 Date: Mon, 30 Dec 2019 13:27:53 +0300
 Subject: [PATCH] ntdll: Support x86_64 syscall emulation.
@@ -194,7 +194,7 @@ index 1d1b879310e..c8a8d1d1d33 100644
  
   error:
 diff --git a/dlls/ntdll/unix/thread.c b/dlls/ntdll/unix/thread.c
-index e1da90222d3..91e1596ddcb 100644
+index 0bffa4029c1..03dc27b083c 100644
 --- a/dlls/ntdll/unix/thread.c
 +++ b/dlls/ntdll/unix/thread.c
 @@ -58,6 +58,9 @@ WINE_DEFAULT_DEBUG_CHANNEL(seh);
@@ -227,7 +227,7 @@ index e1da90222d3..91e1596ddcb 100644
      teb = virtual_alloc_first_teb();
      teb->WOW32Reserved = syscall_handler;
 diff --git a/dlls/ntdll/unix/unix_private.h b/dlls/ntdll/unix/unix_private.h
-index 62e836b41f1..f234a756991 100644
+index b7b66b6b440..23c434dd7aa 100644
 --- a/dlls/ntdll/unix/unix_private.h
 +++ b/dlls/ntdll/unix/unix_private.h
 @@ -111,7 +111,8 @@ extern void CDECL server_release_fd( HANDLE handle, int unix_fd ) DECLSPEC_HIDDE
@@ -240,7 +240,7 @@ index 62e836b41f1..f234a756991 100644
  extern void CDECL DECLSPEC_NORETURN exit_thread( int status ) DECLSPEC_HIDDEN;
  extern void CDECL DECLSPEC_NORETURN exit_process( int status ) DECLSPEC_HIDDEN;
  extern NTSTATUS CDECL get_thread_ldt_entry( HANDLE handle, void *data, ULONG len, ULONG *ret_len ) DECLSPEC_HIDDEN;
-@@ -150,6 +151,9 @@ extern char **build_envp( const WCHAR *envW ) DECLSPEC_HIDDEN;
+@@ -147,6 +148,9 @@ extern char **build_envp( const WCHAR *envW ) DECLSPEC_HIDDEN;
  extern NTSTATUS exec_wineloader( char **argv, int socketfd, int is_child_64bit,
                                   ULONGLONG res_start, ULONGLONG res_end ) DECLSPEC_HIDDEN;
  
@@ -251,19 +251,19 @@ index 62e836b41f1..f234a756991 100644
  extern void server_enter_uninterrupted_section( RTL_CRITICAL_SECTION *cs, sigset_t *sigset ) DECLSPEC_HIDDEN;
  extern void server_leave_uninterrupted_section( RTL_CRITICAL_SECTION *cs, sigset_t *sigset ) DECLSPEC_HIDDEN;
 diff --git a/dlls/ntdll/unixlib.h b/dlls/ntdll/unixlib.h
-index c6fb8e0f2d4..5d00991cde9 100644
+index dae93ab1632..5103e50d7ff 100644
 --- a/dlls/ntdll/unixlib.h
 +++ b/dlls/ntdll/unixlib.h
 @@ -28,7 +28,7 @@ struct ldt_copy;
  struct msghdr;
  
  /* increment this when you change the function table */
--#define NTDLL_UNIXLIB_VERSION 45
-+#define NTDLL_UNIXLIB_VERSION 46
+-#define NTDLL_UNIXLIB_VERSION 48
++#define NTDLL_UNIXLIB_VERSION 49
  
  struct unix_funcs
  {
-@@ -225,7 +225,8 @@ struct unix_funcs
+@@ -253,7 +253,8 @@ struct unix_funcs
  
      /* thread/process functions */
      TEB *         (CDECL *init_threading)( int *nb_threads_ptr, struct ldt_copy **ldt_copy, SIZE_T *size,
diff --git a/patches/patchinstall.sh b/patches/patchinstall.sh
index 046f3fa0f..12cccae19 100755
--- a/patches/patchinstall.sh
+++ b/patches/patchinstall.sh
@@ -167,6 +167,7 @@ patch_enable_all ()
 	enable_ntdll_ApiSetMap="$1"
 	enable_ntdll_Builtin_Prot="$1"
 	enable_ntdll_CriticalSection="$1"
+	enable_ntdll_DOS_Attributes="$1"
 	enable_ntdll_Dealloc_Thread_Stack="$1"
 	enable_ntdll_DeviceType_Systemroot="$1"
 	enable_ntdll_Exception="$1"
@@ -179,11 +180,9 @@ patch_enable_all ()
 	enable_ntdll_Heap_Improvements="$1"
 	enable_ntdll_Hide_Wine_Exports="$1"
 	enable_ntdll_Interrupt_0x2e="$1"
-	enable_ntdll_Junction_Points="$1"
 	enable_ntdll_Manifest_Range="$1"
 	enable_ntdll_NtAccessCheck="$1"
 	enable_ntdll_NtDevicePath="$1"
-	enable_ntdll_NtQueryEaFile="$1"
 	enable_ntdll_NtQuerySection="$1"
 	enable_ntdll_NtSetLdtEntries="$1"
 	enable_ntdll_Pipe_SpecialCharacters="$1"
@@ -226,7 +225,6 @@ patch_enable_all ()
 	enable_riched20_IText_Interface="$1"
 	enable_server_Desktop_Refcount="$1"
 	enable_server_FileEndOfFileInformation="$1"
-	enable_server_File_Permissions="$1"
 	enable_server_Object_Types="$1"
 	enable_server_PeekMessage="$1"
 	enable_server_Realtime_Priority="$1"
@@ -596,6 +594,9 @@ patch_enable ()
 		ntdll-CriticalSection)
 			enable_ntdll_CriticalSection="$2"
 			;;
+		ntdll-DOS_Attributes)
+			enable_ntdll_DOS_Attributes="$2"
+			;;
 		ntdll-Dealloc_Thread_Stack)
 			enable_ntdll_Dealloc_Thread_Stack="$2"
 			;;
@@ -632,9 +633,6 @@ patch_enable ()
 		ntdll-Interrupt-0x2e)
 			enable_ntdll_Interrupt_0x2e="$2"
 			;;
-		ntdll-Junction_Points)
-			enable_ntdll_Junction_Points="$2"
-			;;
 		ntdll-Manifest_Range)
 			enable_ntdll_Manifest_Range="$2"
 			;;
@@ -644,9 +642,6 @@ patch_enable ()
 		ntdll-NtDevicePath)
 			enable_ntdll_NtDevicePath="$2"
 			;;
-		ntdll-NtQueryEaFile)
-			enable_ntdll_NtQueryEaFile="$2"
-			;;
 		ntdll-NtQuerySection)
 			enable_ntdll_NtQuerySection="$2"
 			;;
@@ -773,9 +768,6 @@ patch_enable ()
 		server-FileEndOfFileInformation)
 			enable_server_FileEndOfFileInformation="$2"
 			;;
-		server-File_Permissions)
-			enable_server_File_Permissions="$2"
-			;;
 		server-Object_Types)
 			enable_server_Object_Types="$2"
 			;;
@@ -1649,13 +1641,6 @@ if test "$enable_winebuild_Fake_Dlls" -eq 1; then
 	enable_ws2_32_WSACleanup=1
 fi
 
-if test "$enable_ntdll_NtQueryEaFile" -eq 1; then
-	if test "$enable_ntdll_Junction_Points" -gt 1; then
-		abort "Patchset ntdll-Junction_Points disabled, but ntdll-NtQueryEaFile depends on that."
-	fi
-	enable_ntdll_Junction_Points=1
-fi
-
 if test "$enable_ntdll_NtDevicePath" -eq 1; then
 	if test "$enable_ntdll_Pipe_SpecialCharacters" -gt 1; then
 		abort "Patchset ntdll-Pipe_SpecialCharacters disabled, but ntdll-NtDevicePath depends on that."
@@ -1702,20 +1687,6 @@ if test "$enable_kernel32_CopyFileEx" -eq 1; then
 	enable_ntdll_FileDispositionInformation=1
 fi
 
-if test "$enable_ntdll_FileDispositionInformation" -eq 1; then
-	if test "$enable_server_File_Permissions" -gt 1; then
-		abort "Patchset server-File_Permissions disabled, but ntdll-FileDispositionInformation depends on that."
-	fi
-	enable_server_File_Permissions=1
-fi
-
-if test "$enable_server_File_Permissions" -eq 1; then
-	if test "$enable_ntdll_Junction_Points" -gt 1; then
-		abort "Patchset ntdll-Junction_Points disabled, but server-File_Permissions depends on that."
-	fi
-	enable_ntdll_Junction_Points=1
-fi
-
 if test "$enable_dxdiagn_GetChildContainer_Leaf_Nodes" -eq 1; then
 	if test "$enable_dxdiagn_Enumerate_DirectSound" -gt 1; then
 		abort "Patchset dxdiagn-Enumerate_DirectSound disabled, but dxdiagn-GetChildContainer_Leaf_Nodes depends on that."
@@ -3168,95 +3135,8 @@ if test "$enable_iphlpapi_System_Ping" -eq 1; then
 	) >> "$patchlist"
 fi
 
-# Patchset ntdll-Junction_Points
-# |
-# | This patchset fixes the following Wine bugs:
-# |   *	[#12401] NET Framework 2.0, 3.0, 4.0 installers and other apps that make use of GAC API for managed assembly
-# | 	installation on NTFS filesystems need reparse point/junction API support
-# | 	(FSCTL_SET_REPARSE_POINT/FSCTL_GET_REPARSE_POINT)
-# |   *	[#44948] Multiple apps (Spine (Mod starter for Gothic), MS Office 365 installer) need CreateSymbolicLinkW implementation
-# |
-# | Modified files:
-# |   *	configure.ac, dlls/kernel32/path.c, dlls/ntdll/file.c, dlls/ntdll/tests/file.c, dlls/ntdll/unix/file.c,
-# | 	include/Makefile.in, include/ntifs.h, include/wine/port.h, include/winternl.h, libs/port/Makefile.in,
-# | 	libs/port/renameat2.c, server/fd.c
-# |
-if test "$enable_ntdll_Junction_Points" -eq 1; then
-	patch_apply ntdll-Junction_Points/0001-ntdll-Add-support-for-junction-point-creation.patch
-	patch_apply ntdll-Junction_Points/0002-ntdll-Add-support-for-reading-junction-points.patch
-	patch_apply ntdll-Junction_Points/0003-ntdll-Add-support-for-deleting-junction-points.patch
-	patch_apply ntdll-Junction_Points/0004-ntdll-Add-a-test-for-junction-point-advertisement.patch
-	patch_apply ntdll-Junction_Points/0005-kernel32-ntdll-Add-support-for-deleting-junction-poi.patch
-	patch_apply ntdll-Junction_Points/0007-ntdll-Add-support-for-absolute-symlink-creation.patch
-	patch_apply ntdll-Junction_Points/0008-ntdll-Add-support-for-reading-absolute-symlinks.patch
-	patch_apply ntdll-Junction_Points/0009-ntdll-Add-support-for-deleting-symlinks.patch
-	patch_apply ntdll-Junction_Points/0010-ntdll-Add-support-for-relative-symlink-creation.patch
-	patch_apply ntdll-Junction_Points/0011-ntdll-Add-support-for-reading-relative-symlinks.patch
-	patch_apply ntdll-Junction_Points/0012-ntdll-Add-support-for-file-symlinks.patch
-	patch_apply ntdll-Junction_Points/0013-ntdll-Allow-creation-of-dangling-reparse-points-to-n.patch
-	patch_apply ntdll-Junction_Points/0014-ntdll-Correctly-report-file-symbolic-links-as-files.patch
-	patch_apply ntdll-Junction_Points/0015-kernel32-Set-error-code-when-attempting-to-delete-fi.patch
-	patch_apply ntdll-Junction_Points/0016-server-Properly-handle-file-symlink-deletion.patch
-	patch_apply ntdll-Junction_Points/0017-ntdll-Always-report-symbolic-links-as-containing-zer.patch
-	patch_apply ntdll-Junction_Points/0018-ntdll-Find-dangling-symlinks-quickly.patch
-	(
-		printf '%s\n' '+    { "Erich E. Hoover", "ntdll: Add support for junction point creation.", 1 },';
-		printf '%s\n' '+    { "Erich E. Hoover", "ntdll: Add support for reading junction points.", 1 },';
-		printf '%s\n' '+    { "Erich E. Hoover", "ntdll: Add support for deleting junction points.", 1 },';
-		printf '%s\n' '+    { "Erich E. Hoover", "ntdll: Add a test for junction point advertisement.", 1 },';
-		printf '%s\n' '+    { "Erich E. Hoover", "kernel32,ntdll: Add support for deleting junction points with RemoveDirectory.", 1 },';
-		printf '%s\n' '+    { "Erich E. Hoover", "ntdll: Add support for absolute symlink creation.", 1 },';
-		printf '%s\n' '+    { "Erich E. Hoover", "ntdll: Add support for reading absolute symlinks.", 1 },';
-		printf '%s\n' '+    { "Erich E. Hoover", "ntdll: Add support for deleting symlinks.", 1 },';
-		printf '%s\n' '+    { "Erich E. Hoover", "ntdll: Add support for relative symlink creation.", 1 },';
-		printf '%s\n' '+    { "Erich E. Hoover", "ntdll: Add support for reading relative symlinks.", 1 },';
-		printf '%s\n' '+    { "Erich E. Hoover", "ntdll: Add support for file symlinks.", 1 },';
-		printf '%s\n' '+    { "Erich E. Hoover", "ntdll: Allow creation of dangling reparse points to non-existent paths.", 1 },';
-		printf '%s\n' '+    { "Erich E. Hoover", "ntdll: Correctly report file symbolic links as files.", 1 },';
-		printf '%s\n' '+    { "Erich E. Hoover", "kernel32: Set error code when attempting to delete file symlinks as directories.", 1 },';
-		printf '%s\n' '+    { "Erich E. Hoover", "server: Properly handle file symlink deletion.", 1 },';
-		printf '%s\n' '+    { "Erich E. Hoover", "ntdll: Always report symbolic links as containing zero bytes.", 1 },';
-		printf '%s\n' '+    { "Erich E. Hoover", "ntdll: Find dangling symlinks quickly.", 1 },';
-	) >> "$patchlist"
-fi
-
-# Patchset server-File_Permissions
-# |
-# | This patchset has the following (direct or indirect) dependencies:
-# |   *	ntdll-Junction_Points
-# |
-# | This patchset fixes the following Wine bugs:
-# |   *	[#44691] Improve mapping of DACL to file permissions
-# |
-# | Modified files:
-# |   *	dlls/advapi32/tests/security.c, dlls/ntdll/tests/file.c, server/fd.c, server/file.c
-# |
-if test "$enable_server_File_Permissions" -eq 1; then
-	patch_apply server-File_Permissions/0001-server-Improve-STATUS_CANNOT_DELETE-checks-for-direc.patch
-	patch_apply server-File_Permissions/0002-server-Allow-to-open-files-without-any-permission-bi.patch
-	patch_apply server-File_Permissions/0003-server-When-creating-new-directories-temporarily-giv.patch
-	patch_apply server-File_Permissions/0004-advapi32-tests-Add-tests-for-ACL-inheritance-in-Crea.patch
-	patch_apply server-File_Permissions/0005-advapi32-tests-Add-ACL-inheritance-tests-for-creatin.patch
-	patch_apply server-File_Permissions/0006-ntdll-tests-Added-tests-for-open-behaviour-on-readon.patch
-	patch_apply server-File_Permissions/0007-server-FILE_WRITE_ATTRIBUTES-should-succeed-for-read.patch
-	patch_apply server-File_Permissions/0008-server-Improve-mapping-of-DACL-to-file-permissions.patch
-	(
-		printf '%s\n' '+    { "Sebastian Lackner", "server: Improve STATUS_CANNOT_DELETE checks for directory case.", 1 },';
-		printf '%s\n' '+    { "Sebastian Lackner", "server: Allow to open files without any permission bits.", 2 },';
-		printf '%s\n' '+    { "Sebastian Lackner", "server: When creating new directories temporarily give read-permissions until they are opened.", 1 },';
-		printf '%s\n' '+    { "Sebastian Lackner", "advapi32/tests: Add tests for ACL inheritance in CreateDirectoryA.", 1 },';
-		printf '%s\n' '+    { "Sebastian Lackner", "advapi32/tests: Add ACL inheritance tests for creating subdirectories with NtCreateFile.", 1 },';
-		printf '%s\n' '+    { "Qian Hong", "ntdll/tests: Added tests for open behaviour on readonly files.", 1 },';
-		printf '%s\n' '+    { "Sebastian Lackner", "server: FILE_WRITE_ATTRIBUTES should succeed for readonly files.", 1 },';
-		printf '%s\n' '+    { "Sebastian Lackner", "server: Improve mapping of DACL to file permissions.", 1 },';
-	) >> "$patchlist"
-fi
-
 # Patchset ntdll-FileDispositionInformation
 # |
-# | This patchset has the following (direct or indirect) dependencies:
-# |   *	ntdll-Junction_Points, server-File_Permissions
-# |
 # | Modified files:
 # |   *	dlls/ntdll/tests/file.c, server/fd.c
 # |
@@ -3272,7 +3152,7 @@ fi
 # Patchset kernel32-CopyFileEx
 # |
 # | This patchset has the following (direct or indirect) dependencies:
-# |   *	ntdll-Junction_Points, server-File_Permissions, ntdll-FileDispositionInformation
+# |   *	ntdll-FileDispositionInformation
 # |
 # | This patchset fixes the following Wine bugs:
 # |   *	[#22692] Add support for CopyFileEx progress callback
@@ -3682,6 +3562,35 @@ if test "$enable_ntdll_CriticalSection" -eq 1; then
 	) >> "$patchlist"
 fi
 
+# Patchset ntdll-DOS_Attributes
+# |
+# | This patchset fixes the following Wine bugs:
+# |   *	[#9158] Support for DOS hidden/system file attributes
+# |   *	[#15679] cygwin symlinks not working in wine
+# |
+# | Modified files:
+# |   *	configure.ac, dlls/ntdll/tests/directory.c, dlls/ntdll/tests/file.c, dlls/ntdll/unix/file.c, include/wine/port.h,
+# | 	libs/port/Makefile.in, libs/port/xattr.c
+# |
+if test "$enable_ntdll_DOS_Attributes" -eq 1; then
+	patch_apply ntdll-DOS_Attributes/0001-ntdll-Implement-retrieving-DOS-attributes-in-fd_-get.patch
+	patch_apply ntdll-DOS_Attributes/0003-ntdll-Implement-storing-DOS-attributes-in-NtSetInfor.patch
+	patch_apply ntdll-DOS_Attributes/0004-ntdll-Implement-storing-DOS-attributes-in-NtCreateFi.patch
+	patch_apply ntdll-DOS_Attributes/0005-libport-Add-support-for-Mac-OS-X-style-extended-attr.patch
+	patch_apply ntdll-DOS_Attributes/0006-libport-Add-support-for-FreeBSD-style-extended-attri.patch
+	patch_apply ntdll-DOS_Attributes/0007-ntdll-Perform-the-Unix-style-hidden-file-check-withi.patch
+	patch_apply ntdll-DOS_Attributes/0008-ntdll-Always-store-SAMBA_XATTR_DOS_ATTRIB-when-path-.patch
+	(
+		printf '%s\n' '+    { "Erich E. Hoover", "ntdll: Implement retrieving DOS attributes in [fd_]get_file_info().", 1 },';
+		printf '%s\n' '+    { "Erich E. Hoover", "ntdll: Implement storing DOS attributes in NtSetInformationFile.", 1 },';
+		printf '%s\n' '+    { "Erich E. Hoover", "ntdll: Implement storing DOS attributes in NtCreateFile.", 1 },';
+		printf '%s\n' '+    { "Erich E. Hoover", "libport: Add support for Mac OS X style extended attributes.", 1 },';
+		printf '%s\n' '+    { "Erich E. Hoover", "libport: Add support for FreeBSD style extended attributes.", 1 },';
+		printf '%s\n' '+    { "Erich E. Hoover", "ntdll: Perform the Unix-style hidden file check within the unified file info grabbing routine.", 1 },';
+		printf '%s\n' '+    { "Sebastian Lackner", "ntdll: Always store SAMBA_XATTR_DOS_ATTRIB when path could be interpreted as hidden.", 1 },';
+	) >> "$patchlist"
+fi
+
 # Patchset ntdll-Dealloc_Thread_Stack
 # |
 # | Modified files:
@@ -3928,21 +3837,6 @@ if test "$enable_ntdll_NtDevicePath" -eq 1; then
 	) >> "$patchlist"
 fi
 
-# Patchset ntdll-NtQueryEaFile
-# |
-# | This patchset has the following (direct or indirect) dependencies:
-# |   *	ntdll-Junction_Points
-# |
-# | Modified files:
-# |   *	dlls/ntdll/file.c, dlls/ntdll/tests/file.c
-# |
-if test "$enable_ntdll_NtQueryEaFile" -eq 1; then
-	patch_apply ntdll-NtQueryEaFile/0001-ntdll-Improve-stub-of-NtQueryEaFile.patch
-	(
-		printf '%s\n' '+    { "Sebastian Lackner", "ntdll: Improve stub of NtQueryEaFile.", 1 },';
-	) >> "$patchlist"
-fi
-
 # Patchset ntdll-NtQuerySection
 # |
 # | Modified files:
@@ -4595,7 +4489,7 @@ fi
 # Patchset server-FileEndOfFileInformation
 # |
 # | Modified files:
-# |   *	dlls/ntdll/file.c, server/fd.c, server/protocol.def
+# |   *	dlls/ntdll/unix/file.c, server/fd.c, server/protocol.def
 # |
 if test "$enable_server_FileEndOfFileInformation" -eq 1; then
 	patch_apply server-FileEndOfFileInformation/0001-ntdll-Set-EOF-on-file-which-has-a-memory-mapping-sho.patch
@@ -4786,8 +4680,7 @@ fi
 # Patchset shell32-Progress_Dialog
 # |
 # | This patchset has the following (direct or indirect) dependencies:
-# |   *	ntdll-Junction_Points, server-File_Permissions, ntdll-FileDispositionInformation, kernel32-CopyFileEx,
-# | 	shell32-SHFileOperation_Move
+# |   *	ntdll-FileDispositionInformation, kernel32-CopyFileEx, shell32-SHFileOperation_Move
 # |
 # | Modified files:
 # |   *	dlls/shell32/shell32.rc, dlls/shell32/shlfileop.c, dlls/shell32/shresdef.h
@@ -4808,8 +4701,7 @@ fi
 # Patchset shell32-ACE_Viewer
 # |
 # | This patchset has the following (direct or indirect) dependencies:
-# |   *	ntdll-Junction_Points, server-File_Permissions, ntdll-FileDispositionInformation, kernel32-CopyFileEx,
-# | 	shell32-SHFileOperation_Move, shell32-Progress_Dialog
+# |   *	ntdll-FileDispositionInformation, kernel32-CopyFileEx, shell32-SHFileOperation_Move, shell32-Progress_Dialog
 # |
 # | Modified files:
 # |   *	dlls/aclui/Makefile.in, dlls/aclui/aclui.rc, dlls/aclui/aclui_main.c, dlls/aclui/resource.h, dlls/aclui/user_icons.bmp,
 
diff --git a/patches/server-FileEndOfFileInformation/0001-ntdll-Set-EOF-on-file-which-has-a-memory-mapping-sho.patch b/patches/server-FileEndOfFileInformation/0001-ntdll-Set-EOF-on-file-which-has-a-memory-mapping-sho.patch
index 229655b27..64df7ceea 100644
--- a/patches/server-FileEndOfFileInformation/0001-ntdll-Set-EOF-on-file-which-has-a-memory-mapping-sho.patch
+++ b/patches/server-FileEndOfFileInformation/0001-ntdll-Set-EOF-on-file-which-has-a-memory-mapping-sho.patch
@@ -1,27 +1,27 @@
-From ed63a76dc481da8af510fb8f9ae6c399ca0ca0ac Mon Sep 17 00:00:00 2001
+From b956b7f35f07153aa61a9a57a1b5bb7f2f9d1e8b Mon Sep 17 00:00:00 2001
 From: Qian Hong <qhong@codeweavers.com>
 Date: Fri, 21 Aug 2015 21:58:51 +0800
 Subject: [PATCH] ntdll: Set EOF on file which has a memory mapping should
  fail.
 
 ---
- dlls/ntdll/file.c   | 27 ++++++----------------
- server/fd.c         | 55 +++++++++++++++++++++++++++++++++++++++++++++
- server/protocol.def |  7 ++++++
- 3 files changed, 69 insertions(+), 20 deletions(-)
+ dlls/ntdll/unix/file.c | 23 ++++--------------
+ server/fd.c            | 55 ++++++++++++++++++++++++++++++++++++++++++
+ server/protocol.def    |  7 ++++++
+ 3 files changed, 67 insertions(+), 18 deletions(-)
 
-diff --git a/dlls/ntdll/file.c b/dlls/ntdll/file.c
-index 013706889bb..a28ae265687 100644
---- a/dlls/ntdll/file.c
-+++ b/dlls/ntdll/file.c
-@@ -2747,30 +2747,17 @@ NTSTATUS WINAPI NtSetInformationFile(HANDLE handle, PIO_STATUS_BLOCK io,
+diff --git a/dlls/ntdll/unix/file.c b/dlls/ntdll/unix/file.c
+index d39ca8cd635..b0ec1ff3f5f 100644
+--- a/dlls/ntdll/unix/file.c
++++ b/dlls/ntdll/unix/file.c
+@@ -4038,28 +4038,15 @@ NTSTATUS WINAPI NtSetInformationFile( HANDLE handle, IO_STATUS_BLOCK *io,
      case FileEndOfFileInformation:
          if (len >= sizeof(FILE_END_OF_FILE_INFORMATION))
          {
 -            struct stat st;
              const FILE_END_OF_FILE_INFORMATION *info = ptr;
  
--            if ((io->u.Status = unix_funcs->server_get_unix_fd( handle, 0, &fd, &needs_close, NULL, NULL )))
+-            if ((io->u.Status = server_get_unix_fd( handle, 0, &fd, &needs_close, NULL, NULL )))
 -                return io->u.Status;
 -
 -            /* first try normal truncate */
@@ -41,22 +41,18 @@ index 013706889bb..a28ae265687 100644
 +                req->eof      = info->EndOfFile.QuadPart;
 +                io->u.Status  = wine_server_call( req );
              }
--            io->u.Status = FILE_GetNtStatus();
+-            io->u.Status = errno_to_status( errno );
 -
 -            if (needs_close) close( fd );
--        }
--        else io->u.Status = STATUS_INVALID_PARAMETER_3;
 +            SERVER_END_REQ;
-+        } else
-+            io->u.Status = STATUS_INVALID_PARAMETER_3;
+         }
+         else io->u.Status = STATUS_INVALID_PARAMETER_3;
          break;
- 
-     case FilePipeInformation:
 diff --git a/server/fd.c b/server/fd.c
-index 06d1d81bdb0..7b016acb382 100644
+index 7ea8ac273e5..3a92ca5fd48 100644
 --- a/server/fd.c
 +++ b/server/fd.c
-@@ -2534,6 +2534,50 @@ failed:
+@@ -2574,6 +2574,50 @@ failed:
      free( name );
  }
  
@@ -107,7 +103,7 @@ index 06d1d81bdb0..7b016acb382 100644
  struct completion *fd_get_completion( struct fd *fd, apc_param_t *p_key )
  {
      *p_key = fd->comp_key;
-@@ -2812,3 +2856,14 @@ DECL_HANDLER(set_fd_name_info)
+@@ -2852,3 +2896,14 @@ DECL_HANDLER(set_fd_name_info)
      }
      if (root_fd) release_object( root_fd );
  }
@@ -123,10 +119,10 @@ index 06d1d81bdb0..7b016acb382 100644
 +    }
 +}
 diff --git a/server/protocol.def b/server/protocol.def
-index 423e6079009..c6110fc675e 100644
+index c3442c06e9b..80ca76f9271 100644
 --- a/server/protocol.def
 +++ b/server/protocol.def
-@@ -3821,6 +3821,13 @@ struct handle_info
+@@ -3822,6 +3822,13 @@ struct handle_info
  @END
  
  
@@ -141,5 +137,5 @@ index 423e6079009..c6110fc675e 100644
  @REQ(get_window_layered_info)
      user_handle_t  handle;        /* handle to the window */
 -- 
-2.26.2
+2.27.0
 
diff --git a/patches/server-File_Permissions/definition b/patches/server-File_Permissions/definition
index a699a6fd1..4d43f0da0 100644
--- a/patches/server-File_Permissions/definition
+++ b/patches/server-File_Permissions/definition
@@ -1,3 +1,5 @@
 Fixes: Allow to open files/directories without any access rights in order to query attributes
 Fixes: [44691] Improve mapping of DACL to file permissions
 Depends: ntdll-Junction_Points
+# Re-enable me when ntdll-Junction_Points gets re-enabled!
+Disabled: true
diff --git a/patches/server-Inherited_ACLs/definition b/patches/server-Inherited_ACLs/definition
index 47a12d723..fb18b908a 100644
--- a/patches/server-Inherited_ACLs/definition
+++ b/patches/server-Inherited_ACLs/definition
@@ -1,4 +1,4 @@
 Depends: server-Stored_ACLs
 Fixes: Support for inherited file ACLs
-# Re-enable me when ntdll-DOS_Attributes gets re-enabled!
+# Re-enable me when ntdll-Junction_Points gets re-enabled!
 Disabled: true
diff --git a/patches/server-Stored_ACLs/definition b/patches/server-Stored_ACLs/definition
index c2f25c70f..6d80bbd68 100644
--- a/patches/server-Stored_ACLs/definition
+++ b/patches/server-Stored_ACLs/definition
@@ -1,5 +1,5 @@
 Depends: ntdll-DOS_Attributes
 Depends: server-File_Permissions
 Fixes: [33576] Support for stored file ACLs
-# Re-enable me when ntdll-DOS_Attributes gets re-enabled!
+# Re-enable me when ntdll-Junction_Points gets re-enabled!
 Disabled: true
diff --git a/patches/winebuild-Fake_Dlls/0003-winebuild-Generate-syscall-thunks-for-ntdll-exports.patch b/patches/winebuild-Fake_Dlls/0003-winebuild-Generate-syscall-thunks-for-ntdll-exports.patch
index 695c58554..5231062b1 100644
--- a/patches/winebuild-Fake_Dlls/0003-winebuild-Generate-syscall-thunks-for-ntdll-exports.patch
+++ b/patches/winebuild-Fake_Dlls/0003-winebuild-Generate-syscall-thunks-for-ntdll-exports.patch
@@ -1,4 +1,4 @@
-From 607a86f034677449a7fa4628ec2df013b65bfa90 Mon Sep 17 00:00:00 2001
+From 7e13aba360d1dd4d5a09f5b9a624dfa4e61d3ddf Mon Sep 17 00:00:00 2001
 From: =?UTF-8?q?Michael=20M=C3=BCller?= <michael@fds-team.de>
 Date: Thu, 11 May 2017 05:32:55 +0200
 Subject: [PATCH] winebuild: Generate syscall thunks for ntdll exports.
@@ -22,7 +22,7 @@ Based on a patch by Erich E. Hoover.
  14 files changed, 221 insertions(+), 32 deletions(-)
 
 diff --git a/dlls/ntdll/loader.c b/dlls/ntdll/loader.c
-index c2e65c94abc..0f9fe76e9af 100644
+index a09c17e3b50..d22fd0141c0 100644
 --- a/dlls/ntdll/loader.c
 +++ b/dlls/ntdll/loader.c
 @@ -3812,6 +3812,7 @@ PIMAGE_NT_HEADERS WINAPI RtlImageNtHeader(HMODULE hModule)
@@ -106,7 +106,7 @@ index 5a6809638ae..c6988ce08e3 100644
      peb = teb->Peb;
      peb->FastPebLock        = &peb_lock;
 diff --git a/dlls/ntdll/unix/thread.c b/dlls/ntdll/unix/thread.c
-index 97b191e1a5b..2dbaa43e731 100644
+index 0470f5eaa8a..55afc1748ef 100644
 --- a/dlls/ntdll/unix/thread.c
 +++ b/dlls/ntdll/unix/thread.c
 @@ -85,7 +85,7 @@ static void pthread_exit_wrapper( int status )
@@ -127,7 +127,7 @@ index 97b191e1a5b..2dbaa43e731 100644
      thread_data->request_fd = -1;
      thread_data->reply_fd   = -1;
 diff --git a/dlls/ntdll/unix/unix_private.h b/dlls/ntdll/unix/unix_private.h
-index abedfc316ae..62d0c115026 100644
+index 0d1d0e5025f..ac792801283 100644
 --- a/dlls/ntdll/unix/unix_private.h
 +++ b/dlls/ntdll/unix/unix_private.h
 @@ -111,7 +111,7 @@ extern void CDECL server_release_fd( HANDLE handle, int unix_fd ) DECLSPEC_HIDDE
@@ -140,19 +140,19 @@ index abedfc316ae..62d0c115026 100644
  extern void CDECL DECLSPEC_NORETURN exit_process( int status ) DECLSPEC_HIDDEN;
  extern NTSTATUS CDECL get_thread_ldt_entry( HANDLE handle, void *data, ULONG len, ULONG *ret_len ) DECLSPEC_HIDDEN;
 diff --git a/dlls/ntdll/unixlib.h b/dlls/ntdll/unixlib.h
-index 873cc7abdf2..c6fb8e0f2d4 100644
+index dd5c3e3784e..dae93ab1632 100644
 --- a/dlls/ntdll/unixlib.h
 +++ b/dlls/ntdll/unixlib.h
 @@ -28,7 +28,7 @@ struct ldt_copy;
  struct msghdr;
  
  /* increment this when you change the function table */
--#define NTDLL_UNIXLIB_VERSION 44
-+#define NTDLL_UNIXLIB_VERSION 45
+-#define NTDLL_UNIXLIB_VERSION 47
++#define NTDLL_UNIXLIB_VERSION 48
  
  struct unix_funcs
  {
-@@ -225,7 +225,7 @@ struct unix_funcs
+@@ -253,7 +253,7 @@ struct unix_funcs
  
      /* thread/process functions */
      TEB *         (CDECL *init_threading)( int *nb_threads_ptr, struct ldt_copy **ldt_copy, SIZE_T *size,
diff --git a/patches/winebuild-Fake_Dlls/0010-tools-winebuild-Add-syscall-thunks-for-64-bit.patch b/patches/winebuild-Fake_Dlls/0010-tools-winebuild-Add-syscall-thunks-for-64-bit.patch
index e40a80148..c40eb8cab 100644
--- a/patches/winebuild-Fake_Dlls/0010-tools-winebuild-Add-syscall-thunks-for-64-bit.patch
+++ b/patches/winebuild-Fake_Dlls/0010-tools-winebuild-Add-syscall-thunks-for-64-bit.patch
@@ -1,4 +1,4 @@
-From 6f1973aa2aee35139ae041e59d37a45ff22dc5bf Mon Sep 17 00:00:00 2001
+From b37d55d71b294fb96cb4816f2cb3f2448731e115 Mon Sep 17 00:00:00 2001
 From: =?UTF-8?q?Michael=20M=C3=BCller?= <michael@fds-team.de>
 Date: Thu, 7 Sep 2017 00:38:09 +0200
 Subject: [PATCH] tools/winebuild: Add syscall thunks for 64 bit.
@@ -15,10 +15,10 @@ Subject: [PATCH] tools/winebuild: Add syscall thunks for 64 bit.
  8 files changed, 305 insertions(+), 14 deletions(-)
 
 diff --git a/dlls/kernel32/tests/loader.c b/dlls/kernel32/tests/loader.c
-index 1f525194ce73..21af7b4ce7a4 100644
+index 95939ba6bde..ae5462f6e55 100644
 --- a/dlls/kernel32/tests/loader.c
 +++ b/dlls/kernel32/tests/loader.c
-@@ -1574,7 +1574,7 @@ static void test_filenames(void)
+@@ -1573,7 +1573,7 @@ static void test_filenames(void)
  
  static void test_FakeDLL(void)
  {
@@ -27,7 +27,7 @@ index 1f525194ce73..21af7b4ce7a4 100644
      NTSTATUS (WINAPI *pNtSetEvent)(HANDLE, ULONG *) = NULL;
      IMAGE_EXPORT_DIRECTORY *dir;
      HMODULE module = GetModuleHandleA("ntdll.dll");
-@@ -1616,8 +1616,13 @@ static void test_FakeDLL(void)
+@@ -1615,8 +1615,13 @@ static void test_FakeDLL(void)
  
          dll_func = (BYTE *)GetProcAddress(module, func_name);
          ok(dll_func != NULL, "%s: GetProcAddress returned NULL\n", func_name);
@@ -42,7 +42,7 @@ index 1f525194ce73..21af7b4ce7a4 100644
              todo_wine ok(0, "%s: Export is a stub-function, skipping\n", func_name);
              continue;
 diff --git a/dlls/ntdll/unix/thread.c b/dlls/ntdll/unix/thread.c
-index 2dbaa43e731a..e1da90222d38 100644
+index 55afc1748ef..0bffa4029c1 100644
 --- a/dlls/ntdll/unix/thread.c
 +++ b/dlls/ntdll/unix/thread.c
 @@ -110,7 +110,7 @@ TEB * CDECL init_threading( int *nb_threads_ptr, struct ldt_copy **ldt_copy, SIZ
@@ -51,14 +51,14 @@ index 2dbaa43e731a..e1da90222d38 100644
      info_size = server_init_thread( teb->Peb, suspend );
 -    virtual_map_user_shared_data();
 +    virtual_map_user_shared_data(syscall_handler);
+     init_files();
      NtCreateKeyedEvent( &keyed_event, GENERIC_READ | GENERIC_WRITE, NULL, 0 );
  
-     if (size) *size = info_size;
 diff --git a/dlls/ntdll/unix/unix_private.h b/dlls/ntdll/unix/unix_private.h
-index 33a551e947c2..d06f366d3c6d 100644
+index ac792801283..b7b66b6b440 100644
 --- a/dlls/ntdll/unix/unix_private.h
 +++ b/dlls/ntdll/unix/unix_private.h
-@@ -153,7 +153,7 @@ extern void virtual_init(void) DECLSPEC_HIDDEN;
+@@ -176,7 +176,7 @@ extern void virtual_init(void) DECLSPEC_HIDDEN;
  extern TEB *virtual_alloc_first_teb(void) DECLSPEC_HIDDEN;
  extern NTSTATUS virtual_alloc_teb( TEB **ret_teb ) DECLSPEC_HIDDEN;
  extern void virtual_free_teb( TEB *teb ) DECLSPEC_HIDDEN;
@@ -68,10 +68,10 @@ index 33a551e947c2..d06f366d3c6d 100644
  extern BOOL virtual_is_valid_code_address( const void *addr, SIZE_T size ) DECLSPEC_HIDDEN;
  extern int virtual_handle_stack_fault( void *addr ) DECLSPEC_HIDDEN;
 diff --git a/dlls/ntdll/unix/virtual.c b/dlls/ntdll/unix/virtual.c
-index 9fb2ecd38ca3..ad11485d1cea 100644
+index b656a62c154..9b415fe5058 100644
 --- a/dlls/ntdll/unix/virtual.c
 +++ b/dlls/ntdll/unix/virtual.c
-@@ -2772,14 +2772,14 @@ TEB *virtual_alloc_first_teb(void)
+@@ -2588,14 +2588,14 @@ TEB *virtual_alloc_first_teb(void)
      TEB *teb;
      PEB *peb;
      NTSTATUS status;
@@ -88,7 +88,7 @@ index 9fb2ecd38ca3..ad11485d1cea 100644
      if (status)
      {
          ERR( "wine: failed to map the shared user data: %08x\n", status );
-@@ -2977,7 +2977,7 @@ void virtual_clear_thread_stack( void *stack_end )
+@@ -2791,7 +2791,7 @@ void virtual_clear_thread_stack( void *stack_end )
  /***********************************************************************
   *           virtual_map_user_shared_data
   */
@@ -97,7 +97,7 @@ index 9fb2ecd38ca3..ad11485d1cea 100644
  {
      static const WCHAR wine_usdW[] = {'\\','K','e','r','n','e','l','O','b','j','e','c','t','s',
                                        '\\','_','_','w','i','n','e','_','u','s','e','r','_','s','h','a','r','e','d','_','d','a','t','a',0};
-@@ -3000,6 +3000,11 @@ void virtual_map_user_shared_data(void)
+@@ -2814,6 +2814,11 @@ void virtual_map_user_shared_data(void)
          ERR( "failed to remap the process USD: %d\n", res );
          exit(1);
      }
@@ -110,7 +110,7 @@ index 9fb2ecd38ca3..ad11485d1cea 100644
      NtClose( section );
  }
 diff --git a/libs/wine/loader.c b/libs/wine/loader.c
-index 4597a6cb3243..3d0d75e9c6d3 100644
+index 4597a6cb324..3d0d75e9c6d 100644
 --- a/libs/wine/loader.c
 +++ b/libs/wine/loader.c
 @@ -398,7 +398,11 @@ static void *map_dll( const IMAGE_NT_HEADERS *nt_descr )
@@ -126,7 +126,7 @@ index 4597a6cb3243..3d0d75e9c6d3 100644
      sec++;
  
 diff --git a/server/mapping.c b/server/mapping.c
-index 0941dd87c05d..002f3215af2e 100644
+index 0941dd87c05..002f3215af2 100644
 --- a/server/mapping.c
 +++ b/server/mapping.c
 @@ -964,7 +964,11 @@ struct object *create_user_data_mapping( struct object *root, const struct unico
@@ -143,7 +143,7 @@ index 0941dd87c05d..002f3215af2e 100644
  }
  
 diff --git a/tools/winebuild/parser.c b/tools/winebuild/parser.c
-index 74216f8bb6e7..820516329a47 100644
+index 74216f8bb6e..820516329a4 100644
 --- a/tools/winebuild/parser.c
 +++ b/tools/winebuild/parser.c
 @@ -545,7 +545,7 @@ static const char *parse_spec_flags( DLLSPEC *spec, ORDDEF *odp )
@@ -156,7 +156,7 @@ index 74216f8bb6e7..820516329a47 100644
      if (odp->flags & (FLAG_FORWARD | FLAG_REGISTER))
          return 0;
 diff --git a/tools/winebuild/spec32.c b/tools/winebuild/spec32.c
-index 07d6eed05fcc..9cc4698d0d7d 100644
+index 07d6eed05fc..9cc4698d0d7 100644
 --- a/tools/winebuild/spec32.c
 +++ b/tools/winebuild/spec32.c
 @@ -375,11 +375,11 @@ static void output_relay_debug( DLLSPEC *spec )
@@ -497,5 +497,5 @@ index 07d6eed05fcc..9cc4698d0d7d 100644
      }
      else
 -- 
-2.26.2
+2.27.0
 
diff --git a/patches/ws2_32-WSACleanup/0002-ws2_32-Invalidate-client-side-file-descriptor-cache-.patch b/patches/ws2_32-WSACleanup/0002-ws2_32-Invalidate-client-side-file-descriptor-cache-.patch
index 92f9f472c..a851402f4 100644
--- a/patches/ws2_32-WSACleanup/0002-ws2_32-Invalidate-client-side-file-descriptor-cache-.patch
+++ b/patches/ws2_32-WSACleanup/0002-ws2_32-Invalidate-client-side-file-descriptor-cache-.patch
@@ -1,4 +1,4 @@
-From 85887cf68b055ca7149a428b32e9cac31e2190ca Mon Sep 17 00:00:00 2001
+From 02562df4bb8c6c805b140335b9076a2a895244bf Mon Sep 17 00:00:00 2001
 From: Sebastian Lackner <sebastian@fds-team.de>
 Date: Sun, 6 Sep 2015 12:41:17 +0200
 Subject: [PATCH] ws2_32: Invalidate client-side file descriptor cache in
@@ -48,10 +48,10 @@ index 9e1cc85a36e..3f4ba60b7bb 100644
  /***********************************************************************
   *           wine_server_release_fd   (NTDLL.@)
 diff --git a/dlls/ntdll/unix/loader.c b/dlls/ntdll/unix/loader.c
-index b09049b855b..bd37b8362b0 100644
+index 73be77e7afc..2393f73b306 100644
 --- a/dlls/ntdll/unix/loader.c
 +++ b/dlls/ntdll/unix/loader.c
-@@ -937,6 +937,7 @@ static struct unix_funcs unix_funcs =
+@@ -952,6 +952,7 @@ static struct unix_funcs unix_funcs =
      fork_and_exec,
      wine_server_call,
      server_send_fd,
@@ -91,7 +91,7 @@ index cf6f6c3832c..586d0ffcf72 100644
  /***********************************************************************
   *           server_get_unix_fd
 diff --git a/dlls/ntdll/unix/unix_private.h b/dlls/ntdll/unix/unix_private.h
-index e82b0960343..673d01c6bf9 100644
+index 223015a785a..9c385ec42d8 100644
 --- a/dlls/ntdll/unix/unix_private.h
 +++ b/dlls/ntdll/unix/unix_private.h
 @@ -99,6 +99,7 @@ extern void CDECL virtual_release_address_space(void) DECLSPEC_HIDDEN;
@@ -103,19 +103,19 @@ index e82b0960343..673d01c6bf9 100644
                                       int *needs_close, enum server_fd_type *type,
                                       unsigned int *options ) DECLSPEC_HIDDEN;
 diff --git a/dlls/ntdll/unixlib.h b/dlls/ntdll/unixlib.h
-index 958fab4c059..873cc7abdf2 100644
+index 6c8e151b554..dd5c3e3784e 100644
 --- a/dlls/ntdll/unixlib.h
 +++ b/dlls/ntdll/unixlib.h
 @@ -28,7 +28,7 @@ struct ldt_copy;
  struct msghdr;
  
  /* increment this when you change the function table */
--#define NTDLL_UNIXLIB_VERSION 43
-+#define NTDLL_UNIXLIB_VERSION 44
+-#define NTDLL_UNIXLIB_VERSION 46
++#define NTDLL_UNIXLIB_VERSION 47
  
  struct unix_funcs
  {
-@@ -239,6 +239,7 @@ struct unix_funcs
+@@ -267,6 +267,7 @@ struct unix_funcs
      /* server functions */
      unsigned int  (CDECL *server_call)( void *req_ptr );
      void          (CDECL *server_send_fd)( int fd );

diff --git a/patches/ntdll-DOS_Attributes/0001-ntdll-Implement-retrieving-DOS-attributes-in-NtQuery.patch b/patches/ntdll-DOS_Attributes/0001-ntdll-Implement-retrieving-DOS-attributes-in-fd_-get.patch
similarity index 68%
rename from patches/ntdll-DOS_Attributes/0001-ntdll-Implement-retrieving-DOS-attributes-in-NtQuery.patch
rename to patches/ntdll-DOS_Attributes/0001-ntdll-Implement-retrieving-DOS-attributes-in-fd_-get.patch
index 2fc8ee32c..1b9b1b82c 100644
--- a/patches/ntdll-DOS_Attributes/0001-ntdll-Implement-retrieving-DOS-attributes-in-NtQuery.patch
+++ b/patches/ntdll-DOS_Attributes/0001-ntdll-Implement-retrieving-DOS-attributes-in-fd_-get.patch
@@ -1,23 +1,23 @@
-From 74693bc85e3dbc1f757cfea348dc385b4badeb89 Mon Sep 17 00:00:00 2001
+From 0bfc43bff3a9b53e65c82d987bb072f0ff0a3a2b Mon Sep 17 00:00:00 2001
 From: "Erich E. Hoover" <erich.e.hoover@gmail.com>
 Date: Tue, 19 Aug 2014 22:10:49 -0600
 Subject: [PATCH] ntdll: Implement retrieving DOS attributes in
- NtQueryInformationFile.
+ [fd_]get_file_info().
 
 ---
- configure.ac          | 12 ++++++++++++
- dlls/ntdll/file.c     | 16 ++++++++++++++++
- include/wine/port.h   |  8 ++++++++
- libs/port/Makefile.in |  3 ++-
- libs/port/xattr.c     | 39 +++++++++++++++++++++++++++++++++++++++
- 5 files changed, 77 insertions(+), 1 deletion(-)
+ configure.ac           | 12 +++++++++++
+ dlls/ntdll/unix/file.c | 22 ++++++++++++++++++-
+ include/wine/port.h    |  9 ++++++++
+ libs/port/Makefile.in  |  3 ++-
+ libs/port/xattr.c      | 49 ++++++++++++++++++++++++++++++++++++++++++
+ 5 files changed, 93 insertions(+), 2 deletions(-)
  create mode 100644 libs/port/xattr.c
 
 diff --git a/configure.ac b/configure.ac
-index 180d958fc4ef..1e3d2e0d4ef0 100644
+index d3bd12a6340..5e775c04449 100644
 --- a/configure.ac
 +++ b/configure.ac
-@@ -89,6 +89,7 @@ AC_ARG_WITH(usb,       AS_HELP_STRING([--without-usb],[do not use the libusb lib
+@@ -88,6 +88,7 @@ AC_ARG_WITH(usb,       AS_HELP_STRING([--without-usb],[do not use the libusb lib
  AC_ARG_WITH(v4l2,      AS_HELP_STRING([--without-v4l2],[do not use v4l2 (video capture)]))
  AC_ARG_WITH(vkd3d,     AS_HELP_STRING([--without-vkd3d],[do not use vkd3d (Direct3D 12 support)]))
  AC_ARG_WITH(vulkan,    AS_HELP_STRING([--without-vulkan],[do not use Vulkan]))
@@ -25,7 +25,7 @@ index 180d958fc4ef..1e3d2e0d4ef0 100644
  AC_ARG_WITH(xcomposite,AS_HELP_STRING([--without-xcomposite],[do not use the Xcomposite extension]),
              [if test "x$withval" = "xno"; then ac_cv_header_X11_extensions_Xcomposite_h=no; fi])
  AC_ARG_WITH(xcursor,   AS_HELP_STRING([--without-xcursor],[do not use the Xcursor extension]),
-@@ -709,6 +710,17 @@ AC_CHECK_HEADERS([libprocstat.h],,,
+@@ -697,6 +698,17 @@ AC_CHECK_HEADERS([libprocstat.h],,,
  #include <sys/socket.h>
  #endif])
  
@@ -43,13 +43,13 @@ index 180d958fc4ef..1e3d2e0d4ef0 100644
  dnl **** Check for working dll ****
  
  AC_SUBST(DLLFLAGS,"-D_REENTRANT")
-diff --git a/dlls/ntdll/file.c b/dlls/ntdll/file.c
-index 9a9acfdb623b..5536e61db2e4 100644
---- a/dlls/ntdll/file.c
-+++ b/dlls/ntdll/file.c
-@@ -126,6 +126,22 @@ mode_t FILE_umask = 0;
- NTSTATUS FILE_DecodeSymlink(const char *unix_src, char *unix_dest, USHORT *unix_dest_len,
-                             DWORD *tag, ULONG *flags, BOOL *is_dir);
+diff --git a/dlls/ntdll/unix/file.c b/dlls/ntdll/unix/file.c
+index 66ce2eb5fe4..d2e783f3300 100644
+--- a/dlls/ntdll/unix/file.c
++++ b/dlls/ntdll/unix/file.c
+@@ -1431,6 +1431,22 @@ static BOOL append_entry( struct dir_data *data, const char *long_name,
+ }
+ 
  
 +/* Match the Samba conventions for storing DOS file attributes */
 +#define SAMBA_XATTR_DOS_ATTRIB XATTR_USER_PREFIX "DOSATTRIB"
@@ -70,11 +70,31 @@ index 9a9acfdb623b..5536e61db2e4 100644
  /* fetch the attributes of a file */
  static inline ULONG get_file_attributes( const struct stat *st )
  {
+@@ -1450,7 +1466,8 @@ static inline ULONG get_file_attributes( const struct stat *st )
+ static int get_file_info( const char *path, struct stat *st, ULONG *attr )
+ {
+     char *parent_path;
+-    int ret;
++    char hexattr[11];
++    int len, ret;
+ 
+     *attr = 0;
+     ret = lstat( path, st );
+@@ -1476,6 +1493,9 @@ static int get_file_info( const char *path, struct stat *st, ULONG *attr )
+         RtlFreeHeap( GetProcessHeap(), 0, parent_path );
+     }
+     *attr |= get_file_attributes( st );
++    len = xattr_get( path, SAMBA_XATTR_DOS_ATTRIB, hexattr, sizeof(hexattr)-1 );
++    if (len == -1) return ret;
++    *attr |= get_file_xattr( hexattr, len );
+     return ret;
+ }
+ 
 diff --git a/include/wine/port.h b/include/wine/port.h
-index e8434c73cca2..f0507efcc7e7 100644
+index e8434c73cca..6e81cb71a76 100644
 --- a/include/wine/port.h
 +++ b/include/wine/port.h
-@@ -361,6 +361,14 @@ int usleep (unsigned int useconds);
+@@ -361,6 +361,15 @@ int usleep (unsigned int useconds);
  
  extern int mkstemps(char *template, int suffix_len);
  
@@ -85,12 +105,13 @@ index e8434c73cca2..f0507efcc7e7 100644
 +#endif
 +
 +extern int xattr_fget( int filedes, const char *name, void *value, size_t size );
++extern int xattr_get( const char *path, const char *name, void *value, size_t size );
 +
  #else /* NO_LIBWINE_PORT */
  
  #define __WINE_NOT_PORTABLE(func) func##_is_not_portable func##_is_not_portable
 diff --git a/libs/port/Makefile.in b/libs/port/Makefile.in
-index 1963afe24232..4b1ecab7516b 100644
+index 1963afe2423..4b1ecab7516 100644
 --- a/libs/port/Makefile.in
 +++ b/libs/port/Makefile.in
 @@ -22,4 +22,5 @@ C_SRCS = \
@@ -102,10 +123,10 @@ index 1963afe24232..4b1ecab7516b 100644
 +	xattr.c
 diff --git a/libs/port/xattr.c b/libs/port/xattr.c
 new file mode 100644
-index 000000000000..94b77132bbf2
+index 00000000000..88e900dac6d
 --- /dev/null
 +++ b/libs/port/xattr.c
-@@ -0,0 +1,39 @@
+@@ -0,0 +1,49 @@
 +/*
 + * extended attributes functions
 + *
@@ -145,6 +166,16 @@ index 000000000000..94b77132bbf2
 +    return -1;
 +#endif
 +}
++
++int xattr_get( const char *path, const char *name, void *value, size_t size )
++{
++#if defined(HAVE_ATTR_XATTR_H)
++    return getxattr( path, name, value, size );
++#else
++    errno = ENOSYS;
++    return -1;
++#endif
++}
 -- 
-2.26.2
+2.27.0
 
diff --git a/patches/ntdll-DOS_Attributes/0002-ntdll-Implement-retrieving-DOS-attributes-in-NtQuery.patch b/patches/ntdll-DOS_Attributes/0002-ntdll-Implement-retrieving-DOS-attributes-in-NtQuery.patch
deleted file mode 100644
index 21d2eb2f8..000000000
--- a/patches/ntdll-DOS_Attributes/0002-ntdll-Implement-retrieving-DOS-attributes-in-NtQuery.patch
+++ /dev/null
@@ -1,69 +0,0 @@
-From 34ed49d7dbff7c5f0da8553330c3378b574429fc Mon Sep 17 00:00:00 2001
-From: "Erich E. Hoover" <erich.e.hoover@gmail.com>
-Date: Wed, 20 Aug 2014 16:04:34 -0600
-Subject: [PATCH] ntdll: Implement retrieving DOS attributes in
- NtQuery[Full]AttributesFile and NtQueryDirectoryFile.
-
----
- dlls/ntdll/file.c   |  6 +++++-
- include/wine/port.h |  1 +
- libs/port/xattr.c   | 10 ++++++++++
- 3 files changed, 16 insertions(+), 1 deletion(-)
-
-diff --git a/dlls/ntdll/file.c b/dlls/ntdll/file.c
-index 5536e61db2e4..2fd62ebfb802 100644
---- a/dlls/ntdll/file.c
-+++ b/dlls/ntdll/file.c
-@@ -182,7 +182,8 @@ int fd_get_file_info( int fd, unsigned int options, struct stat *st, ULONG *attr
- int get_file_info( const char *path, struct stat *st, ULONG *attr )
- {
-     char *parent_path;
--    int ret;
-+    char hexattr[11];
-+    int len, ret;
- 
-     *attr = 0;
-     ret = lstat( path, st );
-@@ -215,6 +216,9 @@ int get_file_info( const char *path, struct stat *st, ULONG *attr )
-         RtlFreeHeap( GetProcessHeap(), 0, parent_path );
-     }
-     *attr |= get_file_attributes( st );
-+    len = xattr_get( path, SAMBA_XATTR_DOS_ATTRIB, hexattr, sizeof(hexattr)-1 );
-+    if (len == -1) return ret;
-+    *attr |= get_file_xattr( hexattr, len );
-     return ret;
- }
- 
-diff --git a/include/wine/port.h b/include/wine/port.h
-index f0507efcc7e7..6e81cb71a76d 100644
---- a/include/wine/port.h
-+++ b/include/wine/port.h
-@@ -368,6 +368,7 @@ extern int mkstemps(char *template, int suffix_len);
- #endif
- 
- extern int xattr_fget( int filedes, const char *name, void *value, size_t size );
-+extern int xattr_get( const char *path, const char *name, void *value, size_t size );
- 
- #else /* NO_LIBWINE_PORT */
- 
-diff --git a/libs/port/xattr.c b/libs/port/xattr.c
-index 94b77132bbf2..88e900dac6d4 100644
---- a/libs/port/xattr.c
-+++ b/libs/port/xattr.c
-@@ -37,3 +37,13 @@ int xattr_fget( int filedes, const char *name, void *value, size_t size )
-     return -1;
- #endif
- }
-+
-+int xattr_get( const char *path, const char *name, void *value, size_t size )
-+{
-+#if defined(HAVE_ATTR_XATTR_H)
-+    return getxattr( path, name, value, size );
-+#else
-+    errno = ENOSYS;
-+    return -1;
-+#endif
-+}
--- 
-2.26.2
-
diff --git a/patches/ntdll-DOS_Attributes/0003-ntdll-Implement-storing-DOS-attributes-in-NtSetInfor.patch b/patches/ntdll-DOS_Attributes/0003-ntdll-Implement-storing-DOS-attributes-in-NtSetInfor.patch
index 62aac1156..ab1e436ac 100644
--- a/patches/ntdll-DOS_Attributes/0003-ntdll-Implement-storing-DOS-attributes-in-NtSetInfor.patch
+++ b/patches/ntdll-DOS_Attributes/0003-ntdll-Implement-storing-DOS-attributes-in-NtSetInfor.patch
@@ -1,4 +1,4 @@
-From 1a04bc9a0ef3cf03b89d50becee9240f8a195873 Mon Sep 17 00:00:00 2001
+From 9f17f2e4f9842549820691f34f7d2da5719ead0a Mon Sep 17 00:00:00 2001
 From: "Erich E. Hoover" <erich.e.hoover@gmail.com>
 Date: Wed, 20 Aug 2014 00:08:52 -0600
 Subject: [PATCH] ntdll: Implement storing DOS attributes in
@@ -12,10 +12,10 @@ Subject: [PATCH] ntdll: Implement storing DOS attributes in
  4 files changed, 60 insertions(+), 24 deletions(-)
 
 diff --git a/dlls/ntdll/file.c b/dlls/ntdll/file.c
-index 2fd62ebfb802..c077add9769e 100644
+index bd6e3cbcf88..c1f9808e497 100644
 --- a/dlls/ntdll/file.c
 +++ b/dlls/ntdll/file.c
-@@ -178,6 +178,39 @@ int fd_get_file_info( int fd, unsigned int options, struct stat *st, ULONG *attr
+@@ -177,6 +177,39 @@ int fd_get_file_info( int fd, unsigned int options, struct stat *st, ULONG *attr
      return ret;
  }
  
@@ -52,10 +52,10 @@ index 2fd62ebfb802..c077add9769e 100644
 +    return STATUS_SUCCESS;
 +}
 +
- /* get the stat info and file attributes for a file (by name) */
- int get_file_info( const char *path, struct stat *st, ULONG *attr )
+ static int get_file_info( const char *path, struct stat *st, ULONG *attr )
  {
-@@ -3240,7 +3273,6 @@ NTSTATUS WINAPI NtSetInformationFile(HANDLE handle, PIO_STATUS_BLOCK io,
+     char *parent_path;
+@@ -3113,7 +3146,6 @@ NTSTATUS WINAPI NtSetInformationFile(HANDLE handle, PIO_STATUS_BLOCK io,
      case FileBasicInformation:
          if (len >= sizeof(FILE_BASIC_INFORMATION))
          {
@@ -63,7 +63,7 @@ index 2fd62ebfb802..c077add9769e 100644
              const FILE_BASIC_INFORMATION *info = ptr;
              LARGE_INTEGER mtime, atime;
  
-@@ -3254,25 +3286,7 @@ NTSTATUS WINAPI NtSetInformationFile(HANDLE handle, PIO_STATUS_BLOCK io,
+@@ -3127,25 +3159,7 @@ NTSTATUS WINAPI NtSetInformationFile(HANDLE handle, PIO_STATUS_BLOCK io,
                  io->u.Status = set_file_times( fd, &mtime, &atime );
  
              if (io->u.Status == STATUS_SUCCESS && info->FileAttributes)
@@ -91,7 +91,7 @@ index 2fd62ebfb802..c077add9769e 100644
              if (needs_close) close( fd );
          }
 diff --git a/dlls/ntdll/tests/file.c b/dlls/ntdll/tests/file.c
-index 0b05c39685cd..b49a9a4dbbda 100644
+index 67d54c81fb0..4c2e63d3679 100644
 --- a/dlls/ntdll/tests/file.c
 +++ b/dlls/ntdll/tests/file.c
 @@ -1365,7 +1365,7 @@ static void test_file_basic_information(void)
@@ -131,7 +131,7 @@ index 0b05c39685cd..b49a9a4dbbda 100644
      /* Check NORMAL last of all (to make sure we can clear attributes) */
      memset(&fai_buf.fai.BasicInformation, 0, sizeof(fai_buf.fai.BasicInformation));
 diff --git a/include/wine/port.h b/include/wine/port.h
-index 6e81cb71a76d..f90396727d6d 100644
+index 6e81cb71a76..f90396727d6 100644
 --- a/include/wine/port.h
 +++ b/include/wine/port.h
 @@ -368,6 +368,8 @@ extern int mkstemps(char *template, int suffix_len);
@@ -144,7 +144,7 @@ index 6e81cb71a76d..f90396727d6d 100644
  
  #else /* NO_LIBWINE_PORT */
 diff --git a/libs/port/xattr.c b/libs/port/xattr.c
-index 88e900dac6d4..6918c9956cc6 100644
+index 88e900dac6d..6918c9956cc 100644
 --- a/libs/port/xattr.c
 +++ b/libs/port/xattr.c
 @@ -38,6 +38,26 @@ int xattr_fget( int filedes, const char *name, void *value, size_t size )
@@ -175,5 +175,5 @@ index 88e900dac6d4..6918c9956cc6 100644
  {
  #if defined(HAVE_ATTR_XATTR_H)
 -- 
-2.26.2
+2.27.0
 
diff --git a/patches/ntdll-DOS_Attributes/0004-ntdll-Implement-storing-DOS-attributes-in-NtCreateFi.patch b/patches/ntdll-DOS_Attributes/0004-ntdll-Implement-storing-DOS-attributes-in-NtCreateFi.patch
index 66bb90828..e78705b39 100644
--- a/patches/ntdll-DOS_Attributes/0004-ntdll-Implement-storing-DOS-attributes-in-NtCreateFi.patch
+++ b/patches/ntdll-DOS_Attributes/0004-ntdll-Implement-storing-DOS-attributes-in-NtCreateFi.patch
@@ -1,21 +1,70 @@
-From 8fde8af21e169d9a48bab50bac4d6e24238141b6 Mon Sep 17 00:00:00 2001
+From 769a1043bb174557b600c9ce38765846a3126e7f Mon Sep 17 00:00:00 2001
 From: "Erich E. Hoover" <erich.e.hoover@gmail.com>
 Date: Wed, 20 Aug 2014 15:28:00 -0600
 Subject: [PATCH] ntdll: Implement storing DOS attributes in NtCreateFile.
 
 ---
- dlls/ntdll/file.c            | 76 +++++++++++++++++++++++-------------
  dlls/ntdll/tests/directory.c | 24 ++++++------
+ dlls/ntdll/unix/file.c       | 74 +++++++++++++++++++++++-------------
  include/wine/port.h          |  2 +
  libs/port/xattr.c            | 20 ++++++++++
- 4 files changed, 82 insertions(+), 40 deletions(-)
+ 4 files changed, 81 insertions(+), 39 deletions(-)
 
-diff --git a/dlls/ntdll/file.c b/dlls/ntdll/file.c
-index c077add9769e..a596afed72e7 100644
---- a/dlls/ntdll/file.c
-+++ b/dlls/ntdll/file.c
-@@ -255,6 +255,21 @@ int get_file_info( const char *path, struct stat *st, ULONG *attr )
-     return ret;
+diff --git a/dlls/ntdll/tests/directory.c b/dlls/ntdll/tests/directory.c
+index 248ed99ab20..e0f4debc624 100644
+--- a/dlls/ntdll/tests/directory.c
++++ b/dlls/ntdll/tests/directory.c
+@@ -55,7 +55,6 @@ static NTSTATUS (WINAPI *pRtlWow64EnableFsRedirectionEx)( ULONG disable, ULONG *
+ 
+ /* The attribute sets to test */
+ static struct testfile_s {
+-    BOOL todo;                /* set if it doesn't work on wine yet */
+     BOOL attr_done;           /* set if attributes were tested for this file already */
+     const DWORD attr;         /* desired attribute */
+     WCHAR name[20];           /* filename to use */
+@@ -63,16 +62,16 @@ static struct testfile_s {
+     const char *description;  /* for error messages */
+     int nfound;               /* How many were found (expect 1) */
+ } testfiles[] = {
+-    { 0, 0, FILE_ATTRIBUTE_NORMAL,    {'l','o','n','g','f','i','l','e','n','a','m','e','.','t','m','p'}, "normal" },
+-    { 0, 0, FILE_ATTRIBUTE_NORMAL,    {'n','.','t','m','p',}, "normal" },
+-    { 1, 0, FILE_ATTRIBUTE_HIDDEN,    {'h','.','t','m','p',}, "hidden" },
+-    { 1, 0, FILE_ATTRIBUTE_SYSTEM,    {'s','.','t','m','p',}, "system" },
+-    { 0, 0, FILE_ATTRIBUTE_DIRECTORY, {'d','.','t','m','p',}, "directory" },
+-    { 0, 0, FILE_ATTRIBUTE_NORMAL,    {0xe9,'a','.','t','m','p'}, "normal" },
+-    { 0, 0, FILE_ATTRIBUTE_NORMAL,    {0xc9,'b','.','t','m','p'}, "normal" },
+-    { 0, 0, FILE_ATTRIBUTE_NORMAL,    {'e','a','.','t','m','p'},  "normal" },
+-    { 0, 0, FILE_ATTRIBUTE_DIRECTORY, {'.'},                  ". directory" },
+-    { 0, 0, FILE_ATTRIBUTE_DIRECTORY, {'.','.'},              ".. directory" }
++    { 0, FILE_ATTRIBUTE_NORMAL,    {'l','o','n','g','f','i','l','e','n','a','m','e','.','t','m','p'}, "normal" },
++    { 0, FILE_ATTRIBUTE_NORMAL,    {'n','.','t','m','p',}, "normal" },
++    { 0, FILE_ATTRIBUTE_HIDDEN,    {'h','.','t','m','p',}, "hidden" },
++    { 0, FILE_ATTRIBUTE_SYSTEM,    {'s','.','t','m','p',}, "system" },
++    { 0, FILE_ATTRIBUTE_DIRECTORY, {'d','.','t','m','p',}, "directory" },
++    { 0, FILE_ATTRIBUTE_NORMAL,    {0xe9,'a','.','t','m','p'}, "normal" },
++    { 0, FILE_ATTRIBUTE_NORMAL,    {0xc9,'b','.','t','m','p'}, "normal" },
++    { 0, FILE_ATTRIBUTE_NORMAL,    {'e','a','.','t','m','p'},  "normal" },
++    { 0, FILE_ATTRIBUTE_DIRECTORY, {'.'},                  ". directory" },
++    { 0, FILE_ATTRIBUTE_DIRECTORY, {'.','.'},              ".. directory" }
+ };
+ static const int test_dir_count = ARRAY_SIZE(testfiles);
+ static const int max_test_dir_size = ARRAY_SIZE(testfiles) + 5;  /* size of above plus some for .. etc */
+@@ -162,8 +161,7 @@ static void tally_test_file(FILE_BOTH_DIRECTORY_INFORMATION *dir_info)
+         if (namelen != len || memcmp(nameW, testfiles[i].name, len*sizeof(WCHAR)))
+             continue;
+         if (!testfiles[i].attr_done) {
+-            todo_wine_if (testfiles[i].todo)
+-                ok (attrib == (testfiles[i].attr & attribmask), "file %s: expected %s (%x), got %x (is your linux new enough?)\n", wine_dbgstr_w(testfiles[i].name), testfiles[i].description, testfiles[i].attr, attrib);
++            ok (attrib == (testfiles[i].attr & attribmask), "file %s: expected %s (%x), got %x (is your linux new enough?)\n", wine_dbgstr_w(testfiles[i].name), testfiles[i].description, testfiles[i].attr, attrib);
+             testfiles[i].attr_done = TRUE;
+         }
+         testfiles[i].nfound++;
+diff --git a/dlls/ntdll/unix/file.c b/dlls/ntdll/unix/file.c
+index 66ce2eb5fe4..0546039cc47 100644
+--- a/dlls/ntdll/unix/file.c
++++ b/dlls/ntdll/unix/file.c
+@@ -3004,6 +3004,20 @@ void CDECL set_show_dot_files( BOOL enable )
+     show_dot_files = enable;
  }
  
 +NTSTATUS set_file_info( const char *path, ULONG attr )
@@ -32,13 +81,12 @@ index c077add9769e..a596afed72e7 100644
 +        xattr_remove( path, SAMBA_XATTR_DOS_ATTRIB );
 +    return STATUS_SUCCESS;
 +}
-+
- /**************************************************************************
-  *                 FILE_CreateFile                    (internal)
-  * Open a file.
-@@ -266,6 +281,10 @@ static NTSTATUS FILE_CreateFile( PHANDLE handle, ACCESS_MASK access, POBJECT_ATT
-                                  ULONG attributes, ULONG sharing, ULONG disposition,
-                                  ULONG options, PVOID ea_buffer, ULONG ea_length )
+ 
+ /******************************************************************************
+  *              NtCreateFile   (NTDLL.@)
+@@ -3013,6 +3027,10 @@ NTSTATUS WINAPI NtCreateFile( HANDLE *handle, ACCESS_MASK access, OBJECT_ATTRIBU
+                               ULONG attributes, ULONG sharing, ULONG disposition,
+                               ULONG options, void *ea_buffer, ULONG ea_length )
  {
 +    static UNICODE_STRING empty_string;
 +    OBJECT_ATTRIBUTES unix_attr;
@@ -47,7 +95,7 @@ index c077add9769e..a596afed72e7 100644
      ANSI_STRING unix_name;
      BOOL created = FALSE;
  
-@@ -309,37 +328,34 @@ static NTSTATUS FILE_CreateFile( PHANDLE handle, ACCESS_MASK access, POBJECT_ATT
+@@ -3055,36 +3073,34 @@ NTSTATUS WINAPI NtCreateFile( HANDLE *handle, ACCESS_MASK access, OBJECT_ATTRIBU
          io->u.Status = STATUS_SUCCESS;
      }
  
@@ -58,17 +106,16 @@ index c077add9769e..a596afed72e7 100644
 -        OBJECT_ATTRIBUTES unix_attr = *attr;
 -        data_size_t len;
 -        struct object_attributes *objattr;
--
++        WARN("%s not found (%x)\n", debugstr_us(attr->ObjectName), io->u.Status );
++        return io->u.Status;
++    }
+ 
 -        unix_attr.ObjectName = &empty_string;  /* we send the unix name instead */
 -        if ((io->u.Status = alloc_object_attributes( &unix_attr, &objattr, &len )))
 -        {
 -            RtlFreeAnsiString( &unix_name );
 -            return io->u.Status;
 -        }
-+        WARN("%s not found (%x)\n", debugstr_us(attr->ObjectName), io->u.Status );
-+        return io->u.Status;
-+    }
- 
 -        SERVER_START_REQ( create_file )
 -        {
 -            req->access     = access;
@@ -90,7 +137,7 @@ index c077add9769e..a596afed72e7 100644
          RtlFreeAnsiString( &unix_name );
 +        return io->u.Status;
      }
--    else WARN("%s not found (%x)\n", debugstr_us(attr->ObjectName), io->u.Status );
+-    else WARN( "%s not found (%x)\n", debugstr_us(attr->ObjectName), io->u.Status );
 +
 +    SERVER_START_REQ( create_file )
 +    {
@@ -109,7 +156,7 @@ index c077add9769e..a596afed72e7 100644
  
      if (io->u.Status == STATUS_SUCCESS)
      {
-@@ -361,6 +377,11 @@ static NTSTATUS FILE_CreateFile( PHANDLE handle, ACCESS_MASK access, POBJECT_ATT
+@@ -3106,6 +3122,11 @@ NTSTATUS WINAPI NtCreateFile( HANDLE *handle, ACCESS_MASK access, OBJECT_ATTRIBU
              io->Information = FILE_OVERWRITTEN;
              break;
          }
@@ -121,7 +168,7 @@ index c077add9769e..a596afed72e7 100644
      }
      else if (io->u.Status == STATUS_TOO_MANY_OPENED_FILES)
      {
-@@ -368,6 +389,7 @@ static NTSTATUS FILE_CreateFile( PHANDLE handle, ACCESS_MASK access, POBJECT_ATT
+@@ -3113,6 +3134,7 @@ NTSTATUS WINAPI NtCreateFile( HANDLE *handle, ACCESS_MASK access, OBJECT_ATTRIBU
          if (!once++) ERR_(winediag)( "Too many open files, ulimit -n probably needs to be increased\n" );
      }
  
@@ -129,57 +176,8 @@ index c077add9769e..a596afed72e7 100644
      return io->u.Status;
  }
  
-diff --git a/dlls/ntdll/tests/directory.c b/dlls/ntdll/tests/directory.c
-index 4618f4eaff2b..44933c2153df 100644
---- a/dlls/ntdll/tests/directory.c
-+++ b/dlls/ntdll/tests/directory.c
-@@ -55,7 +55,6 @@ static NTSTATUS (WINAPI *pRtlWow64EnableFsRedirectionEx)( ULONG disable, ULONG *
- 
- /* The attribute sets to test */
- static struct testfile_s {
--    BOOL todo;                /* set if it doesn't work on wine yet */
-     BOOL attr_done;           /* set if attributes were tested for this file already */
-     const DWORD attr;         /* desired attribute */
-     WCHAR name[20];           /* filename to use */
-@@ -63,16 +62,16 @@ static struct testfile_s {
-     const char *description;  /* for error messages */
-     int nfound;               /* How many were found (expect 1) */
- } testfiles[] = {
--    { 0, 0, FILE_ATTRIBUTE_NORMAL,    {'l','o','n','g','f','i','l','e','n','a','m','e','.','t','m','p'}, "normal" },
--    { 0, 0, FILE_ATTRIBUTE_NORMAL,    {'n','.','t','m','p',}, "normal" },
--    { 1, 0, FILE_ATTRIBUTE_HIDDEN,    {'h','.','t','m','p',}, "hidden" },
--    { 1, 0, FILE_ATTRIBUTE_SYSTEM,    {'s','.','t','m','p',}, "system" },
--    { 0, 0, FILE_ATTRIBUTE_DIRECTORY, {'d','.','t','m','p',}, "directory" },
--    { 0, 0, FILE_ATTRIBUTE_NORMAL,    {0xe9,'a','.','t','m','p'}, "normal" },
--    { 0, 0, FILE_ATTRIBUTE_NORMAL,    {0xc9,'b','.','t','m','p'}, "normal" },
--    { 0, 0, FILE_ATTRIBUTE_NORMAL,    {'e','a','.','t','m','p'},  "normal" },
--    { 0, 0, FILE_ATTRIBUTE_DIRECTORY, {'.'},                  ". directory" },
--    { 0, 0, FILE_ATTRIBUTE_DIRECTORY, {'.','.'},              ".. directory" }
-+    { 0, FILE_ATTRIBUTE_NORMAL,    {'l','o','n','g','f','i','l','e','n','a','m','e','.','t','m','p'}, "normal" },
-+    { 0, FILE_ATTRIBUTE_NORMAL,    {'n','.','t','m','p',}, "normal" },
-+    { 0, FILE_ATTRIBUTE_HIDDEN,    {'h','.','t','m','p',}, "hidden" },
-+    { 0, FILE_ATTRIBUTE_SYSTEM,    {'s','.','t','m','p',}, "system" },
-+    { 0, FILE_ATTRIBUTE_DIRECTORY, {'d','.','t','m','p',}, "directory" },
-+    { 0, FILE_ATTRIBUTE_NORMAL,    {0xe9,'a','.','t','m','p'}, "normal" },
-+    { 0, FILE_ATTRIBUTE_NORMAL,    {0xc9,'b','.','t','m','p'}, "normal" },
-+    { 0, FILE_ATTRIBUTE_NORMAL,    {'e','a','.','t','m','p'},  "normal" },
-+    { 0, FILE_ATTRIBUTE_DIRECTORY, {'.'},                  ". directory" },
-+    { 0, FILE_ATTRIBUTE_DIRECTORY, {'.','.'},              ".. directory" }
- };
- static const int test_dir_count = ARRAY_SIZE(testfiles);
- static const int max_test_dir_size = ARRAY_SIZE(testfiles) + 5;  /* size of above plus some for .. etc */
-@@ -162,8 +161,7 @@ static void tally_test_file(FILE_BOTH_DIRECTORY_INFORMATION *dir_info)
-         if (namelen != len || memcmp(nameW, testfiles[i].name, len*sizeof(WCHAR)))
-             continue;
-         if (!testfiles[i].attr_done) {
--            todo_wine_if (testfiles[i].todo)
--                ok (attrib == (testfiles[i].attr & attribmask), "file %s: expected %s (%x), got %x (is your linux new enough?)\n", wine_dbgstr_w(testfiles[i].name), testfiles[i].description, testfiles[i].attr, attrib);
-+            ok (attrib == (testfiles[i].attr & attribmask), "file %s: expected %s (%x), got %x (is your linux new enough?)\n", wine_dbgstr_w(testfiles[i].name), testfiles[i].description, testfiles[i].attr, attrib);
-             testfiles[i].attr_done = TRUE;
-         }
-         testfiles[i].nfound++;
 diff --git a/include/wine/port.h b/include/wine/port.h
-index f90396727d6d..7d2c73887073 100644
+index f90396727d6..7d2c7388707 100644
 --- a/include/wine/port.h
 +++ b/include/wine/port.h
 @@ -371,6 +371,8 @@ extern int xattr_fget( int filedes, const char *name, void *value, size_t size )
@@ -192,7 +190,7 @@ index f90396727d6d..7d2c73887073 100644
  #else /* NO_LIBWINE_PORT */
  
 diff --git a/libs/port/xattr.c b/libs/port/xattr.c
-index 6918c9956cc6..683e7a615e2b 100644
+index 6918c9956cc..683e7a615e2 100644
 --- a/libs/port/xattr.c
 +++ b/libs/port/xattr.c
 @@ -67,3 +67,23 @@ int xattr_get( const char *path, const char *name, void *value, size_t size )
@@ -220,5 +218,5 @@ index 6918c9956cc6..683e7a615e2b 100644
 +#endif
 +}
 -- 
-2.26.2
+2.27.0
 
diff --git a/patches/ntdll-DOS_Attributes/0007-ntdll-Perform-the-Unix-style-hidden-file-check-withi.patch b/patches/ntdll-DOS_Attributes/0007-ntdll-Perform-the-Unix-style-hidden-file-check-withi.patch
index 7351d7b67..b9156aea7 100644
--- a/patches/ntdll-DOS_Attributes/0007-ntdll-Perform-the-Unix-style-hidden-file-check-withi.patch
+++ b/patches/ntdll-DOS_Attributes/0007-ntdll-Perform-the-Unix-style-hidden-file-check-withi.patch
@@ -1,31 +1,27 @@
-From e1e41f084c6cdeba3cb44aaa6753b13bc1411df8 Mon Sep 17 00:00:00 2001
+From 01a10dd50491ca0162a5293836cf9b9a3d3c0e34 Mon Sep 17 00:00:00 2001
 From: "Erich E. Hoover" <erich.e.hoover@gmail.com>
 Date: Wed, 20 Aug 2014 11:26:48 -0600
 Subject: [PATCH] ntdll: Perform the Unix-style hidden file check within the
  unified file info grabbing routine.
 
 ---
- dlls/ntdll/directory.c  | 15 +++++----------
- dlls/ntdll/file.c       | 10 ++++------
- dlls/ntdll/ntdll_misc.h |  2 +-
- 3 files changed, 10 insertions(+), 17 deletions(-)
+ dlls/ntdll/unix/file.c | 23 +++++++++--------------
+ 1 file changed, 9 insertions(+), 14 deletions(-)
 
-diff --git a/dlls/ntdll/directory.c b/dlls/ntdll/directory.c
-index ba50aa1b807..d6bf1354a5b 100644
---- a/dlls/ntdll/directory.c
-+++ b/dlls/ntdll/directory.c
-@@ -1274,17 +1274,17 @@ static DWORD WINAPI init_options( RTL_RUN_ONCE *once, void *param, void **contex
+diff --git a/dlls/ntdll/unix/file.c b/dlls/ntdll/unix/file.c
+index 496c92265e9..6f3772d20be 100644
+--- a/dlls/ntdll/unix/file.c
++++ b/dlls/ntdll/unix/file.c
+@@ -1217,15 +1217,15 @@ static BOOLEAN get_dir_case_sensitivity( const char *dir )
   *
   * Check if the specified file should be hidden based on its name and the show dot files option.
   */
--BOOL DIR_is_hidden_file( const UNICODE_STRING *name )
-+BOOL DIR_is_hidden_file( const char *name )
+-static BOOL is_hidden_file( const UNICODE_STRING *name )
++static BOOL is_hidden_file( const char *name )
  {
 -    WCHAR *p, *end;
 +    char *p, *end;
  
-     RtlRunOnceExecuteOnce( &init_once, init_options, NULL, NULL );
- 
      if (show_dot_files) return FALSE;
  
 -    end = p = name->Buffer + name->Length/sizeof(WCHAR);
@@ -37,7 +33,18 @@ index ba50aa1b807..d6bf1354a5b 100644
      if (p == end || *p != '.') return FALSE;
      /* make sure it isn't '.' or '..' */
      if (p + 1 == end) return FALSE;
-@@ -1532,11 +1532,6 @@ static NTSTATUS get_dir_data_entry( struct dir_data *dir_data, void *info_ptr, I
+@@ -1493,6 +1493,10 @@ static int get_file_info( const char *path, struct stat *st, ULONG *attr )
+         RtlFreeHeap( GetProcessHeap(), 0, parent_path );
+     }
+     *attr |= get_file_attributes( st );
++    /* convert Unix-style hidden files to a DOS hidden file attribute */
++    if (is_hidden_file( path ))
++        *attr |= FILE_ATTRIBUTE_HIDDEN;
++    /* retrieve any stored DOS attributes */
+     len = xattr_get( path, SAMBA_XATTR_DOS_ATTRIB, hexattr, sizeof(hexattr)-1 );
+     if (len == -1) return ret;
+     *attr |= get_file_xattr( hexattr, len );
+@@ -1684,11 +1688,6 @@ static NTSTATUS get_dir_data_entry( struct dir_data *dir_data, void *info_ptr, I
      if (class != FileNamesInformation)
      {
          if (st.st_dev != dir_data->id.dev) st.st_ino = 0;  /* ignore inode if on a different device */
@@ -49,55 +56,25 @@ index ba50aa1b807..d6bf1354a5b 100644
          fill_file_info( &st, attributes, info, class );
      }
  
-diff --git a/dlls/ntdll/file.c b/dlls/ntdll/file.c
-index 6a935044f46..a0e54c27198 100644
---- a/dlls/ntdll/file.c
-+++ b/dlls/ntdll/file.c
-@@ -250,6 +250,10 @@ int get_file_info( const char *path, struct stat *st, ULONG *attr )
-         RtlFreeHeap( GetProcessHeap(), 0, parent_path );
-     }
-     *attr |= get_file_attributes( st );
-+    /* convert Unix-style hidden files to a DOS hidden file attribute */
-+    if (DIR_is_hidden_file( path ))
-+        *attr |= FILE_ATTRIBUTE_HIDDEN;
-+    /* retrieve any stored DOS attributes */
-     len = xattr_get( path, SAMBA_XATTR_DOS_ATTRIB, hexattr, sizeof(hexattr)-1 );
-     if (len == -1) return ret;
-     *attr |= get_file_xattr( hexattr, len );
-@@ -3489,8 +3493,6 @@ NTSTATUS WINAPI NtQueryFullAttributesFile( const OBJECT_ATTRIBUTES *attr,
+@@ -3301,7 +3300,6 @@ NTSTATUS WINAPI NtQueryFullAttributesFile( const OBJECT_ATTRIBUTES *attr,
              info->AllocationSize = std.AllocationSize;
              info->EndOfFile      = std.EndOfFile;
              info->FileAttributes = basic.FileAttributes;
--            if (DIR_is_hidden_file( attr->ObjectName ))
--                info->FileAttributes |= FILE_ATTRIBUTE_HIDDEN;
+-            if (is_hidden_file( attr->ObjectName )) info->FileAttributes |= FILE_ATTRIBUTE_HIDDEN;
          }
          RtlFreeAnsiString( &unix_name );
      }
-@@ -3518,11 +3520,7 @@ NTSTATUS WINAPI NtQueryAttributesFile( const OBJECT_ATTRIBUTES *attr, FILE_BASIC
+@@ -3328,10 +3326,7 @@ NTSTATUS WINAPI NtQueryAttributesFile( const OBJECT_ATTRIBUTES *attr, FILE_BASIC
          else if (!S_ISREG(st.st_mode) && !S_ISDIR(st.st_mode))
              status = STATUS_INVALID_INFO_CLASS;
          else
 -        {
              status = fill_file_info( &st, attributes, info, FileBasicInformation );
--            if (DIR_is_hidden_file( attr->ObjectName ))
--                info->FileAttributes |= FILE_ATTRIBUTE_HIDDEN;
+-            if (is_hidden_file( attr->ObjectName )) info->FileAttributes |= FILE_ATTRIBUTE_HIDDEN;
 -        }
          RtlFreeAnsiString( &unix_name );
      }
-     else WARN("%s not found (%x)\n", debugstr_us(attr->ObjectName), status );
-diff --git a/dlls/ntdll/ntdll_misc.h b/dlls/ntdll/ntdll_misc.h
-index aeed9b857c2..b1cb9aa6843 100644
---- a/dlls/ntdll/ntdll_misc.h
-+++ b/dlls/ntdll/ntdll_misc.h
-@@ -168,7 +168,7 @@ extern NTSTATUS fill_file_info( const struct stat *st, ULONG attr, void *ptr,
-                                 FILE_INFORMATION_CLASS class ) DECLSPEC_HIDDEN;
- extern NTSTATUS server_get_unix_name( HANDLE handle, ANSI_STRING *unix_name ) DECLSPEC_HIDDEN;
- extern void init_directories(void) DECLSPEC_HIDDEN;
--extern BOOL DIR_is_hidden_file( const UNICODE_STRING *name ) DECLSPEC_HIDDEN;
-+extern BOOL DIR_is_hidden_file( const char *name ) DECLSPEC_HIDDEN;
- extern NTSTATUS DIR_unmount_device( HANDLE handle ) DECLSPEC_HIDDEN;
- extern NTSTATUS DIR_get_unix_cwd( char **cwd ) DECLSPEC_HIDDEN;
- extern unsigned int DIR_get_drives_info( struct drive_info info[MAX_DOS_DRIVES] ) DECLSPEC_HIDDEN;
+     else WARN( "%s not found (%x)\n", debugstr_us(attr->ObjectName), status );
 -- 
-2.25.1
+2.27.0
 
diff --git a/patches/ntdll-DOS_Attributes/definition b/patches/ntdll-DOS_Attributes/definition
index 274963b70..68d8e88ee 100644
--- a/patches/ntdll-DOS_Attributes/definition
+++ b/patches/ntdll-DOS_Attributes/definition
@@ -2,3 +2,6 @@ Fixes: [9158] Support for DOS hidden/system file attributes
 Fixes: [15679] cygwin symlinks not working in wine
 # Depends: ntdll-Syscall_Wrappers
 Depends: ntdll-Junction_Points
+# Currently awkwardly split between ntdll.dll and ntdll.so; wait for the rest
+# of the file functions to be moved to ntdll.so before finishing the rebase.
+Disabled: true
diff --git a/patches/ntdll-Junction_Points/0001-ntdll-Add-support-for-junction-point-creation.patch b/patches/ntdll-Junction_Points/0001-ntdll-Add-support-for-junction-point-creation.patch
index bf05ff102..fa2e04106 100644
--- a/patches/ntdll-Junction_Points/0001-ntdll-Add-support-for-junction-point-creation.patch
+++ b/patches/ntdll-Junction_Points/0001-ntdll-Add-support-for-junction-point-creation.patch
@@ -1,4 +1,4 @@
-From e171bdbabedaeaafc0181ee156bf08ef180809da Mon Sep 17 00:00:00 2001
+From e3e2a837a2dd411b3e265581388fba1050e08c53 Mon Sep 17 00:00:00 2001
 From: "Erich E. Hoover" <erich.e.hoover@gmail.com>
 Date: Thu, 16 Jan 2014 20:56:49 -0700
 Subject: [PATCH] ntdll: Add support for junction point creation.
@@ -18,10 +18,10 @@ Signed-off-by: Erich E. Hoover <erich.e.hoover@gmail.com>
  create mode 100644 libs/port/renameat2.c
 
 diff --git a/configure.ac b/configure.ac
-index 816e3684510..a1b6096b9b7 100644
+index 8a76b74e83d..d3bd12a6340 100644
 --- a/configure.ac
 +++ b/configure.ac
-@@ -2202,6 +2202,8 @@ AC_CHECK_FUNCS(\
+@@ -2203,6 +2203,8 @@ AC_CHECK_FUNCS(\
  	pwrite \
  	readdir \
  	readlink \
@@ -31,7 +31,7 @@ index 816e3684510..a1b6096b9b7 100644
  	select \
  	setproctitle \
 diff --git a/dlls/ntdll/file.c b/dlls/ntdll/file.c
-index 013706889bb..37dca75651c 100644
+index b3e881ac3c9..5a4004a61a4 100644
 --- a/dlls/ntdll/file.c
 +++ b/dlls/ntdll/file.c
 @@ -21,6 +21,7 @@
@@ -49,8 +49,8 @@ index 013706889bb..37dca75651c 100644
 +#include "ntifs.h"
  
  WINE_DEFAULT_DEBUG_CHANNEL(ntdll);
- WINE_DECLARE_DEBUG_CHANNEL(winediag);
-@@ -1663,6 +1665,104 @@ NTSTATUS WINAPI NtDeviceIoControlFile(HANDLE handle, HANDLE event,
+ 
+@@ -1545,6 +1547,104 @@ NTSTATUS WINAPI NtDeviceIoControlFile(HANDLE handle, HANDLE event,
  }
  
  
@@ -155,7 +155,7 @@ index 013706889bb..37dca75651c 100644
  /**************************************************************************
   *              NtFsControlFile                 [NTDLL.@]
   *              ZwFsControlFile                 [NTDLL.@]
-@@ -1747,6 +1847,24 @@ NTSTATUS WINAPI NtFsControlFile(HANDLE handle, HANDLE event, PIO_APC_ROUTINE apc
+@@ -1629,6 +1729,24 @@ NTSTATUS WINAPI NtFsControlFile(HANDLE handle, HANDLE event, PIO_APC_ROUTINE apc
          io->Information = 0;
          status = STATUS_SUCCESS;
          break;
@@ -181,7 +181,7 @@ index 013706889bb..37dca75651c 100644
          return server_ioctl_file( handle, event, apc, apc_context, io, code,
                                    in_buffer, in_size, out_buffer, out_size );
 diff --git a/dlls/ntdll/tests/file.c b/dlls/ntdll/tests/file.c
-index 31c18454f0e..046b49c2d2b 100644
+index 184b7cdad59..8b5ddbb0da1 100644
 --- a/dlls/ntdll/tests/file.c
 +++ b/dlls/ntdll/tests/file.c
 @@ -38,6 +38,7 @@
@@ -192,7 +192,7 @@ index 31c18454f0e..046b49c2d2b 100644
  
  #ifndef IO_COMPLETION_ALL_ACCESS
  #define IO_COMPLETION_ALL_ACCESS 0x001F0003
-@@ -4953,6 +4954,105 @@ static void test_file_readonly_access(void)
+@@ -4971,6 +4972,105 @@ static void test_file_readonly_access(void)
      DeleteFileW(path);
  }
  
@@ -298,17 +298,17 @@ index 31c18454f0e..046b49c2d2b 100644
  START_TEST(file)
  {
      HMODULE hkernel32 = GetModuleHandleA("kernel32.dll");
-@@ -5023,4 +5123,5 @@ START_TEST(file)
+@@ -5041,4 +5141,5 @@ START_TEST(file)
      test_query_attribute_information_file();
      test_ioctl();
      test_flush_buffers_file();
 +    test_reparse_points();
  }
 diff --git a/include/Makefile.in b/include/Makefile.in
-index 9796dd8e5d9..410ae718e99 100644
+index 9f70e72b4c7..1c5c456aa39 100644
 --- a/include/Makefile.in
 +++ b/include/Makefile.in
-@@ -517,6 +517,7 @@ SOURCES = \
+@@ -518,6 +518,7 @@ SOURCES = \
  	ntddvdeo.h \
  	ntdef.h \
  	ntdsapi.h \
@@ -458,5 +458,5 @@ index 00000000000..f46f407ec71
 +}
 +#endif /* HAVE_RENAMEAT2 */
 -- 
-2.26.2
+2.27.0
 
diff --git a/patches/ntdll-Junction_Points/0013-ntdll-Allow-creation-of-dangling-reparse-points-to-n.patch b/patches/ntdll-Junction_Points/0013-ntdll-Allow-creation-of-dangling-reparse-points-to-n.patch
index 57e40156d..c2f5842c7 100644
--- a/patches/ntdll-Junction_Points/0013-ntdll-Allow-creation-of-dangling-reparse-points-to-n.patch
+++ b/patches/ntdll-Junction_Points/0013-ntdll-Allow-creation-of-dangling-reparse-points-to-n.patch
@@ -1,4 +1,4 @@
-From 5b9831bcc26ab81b428b9c8f996c50b50c195a5d Mon Sep 17 00:00:00 2001
+From 804bc6397bcf91a50ec6d13ca296e564ee19d689 Mon Sep 17 00:00:00 2001
 From: "Erich E. Hoover" <erich.e.hoover@gmail.com>
 Date: Tue, 30 Apr 2019 16:24:54 -0600
 Subject: [PATCH] ntdll: Allow creation of dangling reparse points to
@@ -6,16 +6,31 @@ Subject: [PATCH] ntdll: Allow creation of dangling reparse points to
 
 Signed-off-by: Erich E. Hoover <erich.e.hoover@gmail.com>
 ---
- dlls/ntdll/directory.c | 13 +++++++++++++
  dlls/ntdll/file.c      |  3 ++-
+ dlls/ntdll/unix/file.c | 13 +++++++++++++
  include/winternl.h     |  1 +
  3 files changed, 16 insertions(+), 1 deletion(-)
 
-diff --git a/dlls/ntdll/directory.c b/dlls/ntdll/directory.c
-index 7b0627cd3d..669fd56cbe 100644
---- a/dlls/ntdll/directory.c
-+++ b/dlls/ntdll/directory.c
-@@ -2644,6 +2644,19 @@ static NTSTATUS lookup_unix_name( const WCHAR *name, int name_len, char **buffer
+diff --git a/dlls/ntdll/file.c b/dlls/ntdll/file.c
+index 6c5da524aad..aad4ba5615b 100644
+--- a/dlls/ntdll/file.c
++++ b/dlls/ntdll/file.c
+@@ -1619,8 +1619,9 @@ NTSTATUS FILE_CreateSymlink(HANDLE handle, REPARSE_DATA_BUFFER *buffer)
+         RtlCreateUnicodeString( &nt_dest, dest );
+         nt_dest.Length = dest_len;
+     }
++
+     nt_dest_allocated = TRUE;
+-    status = wine_nt_to_unix_file_name( &nt_dest, &unix_dest, 0, FALSE );
++    status = wine_nt_to_unix_file_name( &nt_dest, &unix_dest, FILE_WINE_PATH, FALSE );
+     if (status != STATUS_SUCCESS && status != STATUS_NO_SUCH_FILE)
+         goto cleanup;
+     dest_allocated = TRUE;
+diff --git a/dlls/ntdll/unix/file.c b/dlls/ntdll/unix/file.c
+index 13096e085e8..a2fc2a6425b 100644
+--- a/dlls/ntdll/unix/file.c
++++ b/dlls/ntdll/unix/file.c
+@@ -2726,6 +2726,19 @@ static NTSTATUS lookup_unix_name( const WCHAR *name, int name_len, char **buffer
                  status = STATUS_OBJECT_NAME_COLLISION;
              }
          }
@@ -35,26 +50,11 @@ index 7b0627cd3d..669fd56cbe 100644
  
          if (status != STATUS_SUCCESS) break;
  
-diff --git a/dlls/ntdll/file.c b/dlls/ntdll/file.c
-index e27382adf7..22764f05f3 100644
---- a/dlls/ntdll/file.c
-+++ b/dlls/ntdll/file.c
-@@ -1714,8 +1714,9 @@ NTSTATUS FILE_CreateSymlink(HANDLE handle, REPARSE_DATA_BUFFER *buffer)
-         RtlCreateUnicodeString( &nt_dest, dest );
-         nt_dest.Length = dest_len;
-     }
-+
-     nt_dest_allocated = TRUE;
--    status = wine_nt_to_unix_file_name( &nt_dest, &unix_dest, 0, FALSE );
-+    status = wine_nt_to_unix_file_name( &nt_dest, &unix_dest, FILE_WINE_PATH, FALSE );
-     if (status != STATUS_SUCCESS && status != STATUS_NO_SUCH_FILE)
-         goto cleanup;
-     dest_allocated = TRUE;
 diff --git a/include/winternl.h b/include/winternl.h
-index e0a827a11c..b71e456b53 100644
+index 39776d36f92..2e8c3866a3a 100644
 --- a/include/winternl.h
 +++ b/include/winternl.h
-@@ -1816,6 +1816,7 @@ typedef struct _RTL_HANDLE_TABLE
+@@ -1839,6 +1839,7 @@ typedef struct _RTL_HANDLE_TABLE
  #define FILE_OVERWRITE                  4
  #define FILE_OVERWRITE_IF               5
  #define FILE_MAXIMUM_DISPOSITION        5
@@ -63,5 +63,5 @@ index e0a827a11c..b71e456b53 100644
  /* Characteristics of a File System */
  #define FILE_REMOVABLE_MEDIA                      0x00000001
 -- 
-2.24.1
+2.27.0
 
diff --git a/patches/ntdll-Junction_Points/0018-ntdll-Find-dangling-symlinks-quickly.patch b/patches/ntdll-Junction_Points/0018-ntdll-Find-dangling-symlinks-quickly.patch
index b1e31c604..62f3d21ec 100644
--- a/patches/ntdll-Junction_Points/0018-ntdll-Find-dangling-symlinks-quickly.patch
+++ b/patches/ntdll-Junction_Points/0018-ntdll-Find-dangling-symlinks-quickly.patch
@@ -1,4 +1,4 @@
-From 1a7f83237f0d843be63c947f3c9e2aaaa90156a8 Mon Sep 17 00:00:00 2001
+From e17d27788c8368ac1d395c6e142c42249f1e02f4 Mon Sep 17 00:00:00 2001
 From: "Erich E. Hoover" <erich.e.hoover@gmail.com>
 Date: Wed, 1 May 2019 17:48:51 -0600
 Subject: [PATCH] ntdll: Find dangling symlinks quickly.
@@ -8,14 +8,14 @@ case-insensitive lookups of files.
 
 Signed-off-by: Erich E. Hoover <erich.e.hoover@gmail.com>
 ---
- dlls/ntdll/directory.c | 6 +++---
+ dlls/ntdll/unix/file.c | 6 +++---
  1 file changed, 3 insertions(+), 3 deletions(-)
 
-diff --git a/dlls/ntdll/directory.c b/dlls/ntdll/directory.c
-index 669fd56cbe..95af2dde24 100644
---- a/dlls/ntdll/directory.c
-+++ b/dlls/ntdll/directory.c
-@@ -2053,7 +2053,7 @@ static NTSTATUS find_file_in_dir( char *unix_name, int pos, const WCHAR *name, i
+diff --git a/dlls/ntdll/unix/file.c b/dlls/ntdll/unix/file.c
+index a2fc2a6425b..66ce2eb5fe4 100644
+--- a/dlls/ntdll/unix/file.c
++++ b/dlls/ntdll/unix/file.c
+@@ -2146,7 +2146,7 @@ static NTSTATUS find_file_in_dir( char *unix_name, int pos, const WCHAR *name, i
      if (ret >= 0 && ret <= MAX_DIR_ENTRY_LEN)
      {
          unix_name[pos + ret] = 0;
@@ -24,7 +24,7 @@ index 669fd56cbe..95af2dde24 100644
          {
              if (is_win_dir) *is_win_dir = is_same_file( &windir, &st );
              return STATUS_SUCCESS;
-@@ -2175,7 +2175,7 @@ not_found:
+@@ -2257,7 +2257,7 @@ not_found:
      return STATUS_OBJECT_PATH_NOT_FOUND;
  
  success:
@@ -33,7 +33,7 @@ index 669fd56cbe..95af2dde24 100644
      return STATUS_SUCCESS;
  }
  
-@@ -2580,7 +2580,7 @@ static NTSTATUS lookup_unix_name( const WCHAR *name, int name_len, char **buffer
+@@ -2662,7 +2662,7 @@ static NTSTATUS lookup_unix_name( const WCHAR *name, int name_len, char **buffer
          for (p = unix_name + pos ; *p; p++) if (*p == '\\') *p = '/';
          if (!name_len || !redirect || (!strstr( unix_name, "/windows/") && strncmp( unix_name, "windows/", 8 )))
          {
@@ -43,5 +43,5 @@ index 669fd56cbe..95af2dde24 100644
                  if (disposition == FILE_CREATE)
                      return STATUS_OBJECT_NAME_COLLISION;
 -- 
-2.24.1
+2.27.0
 
diff --git a/patches/ntdll-NtDevicePath/0001-ntdll-Implement-opening-files-through-nt-device-path.patch b/patches/ntdll-NtDevicePath/0001-ntdll-Implement-opening-files-through-nt-device-path.patch
index 0a34fb396..042fb77af 100644
--- a/patches/ntdll-NtDevicePath/0001-ntdll-Implement-opening-files-through-nt-device-path.patch
+++ b/patches/ntdll-NtDevicePath/0001-ntdll-Implement-opening-files-through-nt-device-path.patch
@@ -1,22 +1,76 @@
-From 934a7712600b45fa584386b4ada2a73af88ee072 Mon Sep 17 00:00:00 2001
+From c8bd4fe87f7a49a3da2c53ead6df94a9172e7bbb Mon Sep 17 00:00:00 2001
 From: =?UTF-8?q?Michael=20M=C3=BCller?= <michael@fds-team.de>
 Date: Fri, 26 May 2017 05:17:17 +0200
-Subject: ntdll: Implement opening files through nt device paths.
+Subject: [PATCH] ntdll: Implement opening files through nt device paths.
 
 ---
- dlls/ntdll/directory.c  | 132 +++++++++++++++++++++++++++++++++++++---
  dlls/ntdll/tests/file.c |  25 +++++++-
+ dlls/ntdll/unix/file.c  | 132 +++++++++++++++++++++++++++++++++++++---
  2 files changed, 147 insertions(+), 10 deletions(-)
 
-diff --git a/dlls/ntdll/directory.c b/dlls/ntdll/directory.c
-index c6249dd8658..242dbd27b2f 100644
---- a/dlls/ntdll/directory.c
-+++ b/dlls/ntdll/directory.c
-@@ -2732,16 +2732,10 @@ NTSTATUS nt_to_unix_file_name_attr( const OBJECT_ATTRIBUTES *attr, ANSI_STRING *
+diff --git a/dlls/ntdll/tests/file.c b/dlls/ntdll/tests/file.c
+index 184b7cdad59..87b5945a4e2 100644
+--- a/dlls/ntdll/tests/file.c
++++ b/dlls/ntdll/tests/file.c
+@@ -135,18 +135,22 @@ static void WINAPI apc( void *arg, IO_STATUS_BLOCK *iosb, ULONG reserved )
+ 
+ static void create_file_test(void)
+ {
++    static const WCHAR notepadW[] = {'n','o','t','e','p','a','d','.','e','x','e',0};
+     static const WCHAR systemrootW[] = {'\\','S','y','s','t','e','m','R','o','o','t',
+                                         '\\','f','a','i','l','i','n','g',0};
++    static const WCHAR systemrootExplorerW[] = {'\\','S','y','s','t','e','m','R','o','o','t',
++                                               '\\','e','x','p','l','o','r','e','r','.','e','x','e',0};
+     static const WCHAR questionmarkInvalidNameW[] = {'a','f','i','l','e','?',0};
+     static const WCHAR pipeInvalidNameW[]  = {'a','|','b',0};
+     static const WCHAR pathInvalidNtW[] = {'\\','\\','?','\\',0};
+     static const WCHAR pathInvalidNt2W[] = {'\\','?','?','\\',0};
+     static const WCHAR pathInvalidDosW[] = {'\\','D','o','s','D','e','v','i','c','e','s','\\',0};
+     static const char testdata[] = "Hello World";
++    static const WCHAR sepW[] = {'\\',0};
+     FILE_NETWORK_OPEN_INFORMATION info;
+     NTSTATUS status;
+     HANDLE dir, file;
+-    WCHAR path[MAX_PATH];
++    WCHAR path[MAX_PATH], temp[MAX_PATH];
+     OBJECT_ATTRIBUTES attr;
+     IO_STATUS_BLOCK io;
+     UNICODE_STRING nameW;
+@@ -327,6 +331,25 @@ static void create_file_test(void)
+     status = pNtQueryFullAttributesFile( &attr, &info );
+     ok( status == STATUS_OBJECT_NAME_INVALID,
+         "query %s failed %x\n", wine_dbgstr_w(nameW.Buffer), status );
++
++    GetWindowsDirectoryW( path, MAX_PATH );
++    path[2] = 0;
++    ok( QueryDosDeviceW( path, temp, MAX_PATH ),
++        "QueryDosDeviceW failed with error %u\n", GetLastError() );
++    lstrcatW( temp, sepW );
++    lstrcatW( temp, path+3 );
++    lstrcatW( temp, sepW );
++    lstrcatW( temp, notepadW );
++
++    pRtlInitUnicodeString( &nameW, temp );
++    status = pNtQueryFullAttributesFile( &attr, &info );
++    ok( status == STATUS_SUCCESS,
++        "query %s failed %x\n", wine_dbgstr_w(nameW.Buffer), status );
++
++    pRtlInitUnicodeString( &nameW, systemrootExplorerW );
++    status = pNtQueryFullAttributesFile( &attr, &info );
++    ok( status == STATUS_SUCCESS,
++        "query %s failed %x\n", wine_dbgstr_w(nameW.Buffer), status );
+ }
+ 
+ static void open_file_test(void)
+diff --git a/dlls/ntdll/unix/file.c b/dlls/ntdll/unix/file.c
+index 31a6c761c7c..83e4810f00b 100644
+--- a/dlls/ntdll/unix/file.c
++++ b/dlls/ntdll/unix/file.c
+@@ -2818,16 +2818,10 @@ NTSTATUS CDECL nt_to_unix_file_name_attr( const OBJECT_ATTRIBUTES *attr, ANSI_ST
  
  
  /******************************************************************************
-- *           wine_nt_to_unix_file_name  (NTDLL.@) Not a Windows API
+- *           nt_to_unix_file_name
 - *
 - * Convert a file name from NT namespace to Unix namespace.
 - *
@@ -25,14 +79,14 @@ index c6249dd8658..242dbd27b2f 100644
 - * returned, but the unix name is still filled in properly.
 + *           nt_to_unix_file_name_internal
   */
--NTSTATUS CDECL wine_nt_to_unix_file_name( const UNICODE_STRING *nameW, ANSI_STRING *unix_name_ret,
--                                          UINT disposition, BOOLEAN check_case )
+-NTSTATUS CDECL nt_to_unix_file_name( const UNICODE_STRING *nameW, ANSI_STRING *unix_name_ret,
+-                                     UINT disposition, BOOLEAN check_case )
 +static NTSTATUS nt_to_unix_file_name_internal( const UNICODE_STRING *nameW, ANSI_STRING *unix_name_ret,
 +                                               UINT disposition, BOOLEAN check_case )
  {
      static const WCHAR unixW[] = {'u','n','i','x'};
      static const WCHAR pipeW[] = {'p','i','p','e'};
-@@ -2857,6 +2851,126 @@ NTSTATUS CDECL wine_nt_to_unix_file_name( const UNICODE_STRING *nameW, ANSI_STRI
+@@ -2940,6 +2934,126 @@ NTSTATUS CDECL nt_to_unix_file_name( const UNICODE_STRING *nameW, ANSI_STRING *u
      return status;
  }
  
@@ -103,7 +157,7 @@ index c6249dd8658..242dbd27b2f 100644
 +}
 +
 +/******************************************************************************
-+ *           wine_nt_to_unix_file_name  (NTDLL.@) Not a Windows API
++ *           nt_to_unix_file_name  (NTDLL.@) Not a Windows API
 + *
 + * Convert a file name from NT namespace to Unix namespace.
 + *
@@ -111,7 +165,7 @@ index c6249dd8658..242dbd27b2f 100644
 + * element doesn't have to exist; in that case STATUS_NO_SUCH_FILE is
 + * returned, but the unix name is still filled in properly.
 + */
-+NTSTATUS CDECL wine_nt_to_unix_file_name( const UNICODE_STRING *nameW, ANSI_STRING *unix_name_ret,
++NTSTATUS CDECL nt_to_unix_file_name( const UNICODE_STRING *nameW, ANSI_STRING *unix_name_ret,
 +                                          UINT disposition, BOOLEAN check_case )
 +{
 +    static const WCHAR systemrootW[] = {'\\','S','y','s','t','e','m','R','o','o','t','\\',0};
@@ -157,62 +211,8 @@ index c6249dd8658..242dbd27b2f 100644
 +    return status;
 +}
  
- /******************************************************************
-  *		RtlWow64EnableFsRedirection   (NTDLL.@)
-diff --git a/dlls/ntdll/tests/file.c b/dlls/ntdll/tests/file.c
-index 546795456a8..709698209d8 100644
---- a/dlls/ntdll/tests/file.c
-+++ b/dlls/ntdll/tests/file.c
-@@ -135,18 +135,22 @@ static void WINAPI apc( void *arg, IO_STATUS_BLOCK *iosb, ULONG reserved )
- 
- static void create_file_test(void)
- {
-+    static const WCHAR notepadW[] = {'n','o','t','e','p','a','d','.','e','x','e',0};
-     static const WCHAR systemrootW[] = {'\\','S','y','s','t','e','m','R','o','o','t',
-                                         '\\','f','a','i','l','i','n','g',0};
-+    static const WCHAR systemrootExplorerW[] = {'\\','S','y','s','t','e','m','R','o','o','t',
-+                                               '\\','e','x','p','l','o','r','e','r','.','e','x','e',0};
-     static const WCHAR questionmarkInvalidNameW[] = {'a','f','i','l','e','?',0};
-     static const WCHAR pipeInvalidNameW[]  = {'a','|','b',0};
-     static const WCHAR pathInvalidNtW[] = {'\\','\\','?','\\',0};
-     static const WCHAR pathInvalidNt2W[] = {'\\','?','?','\\',0};
-     static const WCHAR pathInvalidDosW[] = {'\\','D','o','s','D','e','v','i','c','e','s','\\',0};
-     static const char testdata[] = "Hello World";
-+    static const WCHAR sepW[] = {'\\',0};
-     FILE_NETWORK_OPEN_INFORMATION info;
-     NTSTATUS status;
-     HANDLE dir, file;
--    WCHAR path[MAX_PATH];
-+    WCHAR path[MAX_PATH], temp[MAX_PATH];
-     OBJECT_ATTRIBUTES attr;
-     IO_STATUS_BLOCK io;
-     UNICODE_STRING nameW;
-@@ -327,6 +331,25 @@ static void create_file_test(void)
-     status = pNtQueryFullAttributesFile( &attr, &info );
-     ok( status == STATUS_OBJECT_NAME_INVALID,
-         "query %s failed %x\n", wine_dbgstr_w(nameW.Buffer), status );
-+
-+    GetWindowsDirectoryW( path, MAX_PATH );
-+    path[2] = 0;
-+    ok( QueryDosDeviceW( path, temp, MAX_PATH ),
-+        "QueryDosDeviceW failed with error %u\n", GetLastError() );
-+    lstrcatW( temp, sepW );
-+    lstrcatW( temp, path+3 );
-+    lstrcatW( temp, sepW );
-+    lstrcatW( temp, notepadW );
-+
-+    pRtlInitUnicodeString( &nameW, temp );
-+    status = pNtQueryFullAttributesFile( &attr, &info );
-+    ok( status == STATUS_SUCCESS,
-+        "query %s failed %x\n", wine_dbgstr_w(nameW.Buffer), status );
-+
-+    pRtlInitUnicodeString( &nameW, systemrootExplorerW );
-+    status = pNtQueryFullAttributesFile( &attr, &info );
-+    ok( status == STATUS_SUCCESS,
-+        "query %s failed %x\n", wine_dbgstr_w(nameW.Buffer), status );
- }
- 
- static void open_file_test(void)
+ /***********************************************************************
+  *           unmount_device
 -- 
-2.26.0
+2.27.0
 
diff --git a/patches/ntdll-Pipe_SpecialCharacters/0001-ntdll-Allow-special-characters-in-pipe-names.patch b/patches/ntdll-Pipe_SpecialCharacters/0001-ntdll-Allow-special-characters-in-pipe-names.patch
index db8af3f4b..bdcf5a10d 100644
--- a/patches/ntdll-Pipe_SpecialCharacters/0001-ntdll-Allow-special-characters-in-pipe-names.patch
+++ b/patches/ntdll-Pipe_SpecialCharacters/0001-ntdll-Allow-special-characters-in-pipe-names.patch
@@ -1,4 +1,4 @@
-From fb9f83f9c1043dfff84c51f7223bee172c9ac40f Mon Sep 17 00:00:00 2001
+From d4166e5e9761c9a3d896486b1eb2582ca6f20482 Mon Sep 17 00:00:00 2001
 From: =?UTF-8?q?Michael=20M=C3=BCller?= <michael@fds-team.de>
 Date: Sun, 27 Jul 2014 03:35:42 +0200
 Subject: [PATCH] ntdll: Allow special characters in pipe names.
@@ -6,7 +6,7 @@ Subject: [PATCH] ntdll: Allow special characters in pipe names.
 Based on patch by Valentyn Pavliuchenko.
 ---
  dlls/kernel32/tests/pipe.c | 10 ++++++++++
- dlls/ntdll/directory.c     | 14 ++++++++++----
+ dlls/ntdll/unix/file.c     | 14 ++++++++++----
  2 files changed, 20 insertions(+), 4 deletions(-)
 
 diff --git a/dlls/kernel32/tests/pipe.c b/dlls/kernel32/tests/pipe.c
@@ -37,19 +37,19 @@ index 3c7ca06a045..453dcc80b7b 100644
      if (winetest_debug > 1) trace("test_CreateNamedPipe returning\n");
  }
  
-diff --git a/dlls/ntdll/directory.c b/dlls/ntdll/directory.c
-index 993a661015e..aaf7c6eeed4 100644
---- a/dlls/ntdll/directory.c
-+++ b/dlls/ntdll/directory.c
-@@ -2747,6 +2747,7 @@ NTSTATUS CDECL wine_nt_to_unix_file_name( const UNICODE_STRING *nameW, ANSI_STRI
-                                           UINT disposition, BOOLEAN check_case )
+diff --git a/dlls/ntdll/unix/file.c b/dlls/ntdll/unix/file.c
+index 13096e085e8..31a6c761c7c 100644
+--- a/dlls/ntdll/unix/file.c
++++ b/dlls/ntdll/unix/file.c
+@@ -2830,6 +2830,7 @@ NTSTATUS CDECL nt_to_unix_file_name( const UNICODE_STRING *nameW, ANSI_STRING *u
+                                      UINT disposition, BOOLEAN check_case )
  {
      static const WCHAR unixW[] = {'u','n','i','x'};
 +    static const WCHAR pipeW[] = {'p','i','p','e'};
      static const WCHAR invalid_charsW[] = { INVALID_NT_CHARS, 0 };
  
      NTSTATUS status = STATUS_SUCCESS;
-@@ -2757,6 +2758,7 @@ NTSTATUS CDECL wine_nt_to_unix_file_name( const UNICODE_STRING *nameW, ANSI_STRI
+@@ -2839,6 +2840,7 @@ NTSTATUS CDECL nt_to_unix_file_name( const UNICODE_STRING *nameW, ANSI_STRING *u
      int pos, ret, name_len, unix_len, prefix_len;
      WCHAR prefix[MAX_DIR_ENTRY_LEN + 1];
      BOOLEAN is_unix = FALSE;
@@ -57,7 +57,7 @@ index 993a661015e..aaf7c6eeed4 100644
  
      name     = nameW->Buffer;
      name_len = nameW->Length / sizeof(WCHAR);
-@@ -2792,13 +2794,17 @@ NTSTATUS CDECL wine_nt_to_unix_file_name( const UNICODE_STRING *nameW, ANSI_STRI
+@@ -2872,13 +2874,17 @@ NTSTATUS CDECL nt_to_unix_file_name( const UNICODE_STRING *nameW, ANSI_STRING *u
      name += prefix_len;
      name_len -= prefix_len;
  
@@ -80,5 +80,5 @@ index 993a661015e..aaf7c6eeed4 100644
      else
      {
 -- 
-2.25.1
+2.27.0
 
diff --git a/patches/ntdll-Syscall_Emulation/0001-ntdll-Support-x86_64-syscall-emulation.patch b/patches/ntdll-Syscall_Emulation/0001-ntdll-Support-x86_64-syscall-emulation.patch
index 6aaf9caad..9164fea59 100644
--- a/patches/ntdll-Syscall_Emulation/0001-ntdll-Support-x86_64-syscall-emulation.patch
+++ b/patches/ntdll-Syscall_Emulation/0001-ntdll-Support-x86_64-syscall-emulation.patch
@@ -1,4 +1,4 @@
-From a660effad7b09d7333aa46f9bbef45eb4c1bed3d Mon Sep 17 00:00:00 2001
+From 74831302b4eedd6df46357de283392f2b4ee62f2 Mon Sep 17 00:00:00 2001
 From: Paul Gofman <pgofman@codeweavers.com>
 Date: Mon, 30 Dec 2019 13:27:53 +0300
 Subject: [PATCH] ntdll: Support x86_64 syscall emulation.
@@ -14,15 +14,15 @@ is used for trapping syscalls.
  dlls/ntdll/unix/signal_x86_64.c | 105 ++++++++++++++++++++++++++++++++
  dlls/ntdll/unix/thread.c        |   8 ++-
  dlls/ntdll/unix/unix_private.h  |   6 +-
- dlls/ntdll/unixlib.h            |   3 +-
+ dlls/ntdll/unixlib.h            |   5 +-
  tools/winebuild/spec32.c        |   9 ++-
- 7 files changed, 134 insertions(+), 6 deletions(-)
+ 7 files changed, 135 insertions(+), 7 deletions(-)
 
 diff --git a/configure.ac b/configure.ac
-index 5418d1aa732..d82069e7457 100644
+index 8a76b74e83d..d67c0be3617 100644
 --- a/configure.ac
 +++ b/configure.ac
-@@ -474,6 +474,7 @@ AC_CHECK_HEADERS(\
+@@ -464,6 +464,7 @@ AC_CHECK_HEADERS(\
  	linux/joystick.h \
  	linux/major.h \
  	linux/param.h \
@@ -31,10 +31,10 @@ index 5418d1aa732..d82069e7457 100644
  	linux/types.h \
  	linux/ucdrom.h \
 diff --git a/dlls/ntdll/thread.c b/dlls/ntdll/thread.c
-index a14e3a12ae0..a0411446e24 100644
+index 8295b7559e7..052035750cf 100644
 --- a/dlls/ntdll/thread.c
 +++ b/dlls/ntdll/thread.c
-@@ -229,6 +229,12 @@ void __wine_syscall_dispatcher( void )
+@@ -179,6 +179,12 @@ void __wine_syscall_dispatcher( void )
  }
  #endif
  
@@ -47,7 +47,7 @@ index a14e3a12ae0..a0411446e24 100644
  void *WINAPI __wine_fakedll_dispatcher( const char *module, ULONG ord )
  {
      UNICODE_STRING name;
-@@ -272,7 +278,7 @@ void *WINAPI __wine_fakedll_dispatcher( const char *module, ULONG ord )
+@@ -222,7 +228,7 @@ void *WINAPI __wine_fakedll_dispatcher( const char *module, ULONG ord )
  TEB *thread_init( SIZE_T *info_size, BOOL *suspend )
  {
      TEB *teb = unix_funcs->init_threading( &nb_threads, &__wine_ldt_copy, info_size, suspend, &server_cpus,
@@ -227,10 +227,10 @@ index e1da90222d3..91e1596ddcb 100644
      teb = virtual_alloc_first_teb();
      teb->WOW32Reserved = syscall_handler;
 diff --git a/dlls/ntdll/unix/unix_private.h b/dlls/ntdll/unix/unix_private.h
-index 75594832572..e42fa44f9a0 100644
+index 62e836b41f1..f234a756991 100644
 --- a/dlls/ntdll/unix/unix_private.h
 +++ b/dlls/ntdll/unix/unix_private.h
-@@ -112,7 +112,8 @@ extern void CDECL server_release_fd( HANDLE handle, int unix_fd ) DECLSPEC_HIDDE
+@@ -111,7 +111,8 @@ extern void CDECL server_release_fd( HANDLE handle, int unix_fd ) DECLSPEC_HIDDE
  extern void CDECL server_init_process_done( void *relay ) DECLSPEC_HIDDEN;
  extern TEB * CDECL init_threading( int *nb_threads_ptr, struct ldt_copy **ldt_copy, SIZE_T *size,
                                     BOOL *suspend, unsigned int *cpus, BOOL *wow64,
@@ -240,9 +240,9 @@ index 75594832572..e42fa44f9a0 100644
  extern void CDECL DECLSPEC_NORETURN exit_thread( int status ) DECLSPEC_HIDDEN;
  extern void CDECL DECLSPEC_NORETURN exit_process( int status ) DECLSPEC_HIDDEN;
  extern NTSTATUS CDECL get_thread_ldt_entry( HANDLE handle, void *data, ULONG len, ULONG *ret_len ) DECLSPEC_HIDDEN;
-@@ -132,6 +133,9 @@ extern struct _KUSER_SHARED_DATA *user_shared_data DECLSPEC_HIDDEN;
- extern void init_environment( int argc, char *argv[], char *envp[] ) DECLSPEC_HIDDEN;
- extern DWORD ntdll_umbstowcs( const char *src, DWORD srclen, WCHAR *dst, DWORD dstlen ) DECLSPEC_HIDDEN;
+@@ -150,6 +151,9 @@ extern char **build_envp( const WCHAR *envW ) DECLSPEC_HIDDEN;
+ extern NTSTATUS exec_wineloader( char **argv, int socketfd, int is_child_64bit,
+                                  ULONGLONG res_start, ULONGLONG res_end ) DECLSPEC_HIDDEN;
  
 +extern unsigned int __wine_nb_syscalls DECLSPEC_HIDDEN;
 +extern void *__wine_syscall_dispatcher DECLSPEC_HIDDEN;
@@ -251,10 +251,19 @@ index 75594832572..e42fa44f9a0 100644
  extern void server_enter_uninterrupted_section( RTL_CRITICAL_SECTION *cs, sigset_t *sigset ) DECLSPEC_HIDDEN;
  extern void server_leave_uninterrupted_section( RTL_CRITICAL_SECTION *cs, sigset_t *sigset ) DECLSPEC_HIDDEN;
 diff --git a/dlls/ntdll/unixlib.h b/dlls/ntdll/unixlib.h
-index 63d0a519b74..92762e802ee 100644
+index c6fb8e0f2d4..5d00991cde9 100644
 --- a/dlls/ntdll/unixlib.h
 +++ b/dlls/ntdll/unixlib.h
-@@ -204,7 +204,8 @@ struct unix_funcs
+@@ -28,7 +28,7 @@ struct ldt_copy;
+ struct msghdr;
+ 
+ /* increment this when you change the function table */
+-#define NTDLL_UNIXLIB_VERSION 45
++#define NTDLL_UNIXLIB_VERSION 46
+ 
+ struct unix_funcs
+ {
+@@ -225,7 +225,8 @@ struct unix_funcs
  
      /* thread/process functions */
      TEB *         (CDECL *init_threading)( int *nb_threads_ptr, struct ldt_copy **ldt_copy, SIZE_T *size,
@@ -306,5 +315,5 @@ index 9cc4698d0d7..c572fe49923 100644
                  put_byte( 0x08 ); put_byte( 0x03 ); put_byte( 0xfe );
                  put_byte( 0x7f ); put_byte( 0x01 );
 -- 
-2.26.2
+2.27.0
 
diff --git a/patches/patchinstall.sh b/patches/patchinstall.sh
index 795604b48..046f3fa0f 100755
--- a/patches/patchinstall.sh
+++ b/patches/patchinstall.sh
@@ -167,7 +167,6 @@ patch_enable_all ()
 	enable_ntdll_ApiSetMap="$1"
 	enable_ntdll_Builtin_Prot="$1"
 	enable_ntdll_CriticalSection="$1"
-	enable_ntdll_DOS_Attributes="$1"
 	enable_ntdll_Dealloc_Thread_Stack="$1"
 	enable_ntdll_DeviceType_Systemroot="$1"
 	enable_ntdll_Exception="$1"
@@ -228,13 +227,11 @@ patch_enable_all ()
 	enable_server_Desktop_Refcount="$1"
 	enable_server_FileEndOfFileInformation="$1"
 	enable_server_File_Permissions="$1"
-	enable_server_Inherited_ACLs="$1"
 	enable_server_Object_Types="$1"
 	enable_server_PeekMessage="$1"
 	enable_server_Realtime_Priority="$1"
 	enable_server_Registry_Notifications="$1"
 	enable_server_Signal_Thread="$1"
-	enable_server_Stored_ACLs="$1"
 	enable_setupapi_DiskSpaceList="$1"
 	enable_setupapi_SPFILENOTIFY_FILEINCABINET="$1"
 	enable_shdocvw_ParseURLFromOutsideSource_Tests="$1"
@@ -599,9 +596,6 @@ patch_enable ()
 		ntdll-CriticalSection)
 			enable_ntdll_CriticalSection="$2"
 			;;
-		ntdll-DOS_Attributes)
-			enable_ntdll_DOS_Attributes="$2"
-			;;
 		ntdll-Dealloc_Thread_Stack)
 			enable_ntdll_Dealloc_Thread_Stack="$2"
 			;;
@@ -782,9 +776,6 @@ patch_enable ()
 		server-File_Permissions)
 			enable_server_File_Permissions="$2"
 			;;
-		server-Inherited_ACLs)
-			enable_server_Inherited_ACLs="$2"
-			;;
 		server-Object_Types)
 			enable_server_Object_Types="$2"
 			;;
@@ -803,9 +794,6 @@ patch_enable ()
 		server-Signal_Thread)
 			enable_server_Signal_Thread="$2"
 			;;
-		server-Stored_ACLs)
-			enable_server_Stored_ACLs="$2"
-			;;
 		setupapi-DiskSpaceList)
 			enable_setupapi_DiskSpaceList="$2"
 			;;
@@ -1608,24 +1596,6 @@ if test "$enable_server_Realtime_Priority" -eq 1; then
 	enable_ntdll_ThreadTime=1
 fi
 
-if test "$enable_server_Inherited_ACLs" -eq 1; then
-	if test "$enable_server_Stored_ACLs" -gt 1; then
-		abort "Patchset server-Stored_ACLs disabled, but server-Inherited_ACLs depends on that."
-	fi
-	enable_server_Stored_ACLs=1
-fi
-
-if test "$enable_server_Stored_ACLs" -eq 1; then
-	if test "$enable_ntdll_DOS_Attributes" -gt 1; then
-		abort "Patchset ntdll-DOS_Attributes disabled, but server-Stored_ACLs depends on that."
-	fi
-	if test "$enable_server_File_Permissions" -gt 1; then
-		abort "Patchset server-File_Permissions disabled, but server-Stored_ACLs depends on that."
-	fi
-	enable_ntdll_DOS_Attributes=1
-	enable_server_File_Permissions=1
-fi
-
 if test "$enable_server_Desktop_Refcount" -eq 1; then
 	if test "$enable_ws2_32_WSACleanup" -gt 1; then
 		abort "Patchset ws2_32-WSACleanup disabled, but server-Desktop_Refcount depends on that."
@@ -1704,13 +1674,6 @@ if test "$enable_ntdll_Hide_Wine_Exports" -eq 1; then
 	enable_ntdll_ThreadTime=1
 fi
 
-if test "$enable_ntdll_DOS_Attributes" -eq 1; then
-	if test "$enable_ntdll_Junction_Points" -gt 1; then
-		abort "Patchset ntdll-Junction_Points disabled, but ntdll-DOS_Attributes depends on that."
-	fi
-	enable_ntdll_Junction_Points=1
-fi
-
 if test "$enable_ntdll_Builtin_Prot" -eq 1; then
 	if test "$enable_ntdll_WRITECOPY" -gt 1; then
 		abort "Patchset ntdll-WRITECOPY disabled, but ntdll-Builtin_Prot depends on that."
@@ -3214,7 +3177,7 @@ fi
 # |   *	[#44948] Multiple apps (Spine (Mod starter for Gothic), MS Office 365 installer) need CreateSymbolicLinkW implementation
 # |
 # | Modified files:
-# |   *	configure.ac, dlls/kernel32/path.c, dlls/ntdll/directory.c, dlls/ntdll/file.c, dlls/ntdll/tests/file.c,
+# |   *	configure.ac, dlls/kernel32/path.c, dlls/ntdll/file.c, dlls/ntdll/tests/file.c, dlls/ntdll/unix/file.c,
 # | 	include/Makefile.in, include/ntifs.h, include/wine/port.h, include/winternl.h, libs/port/Makefile.in,
 # | 	libs/port/renameat2.c, server/fd.c
 # |
@@ -3719,40 +3682,6 @@ if test "$enable_ntdll_CriticalSection" -eq 1; then
 	) >> "$patchlist"
 fi
 
-# Patchset ntdll-DOS_Attributes
-# |
-# | This patchset has the following (direct or indirect) dependencies:
-# |   *	ntdll-Junction_Points
-# |
-# | This patchset fixes the following Wine bugs:
-# |   *	[#9158] Support for DOS hidden/system file attributes
-# |   *	[#15679] cygwin symlinks not working in wine
-# |
-# | Modified files:
-# |   *	configure.ac, dlls/ntdll/directory.c, dlls/ntdll/file.c, dlls/ntdll/ntdll_misc.h, dlls/ntdll/tests/directory.c,
-# | 	dlls/ntdll/tests/file.c, include/wine/port.h, libs/port/Makefile.in, libs/port/xattr.c
-# |
-if test "$enable_ntdll_DOS_Attributes" -eq 1; then
-	patch_apply ntdll-DOS_Attributes/0001-ntdll-Implement-retrieving-DOS-attributes-in-NtQuery.patch
-	patch_apply ntdll-DOS_Attributes/0002-ntdll-Implement-retrieving-DOS-attributes-in-NtQuery.patch
-	patch_apply ntdll-DOS_Attributes/0003-ntdll-Implement-storing-DOS-attributes-in-NtSetInfor.patch
-	patch_apply ntdll-DOS_Attributes/0004-ntdll-Implement-storing-DOS-attributes-in-NtCreateFi.patch
-	patch_apply ntdll-DOS_Attributes/0005-libport-Add-support-for-Mac-OS-X-style-extended-attr.patch
-	patch_apply ntdll-DOS_Attributes/0006-libport-Add-support-for-FreeBSD-style-extended-attri.patch
-	patch_apply ntdll-DOS_Attributes/0007-ntdll-Perform-the-Unix-style-hidden-file-check-withi.patch
-	patch_apply ntdll-DOS_Attributes/0008-ntdll-Always-store-SAMBA_XATTR_DOS_ATTRIB-when-path-.patch
-	(
-		printf '%s\n' '+    { "Erich E. Hoover", "ntdll: Implement retrieving DOS attributes in NtQueryInformationFile.", 1 },';
-		printf '%s\n' '+    { "Erich E. Hoover", "ntdll: Implement retrieving DOS attributes in NtQuery[Full]AttributesFile and NtQueryDirectoryFile.", 1 },';
-		printf '%s\n' '+    { "Erich E. Hoover", "ntdll: Implement storing DOS attributes in NtSetInformationFile.", 1 },';
-		printf '%s\n' '+    { "Erich E. Hoover", "ntdll: Implement storing DOS attributes in NtCreateFile.", 1 },';
-		printf '%s\n' '+    { "Erich E. Hoover", "libport: Add support for Mac OS X style extended attributes.", 1 },';
-		printf '%s\n' '+    { "Erich E. Hoover", "libport: Add support for FreeBSD style extended attributes.", 1 },';
-		printf '%s\n' '+    { "Erich E. Hoover", "ntdll: Perform the Unix-style hidden file check within the unified file info grabbing routine.", 1 },';
-		printf '%s\n' '+    { "Sebastian Lackner", "ntdll: Always store SAMBA_XATTR_DOS_ATTRIB when path could be interpreted as hidden.", 1 },';
-	) >> "$patchlist"
-fi
-
 # Patchset ntdll-Dealloc_Thread_Stack
 # |
 # | Modified files:
@@ -3972,7 +3901,7 @@ fi
 # |   *	[#28995] Allow special characters in pipe names
 # |
 # | Modified files:
-# |   *	dlls/kernel32/tests/pipe.c, dlls/ntdll/directory.c
+# |   *	dlls/kernel32/tests/pipe.c, dlls/ntdll/unix/file.c
 # |
 if test "$enable_ntdll_Pipe_SpecialCharacters" -eq 1; then
 	patch_apply ntdll-Pipe_SpecialCharacters/0001-ntdll-Allow-special-characters-in-pipe-names.patch
@@ -3990,7 +3919,7 @@ fi
 # |   *	[#37487] Resolve \\SystemRoot\\ prefix when opening files
 # |
 # | Modified files:
-# |   *	dlls/ntdll/directory.c, dlls/ntdll/tests/file.c
+# |   *	dlls/ntdll/tests/file.c, dlls/ntdll/unix/file.c
 # |
 if test "$enable_ntdll_NtDevicePath" -eq 1; then
 	patch_apply ntdll-NtDevicePath/0001-ntdll-Implement-opening-files-through-nt-device-path.patch
@@ -4677,52 +4606,6 @@ if test "$enable_server_FileEndOfFileInformation" -eq 1; then
 	) >> "$patchlist"
 fi
 
-# Patchset server-Stored_ACLs
-# |
-# | This patchset has the following (direct or indirect) dependencies:
-# |   *	ntdll-Junction_Points, ntdll-DOS_Attributes, server-File_Permissions
-# |
-# | This patchset fixes the following Wine bugs:
-# |   *	[#33576] Support for stored file ACLs
-# |
-# | Modified files:
-# |   *	dlls/advapi32/tests/security.c, include/wine/port.h, server/change.c, server/file.c, server/file.h, server/object.c,
-# | 	server/object.h
-# |
-if test "$enable_server_Stored_ACLs" -eq 1; then
-	patch_apply server-Stored_ACLs/0001-server-Unify-the-storage-of-security-attributes-for-.patch
-	patch_apply server-Stored_ACLs/0002-server-Unify-the-retrieval-of-security-attributes-fo.patch
-	patch_apply server-Stored_ACLs/0003-server-Add-a-helper-function-set_sd_from_token_inter.patch
-	patch_apply server-Stored_ACLs/0004-server-Temporarily-store-the-full-security-descripto.patch
-	patch_apply server-Stored_ACLs/0005-server-Store-file-security-attributes-with-extended-.patch
-	patch_apply server-Stored_ACLs/0006-server-Convert-return-of-file-security-masks-with-ge.patch
-	patch_apply server-Stored_ACLs/0007-server-Retrieve-file-security-attributes-with-extend.patch
-	(
-		printf '%s\n' '+    { "Erich E. Hoover", "server: Unify the storage of security attributes for files and directories.", 7 },';
-		printf '%s\n' '+    { "Erich E. Hoover", "server: Unify the retrieval of security attributes for files and directories.", 7 },';
-		printf '%s\n' '+    { "Sebastian Lackner", "server: Add a helper function set_sd_from_token_internal to merge two security descriptors.", 1 },';
-		printf '%s\n' '+    { "Sebastian Lackner", "server: Temporarily store the full security descriptor for file objects.", 1 },';
-		printf '%s\n' '+    { "Erich E. Hoover", "server: Store file security attributes with extended file attributes.", 8 },';
-		printf '%s\n' '+    { "Erich E. Hoover", "server: Convert return of file security masks with generic access mappings.", 7 },';
-		printf '%s\n' '+    { "Erich E. Hoover", "server: Retrieve file security attributes with extended file attributes.", 7 },';
-	) >> "$patchlist"
-fi
-
-# Patchset server-Inherited_ACLs
-# |
-# | This patchset has the following (direct or indirect) dependencies:
-# |   *	ntdll-Junction_Points, ntdll-DOS_Attributes, server-File_Permissions, server-Stored_ACLs
-# |
-# | Modified files:
-# |   *	dlls/advapi32/tests/security.c, server/file.c
-# |
-if test "$enable_server_Inherited_ACLs" -eq 1; then
-	patch_apply server-Inherited_ACLs/0001-server-Inherit-security-attributes-from-parent-direc.patch
-	(
-		printf '%s\n' '+    { "Erich E. Hoover", "server: Inherit security attributes from parent directories on creation.", 7 },';
-	) >> "$patchlist"
-fi
-
 # Patchset server-Object_Types
 # |
 # | This patchset fixes the following Wine bugs:

diff --git a/patches/server-Inherited_ACLs/definition b/patches/server-Inherited_ACLs/definition
index 4dd0f1e9c..47a12d723 100644
--- a/patches/server-Inherited_ACLs/definition
+++ b/patches/server-Inherited_ACLs/definition
@@ -1,2 +1,4 @@
 Depends: server-Stored_ACLs
 Fixes: Support for inherited file ACLs
+# Re-enable me when ntdll-DOS_Attributes gets re-enabled!
+Disabled: true
diff --git a/patches/server-Stored_ACLs/definition b/patches/server-Stored_ACLs/definition
index 03222c477..c2f25c70f 100644
--- a/patches/server-Stored_ACLs/definition
+++ b/patches/server-Stored_ACLs/definition
@@ -1,3 +1,5 @@
 Depends: ntdll-DOS_Attributes
 Depends: server-File_Permissions
 Fixes: [33576] Support for stored file ACLs
+# Re-enable me when ntdll-DOS_Attributes gets re-enabled!
+Disabled: true
diff --git a/patches/winebuild-Fake_Dlls/0003-winebuild-Generate-syscall-thunks-for-ntdll-exports.patch b/patches/winebuild-Fake_Dlls/0003-winebuild-Generate-syscall-thunks-for-ntdll-exports.patch
index b78ca856c..695c58554 100644
--- a/patches/winebuild-Fake_Dlls/0003-winebuild-Generate-syscall-thunks-for-ntdll-exports.patch
+++ b/patches/winebuild-Fake_Dlls/0003-winebuild-Generate-syscall-thunks-for-ntdll-exports.patch
@@ -1,4 +1,4 @@
-From 531ffc16d33f96bfeb65973efd1cdbd22fb6a32f Mon Sep 17 00:00:00 2001
+From 607a86f034677449a7fa4628ec2df013b65bfa90 Mon Sep 17 00:00:00 2001
 From: =?UTF-8?q?Michael=20M=C3=BCller?= <michael@fds-team.de>
 Date: Thu, 11 May 2017 05:32:55 +0200
 Subject: [PATCH] winebuild: Generate syscall thunks for ntdll exports.
@@ -22,10 +22,10 @@ Based on a patch by Erich E. Hoover.
  14 files changed, 221 insertions(+), 32 deletions(-)
 
 diff --git a/dlls/ntdll/loader.c b/dlls/ntdll/loader.c
-index 2553b0b9d39..cac6aae2f3d 100644
+index c2e65c94abc..0f9fe76e9af 100644
 --- a/dlls/ntdll/loader.c
 +++ b/dlls/ntdll/loader.c
-@@ -4021,6 +4021,7 @@ PIMAGE_NT_HEADERS WINAPI RtlImageNtHeader(HMODULE hModule)
+@@ -3812,6 +3812,7 @@ PIMAGE_NT_HEADERS WINAPI RtlImageNtHeader(HMODULE hModule)
      return ret;
  }
  
@@ -33,7 +33,7 @@ index 2553b0b9d39..cac6aae2f3d 100644
  
  /******************************************************************
   *		LdrInitializeThunk (NTDLL.@)
-@@ -4038,6 +4039,8 @@ void WINAPI LdrInitializeThunk( CONTEXT *context, void **entry, ULONG_PTR unknow
+@@ -3828,6 +3829,8 @@ void WINAPI LdrInitializeThunk( CONTEXT *context, void **entry, ULONG_PTR unknow
      WINE_MODREF *wm;
      LPCWSTR load_path = NtCurrentTeb()->Peb->ProcessParameters->DllPath.Buffer;
  
@@ -65,7 +65,7 @@ index 21cc1b3ead4..18be5693a7d 100644
      }
      return unix_funcs->NtGetContextThread( handle, context );
 diff --git a/dlls/ntdll/tests/exception.c b/dlls/ntdll/tests/exception.c
-index 1389a542cde..54796476e25 100644
+index a5e6faa461a..51938bf84cc 100644
 --- a/dlls/ntdll/tests/exception.c
 +++ b/dlls/ntdll/tests/exception.c
 @@ -1643,6 +1643,8 @@ static void test_thread_context(void)
@@ -78,10 +78,10 @@ index 1389a542cde..54796476e25 100644
      ok( context.SegCs == LOWORD(expect.SegCs), "wrong SegCs %08x/%08x\n", context.SegCs, expect.SegCs );
      ok( context.SegDs == LOWORD(expect.SegDs), "wrong SegDs %08x/%08x\n", context.SegDs, expect.SegDs );
 diff --git a/dlls/ntdll/thread.c b/dlls/ntdll/thread.c
-index ff5fe9d6226..e93498b27ea 100644
+index 5a6809638ae..c6988ce08e3 100644
 --- a/dlls/ntdll/thread.c
 +++ b/dlls/ntdll/thread.c
-@@ -220,6 +220,14 @@ int __cdecl __wine_dbg_output( const char *str )
+@@ -170,6 +170,14 @@ int __cdecl __wine_dbg_output( const char *str )
      return unix_funcs->dbg_output( str );
  }
  
@@ -96,7 +96,7 @@ index ff5fe9d6226..e93498b27ea 100644
  
  /***********************************************************************
   *           thread_init
-@@ -231,7 +239,7 @@ int __cdecl __wine_dbg_output( const char *str )
+@@ -181,7 +189,7 @@ int __cdecl __wine_dbg_output( const char *str )
  TEB *thread_init( SIZE_T *info_size, BOOL *suspend )
  {
      TEB *teb = unix_funcs->init_threading( &nb_threads, &__wine_ldt_copy, info_size, suspend, &server_cpus,
@@ -127,10 +127,10 @@ index 97b191e1a5b..2dbaa43e731 100644
      thread_data->request_fd = -1;
      thread_data->reply_fd   = -1;
 diff --git a/dlls/ntdll/unix/unix_private.h b/dlls/ntdll/unix/unix_private.h
-index e26a64fdac0..e93d8f21d10 100644
+index abedfc316ae..62d0c115026 100644
 --- a/dlls/ntdll/unix/unix_private.h
 +++ b/dlls/ntdll/unix/unix_private.h
-@@ -112,7 +112,7 @@ extern void CDECL server_release_fd( HANDLE handle, int unix_fd ) DECLSPEC_HIDDE
+@@ -111,7 +111,7 @@ extern void CDECL server_release_fd( HANDLE handle, int unix_fd ) DECLSPEC_HIDDE
  extern void CDECL server_init_process_done( void *relay ) DECLSPEC_HIDDEN;
  extern TEB * CDECL init_threading( int *nb_threads_ptr, struct ldt_copy **ldt_copy, SIZE_T *size,
                                     BOOL *suspend, unsigned int *cpus, BOOL *wow64,
@@ -140,19 +140,19 @@ index e26a64fdac0..e93d8f21d10 100644
  extern void CDECL DECLSPEC_NORETURN exit_process( int status ) DECLSPEC_HIDDEN;
  extern NTSTATUS CDECL get_thread_ldt_entry( HANDLE handle, void *data, ULONG len, ULONG *ret_len ) DECLSPEC_HIDDEN;
 diff --git a/dlls/ntdll/unixlib.h b/dlls/ntdll/unixlib.h
-index 768ab5b006c..63d0a519b74 100644
+index 873cc7abdf2..c6fb8e0f2d4 100644
 --- a/dlls/ntdll/unixlib.h
 +++ b/dlls/ntdll/unixlib.h
 @@ -28,7 +28,7 @@ struct ldt_copy;
  struct msghdr;
  
  /* increment this when you change the function table */
--#define NTDLL_UNIXLIB_VERSION 41
-+#define NTDLL_UNIXLIB_VERSION 42
+-#define NTDLL_UNIXLIB_VERSION 44
++#define NTDLL_UNIXLIB_VERSION 45
  
  struct unix_funcs
  {
-@@ -204,7 +204,7 @@ struct unix_funcs
+@@ -225,7 +225,7 @@ struct unix_funcs
  
      /* thread/process functions */
      TEB *         (CDECL *init_threading)( int *nb_threads_ptr, struct ldt_copy **ldt_copy, SIZE_T *size,
@@ -162,10 +162,10 @@ index 768ab5b006c..63d0a519b74 100644
      void          (CDECL *exit_process)( int status );
      NTSTATUS      (CDECL *get_thread_ldt_entry)( HANDLE handle, void *data, ULONG len, ULONG *ret_len );
 diff --git a/include/winternl.h b/include/winternl.h
-index 2d9f54b89d8..0c15a0ee6c3 100644
+index 04e5dd1f62f..2b9a12cbb31 100644
 --- a/include/winternl.h
 +++ b/include/winternl.h
-@@ -360,7 +360,7 @@ typedef struct _TEB
+@@ -359,7 +359,7 @@ typedef struct _TEB
      PVOID                        CsrClientThread;                   /* 03c/0070 */
      PVOID                        Win32ThreadInfo;                   /* 040/0078 */
      ULONG                        Win32ClientInfo[31];               /* 044/0080 used for user32 private data in Wine */
@@ -559,5 +559,5 @@ index 2a1fc960926..07a579004ad 100644
 +    return j + 1;
 +}
 -- 
-2.26.2
+2.27.0
 
 
diff --git a/patches/ws2_32-WSACleanup/0002-ws2_32-Invalidate-client-side-file-descriptor-cache-.patch b/patches/ws2_32-WSACleanup/0002-ws2_32-Invalidate-client-side-file-descriptor-cache-.patch
index f59482fe7..92f9f472c 100644
--- a/patches/ws2_32-WSACleanup/0002-ws2_32-Invalidate-client-side-file-descriptor-cache-.patch
+++ b/patches/ws2_32-WSACleanup/0002-ws2_32-Invalidate-client-side-file-descriptor-cache-.patch
@@ -1,4 +1,4 @@
-From b8b29d74bc946a359d9296a051371b78f88570d5 Mon Sep 17 00:00:00 2001
+From 85887cf68b055ca7149a428b32e9cac31e2190ca Mon Sep 17 00:00:00 2001
 From: Sebastian Lackner <sebastian@fds-team.de>
 Date: Sun, 6 Sep 2015 12:41:17 +0200
 Subject: [PATCH] ws2_32: Invalidate client-side file descriptor cache in
@@ -17,10 +17,10 @@ Subject: [PATCH] ws2_32: Invalidate client-side file descriptor cache in
  9 files changed, 36 insertions(+), 5 deletions(-)
 
 diff --git a/dlls/ntdll/ntdll.spec b/dlls/ntdll/ntdll.spec
-index a9422723b71..e4f2f0e9c2b 100644
+index 0b0d4587969..99d4c57cdfe 100644
 --- a/dlls/ntdll/ntdll.spec
 +++ b/dlls/ntdll/ntdll.spec
-@@ -1578,6 +1578,7 @@
+@@ -1577,6 +1577,7 @@
  
  # Server interface
  @ cdecl -norelay wine_server_call(ptr)
@@ -48,11 +48,11 @@ index 9e1cc85a36e..3f4ba60b7bb 100644
  /***********************************************************************
   *           wine_server_release_fd   (NTDLL.@)
 diff --git a/dlls/ntdll/unix/loader.c b/dlls/ntdll/unix/loader.c
-index 370a57dea9e..29d7c1c681c 100644
+index b09049b855b..bd37b8362b0 100644
 --- a/dlls/ntdll/unix/loader.c
 +++ b/dlls/ntdll/unix/loader.c
-@@ -927,6 +927,7 @@ static struct unix_funcs unix_funcs =
-     get_thread_ldt_entry,
+@@ -937,6 +937,7 @@ static struct unix_funcs unix_funcs =
+     fork_and_exec,
      wine_server_call,
      server_send_fd,
 +    server_remove_fds_from_cache_by_type,
@@ -60,10 +60,10 @@ index 370a57dea9e..29d7c1c681c 100644
      server_fd_to_handle,
      server_handle_to_fd,
 diff --git a/dlls/ntdll/unix/server.c b/dlls/ntdll/unix/server.c
-index 5faca657783..2e278480896 100644
+index cf6f6c3832c..586d0ffcf72 100644
 --- a/dlls/ntdll/unix/server.c
 +++ b/dlls/ntdll/unix/server.c
-@@ -1003,6 +1003,26 @@ static int remove_fd_from_cache( HANDLE handle )
+@@ -995,6 +995,26 @@ static int remove_fd_from_cache( HANDLE handle )
      return fd;
  }
  
@@ -91,10 +91,10 @@ index 5faca657783..2e278480896 100644
  /***********************************************************************
   *           server_get_unix_fd
 diff --git a/dlls/ntdll/unix/unix_private.h b/dlls/ntdll/unix/unix_private.h
-index d2586556f6e..e26a64fdac0 100644
+index e82b0960343..673d01c6bf9 100644
 --- a/dlls/ntdll/unix/unix_private.h
 +++ b/dlls/ntdll/unix/unix_private.h
-@@ -100,6 +100,7 @@ extern void CDECL virtual_release_address_space(void) DECLSPEC_HIDDEN;
+@@ -99,6 +99,7 @@ extern void CDECL virtual_release_address_space(void) DECLSPEC_HIDDEN;
  extern void CDECL virtual_set_large_address_space(void) DECLSPEC_HIDDEN;
  
  extern void CDECL server_send_fd( int fd ) DECLSPEC_HIDDEN;
@@ -103,19 +103,19 @@ index d2586556f6e..e26a64fdac0 100644
                                       int *needs_close, enum server_fd_type *type,
                                       unsigned int *options ) DECLSPEC_HIDDEN;
 diff --git a/dlls/ntdll/unixlib.h b/dlls/ntdll/unixlib.h
-index 54705b7f6d2..768ab5b006c 100644
+index 958fab4c059..873cc7abdf2 100644
 --- a/dlls/ntdll/unixlib.h
 +++ b/dlls/ntdll/unixlib.h
 @@ -28,7 +28,7 @@ struct ldt_copy;
  struct msghdr;
  
  /* increment this when you change the function table */
--#define NTDLL_UNIXLIB_VERSION 40
-+#define NTDLL_UNIXLIB_VERSION 41
+-#define NTDLL_UNIXLIB_VERSION 43
++#define NTDLL_UNIXLIB_VERSION 44
  
  struct unix_funcs
  {
-@@ -212,6 +212,7 @@ struct unix_funcs
+@@ -239,6 +239,7 @@ struct unix_funcs
      /* server functions */
      unsigned int  (CDECL *server_call)( void *req_ptr );
      void          (CDECL *server_send_fd)( int fd );
@@ -164,5 +164,5 @@ index ac5dcc6f8bc..5cf52887516 100644
  /* do a server call and set the last error code */
  static inline unsigned int wine_server_call_err( void *req_ptr )
 -- 
-2.26.2
+2.27.0
 

diff --git a/patches/wow64cpu-Wow64Transition/0002-ntdll-Add-a-stub-implementation-of-Wow64Transition.patch b/patches/wow64cpu-Wow64Transition/0002-ntdll-Add-a-stub-implementation-of-Wow64Transition.patch
index ec9de02f7..f5c5c6c58 100644
--- a/patches/wow64cpu-Wow64Transition/0002-ntdll-Add-a-stub-implementation-of-Wow64Transition.patch
+++ b/patches/wow64cpu-Wow64Transition/0002-ntdll-Add-a-stub-implementation-of-Wow64Transition.patch
@@ -1,18 +1,18 @@
-From 8281eb9d4c2c5d20a336fda58c5bf1e603f05590 Mon Sep 17 00:00:00 2001
+From 384a965d9dd8ad2d946682e45c409795bba292a2 Mon Sep 17 00:00:00 2001
 From: Zebediah Figura <z.figura12@gmail.com>
 Date: Wed, 8 Aug 2018 20:00:15 -0500
 Subject: [PATCH] ntdll: Add a stub implementation of Wow64Transition.
 
 ---
- dlls/ntdll/loader.c   | 11 ++++++++++-
+ dlls/ntdll/loader.c   | 13 ++++++++++++-
  dlls/ntdll/ntdll.spec |  1 +
- 2 files changed, 11 insertions(+), 1 deletion(-)
+ 2 files changed, 13 insertions(+), 1 deletion(-)
 
 diff --git a/dlls/ntdll/loader.c b/dlls/ntdll/loader.c
-index 92ae87c6e6d..533bad12103 100644
+index 42b681e4cd3..c8cdf4f5436 100644
 --- a/dlls/ntdll/loader.c
 +++ b/dlls/ntdll/loader.c
-@@ -4322,6 +4322,7 @@ NTSTATUS WINAPI NtLoadDriver( const UNICODE_STRING *DriverServiceName )
+@@ -4324,6 +4324,7 @@ NTSTATUS WINAPI NtLoadDriver( const UNICODE_STRING *DriverServiceName )
      return STATUS_NOT_IMPLEMENTED;
  }
  
@@ -20,11 +20,13 @@ index 92ae87c6e6d..533bad12103 100644
  
  /***********************************************************************
   *           NtUnloadDriver   (NTDLL.@)
-@@ -4380,13 +4381,14 @@ void __wine_process_init(void)
+@@ -4382,13 +4383,16 @@ void __wine_process_init(void)
      static const WCHAR ntdllW[] = {'\\','?','?','\\','C',':','\\','w','i','n','d','o','w','s','\\',
                                     's','y','s','t','e','m','3','2','\\',
                                     'n','t','d','l','l','.','d','l','l',0};
-+    static const WCHAR wow64cpuW[] = {'w','o','w','6','4','c','p','u','.','d','l','l',0};
++    static const WCHAR wow64cpuW[] = {'\\','?','?','\\','C',':','\\','w','i','n','d','o','w','s','\\',
++                                      's','y','s','t','e','m','3','2','\\',
++                                      'w','o','w','6','4','c','p','u','.','d','l','l',0};
      static const WCHAR kernel32W[] = {'\\','?','?','\\','C',':','\\','w','i','n','d','o','w','s','\\',
                                        's','y','s','t','e','m','3','2','\\',
                                        'k','e','r','n','e','l','3','2','.','d','l','l',0};
@@ -36,7 +38,7 @@ index 92ae87c6e6d..533bad12103 100644
      NTSTATUS status;
      ANSI_STRING func_name;
      UNICODE_STRING nt_name;
-@@ -4429,6 +4431,13 @@ void __wine_process_init(void)
+@@ -4431,6 +4435,13 @@ void __wine_process_init(void)
          MESSAGE( "wine: could not load kernel32.dll, status %x\n", status );
          exit(1);
      }
@@ -51,10 +53,10 @@ index 92ae87c6e6d..533bad12103 100644
      if ((status = LdrGetProcedureAddress( wm->ldr.DllBase, &func_name,
                                            0, (void **)&kernel32_start_process )) != STATUS_SUCCESS)
 diff --git a/dlls/ntdll/ntdll.spec b/dlls/ntdll/ntdll.spec
-index 05e46bd1b3d..c24889479a4 100644
+index e313d5807b3..b20ded3d108 100644
 --- a/dlls/ntdll/ntdll.spec
 +++ b/dlls/ntdll/ntdll.spec
-@@ -1111,6 +1111,7 @@
+@@ -1112,6 +1112,7 @@
  @ stdcall WinSqmIsOptedIn()
  @ stdcall WinSqmSetDWORD(ptr long long)
  @ stdcall WinSqmStartSession(ptr long long)

diff --git a/patches/ntdll-Syscall_Emulation/0001-ntdll-Support-x86_64-syscall-emulation.patch b/patches/ntdll-Syscall_Emulation/0001-ntdll-Support-x86_64-syscall-emulation.patch
index f7c6526f1..6aaf9caad 100644
--- a/patches/ntdll-Syscall_Emulation/0001-ntdll-Support-x86_64-syscall-emulation.patch
+++ b/patches/ntdll-Syscall_Emulation/0001-ntdll-Support-x86_64-syscall-emulation.patch
@@ -1,4 +1,4 @@
-From 7ac261609be678c827b32e36656a56d77e729fcc Mon Sep 17 00:00:00 2001
+From a660effad7b09d7333aa46f9bbef45eb4c1bed3d Mon Sep 17 00:00:00 2001
 From: Paul Gofman <pgofman@codeweavers.com>
 Date: Mon, 30 Dec 2019 13:27:53 +0300
 Subject: [PATCH] ntdll: Support x86_64 syscall emulation.
@@ -13,13 +13,13 @@ is used for trapping syscalls.
  dlls/ntdll/thread.c             |   8 ++-
  dlls/ntdll/unix/signal_x86_64.c | 105 ++++++++++++++++++++++++++++++++
  dlls/ntdll/unix/thread.c        |   8 ++-
- dlls/ntdll/unix/unix_private.h  |   5 +-
+ dlls/ntdll/unix/unix_private.h  |   6 +-
  dlls/ntdll/unixlib.h            |   3 +-
  tools/winebuild/spec32.c        |   9 ++-
- 7 files changed, 133 insertions(+), 6 deletions(-)
+ 7 files changed, 134 insertions(+), 6 deletions(-)
 
 diff --git a/configure.ac b/configure.ac
-index 5418d1aa7329..d82069e74574 100644
+index 5418d1aa732..d82069e7457 100644
 --- a/configure.ac
 +++ b/configure.ac
 @@ -474,6 +474,7 @@ AC_CHECK_HEADERS(\
@@ -31,7 +31,7 @@ index 5418d1aa7329..d82069e74574 100644
  	linux/types.h \
  	linux/ucdrom.h \
 diff --git a/dlls/ntdll/thread.c b/dlls/ntdll/thread.c
-index a14e3a12ae0c..a0411446e243 100644
+index a14e3a12ae0..a0411446e24 100644
 --- a/dlls/ntdll/thread.c
 +++ b/dlls/ntdll/thread.c
 @@ -229,6 +229,12 @@ void __wine_syscall_dispatcher( void )
@@ -57,7 +57,7 @@ index a14e3a12ae0c..a0411446e243 100644
  
      peb = teb->Peb;
 diff --git a/dlls/ntdll/unix/signal_x86_64.c b/dlls/ntdll/unix/signal_x86_64.c
-index 1d1b879310ee..c8a8d1d1d33d 100644
+index 1d1b879310e..c8a8d1d1d33 100644
 --- a/dlls/ntdll/unix/signal_x86_64.c
 +++ b/dlls/ntdll/unix/signal_x86_64.c
 @@ -28,6 +28,7 @@
@@ -194,7 +194,7 @@ index 1d1b879310ee..c8a8d1d1d33d 100644
  
   error:
 diff --git a/dlls/ntdll/unix/thread.c b/dlls/ntdll/unix/thread.c
-index e1da90222d38..91e1596ddcba 100644
+index e1da90222d3..91e1596ddcb 100644
 --- a/dlls/ntdll/unix/thread.c
 +++ b/dlls/ntdll/unix/thread.c
 @@ -58,6 +58,9 @@ WINE_DEFAULT_DEBUG_CHANNEL(seh);
@@ -227,10 +227,10 @@ index e1da90222d38..91e1596ddcba 100644
      teb = virtual_alloc_first_teb();
      teb->WOW32Reserved = syscall_handler;
 diff --git a/dlls/ntdll/unix/unix_private.h b/dlls/ntdll/unix/unix_private.h
-index d06f366d3c6d..4e1bdbcc5094 100644
+index 75594832572..e42fa44f9a0 100644
 --- a/dlls/ntdll/unix/unix_private.h
 +++ b/dlls/ntdll/unix/unix_private.h
-@@ -108,7 +108,8 @@ extern void CDECL server_release_fd( HANDLE handle, int unix_fd ) DECLSPEC_HIDDE
+@@ -112,7 +112,8 @@ extern void CDECL server_release_fd( HANDLE handle, int unix_fd ) DECLSPEC_HIDDE
  extern void CDECL server_init_process_done( void *relay ) DECLSPEC_HIDDEN;
  extern TEB * CDECL init_threading( int *nb_threads_ptr, struct ldt_copy **ldt_copy, SIZE_T *size,
                                     BOOL *suspend, unsigned int *cpus, BOOL *wow64,
@@ -240,20 +240,21 @@ index d06f366d3c6d..4e1bdbcc5094 100644
  extern void CDECL DECLSPEC_NORETURN exit_thread( int status ) DECLSPEC_HIDDEN;
  extern void CDECL DECLSPEC_NORETURN exit_process( int status ) DECLSPEC_HIDDEN;
  extern NTSTATUS CDECL get_thread_ldt_entry( HANDLE handle, void *data, ULONG len, ULONG *ret_len ) DECLSPEC_HIDDEN;
-@@ -123,6 +124,8 @@ extern timeout_t server_start_time DECLSPEC_HIDDEN;
- extern sigset_t server_block_set DECLSPEC_HIDDEN;
- extern SIZE_T signal_stack_size DECLSPEC_HIDDEN;
- extern SIZE_T signal_stack_mask DECLSPEC_HIDDEN;
+@@ -132,6 +133,9 @@ extern struct _KUSER_SHARED_DATA *user_shared_data DECLSPEC_HIDDEN;
+ extern void init_environment( int argc, char *argv[], char *envp[] ) DECLSPEC_HIDDEN;
+ extern DWORD ntdll_umbstowcs( const char *src, DWORD srclen, WCHAR *dst, DWORD dstlen ) DECLSPEC_HIDDEN;
+ 
 +extern unsigned int __wine_nb_syscalls DECLSPEC_HIDDEN;
 +extern void *__wine_syscall_dispatcher DECLSPEC_HIDDEN;
- 
++
  extern unsigned int server_call_unlocked( void *req_ptr ) DECLSPEC_HIDDEN;
  extern void server_enter_uninterrupted_section( RTL_CRITICAL_SECTION *cs, sigset_t *sigset ) DECLSPEC_HIDDEN;
+ extern void server_leave_uninterrupted_section( RTL_CRITICAL_SECTION *cs, sigset_t *sigset ) DECLSPEC_HIDDEN;
 diff --git a/dlls/ntdll/unixlib.h b/dlls/ntdll/unixlib.h
-index 4f0080db03d9..ae17b78862a3 100644
+index 63d0a519b74..92762e802ee 100644
 --- a/dlls/ntdll/unixlib.h
 +++ b/dlls/ntdll/unixlib.h
-@@ -199,7 +199,8 @@ struct unix_funcs
+@@ -204,7 +204,8 @@ struct unix_funcs
  
      /* thread/process functions */
      TEB *         (CDECL *init_threading)( int *nb_threads_ptr, struct ldt_copy **ldt_copy, SIZE_T *size,
@@ -264,7 +265,7 @@ index 4f0080db03d9..ae17b78862a3 100644
      void          (CDECL *exit_process)( int status );
      NTSTATUS      (CDECL *get_thread_ldt_entry)( HANDLE handle, void *data, ULONG len, ULONG *ret_len );
 diff --git a/tools/winebuild/spec32.c b/tools/winebuild/spec32.c
-index 9cc4698d0d7d..c572fe499230 100644
+index 9cc4698d0d7..c572fe49923 100644
 --- a/tools/winebuild/spec32.c
 +++ b/tools/winebuild/spec32.c
 @@ -531,7 +531,7 @@ static void output_syscall_thunks_x64( DLLSPEC *spec )
diff --git a/patches/patchinstall.sh b/patches/patchinstall.sh
index 6e7df7582..795604b48 100755
--- a/patches/patchinstall.sh
+++ b/patches/patchinstall.sh
@@ -4190,7 +4190,8 @@ fi
 # |   *	[#48291] Detroit: Become Human crashes on launch
 # |
 # | Modified files:
-# |   *	configure.ac, dlls/ntdll/unix/signal_x86_64.c, tools/winebuild/spec32.c
+# |   *	configure.ac, dlls/ntdll/thread.c, dlls/ntdll/unix/signal_x86_64.c, dlls/ntdll/unix/thread.c,
+# | 	dlls/ntdll/unix/unix_private.h, dlls/ntdll/unixlib.h, tools/winebuild/spec32.c
 # |
 if test "$enable_ntdll_Syscall_Emulation" -eq 1; then
 	patch_apply ntdll-Syscall_Emulation/0001-ntdll-Support-x86_64-syscall-emulation.patch
diff --git a/patches/winebuild-Fake_Dlls/0003-winebuild-Generate-syscall-thunks-for-ntdll-exports.patch b/patches/winebuild-Fake_Dlls/0003-winebuild-Generate-syscall-thunks-for-ntdll-exports.patch
index a0487f91b..b78ca856c 100644
--- a/patches/winebuild-Fake_Dlls/0003-winebuild-Generate-syscall-thunks-for-ntdll-exports.patch
+++ b/patches/winebuild-Fake_Dlls/0003-winebuild-Generate-syscall-thunks-for-ntdll-exports.patch
@@ -1,4 +1,4 @@
-From d8ff827f7a94aee2bed89c620120af0a148ca81c Mon Sep 17 00:00:00 2001
+From 531ffc16d33f96bfeb65973efd1cdbd22fb6a32f Mon Sep 17 00:00:00 2001
 From: =?UTF-8?q?Michael=20M=C3=BCller?= <michael@fds-team.de>
 Date: Thu, 11 May 2017 05:32:55 +0200
 Subject: [PATCH] winebuild: Generate syscall thunks for ntdll exports.
@@ -22,7 +22,7 @@ Based on a patch by Erich E. Hoover.
  14 files changed, 221 insertions(+), 32 deletions(-)
 
 diff --git a/dlls/ntdll/loader.c b/dlls/ntdll/loader.c
-index 2553b0b9d397..cac6aae2f3dd 100644
+index 2553b0b9d39..cac6aae2f3d 100644
 --- a/dlls/ntdll/loader.c
 +++ b/dlls/ntdll/loader.c
 @@ -4021,6 +4021,7 @@ PIMAGE_NT_HEADERS WINAPI RtlImageNtHeader(HMODULE hModule)
@@ -43,7 +43,7 @@ index 2553b0b9d397..cac6aae2f3dd 100644
  
      RtlEnterCriticalSection( &loader_section );
 diff --git a/dlls/ntdll/signal_i386.c b/dlls/ntdll/signal_i386.c
-index 21cc1b3ead40..18be5693a7d2 100644
+index 21cc1b3ead4..18be5693a7d 100644
 --- a/dlls/ntdll/signal_i386.c
 +++ b/dlls/ntdll/signal_i386.c
 @@ -346,6 +346,8 @@ __ASM_STDCALL_FUNC( RtlCaptureContext, 4,
@@ -65,7 +65,7 @@ index 21cc1b3ead40..18be5693a7d2 100644
      }
      return unix_funcs->NtGetContextThread( handle, context );
 diff --git a/dlls/ntdll/tests/exception.c b/dlls/ntdll/tests/exception.c
-index 1389a542cdee..54796476e25b 100644
+index 1389a542cde..54796476e25 100644
 --- a/dlls/ntdll/tests/exception.c
 +++ b/dlls/ntdll/tests/exception.c
 @@ -1643,6 +1643,8 @@ static void test_thread_context(void)
@@ -78,7 +78,7 @@ index 1389a542cdee..54796476e25b 100644
      ok( context.SegCs == LOWORD(expect.SegCs), "wrong SegCs %08x/%08x\n", context.SegCs, expect.SegCs );
      ok( context.SegDs == LOWORD(expect.SegDs), "wrong SegDs %08x/%08x\n", context.SegDs, expect.SegDs );
 diff --git a/dlls/ntdll/thread.c b/dlls/ntdll/thread.c
-index ff5fe9d6226a..e93498b27ea0 100644
+index ff5fe9d6226..e93498b27ea 100644
 --- a/dlls/ntdll/thread.c
 +++ b/dlls/ntdll/thread.c
 @@ -220,6 +220,14 @@ int __cdecl __wine_dbg_output( const char *str )
@@ -106,7 +106,7 @@ index ff5fe9d6226a..e93498b27ea0 100644
      peb = teb->Peb;
      peb->FastPebLock        = &peb_lock;
 diff --git a/dlls/ntdll/unix/thread.c b/dlls/ntdll/unix/thread.c
-index 97b191e1a5b3..2dbaa43e731a 100644
+index 97b191e1a5b..2dbaa43e731 100644
 --- a/dlls/ntdll/unix/thread.c
 +++ b/dlls/ntdll/unix/thread.c
 @@ -85,7 +85,7 @@ static void pthread_exit_wrapper( int status )
@@ -127,10 +127,10 @@ index 97b191e1a5b3..2dbaa43e731a 100644
      thread_data->request_fd = -1;
      thread_data->reply_fd   = -1;
 diff --git a/dlls/ntdll/unix/unix_private.h b/dlls/ntdll/unix/unix_private.h
-index 92a58417827b..33a551e947c2 100644
+index e26a64fdac0..e93d8f21d10 100644
 --- a/dlls/ntdll/unix/unix_private.h
 +++ b/dlls/ntdll/unix/unix_private.h
-@@ -108,7 +108,7 @@ extern void CDECL server_release_fd( HANDLE handle, int unix_fd ) DECLSPEC_HIDDE
+@@ -112,7 +112,7 @@ extern void CDECL server_release_fd( HANDLE handle, int unix_fd ) DECLSPEC_HIDDE
  extern void CDECL server_init_process_done( void *relay ) DECLSPEC_HIDDEN;
  extern TEB * CDECL init_threading( int *nb_threads_ptr, struct ldt_copy **ldt_copy, SIZE_T *size,
                                     BOOL *suspend, unsigned int *cpus, BOOL *wow64,
@@ -140,19 +140,19 @@ index 92a58417827b..33a551e947c2 100644
  extern void CDECL DECLSPEC_NORETURN exit_process( int status ) DECLSPEC_HIDDEN;
  extern NTSTATUS CDECL get_thread_ldt_entry( HANDLE handle, void *data, ULONG len, ULONG *ret_len ) DECLSPEC_HIDDEN;
 diff --git a/dlls/ntdll/unixlib.h b/dlls/ntdll/unixlib.h
-index 4c580c49d139..4f0080db03d9 100644
+index 768ab5b006c..63d0a519b74 100644
 --- a/dlls/ntdll/unixlib.h
 +++ b/dlls/ntdll/unixlib.h
 @@ -28,7 +28,7 @@ struct ldt_copy;
  struct msghdr;
  
  /* increment this when you change the function table */
--#define NTDLL_UNIXLIB_VERSION 38
-+#define NTDLL_UNIXLIB_VERSION 39
+-#define NTDLL_UNIXLIB_VERSION 41
++#define NTDLL_UNIXLIB_VERSION 42
  
  struct unix_funcs
  {
-@@ -199,7 +199,7 @@ struct unix_funcs
+@@ -204,7 +204,7 @@ struct unix_funcs
  
      /* thread/process functions */
      TEB *         (CDECL *init_threading)( int *nb_threads_ptr, struct ldt_copy **ldt_copy, SIZE_T *size,
@@ -162,7 +162,7 @@ index 4c580c49d139..4f0080db03d9 100644
      void          (CDECL *exit_process)( int status );
      NTSTATUS      (CDECL *get_thread_ldt_entry)( HANDLE handle, void *data, ULONG len, ULONG *ret_len );
 diff --git a/include/winternl.h b/include/winternl.h
-index 2d9f54b89d8c..0c15a0ee6c34 100644
+index 2d9f54b89d8..0c15a0ee6c3 100644
 --- a/include/winternl.h
 +++ b/include/winternl.h
 @@ -360,7 +360,7 @@ typedef struct _TEB
@@ -175,7 +175,7 @@ index 2d9f54b89d8c..0c15a0ee6c34 100644
      ULONG                        FpSoftwareStatusRegister;          /* 0c8/010c */
      PVOID                        SystemReserved1[54];               /* 0cc/0110 used for krnl386.exe16 private data in Wine */
 diff --git a/tools/winebuild/build.h b/tools/winebuild/build.h
-index c162888a0356..55d5b0b9dc28 100644
+index c162888a035..55d5b0b9dc2 100644
 --- a/tools/winebuild/build.h
 +++ b/tools/winebuild/build.h
 @@ -105,6 +105,7 @@ typedef struct
@@ -223,7 +223,7 @@ index c162888a0356..55d5b0b9dc28 100644
  
  extern int byte_swapped;
 diff --git a/tools/winebuild/import.c b/tools/winebuild/import.c
-index 04ab433dd65a..0c6bafed8e54 100644
+index 04ab433dd65..0c6bafed8e5 100644
 --- a/tools/winebuild/import.c
 +++ b/tools/winebuild/import.c
 @@ -531,6 +531,7 @@ static void check_undefined_forwards( DLLSPEC *spec )
@@ -263,7 +263,7 @@ index 04ab433dd65a..0c6bafed8e54 100644
              }
          }
 diff --git a/tools/winebuild/parser.c b/tools/winebuild/parser.c
-index 0f2b9c1e10ad..74216f8bb6e7 100644
+index 0f2b9c1e10a..74216f8bb6e 100644
 --- a/tools/winebuild/parser.c
 +++ b/tools/winebuild/parser.c
 @@ -543,6 +543,24 @@ static const char *parse_spec_flags( DLLSPEC *spec, ORDDEF *odp )
@@ -354,7 +354,7 @@ index 0f2b9c1e10ad..74216f8bb6e7 100644
  }
  
 diff --git a/tools/winebuild/spec16.c b/tools/winebuild/spec16.c
-index a52c03aaa6a7..15ef9a3f8930 100644
+index a52c03aaa6a..15ef9a3f893 100644
 --- a/tools/winebuild/spec16.c
 +++ b/tools/winebuild/spec16.c
 @@ -495,27 +495,6 @@ static int relay_type_compare( const void *e1, const void *e2 )
@@ -394,7 +394,7 @@ index a52c03aaa6a7..15ef9a3f8930 100644
          entry_point->u.func.nb_args = 0;
          assert( !spec->ordinals[0] );
 diff --git a/tools/winebuild/spec32.c b/tools/winebuild/spec32.c
-index b1e20e0484dc..22dd399cb2b4 100644
+index b1e20e0484d..22dd399cb2b 100644
 --- a/tools/winebuild/spec32.c
 +++ b/tools/winebuild/spec32.c
 @@ -374,6 +374,109 @@ static void output_relay_debug( DLLSPEC *spec )
@@ -516,7 +516,7 @@ index b1e20e0484dc..22dd399cb2b4 100644
      output_exports( spec );
      output_imports( spec );
 diff --git a/tools/winebuild/utils.c b/tools/winebuild/utils.c
-index 2a1fc960926b..07a579004adc 100644
+index 2a1fc960926..07a579004ad 100644
 --- a/tools/winebuild/utils.c
 +++ b/tools/winebuild/utils.c
 @@ -860,6 +860,7 @@ void free_dll_spec( DLLSPEC *spec )
diff --git a/patches/ws2_32-WSACleanup/0002-ws2_32-Invalidate-client-side-file-descriptor-cache-.patch b/patches/ws2_32-WSACleanup/0002-ws2_32-Invalidate-client-side-file-descriptor-cache-.patch
index 7b9e61d85..f59482fe7 100644
--- a/patches/ws2_32-WSACleanup/0002-ws2_32-Invalidate-client-side-file-descriptor-cache-.patch
+++ b/patches/ws2_32-WSACleanup/0002-ws2_32-Invalidate-client-side-file-descriptor-cache-.patch
@@ -1,4 +1,4 @@
-From 6cc54a973b9b786166db76df6a4f0a33867103ce Mon Sep 17 00:00:00 2001
+From b8b29d74bc946a359d9296a051371b78f88570d5 Mon Sep 17 00:00:00 2001
 From: Sebastian Lackner <sebastian@fds-team.de>
 Date: Sun, 6 Sep 2015 12:41:17 +0200
 Subject: [PATCH] ws2_32: Invalidate client-side file descriptor cache in
@@ -17,10 +17,10 @@ Subject: [PATCH] ws2_32: Invalidate client-side file descriptor cache in
  9 files changed, 36 insertions(+), 5 deletions(-)
 
 diff --git a/dlls/ntdll/ntdll.spec b/dlls/ntdll/ntdll.spec
-index e054eabba3a..82ed6c68cbe 100644
+index a9422723b71..e4f2f0e9c2b 100644
 --- a/dlls/ntdll/ntdll.spec
 +++ b/dlls/ntdll/ntdll.spec
-@@ -1576,6 +1576,7 @@
+@@ -1578,6 +1578,7 @@
  
  # Server interface
  @ cdecl -norelay wine_server_call(ptr)
@@ -48,10 +48,10 @@ index 9e1cc85a36e..3f4ba60b7bb 100644
  /***********************************************************************
   *           wine_server_release_fd   (NTDLL.@)
 diff --git a/dlls/ntdll/unix/loader.c b/dlls/ntdll/unix/loader.c
-index eac43ba42c4..cd11d0d647e 100644
+index 370a57dea9e..29d7c1c681c 100644
 --- a/dlls/ntdll/unix/loader.c
 +++ b/dlls/ntdll/unix/loader.c
-@@ -1089,6 +1089,7 @@ static struct unix_funcs unix_funcs =
+@@ -927,6 +927,7 @@ static struct unix_funcs unix_funcs =
      get_thread_ldt_entry,
      wine_server_call,
      server_send_fd,
@@ -60,10 +60,10 @@ index eac43ba42c4..cd11d0d647e 100644
      server_fd_to_handle,
      server_handle_to_fd,
 diff --git a/dlls/ntdll/unix/server.c b/dlls/ntdll/unix/server.c
-index cf6f6c3832c..586d0ffcf72 100644
+index 5faca657783..2e278480896 100644
 --- a/dlls/ntdll/unix/server.c
 +++ b/dlls/ntdll/unix/server.c
-@@ -995,6 +995,26 @@ static int remove_fd_from_cache( HANDLE handle )
+@@ -1003,6 +1003,26 @@ static int remove_fd_from_cache( HANDLE handle )
      return fd;
  }
  
@@ -91,10 +91,10 @@ index cf6f6c3832c..586d0ffcf72 100644
  /***********************************************************************
   *           server_get_unix_fd
 diff --git a/dlls/ntdll/unix/unix_private.h b/dlls/ntdll/unix/unix_private.h
-index 3e61111cba5..ae0c47b5a79 100644
+index d2586556f6e..e26a64fdac0 100644
 --- a/dlls/ntdll/unix/unix_private.h
 +++ b/dlls/ntdll/unix/unix_private.h
-@@ -95,6 +95,7 @@ extern void CDECL virtual_release_address_space(void) DECLSPEC_HIDDEN;
+@@ -100,6 +100,7 @@ extern void CDECL virtual_release_address_space(void) DECLSPEC_HIDDEN;
  extern void CDECL virtual_set_large_address_space(void) DECLSPEC_HIDDEN;
  
  extern void CDECL server_send_fd( int fd ) DECLSPEC_HIDDEN;
@@ -103,19 +103,19 @@ index 3e61111cba5..ae0c47b5a79 100644
                                       int *needs_close, enum server_fd_type *type,
                                       unsigned int *options ) DECLSPEC_HIDDEN;
 diff --git a/dlls/ntdll/unixlib.h b/dlls/ntdll/unixlib.h
-index 80d3ce27601..4c580c49d13 100644
+index 54705b7f6d2..768ab5b006c 100644
 --- a/dlls/ntdll/unixlib.h
 +++ b/dlls/ntdll/unixlib.h
 @@ -28,7 +28,7 @@ struct ldt_copy;
  struct msghdr;
  
  /* increment this when you change the function table */
--#define NTDLL_UNIXLIB_VERSION 37
-+#define NTDLL_UNIXLIB_VERSION 38
+-#define NTDLL_UNIXLIB_VERSION 40
++#define NTDLL_UNIXLIB_VERSION 41
  
  struct unix_funcs
  {
-@@ -207,6 +207,7 @@ struct unix_funcs
+@@ -212,6 +212,7 @@ struct unix_funcs
      /* server functions */
      unsigned int  (CDECL *server_call)( void *req_ptr );
      void          (CDECL *server_send_fd)( int fd );

diff --git a/patches/ntdll-Syscall_Emulation/0001-ntdll-Support-x86_64-syscall-emulation.patch b/patches/ntdll-Syscall_Emulation/0001-ntdll-Support-x86_64-syscall-emulation.patch
index 2e659ca0c..f7c6526f1 100644
--- a/patches/ntdll-Syscall_Emulation/0001-ntdll-Support-x86_64-syscall-emulation.patch
+++ b/patches/ntdll-Syscall_Emulation/0001-ntdll-Support-x86_64-syscall-emulation.patch
@@ -1,4 +1,4 @@
-From 3c60ef5d082e5298b113cf0cc93fa2bb44deadba Mon Sep 17 00:00:00 2001
+From 7ac261609be678c827b32e36656a56d77e729fcc Mon Sep 17 00:00:00 2001
 From: Paul Gofman <pgofman@codeweavers.com>
 Date: Mon, 30 Dec 2019 13:27:53 +0300
 Subject: [PATCH] ntdll: Support x86_64 syscall emulation.
@@ -10,15 +10,19 @@ get the number from syscall thunks). Linux specific Seccomp
 is used for trapping syscalls.
 ---
  configure.ac                    |   1 +
- dlls/ntdll/unix/signal_x86_64.c | 109 ++++++++++++++++++++++++++++++++
+ dlls/ntdll/thread.c             |   8 ++-
+ dlls/ntdll/unix/signal_x86_64.c | 105 ++++++++++++++++++++++++++++++++
+ dlls/ntdll/unix/thread.c        |   8 ++-
+ dlls/ntdll/unix/unix_private.h  |   5 +-
+ dlls/ntdll/unixlib.h            |   3 +-
  tools/winebuild/spec32.c        |   9 ++-
- 3 files changed, 117 insertions(+), 2 deletions(-)
+ 7 files changed, 133 insertions(+), 6 deletions(-)
 
 diff --git a/configure.ac b/configure.ac
-index e61a98455c3..4adeb52d225 100644
+index 5418d1aa7329..d82069e74574 100644
 --- a/configure.ac
 +++ b/configure.ac
-@@ -464,6 +464,7 @@ AC_CHECK_HEADERS(\
+@@ -474,6 +474,7 @@ AC_CHECK_HEADERS(\
  	linux/joystick.h \
  	linux/major.h \
  	linux/param.h \
@@ -26,8 +30,34 @@ index e61a98455c3..4adeb52d225 100644
  	linux/serial.h \
  	linux/types.h \
  	linux/ucdrom.h \
+diff --git a/dlls/ntdll/thread.c b/dlls/ntdll/thread.c
+index a14e3a12ae0c..a0411446e243 100644
+--- a/dlls/ntdll/thread.c
++++ b/dlls/ntdll/thread.c
+@@ -229,6 +229,12 @@ void __wine_syscall_dispatcher( void )
+ }
+ #endif
+ 
++#if defined(__x86_64__)
++extern unsigned int __wine_nb_syscalls;
++#else
++unsigned int __wine_nb_syscalls;
++#endif
++
+ void *WINAPI __wine_fakedll_dispatcher( const char *module, ULONG ord )
+ {
+     UNICODE_STRING name;
+@@ -272,7 +278,7 @@ void *WINAPI __wine_fakedll_dispatcher( const char *module, ULONG ord )
+ TEB *thread_init( SIZE_T *info_size, BOOL *suspend )
+ {
+     TEB *teb = unix_funcs->init_threading( &nb_threads, &__wine_ldt_copy, info_size, suspend, &server_cpus,
+-                                           &is_wow64, &server_start_time, __wine_syscall_dispatcher );
++                                           &is_wow64, &server_start_time, __wine_syscall_dispatcher, __wine_nb_syscalls );
+     teb->Spare2 = (ULONG_PTR)__wine_fakedll_dispatcher;
+ 
+     peb = teb->Peb;
 diff --git a/dlls/ntdll/unix/signal_x86_64.c b/dlls/ntdll/unix/signal_x86_64.c
-index 1d1b879310e..d4dda481127 100644
+index 1d1b879310ee..c8a8d1d1d33d 100644
 --- a/dlls/ntdll/unix/signal_x86_64.c
 +++ b/dlls/ntdll/unix/signal_x86_64.c
 @@ -28,6 +28,7 @@
@@ -52,21 +82,10 @@ index 1d1b879310e..d4dda481127 100644
  #define NONAMELESSUNION
  #define NONAMELESSSTRUCT
  #include "ntstatus.h"
-@@ -78,6 +86,8 @@
- 
- WINE_DEFAULT_DEBUG_CHANNEL(seh);
- 
-+extern void DECLSPEC_NORETURN __wine_syscall_dispatcher( void );
-+
- /***********************************************************************
-  * signal context platform-specific definitions
-  */
-@@ -982,6 +992,104 @@ static inline DWORD is_privileged_instr( CONTEXT *context )
+@@ -982,6 +990,102 @@ static inline DWORD is_privileged_instr( CONTEXT *context )
      return 0;
  }
  
-+extern unsigned int __wine_nb_syscalls;
-+
 +#ifdef HAVE_SECCOMP
 +static void sigsys_handler( int signal, siginfo_t *siginfo, void *sigcontext )
 +{
@@ -166,7 +185,7 @@ index 1d1b879310e..d4dda481127 100644
  
  /***********************************************************************
   *           handle_interrupt
-@@ -1431,6 +1539,7 @@ void signal_init_process(void)
+@@ -1431,6 +1535,7 @@ void signal_init_process(void)
      if (sigaction( SIGSEGV, &sig_act, NULL ) == -1) goto error;
      if (sigaction( SIGILL, &sig_act, NULL ) == -1) goto error;
      if (sigaction( SIGBUS, &sig_act, NULL ) == -1) goto error;
@@ -174,8 +193,78 @@ index 1d1b879310e..d4dda481127 100644
      return;
  
   error:
+diff --git a/dlls/ntdll/unix/thread.c b/dlls/ntdll/unix/thread.c
+index e1da90222d38..91e1596ddcba 100644
+--- a/dlls/ntdll/unix/thread.c
++++ b/dlls/ntdll/unix/thread.c
+@@ -58,6 +58,9 @@ WINE_DEFAULT_DEBUG_CHANNEL(seh);
+ #define PTHREAD_STACK_MIN 16384
+ #endif
+ 
++unsigned int __wine_nb_syscalls;
++void *__wine_syscall_dispatcher;
++
+ static int *nb_threads;
+ 
+ static inline int get_unix_exit_code( NTSTATUS status )
+@@ -85,7 +88,8 @@ static void pthread_exit_wrapper( int status )
+  *           init_threading
+  */
+ TEB * CDECL init_threading( int *nb_threads_ptr, struct ldt_copy **ldt_copy, SIZE_T *size, BOOL *suspend,
+-                            unsigned int *cpus, BOOL *wow64, timeout_t *start_time, void *syscall_handler )
++                            unsigned int *cpus, BOOL *wow64, timeout_t *start_time, void *syscall_handler,
++                            unsigned int syscall_count )
+ {
+     TEB *teb;
+     SIZE_T info_size;
+@@ -95,6 +99,8 @@ TEB * CDECL init_threading( int *nb_threads_ptr, struct ldt_copy **ldt_copy, SIZ
+     *ldt_copy = &__wine_ldt_copy;
+ #endif
+     nb_threads = nb_threads_ptr;
++    __wine_nb_syscalls = syscall_count;
++    __wine_syscall_dispatcher = syscall_handler;
+ 
+     teb = virtual_alloc_first_teb();
+     teb->WOW32Reserved = syscall_handler;
+diff --git a/dlls/ntdll/unix/unix_private.h b/dlls/ntdll/unix/unix_private.h
+index d06f366d3c6d..4e1bdbcc5094 100644
+--- a/dlls/ntdll/unix/unix_private.h
++++ b/dlls/ntdll/unix/unix_private.h
+@@ -108,7 +108,8 @@ extern void CDECL server_release_fd( HANDLE handle, int unix_fd ) DECLSPEC_HIDDE
+ extern void CDECL server_init_process_done( void *relay ) DECLSPEC_HIDDEN;
+ extern TEB * CDECL init_threading( int *nb_threads_ptr, struct ldt_copy **ldt_copy, SIZE_T *size,
+                                    BOOL *suspend, unsigned int *cpus, BOOL *wow64,
+-                                   timeout_t *start_time, void *syscall_handler ) DECLSPEC_HIDDEN;
++                                   timeout_t *start_time, void *syscall_handler,
++                                   unsigned int syscall_count ) DECLSPEC_HIDDEN;
+ extern void CDECL DECLSPEC_NORETURN exit_thread( int status ) DECLSPEC_HIDDEN;
+ extern void CDECL DECLSPEC_NORETURN exit_process( int status ) DECLSPEC_HIDDEN;
+ extern NTSTATUS CDECL get_thread_ldt_entry( HANDLE handle, void *data, ULONG len, ULONG *ret_len ) DECLSPEC_HIDDEN;
+@@ -123,6 +124,8 @@ extern timeout_t server_start_time DECLSPEC_HIDDEN;
+ extern sigset_t server_block_set DECLSPEC_HIDDEN;
+ extern SIZE_T signal_stack_size DECLSPEC_HIDDEN;
+ extern SIZE_T signal_stack_mask DECLSPEC_HIDDEN;
++extern unsigned int __wine_nb_syscalls DECLSPEC_HIDDEN;
++extern void *__wine_syscall_dispatcher DECLSPEC_HIDDEN;
+ 
+ extern unsigned int server_call_unlocked( void *req_ptr ) DECLSPEC_HIDDEN;
+ extern void server_enter_uninterrupted_section( RTL_CRITICAL_SECTION *cs, sigset_t *sigset ) DECLSPEC_HIDDEN;
+diff --git a/dlls/ntdll/unixlib.h b/dlls/ntdll/unixlib.h
+index 4f0080db03d9..ae17b78862a3 100644
+--- a/dlls/ntdll/unixlib.h
++++ b/dlls/ntdll/unixlib.h
+@@ -199,7 +199,8 @@ struct unix_funcs
+ 
+     /* thread/process functions */
+     TEB *         (CDECL *init_threading)( int *nb_threads_ptr, struct ldt_copy **ldt_copy, SIZE_T *size,
+-                                           BOOL *suspend, unsigned int *cpus, BOOL *wow64, timeout_t *start_time, void *syscall_handler );
++                                           BOOL *suspend, unsigned int *cpus, BOOL *wow64, timeout_t *start_time,
++                                           void *syscall_handler, unsigned int syscall_count );
+     void          (CDECL *exit_thread)( int status );
+     void          (CDECL *exit_process)( int status );
+     NTSTATUS      (CDECL *get_thread_ldt_entry)( HANDLE handle, void *data, ULONG len, ULONG *ret_len );
 diff --git a/tools/winebuild/spec32.c b/tools/winebuild/spec32.c
-index 9cc4698d0d7..c572fe49923 100644
+index 9cc4698d0d7d..c572fe499230 100644
 --- a/tools/winebuild/spec32.c
 +++ b/tools/winebuild/spec32.c
 @@ -531,7 +531,7 @@ static void output_syscall_thunks_x64( DLLSPEC *spec )

diff --git a/patches/winebuild-Fake_Dlls/0001-kernel32-tests-Add-basic-tests-for-fake-dlls.patch b/patches/winebuild-Fake_Dlls/0001-kernel32-tests-Add-basic-tests-for-fake-dlls.patch
index ef056cfcf..21d69fd59 100644
--- a/patches/winebuild-Fake_Dlls/0001-kernel32-tests-Add-basic-tests-for-fake-dlls.patch
+++ b/patches/winebuild-Fake_Dlls/0001-kernel32-tests-Add-basic-tests-for-fake-dlls.patch
@@ -1,4 +1,4 @@
-From de68d5c0e6bd728788bbec09100ea59802b8ff13 Mon Sep 17 00:00:00 2001
+From 8b88aa45856684e63786425f72886f2ac57b3630 Mon Sep 17 00:00:00 2001
 From: =?UTF-8?q?Michael=20M=C3=BCller?= <michael@fds-team.de>
 Date: Thu, 25 May 2017 07:02:46 +0200
 Subject: [PATCH] kernel32/tests: Add basic tests for fake dlls.
@@ -8,10 +8,10 @@ Subject: [PATCH] kernel32/tests: Add basic tests for fake dlls.
  1 file changed, 91 insertions(+)
 
 diff --git a/dlls/kernel32/tests/loader.c b/dlls/kernel32/tests/loader.c
-index 5474d543248..4e7a15970cb 100644
+index ef8c47c04f1a..efd5a25a432d 100644
 --- a/dlls/kernel32/tests/loader.c
 +++ b/dlls/kernel32/tests/loader.c
-@@ -1535,6 +1535,96 @@ static void test_filenames(void)
+@@ -1572,6 +1572,96 @@ static void test_filenames(void)
      DeleteFileA( long_path );
  }
  
@@ -108,7 +108,7 @@ index 5474d543248..4e7a15970cb 100644
  /* Verify linking style of import descriptors */
  static void test_ImportDescriptors(void)
  {
-@@ -3997,6 +4087,7 @@ START_TEST(loader)
+@@ -4094,6 +4184,7 @@ START_TEST(loader)
          return;
      }
  
diff --git a/patches/winebuild-Fake_Dlls/0002-krnl386.exe16-Do-not-abuse-WOW32Reserved-field-for-1.patch b/patches/winebuild-Fake_Dlls/0002-krnl386.exe16-Do-not-abuse-WOW32Reserved-field-for-1.patch
index 15aaa85df..ae98c2798 100644
--- a/patches/winebuild-Fake_Dlls/0002-krnl386.exe16-Do-not-abuse-WOW32Reserved-field-for-1.patch
+++ b/patches/winebuild-Fake_Dlls/0002-krnl386.exe16-Do-not-abuse-WOW32Reserved-field-for-1.patch
@@ -1,4 +1,4 @@
-From 25d08438aba3dee16c79ce3168a4f76f39816fad Mon Sep 17 00:00:00 2001
+From 7af81866f286e60f601d1c3f9bfe8592a794d21d Mon Sep 17 00:00:00 2001
 From: Sebastian Lackner <sebastian@fds-team.de>
 Date: Tue, 16 May 2017 04:37:52 +0200
 Subject: [PATCH] krnl386.exe16: Do not abuse WOW32Reserved field for 16-bit
@@ -24,7 +24,7 @@ Subject: [PATCH] krnl386.exe16: Do not abuse WOW32Reserved field for 16-bit
  16 files changed, 78 insertions(+), 77 deletions(-)
 
 diff --git a/dlls/dbghelp/cpu_i386.c b/dlls/dbghelp/cpu_i386.c
-index fd808a0d324..7d6723977a2 100644
+index fd808a0d3248..7d6723977a29 100644
 --- a/dlls/dbghelp/cpu_i386.c
 +++ b/dlls/dbghelp/cpu_i386.c
 @@ -213,16 +213,16 @@ static BOOL i386_stack_walk(struct cpu_stack_walk *csw, STACKFRAME64 *frame,
@@ -48,7 +48,7 @@ index fd808a0d324..7d6723977a2 100644
              }
              next_switch = p;
 diff --git a/dlls/krnl386.exe16/kernel.c b/dlls/krnl386.exe16/kernel.c
-index 07a57d0d937..89ea5c042e7 100644
+index 07a57d0d9372..89ea5c042e71 100644
 --- a/dlls/krnl386.exe16/kernel.c
 +++ b/dlls/krnl386.exe16/kernel.c
 @@ -47,8 +47,8 @@ static void thread_attach(void)
@@ -72,7 +72,7 @@ index 07a57d0d937..89ea5c042e7 100644
  }
  
 diff --git a/dlls/krnl386.exe16/kernel16_private.h b/dlls/krnl386.exe16/kernel16_private.h
-index f15934daa0e..9f939a9d5ba 100644
+index f15934daa0e4..9f939a9d5bac 100644
 --- a/dlls/krnl386.exe16/kernel16_private.h
 +++ b/dlls/krnl386.exe16/kernel16_private.h
 @@ -169,7 +169,7 @@ extern THHOOK *pThhook DECLSPEC_HIDDEN;
@@ -119,7 +119,7 @@ index f15934daa0e..9f939a9d5ba 100644
  
  static inline struct kernel_thread_data *kernel_get_thread_data(void)
 diff --git a/dlls/krnl386.exe16/ne_module.c b/dlls/krnl386.exe16/ne_module.c
-index f1e1a14dd67..c951a18f869 100644
+index f1e1a14dd679..c951a18f8699 100644
 --- a/dlls/krnl386.exe16/ne_module.c
 +++ b/dlls/krnl386.exe16/ne_module.c
 @@ -1208,7 +1208,7 @@ DWORD NE_StartTask(void)
@@ -143,7 +143,7 @@ index f1e1a14dd67..c951a18f869 100644
          WOWCallback16Ex( 0, WCB16_REGS, 0, NULL, (DWORD *)&context );
          ExitThread( LOWORD(context.Eax) );
 diff --git a/dlls/krnl386.exe16/ne_segment.c b/dlls/krnl386.exe16/ne_segment.c
-index aa886148029..70eb3360914 100644
+index aa8861480298..70eb33609144 100644
 --- a/dlls/krnl386.exe16/ne_segment.c
 +++ b/dlls/krnl386.exe16/ne_segment.c
 @@ -370,9 +370,9 @@ BOOL NE_LoadSegment( NE_MODULE *pModule, WORD segnum )
@@ -209,7 +209,7 @@ index aa886148029..70eb3360914 100644
          args[7] = HIWORD(dwReason);
          args[6] = LOWORD(dwReason);
 diff --git a/dlls/krnl386.exe16/task.c b/dlls/krnl386.exe16/task.c
-index 39a60cb97a9..21de62c5a01 100644
+index 39a60cb97a94..21de62c5a015 100644
 --- a/dlls/krnl386.exe16/task.c
 +++ b/dlls/krnl386.exe16/task.c
 @@ -624,7 +624,7 @@ void WINAPI InitTask16( CONTEXT *context )
@@ -267,7 +267,7 @@ index 39a60cb97a9..21de62c5a01 100644
      context->Esp   = OFFSETOF(pData->old_ss_sp) - sizeof(DWORD); /*ret addr*/
      pData->old_ss_sp = 0;
 diff --git a/dlls/krnl386.exe16/thunk.c b/dlls/krnl386.exe16/thunk.c
-index e913a08f88c..ecc94371488 100644
+index e913a08f88cc..ecc94371488f 100644
 --- a/dlls/krnl386.exe16/thunk.c
 +++ b/dlls/krnl386.exe16/thunk.c
 @@ -429,7 +429,7 @@ void WINAPI __regs_QT_Thunk( CONTEXT *context )
@@ -413,7 +413,7 @@ index e913a08f88c..ecc94371488 100644
          if (OFFSETOF(frame32->frame16) > lpbuf[2])
          {
 diff --git a/dlls/krnl386.exe16/wowthunk.c b/dlls/krnl386.exe16/wowthunk.c
-index 2dddbf93289..3a4b104a673 100644
+index 2dddbf932898..3a4b104a673f 100644
 --- a/dlls/krnl386.exe16/wowthunk.c
 +++ b/dlls/krnl386.exe16/wowthunk.c
 @@ -127,7 +127,7 @@ static DWORD call16_handler( EXCEPTION_RECORD *record, EXCEPTION_REGISTRATION_RE
@@ -473,7 +473,7 @@ index 2dddbf93289..3a4b104a673 100644
          }
      }
 diff --git a/dlls/ntdll/unix/signal_i386.c b/dlls/ntdll/unix/signal_i386.c
-index 2928f314358..138f56b94eb 100644
+index ac34f86a5883..55f1e2ce4b23 100644
 --- a/dlls/ntdll/unix/signal_i386.c
 +++ b/dlls/ntdll/unix/signal_i386.c
 @@ -645,7 +645,7 @@ static inline void *init_handler( const ucontext_t *sigcontext )
@@ -486,7 +486,7 @@ index 2928f314358..138f56b94eb 100644
      return (void *)(ESP_sig(sigcontext) & ~3);
  }
 diff --git a/dlls/system.drv16/system.c b/dlls/system.drv16/system.c
-index b6fd51c05f0..695ad7b6003 100644
+index b6fd51c05f01..695ad7b60039 100644
 --- a/dlls/system.drv16/system.c
 +++ b/dlls/system.drv16/system.c
 @@ -70,7 +70,7 @@ static void CALLBACK SYSTEM_TimerTick( LPVOID arg, DWORD low, DWORD high )
@@ -499,7 +499,7 @@ index b6fd51c05f0..695ad7b6003 100644
  
              WOWCallback16Ex( 0, WCB16_REGS, 0, NULL, (DWORD *)&context );
 diff --git a/dlls/toolhelp.dll16/toolhelp.c b/dlls/toolhelp.dll16/toolhelp.c
-index 578d1ae7fab..1077f0b0367 100644
+index 578d1ae7faba..1077f0b03672 100644
 --- a/dlls/toolhelp.dll16/toolhelp.c
 +++ b/dlls/toolhelp.dll16/toolhelp.c
 @@ -491,8 +491,8 @@ BOOL16 WINAPI TaskNext16( TASKENTRY *lpte )
@@ -523,7 +523,7 @@ index 578d1ae7fab..1077f0b0367 100644
      WORD user = LoadLibrary16( "USER.EXE" );
      WORD gdi = LoadLibrary16( "GDI.EXE" );
 diff --git a/dlls/user.exe16/message.c b/dlls/user.exe16/message.c
-index e3ca3fd779d..fa9388ceaa1 100644
+index e3ca3fd779d3..fa9388ceaa11 100644
 --- a/dlls/user.exe16/message.c
 +++ b/dlls/user.exe16/message.c
 @@ -240,11 +240,11 @@ static LRESULT call_window_proc16( HWND16 hwnd, UINT16 msg, WPARAM16 wParam, LPA
@@ -595,7 +595,7 @@ index e3ca3fd779d..fa9388ceaa1 100644
  
          stack16->ds = GetWindowLongPtrW( hwnd, GWLP_HINSTANCE );
 diff --git a/dlls/user.exe16/user.c b/dlls/user.exe16/user.c
-index 27b92793836..deec596f766 100644
+index 27b92793836a..deec596f7660 100644
 --- a/dlls/user.exe16/user.c
 +++ b/dlls/user.exe16/user.c
 @@ -1394,7 +1394,7 @@ DWORD WINAPI GetTabbedTextExtent16( HDC16 hdc, LPCSTR lpstr, INT16 count,
@@ -617,7 +617,7 @@ index 27b92793836..deec596f766 100644
      int userPercent, gdiPercent;
  
 diff --git a/dlls/user.exe16/window.c b/dlls/user.exe16/window.c
-index bf86719325b..1f53bdc9540 100644
+index bf86719325b8..1f53bdc95402 100644
 --- a/dlls/user.exe16/window.c
 +++ b/dlls/user.exe16/window.c
 @@ -456,7 +456,7 @@ HWND16 WINAPI GetParent16( HWND16 hwnd )
@@ -630,10 +630,10 @@ index bf86719325b..1f53bdc9540 100644
      /* don't use WIN_Handle32 here, we don't care about the full handle */
      return IsWindow( HWND_32(hwnd) );
 diff --git a/include/winternl.h b/include/winternl.h
-index acbce20c212..68c1ae3fd82 100644
+index 87eb0d32926b..2d9f54b89d8c 100644
 --- a/include/winternl.h
 +++ b/include/winternl.h
-@@ -362,7 +362,7 @@ typedef struct _TEB
+@@ -363,7 +363,7 @@ typedef struct _TEB
      PVOID                        WOW32Reserved;                     /* 0c0/0100 */
      ULONG                        CurrentLocale;                     /* 0c4/0108 */
      ULONG                        FpSoftwareStatusRegister;          /* 0c8/010c */
@@ -643,7 +643,7 @@ index acbce20c212..68c1ae3fd82 100644
      ACTIVATION_CONTEXT_STACK     ActivationContextStack;            /* 1a8/02c8 */
      BYTE                         SpareBytes1[24];                   /* 1bc/02e8 */
 diff --git a/tools/winebuild/relay.c b/tools/winebuild/relay.c
-index 29d0a74c833..01bb97e02b4 100644
+index 29d0a74c833c..01bb97e02b4c 100644
 --- a/tools/winebuild/relay.c
 +++ b/tools/winebuild/relay.c
 @@ -31,7 +31,7 @@
diff --git a/patches/winebuild-Fake_Dlls/0003-winebuild-Generate-syscall-thunks-for-ntdll-exports.patch b/patches/winebuild-Fake_Dlls/0003-winebuild-Generate-syscall-thunks-for-ntdll-exports.patch
index 547e27f8f..a0487f91b 100644
--- a/patches/winebuild-Fake_Dlls/0003-winebuild-Generate-syscall-thunks-for-ntdll-exports.patch
+++ b/patches/winebuild-Fake_Dlls/0003-winebuild-Generate-syscall-thunks-for-ntdll-exports.patch
@@ -1,4 +1,4 @@
-From 0c4d2573b123f2198f74292133b7a6eefa472620 Mon Sep 17 00:00:00 2001
+From d8ff827f7a94aee2bed89c620120af0a148ca81c Mon Sep 17 00:00:00 2001
 From: =?UTF-8?q?Michael=20M=C3=BCller?= <michael@fds-team.de>
 Date: Thu, 11 May 2017 05:32:55 +0200
 Subject: [PATCH] winebuild: Generate syscall thunks for ntdll exports.
@@ -8,7 +8,7 @@ Based on a patch by Erich E. Hoover.
  dlls/ntdll/loader.c            |   3 +
  dlls/ntdll/signal_i386.c       |   4 +-
  dlls/ntdll/tests/exception.c   |   2 +
- dlls/ntdll/thread.c            |   3 +-
+ dlls/ntdll/thread.c            |  10 +++-
  dlls/ntdll/unix/thread.c       |   3 +-
  dlls/ntdll/unix/unix_private.h |   2 +-
  dlls/ntdll/unixlib.h           |   4 +-
@@ -19,13 +19,13 @@ Based on a patch by Erich E. Hoover.
  tools/winebuild/spec16.c       |  22 +------
  tools/winebuild/spec32.c       | 104 +++++++++++++++++++++++++++++++++
  tools/winebuild/utils.c        |  21 +++++++
- 14 files changed, 214 insertions(+), 32 deletions(-)
+ 14 files changed, 221 insertions(+), 32 deletions(-)
 
 diff --git a/dlls/ntdll/loader.c b/dlls/ntdll/loader.c
-index 0c8f05285c4..26c540050dc 100644
+index 2553b0b9d397..cac6aae2f3dd 100644
 --- a/dlls/ntdll/loader.c
 +++ b/dlls/ntdll/loader.c
-@@ -3810,6 +3810,7 @@ PIMAGE_NT_HEADERS WINAPI RtlImageNtHeader(HMODULE hModule)
+@@ -4021,6 +4021,7 @@ PIMAGE_NT_HEADERS WINAPI RtlImageNtHeader(HMODULE hModule)
      return ret;
  }
  
@@ -33,7 +33,7 @@ index 0c8f05285c4..26c540050dc 100644
  
  /******************************************************************
   *		LdrInitializeThunk (NTDLL.@)
-@@ -3826,6 +3827,8 @@ void WINAPI LdrInitializeThunk( CONTEXT *context, void **entry, ULONG_PTR unknow
+@@ -4038,6 +4039,8 @@ void WINAPI LdrInitializeThunk( CONTEXT *context, void **entry, ULONG_PTR unknow
      WINE_MODREF *wm;
      LPCWSTR load_path = NtCurrentTeb()->Peb->ProcessParameters->DllPath.Buffer;
  
@@ -43,7 +43,7 @@ index 0c8f05285c4..26c540050dc 100644
  
      RtlEnterCriticalSection( &loader_section );
 diff --git a/dlls/ntdll/signal_i386.c b/dlls/ntdll/signal_i386.c
-index 21cc1b3ead4..18be5693a7d 100644
+index 21cc1b3ead40..18be5693a7d2 100644
 --- a/dlls/ntdll/signal_i386.c
 +++ b/dlls/ntdll/signal_i386.c
 @@ -346,6 +346,8 @@ __ASM_STDCALL_FUNC( RtlCaptureContext, 4,
@@ -65,7 +65,7 @@ index 21cc1b3ead4..18be5693a7d 100644
      }
      return unix_funcs->NtGetContextThread( handle, context );
 diff --git a/dlls/ntdll/tests/exception.c b/dlls/ntdll/tests/exception.c
-index a5e6faa461a..51938bf84cc 100644
+index 1389a542cdee..54796476e25b 100644
 --- a/dlls/ntdll/tests/exception.c
 +++ b/dlls/ntdll/tests/exception.c
 @@ -1643,6 +1643,8 @@ static void test_thread_context(void)
@@ -78,18 +78,25 @@ index a5e6faa461a..51938bf84cc 100644
      ok( context.SegCs == LOWORD(expect.SegCs), "wrong SegCs %08x/%08x\n", context.SegCs, expect.SegCs );
      ok( context.SegDs == LOWORD(expect.SegDs), "wrong SegDs %08x/%08x\n", context.SegDs, expect.SegDs );
 diff --git a/dlls/ntdll/thread.c b/dlls/ntdll/thread.c
-index 5a6809638ae..fa10cdf1062 100644
+index ff5fe9d6226a..e93498b27ea0 100644
 --- a/dlls/ntdll/thread.c
 +++ b/dlls/ntdll/thread.c
-@@ -170,6 +170,7 @@ int __cdecl __wine_dbg_output( const char *str )
+@@ -220,6 +220,14 @@ int __cdecl __wine_dbg_output( const char *str )
      return unix_funcs->dbg_output( str );
  }
  
++#if defined(__i386__) || defined(__x86_64__)
 +extern void DECLSPEC_NORETURN __wine_syscall_dispatcher( void );
++#else
++void __wine_syscall_dispatcher( void )
++{
++    FIXME("Syscall dispatcher is not available for this architecture.\n");
++}
++#endif
  
  /***********************************************************************
   *           thread_init
-@@ -181,7 +182,7 @@ int __cdecl __wine_dbg_output( const char *str )
+@@ -231,7 +239,7 @@ int __cdecl __wine_dbg_output( const char *str )
  TEB *thread_init( SIZE_T *info_size, BOOL *suspend )
  {
      TEB *teb = unix_funcs->init_threading( &nb_threads, &__wine_ldt_copy, info_size, suspend, &server_cpus,
@@ -99,7 +106,7 @@ index 5a6809638ae..fa10cdf1062 100644
      peb = teb->Peb;
      peb->FastPebLock        = &peb_lock;
 diff --git a/dlls/ntdll/unix/thread.c b/dlls/ntdll/unix/thread.c
-index 97b191e1a5b..2dbaa43e731 100644
+index 97b191e1a5b3..2dbaa43e731a 100644
 --- a/dlls/ntdll/unix/thread.c
 +++ b/dlls/ntdll/unix/thread.c
 @@ -85,7 +85,7 @@ static void pthread_exit_wrapper( int status )
@@ -120,10 +127,10 @@ index 97b191e1a5b..2dbaa43e731 100644
      thread_data->request_fd = -1;
      thread_data->reply_fd   = -1;
 diff --git a/dlls/ntdll/unix/unix_private.h b/dlls/ntdll/unix/unix_private.h
-index 19dd216fc35..a1c48a52606 100644
+index 92a58417827b..33a551e947c2 100644
 --- a/dlls/ntdll/unix/unix_private.h
 +++ b/dlls/ntdll/unix/unix_private.h
-@@ -107,7 +107,7 @@ extern void CDECL server_release_fd( HANDLE handle, int unix_fd ) DECLSPEC_HIDDE
+@@ -108,7 +108,7 @@ extern void CDECL server_release_fd( HANDLE handle, int unix_fd ) DECLSPEC_HIDDE
  extern void CDECL server_init_process_done( void *relay ) DECLSPEC_HIDDEN;
  extern TEB * CDECL init_threading( int *nb_threads_ptr, struct ldt_copy **ldt_copy, SIZE_T *size,
                                     BOOL *suspend, unsigned int *cpus, BOOL *wow64,
@@ -133,7 +140,7 @@ index 19dd216fc35..a1c48a52606 100644
  extern void CDECL DECLSPEC_NORETURN exit_process( int status ) DECLSPEC_HIDDEN;
  extern NTSTATUS CDECL get_thread_ldt_entry( HANDLE handle, void *data, ULONG len, ULONG *ret_len ) DECLSPEC_HIDDEN;
 diff --git a/dlls/ntdll/unixlib.h b/dlls/ntdll/unixlib.h
-index 4c580c49d13..4f0080db03d 100644
+index 4c580c49d139..4f0080db03d9 100644
 --- a/dlls/ntdll/unixlib.h
 +++ b/dlls/ntdll/unixlib.h
 @@ -28,7 +28,7 @@ struct ldt_copy;
@@ -155,10 +162,10 @@ index 4c580c49d13..4f0080db03d 100644
      void          (CDECL *exit_process)( int status );
      NTSTATUS      (CDECL *get_thread_ldt_entry)( HANDLE handle, void *data, ULONG len, ULONG *ret_len );
 diff --git a/include/winternl.h b/include/winternl.h
-index 68c1ae3fd82..f2da9157aab 100644
+index 2d9f54b89d8c..0c15a0ee6c34 100644
 --- a/include/winternl.h
 +++ b/include/winternl.h
-@@ -359,7 +359,7 @@ typedef struct _TEB
+@@ -360,7 +360,7 @@ typedef struct _TEB
      PVOID                        CsrClientThread;                   /* 03c/0070 */
      PVOID                        Win32ThreadInfo;                   /* 040/0078 */
      ULONG                        Win32ClientInfo[31];               /* 044/0080 used for user32 private data in Wine */
@@ -168,7 +175,7 @@ index 68c1ae3fd82..f2da9157aab 100644
      ULONG                        FpSoftwareStatusRegister;          /* 0c8/010c */
      PVOID                        SystemReserved1[54];               /* 0cc/0110 used for krnl386.exe16 private data in Wine */
 diff --git a/tools/winebuild/build.h b/tools/winebuild/build.h
-index c162888a035..55d5b0b9dc2 100644
+index c162888a0356..55d5b0b9dc28 100644
 --- a/tools/winebuild/build.h
 +++ b/tools/winebuild/build.h
 @@ -105,6 +105,7 @@ typedef struct
@@ -216,7 +223,7 @@ index c162888a035..55d5b0b9dc2 100644
  
  extern int byte_swapped;
 diff --git a/tools/winebuild/import.c b/tools/winebuild/import.c
-index 04ab433dd65..0c6bafed8e5 100644
+index 04ab433dd65a..0c6bafed8e54 100644
 --- a/tools/winebuild/import.c
 +++ b/tools/winebuild/import.c
 @@ -531,6 +531,7 @@ static void check_undefined_forwards( DLLSPEC *spec )
@@ -256,7 +263,7 @@ index 04ab433dd65..0c6bafed8e5 100644
              }
          }
 diff --git a/tools/winebuild/parser.c b/tools/winebuild/parser.c
-index 0f2b9c1e10a..74216f8bb6e 100644
+index 0f2b9c1e10ad..74216f8bb6e7 100644
 --- a/tools/winebuild/parser.c
 +++ b/tools/winebuild/parser.c
 @@ -543,6 +543,24 @@ static const char *parse_spec_flags( DLLSPEC *spec, ORDDEF *odp )
@@ -347,7 +354,7 @@ index 0f2b9c1e10a..74216f8bb6e 100644
  }
  
 diff --git a/tools/winebuild/spec16.c b/tools/winebuild/spec16.c
-index a52c03aaa6a..15ef9a3f893 100644
+index a52c03aaa6a7..15ef9a3f8930 100644
 --- a/tools/winebuild/spec16.c
 +++ b/tools/winebuild/spec16.c
 @@ -495,27 +495,6 @@ static int relay_type_compare( const void *e1, const void *e2 )
@@ -387,7 +394,7 @@ index a52c03aaa6a..15ef9a3f893 100644
          entry_point->u.func.nb_args = 0;
          assert( !spec->ordinals[0] );
 diff --git a/tools/winebuild/spec32.c b/tools/winebuild/spec32.c
-index b1e20e0484d..22dd399cb2b 100644
+index b1e20e0484dc..22dd399cb2b4 100644
 --- a/tools/winebuild/spec32.c
 +++ b/tools/winebuild/spec32.c
 @@ -374,6 +374,109 @@ static void output_relay_debug( DLLSPEC *spec )
@@ -509,7 +516,7 @@ index b1e20e0484d..22dd399cb2b 100644
      output_exports( spec );
      output_imports( spec );
 diff --git a/tools/winebuild/utils.c b/tools/winebuild/utils.c
-index 2a1fc960926..07a579004ad 100644
+index 2a1fc960926b..07a579004adc 100644
 --- a/tools/winebuild/utils.c
 +++ b/tools/winebuild/utils.c
 @@ -860,6 +860,7 @@ void free_dll_spec( DLLSPEC *spec )
diff --git a/patches/winebuild-Fake_Dlls/0004-winebuild-Use-multipass-label-system-to-generate-fak.patch b/patches/winebuild-Fake_Dlls/0004-winebuild-Use-multipass-label-system-to-generate-fak.patch
index 6c3984f8b..d4813799e 100644
--- a/patches/winebuild-Fake_Dlls/0004-winebuild-Use-multipass-label-system-to-generate-fak.patch
+++ b/patches/winebuild-Fake_Dlls/0004-winebuild-Use-multipass-label-system-to-generate-fak.patch
@@ -1,4 +1,4 @@
-From 15182deeb13e26abdb3067a77353354726ac82aa Mon Sep 17 00:00:00 2001
+From 344eb39bdfee74d4d826fa2f61a95736f0ee9823 Mon Sep 17 00:00:00 2001
 From: =?UTF-8?q?Michael=20M=C3=BCller?= <michael@fds-team.de>
 Date: Mon, 15 May 2017 02:05:49 +0200
 Subject: [PATCH] winebuild: Use multipass label system to generate fake dlls.
@@ -11,7 +11,7 @@ Subject: [PATCH] winebuild: Use multipass label system to generate fake dlls.
  4 files changed, 181 insertions(+), 63 deletions(-)
 
 diff --git a/tools/winebuild/build.h b/tools/winebuild/build.h
-index 6ee847f908c..210324406a9 100644
+index 55d5b0b9dc28..8930df408d3b 100644
 --- a/tools/winebuild/build.h
 +++ b/tools/winebuild/build.h
 @@ -343,6 +343,7 @@ extern size_t input_buffer_pos;
@@ -35,7 +35,7 @@ index 6ee847f908c..210324406a9 100644
  /* global variables */
  
 diff --git a/tools/winebuild/res32.c b/tools/winebuild/res32.c
-index bd55bb2fa5c..d9329019f8a 100644
+index bd55bb2fa5c4..d9329019f8a3 100644
 --- a/tools/winebuild/res32.c
 +++ b/tools/winebuild/res32.c
 @@ -539,7 +539,6 @@ void output_bin_resources( DLLSPEC *spec, unsigned int start_rva )
@@ -47,7 +47,7 @@ index bd55bb2fa5c..d9329019f8a 100644
      /* output the resource directories */
  
 diff --git a/tools/winebuild/spec32.c b/tools/winebuild/spec32.c
-index 22dd399cb2b..c38f1fe663c 100644
+index 22dd399cb2b4..c38f1fe663c7 100644
 --- a/tools/winebuild/spec32.c
 +++ b/tools/winebuild/spec32.c
 @@ -844,11 +844,11 @@ void output_spec32_file( DLLSPEC *spec )
@@ -279,7 +279,7 @@ index 22dd399cb2b..c38f1fe663c 100644
  }
  
 diff --git a/tools/winebuild/utils.c b/tools/winebuild/utils.c
-index 7dc61a708db..64e1fa51455 100644
+index 07a579004adc..80dec6db29ea 100644
 --- a/tools/winebuild/utils.c
 +++ b/tools/winebuild/utils.c
 @@ -34,6 +34,7 @@
diff --git a/patches/winebuild-Fake_Dlls/0005-winebuild-Add-stub-functions-in-fake-dlls.patch b/patches/winebuild-Fake_Dlls/0005-winebuild-Add-stub-functions-in-fake-dlls.patch
index f96d51aee..4ac05a314 100644
--- a/patches/winebuild-Fake_Dlls/0005-winebuild-Add-stub-functions-in-fake-dlls.patch
+++ b/patches/winebuild-Fake_Dlls/0005-winebuild-Add-stub-functions-in-fake-dlls.patch
@@ -1,4 +1,4 @@
-From 167ad04157dd746ee9395afa9505fe00cc866f9b Mon Sep 17 00:00:00 2001
+From e5fc6ee60be5dd3b80af96dcbd81adb742ba7a5d Mon Sep 17 00:00:00 2001
 From: =?UTF-8?q?Michael=20M=C3=BCller?= <michael@fds-team.de>
 Date: Mon, 15 May 2017 16:27:56 +0200
 Subject: [PATCH] winebuild: Add stub functions in fake dlls.
@@ -14,10 +14,10 @@ Subject: [PATCH] winebuild: Add stub functions in fake dlls.
  7 files changed, 251 insertions(+), 15 deletions(-)
 
 diff --git a/dlls/kernel32/tests/loader.c b/dlls/kernel32/tests/loader.c
-index 926fa913866..902907329c0 100644
+index efd5a25a432d..182b61b731a2 100644
 --- a/dlls/kernel32/tests/loader.c
 +++ b/dlls/kernel32/tests/loader.c
-@@ -1596,9 +1596,7 @@ static void test_FakeDLL(void)
+@@ -1597,9 +1597,7 @@ static void test_FakeDLL(void)
      ok(ptr != NULL, "MapViewOfFile failed with error %u\n", GetLastError());
  
      dir = RtlImageDirectoryEntryToData(ptr, TRUE, IMAGE_DIRECTORY_ENTRY_EXPORT, &size);
@@ -27,7 +27,7 @@ index 926fa913866..902907329c0 100644
  
      names    = RVAToAddr(dir->AddressOfNames, ptr);
      ordinals = RVAToAddr(dir->AddressOfNameOrdinals, ptr);
-@@ -1627,17 +1625,20 @@ todo_wine
+@@ -1628,17 +1626,20 @@ todo_wine
          /* check position in memory */
          dll_rva = (DWORD_PTR)dll_func - (DWORD_PTR)module;
          map_rva = funcs[ordinals[i]];
@@ -48,7 +48,7 @@ index 926fa913866..902907329c0 100644
          ok(!memcmp(map_func, dll_func, 0x20), "%s: Function content does not match!\n", func_name);
  
          if (!strcmp(func_name, "NtSetEvent"))
-@@ -1651,10 +1652,11 @@ todo_wine
+@@ -1652,10 +1653,11 @@ todo_wine
          ok(event != NULL, "CreateEvent failed with error %u\n", GetLastError());
          pNtSetEvent(event, 0);
          ok(WaitForSingleObject(event, 0) == WAIT_OBJECT_0, "Event was not signaled\n");
@@ -62,10 +62,10 @@ index 926fa913866..902907329c0 100644
      CloseHandle(map);
      CloseHandle(file);
 diff --git a/dlls/ntdll/loader.c b/dlls/ntdll/loader.c
-index 26c540050dc..09d3870c31a 100644
+index cac6aae2f3dd..51d989f30b45 100644
 --- a/dlls/ntdll/loader.c
 +++ b/dlls/ntdll/loader.c
-@@ -3811,6 +3811,7 @@ PIMAGE_NT_HEADERS WINAPI RtlImageNtHeader(HMODULE hModule)
+@@ -4022,6 +4022,7 @@ PIMAGE_NT_HEADERS WINAPI RtlImageNtHeader(HMODULE hModule)
  }
  
  extern void DECLSPEC_NORETURN __wine_syscall_dispatcher( void );
@@ -73,7 +73,7 @@ index 26c540050dc..09d3870c31a 100644
  
  /******************************************************************
   *		LdrInitializeThunk (NTDLL.@)
-@@ -3828,6 +3829,7 @@ void WINAPI LdrInitializeThunk( CONTEXT *context, void **entry, ULONG_PTR unknow
+@@ -4040,6 +4041,7 @@ void WINAPI LdrInitializeThunk( CONTEXT *context, void **entry, ULONG_PTR unknow
      LPCWSTR load_path = NtCurrentTeb()->Peb->ProcessParameters->DllPath.Buffer;
  
      NtCurrentTeb()->WOW32Reserved = __wine_syscall_dispatcher;
@@ -82,12 +82,12 @@ index 26c540050dc..09d3870c31a 100644
      if (process_detaching) return;
  
 diff --git a/dlls/ntdll/thread.c b/dlls/ntdll/thread.c
-index fa10cdf1062..4840f527e59 100644
+index e93498b27ea0..a14e3a12ae0c 100644
 --- a/dlls/ntdll/thread.c
 +++ b/dlls/ntdll/thread.c
-@@ -172,6 +172,39 @@ int __cdecl __wine_dbg_output( const char *str )
- 
- extern void DECLSPEC_NORETURN __wine_syscall_dispatcher( void );
+@@ -229,6 +229,39 @@ void __wine_syscall_dispatcher( void )
+ }
+ #endif
  
 +void *WINAPI __wine_fakedll_dispatcher( const char *module, ULONG ord )
 +{
@@ -125,7 +125,7 @@ index fa10cdf1062..4840f527e59 100644
  /***********************************************************************
   *           thread_init
   *
-@@ -183,6 +216,7 @@ TEB *thread_init( SIZE_T *info_size, BOOL *suspend )
+@@ -240,6 +273,7 @@ TEB *thread_init( SIZE_T *info_size, BOOL *suspend )
  {
      TEB *teb = unix_funcs->init_threading( &nb_threads, &__wine_ldt_copy, info_size, suspend, &server_cpus,
                                             &is_wow64, &server_start_time, __wine_syscall_dispatcher );
@@ -134,10 +134,10 @@ index fa10cdf1062..4840f527e59 100644
      peb = teb->Peb;
      peb->FastPebLock        = &peb_lock;
 diff --git a/include/winternl.h b/include/winternl.h
-index f2da9157aab..ce8021af503 100644
+index 0c15a0ee6c34..6da672e979e5 100644
 --- a/include/winternl.h
 +++ b/include/winternl.h
-@@ -398,7 +398,7 @@ typedef struct _TEB
+@@ -399,7 +399,7 @@ typedef struct _TEB
      PVOID                        Instrumentation[16];               /* f2c/16b8 */
      PVOID                        WinSockData;                       /* f6c/1738 */
      ULONG                        GdiBatchCount;                     /* f70/1740 */
@@ -147,7 +147,7 @@ index f2da9157aab..ce8021af503 100644
      PVOID                        ReservedForPerf;                   /* f7c/1750 */
      PVOID                        ReservedForOle;                    /* f80/1758 */
 diff --git a/tools/winebuild/build.h b/tools/winebuild/build.h
-index 8930df408d3..44113bad28a 100644
+index 8930df408d3b..44113bad28af 100644
 --- a/tools/winebuild/build.h
 +++ b/tools/winebuild/build.h
 @@ -358,6 +358,7 @@ extern void put_word( unsigned short val );
@@ -159,7 +159,7 @@ index 8930df408d3..44113bad28a 100644
  extern void align_output_rva( unsigned int file_align, unsigned int rva_align );
  extern size_t label_pos( const char *name );
 diff --git a/tools/winebuild/spec32.c b/tools/winebuild/spec32.c
-index c38f1fe663c..bf82ca497c0 100644
+index c38f1fe663c7..bf82ca497c0d 100644
 --- a/tools/winebuild/spec32.c
 +++ b/tools/winebuild/spec32.c
 @@ -843,6 +843,163 @@ void output_spec32_file( DLLSPEC *spec )
@@ -415,7 +415,7 @@ index c38f1fe663c..bf82ca497c0 100644
      /* .reloc contents */
      align_output_rva( file_align, section_align );
 diff --git a/tools/winebuild/utils.c b/tools/winebuild/utils.c
-index 80dec6db29e..d394a1382c6 100644
+index 80dec6db29ea..d394a1382c68 100644
 --- a/tools/winebuild/utils.c
 +++ b/tools/winebuild/utils.c
 @@ -549,7 +549,7 @@ size_t output_buffer_size;
diff --git a/patches/winebuild-Fake_Dlls/0006-winebuild-Add-syscall-thunks-in-fake-dlls.patch b/patches/winebuild-Fake_Dlls/0006-winebuild-Add-syscall-thunks-in-fake-dlls.patch
index 5ae2b3deb..13f46d6b0 100644
--- a/patches/winebuild-Fake_Dlls/0006-winebuild-Add-syscall-thunks-in-fake-dlls.patch
+++ b/patches/winebuild-Fake_Dlls/0006-winebuild-Add-syscall-thunks-in-fake-dlls.patch
@@ -1,4 +1,4 @@
-From 84a9f7b8192d7735108da2d7e81cf63faef97c13 Mon Sep 17 00:00:00 2001
+From fd72d405abba827ab5e2603551d48200aedad3ce Mon Sep 17 00:00:00 2001
 From: =?UTF-8?q?Michael=20M=C3=BCller?= <michael@fds-team.de>
 Date: Mon, 15 May 2017 17:56:48 +0200
 Subject: [PATCH] winebuild: Add syscall thunks in fake dlls.
@@ -9,10 +9,10 @@ Subject: [PATCH] winebuild: Add syscall thunks in fake dlls.
  2 files changed, 25 insertions(+), 3 deletions(-)
 
 diff --git a/dlls/kernel32/tests/loader.c b/dlls/kernel32/tests/loader.c
-index ec173c94a8e..a3bed8b310b 100644
+index 182b61b731a2..98369c7d508c 100644
 --- a/dlls/kernel32/tests/loader.c
 +++ b/dlls/kernel32/tests/loader.c
-@@ -1602,7 +1602,6 @@ static void test_FakeDLL(void)
+@@ -1639,7 +1639,6 @@ static void test_FakeDLL(void)
  
          /* check function content */
          map_func = RVAToAddr(map_rva, ptr);
@@ -21,7 +21,7 @@ index ec173c94a8e..a3bed8b310b 100644
  
          if (!strcmp(func_name, "NtSetEvent"))
 diff --git a/tools/winebuild/spec32.c b/tools/winebuild/spec32.c
-index bf82ca497c0..6968e41260f 100644
+index bf82ca497c0d..6968e41260f1 100644
 --- a/tools/winebuild/spec32.c
 +++ b/tools/winebuild/spec32.c
 @@ -860,13 +860,36 @@ static void create_stub_exports_text( DLLSPEC *spec )
diff --git a/patches/winebuild-Fake_Dlls/0007-winebuild-Fix-size-of-relocation-information-in-fake.patch b/patches/winebuild-Fake_Dlls/0007-winebuild-Fix-size-of-relocation-information-in-fake.patch
index 92a7161de..3b3745ed6 100644
--- a/patches/winebuild-Fake_Dlls/0007-winebuild-Fix-size-of-relocation-information-in-fake.patch
+++ b/patches/winebuild-Fake_Dlls/0007-winebuild-Fix-size-of-relocation-information-in-fake.patch
@@ -1,4 +1,4 @@
-From d77c31b1567bfbde1ce4ceb526ad596d0be3e788 Mon Sep 17 00:00:00 2001
+From f92fc0572be02ce2eee2a9cbf60724372678a5af Mon Sep 17 00:00:00 2001
 From: =?UTF-8?q?Michael=20M=C3=BCller?= <michael@fds-team.de>
 Date: Thu, 25 May 2017 03:22:25 +0200
 Subject: [PATCH] winebuild: Fix size of relocation information in fake dlls.
@@ -8,7 +8,7 @@ Subject: [PATCH] winebuild: Fix size of relocation information in fake dlls.
  1 file changed, 2 insertions(+), 2 deletions(-)
 
 diff --git a/tools/winebuild/spec32.c b/tools/winebuild/spec32.c
-index 6968e41260f..f95b45b9a0d 100644
+index 6968e41260f1..f95b45b9a0d5 100644
 --- a/tools/winebuild/spec32.c
 +++ b/tools/winebuild/spec32.c
 @@ -1238,8 +1238,8 @@ static void output_fake_module_pass( DLLSPEC *spec )
diff --git a/patches/winebuild-Fake_Dlls/0008-winebuild-Try-to-make-sure-RVA-matches-between-fake-.patch b/patches/winebuild-Fake_Dlls/0008-winebuild-Try-to-make-sure-RVA-matches-between-fake-.patch
index c4f1fb004..2cb4b7cf1 100644
--- a/patches/winebuild-Fake_Dlls/0008-winebuild-Try-to-make-sure-RVA-matches-between-fake-.patch
+++ b/patches/winebuild-Fake_Dlls/0008-winebuild-Try-to-make-sure-RVA-matches-between-fake-.patch
@@ -1,4 +1,4 @@
-From afa59bbabca36f306e9db4c1b080a250c4a919ea Mon Sep 17 00:00:00 2001
+From 59efee63a7442dfee4d9e76b11f651a11a4b523e Mon Sep 17 00:00:00 2001
 From: =?UTF-8?q?Michael=20M=C3=BCller?= <michael@fds-team.de>
 Date: Thu, 25 May 2017 21:46:27 +0200
 Subject: [PATCH] winebuild: Try to make sure RVA matches between fake and
@@ -11,10 +11,10 @@ Subject: [PATCH] winebuild: Try to make sure RVA matches between fake and
  3 files changed, 26 insertions(+), 5 deletions(-)
 
 diff --git a/dlls/kernel32/tests/loader.c b/dlls/kernel32/tests/loader.c
-index a3bed8b310b..8b5a345b086 100644
+index 98369c7d508c..77e73b3ca37b 100644
 --- a/dlls/kernel32/tests/loader.c
 +++ b/dlls/kernel32/tests/loader.c
-@@ -1589,7 +1589,6 @@ static void test_FakeDLL(void)
+@@ -1626,7 +1626,6 @@ static void test_FakeDLL(void)
          /* check position in memory */
          dll_rva = (DWORD_PTR)dll_func - (DWORD_PTR)module;
          map_rva = funcs[ordinals[i]];
@@ -23,7 +23,7 @@ index a3bed8b310b..8b5a345b086 100644
             func_name, dll_rva, map_rva);
  
 diff --git a/libs/wine/loader.c b/libs/wine/loader.c
-index c3b59d90224..b6847ca77b3 100644
+index c3b59d902243..b6847ca77b31 100644
 --- a/libs/wine/loader.c
 +++ b/libs/wine/loader.c
 @@ -335,8 +335,12 @@ static void *map_dll( const IMAGE_NT_HEADERS *nt_descr )
@@ -54,7 +54,7 @@ index c3b59d90224..b6847ca77b3 100644
  
      memcpy( sec->Name, ".text", sizeof(".text") );
 diff --git a/tools/winebuild/spec32.c b/tools/winebuild/spec32.c
-index f95b45b9a0d..07d6eed05fc 100644
+index f95b45b9a0d5..07d6eed05fcc 100644
 --- a/tools/winebuild/spec32.c
 +++ b/tools/winebuild/spec32.c
 @@ -381,14 +381,25 @@ static void output_relay_debug( DLLSPEC *spec )
diff --git a/patches/winebuild-Fake_Dlls/0009-libs-wine-Use-same-file-alignment-for-fake-and-built.patch b/patches/winebuild-Fake_Dlls/0009-libs-wine-Use-same-file-alignment-for-fake-and-built.patch
index e0ae33a59..9113beb5f 100644
--- a/patches/winebuild-Fake_Dlls/0009-libs-wine-Use-same-file-alignment-for-fake-and-built.patch
+++ b/patches/winebuild-Fake_Dlls/0009-libs-wine-Use-same-file-alignment-for-fake-and-built.patch
@@ -1,4 +1,4 @@
-From 29478273c4db90d209ac5afbdc1dd80add3d2c7e Mon Sep 17 00:00:00 2001
+From 370eccb19c65a8b02abfa31a76651ae533dda22f Mon Sep 17 00:00:00 2001
 From: =?UTF-8?q?Michael=20M=C3=BCller?= <michael@fds-team.de>
 Date: Thu, 25 May 2017 21:56:06 +0200
 Subject: [PATCH] libs/wine: Use same file alignment for fake and builtin DLLs.
@@ -9,10 +9,10 @@ Subject: [PATCH] libs/wine: Use same file alignment for fake and builtin DLLs.
  2 files changed, 1 insertion(+), 2 deletions(-)
 
 diff --git a/dlls/kernel32/tests/loader.c b/dlls/kernel32/tests/loader.c
-index 8b5a345b086..5373dc4efe1 100644
+index 77e73b3ca37b..1f525194ce73 100644
 --- a/dlls/kernel32/tests/loader.c
 +++ b/dlls/kernel32/tests/loader.c
-@@ -1595,7 +1595,6 @@ static void test_FakeDLL(void)
+@@ -1632,7 +1632,6 @@ static void test_FakeDLL(void)
          /* check position in file */
          map_offset = (DWORD_PTR)RtlImageRvaToVa(RtlImageNtHeader(ptr),    ptr,    map_rva, NULL) - (DWORD_PTR)ptr;
          dll_offset = (DWORD_PTR)RtlImageRvaToVa(RtlImageNtHeader(module), module, dll_rva, NULL) - (DWORD_PTR)module;
@@ -21,7 +21,7 @@ index 8b5a345b086..5373dc4efe1 100644
             func_name, map_offset, dll_offset);
  
 diff --git a/libs/wine/loader.c b/libs/wine/loader.c
-index b6847ca77b3..4597a6cb324 100644
+index b6847ca77b31..4597a6cb3243 100644
 --- a/libs/wine/loader.c
 +++ b/libs/wine/loader.c
 @@ -398,7 +398,7 @@ static void *map_dll( const IMAGE_NT_HEADERS *nt_descr )
diff --git a/patches/winebuild-Fake_Dlls/0010-tools-winebuild-Add-syscall-thunks-for-64-bit.patch b/patches/winebuild-Fake_Dlls/0010-tools-winebuild-Add-syscall-thunks-for-64-bit.patch
index 6024e5a2f..e40a80148 100644
--- a/patches/winebuild-Fake_Dlls/0010-tools-winebuild-Add-syscall-thunks-for-64-bit.patch
+++ b/patches/winebuild-Fake_Dlls/0010-tools-winebuild-Add-syscall-thunks-for-64-bit.patch
@@ -1,4 +1,4 @@
-From a5b4feebd008daab008f72567fe0001da619030e Mon Sep 17 00:00:00 2001
+From 6f1973aa2aee35139ae041e59d37a45ff22dc5bf Mon Sep 17 00:00:00 2001
 From: =?UTF-8?q?Michael=20M=C3=BCller?= <michael@fds-team.de>
 Date: Thu, 7 Sep 2017 00:38:09 +0200
 Subject: [PATCH] tools/winebuild: Add syscall thunks for 64 bit.
@@ -7,18 +7,18 @@ Subject: [PATCH] tools/winebuild: Add syscall thunks for 64 bit.
  dlls/kernel32/tests/loader.c   |   7 +-
  dlls/ntdll/unix/thread.c       |   2 +-
  dlls/ntdll/unix/unix_private.h |   2 +-
- dlls/ntdll/unix/virtual.c      |  12 +-
+ dlls/ntdll/unix/virtual.c      |  11 +-
  libs/wine/loader.c             |   4 +
  server/mapping.c               |   6 +-
  tools/winebuild/parser.c       |   2 +-
  tools/winebuild/spec32.c       | 285 ++++++++++++++++++++++++++++++++-
- 8 files changed, 306 insertions(+), 14 deletions(-)
+ 8 files changed, 305 insertions(+), 14 deletions(-)
 
 diff --git a/dlls/kernel32/tests/loader.c b/dlls/kernel32/tests/loader.c
-index 95939ba6bde..ae5462f6e55 100644
+index 1f525194ce73..21af7b4ce7a4 100644
 --- a/dlls/kernel32/tests/loader.c
 +++ b/dlls/kernel32/tests/loader.c
-@@ -1573,7 +1573,7 @@ static void test_filenames(void)
+@@ -1574,7 +1574,7 @@ static void test_filenames(void)
  
  static void test_FakeDLL(void)
  {
@@ -27,7 +27,7 @@ index 95939ba6bde..ae5462f6e55 100644
      NTSTATUS (WINAPI *pNtSetEvent)(HANDLE, ULONG *) = NULL;
      IMAGE_EXPORT_DIRECTORY *dir;
      HMODULE module = GetModuleHandleA("ntdll.dll");
-@@ -1615,8 +1615,13 @@ static void test_FakeDLL(void)
+@@ -1616,8 +1616,13 @@ static void test_FakeDLL(void)
  
          dll_func = (BYTE *)GetProcAddress(module, func_name);
          ok(dll_func != NULL, "%s: GetProcAddress returned NULL\n", func_name);
@@ -42,7 +42,7 @@ index 95939ba6bde..ae5462f6e55 100644
              todo_wine ok(0, "%s: Export is a stub-function, skipping\n", func_name);
              continue;
 diff --git a/dlls/ntdll/unix/thread.c b/dlls/ntdll/unix/thread.c
-index 2dbaa43e731..e1da90222d3 100644
+index 2dbaa43e731a..e1da90222d38 100644
 --- a/dlls/ntdll/unix/thread.c
 +++ b/dlls/ntdll/unix/thread.c
 @@ -110,7 +110,7 @@ TEB * CDECL init_threading( int *nb_threads_ptr, struct ldt_copy **ldt_copy, SIZ
@@ -55,10 +55,10 @@ index 2dbaa43e731..e1da90222d3 100644
  
      if (size) *size = info_size;
 diff --git a/dlls/ntdll/unix/unix_private.h b/dlls/ntdll/unix/unix_private.h
-index a1c48a52606..9c9e5b80b0c 100644
+index 33a551e947c2..d06f366d3c6d 100644
 --- a/dlls/ntdll/unix/unix_private.h
 +++ b/dlls/ntdll/unix/unix_private.h
-@@ -152,7 +152,7 @@ extern void virtual_init(void) DECLSPEC_HIDDEN;
+@@ -153,7 +153,7 @@ extern void virtual_init(void) DECLSPEC_HIDDEN;
  extern TEB *virtual_alloc_first_teb(void) DECLSPEC_HIDDEN;
  extern NTSTATUS virtual_alloc_teb( TEB **ret_teb ) DECLSPEC_HIDDEN;
  extern void virtual_free_teb( TEB *teb ) DECLSPEC_HIDDEN;
@@ -68,10 +68,10 @@ index a1c48a52606..9c9e5b80b0c 100644
  extern BOOL virtual_is_valid_code_address( const void *addr, SIZE_T size ) DECLSPEC_HIDDEN;
  extern int virtual_handle_stack_fault( void *addr ) DECLSPEC_HIDDEN;
 diff --git a/dlls/ntdll/unix/virtual.c b/dlls/ntdll/unix/virtual.c
-index 660323d4dcc..a5e5cb8422d 100644
+index 9fb2ecd38ca3..ad11485d1cea 100644
 --- a/dlls/ntdll/unix/virtual.c
 +++ b/dlls/ntdll/unix/virtual.c
-@@ -2588,14 +2588,14 @@ TEB *virtual_alloc_first_teb(void)
+@@ -2772,14 +2772,14 @@ TEB *virtual_alloc_first_teb(void)
      TEB *teb;
      PEB *peb;
      NTSTATUS status;
@@ -88,12 +88,7 @@ index 660323d4dcc..a5e5cb8422d 100644
      if (status)
      {
          ERR( "wine: failed to map the shared user data: %08x\n", status );
-@@ -2787,11 +2787,12 @@ void virtual_clear_thread_stack( void *stack_end )
-     if (force_exec_prot) mprotect( stack, size, PROT_READ | PROT_WRITE | PROT_EXEC );
- }
- 
-+extern void DECLSPEC_NORETURN __wine_syscall_dispatcher( void );
- 
+@@ -2977,7 +2977,7 @@ void virtual_clear_thread_stack( void *stack_end )
  /***********************************************************************
   *           virtual_map_user_shared_data
   */
@@ -102,7 +97,7 @@ index 660323d4dcc..a5e5cb8422d 100644
  {
      static const WCHAR wine_usdW[] = {'\\','K','e','r','n','e','l','O','b','j','e','c','t','s',
                                        '\\','_','_','w','i','n','e','_','u','s','e','r','_','s','h','a','r','e','d','_','d','a','t','a',0};
-@@ -2814,6 +2815,11 @@ void virtual_map_user_shared_data(void)
+@@ -3000,6 +3000,11 @@ void virtual_map_user_shared_data(void)
          ERR( "failed to remap the process USD: %d\n", res );
          exit(1);
      }
@@ -115,7 +110,7 @@ index 660323d4dcc..a5e5cb8422d 100644
      NtClose( section );
  }
 diff --git a/libs/wine/loader.c b/libs/wine/loader.c
-index 4597a6cb324..3d0d75e9c6d 100644
+index 4597a6cb3243..3d0d75e9c6d3 100644
 --- a/libs/wine/loader.c
 +++ b/libs/wine/loader.c
 @@ -398,7 +398,11 @@ static void *map_dll( const IMAGE_NT_HEADERS *nt_descr )
@@ -131,7 +126,7 @@ index 4597a6cb324..3d0d75e9c6d 100644
      sec++;
  
 diff --git a/server/mapping.c b/server/mapping.c
-index 0941dd87c05..002f3215af2 100644
+index 0941dd87c05d..002f3215af2e 100644
 --- a/server/mapping.c
 +++ b/server/mapping.c
 @@ -964,7 +964,11 @@ struct object *create_user_data_mapping( struct object *root, const struct unico
@@ -148,7 +143,7 @@ index 0941dd87c05..002f3215af2 100644
  }
  
 diff --git a/tools/winebuild/parser.c b/tools/winebuild/parser.c
-index 74216f8bb6e..820516329a4 100644
+index 74216f8bb6e7..820516329a47 100644
 --- a/tools/winebuild/parser.c
 +++ b/tools/winebuild/parser.c
 @@ -545,7 +545,7 @@ static const char *parse_spec_flags( DLLSPEC *spec, ORDDEF *odp )
@@ -161,7 +156,7 @@ index 74216f8bb6e..820516329a4 100644
      if (odp->flags & (FLAG_FORWARD | FLAG_REGISTER))
          return 0;
 diff --git a/tools/winebuild/spec32.c b/tools/winebuild/spec32.c
-index 07d6eed05fc..9cc4698d0d7 100644
+index 07d6eed05fcc..9cc4698d0d7d 100644
 --- a/tools/winebuild/spec32.c
 +++ b/tools/winebuild/spec32.c
 @@ -375,11 +375,11 @@ static void output_relay_debug( DLLSPEC *spec )
diff --git a/patches/winebuild-Fake_Dlls/0011-ntdll-Call-NtOpenFile-through-syscall-thunk.patch b/patches/winebuild-Fake_Dlls/0011-ntdll-Call-NtOpenFile-through-syscall-thunk.patch
index 69ee26be8..c3e065b26 100644
--- a/patches/winebuild-Fake_Dlls/0011-ntdll-Call-NtOpenFile-through-syscall-thunk.patch
+++ b/patches/winebuild-Fake_Dlls/0011-ntdll-Call-NtOpenFile-through-syscall-thunk.patch
@@ -1,4 +1,4 @@
-From 659e192979eecfb59d1c1b26e8cea78c42300de5 Mon Sep 17 00:00:00 2001
+From feb53ed39179603391eff600ea59edc41407b238 Mon Sep 17 00:00:00 2001
 From: Paul Gofman <gofmanp@gmail.com>
 Date: Fri, 3 Jan 2020 17:39:08 +0300
 Subject: [PATCH] ntdll: Call NtOpenFile through syscall thunk.
@@ -15,10 +15,10 @@ Wine-Bug: https://bugs.winehq.org/show_bug.cgi?id=48410
  7 files changed, 16 insertions(+), 8 deletions(-)
 
 diff --git a/dlls/ntdll/actctx.c b/dlls/ntdll/actctx.c
-index 1ca794ae3e5..b3c13042adc 100644
+index a25cefa555ac..34ba0dc813c6 100644
 --- a/dlls/ntdll/actctx.c
 +++ b/dlls/ntdll/actctx.c
-@@ -2892,7 +2892,7 @@ static NTSTATUS open_nt_file( HANDLE *handle, UNICODE_STRING *name )
+@@ -2894,7 +2894,7 @@ static NTSTATUS open_nt_file( HANDLE *handle, UNICODE_STRING *name )
      attr.ObjectName = name;
      attr.SecurityDescriptor = NULL;
      attr.SecurityQualityOfService = NULL;
@@ -27,7 +27,7 @@ index 1ca794ae3e5..b3c13042adc 100644
  }
  
  static NTSTATUS get_manifest_in_module( struct actctx_loader* acl, struct assembly_identity* ai,
-@@ -3209,7 +3209,7 @@ static NTSTATUS lookup_winsxs(struct actctx_loader* acl, struct assembly_identit
+@@ -3211,7 +3211,7 @@ static NTSTATUS lookup_winsxs(struct actctx_loader* acl, struct assembly_identit
      attr.SecurityDescriptor = NULL;
      attr.SecurityQualityOfService = NULL;
  
@@ -37,10 +37,10 @@ index 1ca794ae3e5..b3c13042adc 100644
      {
          sxs_ai = *ai;
 diff --git a/dlls/ntdll/directory.c b/dlls/ntdll/directory.c
-index d18df38f626..69607a4fed9 100644
+index 18428658a5b5..7a9de26ccb0c 100644
 --- a/dlls/ntdll/directory.c
 +++ b/dlls/ntdll/directory.c
-@@ -2943,7 +2943,7 @@ NTSTATUS DIR_get_unix_cwd( char **cwd )
+@@ -3071,7 +3071,7 @@ NTSTATUS DIR_get_unix_cwd( char **cwd )
          attr.SecurityDescriptor = NULL;
          attr.SecurityQualityOfService = NULL;
  
@@ -50,10 +50,10 @@ index d18df38f626..69607a4fed9 100644
          RtlFreeUnicodeString( &dirW );
          if (status != STATUS_SUCCESS) goto done;
 diff --git a/dlls/ntdll/loader.c b/dlls/ntdll/loader.c
-index 0b8c28a0651..e48cd84cffd 100644
+index 51d989f30b45..8f1653b0d626 100644
 --- a/dlls/ntdll/loader.c
 +++ b/dlls/ntdll/loader.c
-@@ -2469,7 +2469,7 @@ static NTSTATUS open_dll_file( UNICODE_STRING *nt_name, WINE_MODREF **pwm,
+@@ -2521,7 +2521,7 @@ static NTSTATUS open_dll_file( UNICODE_STRING *nt_name, WINE_MODREF **pwm,
      attr.ObjectName = nt_name;
      attr.SecurityDescriptor = NULL;
      attr.SecurityQualityOfService = NULL;
@@ -63,10 +63,10 @@ index 0b8c28a0651..e48cd84cffd 100644
                                FILE_SYNCHRONOUS_IO_NONALERT | FILE_NON_DIRECTORY_FILE )))
      {
 diff --git a/dlls/ntdll/locale.c b/dlls/ntdll/locale.c
-index 0d0c1194d23..a1bf219ed0a 100644
+index 15ccdeb2e637..928edcb04e2c 100644
 --- a/dlls/ntdll/locale.c
 +++ b/dlls/ntdll/locale.c
-@@ -661,7 +661,7 @@ static NTSTATUS open_nls_data_file( ULONG type, ULONG id, HANDLE *file )
+@@ -660,7 +660,7 @@ static NTSTATUS open_nls_data_file( ULONG type, ULONG id, HANDLE *file )
          return STATUS_NO_MEMORY;
      valueW.Length = NTDLL_swprintf( valueW.Buffer, pathfmtW, dir, name ) * sizeof(WCHAR);
      InitializeObjectAttributes( &attr, &valueW, 0, 0, NULL );
@@ -75,7 +75,7 @@ index 0d0c1194d23..a1bf219ed0a 100644
      if (!status) TRACE( "found %s\n", debugstr_w( valueW.Buffer ));
      RtlFreeUnicodeString( &valueW );
      if (status != STATUS_OBJECT_NAME_NOT_FOUND && status != STATUS_OBJECT_PATH_NOT_FOUND) return status;
-@@ -685,7 +685,7 @@ static NTSTATUS open_nls_data_file( ULONG type, ULONG id, HANDLE *file )
+@@ -684,7 +684,7 @@ static NTSTATUS open_nls_data_file( ULONG type, ULONG id, HANDLE *file )
          wcscat( valueW.Buffer, name );
          valueW.Length = wcslen(valueW.Buffer) * sizeof(WCHAR);
          InitializeObjectAttributes( &attr, &valueW, 0, 0, NULL );
@@ -85,10 +85,10 @@ index 0d0c1194d23..a1bf219ed0a 100644
      }
      RtlFreeUnicodeString( &valueW );
 diff --git a/dlls/ntdll/ntdll_misc.h b/dlls/ntdll/ntdll_misc.h
-index 2e791b92f73..f8170793185 100644
+index 9091d1ae8c77..f8e81ae49eaf 100644
 --- a/dlls/ntdll/ntdll_misc.h
 +++ b/dlls/ntdll/ntdll_misc.h
-@@ -350,4 +350,12 @@ static inline void ascii_to_unicode( WCHAR *dst, const char *src, size_t len )
+@@ -329,4 +329,12 @@ static inline void ascii_to_unicode( WCHAR *dst, const char *src, size_t len )
      while (len--) *dst++ = (unsigned char)*src++;
  }
  
@@ -102,7 +102,7 @@ index 2e791b92f73..f8170793185 100644
 +
  #endif
 diff --git a/dlls/ntdll/path.c b/dlls/ntdll/path.c
-index 32e1f951af5..71ae44dd498 100644
+index 32e1f951af5c..71ae44dd4988 100644
 --- a/dlls/ntdll/path.c
 +++ b/dlls/ntdll/path.c
 @@ -1020,7 +1020,7 @@ NTSTATUS WINAPI RtlSetCurrentDirectory_U(const UNICODE_STRING* dir)
@@ -115,10 +115,10 @@ index 32e1f951af5..71ae44dd498 100644
      if (nts != STATUS_SUCCESS) goto out;
  
 diff --git a/dlls/ntdll/process.c b/dlls/ntdll/process.c
-index 60ee39765bf..70dfe6f768a 100644
+index 884141da060c..32a1f5107f06 100644
 --- a/dlls/ntdll/process.c
 +++ b/dlls/ntdll/process.c
-@@ -1281,7 +1281,7 @@ static NTSTATUS get_pe_file_info( UNICODE_STRING *path, ULONG attributes,
+@@ -1357,7 +1357,7 @@ static NTSTATUS get_pe_file_info( UNICODE_STRING *path, ULONG attributes,
  
      memset( info, 0, sizeof(*info) );
      InitializeObjectAttributes( &attr, path, attributes, 0, 0 );

From 938c0aa15547f151622dfdeb1f66507624248cf4 Mon Sep 17 00:00:00 2001
From: Alistair Leslie-Hughes <leslie_alistair@hotmail.com>
Date: Thu, 11 Jun 2020 08:44:26 +1000
Subject: [PATCH] Rebase against 343043153b44fa46a2081fa8a2c171eac7c8dab6.

---
 ...-support-for-creating-processes-usin.patch | 77 ++++++++-----------
 ...or-NtQuerySystemInformation-SystemMo.patch | 16 ++--
 patches/patchinstall.sh                       |  2 +-
 staging/upstream-commit                       |  2 +-
 4 files changed, 44 insertions(+), 53 deletions(-)

diff --git a/patches/advapi32-Token_Integrity_Level/0010-server-Implement-support-for-creating-processes-usin.patch b/patches/advapi32-Token_Integrity_Level/0010-server-Implement-support-for-creating-processes-usin.patch
index 3eafa10db..291992dfb 100644
--- a/patches/advapi32-Token_Integrity_Level/0010-server-Implement-support-for-creating-processes-usin.patch
+++ b/patches/advapi32-Token_Integrity_Level/0010-server-Implement-support-for-creating-processes-usin.patch
@@ -1,4 +1,4 @@
-From 51830c6683b199e79cb9e782ee51555054a4da7c Mon Sep 17 00:00:00 2001
+From 35487aacbfe53d2584e83d4f59e119577901d4ea Mon Sep 17 00:00:00 2001
 From: =?UTF-8?q?Michael=20M=C3=BCller?= <michael@fds-team.de>
 Date: Sun, 6 Aug 2017 02:08:05 +0200
 Subject: [PATCH] server: Implement support for creating processes using a
@@ -6,20 +6,20 @@ Subject: [PATCH] server: Implement support for creating processes using a
 
 ---
  dlls/kernelbase/process.c | 24 +++++++++++++-----------
- dlls/ntdll/process.c      |  3 ++-
+ dlls/ntdll/process.c      |  1 +
  server/process.c          | 39 +++++++++++++++++++++++++++++++++++----
  server/process.h          |  2 +-
  server/protocol.def       |  1 +
  server/request.c          |  2 +-
  server/security.h         |  2 ++
  server/token.c            | 11 +++++++++++
- 8 files changed, 66 insertions(+), 18 deletions(-)
+ 8 files changed, 65 insertions(+), 17 deletions(-)
 
 diff --git a/dlls/kernelbase/process.c b/dlls/kernelbase/process.c
-index a07dddb1f..99985ab89 100644
+index a3b168543fc..b5c8b47239d 100644
 --- a/dlls/kernelbase/process.c
 +++ b/dlls/kernelbase/process.c
-@@ -242,7 +242,7 @@ static RTL_USER_PROCESS_PARAMETERS *create_process_params( const WCHAR *filename
+@@ -244,7 +244,7 @@ static RTL_USER_PROCESS_PARAMETERS *create_process_params( const WCHAR *filename
  /***********************************************************************
   *           create_nt_process
   */
@@ -28,7 +28,7 @@ index a07dddb1f..99985ab89 100644
                                     BOOL inherit, DWORD flags, RTL_USER_PROCESS_PARAMETERS *params,
                                     RTL_USER_PROCESS_INFORMATION *info, HANDLE parent )
  {
-@@ -257,7 +257,7 @@ static NTSTATUS create_nt_process( SECURITY_ATTRIBUTES *psa, SECURITY_ATTRIBUTES
+@@ -259,7 +259,7 @@ static NTSTATUS create_nt_process( SECURITY_ATTRIBUTES *psa, SECURITY_ATTRIBUTES
          status = RtlCreateUserProcess( &nameW, OBJ_CASE_INSENSITIVE, params,
                                         psa ? psa->lpSecurityDescriptor : NULL,
                                         tsa ? tsa->lpSecurityDescriptor : NULL,
@@ -37,7 +37,7 @@ index a07dddb1f..99985ab89 100644
          RtlFreeUnicodeString( &nameW );
      }
      return status;
-@@ -267,7 +267,7 @@ static NTSTATUS create_nt_process( SECURITY_ATTRIBUTES *psa, SECURITY_ATTRIBUTES
+@@ -269,7 +269,7 @@ static NTSTATUS create_nt_process( SECURITY_ATTRIBUTES *psa, SECURITY_ATTRIBUTES
  /***********************************************************************
   *           create_vdm_process
   */
@@ -46,7 +46,7 @@ index a07dddb1f..99985ab89 100644
                                      BOOL inherit, DWORD flags, RTL_USER_PROCESS_PARAMETERS *params,
                                      RTL_USER_PROCESS_INFORMATION *info )
  {
-@@ -288,7 +288,7 @@ static NTSTATUS create_vdm_process( SECURITY_ATTRIBUTES *psa, SECURITY_ATTRIBUTE
+@@ -290,7 +290,7 @@ static NTSTATUS create_vdm_process( SECURITY_ATTRIBUTES *psa, SECURITY_ATTRIBUTE
                winevdm, params->ImagePathName.Buffer, params->CommandLine.Buffer );
      RtlInitUnicodeString( &params->ImagePathName, winevdm );
      RtlInitUnicodeString( &params->CommandLine, newcmdline );
@@ -55,7 +55,7 @@ index a07dddb1f..99985ab89 100644
      HeapFree( GetProcessHeap(), 0, newcmdline );
      return status;
  }
-@@ -297,7 +297,7 @@ static NTSTATUS create_vdm_process( SECURITY_ATTRIBUTES *psa, SECURITY_ATTRIBUTE
+@@ -299,7 +299,7 @@ static NTSTATUS create_vdm_process( SECURITY_ATTRIBUTES *psa, SECURITY_ATTRIBUTE
  /***********************************************************************
   *           create_cmd_process
   */
@@ -64,7 +64,7 @@ index a07dddb1f..99985ab89 100644
                                      BOOL inherit, DWORD flags, RTL_USER_PROCESS_PARAMETERS *params,
                                      RTL_USER_PROCESS_INFORMATION *info )
  {
-@@ -316,7 +316,7 @@ static NTSTATUS create_cmd_process( SECURITY_ATTRIBUTES *psa, SECURITY_ATTRIBUTE
+@@ -318,7 +318,7 @@ static NTSTATUS create_cmd_process( SECURITY_ATTRIBUTES *psa, SECURITY_ATTRIBUTE
      swprintf( newcmdline, len, L"%s /s/c \"%s\"", comspec, params->CommandLine.Buffer );
      RtlInitUnicodeString( &params->ImagePathName, comspec );
      RtlInitUnicodeString( &params->CommandLine, newcmdline );
@@ -73,7 +73,7 @@ index a07dddb1f..99985ab89 100644
      RtlFreeHeap( GetProcessHeap(), 0, newcmdline );
      return status;
  }
-@@ -448,7 +448,9 @@ BOOL WINAPI DECLSPEC_HOTPATCH CreateProcessInternalW( HANDLE token, const WCHAR
+@@ -450,7 +450,9 @@ BOOL WINAPI DECLSPEC_HOTPATCH CreateProcessInternalW( HANDLE token, const WCHAR
  
      TRACE( "app %s cmdline %s\n", debugstr_w(app_name), debugstr_w(cmd_line) );
  
@@ -84,7 +84,7 @@ index a07dddb1f..99985ab89 100644
      if (new_token) FIXME( "No support for returning created process token\n" );
  
      if (app_name)
-@@ -521,7 +523,7 @@ BOOL WINAPI DECLSPEC_HOTPATCH CreateProcessInternalW( HANDLE token, const WCHAR
+@@ -523,7 +525,7 @@ BOOL WINAPI DECLSPEC_HOTPATCH CreateProcessInternalW( HANDLE token, const WCHAR
          }
      }
  
@@ -93,7 +93,7 @@ index a07dddb1f..99985ab89 100644
      switch (status)
      {
      case STATUS_SUCCESS:
-@@ -530,7 +532,7 @@ BOOL WINAPI DECLSPEC_HOTPATCH CreateProcessInternalW( HANDLE token, const WCHAR
+@@ -532,7 +534,7 @@ BOOL WINAPI DECLSPEC_HOTPATCH CreateProcessInternalW( HANDLE token, const WCHAR
      case STATUS_INVALID_IMAGE_NE_FORMAT:
      case STATUS_INVALID_IMAGE_PROTECT:
          TRACE( "starting %s as Win16/DOS binary\n", debugstr_w(app_name) );
@@ -102,7 +102,7 @@ index a07dddb1f..99985ab89 100644
          break;
      case STATUS_INVALID_IMAGE_NOT_MZ:
          /* check for .com or .bat extension */
-@@ -538,12 +540,12 @@ BOOL WINAPI DECLSPEC_HOTPATCH CreateProcessInternalW( HANDLE token, const WCHAR
+@@ -540,12 +542,12 @@ BOOL WINAPI DECLSPEC_HOTPATCH CreateProcessInternalW( HANDLE token, const WCHAR
          if (!wcsicmp( p, L".com" ) || !wcsicmp( p, L".pif" ))
          {
              TRACE( "starting %s as DOS binary\n", debugstr_w(app_name) );
@@ -118,20 +118,11 @@ index a07dddb1f..99985ab89 100644
          break;
      }
 diff --git a/dlls/ntdll/process.c b/dlls/ntdll/process.c
-index f3d9079f8..2fa553091 100644
+index f7f1b7c68fd..66961530de1 100644
 --- a/dlls/ntdll/process.c
 +++ b/dlls/ntdll/process.c
-@@ -1667,7 +1667,7 @@ NTSTATUS WINAPI RtlCreateUserProcess( UNICODE_STRING *path, ULONG attributes,
-                                       RTL_USER_PROCESS_PARAMETERS *params,
-                                       SECURITY_DESCRIPTOR *process_descr,
-                                       SECURITY_DESCRIPTOR *thread_descr,
--                                      HANDLE parent, BOOLEAN inherit, HANDLE debug, HANDLE exception,
-+                                      HANDLE parent, BOOLEAN inherit, HANDLE debug, HANDLE token,
-                                       RTL_USER_PROCESS_INFORMATION *info )
- {
-     NTSTATUS status;
-@@ -1735,6 +1735,7 @@ NTSTATUS WINAPI RtlCreateUserProcess( UNICODE_STRING *path, ULONG attributes,
-         req->access         = PROCESS_ALL_ACCESS;
+@@ -1712,6 +1712,7 @@ NTSTATUS WINAPI NtCreateUserProcess( HANDLE *process_handle_ptr, HANDLE *thread_
+         req->access         = process_access;
          req->cpu            = pe_info.cpu;
          req->info_size      = startup_info_size;
 +        req->token          = wine_server_obj_handle( token );
@@ -139,10 +130,10 @@ index f3d9079f8..2fa553091 100644
          wine_server_add_data( req, startup_info, startup_info_size );
          wine_server_add_data( req, params->Environment, env_size );
 diff --git a/server/process.c b/server/process.c
-index d6f71a774..aa66814d8 100644
+index 52604ec4d61..047916ffd09 100644
 --- a/server/process.c
 +++ b/server/process.c
-@@ -491,7 +491,7 @@ static void start_sigkill_timer( struct process *process )
+@@ -499,7 +499,7 @@ static void start_sigkill_timer( struct process *process )
  /* create a new process */
  /* if the function fails the fd is closed */
  struct process *create_process( int fd, struct process *parent, int inherit_all,
@@ -151,7 +142,7 @@ index d6f71a774..aa66814d8 100644
  {
      struct process *process;
  
-@@ -568,7 +568,7 @@ struct process *create_process( int fd, struct process *parent, int inherit_all,
+@@ -576,7 +576,7 @@ struct process *create_process( int fd, struct process *parent, int inherit_all,
                                         : alloc_handle_table( process, 0 );
          /* Note: for security reasons, starting a new process does not attempt
           * to use the current impersonation token for the new process */
@@ -160,7 +151,7 @@ index d6f71a774..aa66814d8 100644
          process->affinity = parent->affinity;
      }
      if (!process->handles || !process->token) goto error;
-@@ -1124,6 +1124,7 @@ DECL_HANDLER(new_process)
+@@ -1132,6 +1132,7 @@ DECL_HANDLER(new_process)
      const struct security_descriptor *sd;
      const struct object_attributes *objattr = get_req_object_attributes( &sd, &name, NULL );
      struct process *process = NULL;
@@ -168,7 +159,7 @@ index d6f71a774..aa66814d8 100644
      struct process *parent;
      struct thread *parent_thread = current;
      int socket_fd = thread_get_inflight_fd( current, req->socket_fd );
-@@ -1177,10 +1178,39 @@ DECL_HANDLER(new_process)
+@@ -1185,10 +1186,39 @@ DECL_HANDLER(new_process)
          return;
      }
  
@@ -208,7 +199,7 @@ index d6f71a774..aa66814d8 100644
          release_object( parent );
          return;
      }
-@@ -1228,7 +1258,7 @@ DECL_HANDLER(new_process)
+@@ -1236,7 +1266,7 @@ DECL_HANDLER(new_process)
  #undef FIXUP_LEN
      }
  
@@ -217,7 +208,7 @@ index d6f71a774..aa66814d8 100644
  
      process->startup_info = (struct startup_info *)grab_object( info );
  
-@@ -1289,6 +1319,7 @@ DECL_HANDLER(new_process)
+@@ -1297,6 +1327,7 @@ DECL_HANDLER(new_process)
      reply->handle = alloc_handle_no_access_check( current->process, process, req->access, objattr->attributes );
  
   done:
@@ -225,7 +216,7 @@ index d6f71a774..aa66814d8 100644
      if (process) release_object( process );
      release_object( parent );
      release_object( info );
-@@ -1322,7 +1353,7 @@ DECL_HANDLER(exec_process)
+@@ -1330,7 +1361,7 @@ DECL_HANDLER(exec_process)
          close( socket_fd );
          return;
      }
@@ -235,7 +226,7 @@ index d6f71a774..aa66814d8 100644
      release_object( process );
  }
 diff --git a/server/process.h b/server/process.h
-index dfe5c4e52..61b83abf6 100644
+index dfe5c4e52d8..61b83abf693 100644
 --- a/server/process.h
 +++ b/server/process.h
 @@ -118,7 +118,7 @@ extern unsigned int alloc_ptid( void *ptr );
@@ -248,10 +239,10 @@ index dfe5c4e52..61b83abf6 100644
  extern struct thread *get_process_first_thread( struct process *process );
  extern struct process *get_process_from_id( process_id_t id );
 diff --git a/server/protocol.def b/server/protocol.def
-index 45ab670ea..c763da4ca 100644
+index 901c380b721..8c86967609f 100644
 --- a/server/protocol.def
 +++ b/server/protocol.def
-@@ -791,6 +791,7 @@ struct rawinput_device
+@@ -801,6 +801,7 @@ struct rawinput_device
      unsigned int access;         /* access rights for process object */
      client_cpu_t cpu;            /* CPU that the new process will use */
      data_size_t  info_size;      /* size of startup info */
@@ -260,7 +251,7 @@ index 45ab670ea..c763da4ca 100644
      VARARG(info,startup_info,info_size); /* startup information */
      VARARG(env,unicode_str);     /* environment for new process */
 diff --git a/server/request.c b/server/request.c
-index 200c2697d..f743b720a 100644
+index 4c1f30a5fe7..321bb6cfa81 100644
 --- a/server/request.c
 +++ b/server/request.c
 @@ -582,7 +582,7 @@ static void master_socket_poll_event( struct fd *fd, int event )
@@ -273,7 +264,7 @@ index 200c2697d..f743b720a 100644
              create_thread( -1, process, NULL );
              release_object( process );
 diff --git a/server/security.h b/server/security.h
-index 21e90ccf2..32dfe5f8d 100644
+index 21e90ccf23f..32dfe5f8db9 100644
 --- a/server/security.h
 +++ b/server/security.h
 @@ -67,6 +67,8 @@ extern const ACL *token_get_default_dacl( struct token *token );
@@ -286,10 +277,10 @@ index 21e90ccf2..32dfe5f8d 100644
  static inline const ACE_HEADER *ace_next( const ACE_HEADER *ace )
  {
 diff --git a/server/token.c b/server/token.c
-index 181219d21..858ec25d7 100644
+index 1c1d49989b3..2f466aa1b25 100644
 --- a/server/token.c
 +++ b/server/token.c
-@@ -845,6 +845,12 @@ int token_assign_label( struct token *token, PSID label )
+@@ -843,6 +843,12 @@ int token_assign_label( struct token *token, PSID label )
      return ret;
  }
  
@@ -302,7 +293,7 @@ index 181219d21..858ec25d7 100644
  struct token *token_create_admin( void )
  {
      struct token *token = NULL;
-@@ -1271,6 +1277,11 @@ const SID *token_get_primary_group( struct token *token )
+@@ -1269,6 +1275,11 @@ const SID *token_get_primary_group( struct token *token )
      return token->primary_group;
  }
  
@@ -315,5 +306,5 @@ index 181219d21..858ec25d7 100644
  {
      GENERIC_MAPPING mapping;
 -- 
-2.24.0
+2.26.2
 
diff --git a/patches/ntdll-SystemModuleInformation/0003-ntdll-Add-stub-for-NtQuerySystemInformation-SystemMo.patch b/patches/ntdll-SystemModuleInformation/0003-ntdll-Add-stub-for-NtQuerySystemInformation-SystemMo.patch
index ce26ca0c8..fd52fcfaf 100644
--- a/patches/ntdll-SystemModuleInformation/0003-ntdll-Add-stub-for-NtQuerySystemInformation-SystemMo.patch
+++ b/patches/ntdll-SystemModuleInformation/0003-ntdll-Add-stub-for-NtQuerySystemInformation-SystemMo.patch
@@ -1,4 +1,4 @@
-From dbe17b07a502aa2fc29f9e382adccf8bdc211824 Mon Sep 17 00:00:00 2001
+From 120d2e0cf3f75c087be14f65953980f5605f652e Mon Sep 17 00:00:00 2001
 From: Andrew Wesie <awesie@gmail.com>
 Date: Fri, 12 Apr 2019 20:06:08 -0500
 Subject: [PATCH] ntdll: Add stub for
@@ -10,10 +10,10 @@ Subject: [PATCH] ntdll: Add stub for
  2 files changed, 30 insertions(+)
 
 diff --git a/dlls/ntdll/nt.c b/dlls/ntdll/nt.c
-index ea740ac81..77b64cac0 100644
+index 3ce1b344dbd..935c6abec7f 100644
 --- a/dlls/ntdll/nt.c
 +++ b/dlls/ntdll/nt.c
-@@ -2622,6 +2622,27 @@ NTSTATUS WINAPI NtQuerySystemInformation(
+@@ -3008,6 +3008,27 @@ NTSTATUS WINAPI NtQuerySystemInformation(
              ret = STATUS_SUCCESS;
          }
          break;
@@ -42,12 +42,12 @@ index ea740ac81..77b64cac0 100644
          {
              struct handle_info *info;
 diff --git a/include/winternl.h b/include/winternl.h
-index 2b3fb947b..613f55701 100644
+index d315d68be8f..d2d1001897d 100644
 --- a/include/winternl.h
 +++ b/include/winternl.h
-@@ -2272,6 +2272,15 @@ typedef struct _SYSTEM_MODULE_INFORMATION
-     SYSTEM_MODULE       Modules[1]; /* FIXME: should be Modules[0] */
- } SYSTEM_MODULE_INFORMATION, *PSYSTEM_MODULE_INFORMATION;
+@@ -2478,6 +2478,15 @@ typedef struct _SYSTEM_MODULE_INFORMATION
+ #define PROCESS_CREATE_FLAGS_SUSPENDED              0x00000200
+ #define PROCESS_CREATE_FLAGS_EXTENDED_UNKNOWN       0x00000400
  
 +typedef struct _SYSTEM_MODULE_INFORMATION_EX
 +{
@@ -62,5 +62,5 @@ index 2b3fb947b..613f55701 100644
  #define THREAD_CREATE_FLAGS_SKIP_THREAD_ATTACH      0x00000002
  #define THREAD_CREATE_FLAGS_HIDE_FROM_DEBUGGER      0x00000004
 -- 
-2.21.0
+2.26.2
 

diff --git a/patches/advapi32-Token_Integrity_Level/0008-ntdll-Implement-process-token-elevation-through-mani.patch b/patches/advapi32-Token_Integrity_Level/0008-ntdll-Implement-process-token-elevation-through-mani.patch
index 60c16278d..46b146499 100644
--- a/patches/advapi32-Token_Integrity_Level/0008-ntdll-Implement-process-token-elevation-through-mani.patch
+++ b/patches/advapi32-Token_Integrity_Level/0008-ntdll-Implement-process-token-elevation-through-mani.patch
@@ -1,4 +1,4 @@
-From 0e9d9a6aa1b65dae1c8dc34d6d5fb27aa73f96ea Mon Sep 17 00:00:00 2001
+From 1f2b1bafabfd457836f18741f178b3745e129c36 Mon Sep 17 00:00:00 2001
 From: =?UTF-8?q?Michael=20M=C3=BCller?= <michael@fds-team.de>
 Date: Sat, 5 Aug 2017 03:39:55 +0200
 Subject: [PATCH] ntdll: Implement process token elevation through manifests.
@@ -12,10 +12,10 @@ Subject: [PATCH] ntdll: Implement process token elevation through manifests.
  5 files changed, 67 insertions(+)
 
 diff --git a/dlls/ntdll/loader.c b/dlls/ntdll/loader.c
-index 51addaaf983..71efed5fa32 100644
+index 0c8f05285c4..92ae87c6e6d 100644
 --- a/dlls/ntdll/loader.c
 +++ b/dlls/ntdll/loader.c
-@@ -3903,6 +3903,32 @@ void WINAPI LdrInitializeThunk( CONTEXT *context, void **entry, ULONG_PTR unknow
+@@ -3898,6 +3898,32 @@ void WINAPI LdrInitializeThunk( CONTEXT *context, void **entry, ULONG_PTR unknow
  }
  
  
@@ -48,15 +48,15 @@ index 51addaaf983..71efed5fa32 100644
  /***********************************************************************
   *           load_global_options
   */
-@@ -4363,6 +4389,7 @@ void __wine_process_init(void)
-                                       's','y','s','t','e','m','3','2','\\',
+@@ -4359,6 +4385,7 @@ void __wine_process_init(void)
                                        'k','e','r','n','e','l','3','2','.','d','l','l',0};
+     void (WINAPI *kernel32_start_process)(LPTHREAD_START_ROUTINE,void*) = NULL;
      RTL_USER_PROCESS_PARAMETERS *params;
 +    ACTIVATION_CONTEXT_RUN_LEVEL_INFORMATION runlevel;
      WINE_MODREF *wm;
      NTSTATUS status;
      ANSI_STRING func_name;
-@@ -4466,6 +4493,16 @@ void __wine_process_init(void)
+@@ -4453,6 +4480,16 @@ void __wine_process_init(void)
  
      unix_funcs->virtual_set_large_address_space();
  
@@ -74,10 +74,10 @@ index 51addaaf983..71efed5fa32 100644
      RemoveEntryList( &wm->ldr.InLoadOrderLinks );
      InsertHeadList( &peb->LdrData->InLoadOrderModuleList, &wm->ldr.InLoadOrderLinks );
 diff --git a/server/process.c b/server/process.c
-index 80a091b0c72..34010b301c3 100644
+index ac85cace95d..52604ec4d61 100644
 --- a/server/process.c
 +++ b/server/process.c
-@@ -1112,6 +1112,14 @@ struct process_snapshot *process_snap( int *count )
+@@ -1115,6 +1115,14 @@ struct process_snapshot *process_snap( int *count )
      return snapshot;
  }
  
@@ -105,10 +105,10 @@ index 5b83e111a6f..dfe5c4e52d8 100644
  /* console functions */
  extern void inherit_console( struct thread *parent_thread, struct process *parent,
 diff --git a/server/protocol.def b/server/protocol.def
-index d8618a5c964..89adc93305c 100644
+index 7315f8ac4ea..901c380b721 100644
 --- a/server/protocol.def
 +++ b/server/protocol.def
-@@ -3762,6 +3762,13 @@ struct handle_info
+@@ -3763,6 +3763,13 @@ struct handle_info
  @END
  
  
diff --git a/patches/ntdll-HashLinks/0001-ntdll-Implement-HashLinks-field-in-LDR-module-data.patch b/patches/ntdll-HashLinks/0001-ntdll-Implement-HashLinks-field-in-LDR-module-data.patch
index 0669eac85..ade275815 100644
--- a/patches/ntdll-HashLinks/0001-ntdll-Implement-HashLinks-field-in-LDR-module-data.patch
+++ b/patches/ntdll-HashLinks/0001-ntdll-Implement-HashLinks-field-in-LDR-module-data.patch
@@ -1,4 +1,4 @@
-From 875ab1e7ff6b708f15b07537a91406fe83dec681 Mon Sep 17 00:00:00 2001
+From 6f7c87fdffe6aca49a2795eb29821557f20858c2 Mon Sep 17 00:00:00 2001
 From: =?UTF-8?q?Michael=20M=C3=BCller?= <michael@fds-team.de>
 Date: Mon, 3 Apr 2017 05:30:27 +0200
 Subject: [PATCH] ntdll: Implement HashLinks field in LDR module data.
@@ -10,7 +10,7 @@ Subject: [PATCH] ntdll: Implement HashLinks field in LDR module data.
  3 files changed, 142 insertions(+), 1 deletion(-)
 
 diff --git a/dlls/kernel32/tests/loader.c b/dlls/kernel32/tests/loader.c
-index 5474d543248..2d382d4f326 100644
+index 4bafd0f6349..f8a65e10758 100644
 --- a/dlls/kernel32/tests/loader.c
 +++ b/dlls/kernel32/tests/loader.c
 @@ -30,6 +30,7 @@
@@ -21,7 +21,7 @@ index 5474d543248..2d382d4f326 100644
  #include "wine/test.h"
  #include "delayloadhandler.h"
  
-@@ -3934,6 +3935,79 @@ static void test_LoadPackagedLibrary(void)
+@@ -3970,6 +3971,79 @@ static void test_LoadPackagedLibrary(void)
              h, GetLastError());
  }
  
@@ -101,7 +101,7 @@ index 5474d543248..2d382d4f326 100644
  START_TEST(loader)
  {
      int argc;
-@@ -4006,10 +4080,12 @@ START_TEST(loader)
+@@ -4042,10 +4116,12 @@ START_TEST(loader)
      test_InMemoryOrderModuleList();
      test_LoadPackagedLibrary();
      test_wow64_redirection();
@@ -115,10 +115,10 @@ index 5474d543248..2d382d4f326 100644
      test_Loader();
  }
 diff --git a/dlls/ntdll/loader.c b/dlls/ntdll/loader.c
-index 35dc7e1eaa4..d1e5fdeb5b8 100644
+index 0c8f05285c4..ebbd910d6cd 100644
 --- a/dlls/ntdll/loader.c
 +++ b/dlls/ntdll/loader.c
-@@ -120,6 +120,9 @@ static const char * const reason_names[] =
+@@ -122,6 +122,9 @@ static const char * const reason_names[] =
  
  static const WCHAR dllW[] = {'.','d','l','l',0};
  
@@ -128,7 +128,7 @@ index 35dc7e1eaa4..d1e5fdeb5b8 100644
  /* internal representation of 32bit modules. per process. */
  typedef struct _wine_modref
  {
-@@ -460,6 +463,52 @@ static void call_ldr_notifications( ULONG reason, LDR_DATA_TABLE_ENTRY *module )
+@@ -462,6 +465,52 @@ static void call_ldr_notifications( ULONG reason, LDR_DATA_TABLE_ENTRY *module )
      }
  }
  
@@ -181,7 +181,7 @@ index 35dc7e1eaa4..d1e5fdeb5b8 100644
  /*************************************************************************
   *		get_modref
   *
-@@ -1225,7 +1274,12 @@ static WINE_MODREF *alloc_module( HMODULE hModule, const UNICODE_STRING *nt_name
+@@ -1227,7 +1276,12 @@ static WINE_MODREF *alloc_module( HMODULE hModule, const UNICODE_STRING *nt_name
                     &wm->ldr.InLoadOrderLinks);
      InsertTailList(&NtCurrentTeb()->Peb->LdrData->InMemoryOrderModuleList,
                     &wm->ldr.InMemoryOrderLinks);
@@ -194,7 +194,7 @@ index 35dc7e1eaa4..d1e5fdeb5b8 100644
  
      if (!(nt->OptionalHeader.DllCharacteristics & IMAGE_DLLCHARACTERISTICS_NX_COMPAT))
      {
-@@ -1850,6 +1904,7 @@ static NTSTATUS build_so_dll_module( const WCHAR *load_path, const UNICODE_STRIN
+@@ -1886,6 +1940,7 @@ static NTSTATUS build_so_dll_module( const WCHAR *load_path, const UNICODE_STRIN
              /* the module has only been inserted in the load & memory order lists */
              RemoveEntryList(&wm->ldr.InLoadOrderLinks);
              RemoveEntryList(&wm->ldr.InMemoryOrderLinks);
@@ -202,7 +202,7 @@ index 35dc7e1eaa4..d1e5fdeb5b8 100644
              /* FIXME: free the modref */
              return status;
          }
-@@ -2393,6 +2448,7 @@ static NTSTATUS load_native_dll( LPCWSTR load_path, const UNICODE_STRING *nt_nam
+@@ -2429,6 +2484,7 @@ static NTSTATUS load_native_dll( LPCWSTR load_path, const UNICODE_STRING *nt_nam
              /* the module has only be inserted in the load & memory order lists */
              RemoveEntryList(&wm->ldr.InLoadOrderLinks);
              RemoveEntryList(&wm->ldr.InMemoryOrderLinks);
@@ -210,7 +210,7 @@ index 35dc7e1eaa4..d1e5fdeb5b8 100644
  
              /* FIXME: there are several more dangling references
               * left. Including dlls loaded by this dll before the
-@@ -3609,6 +3665,7 @@ static void free_modref( WINE_MODREF *wm )
+@@ -3649,6 +3705,7 @@ static void free_modref( WINE_MODREF *wm )
  {
      RemoveEntryList(&wm->ldr.InLoadOrderLinks);
      RemoveEntryList(&wm->ldr.InMemoryOrderLinks);
@@ -218,7 +218,7 @@ index 35dc7e1eaa4..d1e5fdeb5b8 100644
      if (wm->ldr.InInitializationOrderLinks.Flink)
          RemoveEntryList(&wm->ldr.InInitializationOrderLinks);
  
-@@ -4333,6 +4390,7 @@ void __wine_process_init(void)
+@@ -4369,6 +4426,7 @@ void __wine_process_init(void)
      SIZE_T info_size;
      TEB *teb;
      PEB *peb;
@@ -226,7 +226,7 @@ index 35dc7e1eaa4..d1e5fdeb5b8 100644
  
      if (!unix_funcs) load_ntdll_so( ntdll_module, &__wine_spec_nt_header );
  
-@@ -4360,6 +4418,10 @@ void __wine_process_init(void)
+@@ -4389,6 +4447,10 @@ void __wine_process_init(void)
      load_global_options();
      version_init();
  
@@ -237,21 +237,21 @@ index 35dc7e1eaa4..d1e5fdeb5b8 100644
      /* setup the load callback and create ntdll modref */
      RtlInitUnicodeString( &nt_name, ntdllW );
      status = build_so_dll_module( params->DllPath.Buffer, &nt_name, ntdll_module, 0, &wm );
-@@ -4435,6 +4497,9 @@ void __wine_process_init(void)
+@@ -4464,6 +4526,9 @@ void __wine_process_init(void)
      teb->Tib.StackLimit = stack.StackLimit;
      teb->DeallocationStack = stack.DeallocationStack;
  
 +    /* the windows version was not set yet when ntdll and kernel32 were loaded */
 +    recompute_hash_map();
 +
-     server_init_process_done();
+     unix_funcs->server_init_process_done( kernel32_start_process );
  }
  
 diff --git a/include/winternl.h b/include/winternl.h
-index 9df1f0bb800..8625b192cf1 100644
+index acbce20c212..150a3777d4b 100644
 --- a/include/winternl.h
 +++ b/include/winternl.h
-@@ -2330,8 +2330,8 @@ typedef struct _LDR_DATA_TABLE_ENTRY
+@@ -2354,8 +2354,8 @@ typedef struct _LDR_DATA_TABLE_ENTRY
      ULONG               Flags;
      SHORT               LoadCount;
      SHORT               TlsIndex;
diff --git a/patches/ntdll-Interrupt-0x2e/0001-ntdll-Catch-windows-int-0x2e-syscall-on-i386.patch b/patches/ntdll-Interrupt-0x2e/0001-ntdll-Catch-windows-int-0x2e-syscall-on-i386.patch
index caf7f628c..8432d08a5 100644
--- a/patches/ntdll-Interrupt-0x2e/0001-ntdll-Catch-windows-int-0x2e-syscall-on-i386.patch
+++ b/patches/ntdll-Interrupt-0x2e/0001-ntdll-Catch-windows-int-0x2e-syscall-on-i386.patch
@@ -1,17 +1,17 @@
-From f15c706847288555a76b3827b09691b23d7ec57d Mon Sep 17 00:00:00 2001
+From 17b12b07aae111f5dde4f4dca3520ab93487b2aa Mon Sep 17 00:00:00 2001
 From: =?UTF-8?q?Michael=20M=C3=BCller?= <michael@fds-team.de>
 Date: Sun, 19 Mar 2017 19:08:34 +0100
 Subject: [PATCH] ntdll: Catch windows int 0x2e syscall on i386.
 
 ---
- dlls/ntdll/signal_i386.c | 5 +++++
+ dlls/ntdll/unix/signal_i386.c | 5 +++++
  1 file changed, 5 insertions(+)
 
-diff --git a/dlls/ntdll/signal_i386.c b/dlls/ntdll/signal_i386.c
-index 78d03f669d7..a134b6d54ab 100644
---- a/dlls/ntdll/signal_i386.c
-+++ b/dlls/ntdll/signal_i386.c
-@@ -1731,6 +1731,11 @@ static BOOL handle_interrupt( unsigned int interrupt, ucontext_t *sigcontext, st
+diff --git a/dlls/ntdll/unix/signal_i386.c b/dlls/ntdll/unix/signal_i386.c
+index 7ae4cda33a6..80fef44d055 100644
+--- a/dlls/ntdll/unix/signal_i386.c
++++ b/dlls/ntdll/unix/signal_i386.c
+@@ -1638,6 +1638,11 @@ static BOOL handle_interrupt( unsigned int interrupt, ucontext_t *sigcontext, st
          stack->rec.ExceptionInformation[2] = stack->context.Edx;
          setup_raise_exception( sigcontext, stack );
          return TRUE;
diff --git a/patches/ntdll-Syscall_Emulation/0001-ntdll-Support-x86_64-syscall-emulation.patch b/patches/ntdll-Syscall_Emulation/0001-ntdll-Support-x86_64-syscall-emulation.patch
index 0a39d4355..2e659ca0c 100644
--- a/patches/ntdll-Syscall_Emulation/0001-ntdll-Support-x86_64-syscall-emulation.patch
+++ b/patches/ntdll-Syscall_Emulation/0001-ntdll-Support-x86_64-syscall-emulation.patch
@@ -1,4 +1,4 @@
-From cd04d1910294b035bb3858b3ef1bb295aec3a732 Mon Sep 17 00:00:00 2001
+From 3c60ef5d082e5298b113cf0cc93fa2bb44deadba Mon Sep 17 00:00:00 2001
 From: Paul Gofman <pgofman@codeweavers.com>
 Date: Mon, 30 Dec 2019 13:27:53 +0300
 Subject: [PATCH] ntdll: Support x86_64 syscall emulation.
@@ -9,10 +9,10 @@ used in the applications (i. e., that the applications
 get the number from syscall thunks). Linux specific Seccomp
 is used for trapping syscalls.
 ---
- configure.ac               |   1 +
- dlls/ntdll/signal_x86_64.c | 111 +++++++++++++++++++++++++++++++++++++
- tools/winebuild/spec32.c   |   9 ++-
- 3 files changed, 119 insertions(+), 2 deletions(-)
+ configure.ac                    |   1 +
+ dlls/ntdll/unix/signal_x86_64.c | 109 ++++++++++++++++++++++++++++++++
+ tools/winebuild/spec32.c        |   9 ++-
+ 3 files changed, 117 insertions(+), 2 deletions(-)
 
 diff --git a/configure.ac b/configure.ac
 index e61a98455c3..4adeb52d225 100644
@@ -26,19 +26,19 @@ index e61a98455c3..4adeb52d225 100644
  	linux/serial.h \
  	linux/types.h \
  	linux/ucdrom.h \
-diff --git a/dlls/ntdll/signal_x86_64.c b/dlls/ntdll/signal_x86_64.c
-index dd8b45fa907..a5612abf2b1 100644
---- a/dlls/ntdll/signal_x86_64.c
-+++ b/dlls/ntdll/signal_x86_64.c
-@@ -24,6 +24,7 @@
+diff --git a/dlls/ntdll/unix/signal_x86_64.c b/dlls/ntdll/unix/signal_x86_64.c
+index 1d1b879310e..d4dda481127 100644
+--- a/dlls/ntdll/unix/signal_x86_64.c
++++ b/dlls/ntdll/unix/signal_x86_64.c
+@@ -28,6 +28,7 @@
  #include "wine/port.h"
  
  #include <assert.h>
 +#include <errno.h>
+ #include <pthread.h>
  #include <signal.h>
  #include <stdlib.h>
- #include <stdarg.h>
-@@ -59,6 +60,13 @@
+@@ -64,6 +65,13 @@
  # include <mach/mach.h>
  #endif
  
@@ -52,16 +52,16 @@ index dd8b45fa907..a5612abf2b1 100644
  #define NONAMELESSUNION
  #define NONAMELESSSTRUCT
  #include "ntstatus.h"
-@@ -76,6 +84,8 @@
+@@ -78,6 +86,8 @@
  
  WINE_DEFAULT_DEBUG_CHANNEL(seh);
  
 +extern void DECLSPEC_NORETURN __wine_syscall_dispatcher( void );
 +
- typedef struct _SCOPE_TABLE
- {
-     ULONG Count;
-@@ -2480,6 +2490,104 @@ static inline DWORD is_privileged_instr( CONTEXT *context )
+ /***********************************************************************
+  * signal context platform-specific definitions
+  */
+@@ -982,6 +992,104 @@ static inline DWORD is_privileged_instr( CONTEXT *context )
      return 0;
  }
  
@@ -166,13 +166,11 @@ index dd8b45fa907..a5612abf2b1 100644
  
  /***********************************************************************
   *           handle_interrupt
-@@ -2793,6 +2901,9 @@ void signal_init_process(void)
-     sig_act.sa_sigaction = trap_handler;
-     if (sigaction( SIGTRAP, &sig_act, NULL ) == -1) goto error;
- #endif
-+
+@@ -1431,6 +1539,7 @@ void signal_init_process(void)
+     if (sigaction( SIGSEGV, &sig_act, NULL ) == -1) goto error;
+     if (sigaction( SIGILL, &sig_act, NULL ) == -1) goto error;
+     if (sigaction( SIGBUS, &sig_act, NULL ) == -1) goto error;
 +    install_bpf(&sig_act);
-+
      return;
  
   error:
diff --git a/patches/ntdll-WRITECOPY/0003-ntdll-Setup-a-temporary-signal-handler-during-proces.patch b/patches/ntdll-WRITECOPY/0003-ntdll-Setup-a-temporary-signal-handler-during-proces.patch
index db0631234..e02f07486 100644
--- a/patches/ntdll-WRITECOPY/0003-ntdll-Setup-a-temporary-signal-handler-during-proces.patch
+++ b/patches/ntdll-WRITECOPY/0003-ntdll-Setup-a-temporary-signal-handler-during-proces.patch
@@ -1,36 +1,36 @@
-From bd60a4308f3ec1df20328887335b4c95f9be215d Mon Sep 17 00:00:00 2001
+From 42a9d6a0464a17831ae2c16df222f4de7638349e Mon Sep 17 00:00:00 2001
 From: =?UTF-8?q?Michael=20M=C3=BCller?= <michael@fds-team.de>
 Date: Sat, 4 Oct 2014 02:53:22 +0200
 Subject: [PATCH] ntdll: Setup a temporary signal handler during process
  startup to handle page faults. (v2)
 
 ---
- dlls/ntdll/ntdll_misc.h     |  1 +
- dlls/ntdll/signal_arm.c     |  6 +++++
- dlls/ntdll/signal_arm64.c   |  6 +++++
- dlls/ntdll/signal_i386.c    | 53 +++++++++++++++++++++++++++++++++++++
- dlls/ntdll/signal_powerpc.c |  6 +++++
- dlls/ntdll/signal_x86_64.c  |  6 +++++
- dlls/ntdll/thread.c         |  1 +
+ dlls/ntdll/unix/loader.c         |  1 +
+ dlls/ntdll/unix/signal_arm.c     |  6 ++++
+ dlls/ntdll/unix/signal_arm64.c   |  7 +++++
+ dlls/ntdll/unix/signal_i386.c    | 52 ++++++++++++++++++++++++++++++++
+ dlls/ntdll/unix/signal_powerpc.c |  6 ++++
+ dlls/ntdll/unix/signal_x86_64.c  |  6 ++++
+ dlls/ntdll/unix/unix_private.h   |  1 +
  7 files changed, 79 insertions(+)
 
-diff --git a/dlls/ntdll/ntdll_misc.h b/dlls/ntdll/ntdll_misc.h
-index 65c65cc02d8..63a4b597872 100644
---- a/dlls/ntdll/ntdll_misc.h
-+++ b/dlls/ntdll/ntdll_misc.h
-@@ -78,6 +78,7 @@ extern LPCSTR debugstr_ObjectAttributes(const OBJECT_ATTRIBUTES *oa) DECLSPEC_HI
- extern SIZE_T signal_stack_size DECLSPEC_HIDDEN;
- extern SIZE_T signal_stack_mask DECLSPEC_HIDDEN;
- extern void signal_init_process(void) DECLSPEC_HIDDEN;
-+extern void signal_init_early(void) DECLSPEC_HIDDEN;
- extern void version_init(void) DECLSPEC_HIDDEN;
- extern void debug_init(void) DECLSPEC_HIDDEN;
- extern TEB *thread_init( SIZE_T *info_size, BOOL *suspend ) DECLSPEC_HIDDEN;
-diff --git a/dlls/ntdll/signal_arm.c b/dlls/ntdll/signal_arm.c
-index a09848449a6..c6f7231fec6 100644
---- a/dlls/ntdll/signal_arm.c
-+++ b/dlls/ntdll/signal_arm.c
-@@ -792,6 +792,12 @@ void signal_init_process(void)
+diff --git a/dlls/ntdll/unix/loader.c b/dlls/ntdll/unix/loader.c
+index eac43ba42c4..48910dd4d50 100644
+--- a/dlls/ntdll/unix/loader.c
++++ b/dlls/ntdll/unix/loader.c
+@@ -1418,6 +1418,7 @@ void __wine_main( int argc, char *argv[], char *envp[] )
+ #endif
+ 
+     virtual_init();
++    signal_init_early();
+ 
+     module = load_ntdll();
+     fixup_ntdll_imports( &__wine_spec_nt_header, module );
+diff --git a/dlls/ntdll/unix/signal_arm.c b/dlls/ntdll/unix/signal_arm.c
+index 1ef3ff6618b..5e0b25cec5d 100644
+--- a/dlls/ntdll/unix/signal_arm.c
++++ b/dlls/ntdll/unix/signal_arm.c
+@@ -869,6 +869,12 @@ void signal_init_process(void)
      exit(1);
  }
  
@@ -42,13 +42,13 @@ index a09848449a6..c6f7231fec6 100644
 +}
  
  /***********************************************************************
-  *            RtlUnwind  (NTDLL.@)
-diff --git a/dlls/ntdll/signal_arm64.c b/dlls/ntdll/signal_arm64.c
-index a9a58a2e7ad..a9c6614794e 100644
---- a/dlls/ntdll/signal_arm64.c
-+++ b/dlls/ntdll/signal_arm64.c
-@@ -1047,6 +1047,12 @@ static void usr2_handler( int signal, siginfo_t *siginfo, void *sigcontext )
-     restore_context( context, sigcontext );
+  *           init_thread_context
+diff --git a/dlls/ntdll/unix/signal_arm64.c b/dlls/ntdll/unix/signal_arm64.c
+index 6c9083664e0..3a4e7d5b9cb 100644
+--- a/dlls/ntdll/unix/signal_arm64.c
++++ b/dlls/ntdll/unix/signal_arm64.c
+@@ -791,6 +791,13 @@ void signal_init_process(void)
+     exit(1);
  }
  
 +/**********************************************************************
@@ -57,14 +57,15 @@ index a9a58a2e7ad..a9c6614794e 100644
 +void signal_init_early(void)
 +{
 +}
- 
- /**********************************************************************
-  *		signal_init_process
-diff --git a/dlls/ntdll/signal_i386.c b/dlls/ntdll/signal_i386.c
-index 83868f25121..b048b2bc688 100644
---- a/dlls/ntdll/signal_i386.c
-+++ b/dlls/ntdll/signal_i386.c
-@@ -1575,6 +1575,31 @@ static BOOL handle_interrupt( unsigned int interrupt, ucontext_t *sigcontext, st
++
+ /***********************************************************************
+  *           init_thread_context
+  */
+diff --git a/dlls/ntdll/unix/signal_i386.c b/dlls/ntdll/unix/signal_i386.c
+index 7ae4cda33a6..1a86b6e05f3 100644
+--- a/dlls/ntdll/unix/signal_i386.c
++++ b/dlls/ntdll/unix/signal_i386.c
+@@ -1644,6 +1644,30 @@ static BOOL handle_interrupt( unsigned int interrupt, ucontext_t *sigcontext, st
  }
  
  
@@ -76,19 +77,18 @@ index 83868f25121..b048b2bc688 100644
 + */
 +static void segv_handler_early( int signal, siginfo_t *siginfo, void *sigcontext )
 +{
-+    WORD fs, gs;
 +    ucontext_t *context = sigcontext;
-+    init_handler( sigcontext, &fs, &gs );
++    init_handler( sigcontext );
 +
-+    switch(get_trap_code(context))
++    switch (TRAP_sig(context))
 +    {
 +    case TRAP_x86_PAGEFLT:  /* Page fault */
-+        if (!unix_funcs->virtual_handle_fault( siginfo->si_addr, (get_error_code(context) >> 1) & 0x09, TRUE ))
++        if (!virtual_handle_fault( siginfo->si_addr, (ERROR_sig(context) >> 1) & 0x09, TRUE ))
 +            return;
 +        /* fall-through */
 +    default:
-+        WINE_ERR( "Got unexpected trap %d during process initialization\n", get_trap_code(context) );
-+        unix_funcs->abort_thread(1);
++        WINE_ERR( "Got unexpected trap %d during process initialization\n", TRAP_sig(context) );
++        abort_thread(1);
 +        break;
 +    }
 +}
@@ -96,7 +96,7 @@ index 83868f25121..b048b2bc688 100644
  /**********************************************************************
   *		segv_handler
   *
-@@ -1883,6 +1908,34 @@ void signal_init_process(void)
+@@ -2243,6 +2267,34 @@ void signal_init_process(void)
      exit(1);
  }
  
@@ -129,14 +129,14 @@ index 83868f25121..b048b2bc688 100644
 +    exit(1);
 +}
  
- /*******************************************************************
-  *		RtlUnwind (NTDLL.@)
-diff --git a/dlls/ntdll/signal_powerpc.c b/dlls/ntdll/signal_powerpc.c
-index 879b2b58c49..f17d6267102 100644
---- a/dlls/ntdll/signal_powerpc.c
-+++ b/dlls/ntdll/signal_powerpc.c
-@@ -634,6 +634,12 @@ static void quit_handler( int signal, siginfo_t *siginfo, void *sigcontext )
-     unix_funcs->abort_thread(0);
+ /***********************************************************************
+  *           init_thread_context
+diff --git a/dlls/ntdll/unix/signal_powerpc.c b/dlls/ntdll/unix/signal_powerpc.c
+index f98d6fc9713..fdc5f66d092 100644
+--- a/dlls/ntdll/unix/signal_powerpc.c
++++ b/dlls/ntdll/unix/signal_powerpc.c
+@@ -978,6 +978,12 @@ void signal_init_process(void)
+     exit(1);
  }
  
 +/**********************************************************************
@@ -146,13 +146,13 @@ index 879b2b58c49..f17d6267102 100644
 +{
 +}
  
- /**********************************************************************
-  *		usr1_handler
-diff --git a/dlls/ntdll/signal_x86_64.c b/dlls/ntdll/signal_x86_64.c
-index c6b0fbf618d..bb481ba1b81 100644
---- a/dlls/ntdll/signal_x86_64.c
-+++ b/dlls/ntdll/signal_x86_64.c
-@@ -2777,6 +2777,12 @@ void signal_init_process(void)
+ /***********************************************************************
+  *           signal_exit_thread
+diff --git a/dlls/ntdll/unix/signal_x86_64.c b/dlls/ntdll/unix/signal_x86_64.c
+index d4a6e821a4c..98bd7bb8bed 100644
+--- a/dlls/ntdll/unix/signal_x86_64.c
++++ b/dlls/ntdll/unix/signal_x86_64.c
+@@ -1415,6 +1415,12 @@ void signal_init_process(void)
      exit(1);
  }
  
@@ -163,20 +163,20 @@ index c6b0fbf618d..bb481ba1b81 100644
 +{
 +}
  
- static ULONG64 get_int_reg( CONTEXT *context, int reg )
- {
-diff --git a/dlls/ntdll/thread.c b/dlls/ntdll/thread.c
-index d045466f6d2..49daa33ca58 100644
---- a/dlls/ntdll/thread.c
-+++ b/dlls/ntdll/thread.c
-@@ -186,6 +186,7 @@ TEB *thread_init( SIZE_T *info_size, BOOL *suspend )
-     TEB *teb;
- 
-     virtual_init();
-+    signal_init_early();
- 
-     teb = unix_funcs->init_threading( &nb_threads, &__wine_ldt_copy, info_size, suspend, &server_cpus,
-                                       &is_wow64, &server_start_time );
+ /***********************************************************************
+  *           init_thread_context
+diff --git a/dlls/ntdll/unix/unix_private.h b/dlls/ntdll/unix/unix_private.h
+index 3e61111cba5..1319ca90b96 100644
+--- a/dlls/ntdll/unix/unix_private.h
++++ b/dlls/ntdll/unix/unix_private.h
+@@ -163,6 +163,7 @@ extern NTSTATUS signal_alloc_thread( TEB *teb ) DECLSPEC_HIDDEN;
+ extern void signal_free_thread( TEB *teb ) DECLSPEC_HIDDEN;
+ extern void signal_init_thread( TEB *teb ) DECLSPEC_HIDDEN;
+ extern void signal_init_process(void) DECLSPEC_HIDDEN;
++extern void signal_init_early(void) DECLSPEC_HIDDEN;
+ extern void DECLSPEC_NORETURN signal_start_thread( PRTL_THREAD_START_ROUTINE entry, void *arg,
+                                                    BOOL suspend, void *relay, TEB *teb ) DECLSPEC_HIDDEN;
+ extern void DECLSPEC_NORETURN signal_exit_thread( int status, void (*func)(int) ) DECLSPEC_HIDDEN;
 -- 
 2.26.2
 
diff --git a/patches/ntdll-WRITECOPY/0006-ntdll-Support-WRITECOPY-on-x64.patch b/patches/ntdll-WRITECOPY/0006-ntdll-Support-WRITECOPY-on-x64.patch
index ad417ed94..7c03bd33d 100644
--- a/patches/ntdll-WRITECOPY/0006-ntdll-Support-WRITECOPY-on-x64.patch
+++ b/patches/ntdll-WRITECOPY/0006-ntdll-Support-WRITECOPY-on-x64.patch
@@ -1,19 +1,19 @@
-From aae6e8d097aaa6665a65ec6f896e37b445c371ea Mon Sep 17 00:00:00 2001
+From 38e1b3603dc067d91621b63d157edc339d8a33d8 Mon Sep 17 00:00:00 2001
 From: Andrew Wesie <awesie@gmail.com>
 Date: Fri, 24 Apr 2020 14:55:15 -0500
 Subject: [PATCH] ntdll: Support WRITECOPY on x64.
 
 Signed-off-by: Andrew Wesie <awesie@gmail.com>
 ---
- dlls/ntdll/signal_x86_64.c | 40 ++++++++++++++++++++++++++++++++++++++
- dlls/ntdll/unix/virtual.c  |  2 +-
+ dlls/ntdll/unix/signal_x86_64.c | 40 +++++++++++++++++++++++++++++++++
+ dlls/ntdll/unix/virtual.c       |  2 +-
  2 files changed, 41 insertions(+), 1 deletion(-)
 
-diff --git a/dlls/ntdll/signal_x86_64.c b/dlls/ntdll/signal_x86_64.c
-index 0eb58d3d149..8fdb800984c 100644
---- a/dlls/ntdll/signal_x86_64.c
-+++ b/dlls/ntdll/signal_x86_64.c
-@@ -2575,6 +2575,29 @@ static inline BOOL handle_interrupt( ucontext_t *sigcontext, struct stack_layout
+diff --git a/dlls/ntdll/unix/signal_x86_64.c b/dlls/ntdll/unix/signal_x86_64.c
+index 98bd7bb8bed..1d1b879310e 100644
+--- a/dlls/ntdll/unix/signal_x86_64.c
++++ b/dlls/ntdll/unix/signal_x86_64.c
+@@ -1019,6 +1019,29 @@ static inline BOOL handle_interrupt( ucontext_t *sigcontext, struct stack_layout
  }
  
  
@@ -30,12 +30,12 @@ index 0eb58d3d149..8fdb800984c 100644
 +    switch(TRAP_sig(ucontext))
 +    {
 +    case TRAP_x86_PAGEFLT:  /* Page fault */
-+        if (!unix_funcs->virtual_handle_fault( siginfo->si_addr, (ERROR_sig(ucontext) >> 1) & 0x09, TRUE ))
++        if (!virtual_handle_fault( siginfo->si_addr, (ERROR_sig(ucontext) >> 1) & 0x09, TRUE ))
 +            return;
 +        /* fall-through */
 +    default:
 +        WINE_ERR( "Got unexpected trap %lld during process initialization\n", TRAP_sig(ucontext) );
-+        unix_funcs->abort_thread(1);
++        abort_thread(1);
 +        break;
 +    }
 +}
@@ -43,7 +43,7 @@ index 0eb58d3d149..8fdb800984c 100644
  /**********************************************************************
   *		segv_handler
   *
-@@ -2855,6 +2878,23 @@ void signal_init_process(void)
+@@ -1420,6 +1443,23 @@ void signal_init_process(void)
   */
  void signal_init_early(void)
  {
@@ -66,12 +66,12 @@ index 0eb58d3d149..8fdb800984c 100644
 +    exit(1);
  }
  
- static ULONG64 get_int_reg( CONTEXT *context, int reg )
+ /***********************************************************************
 diff --git a/dlls/ntdll/unix/virtual.c b/dlls/ntdll/unix/virtual.c
-index c81104bd266..1072907ffdd 100644
+index b20eafb3334..c351c7db0e3 100644
 --- a/dlls/ntdll/unix/virtual.c
 +++ b/dlls/ntdll/unix/virtual.c
-@@ -816,7 +816,7 @@ static int get_unix_prot( BYTE vprot )
+@@ -818,7 +818,7 @@ static int get_unix_prot( BYTE vprot )
          if (vprot & VPROT_READ) prot |= PROT_READ;
          if (vprot & VPROT_WRITE) prot |= PROT_WRITE | PROT_READ;
          if (vprot & VPROT_EXEC) prot |= PROT_EXEC | PROT_READ;
diff --git a/patches/ntdll-x86_64_SegDs/0001-ntdll-Report-SegDs-to-be-identical-to-SegSs-on-x86_6.patch b/patches/ntdll-x86_64_SegDs/0001-ntdll-Report-SegDs-to-be-identical-to-SegSs-on-x86_6.patch
index 455a3be41..d07ca424d 100644
--- a/patches/ntdll-x86_64_SegDs/0001-ntdll-Report-SegDs-to-be-identical-to-SegSs-on-x86_6.patch
+++ b/patches/ntdll-x86_64_SegDs/0001-ntdll-Report-SegDs-to-be-identical-to-SegSs-on-x86_6.patch
@@ -1,4 +1,4 @@
-From 1178a02719088e81b2e5b35074b4559f60d8a5b1 Mon Sep 17 00:00:00 2001
+From 6fb2e6ef08a7cf1339b39fa753b29092fa76c3df Mon Sep 17 00:00:00 2001
 From: Zebediah Figura <z.figura12@gmail.com>
 Date: Thu, 21 Nov 2019 10:44:42 -0600
 Subject: [PATCH] ntdll: Report SegDs to be identical to SegSs on x86_64.
@@ -8,14 +8,14 @@ Based on a patch by David Torok.
 Wine-Bug: https://bugs.winehq.org/show_bug.cgi?id=47970
 Signed-off-by: Zebediah Figura <z.figura12@gmail.com>
 ---
- dlls/ntdll/signal_x86_64.c | 11 ++++++-----
+ dlls/ntdll/unix/signal_x86_64.c | 11 ++++++-----
  1 file changed, 6 insertions(+), 5 deletions(-)
 
-diff --git a/dlls/ntdll/signal_x86_64.c b/dlls/ntdll/signal_x86_64.c
-index c372f65b34b..a1797811da3 100644
---- a/dlls/ntdll/signal_x86_64.c
-+++ b/dlls/ntdll/signal_x86_64.c
-@@ -1699,11 +1699,6 @@ static void save_context( CONTEXT *context, const ucontext_t *sigcontext )
+diff --git a/dlls/ntdll/unix/signal_x86_64.c b/dlls/ntdll/unix/signal_x86_64.c
+index d4a6e821a4c..ebbef9d2fcd 100644
+--- a/dlls/ntdll/unix/signal_x86_64.c
++++ b/dlls/ntdll/unix/signal_x86_64.c
+@@ -348,11 +348,6 @@ static void save_context( CONTEXT *context, const ucontext_t *sigcontext )
      context->SegFs  = FS_sig(sigcontext);
      context->SegGs  = GS_sig(sigcontext);
      context->EFlags = EFL_sig(sigcontext);
@@ -27,7 +27,7 @@ index c372f65b34b..a1797811da3 100644
  #ifdef ES_sig
      context->SegEs  = ES_sig(sigcontext);
  #else
-@@ -1714,6 +1709,12 @@ static void save_context( CONTEXT *context, const ucontext_t *sigcontext )
+@@ -363,6 +358,12 @@ static void save_context( CONTEXT *context, const ucontext_t *sigcontext )
  #else
      __asm__("movw %%ss,%0" : "=m" (context->SegSs));
  #endif
@@ -41,5 +41,5 @@ index c372f65b34b..a1797811da3 100644
      context->Dr1    = amd64_thread_data()->dr1;
      context->Dr2    = amd64_thread_data()->dr2;
 -- 
-2.23.0
+2.26.2
 
diff --git a/patches/patchinstall.sh b/patches/patchinstall.sh
index 9c2ce4ce0..99f6e5be5 100755
--- a/patches/patchinstall.sh
+++ b/patches/patchinstall.sh
@@ -3657,10 +3657,10 @@ fi
 # | 	Empires II, MSYS2)
 # |
 # | Modified files:
-# |   *	dlls/advapi32/crypt.c, dlls/advapi32/tests/security.c, dlls/kernel32/tests/virtual.c, dlls/ntdll/ntdll_misc.h,
-# | 	dlls/ntdll/signal_arm.c, dlls/ntdll/signal_arm64.c, dlls/ntdll/signal_i386.c, dlls/ntdll/signal_powerpc.c,
-# | 	dlls/ntdll/signal_x86_64.c, dlls/ntdll/thread.c, dlls/ntdll/unix/server.c, dlls/ntdll/unix/virtual.c,
-# | 	dlls/psapi/tests/psapi_main.c
+# |   *	dlls/advapi32/crypt.c, dlls/advapi32/tests/security.c, dlls/kernel32/tests/virtual.c, dlls/ntdll/unix/loader.c,
+# | 	dlls/ntdll/unix/server.c, dlls/ntdll/unix/signal_arm.c, dlls/ntdll/unix/signal_arm64.c, dlls/ntdll/unix/signal_i386.c,
+# | 	dlls/ntdll/unix/signal_powerpc.c, dlls/ntdll/unix/signal_x86_64.c, dlls/ntdll/unix/unix_private.h,
+# | 	dlls/ntdll/unix/virtual.c, dlls/psapi/tests/psapi_main.c
 # |
 if test "$enable_ntdll_WRITECOPY" -eq 1; then
 	patch_apply ntdll-WRITECOPY/0001-ntdll-Trigger-write-watches-before-passing-userdata-.patch
@@ -3930,7 +3930,7 @@ fi
 # |   *	[#42647] Implement stub handler for int 0x2e
 # |
 # | Modified files:
-# |   *	dlls/ntdll/signal_i386.c
+# |   *	dlls/ntdll/unix/signal_i386.c
 # |
 if test "$enable_ntdll_Interrupt_0x2e" -eq 1; then
 	patch_apply ntdll-Interrupt-0x2e/0001-ntdll-Catch-windows-int-0x2e-syscall-on-i386.patch
@@ -4148,11 +4148,11 @@ fi
 # | 	dlls/krnl386.exe16/task.c, dlls/krnl386.exe16/thunk.c, dlls/krnl386.exe16/wowthunk.c, dlls/ntdll/actctx.c,
 # | 	dlls/ntdll/directory.c, dlls/ntdll/loader.c, dlls/ntdll/locale.c, dlls/ntdll/ntdll_misc.h, dlls/ntdll/path.c,
 # | 	dlls/ntdll/process.c, dlls/ntdll/signal_i386.c, dlls/ntdll/tests/exception.c, dlls/ntdll/thread.c,
-# | 	dlls/ntdll/unix/thread.c, dlls/ntdll/unix/unix_private.h, dlls/ntdll/unix/virtual.c, dlls/ntdll/unixlib.h,
-# | 	dlls/system.drv16/system.c, dlls/toolhelp.dll16/toolhelp.c, dlls/user.exe16/message.c, dlls/user.exe16/user.c,
-# | 	dlls/user.exe16/window.c, include/winternl.h, libs/wine/loader.c, server/mapping.c, tools/winebuild/build.h,
-# | 	tools/winebuild/import.c, tools/winebuild/parser.c, tools/winebuild/relay.c, tools/winebuild/res32.c,
-# | 	tools/winebuild/spec16.c, tools/winebuild/spec32.c, tools/winebuild/utils.c
+# | 	dlls/ntdll/unix/signal_i386.c, dlls/ntdll/unix/thread.c, dlls/ntdll/unix/unix_private.h, dlls/ntdll/unix/virtual.c,
+# | 	dlls/ntdll/unixlib.h, dlls/system.drv16/system.c, dlls/toolhelp.dll16/toolhelp.c, dlls/user.exe16/message.c,
+# | 	dlls/user.exe16/user.c, dlls/user.exe16/window.c, include/winternl.h, libs/wine/loader.c, server/mapping.c,
+# | 	tools/winebuild/build.h, tools/winebuild/import.c, tools/winebuild/parser.c, tools/winebuild/relay.c,
+# | 	tools/winebuild/res32.c, tools/winebuild/spec16.c, tools/winebuild/spec32.c, tools/winebuild/utils.c
 # |
 if test "$enable_winebuild_Fake_Dlls" -eq 1; then
 	patch_apply winebuild-Fake_Dlls/0001-kernel32-tests-Add-basic-tests-for-fake-dlls.patch
@@ -4190,7 +4190,7 @@ fi
 # |   *	[#48291] Detroit: Become Human crashes on launch
 # |
 # | Modified files:
-# |   *	configure.ac, dlls/ntdll/signal_x86_64.c, tools/winebuild/spec32.c
+# |   *	configure.ac, dlls/ntdll/unix/signal_x86_64.c, tools/winebuild/spec32.c
 # |
 if test "$enable_ntdll_Syscall_Emulation" -eq 1; then
 	patch_apply ntdll-Syscall_Emulation/0001-ntdll-Support-x86_64-syscall-emulation.patch
@@ -4371,7 +4371,7 @@ fi
 # |   *	[#47970] Legends of Runeterra crashes at launch
 # |
 # | Modified files:
-# |   *	dlls/ntdll/signal_x86_64.c
+# |   *	dlls/ntdll/unix/signal_x86_64.c
 # |
 if test "$enable_ntdll_x86_64_SegDs" -eq 1; then
 	patch_apply ntdll-x86_64_SegDs/0001-ntdll-Report-SegDs-to-be-identical-to-SegSs-on-x86_6.patch
 
diff --git a/patches/winebuild-Fake_Dlls/0002-krnl386.exe16-Do-not-abuse-WOW32Reserved-field-for-1.patch b/patches/winebuild-Fake_Dlls/0002-krnl386.exe16-Do-not-abuse-WOW32Reserved-field-for-1.patch
index 012936760..15aaa85df 100644
--- a/patches/winebuild-Fake_Dlls/0002-krnl386.exe16-Do-not-abuse-WOW32Reserved-field-for-1.patch
+++ b/patches/winebuild-Fake_Dlls/0002-krnl386.exe16-Do-not-abuse-WOW32Reserved-field-for-1.patch
@@ -1,4 +1,4 @@
-From 362b04b78c2da18e81dd4f571d3671d452c76634 Mon Sep 17 00:00:00 2001
+From 25d08438aba3dee16c79ce3168a4f76f39816fad Mon Sep 17 00:00:00 2001
 From: Sebastian Lackner <sebastian@fds-team.de>
 Date: Tue, 16 May 2017 04:37:52 +0200
 Subject: [PATCH] krnl386.exe16: Do not abuse WOW32Reserved field for 16-bit
@@ -13,7 +13,7 @@ Subject: [PATCH] krnl386.exe16: Do not abuse WOW32Reserved field for 16-bit
  dlls/krnl386.exe16/task.c             | 14 +++++------
  dlls/krnl386.exe16/thunk.c            | 36 +++++++++++++--------------
  dlls/krnl386.exe16/wowthunk.c         | 20 +++++++--------
- dlls/ntdll/signal_i386.c              |  2 +-
+ dlls/ntdll/unix/signal_i386.c         |  2 +-
  dlls/system.drv16/system.c            |  2 +-
  dlls/toolhelp.dll16/toolhelp.c        |  6 ++---
  dlls/user.exe16/message.c             | 16 ++++++------
@@ -267,10 +267,10 @@ index 39a60cb97a9..21de62c5a01 100644
      context->Esp   = OFFSETOF(pData->old_ss_sp) - sizeof(DWORD); /*ret addr*/
      pData->old_ss_sp = 0;
 diff --git a/dlls/krnl386.exe16/thunk.c b/dlls/krnl386.exe16/thunk.c
-index 78925f594ba..141acb8d5e6 100644
+index e913a08f88c..ecc94371488 100644
 --- a/dlls/krnl386.exe16/thunk.c
 +++ b/dlls/krnl386.exe16/thunk.c
-@@ -428,7 +428,7 @@ void WINAPI __regs_QT_Thunk( CONTEXT *context )
+@@ -429,7 +429,7 @@ void WINAPI __regs_QT_Thunk( CONTEXT *context )
      context16.Eip   = LOWORD(context->Edx);
      /* point EBP to the STACK16FRAME on the stack
       * for the call_to_16 to set up the register content on calling */
@@ -279,7 +279,7 @@ index 78925f594ba..141acb8d5e6 100644
  
      /*
       * used to be (problematic):
-@@ -450,7 +450,7 @@ void WINAPI __regs_QT_Thunk( CONTEXT *context )
+@@ -451,7 +451,7 @@ void WINAPI __regs_QT_Thunk( CONTEXT *context )
       * the number of parameters that the Win16 function
       * accepted (that it popped from the corresponding Win16 stack) */
      context->Esp +=   LOWORD(context16.Esp) -
@@ -288,7 +288,7 @@ index 78925f594ba..141acb8d5e6 100644
  }
  DEFINE_REGS_ENTRYPOINT( QT_Thunk )
  
-@@ -554,7 +554,7 @@ void WINAPI __regs_FT_Thunk( CONTEXT *context )
+@@ -555,7 +555,7 @@ void WINAPI __regs_FT_Thunk( CONTEXT *context )
  
      context16.SegCs = HIWORD(callTarget);
      context16.Eip   = LOWORD(callTarget);
@@ -297,7 +297,7 @@ index 78925f594ba..141acb8d5e6 100644
  
      argsize  = context->Ebp-context->Esp-0x40;
      if (argsize > sizeof(newstack)) argsize = sizeof(newstack);
-@@ -566,8 +566,8 @@ void WINAPI __regs_FT_Thunk( CONTEXT *context )
+@@ -567,8 +567,8 @@ void WINAPI __regs_FT_Thunk( CONTEXT *context )
  	if (mapESPrelative & (1 << i))
  	{
  	    SEGPTR *arg = (SEGPTR *)newstack[i];
@@ -308,7 +308,7 @@ index 78925f594ba..141acb8d5e6 100644
                                + (*(LPBYTE *)arg - oldstack));
  	}
  
-@@ -577,7 +577,7 @@ void WINAPI __regs_FT_Thunk( CONTEXT *context )
+@@ -578,7 +578,7 @@ void WINAPI __regs_FT_Thunk( CONTEXT *context )
      context->Ecx = context16.Ecx;
  
      context->Esp +=   LOWORD(context16.Esp) -
@@ -317,7 +317,7 @@ index 78925f594ba..141acb8d5e6 100644
  
      /* Copy modified buffers back to 32-bit stack */
      memcpy( oldstack, newstack, argsize );
-@@ -712,7 +712,7 @@ void WINAPI __regs_Common32ThkLS( CONTEXT *context )
+@@ -713,7 +713,7 @@ void WINAPI __regs_Common32ThkLS( CONTEXT *context )
      context16.Edi   = LOWORD(context->Ecx);
      context16.SegCs = HIWORD(context->Eax);
      context16.Eip   = LOWORD(context->Eax);
@@ -326,7 +326,7 @@ index 78925f594ba..141acb8d5e6 100644
  
      argsize = HIWORD(context->Edx) * 4;
  
-@@ -768,7 +768,7 @@ void WINAPI __regs_OT_32ThkLSF( CONTEXT *context )
+@@ -769,7 +769,7 @@ void WINAPI __regs_OT_32ThkLSF( CONTEXT *context )
  
      context16.SegCs = HIWORD(context->Edx);
      context16.Eip   = LOWORD(context->Edx);
@@ -335,7 +335,7 @@ index 78925f594ba..141acb8d5e6 100644
  
      argsize = 2 * *(WORD *)context->Esp + 2;
  
-@@ -781,7 +781,7 @@ void WINAPI __regs_OT_32ThkLSF( CONTEXT *context )
+@@ -782,7 +782,7 @@ void WINAPI __regs_OT_32ThkLSF( CONTEXT *context )
              (LPBYTE)CURRENT_STACK16 - argsize, argsize );
  
      context->Esp +=   LOWORD(context16.Esp) -
@@ -344,7 +344,7 @@ index 78925f594ba..141acb8d5e6 100644
  }
  DEFINE_REGS_ENTRYPOINT( OT_32ThkLSF )
  
-@@ -1233,26 +1233,26 @@ void WINAPI __regs_K32Thk1632Prolog( CONTEXT *context )
+@@ -1234,26 +1234,26 @@ void WINAPI __regs_K32Thk1632Prolog( CONTEXT *context )
        DWORD argSize = context->Ebp - context->Esp;
        char *stack16 = (char *)context->Esp - 4;
        STACK16FRAME *frame16 = (STACK16FRAME *)stack16 - 1;
@@ -375,7 +375,7 @@ index 78925f594ba..141acb8d5e6 100644
     }
  
      /* entry_point is never used again once the entry point has
-@@ -1275,7 +1275,7 @@ void WINAPI __regs_K32Thk1632Epilog( CONTEXT *context )
+@@ -1276,7 +1276,7 @@ void WINAPI __regs_K32Thk1632Epilog( CONTEXT *context )
     if (   code[5] == 0xFF && code[6] == 0x55 && code[7] == 0xFC
         && code[13] == 0x66 && code[14] == 0xCB)
     {
@@ -384,7 +384,7 @@ index 78925f594ba..141acb8d5e6 100644
        char *stack16 = (char *)(frame16 + 1);
        DWORD argSize = frame16->ebp - (DWORD)stack16;
        char *stack32 = (char *)frame16->frame32 - argSize;
-@@ -1283,15 +1283,15 @@ void WINAPI __regs_K32Thk1632Epilog( CONTEXT *context )
+@@ -1284,15 +1284,15 @@ void WINAPI __regs_K32Thk1632Epilog( CONTEXT *context )
        DWORD nArgsPopped = context->Esp - (DWORD)stack32;
  
        TRACE("before SYSTHUNK hack: EBP: %08x ESP: %08x cur_stack: %p\n",
@@ -403,7 +403,7 @@ index 78925f594ba..141acb8d5e6 100644
     }
  }
  DEFINE_REGS_ENTRYPOINT( K32Thk1632Epilog )
-@@ -2302,7 +2302,7 @@ void WINAPI Throw16( LPCATCHBUF lpbuf, INT16 retval, CONTEXT *context )
+@@ -2303,7 +2303,7 @@ void WINAPI Throw16( LPCATCHBUF lpbuf, INT16 retval, CONTEXT *context )
      frame32 = pFrame->frame32;
      while (frame32 && frame32->frame16)
      {
@@ -472,11 +472,11 @@ index 2dddbf93289..3a4b104a673 100644
              SYSLEVEL_CheckNotLevel( 2 );
          }
      }
-diff --git a/dlls/ntdll/signal_i386.c b/dlls/ntdll/signal_i386.c
-index e905ed0af17..8a976f7745d 100644
---- a/dlls/ntdll/signal_i386.c
-+++ b/dlls/ntdll/signal_i386.c
-@@ -912,7 +912,7 @@ static inline void *init_handler( const ucontext_t *sigcontext, WORD *fs, WORD *
+diff --git a/dlls/ntdll/unix/signal_i386.c b/dlls/ntdll/unix/signal_i386.c
+index 2928f314358..138f56b94eb 100644
+--- a/dlls/ntdll/unix/signal_i386.c
++++ b/dlls/ntdll/unix/signal_i386.c
+@@ -645,7 +645,7 @@ static inline void *init_handler( const ucontext_t *sigcontext )
           * SS is still non-system segment. This is why both CS and SS
           * are checked.
           */
@@ -630,7 +630,7 @@ index bf86719325b..1f53bdc9540 100644
      /* don't use WIN_Handle32 here, we don't care about the full handle */
      return IsWindow( HWND_32(hwnd) );
 diff --git a/include/winternl.h b/include/winternl.h
-index dd63300d915..0aa0ac311c3 100644
+index acbce20c212..68c1ae3fd82 100644
 --- a/include/winternl.h
 +++ b/include/winternl.h
 @@ -362,7 +362,7 @@ typedef struct _TEB
diff --git a/patches/winebuild-Fake_Dlls/0003-winebuild-Generate-syscall-thunks-for-ntdll-exports.patch b/patches/winebuild-Fake_Dlls/0003-winebuild-Generate-syscall-thunks-for-ntdll-exports.patch
index 684c28e16..547e27f8f 100644
--- a/patches/winebuild-Fake_Dlls/0003-winebuild-Generate-syscall-thunks-for-ntdll-exports.patch
+++ b/patches/winebuild-Fake_Dlls/0003-winebuild-Generate-syscall-thunks-for-ntdll-exports.patch
@@ -1,4 +1,4 @@
-From e60eb454ecfb4c043a585c1ecd2970c92be1c664 Mon Sep 17 00:00:00 2001
+From 0c4d2573b123f2198f74292133b7a6eefa472620 Mon Sep 17 00:00:00 2001
 From: =?UTF-8?q?Michael=20M=C3=BCller?= <michael@fds-team.de>
 Date: Thu, 11 May 2017 05:32:55 +0200
 Subject: [PATCH] winebuild: Generate syscall thunks for ntdll exports.
@@ -22,7 +22,7 @@ Based on a patch by Erich E. Hoover.
  14 files changed, 214 insertions(+), 32 deletions(-)
 
 diff --git a/dlls/ntdll/loader.c b/dlls/ntdll/loader.c
-index ffbc9fabb23..a633099877d 100644
+index 0c8f05285c4..26c540050dc 100644
 --- a/dlls/ntdll/loader.c
 +++ b/dlls/ntdll/loader.c
 @@ -3810,6 +3810,7 @@ PIMAGE_NT_HEADERS WINAPI RtlImageNtHeader(HMODULE hModule)
@@ -39,23 +39,23 @@ index ffbc9fabb23..a633099877d 100644
  
 +    NtCurrentTeb()->WOW32Reserved = __wine_syscall_dispatcher;
 +
-     pthread_sigmask( SIG_UNBLOCK, &server_block_set, NULL );
- 
      if (process_detaching) return;
+ 
+     RtlEnterCriticalSection( &loader_section );
 diff --git a/dlls/ntdll/signal_i386.c b/dlls/ntdll/signal_i386.c
-index 3be6342a945..85329be4f42 100644
+index 21cc1b3ead4..18be5693a7d 100644
 --- a/dlls/ntdll/signal_i386.c
 +++ b/dlls/ntdll/signal_i386.c
-@@ -444,6 +444,8 @@ struct stack_layout
+@@ -346,6 +346,8 @@ __ASM_STDCALL_FUNC( RtlCaptureContext, 4,
+                     "ret $4" )
  
- static ULONG first_ldt_entry = 32;
  
 +extern NTSTATUS WINAPI __syscall_NtGetContextThread( HANDLE handle, CONTEXT *context );
 +
- enum i386_trap_code
- {
-     TRAP_x86_UNKNOWN    = -1,  /* Unknown fault (TRAP_sig not defined) */
-@@ -1127,7 +1129,7 @@ NTSTATUS CDECL DECLSPEC_HIDDEN __regs_NtGetContextThread( DWORD edi, DWORD esi,
+ /***********************************************************************
+  *              NtGetContextThread  (NTDLL.@)
+  *              ZwGetContextThread  (NTDLL.@)
+@@ -370,7 +372,7 @@ NTSTATUS CDECL DECLSPEC_HIDDEN __regs_NtGetContextThread( DWORD edi, DWORD esi,
      {
          context->Ebp    = ebp;
          context->Esp    = (DWORD)&retaddr;
@@ -78,10 +78,10 @@ index a5e6faa461a..51938bf84cc 100644
      ok( context.SegCs == LOWORD(expect.SegCs), "wrong SegCs %08x/%08x\n", context.SegCs, expect.SegCs );
      ok( context.SegDs == LOWORD(expect.SegDs), "wrong SegDs %08x/%08x\n", context.SegDs, expect.SegDs );
 diff --git a/dlls/ntdll/thread.c b/dlls/ntdll/thread.c
-index 49daa33ca58..17b5d40215a 100644
+index 5a6809638ae..fa10cdf1062 100644
 --- a/dlls/ntdll/thread.c
 +++ b/dlls/ntdll/thread.c
-@@ -173,6 +173,7 @@ int __cdecl __wine_dbg_output( const char *str )
+@@ -170,6 +170,7 @@ int __cdecl __wine_dbg_output( const char *str )
      return unix_funcs->dbg_output( str );
  }
  
@@ -89,17 +89,17 @@ index 49daa33ca58..17b5d40215a 100644
  
  /***********************************************************************
   *           thread_init
-@@ -189,7 +190,7 @@ TEB *thread_init( SIZE_T *info_size, BOOL *suspend )
-     signal_init_early();
- 
-     teb = unix_funcs->init_threading( &nb_threads, &__wine_ldt_copy, info_size, suspend, &server_cpus,
--                                      &is_wow64, &server_start_time );
-+                                      &is_wow64, &server_start_time, __wine_syscall_dispatcher );
+@@ -181,7 +182,7 @@ int __cdecl __wine_dbg_output( const char *str )
+ TEB *thread_init( SIZE_T *info_size, BOOL *suspend )
+ {
+     TEB *teb = unix_funcs->init_threading( &nb_threads, &__wine_ldt_copy, info_size, suspend, &server_cpus,
+-                                           &is_wow64, &server_start_time );
++                                           &is_wow64, &server_start_time, __wine_syscall_dispatcher );
  
      peb = teb->Peb;
      peb->FastPebLock        = &peb_lock;
 diff --git a/dlls/ntdll/unix/thread.c b/dlls/ntdll/unix/thread.c
-index d4b7a51a627..bdc87e4b9cf 100644
+index 97b191e1a5b..2dbaa43e731 100644
 --- a/dlls/ntdll/unix/thread.c
 +++ b/dlls/ntdll/unix/thread.c
 @@ -85,7 +85,7 @@ static void pthread_exit_wrapper( int status )
@@ -120,42 +120,42 @@ index d4b7a51a627..bdc87e4b9cf 100644
      thread_data->request_fd = -1;
      thread_data->reply_fd   = -1;
 diff --git a/dlls/ntdll/unix/unix_private.h b/dlls/ntdll/unix/unix_private.h
-index 19104f0f5cc..bdf8bc99e3f 100644
+index 19dd216fc35..a1c48a52606 100644
 --- a/dlls/ntdll/unix/unix_private.h
 +++ b/dlls/ntdll/unix/unix_private.h
-@@ -101,7 +101,7 @@ extern void CDECL server_release_fd( HANDLE handle, int unix_fd ) DECLSPEC_HIDDE
- extern void CDECL server_init_process_done(void) DECLSPEC_HIDDEN;
+@@ -107,7 +107,7 @@ extern void CDECL server_release_fd( HANDLE handle, int unix_fd ) DECLSPEC_HIDDE
+ extern void CDECL server_init_process_done( void *relay ) DECLSPEC_HIDDEN;
  extern TEB * CDECL init_threading( int *nb_threads_ptr, struct ldt_copy **ldt_copy, SIZE_T *size,
                                     BOOL *suspend, unsigned int *cpus, BOOL *wow64,
 -                                   timeout_t *start_time ) DECLSPEC_HIDDEN;
 +                                   timeout_t *start_time, void *syscall_handler ) DECLSPEC_HIDDEN;
- extern void CDECL DECLSPEC_NORETURN start_process( PRTL_THREAD_START_ROUTINE entry, BOOL suspend, void *relay ) DECLSPEC_HIDDEN;
- extern void CDECL DECLSPEC_NORETURN abort_thread( int status ) DECLSPEC_HIDDEN;
  extern void CDECL DECLSPEC_NORETURN exit_thread( int status ) DECLSPEC_HIDDEN;
+ extern void CDECL DECLSPEC_NORETURN exit_process( int status ) DECLSPEC_HIDDEN;
+ extern NTSTATUS CDECL get_thread_ldt_entry( HANDLE handle, void *data, ULONG len, ULONG *ret_len ) DECLSPEC_HIDDEN;
 diff --git a/dlls/ntdll/unixlib.h b/dlls/ntdll/unixlib.h
-index 6a751993421..4e39ed53786 100644
+index 4c580c49d13..4f0080db03d 100644
 --- a/dlls/ntdll/unixlib.h
 +++ b/dlls/ntdll/unixlib.h
 @@ -28,7 +28,7 @@ struct ldt_copy;
  struct msghdr;
  
  /* increment this when you change the function table */
--#define NTDLL_UNIXLIB_VERSION 33
-+#define NTDLL_UNIXLIB_VERSION 34
+-#define NTDLL_UNIXLIB_VERSION 38
++#define NTDLL_UNIXLIB_VERSION 39
  
  struct unix_funcs
  {
-@@ -174,7 +174,7 @@ struct unix_funcs
+@@ -199,7 +199,7 @@ struct unix_funcs
  
      /* thread/process functions */
      TEB *         (CDECL *init_threading)( int *nb_threads_ptr, struct ldt_copy **ldt_copy, SIZE_T *size,
 -                                           BOOL *suspend, unsigned int *cpus, BOOL *wow64, timeout_t *start_time );
 +                                           BOOL *suspend, unsigned int *cpus, BOOL *wow64, timeout_t *start_time, void *syscall_handler );
-     void          (CDECL *start_process)( PRTL_THREAD_START_ROUTINE entry, BOOL suspend, void *relay );
-     void          (CDECL *abort_thread)( int status );
      void          (CDECL *exit_thread)( int status );
+     void          (CDECL *exit_process)( int status );
+     NTSTATUS      (CDECL *get_thread_ldt_entry)( HANDLE handle, void *data, ULONG len, ULONG *ret_len );
 diff --git a/include/winternl.h b/include/winternl.h
-index 9b8218c861f..ff6916c98e7 100644
+index 68c1ae3fd82..f2da9157aab 100644
 --- a/include/winternl.h
 +++ b/include/winternl.h
 @@ -359,7 +359,7 @@ typedef struct _TEB
diff --git a/patches/winebuild-Fake_Dlls/0005-winebuild-Add-stub-functions-in-fake-dlls.patch b/patches/winebuild-Fake_Dlls/0005-winebuild-Add-stub-functions-in-fake-dlls.patch
index 7dcd7ad93..f96d51aee 100644
--- a/patches/winebuild-Fake_Dlls/0005-winebuild-Add-stub-functions-in-fake-dlls.patch
+++ b/patches/winebuild-Fake_Dlls/0005-winebuild-Add-stub-functions-in-fake-dlls.patch
@@ -1,4 +1,4 @@
-From 1c0ba3961674f316dba2d89042571b7863076f08 Mon Sep 17 00:00:00 2001
+From 167ad04157dd746ee9395afa9505fe00cc866f9b Mon Sep 17 00:00:00 2001
 From: =?UTF-8?q?Michael=20M=C3=BCller?= <michael@fds-team.de>
 Date: Mon, 15 May 2017 16:27:56 +0200
 Subject: [PATCH] winebuild: Add stub functions in fake dlls.
@@ -62,7 +62,7 @@ index 926fa913866..902907329c0 100644
      CloseHandle(map);
      CloseHandle(file);
 diff --git a/dlls/ntdll/loader.c b/dlls/ntdll/loader.c
-index b42cff8bcd4..b21d88bb13b 100644
+index 26c540050dc..09d3870c31a 100644
 --- a/dlls/ntdll/loader.c
 +++ b/dlls/ntdll/loader.c
 @@ -3811,6 +3811,7 @@ PIMAGE_NT_HEADERS WINAPI RtlImageNtHeader(HMODULE hModule)
@@ -73,19 +73,19 @@ index b42cff8bcd4..b21d88bb13b 100644
  
  /******************************************************************
   *		LdrInitializeThunk (NTDLL.@)
-@@ -3829,6 +3830,7 @@ void WINAPI LdrInitializeThunk( CONTEXT *context, void **entry, ULONG_PTR unknow
+@@ -3828,6 +3829,7 @@ void WINAPI LdrInitializeThunk( CONTEXT *context, void **entry, ULONG_PTR unknow
      LPCWSTR load_path = NtCurrentTeb()->Peb->ProcessParameters->DllPath.Buffer;
  
      NtCurrentTeb()->WOW32Reserved = __wine_syscall_dispatcher;
 +    NtCurrentTeb()->Spare2 = (ULONG_PTR)__wine_fakedll_dispatcher;
  
-     pthread_sigmask( SIG_UNBLOCK, &server_block_set, NULL );
+     if (process_detaching) return;
  
 diff --git a/dlls/ntdll/thread.c b/dlls/ntdll/thread.c
-index ed77e4a2e98..a988d4c3e6b 100644
+index fa10cdf1062..4840f527e59 100644
 --- a/dlls/ntdll/thread.c
 +++ b/dlls/ntdll/thread.c
-@@ -175,6 +175,39 @@ int __cdecl __wine_dbg_output( const char *str )
+@@ -172,6 +172,39 @@ int __cdecl __wine_dbg_output( const char *str )
  
  extern void DECLSPEC_NORETURN __wine_syscall_dispatcher( void );
  
@@ -125,16 +125,16 @@ index ed77e4a2e98..a988d4c3e6b 100644
  /***********************************************************************
   *           thread_init
   *
-@@ -190,6 +223,7 @@ TEB *thread_init( SIZE_T *info_size, BOOL *suspend )
- 
-     teb = unix_funcs->init_threading( &nb_threads, &__wine_ldt_copy, info_size, suspend, &server_cpus,
-                                       &is_wow64, &server_start_time, __wine_syscall_dispatcher );
+@@ -183,6 +216,7 @@ TEB *thread_init( SIZE_T *info_size, BOOL *suspend )
+ {
+     TEB *teb = unix_funcs->init_threading( &nb_threads, &__wine_ldt_copy, info_size, suspend, &server_cpus,
+                                            &is_wow64, &server_start_time, __wine_syscall_dispatcher );
 +    teb->Spare2 = (ULONG_PTR)__wine_fakedll_dispatcher;
  
      peb = teb->Peb;
      peb->FastPebLock        = &peb_lock;
 diff --git a/include/winternl.h b/include/winternl.h
-index 065f3d24f52..199b8fc52f2 100644
+index f2da9157aab..ce8021af503 100644
 --- a/include/winternl.h
 +++ b/include/winternl.h
 @@ -398,7 +398,7 @@ typedef struct _TEB
diff --git a/patches/winebuild-Fake_Dlls/0010-tools-winebuild-Add-syscall-thunks-for-64-bit.patch b/patches/winebuild-Fake_Dlls/0010-tools-winebuild-Add-syscall-thunks-for-64-bit.patch
index f1f5a5e5c..6024e5a2f 100644
--- a/patches/winebuild-Fake_Dlls/0010-tools-winebuild-Add-syscall-thunks-for-64-bit.patch
+++ b/patches/winebuild-Fake_Dlls/0010-tools-winebuild-Add-syscall-thunks-for-64-bit.patch
@@ -1,4 +1,4 @@
-From 7a2dceb0c325caa23d55f4ed4747221b09885c85 Mon Sep 17 00:00:00 2001
+From a5b4feebd008daab008f72567fe0001da619030e Mon Sep 17 00:00:00 2001
 From: =?UTF-8?q?Michael=20M=C3=BCller?= <michael@fds-team.de>
 Date: Thu, 7 Sep 2017 00:38:09 +0200
 Subject: [PATCH] tools/winebuild: Add syscall thunks for 64 bit.
@@ -15,10 +15,10 @@ Subject: [PATCH] tools/winebuild: Add syscall thunks for 64 bit.
  8 files changed, 306 insertions(+), 14 deletions(-)
 
 diff --git a/dlls/kernel32/tests/loader.c b/dlls/kernel32/tests/loader.c
-index 1f525194ce7..21af7b4ce7a 100644
+index 95939ba6bde..ae5462f6e55 100644
 --- a/dlls/kernel32/tests/loader.c
 +++ b/dlls/kernel32/tests/loader.c
-@@ -1574,7 +1574,7 @@ static void test_filenames(void)
+@@ -1573,7 +1573,7 @@ static void test_filenames(void)
  
  static void test_FakeDLL(void)
  {
@@ -27,7 +27,7 @@ index 1f525194ce7..21af7b4ce7a 100644
      NTSTATUS (WINAPI *pNtSetEvent)(HANDLE, ULONG *) = NULL;
      IMAGE_EXPORT_DIRECTORY *dir;
      HMODULE module = GetModuleHandleA("ntdll.dll");
-@@ -1616,8 +1616,13 @@ static void test_FakeDLL(void)
+@@ -1615,8 +1615,13 @@ static void test_FakeDLL(void)
  
          dll_func = (BYTE *)GetProcAddress(module, func_name);
          ok(dll_func != NULL, "%s: GetProcAddress returned NULL\n", func_name);
@@ -42,10 +42,10 @@ index 1f525194ce7..21af7b4ce7a 100644
              todo_wine ok(0, "%s: Export is a stub-function, skipping\n", func_name);
              continue;
 diff --git a/dlls/ntdll/unix/thread.c b/dlls/ntdll/unix/thread.c
-index 449e5814c2e..05cbd4b443b 100644
+index 2dbaa43e731..e1da90222d3 100644
 --- a/dlls/ntdll/unix/thread.c
 +++ b/dlls/ntdll/unix/thread.c
-@@ -108,7 +108,7 @@ TEB * CDECL init_threading( int *nb_threads_ptr, struct ldt_copy **ldt_copy, SIZ
+@@ -110,7 +110,7 @@ TEB * CDECL init_threading( int *nb_threads_ptr, struct ldt_copy **ldt_copy, SIZ
      dbg_init();
      server_init_process();
      info_size = server_init_thread( teb->Peb, suspend );
@@ -55,23 +55,23 @@ index 449e5814c2e..05cbd4b443b 100644
  
      if (size) *size = info_size;
 diff --git a/dlls/ntdll/unix/unix_private.h b/dlls/ntdll/unix/unix_private.h
-index 5f891d52e17..6ccd2ff6cc4 100644
+index a1c48a52606..9c9e5b80b0c 100644
 --- a/dlls/ntdll/unix/unix_private.h
 +++ b/dlls/ntdll/unix/unix_private.h
-@@ -137,7 +137,7 @@ extern void virtual_init(void) DECLSPEC_HIDDEN;
+@@ -152,7 +152,7 @@ extern void virtual_init(void) DECLSPEC_HIDDEN;
  extern TEB *virtual_alloc_first_teb(void) DECLSPEC_HIDDEN;
  extern NTSTATUS virtual_alloc_teb( TEB **ret_teb ) DECLSPEC_HIDDEN;
  extern void virtual_free_teb( TEB *teb ) DECLSPEC_HIDDEN;
 -extern void virtual_map_user_shared_data(void) DECLSPEC_HIDDEN;
 +extern void virtual_map_user_shared_data(void *) DECLSPEC_HIDDEN;
- 
- extern void signal_init_threading(void) DECLSPEC_HIDDEN;
- extern NTSTATUS signal_alloc_thread( TEB *teb ) DECLSPEC_HIDDEN;
+ extern NTSTATUS virtual_handle_fault( LPCVOID addr, DWORD err, BOOL on_signal_stack ) DECLSPEC_HIDDEN;
+ extern BOOL virtual_is_valid_code_address( const void *addr, SIZE_T size ) DECLSPEC_HIDDEN;
+ extern int virtual_handle_stack_fault( void *addr ) DECLSPEC_HIDDEN;
 diff --git a/dlls/ntdll/unix/virtual.c b/dlls/ntdll/unix/virtual.c
-index 83e51c369cb..40629214479 100644
+index 660323d4dcc..a5e5cb8422d 100644
 --- a/dlls/ntdll/unix/virtual.c
 +++ b/dlls/ntdll/unix/virtual.c
-@@ -2742,14 +2742,14 @@ TEB *virtual_alloc_first_teb(void)
+@@ -2588,14 +2588,14 @@ TEB *virtual_alloc_first_teb(void)
      TEB *teb;
      PEB *peb;
      NTSTATUS status;
@@ -88,7 +88,7 @@ index 83e51c369cb..40629214479 100644
      if (status)
      {
          ERR( "wine: failed to map the shared user data: %08x\n", status );
-@@ -2943,11 +2943,12 @@ void virtual_clear_thread_stack( void *stack_end )
+@@ -2787,11 +2787,12 @@ void virtual_clear_thread_stack( void *stack_end )
      if (force_exec_prot) mprotect( stack, size, PROT_READ | PROT_WRITE | PROT_EXEC );
  }
  
@@ -102,7 +102,7 @@ index 83e51c369cb..40629214479 100644
  {
      static const WCHAR wine_usdW[] = {'\\','K','e','r','n','e','l','O','b','j','e','c','t','s',
                                        '\\','_','_','w','i','n','e','_','u','s','e','r','_','s','h','a','r','e','d','_','d','a','t','a',0};
-@@ -2970,6 +2971,11 @@ void virtual_map_user_shared_data(void)
+@@ -2814,6 +2815,11 @@ void virtual_map_user_shared_data(void)
          ERR( "failed to remap the process USD: %d\n", res );
          exit(1);
      }
diff --git a/patches/wow64cpu-Wow64Transition/0002-ntdll-Add-a-stub-implementation-of-Wow64Transition.patch b/patches/wow64cpu-Wow64Transition/0002-ntdll-Add-a-stub-implementation-of-Wow64Transition.patch
index 3e655e0cb..ec9de02f7 100644
--- a/patches/wow64cpu-Wow64Transition/0002-ntdll-Add-a-stub-implementation-of-Wow64Transition.patch
+++ b/patches/wow64cpu-Wow64Transition/0002-ntdll-Add-a-stub-implementation-of-Wow64Transition.patch
@@ -1,4 +1,4 @@
-From 68293a760784f2b4fd2fe79bbba443d76b17e11a Mon Sep 17 00:00:00 2001
+From 8281eb9d4c2c5d20a336fda58c5bf1e603f05590 Mon Sep 17 00:00:00 2001
 From: Zebediah Figura <z.figura12@gmail.com>
 Date: Wed, 8 Aug 2018 20:00:15 -0500
 Subject: [PATCH] ntdll: Add a stub implementation of Wow64Transition.
@@ -9,10 +9,10 @@ Subject: [PATCH] ntdll: Add a stub implementation of Wow64Transition.
  2 files changed, 11 insertions(+), 1 deletion(-)
 
 diff --git a/dlls/ntdll/loader.c b/dlls/ntdll/loader.c
-index 6155996b7c4..0e99604eb2b 100644
+index 92ae87c6e6d..533bad12103 100644
 --- a/dlls/ntdll/loader.c
 +++ b/dlls/ntdll/loader.c
-@@ -4287,6 +4287,7 @@ NTSTATUS WINAPI NtLoadDriver( const UNICODE_STRING *DriverServiceName )
+@@ -4322,6 +4322,7 @@ NTSTATUS WINAPI NtLoadDriver( const UNICODE_STRING *DriverServiceName )
      return STATUS_NOT_IMPLEMENTED;
  }
  
@@ -20,7 +20,7 @@ index 6155996b7c4..0e99604eb2b 100644
  
  /***********************************************************************
   *           NtUnloadDriver   (NTDLL.@)
-@@ -4345,12 +4346,13 @@ void __wine_process_init(void)
+@@ -4380,13 +4381,14 @@ void __wine_process_init(void)
      static const WCHAR ntdllW[] = {'\\','?','?','\\','C',':','\\','w','i','n','d','o','w','s','\\',
                                     's','y','s','t','e','m','3','2','\\',
                                     'n','t','d','l','l','.','d','l','l',0};
@@ -28,6 +28,7 @@ index 6155996b7c4..0e99604eb2b 100644
      static const WCHAR kernel32W[] = {'\\','?','?','\\','C',':','\\','w','i','n','d','o','w','s','\\',
                                        's','y','s','t','e','m','3','2','\\',
                                        'k','e','r','n','e','l','3','2','.','d','l','l',0};
+     void (WINAPI *kernel32_start_process)(LPTHREAD_START_ROUTINE,void*) = NULL;
      RTL_USER_PROCESS_PARAMETERS *params;
      ACTIVATION_CONTEXT_RUN_LEVEL_INFORMATION runlevel;
 -    WINE_MODREF *wm;
@@ -35,7 +36,7 @@ index 6155996b7c4..0e99604eb2b 100644
      NTSTATUS status;
      ANSI_STRING func_name;
      UNICODE_STRING nt_name;
-@@ -4400,6 +4402,13 @@ void __wine_process_init(void)
+@@ -4429,6 +4431,13 @@ void __wine_process_init(void)
          MESSAGE( "wine: could not load kernel32.dll, status %x\n", status );
          exit(1);
      }
@@ -50,10 +51,10 @@ index 6155996b7c4..0e99604eb2b 100644
      if ((status = LdrGetProcedureAddress( wm->ldr.DllBase, &func_name,
                                            0, (void **)&kernel32_start_process )) != STATUS_SUCCESS)
 diff --git a/dlls/ntdll/ntdll.spec b/dlls/ntdll/ntdll.spec
-index b97eed0bc7d..9e2f6e418eb 100644
+index 05e46bd1b3d..c24889479a4 100644
 --- a/dlls/ntdll/ntdll.spec
 +++ b/dlls/ntdll/ntdll.spec
-@@ -1103,6 +1103,7 @@
+@@ -1111,6 +1111,7 @@
  @ stdcall WinSqmIsOptedIn()
  @ stdcall WinSqmSetDWORD(ptr long long)
  @ stdcall WinSqmStartSession(ptr long long)
diff --git a/patches/ws2_32-WSACleanup/0002-ws2_32-Invalidate-client-side-file-descriptor-cache-.patch b/patches/ws2_32-WSACleanup/0002-ws2_32-Invalidate-client-side-file-descriptor-cache-.patch
index 0861f99c0..7b9e61d85 100644
--- a/patches/ws2_32-WSACleanup/0002-ws2_32-Invalidate-client-side-file-descriptor-cache-.patch
+++ b/patches/ws2_32-WSACleanup/0002-ws2_32-Invalidate-client-side-file-descriptor-cache-.patch
@@ -1,4 +1,4 @@
-From 20661308a50202350a3a2887cbd558b1e931aad1 Mon Sep 17 00:00:00 2001
+From 6cc54a973b9b786166db76df6a4f0a33867103ce Mon Sep 17 00:00:00 2001
 From: Sebastian Lackner <sebastian@fds-team.de>
 Date: Sun, 6 Sep 2015 12:41:17 +0200
 Subject: [PATCH] ws2_32: Invalidate client-side file descriptor cache in
@@ -17,7 +17,7 @@ Subject: [PATCH] ws2_32: Invalidate client-side file descriptor cache in
  9 files changed, 36 insertions(+), 5 deletions(-)
 
 diff --git a/dlls/ntdll/ntdll.spec b/dlls/ntdll/ntdll.spec
-index ce5c580bd54..279845ae830 100644
+index e054eabba3a..82ed6c68cbe 100644
 --- a/dlls/ntdll/ntdll.spec
 +++ b/dlls/ntdll/ntdll.spec
 @@ -1576,6 +1576,7 @@
@@ -29,11 +29,11 @@ index ce5c580bd54..279845ae830 100644
  @ cdecl wine_server_handle_to_fd(long long ptr ptr)
  @ cdecl wine_server_release_fd(long long)
 diff --git a/dlls/ntdll/server.c b/dlls/ntdll/server.c
-index 6fb86a68d6f..2f95e190963 100644
+index 9e1cc85a36e..3f4ba60b7bb 100644
 --- a/dlls/ntdll/server.c
 +++ b/dlls/ntdll/server.c
-@@ -239,6 +239,14 @@ void CDECL wine_server_release_fd( HANDLE handle, int unix_fd )
-     unix_funcs->server_release_fd( handle, unix_fd );
+@@ -130,6 +130,14 @@ int CDECL wine_server_handle_to_fd( HANDLE handle, unsigned int access, int *uni
+     return unix_funcs->server_handle_to_fd( handle, access, unix_fd, options );
  }
  
 + /***********************************************************************
@@ -46,21 +46,21 @@ index 6fb86a68d6f..2f95e190963 100644
 +
  
  /***********************************************************************
-  *           server_init_process
+  *           wine_server_release_fd   (NTDLL.@)
 diff --git a/dlls/ntdll/unix/loader.c b/dlls/ntdll/unix/loader.c
-index 618e3d6adb3..bdda739897b 100644
+index eac43ba42c4..cd11d0d647e 100644
 --- a/dlls/ntdll/unix/loader.c
 +++ b/dlls/ntdll/unix/loader.c
-@@ -1076,6 +1076,7 @@ static struct unix_funcs unix_funcs =
-     server_select,
-     server_wait,
+@@ -1089,6 +1089,7 @@ static struct unix_funcs unix_funcs =
+     get_thread_ldt_entry,
+     wine_server_call,
      server_send_fd,
 +    server_remove_fds_from_cache_by_type,
      server_get_unix_fd,
      server_fd_to_handle,
      server_handle_to_fd,
 diff --git a/dlls/ntdll/unix/server.c b/dlls/ntdll/unix/server.c
-index fb3f98dd579..0754928cfe8 100644
+index cf6f6c3832c..586d0ffcf72 100644
 --- a/dlls/ntdll/unix/server.c
 +++ b/dlls/ntdll/unix/server.c
 @@ -995,6 +995,26 @@ static int remove_fd_from_cache( HANDLE handle )
@@ -91,33 +91,33 @@ index fb3f98dd579..0754928cfe8 100644
  /***********************************************************************
   *           server_get_unix_fd
 diff --git a/dlls/ntdll/unix/unix_private.h b/dlls/ntdll/unix/unix_private.h
-index 03b92f9e912..19104f0f5cc 100644
+index 3e61111cba5..ae0c47b5a79 100644
 --- a/dlls/ntdll/unix/unix_private.h
 +++ b/dlls/ntdll/unix/unix_private.h
-@@ -89,6 +89,7 @@ extern unsigned int CDECL server_select( const select_op_t *select_op, data_size
- extern unsigned int CDECL server_wait( const select_op_t *select_op, data_size_t size, UINT flags,
-                                        const LARGE_INTEGER *timeout ) DECLSPEC_HIDDEN;
+@@ -95,6 +95,7 @@ extern void CDECL virtual_release_address_space(void) DECLSPEC_HIDDEN;
+ extern void CDECL virtual_set_large_address_space(void) DECLSPEC_HIDDEN;
+ 
  extern void CDECL server_send_fd( int fd ) DECLSPEC_HIDDEN;
 +extern void CDECL server_remove_fds_from_cache_by_type( enum server_fd_type type ) DECLSPEC_HIDDEN;
  extern int CDECL server_get_unix_fd( HANDLE handle, unsigned int wanted_access, int *unix_fd,
                                       int *needs_close, enum server_fd_type *type,
                                       unsigned int *options ) DECLSPEC_HIDDEN;
 diff --git a/dlls/ntdll/unixlib.h b/dlls/ntdll/unixlib.h
-index 017a0a71b3f..6a751993421 100644
+index 80d3ce27601..4c580c49d13 100644
 --- a/dlls/ntdll/unixlib.h
 +++ b/dlls/ntdll/unixlib.h
 @@ -28,7 +28,7 @@ struct ldt_copy;
  struct msghdr;
  
  /* increment this when you change the function table */
--#define NTDLL_UNIXLIB_VERSION 32
-+#define NTDLL_UNIXLIB_VERSION 33
+-#define NTDLL_UNIXLIB_VERSION 37
++#define NTDLL_UNIXLIB_VERSION 38
  
  struct unix_funcs
  {
-@@ -189,6 +189,7 @@ struct unix_funcs
-     unsigned int  (CDECL *server_wait)( const select_op_t *select_op, data_size_t size, UINT flags,
-                                         const LARGE_INTEGER *timeout );
+@@ -207,6 +207,7 @@ struct unix_funcs
+     /* server functions */
+     unsigned int  (CDECL *server_call)( void *req_ptr );
      void          (CDECL *server_send_fd)( int fd );
 +    void          (CDECL *server_remove_fds_from_cache_by_type)( enum server_fd_type type );
      int           (CDECL *server_get_unix_fd)( HANDLE handle, unsigned int wanted_access, int *unix_fd,

diff --git a/patches/ntdll-NtContinue/0001-ntdll-Add-stub-for-NtContinue.patch b/patches/ntdll-NtContinue/0001-ntdll-Add-stub-for-NtContinue.patch
deleted file mode 100644
index 7145857bd..000000000
--- a/patches/ntdll-NtContinue/0001-ntdll-Add-stub-for-NtContinue.patch
+++ /dev/null
@@ -1,63 +0,0 @@
-From 9ea4f081689959bd393eab2caaa0ed8237846117 Mon Sep 17 00:00:00 2001
-From: =?UTF-8?q?Michael=20M=C3=BCller?= <michael@fds-team.de>
-Date: Thu, 25 May 2017 05:04:26 +0200
-Subject: [PATCH] ntdll: Add stub for NtContinue.
-
----
- dlls/ntdll/exception.c | 10 +++++++++-
- dlls/ntdll/ntdll.spec  |  4 ++--
- 2 files changed, 11 insertions(+), 3 deletions(-)
-
-diff --git a/dlls/ntdll/exception.c b/dlls/ntdll/exception.c
-index c35312fd1d1..3b85f1efa04 100644
---- a/dlls/ntdll/exception.c
-+++ b/dlls/ntdll/exception.c
-@@ -328,7 +328,6 @@ LONG WINAPI call_unhandled_exception_filter( PEXCEPTION_POINTERS eptr )
-     return unhandled_exception_filter( eptr );
- }
- 
--
- #if defined(__x86_64__) || defined(__arm__) || defined(__aarch64__)
- 
- struct dynamic_unwind_entry
-@@ -667,6 +666,15 @@ PRUNTIME_FUNCTION WINAPI RtlLookupFunctionEntry( ULONG_PTR pc, ULONG_PTR *base,
- 
- #endif  /* __x86_64__ || __arm__ || __aarch64__ */
- 
-+/*********************************************************************
-+ *         NtContinue   (NTDLL.@)
-+ */
-+NTSTATUS WINAPI NtContinue( CONTEXT *context, BOOLEAN alert )
-+{
-+    FIXME( "(%p, %d) stub!\n", context, alert );
-+    return STATUS_NOT_IMPLEMENTED;
-+}
-+
- /*************************************************************
-  *            __wine_spec_unimplemented_stub
-  *
-diff --git a/dlls/ntdll/ntdll.spec b/dlls/ntdll/ntdll.spec
-index 81faf7fc280..d21a6f08ac2 100644
---- a/dlls/ntdll/ntdll.spec
-+++ b/dlls/ntdll/ntdll.spec
-@@ -150,7 +150,7 @@
- @ stdcall NtCompleteConnectPort(ptr)
- # @ stub NtCompressKey
- @ stdcall NtConnectPort(ptr ptr ptr ptr ptr ptr ptr ptr)
--@ stub NtContinue
-+@ stdcall NtContinue(ptr long)
- # @ stub NtCreateDebugObject
- @ stdcall NtCreateDirectoryObject(ptr long ptr)
- @ stdcall NtCreateEvent(ptr long ptr long long)
-@@ -1105,7 +1105,7 @@
- @ stdcall -private ZwCompleteConnectPort(ptr) NtCompleteConnectPort
- # @ stub ZwCompressKey
- @ stdcall -private ZwConnectPort(ptr ptr ptr ptr ptr ptr ptr ptr) NtConnectPort
--@ stub ZwContinue
-+@ stdcall -private ZwContinue(ptr long) NtContinue
- # @ stub ZwCreateDebugObject
- @ stdcall -private ZwCreateDirectoryObject(ptr long ptr) NtCreateDirectoryObject
- @ stdcall -private ZwCreateEvent(ptr long ptr long long) NtCreateEvent
--- 
-2.17.1
-
diff --git a/patches/ntdll-NtContinue/0002-Use-NtContinue-to-continue-execution-after-exception.patch b/patches/ntdll-NtContinue/0002-Use-NtContinue-to-continue-execution-after-exception.patch
deleted file mode 100644
index 902940977..000000000
--- a/patches/ntdll-NtContinue/0002-Use-NtContinue-to-continue-execution-after-exception.patch
+++ /dev/null
@@ -1,82 +0,0 @@
-From 812de54c6fc8f93e8fda01f0802397b183adab59 Mon Sep 17 00:00:00 2001
-From: Andrew Wesie <awesie@gmail.com>
-Date: Fri, 27 Jul 2018 01:26:56 -0500
-Subject: [PATCH] ntdll: Use NtContinue to continue execution after exceptions.
-
-NtContinue is exported by ntdll and some programs expect it to be used to
-restore the thread context after an exception handler returns
-EXCEPTION_CONTINUE_EXECUTION. It must take a context as its first argument
-and restore that context.
-
-Current implementation is a simple wrapper around NtSetContextThread. It is
-unlikely that it has the correct behavior if called by an external caller.
-
-The __syscall_NtContinue wrapper is used so that it can be hooked by a
-third-party.
----
- dlls/ntdll/exception.c     | 5 +++--
- dlls/ntdll/signal_i386.c   | 3 ++-
- dlls/ntdll/signal_x86_64.c | 3 ++-
- 3 files changed, 7 insertions(+), 4 deletions(-)
-
-diff --git a/dlls/ntdll/exception.c b/dlls/ntdll/exception.c
-index 3b85f1efa..bc972254f 100644
---- a/dlls/ntdll/exception.c
-+++ b/dlls/ntdll/exception.c
-@@ -671,8 +671,9 @@ PRUNTIME_FUNCTION WINAPI RtlLookupFunctionEntry( ULONG_PTR pc, ULONG_PTR *base,
-  */
- NTSTATUS WINAPI NtContinue( CONTEXT *context, BOOLEAN alert )
- {
--    FIXME( "(%p, %d) stub!\n", context, alert );
--    return STATUS_NOT_IMPLEMENTED;
-+    TRACE( "(%p, %d) stub!\n", context, alert );
-+
-+    return NtSetContextThread( GetCurrentThread(), context );
- }
- 
- /*************************************************************
-diff --git a/dlls/ntdll/signal_i386.c b/dlls/ntdll/signal_i386.c
-index e55164630..8fc885ed4 100644
---- a/dlls/ntdll/signal_i386.c
-+++ b/dlls/ntdll/signal_i386.c
-@@ -730,6 +730,7 @@ static NTSTATUS call_stack_handlers( EXCEPTION_RECORD *rec, CONTEXT *context )
-     return STATUS_UNHANDLED_EXCEPTION;
- }
- 
-+NTSTATUS WINAPI __syscall_NtContinue( CONTEXT *context, BOOLEAN alert );
- 
- /*******************************************************************
-  *		raise_exception
-@@ -794,7 +795,7 @@ static NTSTATUS raise_exception( EXCEPTION_RECORD *rec, CONTEXT *context, BOOL f
-         NtTerminateProcess( NtCurrentProcess(), rec->ExceptionCode );
-     }
- done:
--    return NtSetContextThread( GetCurrentThread(), context );
-+    return __syscall_NtContinue( context, FALSE );
- }
- 
- 
-diff --git a/dlls/ntdll/signal_x86_64.c b/dlls/ntdll/signal_x86_64.c
-index e48529d73..0e74fda43 100644
---- a/dlls/ntdll/signal_x86_64.c
-+++ b/dlls/ntdll/signal_x86_64.c
-@@ -2520,6 +2520,7 @@ static NTSTATUS call_stack_handlers( EXCEPTION_RECORD *rec, CONTEXT *orig_contex
-     return STATUS_UNHANDLED_EXCEPTION;
- }
- 
-+NTSTATUS WINAPI __syscall_NtContinue( CONTEXT *context, BOOLEAN alert );
- 
- static NTSTATUS raise_exception( EXCEPTION_RECORD *rec, CONTEXT *context, BOOL first_chance )
- {
-@@ -2582,7 +2583,7 @@ static NTSTATUS raise_exception( EXCEPTION_RECORD *rec, CONTEXT *context, BOOL f
-     }
- 
- done:
--    return NtSetContextThread( GetCurrentThread(), context );
-+    return __syscall_NtContinue( context, FALSE );
- }
- 
- 
--- 
-2.23.0
-
diff --git a/patches/ntdll-NtContinue/definition b/patches/ntdll-NtContinue/definition
deleted file mode 100644
index 06c2ebf9e..000000000
--- a/patches/ntdll-NtContinue/definition
+++ /dev/null
@@ -1,3 +0,0 @@
-Fixes: [31910] Add stub for NtContinue
-Fixes: [45572] League of Legends 8.12+ fails to start a game (anticheat engine, hooking of NtContinue)
-Depends: winebuild-Fake_Dlls
\ No newline at end of file
diff --git a/patches/ntdll-Syscall_Emulation/0001-ntdll-Support-x86_64-syscall-emulation.patch b/patches/ntdll-Syscall_Emulation/0001-ntdll-Support-x86_64-syscall-emulation.patch
index 4ae5fcdfa..0a39d4355 100644
--- a/patches/ntdll-Syscall_Emulation/0001-ntdll-Support-x86_64-syscall-emulation.patch
+++ b/patches/ntdll-Syscall_Emulation/0001-ntdll-Support-x86_64-syscall-emulation.patch
@@ -1,4 +1,4 @@
-From 20298be5a42af52be27c56f88ad6a8a0304b55b6 Mon Sep 17 00:00:00 2001
+From cd04d1910294b035bb3858b3ef1bb295aec3a732 Mon Sep 17 00:00:00 2001
 From: Paul Gofman <pgofman@codeweavers.com>
 Date: Mon, 30 Dec 2019 13:27:53 +0300
 Subject: [PATCH] ntdll: Support x86_64 syscall emulation.
@@ -15,7 +15,7 @@ is used for trapping syscalls.
  3 files changed, 119 insertions(+), 2 deletions(-)
 
 diff --git a/configure.ac b/configure.ac
-index e3d63ed7501..2fbec4129df 100644
+index e61a98455c3..4adeb52d225 100644
 --- a/configure.ac
 +++ b/configure.ac
 @@ -464,6 +464,7 @@ AC_CHECK_HEADERS(\
@@ -27,7 +27,7 @@ index e3d63ed7501..2fbec4129df 100644
  	linux/types.h \
  	linux/ucdrom.h \
 diff --git a/dlls/ntdll/signal_x86_64.c b/dlls/ntdll/signal_x86_64.c
-index 0ccc7cbceb6..149ad1bf5e7 100644
+index dd8b45fa907..a5612abf2b1 100644
 --- a/dlls/ntdll/signal_x86_64.c
 +++ b/dlls/ntdll/signal_x86_64.c
 @@ -24,6 +24,7 @@
@@ -61,8 +61,8 @@ index 0ccc7cbceb6..149ad1bf5e7 100644
  typedef struct _SCOPE_TABLE
  {
      ULONG Count;
-@@ -2797,6 +2807,104 @@ static void usr1_handler( int signal, siginfo_t *siginfo, void *ucontext )
-     restore_context( &context, ucontext );
+@@ -2480,6 +2490,104 @@ static inline DWORD is_privileged_instr( CONTEXT *context )
+     return 0;
  }
  
 +extern unsigned int __wine_nb_syscalls;
@@ -165,8 +165,8 @@ index 0ccc7cbceb6..149ad1bf5e7 100644
 +}
  
  /***********************************************************************
-  *           __wine_set_signal_handler   (NTDLL.@)
-@@ -2842,6 +2950,9 @@ void signal_init_process(void)
+  *           handle_interrupt
+@@ -2793,6 +2901,9 @@ void signal_init_process(void)
      sig_act.sa_sigaction = trap_handler;
      if (sigaction( SIGTRAP, &sig_act, NULL ) == -1) goto error;
  #endif
diff --git a/patches/ntdll-WRITECOPY/0003-ntdll-Setup-a-temporary-signal-handler-during-proces.patch b/patches/ntdll-WRITECOPY/0003-ntdll-Setup-a-temporary-signal-handler-during-proces.patch
index d6e9a6824..db0631234 100644
--- a/patches/ntdll-WRITECOPY/0003-ntdll-Setup-a-temporary-signal-handler-during-proces.patch
+++ b/patches/ntdll-WRITECOPY/0003-ntdll-Setup-a-temporary-signal-handler-during-proces.patch
@@ -1,4 +1,4 @@
-From 46968c583a30476a86463530d0047699e64529b5 Mon Sep 17 00:00:00 2001
+From bd60a4308f3ec1df20328887335b4c95f9be215d Mon Sep 17 00:00:00 2001
 From: =?UTF-8?q?Michael=20M=C3=BCller?= <michael@fds-team.de>
 Date: Sat, 4 Oct 2014 02:53:22 +0200
 Subject: [PATCH] ntdll: Setup a temporary signal handler during process
@@ -27,10 +27,10 @@ index 65c65cc02d8..63a4b597872 100644
  extern void debug_init(void) DECLSPEC_HIDDEN;
  extern TEB *thread_init( SIZE_T *info_size, BOOL *suspend ) DECLSPEC_HIDDEN;
 diff --git a/dlls/ntdll/signal_arm.c b/dlls/ntdll/signal_arm.c
-index 8ff9f66d3f0..44e3d2df523 100644
+index a09848449a6..c6f7231fec6 100644
 --- a/dlls/ntdll/signal_arm.c
 +++ b/dlls/ntdll/signal_arm.c
-@@ -773,6 +773,12 @@ void signal_init_process(void)
+@@ -792,6 +792,12 @@ void signal_init_process(void)
      exit(1);
  }
  
@@ -44,11 +44,11 @@ index 8ff9f66d3f0..44e3d2df523 100644
  /***********************************************************************
   *            RtlUnwind  (NTDLL.@)
 diff --git a/dlls/ntdll/signal_arm64.c b/dlls/ntdll/signal_arm64.c
-index 104ffbf6df9..e7c6abd0046 100644
+index a9a58a2e7ad..a9c6614794e 100644
 --- a/dlls/ntdll/signal_arm64.c
 +++ b/dlls/ntdll/signal_arm64.c
-@@ -1100,6 +1100,12 @@ int CDECL __wine_set_signal_handler(unsigned int sig, wine_signal_handler wsh)
-     return 0;
+@@ -1047,6 +1047,12 @@ static void usr2_handler( int signal, siginfo_t *siginfo, void *sigcontext )
+     restore_context( context, sigcontext );
  }
  
 +/**********************************************************************
@@ -61,10 +61,10 @@ index 104ffbf6df9..e7c6abd0046 100644
  /**********************************************************************
   *		signal_init_process
 diff --git a/dlls/ntdll/signal_i386.c b/dlls/ntdll/signal_i386.c
-index 1b0b9352a87..0fe9f7a3c84 100644
+index 83868f25121..b048b2bc688 100644
 --- a/dlls/ntdll/signal_i386.c
 +++ b/dlls/ntdll/signal_i386.c
-@@ -1621,6 +1621,31 @@ static BOOL handle_interrupt( unsigned int interrupt, ucontext_t *sigcontext, st
+@@ -1575,6 +1575,31 @@ static BOOL handle_interrupt( unsigned int interrupt, ucontext_t *sigcontext, st
  }
  
  
@@ -96,7 +96,7 @@ index 1b0b9352a87..0fe9f7a3c84 100644
  /**********************************************************************
   *		segv_handler
   *
-@@ -1948,6 +1973,34 @@ void signal_init_process(void)
+@@ -1883,6 +1908,34 @@ void signal_init_process(void)
      exit(1);
  }
  
@@ -132,11 +132,11 @@ index 1b0b9352a87..0fe9f7a3c84 100644
  /*******************************************************************
   *		RtlUnwind (NTDLL.@)
 diff --git a/dlls/ntdll/signal_powerpc.c b/dlls/ntdll/signal_powerpc.c
-index 7e73322cbeb..07f0b89f30a 100644
+index 879b2b58c49..f17d6267102 100644
 --- a/dlls/ntdll/signal_powerpc.c
 +++ b/dlls/ntdll/signal_powerpc.c
-@@ -637,6 +637,12 @@ int CDECL __wine_set_signal_handler(unsigned int sig, wine_signal_handler wsh)
-     return 0;
+@@ -634,6 +634,12 @@ static void quit_handler( int signal, siginfo_t *siginfo, void *sigcontext )
+     unix_funcs->abort_thread(0);
  }
  
 +/**********************************************************************
@@ -147,12 +147,12 @@ index 7e73322cbeb..07f0b89f30a 100644
 +}
  
  /**********************************************************************
-  *		signal_init_process
+  *		usr1_handler
 diff --git a/dlls/ntdll/signal_x86_64.c b/dlls/ntdll/signal_x86_64.c
-index 0ccc7cbceb6..dc8a1a987c5 100644
+index c6b0fbf618d..bb481ba1b81 100644
 --- a/dlls/ntdll/signal_x86_64.c
 +++ b/dlls/ntdll/signal_x86_64.c
-@@ -2849,6 +2849,12 @@ void signal_init_process(void)
+@@ -2777,6 +2777,12 @@ void signal_init_process(void)
      exit(1);
  }
  
@@ -166,7 +166,7 @@ index 0ccc7cbceb6..dc8a1a987c5 100644
  static ULONG64 get_int_reg( CONTEXT *context, int reg )
  {
 diff --git a/dlls/ntdll/thread.c b/dlls/ntdll/thread.c
-index 8918b39a9c5..a2f5df1b1c2 100644
+index d045466f6d2..49daa33ca58 100644
 --- a/dlls/ntdll/thread.c
 +++ b/dlls/ntdll/thread.c
 @@ -186,6 +186,7 @@ TEB *thread_init( SIZE_T *info_size, BOOL *suspend )
diff --git a/patches/patchinstall.sh b/patches/patchinstall.sh
index c5ff8c0b3..9c2ce4ce0 100755
--- a/patches/patchinstall.sh
+++ b/patches/patchinstall.sh
@@ -183,7 +183,6 @@ patch_enable_all ()
 	enable_ntdll_Junction_Points="$1"
 	enable_ntdll_Manifest_Range="$1"
 	enable_ntdll_NtAccessCheck="$1"
-	enable_ntdll_NtContinue="$1"
 	enable_ntdll_NtDevicePath="$1"
 	enable_ntdll_NtQueryEaFile="$1"
 	enable_ntdll_NtQuerySection="$1"
@@ -648,9 +647,6 @@ patch_enable ()
 		ntdll-NtAccessCheck)
 			enable_ntdll_NtAccessCheck="$2"
 			;;
-		ntdll-NtContinue)
-			enable_ntdll_NtContinue="$2"
-			;;
 		ntdll-NtDevicePath)
 			enable_ntdll_NtDevicePath="$2"
 			;;
@@ -1672,6 +1668,17 @@ if test "$enable_ntdll_Syscall_Emulation" -eq 1; then
 	enable_winebuild_Fake_Dlls=1
 fi
 
+if test "$enable_winebuild_Fake_Dlls" -eq 1; then
+	if test "$enable_ntdll_WRITECOPY" -gt 1; then
+		abort "Patchset ntdll-WRITECOPY disabled, but winebuild-Fake_Dlls depends on that."
+	fi
+	if test "$enable_ws2_32_WSACleanup" -gt 1; then
+		abort "Patchset ws2_32-WSACleanup disabled, but winebuild-Fake_Dlls depends on that."
+	fi
+	enable_ntdll_WRITECOPY=1
+	enable_ws2_32_WSACleanup=1
+fi
+
 if test "$enable_ntdll_NtQueryEaFile" -eq 1; then
 	if test "$enable_ntdll_Junction_Points" -gt 1; then
 		abort "Patchset ntdll-Junction_Points disabled, but ntdll-NtQueryEaFile depends on that."
@@ -1686,24 +1693,6 @@ if test "$enable_ntdll_NtDevicePath" -eq 1; then
 	enable_ntdll_Pipe_SpecialCharacters=1
 fi
 
-if test "$enable_ntdll_NtContinue" -eq 1; then
-	if test "$enable_winebuild_Fake_Dlls" -gt 1; then
-		abort "Patchset winebuild-Fake_Dlls disabled, but ntdll-NtContinue depends on that."
-	fi
-	enable_winebuild_Fake_Dlls=1
-fi
-
-if test "$enable_winebuild_Fake_Dlls" -eq 1; then
-	if test "$enable_ntdll_WRITECOPY" -gt 1; then
-		abort "Patchset ntdll-WRITECOPY disabled, but winebuild-Fake_Dlls depends on that."
-	fi
-	if test "$enable_ws2_32_WSACleanup" -gt 1; then
-		abort "Patchset ws2_32-WSACleanup disabled, but winebuild-Fake_Dlls depends on that."
-	fi
-	enable_ntdll_WRITECOPY=1
-	enable_ws2_32_WSACleanup=1
-fi
-
 if test "$enable_ntdll_Hide_Wine_Exports" -eq 1; then
 	if test "$enable_advapi32_Token_Integrity_Level" -gt 1; then
 		abort "Patchset advapi32-Token_Integrity_Level disabled, but ntdll-Hide_Wine_Exports depends on that."
@@ -3977,98 +3966,6 @@ if test "$enable_ntdll_NtAccessCheck" -eq 1; then
 	) >> "$patchlist"
 fi
 
-# Patchset ws2_32-WSACleanup
-# |
-# | This patchset fixes the following Wine bugs:
-# |   *	[#18670] Properly close sockets when WSACleanup is called
-# |
-# | Modified files:
-# |   *	dlls/ntdll/ntdll.spec, dlls/ntdll/server.c, dlls/ntdll/unix/loader.c, dlls/ntdll/unix/server.c,
-# | 	dlls/ntdll/unix/unix_private.h, dlls/ntdll/unixlib.h, dlls/ws2_32/socket.c, dlls/ws2_32/tests/sock.c,
-# | 	include/wine/server.h, server/protocol.def, server/sock.c
-# |
-if test "$enable_ws2_32_WSACleanup" -eq 1; then
-	patch_apply ws2_32-WSACleanup/0001-ws2_32-Proper-WSACleanup-implementation-using-winese.patch
-	patch_apply ws2_32-WSACleanup/0002-ws2_32-Invalidate-client-side-file-descriptor-cache-.patch
-	(
-		printf '%s\n' '+    { "Matt Durgavich", "ws2_32: Proper WSACleanup implementation using wineserver function.", 2 },';
-		printf '%s\n' '+    { "Sebastian Lackner", "ws2_32: Invalidate client-side file descriptor cache in WSACleanup.", 1 },';
-	) >> "$patchlist"
-fi
-
-# Patchset winebuild-Fake_Dlls
-# |
-# | This patchset has the following (direct or indirect) dependencies:
-# |   *	ntdll-WRITECOPY, ws2_32-WSACleanup
-# |
-# | This patchset fixes the following Wine bugs:
-# |   *	[#21232] Chromium-based browser engines (Chrome, Opera, Comodo Dragon, SRWare Iron) crash on startup unless '--no-
-# | 	sandbox' is used (native API sandboxing/hooking scheme incompatible with Wine)
-# |   *	[#42741] StarCraft I: 1.18 PTR fails to initialize ClientSdk.dll
-# |   *	[#45349] Multiple applications and games crash due to missing support for 64-bit syscall thunks (StreetFighter V)
-# |   *	[#45573] League of Legends 8.12+ fails to start a game (anticheat engine, hooking of syscall return instructions)
-# |   *	[#45650] chromium 32-bit sandbox expects different syscall thunks depending on Windows version
-# |
-# | Modified files:
-# |   *	dlls/dbghelp/cpu_i386.c, dlls/kernel32/tests/loader.c, dlls/krnl386.exe16/kernel.c,
-# | 	dlls/krnl386.exe16/kernel16_private.h, dlls/krnl386.exe16/ne_module.c, dlls/krnl386.exe16/ne_segment.c,
-# | 	dlls/krnl386.exe16/task.c, dlls/krnl386.exe16/thunk.c, dlls/krnl386.exe16/wowthunk.c, dlls/ntdll/actctx.c,
-# | 	dlls/ntdll/directory.c, dlls/ntdll/loader.c, dlls/ntdll/locale.c, dlls/ntdll/ntdll_misc.h, dlls/ntdll/path.c,
-# | 	dlls/ntdll/process.c, dlls/ntdll/signal_i386.c, dlls/ntdll/tests/exception.c, dlls/ntdll/thread.c,
-# | 	dlls/ntdll/unix/thread.c, dlls/ntdll/unix/unix_private.h, dlls/ntdll/unix/virtual.c, dlls/ntdll/unixlib.h,
-# | 	dlls/system.drv16/system.c, dlls/toolhelp.dll16/toolhelp.c, dlls/user.exe16/message.c, dlls/user.exe16/user.c,
-# | 	dlls/user.exe16/window.c, include/winternl.h, libs/wine/loader.c, server/mapping.c, tools/winebuild/build.h,
-# | 	tools/winebuild/import.c, tools/winebuild/parser.c, tools/winebuild/relay.c, tools/winebuild/res32.c,
-# | 	tools/winebuild/spec16.c, tools/winebuild/spec32.c, tools/winebuild/utils.c
-# |
-if test "$enable_winebuild_Fake_Dlls" -eq 1; then
-	patch_apply winebuild-Fake_Dlls/0001-kernel32-tests-Add-basic-tests-for-fake-dlls.patch
-	patch_apply winebuild-Fake_Dlls/0002-krnl386.exe16-Do-not-abuse-WOW32Reserved-field-for-1.patch
-	patch_apply winebuild-Fake_Dlls/0003-winebuild-Generate-syscall-thunks-for-ntdll-exports.patch
-	patch_apply winebuild-Fake_Dlls/0004-winebuild-Use-multipass-label-system-to-generate-fak.patch
-	patch_apply winebuild-Fake_Dlls/0005-winebuild-Add-stub-functions-in-fake-dlls.patch
-	patch_apply winebuild-Fake_Dlls/0006-winebuild-Add-syscall-thunks-in-fake-dlls.patch
-	patch_apply winebuild-Fake_Dlls/0007-winebuild-Fix-size-of-relocation-information-in-fake.patch
-	patch_apply winebuild-Fake_Dlls/0008-winebuild-Try-to-make-sure-RVA-matches-between-fake-.patch
-	patch_apply winebuild-Fake_Dlls/0009-libs-wine-Use-same-file-alignment-for-fake-and-built.patch
-	patch_apply winebuild-Fake_Dlls/0010-tools-winebuild-Add-syscall-thunks-for-64-bit.patch
-	patch_apply winebuild-Fake_Dlls/0011-ntdll-Call-NtOpenFile-through-syscall-thunk.patch
-	(
-		printf '%s\n' '+    { "Michael Müller", "kernel32/tests: Add basic tests for fake dlls.", 1 },';
-		printf '%s\n' '+    { "Sebastian Lackner", "krnl386.exe16: Do not abuse WOW32Reserved field for 16-bit stack address.", 1 },';
-		printf '%s\n' '+    { "Michael Müller", "winebuild: Generate syscall thunks for ntdll exports.", 1 },';
-		printf '%s\n' '+    { "Michael Müller", "winebuild: Use multipass label system to generate fake dlls.", 1 },';
-		printf '%s\n' '+    { "Michael Müller", "winebuild: Add stub functions in fake dlls.", 1 },';
-		printf '%s\n' '+    { "Michael Müller", "winebuild: Add syscall thunks in fake dlls.", 1 },';
-		printf '%s\n' '+    { "Michael Müller", "winebuild: Fix size of relocation information in fake dlls.", 1 },';
-		printf '%s\n' '+    { "Michael Müller", "winebuild: Try to make sure RVA matches between fake and builtin DLLs.", 1 },';
-		printf '%s\n' '+    { "Michael Müller", "libs/wine: Use same file alignment for fake and builtin DLLs.", 1 },';
-		printf '%s\n' '+    { "Michael Müller", "tools/winebuild: Add syscall thunks for 64 bit.", 1 },';
-		printf '%s\n' '+    { "Paul Gofman", "ntdll: Call NtOpenFile through syscall thunk.", 1 },';
-	) >> "$patchlist"
-fi
-
-# Patchset ntdll-NtContinue
-# |
-# | This patchset has the following (direct or indirect) dependencies:
-# |   *	ntdll-WRITECOPY, ws2_32-WSACleanup, winebuild-Fake_Dlls
-# |
-# | This patchset fixes the following Wine bugs:
-# |   *	[#31910] Add stub for NtContinue
-# |   *	[#45572] League of Legends 8.12+ fails to start a game (anticheat engine, hooking of NtContinue)
-# |
-# | Modified files:
-# |   *	dlls/ntdll/exception.c, dlls/ntdll/ntdll.spec, dlls/ntdll/signal_i386.c, dlls/ntdll/signal_x86_64.c
-# |
-if test "$enable_ntdll_NtContinue" -eq 1; then
-	patch_apply ntdll-NtContinue/0001-ntdll-Add-stub-for-NtContinue.patch
-	patch_apply ntdll-NtContinue/0002-Use-NtContinue-to-continue-execution-after-exception.patch
-	(
-		printf '%s\n' '+    { "Michael Müller", "ntdll: Add stub for NtContinue.", 1 },';
-		printf '%s\n' '+    { "Andrew Wesie", "ntdll: Use NtContinue to continue execution after exceptions.", 1 },';
-	) >> "$patchlist"
-fi
-
 # Patchset ntdll-Pipe_SpecialCharacters
 # |
 # | This patchset fixes the following Wine bugs:
@@ -4213,6 +4110,77 @@ if test "$enable_ntdll_Status_Mapping" -eq 1; then
 	) >> "$patchlist"
 fi
 
+# Patchset ws2_32-WSACleanup
+# |
+# | This patchset fixes the following Wine bugs:
+# |   *	[#18670] Properly close sockets when WSACleanup is called
+# |
+# | Modified files:
+# |   *	dlls/ntdll/ntdll.spec, dlls/ntdll/server.c, dlls/ntdll/unix/loader.c, dlls/ntdll/unix/server.c,
+# | 	dlls/ntdll/unix/unix_private.h, dlls/ntdll/unixlib.h, dlls/ws2_32/socket.c, dlls/ws2_32/tests/sock.c,
+# | 	include/wine/server.h, server/protocol.def, server/sock.c
+# |
+if test "$enable_ws2_32_WSACleanup" -eq 1; then
+	patch_apply ws2_32-WSACleanup/0001-ws2_32-Proper-WSACleanup-implementation-using-winese.patch
+	patch_apply ws2_32-WSACleanup/0002-ws2_32-Invalidate-client-side-file-descriptor-cache-.patch
+	(
+		printf '%s\n' '+    { "Matt Durgavich", "ws2_32: Proper WSACleanup implementation using wineserver function.", 2 },';
+		printf '%s\n' '+    { "Sebastian Lackner", "ws2_32: Invalidate client-side file descriptor cache in WSACleanup.", 1 },';
+	) >> "$patchlist"
+fi
+
+# Patchset winebuild-Fake_Dlls
+# |
+# | This patchset has the following (direct or indirect) dependencies:
+# |   *	ntdll-WRITECOPY, ws2_32-WSACleanup
+# |
+# | This patchset fixes the following Wine bugs:
+# |   *	[#21232] Chromium-based browser engines (Chrome, Opera, Comodo Dragon, SRWare Iron) crash on startup unless '--no-
+# | 	sandbox' is used (native API sandboxing/hooking scheme incompatible with Wine)
+# |   *	[#42741] StarCraft I: 1.18 PTR fails to initialize ClientSdk.dll
+# |   *	[#45349] Multiple applications and games crash due to missing support for 64-bit syscall thunks (StreetFighter V)
+# |   *	[#45573] League of Legends 8.12+ fails to start a game (anticheat engine, hooking of syscall return instructions)
+# |   *	[#45650] chromium 32-bit sandbox expects different syscall thunks depending on Windows version
+# |
+# | Modified files:
+# |   *	dlls/dbghelp/cpu_i386.c, dlls/kernel32/tests/loader.c, dlls/krnl386.exe16/kernel.c,
+# | 	dlls/krnl386.exe16/kernel16_private.h, dlls/krnl386.exe16/ne_module.c, dlls/krnl386.exe16/ne_segment.c,
+# | 	dlls/krnl386.exe16/task.c, dlls/krnl386.exe16/thunk.c, dlls/krnl386.exe16/wowthunk.c, dlls/ntdll/actctx.c,
+# | 	dlls/ntdll/directory.c, dlls/ntdll/loader.c, dlls/ntdll/locale.c, dlls/ntdll/ntdll_misc.h, dlls/ntdll/path.c,
+# | 	dlls/ntdll/process.c, dlls/ntdll/signal_i386.c, dlls/ntdll/tests/exception.c, dlls/ntdll/thread.c,
+# | 	dlls/ntdll/unix/thread.c, dlls/ntdll/unix/unix_private.h, dlls/ntdll/unix/virtual.c, dlls/ntdll/unixlib.h,
+# | 	dlls/system.drv16/system.c, dlls/toolhelp.dll16/toolhelp.c, dlls/user.exe16/message.c, dlls/user.exe16/user.c,
+# | 	dlls/user.exe16/window.c, include/winternl.h, libs/wine/loader.c, server/mapping.c, tools/winebuild/build.h,
+# | 	tools/winebuild/import.c, tools/winebuild/parser.c, tools/winebuild/relay.c, tools/winebuild/res32.c,
+# | 	tools/winebuild/spec16.c, tools/winebuild/spec32.c, tools/winebuild/utils.c
+# |
+if test "$enable_winebuild_Fake_Dlls" -eq 1; then
+	patch_apply winebuild-Fake_Dlls/0001-kernel32-tests-Add-basic-tests-for-fake-dlls.patch
+	patch_apply winebuild-Fake_Dlls/0002-krnl386.exe16-Do-not-abuse-WOW32Reserved-field-for-1.patch
+	patch_apply winebuild-Fake_Dlls/0003-winebuild-Generate-syscall-thunks-for-ntdll-exports.patch
+	patch_apply winebuild-Fake_Dlls/0004-winebuild-Use-multipass-label-system-to-generate-fak.patch
+	patch_apply winebuild-Fake_Dlls/0005-winebuild-Add-stub-functions-in-fake-dlls.patch
+	patch_apply winebuild-Fake_Dlls/0006-winebuild-Add-syscall-thunks-in-fake-dlls.patch
+	patch_apply winebuild-Fake_Dlls/0007-winebuild-Fix-size-of-relocation-information-in-fake.patch
+	patch_apply winebuild-Fake_Dlls/0008-winebuild-Try-to-make-sure-RVA-matches-between-fake-.patch
+	patch_apply winebuild-Fake_Dlls/0009-libs-wine-Use-same-file-alignment-for-fake-and-built.patch
+	patch_apply winebuild-Fake_Dlls/0010-tools-winebuild-Add-syscall-thunks-for-64-bit.patch
+	patch_apply winebuild-Fake_Dlls/0011-ntdll-Call-NtOpenFile-through-syscall-thunk.patch
+	(
+		printf '%s\n' '+    { "Michael Müller", "kernel32/tests: Add basic tests for fake dlls.", 1 },';
+		printf '%s\n' '+    { "Sebastian Lackner", "krnl386.exe16: Do not abuse WOW32Reserved field for 16-bit stack address.", 1 },';
+		printf '%s\n' '+    { "Michael Müller", "winebuild: Generate syscall thunks for ntdll exports.", 1 },';
+		printf '%s\n' '+    { "Michael Müller", "winebuild: Use multipass label system to generate fake dlls.", 1 },';
+		printf '%s\n' '+    { "Michael Müller", "winebuild: Add stub functions in fake dlls.", 1 },';
+		printf '%s\n' '+    { "Michael Müller", "winebuild: Add syscall thunks in fake dlls.", 1 },';
+		printf '%s\n' '+    { "Michael Müller", "winebuild: Fix size of relocation information in fake dlls.", 1 },';
+		printf '%s\n' '+    { "Michael Müller", "winebuild: Try to make sure RVA matches between fake and builtin DLLs.", 1 },';
+		printf '%s\n' '+    { "Michael Müller", "libs/wine: Use same file alignment for fake and builtin DLLs.", 1 },';
+		printf '%s\n' '+    { "Michael Müller", "tools/winebuild: Add syscall thunks for 64 bit.", 1 },';
+		printf '%s\n' '+    { "Paul Gofman", "ntdll: Call NtOpenFile through syscall thunk.", 1 },';
+	) >> "$patchlist"
+fi
+
 # Patchset ntdll-Syscall_Emulation
 # |
 # | This patchset has the following (direct or indirect) dependencies:
diff --git a/patches/winebuild-Fake_Dlls/0003-winebuild-Generate-syscall-thunks-for-ntdll-exports.patch b/patches/winebuild-Fake_Dlls/0003-winebuild-Generate-syscall-thunks-for-ntdll-exports.patch
index 751b497da..684c28e16 100644
--- a/patches/winebuild-Fake_Dlls/0003-winebuild-Generate-syscall-thunks-for-ntdll-exports.patch
+++ b/patches/winebuild-Fake_Dlls/0003-winebuild-Generate-syscall-thunks-for-ntdll-exports.patch
@@ -1,4 +1,4 @@
-From 1fec139d96f32869fc0c8d15219fff493d9951d8 Mon Sep 17 00:00:00 2001
+From e60eb454ecfb4c043a585c1ecd2970c92be1c664 Mon Sep 17 00:00:00 2001
 From: =?UTF-8?q?Michael=20M=C3=BCller?= <michael@fds-team.de>
 Date: Thu, 11 May 2017 05:32:55 +0200
 Subject: [PATCH] winebuild: Generate syscall thunks for ntdll exports.
@@ -22,7 +22,7 @@ Based on a patch by Erich E. Hoover.
  14 files changed, 214 insertions(+), 32 deletions(-)
 
 diff --git a/dlls/ntdll/loader.c b/dlls/ntdll/loader.c
-index 45d32399adf..b42cff8bcd4 100644
+index ffbc9fabb23..a633099877d 100644
 --- a/dlls/ntdll/loader.c
 +++ b/dlls/ntdll/loader.c
 @@ -3810,6 +3810,7 @@ PIMAGE_NT_HEADERS WINAPI RtlImageNtHeader(HMODULE hModule)
@@ -33,7 +33,7 @@ index 45d32399adf..b42cff8bcd4 100644
  
  /******************************************************************
   *		LdrInitializeThunk (NTDLL.@)
-@@ -3827,6 +3828,8 @@ void WINAPI LdrInitializeThunk( CONTEXT *context, void **entry, ULONG_PTR unknow
+@@ -3826,6 +3827,8 @@ void WINAPI LdrInitializeThunk( CONTEXT *context, void **entry, ULONG_PTR unknow
      WINE_MODREF *wm;
      LPCWSTR load_path = NtCurrentTeb()->Peb->ProcessParameters->DllPath.Buffer;
  
@@ -43,19 +43,19 @@ index 45d32399adf..b42cff8bcd4 100644
  
      if (process_detaching) return;
 diff --git a/dlls/ntdll/signal_i386.c b/dlls/ntdll/signal_i386.c
-index be88d9bf3c7..84ab7991886 100644
+index 3be6342a945..85329be4f42 100644
 --- a/dlls/ntdll/signal_i386.c
 +++ b/dlls/ntdll/signal_i386.c
-@@ -448,6 +448,8 @@ static ULONG first_ldt_entry = 32;
+@@ -444,6 +444,8 @@ struct stack_layout
  
- static wine_signal_handler handlers[256];
+ static ULONG first_ldt_entry = 32;
  
 +extern NTSTATUS WINAPI __syscall_NtGetContextThread( HANDLE handle, CONTEXT *context );
 +
  enum i386_trap_code
  {
      TRAP_x86_UNKNOWN    = -1,  /* Unknown fault (TRAP_sig not defined) */
-@@ -1159,7 +1161,7 @@ NTSTATUS CDECL DECLSPEC_HIDDEN __regs_NtGetContextThread( DWORD edi, DWORD esi,
+@@ -1127,7 +1129,7 @@ NTSTATUS CDECL DECLSPEC_HIDDEN __regs_NtGetContextThread( DWORD edi, DWORD esi,
      {
          context->Ebp    = ebp;
          context->Esp    = (DWORD)&retaddr;
@@ -78,7 +78,7 @@ index a5e6faa461a..51938bf84cc 100644
      ok( context.SegCs == LOWORD(expect.SegCs), "wrong SegCs %08x/%08x\n", context.SegCs, expect.SegCs );
      ok( context.SegDs == LOWORD(expect.SegDs), "wrong SegDs %08x/%08x\n", context.SegDs, expect.SegDs );
 diff --git a/dlls/ntdll/thread.c b/dlls/ntdll/thread.c
-index 79d13a01a86..94eb6d1252d 100644
+index 49daa33ca58..17b5d40215a 100644
 --- a/dlls/ntdll/thread.c
 +++ b/dlls/ntdll/thread.c
 @@ -173,6 +173,7 @@ int __cdecl __wine_dbg_output( const char *str )
@@ -99,10 +99,10 @@ index 79d13a01a86..94eb6d1252d 100644
      peb = teb->Peb;
      peb->FastPebLock        = &peb_lock;
 diff --git a/dlls/ntdll/unix/thread.c b/dlls/ntdll/unix/thread.c
-index b6458da61ad..a158ec20a6a 100644
+index d4b7a51a627..bdc87e4b9cf 100644
 --- a/dlls/ntdll/unix/thread.c
 +++ b/dlls/ntdll/unix/thread.c
-@@ -83,7 +83,7 @@ static void pthread_exit_wrapper( int status )
+@@ -85,7 +85,7 @@ static void pthread_exit_wrapper( int status )
   *           init_threading
   */
  TEB * CDECL init_threading( int *nb_threads_ptr, struct ldt_copy **ldt_copy, SIZE_T *size, BOOL *suspend,
@@ -111,7 +111,7 @@ index b6458da61ad..a158ec20a6a 100644
  {
      TEB *teb;
      SIZE_T info_size;
-@@ -95,6 +95,7 @@ TEB * CDECL init_threading( int *nb_threads_ptr, struct ldt_copy **ldt_copy, SIZ
+@@ -97,6 +97,7 @@ TEB * CDECL init_threading( int *nb_threads_ptr, struct ldt_copy **ldt_copy, SIZ
      nb_threads = nb_threads_ptr;
  
      teb = virtual_alloc_first_teb();
@@ -120,10 +120,10 @@ index b6458da61ad..a158ec20a6a 100644
      thread_data->request_fd = -1;
      thread_data->reply_fd   = -1;
 diff --git a/dlls/ntdll/unix/unix_private.h b/dlls/ntdll/unix/unix_private.h
-index 880e3aacf33..6c7b961e95a 100644
+index 19104f0f5cc..bdf8bc99e3f 100644
 --- a/dlls/ntdll/unix/unix_private.h
 +++ b/dlls/ntdll/unix/unix_private.h
-@@ -96,7 +96,7 @@ extern void CDECL server_release_fd( HANDLE handle, int unix_fd ) DECLSPEC_HIDDE
+@@ -101,7 +101,7 @@ extern void CDECL server_release_fd( HANDLE handle, int unix_fd ) DECLSPEC_HIDDE
  extern void CDECL server_init_process_done(void) DECLSPEC_HIDDEN;
  extern TEB * CDECL init_threading( int *nb_threads_ptr, struct ldt_copy **ldt_copy, SIZE_T *size,
                                     BOOL *suspend, unsigned int *cpus, BOOL *wow64,
@@ -133,19 +133,19 @@ index 880e3aacf33..6c7b961e95a 100644
  extern void CDECL DECLSPEC_NORETURN abort_thread( int status ) DECLSPEC_HIDDEN;
  extern void CDECL DECLSPEC_NORETURN exit_thread( int status ) DECLSPEC_HIDDEN;
 diff --git a/dlls/ntdll/unixlib.h b/dlls/ntdll/unixlib.h
-index 83c9f3a163b..63728b1c071 100644
+index 6a751993421..4e39ed53786 100644
 --- a/dlls/ntdll/unixlib.h
 +++ b/dlls/ntdll/unixlib.h
 @@ -28,7 +28,7 @@ struct ldt_copy;
  struct msghdr;
  
  /* increment this when you change the function table */
--#define NTDLL_UNIXLIB_VERSION 31
-+#define NTDLL_UNIXLIB_VERSION 32
+-#define NTDLL_UNIXLIB_VERSION 33
++#define NTDLL_UNIXLIB_VERSION 34
  
  struct unix_funcs
  {
-@@ -172,7 +172,7 @@ struct unix_funcs
+@@ -174,7 +174,7 @@ struct unix_funcs
  
      /* thread/process functions */
      TEB *         (CDECL *init_threading)( int *nb_threads_ptr, struct ldt_copy **ldt_copy, SIZE_T *size,
diff --git a/patches/ws2_32-WSACleanup/0002-ws2_32-Invalidate-client-side-file-descriptor-cache-.patch b/patches/ws2_32-WSACleanup/0002-ws2_32-Invalidate-client-side-file-descriptor-cache-.patch
index 25c315648..0861f99c0 100644
--- a/patches/ws2_32-WSACleanup/0002-ws2_32-Invalidate-client-side-file-descriptor-cache-.patch
+++ b/patches/ws2_32-WSACleanup/0002-ws2_32-Invalidate-client-side-file-descriptor-cache-.patch
@@ -1,4 +1,4 @@
-From 1bb20ff5903d8d5e81e8a2b7b22bf67b189b16ec Mon Sep 17 00:00:00 2001
+From 20661308a50202350a3a2887cbd558b1e931aad1 Mon Sep 17 00:00:00 2001
 From: Sebastian Lackner <sebastian@fds-team.de>
 Date: Sun, 6 Sep 2015 12:41:17 +0200
 Subject: [PATCH] ws2_32: Invalidate client-side file descriptor cache in
@@ -17,7 +17,7 @@ Subject: [PATCH] ws2_32: Invalidate client-side file descriptor cache in
  9 files changed, 36 insertions(+), 5 deletions(-)
 
 diff --git a/dlls/ntdll/ntdll.spec b/dlls/ntdll/ntdll.spec
-index c4d78128758..3d6c8850086 100644
+index ce5c580bd54..279845ae830 100644
 --- a/dlls/ntdll/ntdll.spec
 +++ b/dlls/ntdll/ntdll.spec
 @@ -1576,6 +1576,7 @@
@@ -48,10 +48,10 @@ index 6fb86a68d6f..2f95e190963 100644
  /***********************************************************************
   *           server_init_process
 diff --git a/dlls/ntdll/unix/loader.c b/dlls/ntdll/unix/loader.c
-index b5ee692024c..d8827b147df 100644
+index 618e3d6adb3..bdda739897b 100644
 --- a/dlls/ntdll/unix/loader.c
 +++ b/dlls/ntdll/unix/loader.c
-@@ -1074,6 +1074,7 @@ static struct unix_funcs unix_funcs =
+@@ -1076,6 +1076,7 @@ static struct unix_funcs unix_funcs =
      server_select,
      server_wait,
      server_send_fd,
@@ -91,10 +91,10 @@ index fb3f98dd579..0754928cfe8 100644
  /***********************************************************************
   *           server_get_unix_fd
 diff --git a/dlls/ntdll/unix/unix_private.h b/dlls/ntdll/unix/unix_private.h
-index a422fd825ed..880e3aacf33 100644
+index 03b92f9e912..19104f0f5cc 100644
 --- a/dlls/ntdll/unix/unix_private.h
 +++ b/dlls/ntdll/unix/unix_private.h
-@@ -84,6 +84,7 @@ extern unsigned int CDECL server_select( const select_op_t *select_op, data_size
+@@ -89,6 +89,7 @@ extern unsigned int CDECL server_select( const select_op_t *select_op, data_size
  extern unsigned int CDECL server_wait( const select_op_t *select_op, data_size_t size, UINT flags,
                                         const LARGE_INTEGER *timeout ) DECLSPEC_HIDDEN;
  extern void CDECL server_send_fd( int fd ) DECLSPEC_HIDDEN;
@@ -103,19 +103,19 @@ index a422fd825ed..880e3aacf33 100644
                                       int *needs_close, enum server_fd_type *type,
                                       unsigned int *options ) DECLSPEC_HIDDEN;
 diff --git a/dlls/ntdll/unixlib.h b/dlls/ntdll/unixlib.h
-index 58bdad19397..83c9f3a163b 100644
+index 017a0a71b3f..6a751993421 100644
 --- a/dlls/ntdll/unixlib.h
 +++ b/dlls/ntdll/unixlib.h
 @@ -28,7 +28,7 @@ struct ldt_copy;
  struct msghdr;
  
  /* increment this when you change the function table */
--#define NTDLL_UNIXLIB_VERSION 30
-+#define NTDLL_UNIXLIB_VERSION 31
+-#define NTDLL_UNIXLIB_VERSION 32
++#define NTDLL_UNIXLIB_VERSION 33
  
  struct unix_funcs
  {
-@@ -187,6 +187,7 @@ struct unix_funcs
+@@ -189,6 +189,7 @@ struct unix_funcs
      unsigned int  (CDECL *server_wait)( const select_op_t *select_op, data_size_t size, UINT flags,
                                          const LARGE_INTEGER *timeout );
      void          (CDECL *server_send_fd)( int fd );


diff --git a/patches/eventfd_synchronization/definition b/patches/eventfd_synchronization/definition
index e21e14584..1f084c73a 100644
--- a/patches/eventfd_synchronization/definition
+++ b/patches/eventfd_synchronization/definition
@@ -4,7 +4,6 @@ Fixes: [36692] Many multi-threaded applications have poor performance due to hea
 Depends: server-Shared_Memory
 Depends: ntdll-SystemRoot_Symlink
 Depends: ws2_32-WSACleanup
-Depends: ntdll-RtlCreateUserThread
 Depends: server-Realtime_Priority
 Depends: advapi32-Token_Integrity_Level
 Depends: ntdll-Junction_Points
diff --git a/patches/ntdll-RtlCreateUserThread/0001-ntdll-Refactor-RtlCreateUserThread-into-NtCreateThre.patch b/patches/ntdll-RtlCreateUserThread/0001-ntdll-Refactor-RtlCreateUserThread-into-NtCreateThre.patch
deleted file mode 100644
index 83ff11527..000000000
--- a/patches/ntdll-RtlCreateUserThread/0001-ntdll-Refactor-RtlCreateUserThread-into-NtCreateThre.patch
+++ /dev/null
@@ -1,287 +0,0 @@
-From df45ba13b75af0ae4c8c4166e39f9e640942466b Mon Sep 17 00:00:00 2001
-From: Andrew Wesie <awesie@gmail.com>
-Date: Fri, 27 Jul 2018 01:22:59 -0500
-Subject: [PATCH] ntdll: Refactor RtlCreateUserThread into NtCreateThreadEx.
-
-League of Legends hooks NtCreateThread or NtCreateThreadEx (depending on the
-reported version), and expects it to be called whenever a thread is created.
----
- dlls/ntdll/ntdll.spec |   2 +-
- dlls/ntdll/thread.c   | 180 +++++++++++++++++++++++++++++++++++-------
- include/winternl.h    |  27 +++++++
- 3 files changed, 180 insertions(+), 29 deletions(-)
-
-diff --git a/dlls/ntdll/ntdll.spec b/dlls/ntdll/ntdll.spec
-index 42532bd9f1c..65fdc30d7a4 100644
---- a/dlls/ntdll/ntdll.spec
-+++ b/dlls/ntdll/ntdll.spec
-@@ -182,7 +182,7 @@
- @ stdcall NtCreateSection(ptr long ptr ptr long long long)
- @ stdcall NtCreateSemaphore(ptr long ptr long long)
- @ stdcall NtCreateSymbolicLinkObject(ptr long ptr ptr)
--@ stub NtCreateThread
-+@ stdcall NtCreateThread(ptr long ptr long ptr ptr ptr long)
- @ stdcall NtCreateThreadEx(ptr long ptr long ptr ptr long long long long ptr)
- @ stdcall NtCreateTimer(ptr long ptr long)
- @ stub NtCreateToken
-diff --git a/dlls/ntdll/thread.c b/dlls/ntdll/thread.c
-index d5e34cae3b1..4e1b3f23b7c 100644
---- a/dlls/ntdll/thread.c
-+++ b/dlls/ntdll/thread.c
-@@ -377,28 +377,10 @@ static void WINAPI call_thread_entry_point( LPTHREAD_START_ROUTINE entry, void *
- /***********************************************************************
-  *              NtCreateThreadEx   (NTDLL.@)
-  */
--NTSTATUS WINAPI NtCreateThreadEx( HANDLE *handle_ptr, ACCESS_MASK access, OBJECT_ATTRIBUTES *attr,
--                                  HANDLE process, LPTHREAD_START_ROUTINE start, void *param,
-+NTSTATUS WINAPI NtCreateThreadEx( HANDLE *handle_ptr, ACCESS_MASK access, OBJECT_ATTRIBUTES *thread_attr,
-+                                  HANDLE process, PRTL_THREAD_START_ROUTINE start, void *param,
-                                   ULONG flags, ULONG zero_bits, ULONG stack_commit,
--                                  ULONG stack_reserve, void *attribute_list )
--{
--    FIXME( "%p, %x, %p, %p, %p, %p, %x, %x, %x, %x, %p semi-stub!\n", handle_ptr, access, attr,
--           process, start, param, flags, zero_bits, stack_commit, stack_reserve, attribute_list );
--
--    return RtlCreateUserThread( process, NULL, flags & THREAD_CREATE_FLAGS_CREATE_SUSPENDED,
--                                NULL, stack_reserve, stack_commit, (PRTL_THREAD_START_ROUTINE)start,
--                                param, handle_ptr, NULL );
--}
--
--
--/***********************************************************************
-- *              RtlCreateUserThread   (NTDLL.@)
-- */
--NTSTATUS WINAPI RtlCreateUserThread( HANDLE process, SECURITY_DESCRIPTOR *descr,
--                                     BOOLEAN suspended, PVOID stack_addr,
--                                     SIZE_T stack_reserve, SIZE_T stack_commit,
--                                     PRTL_THREAD_START_ROUTINE start, void *param,
--                                     HANDLE *handle_ptr, CLIENT_ID *id )
-+                                  ULONG stack_reserve, PPS_ATTRIBUTE_LIST ps_attr_list )
- {
-     HANDLE handle = 0, actctx = 0;
-     DWORD tid = 0;
-@@ -406,6 +388,35 @@ NTSTATUS WINAPI RtlCreateUserThread( HANDLE process, SECURITY_DESCRIPTOR *descr,
-     NTSTATUS status;
-     data_size_t len = 0;
-     struct object_attributes *objattr = NULL;
-+    BOOLEAN suspended = !!(flags & THREAD_CREATE_FLAGS_CREATE_SUSPENDED);
-+    CLIENT_ID *id = NULL;
-+
-+    TRACE("(%p, %d, %p, %p, %p, %p, %u, %u, %u, %u, %p)\n",
-+          handle_ptr, access, thread_attr, process, start, param, flags,
-+          zero_bits, stack_commit, stack_reserve, ps_attr_list);
-+
-+    if (ps_attr_list != NULL)
-+    {
-+        PS_ATTRIBUTE *ps_attr,
-+                     *ps_attr_end = (PS_ATTRIBUTE *)((UINT_PTR)ps_attr_list + ps_attr_list->TotalLength);
-+        for (ps_attr = &ps_attr_list->Attributes[0]; ps_attr < ps_attr_end; ps_attr++)
-+        {
-+            switch (ps_attr->Attribute)
-+            {
-+            case PS_ATTRIBUTE_CLIENT_ID:
-+                /* TODO validate ps_attr->Size == sizeof(CLIENT_ID) */
-+                /* TODO set *ps_attr->ReturnLength */
-+                id = ps_attr->ValuePtr;
-+                break;
-+            default:
-+                FIXME("Unsupported attribute %08X\n", ps_attr->Attribute);
-+                break;
-+            }
-+        }
-+    }
-+
-+    if (access == (ACCESS_MASK)0)
-+        access = THREAD_ALL_ACCESS;
- 
-     if (process != NtCurrentProcess())
-     {
-@@ -432,12 +443,7 @@ NTSTATUS WINAPI RtlCreateUserThread( HANDLE process, SECURITY_DESCRIPTOR *descr,
-         return result.create_thread.status;
-     }
- 
--    if (descr)
--    {
--        OBJECT_ATTRIBUTES thread_attr;
--        InitializeObjectAttributes( &thread_attr, NULL, 0, NULL, descr );
--        if ((status = alloc_object_attributes( &thread_attr, &objattr, &len ))) return status;
--    }
-+    if ((status = alloc_object_attributes( thread_attr, &objattr, &len ))) return status;
- 
-     if (unix_funcs->server_pipe( request_pipe ) == -1)
-     {
-@@ -449,7 +455,7 @@ NTSTATUS WINAPI RtlCreateUserThread( HANDLE process, SECURITY_DESCRIPTOR *descr,
-     SERVER_START_REQ( new_thread )
-     {
-         req->process    = wine_server_obj_handle( process );
--        req->access     = THREAD_ALL_ACCESS;
-+        req->access     = access;
-         req->suspend    = suspended;
-         req->request_fd = request_pipe[0];
-         wine_server_add_data( req, objattr, len );
-@@ -539,6 +545,124 @@ NTSTATUS WINAPI NtSuspendThread( HANDLE handle, PULONG count )
-     return ret;
- }
- 
-+NTSTATUS WINAPI NtCreateThread( HANDLE *handle_ptr, ACCESS_MASK access, OBJECT_ATTRIBUTES *attr, HANDLE process,
-+                                CLIENT_ID *id, CONTEXT *context, INITIAL_TEB *teb, BOOLEAN suspended )
-+{
-+    PRTL_THREAD_START_ROUTINE entry;
-+    void *arg;
-+    ULONG flags = suspended ? THREAD_CREATE_FLAGS_CREATE_SUSPENDED : 0;
-+    PS_ATTRIBUTE_LIST attr_list, *pattr_list = NULL;
-+
-+#if defined(__i386__)
-+        entry = (PRTL_THREAD_START_ROUTINE) context->Eax;
-+        arg = (void *)context->Ebx;
-+#elif defined(__x86_64__)
-+        entry = (PRTL_THREAD_START_ROUTINE) context->Rcx;
-+        arg = (void *)context->Rdx;
-+#elif defined(__arm__)
-+        entry = (PRTL_THREAD_START_ROUTINE) context->R0;
-+        arg = (void *)context->R1;
-+#elif defined(__aarch64__)
-+        entry = (PRTL_THREAD_START_ROUTINE) context->u.X0;
-+        arg = (void *)context->u.X1;
-+#elif defined(__powerpc__)
-+        entry = (PRTL_THREAD_START_ROUTINE) context->Gpr3;
-+        arg = (void *)context->Gpr4;
-+#endif
-+
-+    if (id)
-+    {
-+        attr_list.TotalLength = sizeof(PS_ATTRIBUTE_LIST);
-+        attr_list.Attributes[0].Attribute = PS_ATTRIBUTE_CLIENT_ID;
-+        attr_list.Attributes[0].Size = sizeof(CLIENT_ID);
-+        attr_list.Attributes[0].ValuePtr = id;
-+        attr_list.Attributes[0].ReturnLength = NULL;
-+        pattr_list = &attr_list;
-+    }
-+
-+    return NtCreateThreadEx(handle_ptr, access, attr, process, entry, arg, flags, 0, 0, 0, pattr_list);
-+}
-+
-+NTSTATUS WINAPI __syscall_NtCreateThread( HANDLE *handle_ptr, ACCESS_MASK access, OBJECT_ATTRIBUTES *attr,
-+                                          HANDLE process, CLIENT_ID *id, CONTEXT *context, INITIAL_TEB *teb,
-+                                          BOOLEAN suspended );
-+NTSTATUS WINAPI __syscall_NtCreateThreadEx( HANDLE *handle_ptr, ACCESS_MASK access, OBJECT_ATTRIBUTES *attr,
-+                                            HANDLE process, LPTHREAD_START_ROUTINE start, void *param,
-+                                            ULONG flags, ULONG zero_bits, ULONG stack_commit,
-+                                            ULONG stack_reserve, PPS_ATTRIBUTE_LIST ps_attr_list );
-+
-+/***********************************************************************
-+ *              RtlCreateUserThread   (NTDLL.@)
-+ */
-+NTSTATUS WINAPI RtlCreateUserThread( HANDLE process, SECURITY_DESCRIPTOR *descr,
-+                                     BOOLEAN suspended, void *stack_addr,
-+                                     SIZE_T stack_reserve, SIZE_T stack_commit,
-+                                     PRTL_THREAD_START_ROUTINE entry, void *arg,
-+                                     HANDLE *handle_ptr, CLIENT_ID *id )
-+{
-+    OBJECT_ATTRIBUTES thread_attr;
-+    InitializeObjectAttributes( &thread_attr, NULL, 0, NULL, descr );
-+    if (stack_addr)
-+        FIXME("stack_addr != NULL is unimplemented\n");
-+
-+    if (NtCurrentTeb()->Peb->OSMajorVersion < 6)
-+    {
-+        /* Use old API. */
-+        CONTEXT context = { 0 };
-+
-+        if (stack_commit)
-+            FIXME("stack_commit != 0 is unimplemented\n");
-+        if (stack_reserve)
-+            FIXME("stack_reserve != 0 is unimplemented\n");
-+
-+        context.ContextFlags = CONTEXT_FULL;
-+#if defined(__i386__)
-+        context.Eax = (DWORD)entry;
-+        context.Ebx = (DWORD)arg;
-+#elif defined(__x86_64__)
-+        context.Rcx = (ULONG_PTR)entry;
-+        context.Rdx = (ULONG_PTR)arg;
-+#elif defined(__arm__)
-+        context.R0 = (DWORD)entry;
-+        context.R1 = (DWORD)arg;
-+#elif defined(__aarch64__)
-+        context.u.X0 = (DWORD_PTR)entry;
-+        context.u.X1 = (DWORD_PTR)arg;
-+#elif defined(__powerpc__)
-+        context.Gpr3 = (DWORD)entry;
-+        context.Gpr4 = (DWORD)arg;
-+#endif
-+
-+#if defined(__i386__) || defined(__x86_64__)
-+        return __syscall_NtCreateThread(handle_ptr, (ACCESS_MASK)0, &thread_attr, process, id, &context, NULL, suspended);
-+#else
-+        return NtCreateThread(handle_ptr, (ACCESS_MASK)0, &thread_attr, process, id, &context, NULL, suspended);
-+#endif
-+    }
-+    else
-+    {
-+        /* Use new API from Vista+. */
-+        ULONG flags = suspended ? THREAD_CREATE_FLAGS_CREATE_SUSPENDED : 0;
-+        PS_ATTRIBUTE_LIST attr_list, *pattr_list = NULL;
-+
-+        if (id)
-+        {
-+            attr_list.TotalLength = sizeof(PS_ATTRIBUTE_LIST);
-+            attr_list.Attributes[0].Attribute = PS_ATTRIBUTE_CLIENT_ID;
-+            attr_list.Attributes[0].Size = sizeof(CLIENT_ID);
-+            attr_list.Attributes[0].ValuePtr = id;
-+            attr_list.Attributes[0].ReturnLength = NULL;
-+            pattr_list = &attr_list;
-+        }
-+
-+#if defined(__i386__) || defined(__x86_64__)
-+        return __syscall_NtCreateThreadEx(handle_ptr, (ACCESS_MASK)0, &thread_attr, process, (LPTHREAD_START_ROUTINE)entry, arg, flags, 0, stack_commit, stack_reserve, pattr_list);
-+#else
-+        return NtCreateThreadEx(handle_ptr, (ACCESS_MASK)0, &thread_attr, process, (LPTHREAD_START_ROUTINE)entry, arg, flags, 0, stack_commit, stack_reserve, pattr_list);
-+#endif
-+    }
-+}
-+
- 
- /******************************************************************************
-  *              NtResumeThread   (NTDLL.@)
-diff --git a/include/winternl.h b/include/winternl.h
-index f362790dbca..b79fcd67012 100644
---- a/include/winternl.h
-+++ b/include/winternl.h
-@@ -2274,6 +2274,33 @@ typedef struct _NLSTABLEINFO
-     USHORT     *LowerCaseTable;
- } NLSTABLEINFO, *PNLSTABLEINFO;
- 
-+#define PS_ATTRIBUTE_THREAD  0x00010000
-+#define PS_ATTRIBUTE_INPUT   0x00020000
-+#define PS_ATTRIBUTE_UNKNOWN 0x00040000
-+
-+typedef enum _PS_ATTRIBUTE_NUM {
-+    PsAttributeClientId = 3,
-+} PS_ATTRIBUTE_NUM;
-+
-+#define PS_ATTRIBUTE_CLIENT_ID (PsAttributeClientId | PS_ATTRIBUTE_THREAD)
-+
-+typedef struct _PS_ATTRIBUTE {
-+    ULONG Attribute;
-+    SIZE_T Size;
-+    union {
-+        ULONG Value;
-+        PVOID ValuePtr;
-+    };
-+    PSIZE_T ReturnLength;
-+} PS_ATTRIBUTE;
-+
-+typedef struct _PS_ATTRIBUTE_LIST {
-+    SIZE_T TotalLength;
-+    PS_ATTRIBUTE Attributes[1];
-+} PS_ATTRIBUTE_LIST, *PPS_ATTRIBUTE_LIST;
-+
-+
-+
- /*************************************************************************
-  * Loader structures
-  *
--- 
-2.26.2
-
diff --git a/patches/ntdll-RtlCreateUserThread/definition b/patches/ntdll-RtlCreateUserThread/definition
deleted file mode 100644
index f9fbdcf1e..000000000
--- a/patches/ntdll-RtlCreateUserThread/definition
+++ /dev/null
@@ -1,2 +0,0 @@
-Fixes: [45571] League of Legends 8.12+ fails to start a game (anticheat engine, hooking of NtCreateThread/Ex)
-Depends: winebuild-Fake_Dlls
diff --git a/patches/ntdll-ThreadTime/0006-ntdll-Fill-process-virtual-memory-counters-in-NtQuer.patch b/patches/ntdll-ThreadTime/0006-ntdll-Fill-process-virtual-memory-counters-in-NtQuer.patch
index 7b2e48dd6..829d8f4dd 100644
--- a/patches/ntdll-ThreadTime/0006-ntdll-Fill-process-virtual-memory-counters-in-NtQuer.patch
+++ b/patches/ntdll-ThreadTime/0006-ntdll-Fill-process-virtual-memory-counters-in-NtQuer.patch
@@ -1,4 +1,4 @@
-From 4fd43a8364333519e777718b66e628ace1ad9fff Mon Sep 17 00:00:00 2001
+From ee29bbfa7e10de295db39ab6b89f2175d00692c5 Mon Sep 17 00:00:00 2001
 From: =?UTF-8?q?Michael=20M=C3=BCller?= <michael@fds-team.de>
 Date: Thu, 9 Mar 2017 22:56:45 +0100
 Subject: [PATCH] ntdll: Fill process virtual memory counters in
@@ -29,10 +29,10 @@ index cbb7937631d..bb078c1aa21 100644
                          }
                          len += procstructlen;
 diff --git a/dlls/ntdll/ntdll_misc.h b/dlls/ntdll/ntdll_misc.h
-index 3ea0dd81349..3e2fa3642c1 100644
+index 6e77694d87b..d725a678246 100644
 --- a/dlls/ntdll/ntdll_misc.h
 +++ b/dlls/ntdll/ntdll_misc.h
-@@ -249,6 +249,7 @@ void     WINAPI LdrInitializeThunk(CONTEXT*,void**,ULONG_PTR,ULONG_PTR);
+@@ -248,6 +248,7 @@ void     WINAPI LdrInitializeThunk(CONTEXT*,void**,ULONG_PTR,ULONG_PTR);
  /* process / thread time */
  extern BOOL read_process_time(int unix_pid, int unix_tid, unsigned long clk_tck,
                                LARGE_INTEGER *kernel, LARGE_INTEGER *user) DECLSPEC_HIDDEN;
@@ -41,7 +41,7 @@ index 3ea0dd81349..3e2fa3642c1 100644
  /* string functions */
  int    __cdecl NTDLL_tolower( int c );
 diff --git a/dlls/ntdll/process.c b/dlls/ntdll/process.c
-index f47d3c4bc6c..b36fc037dc5 100644
+index 35937ce6026..b4f2dbc8160 100644
 --- a/dlls/ntdll/process.c
 +++ b/dlls/ntdll/process.c
 @@ -192,7 +192,7 @@ static void fill_VM_COUNTERS(VM_COUNTERS* pvmi)
@@ -54,11 +54,11 @@ index f47d3c4bc6c..b36fc037dc5 100644
  
  #endif
 diff --git a/dlls/ntdll/thread.c b/dlls/ntdll/thread.c
-index cd1b65a210c..71051adc8b0 100644
+index 14198d77b7b..8ae8251f975 100644
 --- a/dlls/ntdll/thread.c
 +++ b/dlls/ntdll/thread.c
-@@ -355,6 +355,42 @@ void WINAPI RtlExitUserThread( ULONG status )
-     for (;;) unix_funcs->exit_thread( status );
+@@ -381,6 +381,42 @@ NTSTATUS WINAPI NtCreateThreadEx( HANDLE *handle_ptr, ACCESS_MASK access, OBJECT
+                                          flags, zero_bits, stack_commit, stack_reserve, attr_list );
  }
  
 +BOOL read_process_memory_stats(int unix_pid, VM_COUNTERS *pvmi)
@@ -99,7 +99,7 @@ index cd1b65a210c..71051adc8b0 100644
 +}
  
  /***********************************************************************
-  *           call_thread_entry_point
+  *              RtlCreateUserThread   (NTDLL.@)
 -- 
 2.26.2
 
diff --git a/patches/patchinstall.sh b/patches/patchinstall.sh
index f790eae02..800cdcdf5 100755
--- a/patches/patchinstall.sh
+++ b/patches/patchinstall.sh
@@ -190,7 +190,6 @@ patch_enable_all ()
 	enable_ntdll_NtSetLdtEntries="$1"
 	enable_ntdll_Pipe_SpecialCharacters="$1"
 	enable_ntdll_ProcessQuotaLimits="$1"
-	enable_ntdll_RtlCreateUserThread="$1"
 	enable_ntdll_RtlQueryPackageIdentity="$1"
 	enable_ntdll_RtlQueryRegistryValuesEx="$1"
 	enable_ntdll_Serial_Port_Detection="$1"
@@ -670,9 +669,6 @@ patch_enable ()
 		ntdll-ProcessQuotaLimits)
 			enable_ntdll_ProcessQuotaLimits="$2"
 			;;
-		ntdll-RtlCreateUserThread)
-			enable_ntdll_RtlCreateUserThread="$2"
-			;;
 		ntdll-RtlQueryPackageIdentity)
 			enable_ntdll_RtlQueryPackageIdentity="$2"
 			;;
@@ -1676,13 +1672,6 @@ if test "$enable_ntdll_Syscall_Emulation" -eq 1; then
 	enable_winebuild_Fake_Dlls=1
 fi
 
-if test "$enable_ntdll_RtlCreateUserThread" -eq 1; then
-	if test "$enable_winebuild_Fake_Dlls" -gt 1; then
-		abort "Patchset winebuild-Fake_Dlls disabled, but ntdll-RtlCreateUserThread depends on that."
-	fi
-	enable_winebuild_Fake_Dlls=1
-fi
-
 if test "$enable_ntdll_NtQueryEaFile" -eq 1; then
 	if test "$enable_ntdll_Junction_Points" -gt 1; then
 		abort "Patchset ntdll-Junction_Points disabled, but ntdll-NtQueryEaFile depends on that."
@@ -4170,24 +4159,6 @@ if test "$enable_ntdll_ProcessQuotaLimits" -eq 1; then
 	) >> "$patchlist"
 fi
 
-# Patchset ntdll-RtlCreateUserThread
-# |
-# | This patchset has the following (direct or indirect) dependencies:
-# |   *	ntdll-WRITECOPY, ws2_32-WSACleanup, winebuild-Fake_Dlls
-# |
-# | This patchset fixes the following Wine bugs:
-# |   *	[#45571] League of Legends 8.12+ fails to start a game (anticheat engine, hooking of NtCreateThread/Ex)
-# |
-# | Modified files:
-# |   *	dlls/ntdll/ntdll.spec, dlls/ntdll/thread.c, include/winternl.h
-# |
-if test "$enable_ntdll_RtlCreateUserThread" -eq 1; then
-	patch_apply ntdll-RtlCreateUserThread/0001-ntdll-Refactor-RtlCreateUserThread-into-NtCreateThre.patch
-	(
-		printf '%s\n' '+    { "Andrew Wesie", "ntdll: Refactor RtlCreateUserThread into NtCreateThreadEx.", 1 },';
-	) >> "$patchlist"
-fi
-
 # Patchset ntdll-RtlQueryPackageIdentity
 # |
 # | Modified files:
diff --git a/patches/winebuild-Fake_Dlls/0003-winebuild-Generate-syscall-thunks-for-ntdll-exports.patch b/patches/winebuild-Fake_Dlls/0003-winebuild-Generate-syscall-thunks-for-ntdll-exports.patch
index 6d62c691d..751b497da 100644
--- a/patches/winebuild-Fake_Dlls/0003-winebuild-Generate-syscall-thunks-for-ntdll-exports.patch
+++ b/patches/winebuild-Fake_Dlls/0003-winebuild-Generate-syscall-thunks-for-ntdll-exports.patch
@@ -1,4 +1,4 @@
-From e695bf789da272b2855ad864b0837c38c1a78e62 Mon Sep 17 00:00:00 2001
+From 1fec139d96f32869fc0c8d15219fff493d9951d8 Mon Sep 17 00:00:00 2001
 From: =?UTF-8?q?Michael=20M=C3=BCller?= <michael@fds-team.de>
 Date: Thu, 11 May 2017 05:32:55 +0200
 Subject: [PATCH] winebuild: Generate syscall thunks for ntdll exports.
@@ -78,7 +78,7 @@ index a5e6faa461a..51938bf84cc 100644
      ok( context.SegCs == LOWORD(expect.SegCs), "wrong SegCs %08x/%08x\n", context.SegCs, expect.SegCs );
      ok( context.SegDs == LOWORD(expect.SegDs), "wrong SegDs %08x/%08x\n", context.SegDs, expect.SegDs );
 diff --git a/dlls/ntdll/thread.c b/dlls/ntdll/thread.c
-index a2f5df1b1c2..dc9affc061a 100644
+index 79d13a01a86..94eb6d1252d 100644
 --- a/dlls/ntdll/thread.c
 +++ b/dlls/ntdll/thread.c
 @@ -173,6 +173,7 @@ int __cdecl __wine_dbg_output( const char *str )
@@ -99,7 +99,7 @@ index a2f5df1b1c2..dc9affc061a 100644
      peb = teb->Peb;
      peb->FastPebLock        = &peb_lock;
 diff --git a/dlls/ntdll/unix/thread.c b/dlls/ntdll/unix/thread.c
-index d3e07cae80e..449e5814c2e 100644
+index b6458da61ad..a158ec20a6a 100644
 --- a/dlls/ntdll/unix/thread.c
 +++ b/dlls/ntdll/unix/thread.c
 @@ -83,7 +83,7 @@ static void pthread_exit_wrapper( int status )
@@ -120,42 +120,42 @@ index d3e07cae80e..449e5814c2e 100644
      thread_data->request_fd = -1;
      thread_data->reply_fd   = -1;
 diff --git a/dlls/ntdll/unix/unix_private.h b/dlls/ntdll/unix/unix_private.h
-index 6512160972d..e9a56b37ea1 100644
+index 880e3aacf33..6c7b961e95a 100644
 --- a/dlls/ntdll/unix/unix_private.h
 +++ b/dlls/ntdll/unix/unix_private.h
-@@ -98,7 +98,7 @@ extern int CDECL server_pipe( int fd[2] ) DECLSPEC_HIDDEN;
+@@ -96,7 +96,7 @@ extern void CDECL server_release_fd( HANDLE handle, int unix_fd ) DECLSPEC_HIDDE
  extern void CDECL server_init_process_done(void) DECLSPEC_HIDDEN;
  extern TEB * CDECL init_threading( int *nb_threads_ptr, struct ldt_copy **ldt_copy, SIZE_T *size,
                                     BOOL *suspend, unsigned int *cpus, BOOL *wow64,
 -                                   timeout_t *start_time ) DECLSPEC_HIDDEN;
 +                                   timeout_t *start_time, void *syscall_handler ) DECLSPEC_HIDDEN;
- extern NTSTATUS CDECL create_thread( SIZE_T stack_reserve, SIZE_T stack_commit, HANDLE actctx, DWORD tid,
-                                      int request_fd, PRTL_THREAD_START_ROUTINE start,
-                                      void *param, void *relay ) DECLSPEC_HIDDEN;
+ extern void CDECL DECLSPEC_NORETURN start_process( PRTL_THREAD_START_ROUTINE entry, BOOL suspend, void *relay ) DECLSPEC_HIDDEN;
+ extern void CDECL DECLSPEC_NORETURN abort_thread( int status ) DECLSPEC_HIDDEN;
+ extern void CDECL DECLSPEC_NORETURN exit_thread( int status ) DECLSPEC_HIDDEN;
 diff --git a/dlls/ntdll/unixlib.h b/dlls/ntdll/unixlib.h
-index 72f35cf67e8..93a51871f1d 100644
+index 83c9f3a163b..63728b1c071 100644
 --- a/dlls/ntdll/unixlib.h
 +++ b/dlls/ntdll/unixlib.h
 @@ -28,7 +28,7 @@ struct ldt_copy;
  struct msghdr;
  
  /* increment this when you change the function table */
--#define NTDLL_UNIXLIB_VERSION 28
-+#define NTDLL_UNIXLIB_VERSION 29
+-#define NTDLL_UNIXLIB_VERSION 31
++#define NTDLL_UNIXLIB_VERSION 32
  
  struct unix_funcs
  {
-@@ -165,7 +165,7 @@ struct unix_funcs
+@@ -172,7 +172,7 @@ struct unix_funcs
  
      /* thread/process functions */
      TEB *         (CDECL *init_threading)( int *nb_threads_ptr, struct ldt_copy **ldt_copy, SIZE_T *size,
 -                                           BOOL *suspend, unsigned int *cpus, BOOL *wow64, timeout_t *start_time );
 +                                           BOOL *suspend, unsigned int *cpus, BOOL *wow64, timeout_t *start_time, void *syscall_handler );
-     NTSTATUS      (CDECL *create_thread)( SIZE_T stack_reserve, SIZE_T stack_commit, HANDLE actctx,
-                                           DWORD tid, int request_fd, PRTL_THREAD_START_ROUTINE start,
-                                           void *param, void *relay );
+     void          (CDECL *start_process)( PRTL_THREAD_START_ROUTINE entry, BOOL suspend, void *relay );
+     void          (CDECL *abort_thread)( int status );
+     void          (CDECL *exit_thread)( int status );
 diff --git a/include/winternl.h b/include/winternl.h
-index 44a58cadc7a..065f3d24f52 100644
+index 9b8218c861f..ff6916c98e7 100644
 --- a/include/winternl.h
 +++ b/include/winternl.h
 @@ -359,7 +359,7 @@ typedef struct _TEB
diff --git a/patches/ws2_32-WSACleanup/0002-ws2_32-Invalidate-client-side-file-descriptor-cache-.patch b/patches/ws2_32-WSACleanup/0002-ws2_32-Invalidate-client-side-file-descriptor-cache-.patch
index d830cf2db..25c315648 100644
--- a/patches/ws2_32-WSACleanup/0002-ws2_32-Invalidate-client-side-file-descriptor-cache-.patch
+++ b/patches/ws2_32-WSACleanup/0002-ws2_32-Invalidate-client-side-file-descriptor-cache-.patch
@@ -1,4 +1,4 @@
-From 613ea1e263d4fbda67465ebaae2331df7728106a Mon Sep 17 00:00:00 2001
+From 1bb20ff5903d8d5e81e8a2b7b22bf67b189b16ec Mon Sep 17 00:00:00 2001
 From: Sebastian Lackner <sebastian@fds-team.de>
 Date: Sun, 6 Sep 2015 12:41:17 +0200
 Subject: [PATCH] ws2_32: Invalidate client-side file descriptor cache in
@@ -17,10 +17,10 @@ Subject: [PATCH] ws2_32: Invalidate client-side file descriptor cache in
  9 files changed, 36 insertions(+), 5 deletions(-)
 
 diff --git a/dlls/ntdll/ntdll.spec b/dlls/ntdll/ntdll.spec
-index 42532bd9f1c..ba46f170670 100644
+index c4d78128758..3d6c8850086 100644
 --- a/dlls/ntdll/ntdll.spec
 +++ b/dlls/ntdll/ntdll.spec
-@@ -1575,6 +1575,7 @@
+@@ -1576,6 +1576,7 @@
  
  # Server interface
  @ cdecl -norelay wine_server_call(ptr)
@@ -48,22 +48,22 @@ index 6fb86a68d6f..2f95e190963 100644
  /***********************************************************************
   *           server_init_process
 diff --git a/dlls/ntdll/unix/loader.c b/dlls/ntdll/unix/loader.c
-index 767cae92b48..05c6f1e43bf 100644
+index b5ee692024c..d8827b147df 100644
 --- a/dlls/ntdll/unix/loader.c
 +++ b/dlls/ntdll/unix/loader.c
 @@ -1074,6 +1074,7 @@ static struct unix_funcs unix_funcs =
+     server_select,
      server_wait,
-     server_queue_process_apc,
      server_send_fd,
 +    server_remove_fds_from_cache_by_type,
      server_get_unix_fd,
      server_fd_to_handle,
      server_handle_to_fd,
 diff --git a/dlls/ntdll/unix/server.c b/dlls/ntdll/unix/server.c
-index 66c438fd62d..c6eb52c5986 100644
+index fb3f98dd579..0754928cfe8 100644
 --- a/dlls/ntdll/unix/server.c
 +++ b/dlls/ntdll/unix/server.c
-@@ -991,6 +991,26 @@ static int remove_fd_from_cache( HANDLE handle )
+@@ -995,6 +995,26 @@ static int remove_fd_from_cache( HANDLE handle )
      return fd;
  }
  
@@ -91,33 +91,33 @@ index 66c438fd62d..c6eb52c5986 100644
  /***********************************************************************
   *           server_get_unix_fd
 diff --git a/dlls/ntdll/unix/unix_private.h b/dlls/ntdll/unix/unix_private.h
-index 6fdaa17f087..6512160972d 100644
+index a422fd825ed..880e3aacf33 100644
 --- a/dlls/ntdll/unix/unix_private.h
 +++ b/dlls/ntdll/unix/unix_private.h
-@@ -85,6 +85,7 @@ extern unsigned int CDECL server_wait( const select_op_t *select_op, data_size_t
+@@ -84,6 +84,7 @@ extern unsigned int CDECL server_select( const select_op_t *select_op, data_size
+ extern unsigned int CDECL server_wait( const select_op_t *select_op, data_size_t size, UINT flags,
                                         const LARGE_INTEGER *timeout ) DECLSPEC_HIDDEN;
- extern unsigned int CDECL server_queue_process_apc( HANDLE process, const apc_call_t *call, apc_result_t *result ) DECLSPEC_HIDDEN;
  extern void CDECL server_send_fd( int fd ) DECLSPEC_HIDDEN;
 +extern void CDECL server_remove_fds_from_cache_by_type( enum server_fd_type type ) DECLSPEC_HIDDEN;
  extern int CDECL server_get_unix_fd( HANDLE handle, unsigned int wanted_access, int *unix_fd,
                                       int *needs_close, enum server_fd_type *type,
                                       unsigned int *options ) DECLSPEC_HIDDEN;
 diff --git a/dlls/ntdll/unixlib.h b/dlls/ntdll/unixlib.h
-index 4e5cec6637e..72f35cf67e8 100644
+index 58bdad19397..83c9f3a163b 100644
 --- a/dlls/ntdll/unixlib.h
 +++ b/dlls/ntdll/unixlib.h
 @@ -28,7 +28,7 @@ struct ldt_copy;
  struct msghdr;
  
  /* increment this when you change the function table */
--#define NTDLL_UNIXLIB_VERSION 27
-+#define NTDLL_UNIXLIB_VERSION 28
+-#define NTDLL_UNIXLIB_VERSION 30
++#define NTDLL_UNIXLIB_VERSION 31
  
  struct unix_funcs
  {
-@@ -184,6 +184,7 @@ struct unix_funcs
+@@ -187,6 +187,7 @@ struct unix_funcs
+     unsigned int  (CDECL *server_wait)( const select_op_t *select_op, data_size_t size, UINT flags,
                                          const LARGE_INTEGER *timeout );
-     unsigned int  (CDECL *server_queue_process_apc)( HANDLE process, const apc_call_t *call, apc_result_t *result );
      void          (CDECL *server_send_fd)( int fd );
 +    void          (CDECL *server_remove_fds_from_cache_by_type)( enum server_fd_type type );
      int           (CDECL *server_get_unix_fd)( HANDLE handle, unsigned int wanted_access, int *unix_fd,

diff --git a/patches/winebuild-Fake_Dlls/0010-tools-winebuild-Add-syscall-thunks-for-64-bit.patch b/patches/winebuild-Fake_Dlls/0010-tools-winebuild-Add-syscall-thunks-for-64-bit.patch
index b1663793e..f1f5a5e5c 100644
--- a/patches/winebuild-Fake_Dlls/0010-tools-winebuild-Add-syscall-thunks-for-64-bit.patch
+++ b/patches/winebuild-Fake_Dlls/0010-tools-winebuild-Add-syscall-thunks-for-64-bit.patch
@@ -1,22 +1,24 @@
-From 2f82153b52cd517c9e30ab5ac26a0c60ed70a48d Mon Sep 17 00:00:00 2001
+From 7a2dceb0c325caa23d55f4ed4747221b09885c85 Mon Sep 17 00:00:00 2001
 From: =?UTF-8?q?Michael=20M=C3=BCller?= <michael@fds-team.de>
 Date: Thu, 7 Sep 2017 00:38:09 +0200
 Subject: [PATCH] tools/winebuild: Add syscall thunks for 64 bit.
 
 ---
- dlls/kernel32/tests/loader.c |   7 +-
- dlls/ntdll/unix/virtual.c    |   4 +-
- libs/wine/loader.c           |   4 +
- server/mapping.c             |   6 +-
- tools/winebuild/parser.c     |   2 +-
- tools/winebuild/spec32.c     | 285 ++++++++++++++++++++++++++++++++++-
- 6 files changed, 297 insertions(+), 11 deletions(-)
+ dlls/kernel32/tests/loader.c   |   7 +-
+ dlls/ntdll/unix/thread.c       |   2 +-
+ dlls/ntdll/unix/unix_private.h |   2 +-
+ dlls/ntdll/unix/virtual.c      |  12 +-
+ libs/wine/loader.c             |   4 +
+ server/mapping.c               |   6 +-
+ tools/winebuild/parser.c       |   2 +-
+ tools/winebuild/spec32.c       | 285 ++++++++++++++++++++++++++++++++-
+ 8 files changed, 306 insertions(+), 14 deletions(-)
 
 diff --git a/dlls/kernel32/tests/loader.c b/dlls/kernel32/tests/loader.c
-index 95939ba6bde..ae5462f6e55 100644
+index 1f525194ce7..21af7b4ce7a 100644
 --- a/dlls/kernel32/tests/loader.c
 +++ b/dlls/kernel32/tests/loader.c
-@@ -1573,7 +1573,7 @@ static void test_filenames(void)
+@@ -1574,7 +1574,7 @@ static void test_filenames(void)
  
  static void test_FakeDLL(void)
  {
@@ -25,7 +27,7 @@ index 95939ba6bde..ae5462f6e55 100644
      NTSTATUS (WINAPI *pNtSetEvent)(HANDLE, ULONG *) = NULL;
      IMAGE_EXPORT_DIRECTORY *dir;
      HMODULE module = GetModuleHandleA("ntdll.dll");
-@@ -1615,8 +1615,13 @@ static void test_FakeDLL(void)
+@@ -1616,8 +1616,13 @@ static void test_FakeDLL(void)
  
          dll_func = (BYTE *)GetProcAddress(module, func_name);
          ok(dll_func != NULL, "%s: GetProcAddress returned NULL\n", func_name);
@@ -39,11 +41,37 @@ index 95939ba6bde..ae5462f6e55 100644
          {
              todo_wine ok(0, "%s: Export is a stub-function, skipping\n", func_name);
              continue;
+diff --git a/dlls/ntdll/unix/thread.c b/dlls/ntdll/unix/thread.c
+index 449e5814c2e..05cbd4b443b 100644
+--- a/dlls/ntdll/unix/thread.c
++++ b/dlls/ntdll/unix/thread.c
+@@ -108,7 +108,7 @@ TEB * CDECL init_threading( int *nb_threads_ptr, struct ldt_copy **ldt_copy, SIZ
+     dbg_init();
+     server_init_process();
+     info_size = server_init_thread( teb->Peb, suspend );
+-    virtual_map_user_shared_data();
++    virtual_map_user_shared_data(syscall_handler);
+     NtCreateKeyedEvent( &keyed_event, GENERIC_READ | GENERIC_WRITE, NULL, 0 );
+ 
+     if (size) *size = info_size;
+diff --git a/dlls/ntdll/unix/unix_private.h b/dlls/ntdll/unix/unix_private.h
+index 5f891d52e17..6ccd2ff6cc4 100644
+--- a/dlls/ntdll/unix/unix_private.h
++++ b/dlls/ntdll/unix/unix_private.h
+@@ -137,7 +137,7 @@ extern void virtual_init(void) DECLSPEC_HIDDEN;
+ extern TEB *virtual_alloc_first_teb(void) DECLSPEC_HIDDEN;
+ extern NTSTATUS virtual_alloc_teb( TEB **ret_teb ) DECLSPEC_HIDDEN;
+ extern void virtual_free_teb( TEB *teb ) DECLSPEC_HIDDEN;
+-extern void virtual_map_user_shared_data(void) DECLSPEC_HIDDEN;
++extern void virtual_map_user_shared_data(void *) DECLSPEC_HIDDEN;
+ 
+ extern void signal_init_threading(void) DECLSPEC_HIDDEN;
+ extern NTSTATUS signal_alloc_thread( TEB *teb ) DECLSPEC_HIDDEN;
 diff --git a/dlls/ntdll/unix/virtual.c b/dlls/ntdll/unix/virtual.c
-index 7c5b5d5cf15..66ae4cb841c 100644
+index 83e51c369cb..40629214479 100644
 --- a/dlls/ntdll/unix/virtual.c
 +++ b/dlls/ntdll/unix/virtual.c
-@@ -2546,14 +2546,14 @@ TEB *virtual_alloc_first_teb(void)
+@@ -2742,14 +2742,14 @@ TEB *virtual_alloc_first_teb(void)
      TEB *teb;
      PEB *peb;
      NTSTATUS status;
@@ -60,6 +88,32 @@ index 7c5b5d5cf15..66ae4cb841c 100644
      if (status)
      {
          ERR( "wine: failed to map the shared user data: %08x\n", status );
+@@ -2943,11 +2943,12 @@ void virtual_clear_thread_stack( void *stack_end )
+     if (force_exec_prot) mprotect( stack, size, PROT_READ | PROT_WRITE | PROT_EXEC );
+ }
+ 
++extern void DECLSPEC_NORETURN __wine_syscall_dispatcher( void );
+ 
+ /***********************************************************************
+  *           virtual_map_user_shared_data
+  */
+-void virtual_map_user_shared_data(void)
++void virtual_map_user_shared_data(void *syscall_handler)
+ {
+     static const WCHAR wine_usdW[] = {'\\','K','e','r','n','e','l','O','b','j','e','c','t','s',
+                                       '\\','_','_','w','i','n','e','_','u','s','e','r','_','s','h','a','r','e','d','_','d','a','t','a',0};
+@@ -2970,6 +2971,11 @@ void virtual_map_user_shared_data(void)
+         ERR( "failed to remap the process USD: %d\n", res );
+         exit(1);
+     }
++
++#if defined(__APPLE__) && defined(__x86_64__)
++    *((void **)((char*)user_shared_data + 0x1000)) = syscall_handler;
++#endif
++
+     if (needs_close) close( fd );
+     NtClose( section );
+ }
 diff --git a/libs/wine/loader.c b/libs/wine/loader.c
 index 4597a6cb324..3d0d75e9c6d 100644
 --- a/libs/wine/loader.c

diff --git a/patches/ntdll-WRITECOPY/0003-ntdll-Setup-a-temporary-signal-handler-during-proces.patch b/patches/ntdll-WRITECOPY/0003-ntdll-Setup-a-temporary-signal-handler-during-proces.patch
index 8cb334d6f..d6e9a6824 100644
--- a/patches/ntdll-WRITECOPY/0003-ntdll-Setup-a-temporary-signal-handler-during-proces.patch
+++ b/patches/ntdll-WRITECOPY/0003-ntdll-Setup-a-temporary-signal-handler-during-proces.patch
@@ -1,4 +1,4 @@
-From fb4189551e75a8c52ee1abd98871138c06d94e0e Mon Sep 17 00:00:00 2001
+From 46968c583a30476a86463530d0047699e64529b5 Mon Sep 17 00:00:00 2001
 From: =?UTF-8?q?Michael=20M=C3=BCller?= <michael@fds-team.de>
 Date: Sat, 4 Oct 2014 02:53:22 +0200
 Subject: [PATCH] ntdll: Setup a temporary signal handler during process
@@ -15,7 +15,7 @@ Subject: [PATCH] ntdll: Setup a temporary signal handler during process
  7 files changed, 79 insertions(+)
 
 diff --git a/dlls/ntdll/ntdll_misc.h b/dlls/ntdll/ntdll_misc.h
-index ff791a60764..eba4ace6ae8 100644
+index 65c65cc02d8..63a4b597872 100644
 --- a/dlls/ntdll/ntdll_misc.h
 +++ b/dlls/ntdll/ntdll_misc.h
 @@ -78,6 +78,7 @@ extern LPCSTR debugstr_ObjectAttributes(const OBJECT_ATTRIBUTES *oa) DECLSPEC_HI
@@ -25,7 +25,7 @@ index ff791a60764..eba4ace6ae8 100644
 +extern void signal_init_early(void) DECLSPEC_HIDDEN;
  extern void version_init(void) DECLSPEC_HIDDEN;
  extern void debug_init(void) DECLSPEC_HIDDEN;
- extern TEB *thread_init(void) DECLSPEC_HIDDEN;
+ extern TEB *thread_init( SIZE_T *info_size, BOOL *suspend ) DECLSPEC_HIDDEN;
 diff --git a/dlls/ntdll/signal_arm.c b/dlls/ntdll/signal_arm.c
 index 8ff9f66d3f0..44e3d2df523 100644
 --- a/dlls/ntdll/signal_arm.c
@@ -166,17 +166,17 @@ index 0ccc7cbceb6..dc8a1a987c5 100644
  static ULONG64 get_int_reg( CONTEXT *context, int reg )
  {
 diff --git a/dlls/ntdll/thread.c b/dlls/ntdll/thread.c
-index d5e34cae3b1..16e61658cdf 100644
+index 8918b39a9c5..a2f5df1b1c2 100644
 --- a/dlls/ntdll/thread.c
 +++ b/dlls/ntdll/thread.c
-@@ -217,6 +217,7 @@ TEB *thread_init(void)
-     struct ntdll_thread_data *thread_data;
+@@ -186,6 +186,7 @@ TEB *thread_init( SIZE_T *info_size, BOOL *suspend )
+     TEB *teb;
  
      virtual_init();
 +    signal_init_early();
  
-     /* reserve space for shared user data */
- 
+     teb = unix_funcs->init_threading( &nb_threads, &__wine_ldt_copy, info_size, suspend, &server_cpus,
+                                       &is_wow64, &server_start_time );
 -- 
 2.26.2
 
diff --git a/patches/patchinstall.sh b/patches/patchinstall.sh
index 807d3c39c..f790eae02 100755
--- a/patches/patchinstall.sh
+++ b/patches/patchinstall.sh
@@ -1704,6 +1704,17 @@ if test "$enable_ntdll_NtContinue" -eq 1; then
 	enable_winebuild_Fake_Dlls=1
 fi
 
+if test "$enable_winebuild_Fake_Dlls" -eq 1; then
+	if test "$enable_ntdll_WRITECOPY" -gt 1; then
+		abort "Patchset ntdll-WRITECOPY disabled, but winebuild-Fake_Dlls depends on that."
+	fi
+	if test "$enable_ws2_32_WSACleanup" -gt 1; then
+		abort "Patchset ws2_32-WSACleanup disabled, but winebuild-Fake_Dlls depends on that."
+	fi
+	enable_ntdll_WRITECOPY=1
+	enable_ws2_32_WSACleanup=1
+fi
+
 if test "$enable_ntdll_Hide_Wine_Exports" -eq 1; then
 	if test "$enable_advapi32_Token_Integrity_Level" -gt 1; then
 		abort "Patchset advapi32-Token_Integrity_Level disabled, but ntdll-Hide_Wine_Exports depends on that."
@@ -3977,8 +3988,30 @@ if test "$enable_ntdll_NtAccessCheck" -eq 1; then
 	) >> "$patchlist"
 fi
 
+# Patchset ws2_32-WSACleanup
+# |
+# | This patchset fixes the following Wine bugs:
+# |   *	[#18670] Properly close sockets when WSACleanup is called
+# |
+# | Modified files:
+# |   *	dlls/ntdll/ntdll.spec, dlls/ntdll/server.c, dlls/ntdll/unix/loader.c, dlls/ntdll/unix/server.c,
+# | 	dlls/ntdll/unix/unix_private.h, dlls/ntdll/unixlib.h, dlls/ws2_32/socket.c, dlls/ws2_32/tests/sock.c,
+# | 	include/wine/server.h, server/protocol.def, server/sock.c
+# |
+if test "$enable_ws2_32_WSACleanup" -eq 1; then
+	patch_apply ws2_32-WSACleanup/0001-ws2_32-Proper-WSACleanup-implementation-using-winese.patch
+	patch_apply ws2_32-WSACleanup/0002-ws2_32-Invalidate-client-side-file-descriptor-cache-.patch
+	(
+		printf '%s\n' '+    { "Matt Durgavich", "ws2_32: Proper WSACleanup implementation using wineserver function.", 2 },';
+		printf '%s\n' '+    { "Sebastian Lackner", "ws2_32: Invalidate client-side file descriptor cache in WSACleanup.", 1 },';
+	) >> "$patchlist"
+fi
+
 # Patchset winebuild-Fake_Dlls
 # |
+# | This patchset has the following (direct or indirect) dependencies:
+# |   *	ntdll-WRITECOPY, ws2_32-WSACleanup
+# |
 # | This patchset fixes the following Wine bugs:
 # |   *	[#21232] Chromium-based browser engines (Chrome, Opera, Comodo Dragon, SRWare Iron) crash on startup unless '--no-
 # | 	sandbox' is used (native API sandboxing/hooking scheme incompatible with Wine)
@@ -3993,6 +4026,7 @@ fi
 # | 	dlls/krnl386.exe16/task.c, dlls/krnl386.exe16/thunk.c, dlls/krnl386.exe16/wowthunk.c, dlls/ntdll/actctx.c,
 # | 	dlls/ntdll/directory.c, dlls/ntdll/loader.c, dlls/ntdll/locale.c, dlls/ntdll/ntdll_misc.h, dlls/ntdll/path.c,
 # | 	dlls/ntdll/process.c, dlls/ntdll/signal_i386.c, dlls/ntdll/tests/exception.c, dlls/ntdll/thread.c,
+# | 	dlls/ntdll/unix/thread.c, dlls/ntdll/unix/unix_private.h, dlls/ntdll/unix/virtual.c, dlls/ntdll/unixlib.h,
 # | 	dlls/system.drv16/system.c, dlls/toolhelp.dll16/toolhelp.c, dlls/user.exe16/message.c, dlls/user.exe16/user.c,
 # | 	dlls/user.exe16/window.c, include/winternl.h, libs/wine/loader.c, server/mapping.c, tools/winebuild/build.h,
 # | 	tools/winebuild/import.c, tools/winebuild/parser.c, tools/winebuild/relay.c, tools/winebuild/res32.c,
@@ -4028,7 +4062,7 @@ fi
 # Patchset ntdll-NtContinue
 # |
 # | This patchset has the following (direct or indirect) dependencies:
-# |   *	winebuild-Fake_Dlls
+# |   *	ntdll-WRITECOPY, ws2_32-WSACleanup, winebuild-Fake_Dlls
 # |
 # | This patchset fixes the following Wine bugs:
 # |   *	[#31910] Add stub for NtContinue
@@ -4139,7 +4173,7 @@ fi
 # Patchset ntdll-RtlCreateUserThread
 # |
 # | This patchset has the following (direct or indirect) dependencies:
-# |   *	winebuild-Fake_Dlls
+# |   *	ntdll-WRITECOPY, ws2_32-WSACleanup, winebuild-Fake_Dlls
 # |
 # | This patchset fixes the following Wine bugs:
 # |   *	[#45571] League of Legends 8.12+ fails to start a game (anticheat engine, hooking of NtCreateThread/Ex)
@@ -4211,7 +4245,7 @@ fi
 # Patchset ntdll-Syscall_Emulation
 # |
 # | This patchset has the following (direct or indirect) dependencies:
-# |   *	winebuild-Fake_Dlls
+# |   *	ntdll-WRITECOPY, ws2_32-WSACleanup, winebuild-Fake_Dlls
 # |
 # | This patchset fixes the following Wine bugs:
 # |   *	[#48291] Detroit: Become Human crashes on launch
@@ -4662,25 +4696,6 @@ if test "$enable_riched20_IText_Interface" -eq 1; then
 	) >> "$patchlist"
 fi
 
-# Patchset ws2_32-WSACleanup
-# |
-# | This patchset fixes the following Wine bugs:
-# |   *	[#18670] Properly close sockets when WSACleanup is called
-# |
-# | Modified files:
-# |   *	dlls/ntdll/ntdll.spec, dlls/ntdll/server.c, dlls/ntdll/unix/loader.c, dlls/ntdll/unix/server.c,
-# | 	dlls/ntdll/unix/unix_private.h, dlls/ntdll/unixlib.h, dlls/ws2_32/socket.c, dlls/ws2_32/tests/sock.c,
-# | 	include/wine/server.h, server/protocol.def, server/sock.c
-# |
-if test "$enable_ws2_32_WSACleanup" -eq 1; then
-	patch_apply ws2_32-WSACleanup/0001-ws2_32-Proper-WSACleanup-implementation-using-winese.patch
-	patch_apply ws2_32-WSACleanup/0002-ws2_32-Invalidate-client-side-file-descriptor-cache-.patch
-	(
-		printf '%s\n' '+    { "Matt Durgavich", "ws2_32: Proper WSACleanup implementation using wineserver function.", 2 },';
-		printf '%s\n' '+    { "Sebastian Lackner", "ws2_32: Invalidate client-side file descriptor cache in WSACleanup.", 1 },';
-	) >> "$patchlist"
-fi
-
 # Patchset server-Desktop_Refcount
 # |
 # | This patchset has the following (direct or indirect) dependencies:
diff --git a/patches/winebuild-Fake_Dlls/0003-winebuild-Generate-syscall-thunks-for-ntdll-exports.patch b/patches/winebuild-Fake_Dlls/0003-winebuild-Generate-syscall-thunks-for-ntdll-exports.patch
index 8dd18d544..6d62c691d 100644
--- a/patches/winebuild-Fake_Dlls/0003-winebuild-Generate-syscall-thunks-for-ntdll-exports.patch
+++ b/patches/winebuild-Fake_Dlls/0003-winebuild-Generate-syscall-thunks-for-ntdll-exports.patch
@@ -1,25 +1,28 @@
-From 916104878b837947e14ed7d44f591de5ba4fa2dc Mon Sep 17 00:00:00 2001
+From e695bf789da272b2855ad864b0837c38c1a78e62 Mon Sep 17 00:00:00 2001
 From: =?UTF-8?q?Michael=20M=C3=BCller?= <michael@fds-team.de>
 Date: Thu, 11 May 2017 05:32:55 +0200
 Subject: [PATCH] winebuild: Generate syscall thunks for ntdll exports.
 
 Based on a patch by Erich E. Hoover.
 ---
- dlls/ntdll/loader.c          |   3 +
- dlls/ntdll/signal_i386.c     |   4 +-
- dlls/ntdll/tests/exception.c |   2 +
- dlls/ntdll/thread.c          |   3 +
- include/winternl.h           |   2 +-
- tools/winebuild/build.h      |   7 +++
- tools/winebuild/import.c     |  10 ++--
- tools/winebuild/parser.c     |  59 ++++++++++++++++++++
- tools/winebuild/spec16.c     |  22 +-------
- tools/winebuild/spec32.c     | 104 +++++++++++++++++++++++++++++++++++
- tools/winebuild/utils.c      |  21 +++++++
- 11 files changed, 210 insertions(+), 27 deletions(-)
+ dlls/ntdll/loader.c            |   3 +
+ dlls/ntdll/signal_i386.c       |   4 +-
+ dlls/ntdll/tests/exception.c   |   2 +
+ dlls/ntdll/thread.c            |   3 +-
+ dlls/ntdll/unix/thread.c       |   3 +-
+ dlls/ntdll/unix/unix_private.h |   2 +-
+ dlls/ntdll/unixlib.h           |   4 +-
+ include/winternl.h             |   2 +-
+ tools/winebuild/build.h        |   7 +++
+ tools/winebuild/import.c       |  10 ++--
+ tools/winebuild/parser.c       |  59 +++++++++++++++++++
+ tools/winebuild/spec16.c       |  22 +------
+ tools/winebuild/spec32.c       | 104 +++++++++++++++++++++++++++++++++
+ tools/winebuild/utils.c        |  21 +++++++
+ 14 files changed, 214 insertions(+), 32 deletions(-)
 
 diff --git a/dlls/ntdll/loader.c b/dlls/ntdll/loader.c
-index 51addaaf983..b888b680bc4 100644
+index 45d32399adf..b42cff8bcd4 100644
 --- a/dlls/ntdll/loader.c
 +++ b/dlls/ntdll/loader.c
 @@ -3810,6 +3810,7 @@ PIMAGE_NT_HEADERS WINAPI RtlImageNtHeader(HMODULE hModule)
@@ -40,7 +43,7 @@ index 51addaaf983..b888b680bc4 100644
  
      if (process_detaching) return;
 diff --git a/dlls/ntdll/signal_i386.c b/dlls/ntdll/signal_i386.c
-index 72413dcd6c7..88dffb03138 100644
+index be88d9bf3c7..84ab7991886 100644
 --- a/dlls/ntdll/signal_i386.c
 +++ b/dlls/ntdll/signal_i386.c
 @@ -448,6 +448,8 @@ static ULONG first_ldt_entry = 32;
@@ -75,26 +78,82 @@ index a5e6faa461a..51938bf84cc 100644
      ok( context.SegCs == LOWORD(expect.SegCs), "wrong SegCs %08x/%08x\n", context.SegCs, expect.SegCs );
      ok( context.SegDs == LOWORD(expect.SegDs), "wrong SegDs %08x/%08x\n", context.SegDs, expect.SegDs );
 diff --git a/dlls/ntdll/thread.c b/dlls/ntdll/thread.c
-index d5e34cae3b1..73057d9a9a4 100644
+index a2f5df1b1c2..dc9affc061a 100644
 --- a/dlls/ntdll/thread.c
 +++ b/dlls/ntdll/thread.c
-@@ -201,6 +201,8 @@ void map_user_shared_data(void)
-     NtClose( section );
+@@ -173,6 +173,7 @@ int __cdecl __wine_dbg_output( const char *str )
+     return unix_funcs->dbg_output( str );
  }
  
 +extern void DECLSPEC_NORETURN __wine_syscall_dispatcher( void );
-+
+ 
  /***********************************************************************
   *           thread_init
-  *
-@@ -235,6 +237,7 @@ TEB *thread_init(void)
+@@ -189,7 +190,7 @@ TEB *thread_init( SIZE_T *info_size, BOOL *suspend )
+     signal_init_early();
  
-     teb = unix_funcs->virtual_alloc_first_teb();
-     unix_funcs->init_threading( &nb_threads, &__wine_ldt_copy );
-+    teb->WOW32Reserved = __wine_syscall_dispatcher;
+     teb = unix_funcs->init_threading( &nb_threads, &__wine_ldt_copy, info_size, suspend, &server_cpus,
+-                                      &is_wow64, &server_start_time );
++                                      &is_wow64, &server_start_time, __wine_syscall_dispatcher );
  
      peb = teb->Peb;
      peb->FastPebLock        = &peb_lock;
+diff --git a/dlls/ntdll/unix/thread.c b/dlls/ntdll/unix/thread.c
+index d3e07cae80e..449e5814c2e 100644
+--- a/dlls/ntdll/unix/thread.c
++++ b/dlls/ntdll/unix/thread.c
+@@ -83,7 +83,7 @@ static void pthread_exit_wrapper( int status )
+  *           init_threading
+  */
+ TEB * CDECL init_threading( int *nb_threads_ptr, struct ldt_copy **ldt_copy, SIZE_T *size, BOOL *suspend,
+-                            unsigned int *cpus, BOOL *wow64, timeout_t *start_time )
++                            unsigned int *cpus, BOOL *wow64, timeout_t *start_time, void *syscall_handler )
+ {
+     TEB *teb;
+     SIZE_T info_size;
+@@ -95,6 +95,7 @@ TEB * CDECL init_threading( int *nb_threads_ptr, struct ldt_copy **ldt_copy, SIZ
+     nb_threads = nb_threads_ptr;
+ 
+     teb = virtual_alloc_first_teb();
++    teb->WOW32Reserved = syscall_handler;
+     thread_data = (struct ntdll_thread_data *)&teb->GdiTebBatch;
+     thread_data->request_fd = -1;
+     thread_data->reply_fd   = -1;
+diff --git a/dlls/ntdll/unix/unix_private.h b/dlls/ntdll/unix/unix_private.h
+index 6512160972d..e9a56b37ea1 100644
+--- a/dlls/ntdll/unix/unix_private.h
++++ b/dlls/ntdll/unix/unix_private.h
+@@ -98,7 +98,7 @@ extern int CDECL server_pipe( int fd[2] ) DECLSPEC_HIDDEN;
+ extern void CDECL server_init_process_done(void) DECLSPEC_HIDDEN;
+ extern TEB * CDECL init_threading( int *nb_threads_ptr, struct ldt_copy **ldt_copy, SIZE_T *size,
+                                    BOOL *suspend, unsigned int *cpus, BOOL *wow64,
+-                                   timeout_t *start_time ) DECLSPEC_HIDDEN;
++                                   timeout_t *start_time, void *syscall_handler ) DECLSPEC_HIDDEN;
+ extern NTSTATUS CDECL create_thread( SIZE_T stack_reserve, SIZE_T stack_commit, HANDLE actctx, DWORD tid,
+                                      int request_fd, PRTL_THREAD_START_ROUTINE start,
+                                      void *param, void *relay ) DECLSPEC_HIDDEN;
+diff --git a/dlls/ntdll/unixlib.h b/dlls/ntdll/unixlib.h
+index 72f35cf67e8..93a51871f1d 100644
+--- a/dlls/ntdll/unixlib.h
++++ b/dlls/ntdll/unixlib.h
+@@ -28,7 +28,7 @@ struct ldt_copy;
+ struct msghdr;
+ 
+ /* increment this when you change the function table */
+-#define NTDLL_UNIXLIB_VERSION 28
++#define NTDLL_UNIXLIB_VERSION 29
+ 
+ struct unix_funcs
+ {
+@@ -165,7 +165,7 @@ struct unix_funcs
+ 
+     /* thread/process functions */
+     TEB *         (CDECL *init_threading)( int *nb_threads_ptr, struct ldt_copy **ldt_copy, SIZE_T *size,
+-                                           BOOL *suspend, unsigned int *cpus, BOOL *wow64, timeout_t *start_time );
++                                           BOOL *suspend, unsigned int *cpus, BOOL *wow64, timeout_t *start_time, void *syscall_handler );
+     NTSTATUS      (CDECL *create_thread)( SIZE_T stack_reserve, SIZE_T stack_commit, HANDLE actctx,
+                                           DWORD tid, int request_fd, PRTL_THREAD_START_ROUTINE start,
+                                           void *param, void *relay );
 diff --git a/include/winternl.h b/include/winternl.h
 index 44a58cadc7a..065f3d24f52 100644
 --- a/include/winternl.h
diff --git a/patches/winebuild-Fake_Dlls/0005-winebuild-Add-stub-functions-in-fake-dlls.patch b/patches/winebuild-Fake_Dlls/0005-winebuild-Add-stub-functions-in-fake-dlls.patch
index c26e699f4..7dcd7ad93 100644
--- a/patches/winebuild-Fake_Dlls/0005-winebuild-Add-stub-functions-in-fake-dlls.patch
+++ b/patches/winebuild-Fake_Dlls/0005-winebuild-Add-stub-functions-in-fake-dlls.patch
@@ -1,4 +1,4 @@
-From c7bd63dbac91eb167ec90846cd8cb7a193b04aa1 Mon Sep 17 00:00:00 2001
+From 1c0ba3961674f316dba2d89042571b7863076f08 Mon Sep 17 00:00:00 2001
 From: =?UTF-8?q?Michael=20M=C3=BCller?= <michael@fds-team.de>
 Date: Mon, 15 May 2017 16:27:56 +0200
 Subject: [PATCH] winebuild: Add stub functions in fake dlls.
@@ -62,7 +62,7 @@ index 926fa913866..902907329c0 100644
      CloseHandle(map);
      CloseHandle(file);
 diff --git a/dlls/ntdll/loader.c b/dlls/ntdll/loader.c
-index b888b680bc4..bb60aa919af 100644
+index b42cff8bcd4..b21d88bb13b 100644
 --- a/dlls/ntdll/loader.c
 +++ b/dlls/ntdll/loader.c
 @@ -3811,6 +3811,7 @@ PIMAGE_NT_HEADERS WINAPI RtlImageNtHeader(HMODULE hModule)
@@ -82,10 +82,10 @@ index b888b680bc4..bb60aa919af 100644
      pthread_sigmask( SIG_UNBLOCK, &server_block_set, NULL );
  
 diff --git a/dlls/ntdll/thread.c b/dlls/ntdll/thread.c
-index 73057d9a9a4..8c9b0b11c86 100644
+index ed77e4a2e98..a988d4c3e6b 100644
 --- a/dlls/ntdll/thread.c
 +++ b/dlls/ntdll/thread.c
-@@ -203,6 +203,39 @@ void map_user_shared_data(void)
+@@ -175,6 +175,39 @@ int __cdecl __wine_dbg_output( const char *str )
  
  extern void DECLSPEC_NORETURN __wine_syscall_dispatcher( void );
  
@@ -125,10 +125,10 @@ index 73057d9a9a4..8c9b0b11c86 100644
  /***********************************************************************
   *           thread_init
   *
-@@ -238,6 +271,7 @@ TEB *thread_init(void)
-     teb = unix_funcs->virtual_alloc_first_teb();
-     unix_funcs->init_threading( &nb_threads, &__wine_ldt_copy );
-     teb->WOW32Reserved = __wine_syscall_dispatcher;
+@@ -190,6 +223,7 @@ TEB *thread_init( SIZE_T *info_size, BOOL *suspend )
+ 
+     teb = unix_funcs->init_threading( &nb_threads, &__wine_ldt_copy, info_size, suspend, &server_cpus,
+                                       &is_wow64, &server_start_time, __wine_syscall_dispatcher );
 +    teb->Spare2 = (ULONG_PTR)__wine_fakedll_dispatcher;
  
      peb = teb->Peb;
diff --git a/patches/winebuild-Fake_Dlls/0010-tools-winebuild-Add-syscall-thunks-for-64-bit.patch b/patches/winebuild-Fake_Dlls/0010-tools-winebuild-Add-syscall-thunks-for-64-bit.patch
index 35f9eb138..b1663793e 100644
--- a/patches/winebuild-Fake_Dlls/0010-tools-winebuild-Add-syscall-thunks-for-64-bit.patch
+++ b/patches/winebuild-Fake_Dlls/0010-tools-winebuild-Add-syscall-thunks-for-64-bit.patch
@@ -1,16 +1,16 @@
-From 9382d41830426f68bf5da895f308f6691df8111b Mon Sep 17 00:00:00 2001
+From 2f82153b52cd517c9e30ab5ac26a0c60ed70a48d Mon Sep 17 00:00:00 2001
 From: =?UTF-8?q?Michael=20M=C3=BCller?= <michael@fds-team.de>
 Date: Thu, 7 Sep 2017 00:38:09 +0200
 Subject: [PATCH] tools/winebuild: Add syscall thunks for 64 bit.
 
 ---
  dlls/kernel32/tests/loader.c |   7 +-
- dlls/ntdll/thread.c          |  13 +-
+ dlls/ntdll/unix/virtual.c    |   4 +-
  libs/wine/loader.c           |   4 +
  server/mapping.c             |   6 +-
  tools/winebuild/parser.c     |   2 +-
  tools/winebuild/spec32.c     | 285 ++++++++++++++++++++++++++++++++++-
- 6 files changed, 306 insertions(+), 11 deletions(-)
+ 6 files changed, 297 insertions(+), 11 deletions(-)
 
 diff --git a/dlls/kernel32/tests/loader.c b/dlls/kernel32/tests/loader.c
 index 95939ba6bde..ae5462f6e55 100644
@@ -39,45 +39,27 @@ index 95939ba6bde..ae5462f6e55 100644
          {
              todo_wine ok(0, "%s: Export is a stub-function, skipping\n", func_name);
              continue;
-diff --git a/dlls/ntdll/thread.c b/dlls/ntdll/thread.c
-index 8187dbe1f2d..5427cbcf04e 100644
---- a/dlls/ntdll/thread.c
-+++ b/dlls/ntdll/thread.c
-@@ -51,6 +51,8 @@ WINE_DECLARE_DEBUG_CHANNEL(relay);
+diff --git a/dlls/ntdll/unix/virtual.c b/dlls/ntdll/unix/virtual.c
+index 7c5b5d5cf15..66ae4cb841c 100644
+--- a/dlls/ntdll/unix/virtual.c
++++ b/dlls/ntdll/unix/virtual.c
+@@ -2546,14 +2546,14 @@ TEB *virtual_alloc_first_teb(void)
+     TEB *teb;
+     PEB *peb;
+     NTSTATUS status;
+-    SIZE_T data_size = page_size;
++    SIZE_T data_size = page_size * 2;
+     SIZE_T peb_size = page_size;
+     SIZE_T teb_size = signal_stack_mask + 1;
+     SIZE_T total = 32 * teb_size;
  
- struct _KUSER_SHARED_DATA *user_shared_data = NULL;
- 
-+extern void DECLSPEC_NORETURN __wine_syscall_dispatcher( void );
-+
- void (WINAPI *kernel32_start_process)(LPTHREAD_START_ROUTINE,void*) = NULL;
- 
- static PEB *peb;
-@@ -256,9 +258,9 @@ TEB *thread_init(void)
      /* reserve space for shared user data */
- 
-     addr = (void *)0x7ffe0000;
--    size = 0x1000;
-+    size = 0x2000;
-     status = NtAllocateVirtualMemory( NtCurrentProcess(), &addr, 0, &size,
--                                      MEM_RESERVE|MEM_COMMIT, PAGE_READONLY );
-+                                      MEM_RESERVE|MEM_COMMIT, PAGE_READWRITE );
+     status = NtAllocateVirtualMemory( NtCurrentProcess(), (void **)&user_shared_data, 0, &data_size,
+-                                      MEM_RESERVE | MEM_COMMIT, PAGE_READONLY );
++                                      MEM_RESERVE | MEM_COMMIT, PAGE_READWRITE );
      if (status)
      {
-         MESSAGE( "wine: failed to map the shared user data: %08x\n", status );
-@@ -266,6 +268,13 @@ TEB *thread_init(void)
-     }
-     user_shared_data = addr;
- 
-+#if defined(__APPLE__) && defined(__x86_64__)
-+    *((DWORD*)((char*)user_shared_data + 0x1000)) = __wine_syscall_dispatcher;
-+#endif
-+
-+    /* Init this field early for x86_64 syscall thunks. */
-+    user_shared_data->SystemCallPad[0] = 1;
-+
-     /* allocate and initialize the PEB and initial TEB */
- 
-     teb = unix_funcs->virtual_alloc_first_teb();
+         ERR( "wine: failed to map the shared user data: %08x\n", status );
 diff --git a/libs/wine/loader.c b/libs/wine/loader.c
 index 4597a6cb324..3d0d75e9c6d 100644
 --- a/libs/wine/loader.c
diff --git a/patches/winebuild-Fake_Dlls/definition b/patches/winebuild-Fake_Dlls/definition
index 5ffc046f0..99799c336 100644
--- a/patches/winebuild-Fake_Dlls/definition
+++ b/patches/winebuild-Fake_Dlls/definition
@@ -3,3 +3,5 @@ Fixes: [42741] StarCraft I: 1.18 PTR fails to initialize ClientSdk.dll
 Fixes: [45349] Multiple applications and games crash due to missing support for 64-bit syscall thunks (StreetFighter V)
 Fixes: [45573] League of Legends 8.12+ fails to start a game (anticheat engine, hooking of syscall return instructions)
 Fixes: [45650] chromium 32-bit sandbox expects different syscall thunks depending on Windows version
+Depends: ntdll-WRITECOPY
+Depends: ws2_32-WSACleanup
\ No newline at end of file
diff --git a/patches/ws2_32-WSACleanup/0002-ws2_32-Invalidate-client-side-file-descriptor-cache-.patch b/patches/ws2_32-WSACleanup/0002-ws2_32-Invalidate-client-side-file-descriptor-cache-.patch
index 2d0f016cc..d830cf2db 100644
--- a/patches/ws2_32-WSACleanup/0002-ws2_32-Invalidate-client-side-file-descriptor-cache-.patch
+++ b/patches/ws2_32-WSACleanup/0002-ws2_32-Invalidate-client-side-file-descriptor-cache-.patch
@@ -1,4 +1,4 @@
-From d6f023a80929f22d520584d47abb08e5b523e0c0 Mon Sep 17 00:00:00 2001
+From 613ea1e263d4fbda67465ebaae2331df7728106a Mon Sep 17 00:00:00 2001
 From: Sebastian Lackner <sebastian@fds-team.de>
 Date: Sun, 6 Sep 2015 12:41:17 +0200
 Subject: [PATCH] ws2_32: Invalidate client-side file descriptor cache in
@@ -29,7 +29,7 @@ index 42532bd9f1c..ba46f170670 100644
  @ cdecl wine_server_handle_to_fd(long long ptr ptr)
  @ cdecl wine_server_release_fd(long long)
 diff --git a/dlls/ntdll/server.c b/dlls/ntdll/server.c
-index bde4a2add18..de3b4b9d2e7 100644
+index 6fb86a68d6f..2f95e190963 100644
 --- a/dlls/ntdll/server.c
 +++ b/dlls/ntdll/server.c
 @@ -239,6 +239,14 @@ void CDECL wine_server_release_fd( HANDLE handle, int unix_fd )
@@ -48,10 +48,10 @@ index bde4a2add18..de3b4b9d2e7 100644
  /***********************************************************************
   *           server_init_process
 diff --git a/dlls/ntdll/unix/loader.c b/dlls/ntdll/unix/loader.c
-index 1297c451a10..06c0174dd5e 100644
+index 767cae92b48..05c6f1e43bf 100644
 --- a/dlls/ntdll/unix/loader.c
 +++ b/dlls/ntdll/unix/loader.c
-@@ -1044,6 +1044,7 @@ static struct unix_funcs unix_funcs =
+@@ -1074,6 +1074,7 @@ static struct unix_funcs unix_funcs =
      server_wait,
      server_queue_process_apc,
      server_send_fd,
@@ -60,10 +60,10 @@ index 1297c451a10..06c0174dd5e 100644
      server_fd_to_handle,
      server_handle_to_fd,
 diff --git a/dlls/ntdll/unix/server.c b/dlls/ntdll/unix/server.c
-index 17b23e58d28..f7d172cf324 100644
+index 66c438fd62d..c6eb52c5986 100644
 --- a/dlls/ntdll/unix/server.c
 +++ b/dlls/ntdll/unix/server.c
-@@ -983,6 +983,26 @@ static int remove_fd_from_cache( HANDLE handle )
+@@ -991,6 +991,26 @@ static int remove_fd_from_cache( HANDLE handle )
      return fd;
  }
  
@@ -91,10 +91,10 @@ index 17b23e58d28..f7d172cf324 100644
  /***********************************************************************
   *           server_get_unix_fd
 diff --git a/dlls/ntdll/unix/unix_private.h b/dlls/ntdll/unix/unix_private.h
-index 14c4ee4cd97..5657bc9c27d 100644
+index 6fdaa17f087..6512160972d 100644
 --- a/dlls/ntdll/unix/unix_private.h
 +++ b/dlls/ntdll/unix/unix_private.h
-@@ -90,6 +90,7 @@ extern unsigned int CDECL server_wait( const select_op_t *select_op, data_size_t
+@@ -85,6 +85,7 @@ extern unsigned int CDECL server_wait( const select_op_t *select_op, data_size_t
                                         const LARGE_INTEGER *timeout ) DECLSPEC_HIDDEN;
  extern unsigned int CDECL server_queue_process_apc( HANDLE process, const apc_call_t *call, apc_result_t *result ) DECLSPEC_HIDDEN;
  extern void CDECL server_send_fd( int fd ) DECLSPEC_HIDDEN;
@@ -103,19 +103,19 @@ index 14c4ee4cd97..5657bc9c27d 100644
                                       int *needs_close, enum server_fd_type *type,
                                       unsigned int *options ) DECLSPEC_HIDDEN;
 diff --git a/dlls/ntdll/unixlib.h b/dlls/ntdll/unixlib.h
-index 67c63fd9268..51e27be22b7 100644
+index 4e5cec6637e..72f35cf67e8 100644
 --- a/dlls/ntdll/unixlib.h
 +++ b/dlls/ntdll/unixlib.h
 @@ -28,7 +28,7 @@ struct ldt_copy;
  struct msghdr;
  
  /* increment this when you change the function table */
--#define NTDLL_UNIXLIB_VERSION 19
-+#define NTDLL_UNIXLIB_VERSION 20
+-#define NTDLL_UNIXLIB_VERSION 27
++#define NTDLL_UNIXLIB_VERSION 28
  
  struct unix_funcs
  {
-@@ -128,6 +128,7 @@ struct unix_funcs
+@@ -184,6 +184,7 @@ struct unix_funcs
                                          const LARGE_INTEGER *timeout );
      unsigned int  (CDECL *server_queue_process_apc)( HANDLE process, const apc_call_t *call, apc_result_t *result );
      void          (CDECL *server_send_fd)( int fd );

diff --git a/patches/ntdll-RtlCreateUserThread/0001-ntdll-Refactor-RtlCreateUserThread-into-NtCreateThre.patch b/patches/ntdll-RtlCreateUserThread/0001-ntdll-Refactor-RtlCreateUserThread-into-NtCreateThre.patch
index 4869a02b3..83ff11527 100644
--- a/patches/ntdll-RtlCreateUserThread/0001-ntdll-Refactor-RtlCreateUserThread-into-NtCreateThre.patch
+++ b/patches/ntdll-RtlCreateUserThread/0001-ntdll-Refactor-RtlCreateUserThread-into-NtCreateThre.patch
@@ -1,4 +1,4 @@
-From 9fdc6855fed56b4b6baa0c5bd0f4633fec536c06 Mon Sep 17 00:00:00 2001
+From df45ba13b75af0ae4c8c4166e39f9e640942466b Mon Sep 17 00:00:00 2001
 From: Andrew Wesie <awesie@gmail.com>
 Date: Fri, 27 Jul 2018 01:22:59 -0500
 Subject: [PATCH] ntdll: Refactor RtlCreateUserThread into NtCreateThreadEx.
@@ -7,9 +7,9 @@ League of Legends hooks NtCreateThread or NtCreateThreadEx (depending on the
 reported version), and expects it to be called whenever a thread is created.
 ---
  dlls/ntdll/ntdll.spec |   2 +-
- dlls/ntdll/thread.c   | 196 ++++++++++++++++++++++++++++++++++--------
- include/winternl.h    |  27 ++++++
- 3 files changed, 188 insertions(+), 37 deletions(-)
+ dlls/ntdll/thread.c   | 180 +++++++++++++++++++++++++++++++++++-------
+ include/winternl.h    |  27 +++++++
+ 3 files changed, 180 insertions(+), 29 deletions(-)
 
 diff --git a/dlls/ntdll/ntdll.spec b/dlls/ntdll/ntdll.spec
 index 42532bd9f1c..65fdc30d7a4 100644
@@ -25,10 +25,10 @@ index 42532bd9f1c..65fdc30d7a4 100644
  @ stdcall NtCreateTimer(ptr long ptr long)
  @ stub NtCreateToken
 diff --git a/dlls/ntdll/thread.c b/dlls/ntdll/thread.c
-index c9a2240a4da..f04b8bb337e 100644
+index d5e34cae3b1..4e1b3f23b7c 100644
 --- a/dlls/ntdll/thread.c
 +++ b/dlls/ntdll/thread.c
-@@ -406,34 +406,18 @@ static void start_thread( struct startup_info *info )
+@@ -377,28 +377,10 @@ static void WINAPI call_thread_entry_point( LPTHREAD_START_ROUTINE entry, void *
  /***********************************************************************
   *              NtCreateThreadEx   (NTDLL.@)
   */
@@ -58,21 +58,15 @@ index c9a2240a4da..f04b8bb337e 100644
 -                                     HANDLE *handle_ptr, CLIENT_ID *id )
 +                                  ULONG stack_reserve, PPS_ATTRIBUTE_LIST ps_attr_list )
  {
-     sigset_t sigset;
-     pthread_t pthread_id;
--    pthread_attr_t attr;
-+    pthread_attr_t pthread_attr;
-     struct ntdll_thread_data *thread_data;
-     struct startup_info *info;
-+    BOOLEAN suspended = !!(flags & THREAD_CREATE_FLAGS_CREATE_SUSPENDED);
-+    CLIENT_ID *id = NULL;
      HANDLE handle = 0, actctx = 0;
-     TEB *teb = NULL;
      DWORD tid = 0;
-@@ -444,6 +428,33 @@ NTSTATUS WINAPI RtlCreateUserThread( HANDLE process, SECURITY_DESCRIPTOR *descr,
+@@ -406,6 +388,35 @@ NTSTATUS WINAPI RtlCreateUserThread( HANDLE process, SECURITY_DESCRIPTOR *descr,
+     NTSTATUS status;
+     data_size_t len = 0;
      struct object_attributes *objattr = NULL;
-     INITIAL_TEB stack;
- 
++    BOOLEAN suspended = !!(flags & THREAD_CREATE_FLAGS_CREATE_SUSPENDED);
++    CLIENT_ID *id = NULL;
++
 +    TRACE("(%p, %d, %p, %p, %p, %p, %u, %u, %u, %u, %p)\n",
 +          handle_ptr, access, thread_attr, process, start, param, flags,
 +          zero_bits, stack_commit, stack_reserve, ps_attr_list);
@@ -99,11 +93,10 @@ index c9a2240a4da..f04b8bb337e 100644
 +
 +    if (access == (ACCESS_MASK)0)
 +        access = THREAD_ALL_ACCESS;
-+
+ 
      if (process != NtCurrentProcess())
      {
-         apc_call_t call;
-@@ -469,12 +480,7 @@ NTSTATUS WINAPI RtlCreateUserThread( HANDLE process, SECURITY_DESCRIPTOR *descr,
+@@ -432,12 +443,7 @@ NTSTATUS WINAPI RtlCreateUserThread( HANDLE process, SECURITY_DESCRIPTOR *descr,
          return result.create_thread.status;
      }
  
@@ -117,7 +110,7 @@ index c9a2240a4da..f04b8bb337e 100644
  
      if (unix_funcs->server_pipe( request_pipe ) == -1)
      {
-@@ -486,7 +492,7 @@ NTSTATUS WINAPI RtlCreateUserThread( HANDLE process, SECURITY_DESCRIPTOR *descr,
+@@ -449,7 +455,7 @@ NTSTATUS WINAPI RtlCreateUserThread( HANDLE process, SECURITY_DESCRIPTOR *descr,
      SERVER_START_REQ( new_thread )
      {
          req->process    = wine_server_obj_handle( process );
@@ -126,36 +119,8 @@ index c9a2240a4da..f04b8bb337e 100644
          req->suspend    = suspended;
          req->request_fd = request_pipe[0];
          wine_server_add_data( req, objattr, len );
-@@ -547,20 +553,20 @@ NTSTATUS WINAPI RtlCreateUserThread( HANDLE process, SECURITY_DESCRIPTOR *descr,
-     thread_data->wait_fd[1]  = -1;
-     thread_data->start_stack = (char *)teb->Tib.StackBase;
- 
--    pthread_attr_init( &attr );
--    pthread_attr_setstack( &attr, teb->DeallocationStack,
-+    pthread_attr_init( &pthread_attr );
-+    pthread_attr_setstack( &pthread_attr, teb->DeallocationStack,
-                          (char *)teb->Tib.StackBase + extra_stack - (char *)teb->DeallocationStack );
--    pthread_attr_setguardsize( &attr, 0 );
--    pthread_attr_setscope( &attr, PTHREAD_SCOPE_SYSTEM ); /* force creating a kernel thread */
-+    pthread_attr_setguardsize( &pthread_attr, 0 );
-+    pthread_attr_setscope( &pthread_attr, PTHREAD_SCOPE_SYSTEM ); /* force creating a kernel thread */
-     InterlockedIncrement( &nb_threads );
--    if (pthread_create( &pthread_id, &attr, (void * (*)(void *))start_thread, info ))
-+    if (pthread_create( &pthread_id, &pthread_attr, (void * (*)(void *))start_thread, info ))
-     {
-         InterlockedDecrement( &nb_threads );
--        pthread_attr_destroy( &attr );
-+        pthread_attr_destroy( &pthread_attr );
-         status = STATUS_NO_MEMORY;
-         goto error;
-     }
--    pthread_attr_destroy( &attr );
-+    pthread_attr_destroy( &pthread_attr );
-     pthread_sigmask( SIG_SETMASK, &sigset, NULL );
- 
-     if (id) id->UniqueThread = ULongToHandle(tid);
-@@ -577,6 +583,124 @@ error:
-     return status;
+@@ -539,6 +545,124 @@ NTSTATUS WINAPI NtSuspendThread( HANDLE handle, PULONG count )
+     return ret;
  }
  
 +NTSTATUS WINAPI NtCreateThread( HANDLE *handle_ptr, ACCESS_MASK access, OBJECT_ATTRIBUTES *attr, HANDLE process,
@@ -278,9 +243,9 @@ index c9a2240a4da..f04b8bb337e 100644
 +
  
  /******************************************************************************
-  *              RtlGetNtGlobalFlags   (NTDLL.@)
+  *              NtResumeThread   (NTDLL.@)
 diff --git a/include/winternl.h b/include/winternl.h
-index 199b8fc52f2..489b145937c 100644
+index f362790dbca..b79fcd67012 100644
 --- a/include/winternl.h
 +++ b/include/winternl.h
 @@ -2274,6 +2274,33 @@ typedef struct _NLSTABLEINFO
diff --git a/patches/ntdll-Syscall_Emulation/0001-ntdll-Support-x86_64-syscall-emulation.patch b/patches/ntdll-Syscall_Emulation/0001-ntdll-Support-x86_64-syscall-emulation.patch
index c94ae38cc..4ae5fcdfa 100644
--- a/patches/ntdll-Syscall_Emulation/0001-ntdll-Support-x86_64-syscall-emulation.patch
+++ b/patches/ntdll-Syscall_Emulation/0001-ntdll-Support-x86_64-syscall-emulation.patch
@@ -1,4 +1,4 @@
-From b18e90a92f2e44b5167016c90ea1d49f4d7e3211 Mon Sep 17 00:00:00 2001
+From 20298be5a42af52be27c56f88ad6a8a0304b55b6 Mon Sep 17 00:00:00 2001
 From: Paul Gofman <pgofman@codeweavers.com>
 Date: Mon, 30 Dec 2019 13:27:53 +0300
 Subject: [PATCH] ntdll: Support x86_64 syscall emulation.
@@ -15,10 +15,10 @@ is used for trapping syscalls.
  3 files changed, 119 insertions(+), 2 deletions(-)
 
 diff --git a/configure.ac b/configure.ac
-index 7b7433efde4..e62daf9e384 100644
+index e3d63ed7501..2fbec4129df 100644
 --- a/configure.ac
 +++ b/configure.ac
-@@ -474,6 +474,7 @@ AC_CHECK_HEADERS(\
+@@ -464,6 +464,7 @@ AC_CHECK_HEADERS(\
  	linux/joystick.h \
  	linux/major.h \
  	linux/param.h \
@@ -27,7 +27,7 @@ index 7b7433efde4..e62daf9e384 100644
  	linux/types.h \
  	linux/ucdrom.h \
 diff --git a/dlls/ntdll/signal_x86_64.c b/dlls/ntdll/signal_x86_64.c
-index 66a17b9bbc9..2424109553c 100644
+index 0ccc7cbceb6..149ad1bf5e7 100644
 --- a/dlls/ntdll/signal_x86_64.c
 +++ b/dlls/ntdll/signal_x86_64.c
 @@ -24,6 +24,7 @@
@@ -52,16 +52,16 @@ index 66a17b9bbc9..2424109553c 100644
  #define NONAMELESSUNION
  #define NONAMELESSSTRUCT
  #include "ntstatus.h"
-@@ -77,6 +85,8 @@
+@@ -76,6 +84,8 @@
+ 
  WINE_DEFAULT_DEBUG_CHANNEL(seh);
- WINE_DECLARE_DEBUG_CHANNEL(relay);
  
 +extern void DECLSPEC_NORETURN __wine_syscall_dispatcher( void );
 +
  typedef struct _SCOPE_TABLE
  {
      ULONG Count;
-@@ -3113,6 +3123,104 @@ static void usr1_handler( int signal, siginfo_t *siginfo, void *ucontext )
+@@ -2797,6 +2807,104 @@ static void usr1_handler( int signal, siginfo_t *siginfo, void *ucontext )
      restore_context( &context, ucontext );
  }
  
@@ -166,7 +166,7 @@ index 66a17b9bbc9..2424109553c 100644
  
  /***********************************************************************
   *           __wine_set_signal_handler   (NTDLL.@)
-@@ -3158,6 +3266,9 @@ void signal_init_process(void)
+@@ -2842,6 +2950,9 @@ void signal_init_process(void)
      sig_act.sa_sigaction = trap_handler;
      if (sigaction( SIGTRAP, &sig_act, NULL ) == -1) goto error;
  #endif
diff --git a/patches/ntdll-ThreadTime/0006-ntdll-Fill-process-virtual-memory-counters-in-NtQuer.patch b/patches/ntdll-ThreadTime/0006-ntdll-Fill-process-virtual-memory-counters-in-NtQuer.patch
index 4656891e3..7b2e48dd6 100644
--- a/patches/ntdll-ThreadTime/0006-ntdll-Fill-process-virtual-memory-counters-in-NtQuer.patch
+++ b/patches/ntdll-ThreadTime/0006-ntdll-Fill-process-virtual-memory-counters-in-NtQuer.patch
@@ -1,4 +1,4 @@
-From e1ff2fee38b602ff500c35f1eb589162c0d166d1 Mon Sep 17 00:00:00 2001
+From 4fd43a8364333519e777718b66e628ace1ad9fff Mon Sep 17 00:00:00 2001
 From: =?UTF-8?q?Michael=20M=C3=BCller?= <michael@fds-team.de>
 Date: Thu, 9 Mar 2017 22:56:45 +0100
 Subject: [PATCH] ntdll: Fill process virtual memory counters in
@@ -13,7 +13,7 @@ FIXME: fill_VM_COUNTERS now uses a different method ... which one is better?
  4 files changed, 41 insertions(+), 1 deletion(-)
 
 diff --git a/dlls/ntdll/nt.c b/dlls/ntdll/nt.c
-index 7c2945f0a73..abb2d2176d6 100644
+index cbb7937631d..bb078c1aa21 100644
 --- a/dlls/ntdll/nt.c
 +++ b/dlls/ntdll/nt.c
 @@ -2686,8 +2686,11 @@ NTSTATUS WINAPI NtQuerySystemInformation(
@@ -29,10 +29,10 @@ index 7c2945f0a73..abb2d2176d6 100644
                          }
                          len += procstructlen;
 diff --git a/dlls/ntdll/ntdll_misc.h b/dlls/ntdll/ntdll_misc.h
-index e85f3a3b900..b45b9a02bb1 100644
+index 3ea0dd81349..3e2fa3642c1 100644
 --- a/dlls/ntdll/ntdll_misc.h
 +++ b/dlls/ntdll/ntdll_misc.h
-@@ -285,6 +285,7 @@ void     WINAPI LdrInitializeThunk(CONTEXT*,void**,ULONG_PTR,ULONG_PTR);
+@@ -249,6 +249,7 @@ void     WINAPI LdrInitializeThunk(CONTEXT*,void**,ULONG_PTR,ULONG_PTR);
  /* process / thread time */
  extern BOOL read_process_time(int unix_pid, int unix_tid, unsigned long clk_tck,
                                LARGE_INTEGER *kernel, LARGE_INTEGER *user) DECLSPEC_HIDDEN;
@@ -41,7 +41,7 @@ index e85f3a3b900..b45b9a02bb1 100644
  /* string functions */
  int    __cdecl NTDLL_tolower( int c );
 diff --git a/dlls/ntdll/process.c b/dlls/ntdll/process.c
-index c066610ebca..f2dddb18052 100644
+index f47d3c4bc6c..b36fc037dc5 100644
 --- a/dlls/ntdll/process.c
 +++ b/dlls/ntdll/process.c
 @@ -192,7 +192,7 @@ static void fill_VM_COUNTERS(VM_COUNTERS* pvmi)
@@ -54,10 +54,10 @@ index c066610ebca..f2dddb18052 100644
  
  #endif
 diff --git a/dlls/ntdll/thread.c b/dlls/ntdll/thread.c
-index b7d4e399f62..21e8b0c08f8 100644
+index cd1b65a210c..71051adc8b0 100644
 --- a/dlls/ntdll/thread.c
 +++ b/dlls/ntdll/thread.c
-@@ -385,6 +385,42 @@ void WINAPI RtlExitUserThread( ULONG status )
+@@ -355,6 +355,42 @@ void WINAPI RtlExitUserThread( ULONG status )
      for (;;) unix_funcs->exit_thread( status );
  }
  
@@ -99,7 +99,7 @@ index b7d4e399f62..21e8b0c08f8 100644
 +}
  
  /***********************************************************************
-  *           start_thread
+  *           call_thread_entry_point
 -- 
 2.26.2
 
diff --git a/patches/ntdll-Threading/0001-ntdll-Fix-race-condition-when-threads-are-killed-dur.patch b/patches/ntdll-Threading/0001-ntdll-Fix-race-condition-when-threads-are-killed-dur.patch
index 9f370c21d..e331c3dca 100644
--- a/patches/ntdll-Threading/0001-ntdll-Fix-race-condition-when-threads-are-killed-dur.patch
+++ b/patches/ntdll-Threading/0001-ntdll-Fix-race-condition-when-threads-are-killed-dur.patch
@@ -1,4 +1,4 @@
-From 5f34c6a4429025ee71616e677e0e59342bee17b0 Mon Sep 17 00:00:00 2001
+From 9da818bd948256572640e17766a14a72e58ce100 Mon Sep 17 00:00:00 2001
 From: Sebastian Lackner <sebastian@fds-team.de>
 Date: Wed, 25 Feb 2015 22:45:42 +0100
 Subject: [PATCH] ntdll: Fix race-condition when threads are killed during
@@ -15,22 +15,15 @@ only be executed safely when all other threads have terminated before. Most
 likely there are more Wine bugs in this area, but the attached patch should
 fix the most critical one (messed up refcounting of threads) for now.
 ---
- dlls/ntdll/thread.c | 8 +++++++-
- 1 file changed, 7 insertions(+), 1 deletion(-)
+ dlls/ntdll/thread.c      | 2 +-
+ dlls/ntdll/unix/thread.c | 7 +++++++
+ 2 files changed, 8 insertions(+), 1 deletion(-)
 
 diff --git a/dlls/ntdll/thread.c b/dlls/ntdll/thread.c
-index bb11521cf69..fee26ccd21d 100644
+index d5e34cae3b1..83237b3569a 100644
 --- a/dlls/ntdll/thread.c
 +++ b/dlls/ntdll/thread.c
-@@ -298,6 +298,7 @@ TEB *thread_init(void)
- void WINAPI RtlExitUserThread( ULONG status )
- {
-     static void *prev_teb;
-+    sigset_t sigset;
-     TEB *teb;
- 
-     if (status)  /* send the exit code to the server (0 is already the default) */
-@@ -311,7 +312,7 @@ void WINAPI RtlExitUserThread( ULONG status )
+@@ -295,7 +295,7 @@ void WINAPI RtlExitUserThread( ULONG status )
          SERVER_END_REQ;
      }
  
@@ -39,16 +32,29 @@ index bb11521cf69..fee26ccd21d 100644
      {
          LdrShutdownProcess();
          unix_funcs->exit_process( status );
-@@ -333,6 +334,11 @@ void WINAPI RtlExitUserThread( ULONG status )
+diff --git a/dlls/ntdll/unix/thread.c b/dlls/ntdll/unix/thread.c
+index 205a1312e92..563712bd59e 100644
+--- a/dlls/ntdll/unix/thread.c
++++ b/dlls/ntdll/unix/thread.c
+@@ -219,6 +219,7 @@ void CDECL abort_thread( int status )
+ void CDECL exit_thread( int status )
+ {
+     static void *prev_teb;
++    sigset_t sigset;
+     TEB *teb;
+ 
+     pthread_sigmask( SIG_BLOCK, &server_block_set, NULL );
+@@ -233,6 +234,12 @@ void CDECL exit_thread( int status )
+             virtual_free_teb( teb );
          }
      }
- 
++
 +    sigemptyset( &sigset );
 +    sigaddset( &sigset, SIGQUIT );
 +    pthread_sigmask( SIG_BLOCK, &sigset, NULL );
-+    if (!InterlockedDecrement( &nb_threads )) _exit( status );
++    if (!InterlockedDecrement( nb_threads )) _exit( status );
 +
-     for (;;) unix_funcs->exit_thread( status );
+     signal_exit_thread( status, pthread_exit_wrapper );
  }
  
 -- 
diff --git a/patches/ntdll-WRITECOPY/0003-ntdll-Setup-a-temporary-signal-handler-during-proces.patch b/patches/ntdll-WRITECOPY/0003-ntdll-Setup-a-temporary-signal-handler-during-proces.patch
index c48114473..8cb334d6f 100644
--- a/patches/ntdll-WRITECOPY/0003-ntdll-Setup-a-temporary-signal-handler-during-proces.patch
+++ b/patches/ntdll-WRITECOPY/0003-ntdll-Setup-a-temporary-signal-handler-during-proces.patch
@@ -1,4 +1,4 @@
-From 6fa954cc5fd6840c9207abf4f41e53be0dbf8728 Mon Sep 17 00:00:00 2001
+From fb4189551e75a8c52ee1abd98871138c06d94e0e Mon Sep 17 00:00:00 2001
 From: =?UTF-8?q?Michael=20M=C3=BCller?= <michael@fds-team.de>
 Date: Sat, 4 Oct 2014 02:53:22 +0200
 Subject: [PATCH] ntdll: Setup a temporary signal handler during process
@@ -15,7 +15,7 @@ Subject: [PATCH] ntdll: Setup a temporary signal handler during process
  7 files changed, 79 insertions(+)
 
 diff --git a/dlls/ntdll/ntdll_misc.h b/dlls/ntdll/ntdll_misc.h
-index e9a3230e814..04aee675e55 100644
+index ff791a60764..eba4ace6ae8 100644
 --- a/dlls/ntdll/ntdll_misc.h
 +++ b/dlls/ntdll/ntdll_misc.h
 @@ -78,6 +78,7 @@ extern LPCSTR debugstr_ObjectAttributes(const OBJECT_ATTRIBUTES *oa) DECLSPEC_HI
@@ -23,14 +23,14 @@ index e9a3230e814..04aee675e55 100644
  extern SIZE_T signal_stack_mask DECLSPEC_HIDDEN;
  extern void signal_init_process(void) DECLSPEC_HIDDEN;
 +extern void signal_init_early(void) DECLSPEC_HIDDEN;
- extern void signal_start_thread( LPTHREAD_START_ROUTINE entry, void *arg, BOOL suspend ) DECLSPEC_HIDDEN;
- extern void signal_start_process( LPTHREAD_START_ROUTINE entry, BOOL suspend ) DECLSPEC_HIDDEN;
  extern void version_init(void) DECLSPEC_HIDDEN;
+ extern void debug_init(void) DECLSPEC_HIDDEN;
+ extern TEB *thread_init(void) DECLSPEC_HIDDEN;
 diff --git a/dlls/ntdll/signal_arm.c b/dlls/ntdll/signal_arm.c
-index b7e387babf1..bb329f888ce 100644
+index 8ff9f66d3f0..44e3d2df523 100644
 --- a/dlls/ntdll/signal_arm.c
 +++ b/dlls/ntdll/signal_arm.c
-@@ -774,6 +774,12 @@ void signal_init_process(void)
+@@ -773,6 +773,12 @@ void signal_init_process(void)
      exit(1);
  }
  
@@ -44,10 +44,10 @@ index b7e387babf1..bb329f888ce 100644
  /***********************************************************************
   *            RtlUnwind  (NTDLL.@)
 diff --git a/dlls/ntdll/signal_arm64.c b/dlls/ntdll/signal_arm64.c
-index c2dd129a569..22d4983d5c6 100644
+index 104ffbf6df9..e7c6abd0046 100644
 --- a/dlls/ntdll/signal_arm64.c
 +++ b/dlls/ntdll/signal_arm64.c
-@@ -1101,6 +1101,12 @@ int CDECL __wine_set_signal_handler(unsigned int sig, wine_signal_handler wsh)
+@@ -1100,6 +1100,12 @@ int CDECL __wine_set_signal_handler(unsigned int sig, wine_signal_handler wsh)
      return 0;
  }
  
@@ -61,10 +61,10 @@ index c2dd129a569..22d4983d5c6 100644
  /**********************************************************************
   *		signal_init_process
 diff --git a/dlls/ntdll/signal_i386.c b/dlls/ntdll/signal_i386.c
-index 78d03f669d7..e3dc2c0d1c8 100644
+index 1b0b9352a87..0fe9f7a3c84 100644
 --- a/dlls/ntdll/signal_i386.c
 +++ b/dlls/ntdll/signal_i386.c
-@@ -1737,6 +1737,31 @@ static BOOL handle_interrupt( unsigned int interrupt, ucontext_t *sigcontext, st
+@@ -1621,6 +1621,31 @@ static BOOL handle_interrupt( unsigned int interrupt, ucontext_t *sigcontext, st
  }
  
  
@@ -96,7 +96,7 @@ index 78d03f669d7..e3dc2c0d1c8 100644
  /**********************************************************************
   *		segv_handler
   *
-@@ -2064,6 +2089,34 @@ void signal_init_process(void)
+@@ -1948,6 +1973,34 @@ void signal_init_process(void)
      exit(1);
  }
  
@@ -132,10 +132,10 @@ index 78d03f669d7..e3dc2c0d1c8 100644
  /*******************************************************************
   *		RtlUnwind (NTDLL.@)
 diff --git a/dlls/ntdll/signal_powerpc.c b/dlls/ntdll/signal_powerpc.c
-index 75b18e1e933..314a0677d92 100644
+index 7e73322cbeb..07f0b89f30a 100644
 --- a/dlls/ntdll/signal_powerpc.c
 +++ b/dlls/ntdll/signal_powerpc.c
-@@ -638,6 +638,12 @@ int CDECL __wine_set_signal_handler(unsigned int sig, wine_signal_handler wsh)
+@@ -637,6 +637,12 @@ int CDECL __wine_set_signal_handler(unsigned int sig, wine_signal_handler wsh)
      return 0;
  }
  
@@ -149,10 +149,10 @@ index 75b18e1e933..314a0677d92 100644
  /**********************************************************************
   *		signal_init_process
 diff --git a/dlls/ntdll/signal_x86_64.c b/dlls/ntdll/signal_x86_64.c
-index 7cefd1403f3..0eb58d3d149 100644
+index 0ccc7cbceb6..dc8a1a987c5 100644
 --- a/dlls/ntdll/signal_x86_64.c
 +++ b/dlls/ntdll/signal_x86_64.c
-@@ -2850,6 +2850,12 @@ void signal_init_process(void)
+@@ -2849,6 +2849,12 @@ void signal_init_process(void)
      exit(1);
  }
  
@@ -166,10 +166,10 @@ index 7cefd1403f3..0eb58d3d149 100644
  static ULONG64 get_int_reg( CONTEXT *context, int reg )
  {
 diff --git a/dlls/ntdll/thread.c b/dlls/ntdll/thread.c
-index f9ea9203ed8..31213614911 100644
+index d5e34cae3b1..16e61658cdf 100644
 --- a/dlls/ntdll/thread.c
 +++ b/dlls/ntdll/thread.c
-@@ -228,6 +228,7 @@ TEB *thread_init(void)
+@@ -217,6 +217,7 @@ TEB *thread_init(void)
      struct ntdll_thread_data *thread_data;
  
      virtual_init();
diff --git a/patches/ntdll-set_full_cpu_context/0001-ntdll-Add-back-SS-segment-prefixes-in-set_full_cpu_c.patch b/patches/ntdll-set_full_cpu_context/0001-ntdll-Add-back-SS-segment-prefixes-in-set_full_cpu_c.patch
index 91d6081d4..c311d2672 100644
--- a/patches/ntdll-set_full_cpu_context/0001-ntdll-Add-back-SS-segment-prefixes-in-set_full_cpu_c.patch
+++ b/patches/ntdll-set_full_cpu_context/0001-ntdll-Add-back-SS-segment-prefixes-in-set_full_cpu_c.patch
@@ -1,17 +1,17 @@
-From 9701b29e87bc913b95e26ec8f7d26ba404dc1bce Mon Sep 17 00:00:00 2001
+From afec7f854357083d9741054ff0d3c768c8b77e9b Mon Sep 17 00:00:00 2001
 From: Sebastian Lackner <sebastian@fds-team.de>
 Date: Wed, 26 Jul 2017 23:44:32 +0200
-Subject: ntdll: Add back SS segment prefixes in set_full_cpu_context.
+Subject: [PATCH] ntdll: Add back SS segment prefixes in set_full_cpu_context.
 
 ---
- dlls/ntdll/signal_i386.c | 4 ++++
+ dlls/ntdll/unix/signal_i386.c | 4 ++++
  1 file changed, 4 insertions(+)
 
-diff --git a/dlls/ntdll/signal_i386.c b/dlls/ntdll/signal_i386.c
-index bee08275340..75c6654a7f5 100644
---- a/dlls/ntdll/signal_i386.c
-+++ b/dlls/ntdll/signal_i386.c
-@@ -1274,12 +1274,16 @@ __ASM_GLOBAL_FUNC( set_full_cpu_context,
+diff --git a/dlls/ntdll/unix/signal_i386.c b/dlls/ntdll/unix/signal_i386.c
+index 515090d9af8..06751681f5b 100644
+--- a/dlls/ntdll/unix/signal_i386.c
++++ b/dlls/ntdll/unix/signal_i386.c
+@@ -304,12 +304,16 @@ __ASM_GLOBAL_FUNC( set_full_cpu_context,
                     "movl 0xc4(%ecx),%eax\n\t" /* Esp */
                     "leal -4*4(%eax),%eax\n\t"
                     "movl 0xc0(%ecx),%edx\n\t" /* EFlags */
@@ -29,5 +29,5 @@ index bee08275340..75c6654a7f5 100644
                     "pushl 0x98(%ecx)\n\t"     /* SegDs */
                     "movl 0xa8(%ecx),%edx\n\t" /* Edx */
 -- 
-2.13.1
+2.26.2
 
diff --git a/patches/patchinstall.sh b/patches/patchinstall.sh
index 0688e05fa..807d3c39c 100755
--- a/patches/patchinstall.sh
+++ b/patches/patchinstall.sh
@@ -4327,7 +4327,7 @@ fi
 # Patchset ntdll-Threading
 # |
 # | Modified files:
-# |   *	dlls/ntdll/thread.c
+# |   *	dlls/ntdll/thread.c, dlls/ntdll/unix/thread.c
 # |
 if test "$enable_ntdll_Threading" -eq 1; then
 	patch_apply ntdll-Threading/0001-ntdll-Fix-race-condition-when-threads-are-killed-dur.patch
@@ -4383,7 +4383,7 @@ fi
 # Patchset ntdll-set_full_cpu_context
 # |
 # | Modified files:
-# |   *	dlls/ntdll/signal_i386.c
+# |   *	dlls/ntdll/unix/signal_i386.c
 # |
 if test "$enable_ntdll_set_full_cpu_context" -eq 1; then
 	patch_apply ntdll-set_full_cpu_context/0001-ntdll-Add-back-SS-segment-prefixes-in-set_full_cpu_c.patch
diff --git a/patches/winebuild-Fake_Dlls/0003-winebuild-Generate-syscall-thunks-for-ntdll-exports.patch b/patches/winebuild-Fake_Dlls/0003-winebuild-Generate-syscall-thunks-for-ntdll-exports.patch
index 91188a829..8dd18d544 100644
--- a/patches/winebuild-Fake_Dlls/0003-winebuild-Generate-syscall-thunks-for-ntdll-exports.patch
+++ b/patches/winebuild-Fake_Dlls/0003-winebuild-Generate-syscall-thunks-for-ntdll-exports.patch
@@ -1,13 +1,14 @@
-From 3b9456b9e0bc870281df2144b67d42112baad4bd Mon Sep 17 00:00:00 2001
+From 916104878b837947e14ed7d44f591de5ba4fa2dc Mon Sep 17 00:00:00 2001
 From: =?UTF-8?q?Michael=20M=C3=BCller?= <michael@fds-team.de>
 Date: Thu, 11 May 2017 05:32:55 +0200
 Subject: [PATCH] winebuild: Generate syscall thunks for ntdll exports.
 
 Based on a patch by Erich E. Hoover.
 ---
+ dlls/ntdll/loader.c          |   3 +
  dlls/ntdll/signal_i386.c     |   4 +-
  dlls/ntdll/tests/exception.c |   2 +
- dlls/ntdll/thread.c          |   4 ++
+ dlls/ntdll/thread.c          |   3 +
  include/winternl.h           |   2 +-
  tools/winebuild/build.h      |   7 +++
  tools/winebuild/import.c     |  10 ++--
@@ -15,13 +16,34 @@ Based on a patch by Erich E. Hoover.
  tools/winebuild/spec16.c     |  22 +-------
  tools/winebuild/spec32.c     | 104 +++++++++++++++++++++++++++++++++++
  tools/winebuild/utils.c      |  21 +++++++
- 10 files changed, 208 insertions(+), 27 deletions(-)
+ 11 files changed, 210 insertions(+), 27 deletions(-)
 
+diff --git a/dlls/ntdll/loader.c b/dlls/ntdll/loader.c
+index 51addaaf983..b888b680bc4 100644
+--- a/dlls/ntdll/loader.c
++++ b/dlls/ntdll/loader.c
+@@ -3810,6 +3810,7 @@ PIMAGE_NT_HEADERS WINAPI RtlImageNtHeader(HMODULE hModule)
+     return ret;
+ }
+ 
++extern void DECLSPEC_NORETURN __wine_syscall_dispatcher( void );
+ 
+ /******************************************************************
+  *		LdrInitializeThunk (NTDLL.@)
+@@ -3827,6 +3828,8 @@ void WINAPI LdrInitializeThunk( CONTEXT *context, void **entry, ULONG_PTR unknow
+     WINE_MODREF *wm;
+     LPCWSTR load_path = NtCurrentTeb()->Peb->ProcessParameters->DllPath.Buffer;
+ 
++    NtCurrentTeb()->WOW32Reserved = __wine_syscall_dispatcher;
++
+     pthread_sigmask( SIG_UNBLOCK, &server_block_set, NULL );
+ 
+     if (process_detaching) return;
 diff --git a/dlls/ntdll/signal_i386.c b/dlls/ntdll/signal_i386.c
-index eb6c87bce4d..d3cbfe63f1c 100644
+index 72413dcd6c7..88dffb03138 100644
 --- a/dlls/ntdll/signal_i386.c
 +++ b/dlls/ntdll/signal_i386.c
-@@ -449,6 +449,8 @@ static ULONG first_ldt_entry = 32;
+@@ -448,6 +448,8 @@ static ULONG first_ldt_entry = 32;
  
  static wine_signal_handler handlers[256];
  
@@ -30,7 +52,7 @@ index eb6c87bce4d..d3cbfe63f1c 100644
  enum i386_trap_code
  {
      TRAP_x86_UNKNOWN    = -1,  /* Unknown fault (TRAP_sig not defined) */
-@@ -1275,7 +1277,7 @@ NTSTATUS CDECL DECLSPEC_HIDDEN __regs_NtGetContextThread( DWORD edi, DWORD esi,
+@@ -1159,7 +1161,7 @@ NTSTATUS CDECL DECLSPEC_HIDDEN __regs_NtGetContextThread( DWORD edi, DWORD esi,
      {
          context->Ebp    = ebp;
          context->Esp    = (DWORD)&retaddr;
@@ -53,10 +75,10 @@ index a5e6faa461a..51938bf84cc 100644
      ok( context.SegCs == LOWORD(expect.SegCs), "wrong SegCs %08x/%08x\n", context.SegCs, expect.SegCs );
      ok( context.SegDs == LOWORD(expect.SegDs), "wrong SegDs %08x/%08x\n", context.SegDs, expect.SegDs );
 diff --git a/dlls/ntdll/thread.c b/dlls/ntdll/thread.c
-index f9ea9203ed8..7e435c4ccb3 100644
+index d5e34cae3b1..73057d9a9a4 100644
 --- a/dlls/ntdll/thread.c
 +++ b/dlls/ntdll/thread.c
-@@ -212,6 +212,8 @@ void map_user_shared_data(void)
+@@ -201,6 +201,8 @@ void map_user_shared_data(void)
      NtClose( section );
  }
  
@@ -65,7 +87,7 @@ index f9ea9203ed8..7e435c4ccb3 100644
  /***********************************************************************
   *           thread_init
   *
-@@ -246,6 +248,7 @@ TEB *thread_init(void)
+@@ -235,6 +237,7 @@ TEB *thread_init(void)
  
      teb = unix_funcs->virtual_alloc_first_teb();
      unix_funcs->init_threading( &nb_threads, &__wine_ldt_copy );
@@ -73,14 +95,6 @@ index f9ea9203ed8..7e435c4ccb3 100644
  
      peb = teb->Peb;
      peb->FastPebLock        = &peb_lock;
-@@ -491,6 +494,7 @@ NTSTATUS WINAPI RtlCreateUserThread( HANDLE process, SECURITY_DESCRIPTOR *descr,
-     teb->Tib.StackBase = stack.StackBase;
-     teb->Tib.StackLimit = stack.StackLimit;
-     teb->DeallocationStack = stack.DeallocationStack;
-+    teb->WOW32Reserved = __wine_syscall_dispatcher;
- 
-     thread_data = (struct ntdll_thread_data *)&teb->GdiTebBatch;
-     thread_data->request_fd  = request_pipe[1];
 diff --git a/include/winternl.h b/include/winternl.h
 index 44a58cadc7a..065f3d24f52 100644
 --- a/include/winternl.h
diff --git a/patches/winebuild-Fake_Dlls/0005-winebuild-Add-stub-functions-in-fake-dlls.patch b/patches/winebuild-Fake_Dlls/0005-winebuild-Add-stub-functions-in-fake-dlls.patch
index 883ca5ee7..c26e699f4 100644
--- a/patches/winebuild-Fake_Dlls/0005-winebuild-Add-stub-functions-in-fake-dlls.patch
+++ b/patches/winebuild-Fake_Dlls/0005-winebuild-Add-stub-functions-in-fake-dlls.patch
@@ -1,16 +1,17 @@
-From 724fec1afabf68217dc161e0f784a8b65c2c5854 Mon Sep 17 00:00:00 2001
+From c7bd63dbac91eb167ec90846cd8cb7a193b04aa1 Mon Sep 17 00:00:00 2001
 From: =?UTF-8?q?Michael=20M=C3=BCller?= <michael@fds-team.de>
 Date: Mon, 15 May 2017 16:27:56 +0200
 Subject: [PATCH] winebuild: Add stub functions in fake dlls.
 
 ---
  dlls/kernel32/tests/loader.c |   8 +-
- dlls/ntdll/thread.c          |  35 ++++++
+ dlls/ntdll/loader.c          |   2 +
+ dlls/ntdll/thread.c          |  34 ++++++
  include/winternl.h           |   2 +-
  tools/winebuild/build.h      |   1 +
  tools/winebuild/spec32.c     | 209 +++++++++++++++++++++++++++++++++--
  tools/winebuild/utils.c      |  10 +-
- 6 files changed, 250 insertions(+), 15 deletions(-)
+ 7 files changed, 251 insertions(+), 15 deletions(-)
 
 diff --git a/dlls/kernel32/tests/loader.c b/dlls/kernel32/tests/loader.c
 index 926fa913866..902907329c0 100644
@@ -60,15 +61,35 @@ index 926fa913866..902907329c0 100644
      UnmapViewOfFile(ptr);
      CloseHandle(map);
      CloseHandle(file);
+diff --git a/dlls/ntdll/loader.c b/dlls/ntdll/loader.c
+index b888b680bc4..bb60aa919af 100644
+--- a/dlls/ntdll/loader.c
++++ b/dlls/ntdll/loader.c
+@@ -3811,6 +3811,7 @@ PIMAGE_NT_HEADERS WINAPI RtlImageNtHeader(HMODULE hModule)
+ }
+ 
+ extern void DECLSPEC_NORETURN __wine_syscall_dispatcher( void );
++extern void *WINAPI __wine_fakedll_dispatcher( const char *module, ULONG ord );
+ 
+ /******************************************************************
+  *		LdrInitializeThunk (NTDLL.@)
+@@ -3829,6 +3830,7 @@ void WINAPI LdrInitializeThunk( CONTEXT *context, void **entry, ULONG_PTR unknow
+     LPCWSTR load_path = NtCurrentTeb()->Peb->ProcessParameters->DllPath.Buffer;
+ 
+     NtCurrentTeb()->WOW32Reserved = __wine_syscall_dispatcher;
++    NtCurrentTeb()->Spare2 = (ULONG_PTR)__wine_fakedll_dispatcher;
+ 
+     pthread_sigmask( SIG_UNBLOCK, &server_block_set, NULL );
+ 
 diff --git a/dlls/ntdll/thread.c b/dlls/ntdll/thread.c
-index 7e435c4ccb3..5148445ce3a 100644
+index 73057d9a9a4..8c9b0b11c86 100644
 --- a/dlls/ntdll/thread.c
 +++ b/dlls/ntdll/thread.c
-@@ -214,6 +214,39 @@ void map_user_shared_data(void)
+@@ -203,6 +203,39 @@ void map_user_shared_data(void)
  
  extern void DECLSPEC_NORETURN __wine_syscall_dispatcher( void );
  
-+static void *WINAPI __wine_fakedll_dispatcher( const char *module, ULONG ord )
++void *WINAPI __wine_fakedll_dispatcher( const char *module, ULONG ord )
 +{
 +    UNICODE_STRING name;
 +    NTSTATUS status;
@@ -104,7 +125,7 @@ index 7e435c4ccb3..5148445ce3a 100644
  /***********************************************************************
   *           thread_init
   *
-@@ -249,6 +282,7 @@ TEB *thread_init(void)
+@@ -238,6 +271,7 @@ TEB *thread_init(void)
      teb = unix_funcs->virtual_alloc_first_teb();
      unix_funcs->init_threading( &nb_threads, &__wine_ldt_copy );
      teb->WOW32Reserved = __wine_syscall_dispatcher;
@@ -112,14 +133,6 @@ index 7e435c4ccb3..5148445ce3a 100644
  
      peb = teb->Peb;
      peb->FastPebLock        = &peb_lock;
-@@ -495,6 +529,7 @@ NTSTATUS WINAPI RtlCreateUserThread( HANDLE process, SECURITY_DESCRIPTOR *descr,
-     teb->Tib.StackLimit = stack.StackLimit;
-     teb->DeallocationStack = stack.DeallocationStack;
-     teb->WOW32Reserved = __wine_syscall_dispatcher;
-+    teb->Spare2 = (ULONG_PTR)__wine_fakedll_dispatcher;
- 
-     thread_data = (struct ntdll_thread_data *)&teb->GdiTebBatch;
-     thread_data->request_fd  = request_pipe[1];
 diff --git a/include/winternl.h b/include/winternl.h
 index 065f3d24f52..199b8fc52f2 100644
 --- a/include/winternl.h
diff --git a/patches/winebuild-Fake_Dlls/0010-tools-winebuild-Add-syscall-thunks-for-64-bit.patch b/patches/winebuild-Fake_Dlls/0010-tools-winebuild-Add-syscall-thunks-for-64-bit.patch
index 2d38ff3c4..35f9eb138 100644
--- a/patches/winebuild-Fake_Dlls/0010-tools-winebuild-Add-syscall-thunks-for-64-bit.patch
+++ b/patches/winebuild-Fake_Dlls/0010-tools-winebuild-Add-syscall-thunks-for-64-bit.patch
@@ -1,4 +1,4 @@
-From 253d27816a1eb43b54834a12aa4c55442b0b1062 Mon Sep 17 00:00:00 2001
+From 9382d41830426f68bf5da895f308f6691df8111b Mon Sep 17 00:00:00 2001
 From: =?UTF-8?q?Michael=20M=C3=BCller?= <michael@fds-team.de>
 Date: Thu, 7 Sep 2017 00:38:09 +0200
 Subject: [PATCH] tools/winebuild: Add syscall thunks for 64 bit.
@@ -40,10 +40,10 @@ index 95939ba6bde..ae5462f6e55 100644
              todo_wine ok(0, "%s: Export is a stub-function, skipping\n", func_name);
              continue;
 diff --git a/dlls/ntdll/thread.c b/dlls/ntdll/thread.c
-index 5148445ce3a..c9a2240a4da 100644
+index 8187dbe1f2d..5427cbcf04e 100644
 --- a/dlls/ntdll/thread.c
 +++ b/dlls/ntdll/thread.c
-@@ -54,6 +54,8 @@ WINE_DEFAULT_DEBUG_CHANNEL(thread);
+@@ -51,6 +51,8 @@ WINE_DECLARE_DEBUG_CHANNEL(relay);
  
  struct _KUSER_SHARED_DATA *user_shared_data = NULL;
  
@@ -51,8 +51,8 @@ index 5148445ce3a..c9a2240a4da 100644
 +
  void (WINAPI *kernel32_start_process)(LPTHREAD_START_ROUTINE,void*) = NULL;
  
- /* info passed to a starting thread */
-@@ -267,9 +269,9 @@ TEB *thread_init(void)
+ static PEB *peb;
+@@ -256,9 +258,9 @@ TEB *thread_init(void)
      /* reserve space for shared user data */
  
      addr = (void *)0x7ffe0000;
@@ -64,7 +64,7 @@ index 5148445ce3a..c9a2240a4da 100644
      if (status)
      {
          MESSAGE( "wine: failed to map the shared user data: %08x\n", status );
-@@ -277,6 +279,13 @@ TEB *thread_init(void)
+@@ -266,6 +268,13 @@ TEB *thread_init(void)
      }
      user_shared_data = addr;
  
diff --git a/patches/ws2_32-WSACleanup/0002-ws2_32-Invalidate-client-side-file-descriptor-cache-.patch b/patches/ws2_32-WSACleanup/0002-ws2_32-Invalidate-client-side-file-descriptor-cache-.patch
index 95c2d9b8d..2d0f016cc 100644
--- a/patches/ws2_32-WSACleanup/0002-ws2_32-Invalidate-client-side-file-descriptor-cache-.patch
+++ b/patches/ws2_32-WSACleanup/0002-ws2_32-Invalidate-client-side-file-descriptor-cache-.patch
@@ -1,4 +1,4 @@
-From 88f8d0382e55cbe97ae5d7937a63bd801f277f25 Mon Sep 17 00:00:00 2001
+From d6f023a80929f22d520584d47abb08e5b523e0c0 Mon Sep 17 00:00:00 2001
 From: Sebastian Lackner <sebastian@fds-team.de>
 Date: Sun, 6 Sep 2015 12:41:17 +0200
 Subject: [PATCH] ws2_32: Invalidate client-side file descriptor cache in
@@ -29,7 +29,7 @@ index 42532bd9f1c..ba46f170670 100644
  @ cdecl wine_server_handle_to_fd(long long ptr ptr)
  @ cdecl wine_server_release_fd(long long)
 diff --git a/dlls/ntdll/server.c b/dlls/ntdll/server.c
-index c7788b99e2d..54291d0a909 100644
+index bde4a2add18..de3b4b9d2e7 100644
 --- a/dlls/ntdll/server.c
 +++ b/dlls/ntdll/server.c
 @@ -239,6 +239,14 @@ void CDECL wine_server_release_fd( HANDLE handle, int unix_fd )
@@ -48,10 +48,10 @@ index c7788b99e2d..54291d0a909 100644
  /***********************************************************************
   *           server_init_process
 diff --git a/dlls/ntdll/unix/loader.c b/dlls/ntdll/unix/loader.c
-index 0f342e8277e..4c7a5c488dc 100644
+index 1297c451a10..06c0174dd5e 100644
 --- a/dlls/ntdll/unix/loader.c
 +++ b/dlls/ntdll/unix/loader.c
-@@ -1045,6 +1045,7 @@ static struct unix_funcs unix_funcs =
+@@ -1044,6 +1044,7 @@ static struct unix_funcs unix_funcs =
      server_wait,
      server_queue_process_apc,
      server_send_fd,
@@ -91,7 +91,7 @@ index 17b23e58d28..f7d172cf324 100644
  /***********************************************************************
   *           server_get_unix_fd
 diff --git a/dlls/ntdll/unix/unix_private.h b/dlls/ntdll/unix/unix_private.h
-index 8562efb7dd4..ee2bd47ad70 100644
+index 14c4ee4cd97..5657bc9c27d 100644
 --- a/dlls/ntdll/unix/unix_private.h
 +++ b/dlls/ntdll/unix/unix_private.h
 @@ -90,6 +90,7 @@ extern unsigned int CDECL server_wait( const select_op_t *select_op, data_size_t
@@ -103,19 +103,19 @@ index 8562efb7dd4..ee2bd47ad70 100644
                                       int *needs_close, enum server_fd_type *type,
                                       unsigned int *options ) DECLSPEC_HIDDEN;
 diff --git a/dlls/ntdll/unixlib.h b/dlls/ntdll/unixlib.h
-index fb755373f07..7df35f0eee1 100644
+index 67c63fd9268..51e27be22b7 100644
 --- a/dlls/ntdll/unixlib.h
 +++ b/dlls/ntdll/unixlib.h
 @@ -28,7 +28,7 @@ struct ldt_copy;
  struct msghdr;
  
  /* increment this when you change the function table */
--#define NTDLL_UNIXLIB_VERSION 16
-+#define NTDLL_UNIXLIB_VERSION 17
+-#define NTDLL_UNIXLIB_VERSION 19
++#define NTDLL_UNIXLIB_VERSION 20
  
  struct unix_funcs
  {
-@@ -127,6 +127,7 @@ struct unix_funcs
+@@ -128,6 +128,7 @@ struct unix_funcs
                                          const LARGE_INTEGER *timeout );
      unsigned int  (CDECL *server_queue_process_apc)( HANDLE process, const apc_call_t *call, apc_result_t *result );
      void          (CDECL *server_send_fd)( int fd );

diff --git a/patches/ntdll-RtlCreateUserThread/0001-ntdll-Refactor-RtlCreateUserThread-into-NtCreateThre.patch b/patches/ntdll-RtlCreateUserThread/0001-ntdll-Refactor-RtlCreateUserThread-into-NtCreateThre.patch
index 568cfa9a4..4869a02b3 100644
--- a/patches/ntdll-RtlCreateUserThread/0001-ntdll-Refactor-RtlCreateUserThread-into-NtCreateThre.patch
+++ b/patches/ntdll-RtlCreateUserThread/0001-ntdll-Refactor-RtlCreateUserThread-into-NtCreateThre.patch
@@ -25,16 +25,17 @@ index 42532bd9f1c..65fdc30d7a4 100644
  @ stdcall NtCreateTimer(ptr long ptr long)
  @ stub NtCreateToken
 diff --git a/dlls/ntdll/thread.c b/dlls/ntdll/thread.c
-index 20934448fa3..9deb4397ba9 100644
+index c9a2240a4da..f04b8bb337e 100644
 --- a/dlls/ntdll/thread.c
 +++ b/dlls/ntdll/thread.c
-@@ -390,34 +390,18 @@ static void start_thread( struct startup_info *info )
+@@ -406,34 +406,18 @@ static void start_thread( struct startup_info *info )
  /***********************************************************************
   *              NtCreateThreadEx   (NTDLL.@)
   */
 -NTSTATUS WINAPI NtCreateThreadEx( HANDLE *handle_ptr, ACCESS_MASK access, OBJECT_ATTRIBUTES *attr,
+-                                  HANDLE process, LPTHREAD_START_ROUTINE start, void *param,
 +NTSTATUS WINAPI NtCreateThreadEx( HANDLE *handle_ptr, ACCESS_MASK access, OBJECT_ATTRIBUTES *thread_attr,
-                                   HANDLE process, LPTHREAD_START_ROUTINE start, void *param,
++                                  HANDLE process, PRTL_THREAD_START_ROUTINE start, void *param,
                                    ULONG flags, ULONG zero_bits, ULONG stack_commit,
 -                                  ULONG stack_reserve, void *attribute_list )
 -{
@@ -153,32 +154,32 @@ index 20934448fa3..9deb4397ba9 100644
      pthread_sigmask( SIG_SETMASK, &sigset, NULL );
  
      if (id) id->UniqueThread = ULongToHandle(tid);
-@@ -559,6 +565,124 @@ error:
+@@ -577,6 +583,124 @@ error:
      return status;
  }
  
 +NTSTATUS WINAPI NtCreateThread( HANDLE *handle_ptr, ACCESS_MASK access, OBJECT_ATTRIBUTES *attr, HANDLE process,
 +                                CLIENT_ID *id, CONTEXT *context, INITIAL_TEB *teb, BOOLEAN suspended )
 +{
-+    LPTHREAD_START_ROUTINE entry;
++    PRTL_THREAD_START_ROUTINE entry;
 +    void *arg;
 +    ULONG flags = suspended ? THREAD_CREATE_FLAGS_CREATE_SUSPENDED : 0;
 +    PS_ATTRIBUTE_LIST attr_list, *pattr_list = NULL;
 +
 +#if defined(__i386__)
-+        entry = (LPTHREAD_START_ROUTINE) context->Eax;
++        entry = (PRTL_THREAD_START_ROUTINE) context->Eax;
 +        arg = (void *)context->Ebx;
 +#elif defined(__x86_64__)
-+        entry = (LPTHREAD_START_ROUTINE) context->Rcx;
++        entry = (PRTL_THREAD_START_ROUTINE) context->Rcx;
 +        arg = (void *)context->Rdx;
 +#elif defined(__arm__)
-+        entry = (LPTHREAD_START_ROUTINE) context->R0;
++        entry = (PRTL_THREAD_START_ROUTINE) context->R0;
 +        arg = (void *)context->R1;
 +#elif defined(__aarch64__)
-+        entry = (LPTHREAD_START_ROUTINE) context->u.X0;
++        entry = (PRTL_THREAD_START_ROUTINE) context->u.X0;
 +        arg = (void *)context->u.X1;
 +#elif defined(__powerpc__)
-+        entry = (LPTHREAD_START_ROUTINE) context->Gpr3;
++        entry = (PRTL_THREAD_START_ROUTINE) context->Gpr3;
 +        arg = (void *)context->Gpr4;
 +#endif
 +

diff --git a/patches/ntdll-Interrupt-0x2e/0001-ntdll-Catch-windows-int-0x2e-syscall-on-i386.patch b/patches/ntdll-Interrupt-0x2e/0001-ntdll-Catch-windows-int-0x2e-syscall-on-i386.patch
index e4a07ff29..caf7f628c 100644
--- a/patches/ntdll-Interrupt-0x2e/0001-ntdll-Catch-windows-int-0x2e-syscall-on-i386.patch
+++ b/patches/ntdll-Interrupt-0x2e/0001-ntdll-Catch-windows-int-0x2e-syscall-on-i386.patch
@@ -8,15 +8,15 @@ Subject: [PATCH] ntdll: Catch windows int 0x2e syscall on i386.
  1 file changed, 5 insertions(+)
 
 diff --git a/dlls/ntdll/signal_i386.c b/dlls/ntdll/signal_i386.c
-index 8d1c59150..ca2c67333 100644
+index 78d03f669d7..a134b6d54ab 100644
 --- a/dlls/ntdll/signal_i386.c
 +++ b/dlls/ntdll/signal_i386.c
-@@ -1946,6 +1946,11 @@ static BOOL handle_interrupt( unsigned int interrupt, ucontext_t *sigcontext, st
+@@ -1731,6 +1731,11 @@ static BOOL handle_interrupt( unsigned int interrupt, ucontext_t *sigcontext, st
          stack->rec.ExceptionInformation[2] = stack->context.Edx;
          setup_raise_exception( sigcontext, stack );
          return TRUE;
 +    case 0x2e:
-+        FIXME("unimplemented syscall handler for %#lx\n", stack->context.Eax);
++        FIXME("unimplemented syscall handler for %#x\n", stack->context.Eax);
 +        EAX_sig(sigcontext) = STATUS_INVALID_SYSTEM_SERVICE;
 +        EIP_sig(sigcontext) += 2;
 +        return TRUE;

diff --git a/patches/advapi32-Token_Integrity_Level/0008-ntdll-Implement-process-token-elevation-through-mani.patch b/patches/advapi32-Token_Integrity_Level/0008-ntdll-Implement-process-token-elevation-through-mani.patch
index e5e576572..60c16278d 100644
--- a/patches/advapi32-Token_Integrity_Level/0008-ntdll-Implement-process-token-elevation-through-mani.patch
+++ b/patches/advapi32-Token_Integrity_Level/0008-ntdll-Implement-process-token-elevation-through-mani.patch
@@ -12,10 +12,10 @@ Subject: [PATCH] ntdll: Implement process token elevation through manifests.
  5 files changed, 67 insertions(+)
 
 diff --git a/dlls/ntdll/loader.c b/dlls/ntdll/loader.c
-index 38c893e3eb4..d32b57612d5 100644
+index 51addaaf983..71efed5fa32 100644
 --- a/dlls/ntdll/loader.c
 +++ b/dlls/ntdll/loader.c
-@@ -4045,6 +4045,32 @@ void WINAPI LdrInitializeThunk( CONTEXT *context, void **entry, ULONG_PTR unknow
+@@ -3903,6 +3903,32 @@ void WINAPI LdrInitializeThunk( CONTEXT *context, void **entry, ULONG_PTR unknow
  }
  
  
@@ -48,7 +48,7 @@ index 38c893e3eb4..d32b57612d5 100644
  /***********************************************************************
   *           load_global_options
   */
-@@ -4478,6 +4504,7 @@ void __wine_process_init(void)
+@@ -4363,6 +4389,7 @@ void __wine_process_init(void)
                                        's','y','s','t','e','m','3','2','\\',
                                        'k','e','r','n','e','l','3','2','.','d','l','l',0};
      RTL_USER_PROCESS_PARAMETERS *params;
@@ -56,9 +56,9 @@ index 38c893e3eb4..d32b57612d5 100644
      WINE_MODREF *wm;
      NTSTATUS status;
      ANSI_STRING func_name;
-@@ -4575,6 +4602,16 @@ void __wine_process_init(void)
+@@ -4466,6 +4493,16 @@ void __wine_process_init(void)
  
-     virtual_set_large_address_space();
+     unix_funcs->virtual_set_large_address_space();
  
 +    /* elevate process if necessary */
 +    status = RtlQueryInformationActivationContext( 0, NULL, 0, RunlevelInformationInActivationContext,
@@ -74,10 +74,10 @@ index 38c893e3eb4..d32b57612d5 100644
      RemoveEntryList( &wm->ldr.InLoadOrderLinks );
      InsertHeadList( &peb->LdrData->InLoadOrderModuleList, &wm->ldr.InLoadOrderLinks );
 diff --git a/server/process.c b/server/process.c
-index 4c7da9223c1..d6f71a774f3 100644
+index 80a091b0c72..34010b301c3 100644
 --- a/server/process.c
 +++ b/server/process.c
-@@ -1107,6 +1107,14 @@ struct process_snapshot *process_snap( int *count )
+@@ -1112,6 +1112,14 @@ struct process_snapshot *process_snap( int *count )
      return snapshot;
  }
  
 
diff --git a/patches/ntdll-Builtin_Prot/0001-ntdll-Fix-holes-in-ELF-mappings.patch b/patches/ntdll-Builtin_Prot/0001-ntdll-Fix-holes-in-ELF-mappings.patch
index cef9bed67..9c3036cac 100644
--- a/patches/ntdll-Builtin_Prot/0001-ntdll-Fix-holes-in-ELF-mappings.patch
+++ b/patches/ntdll-Builtin_Prot/0001-ntdll-Fix-holes-in-ELF-mappings.patch
@@ -1,19 +1,19 @@
-From ce12fa75ca18eeea3f0ec53788353d07ec683e95 Mon Sep 17 00:00:00 2001
+From be204ab84d031b7efb223ac7c4962246549c8eb0 Mon Sep 17 00:00:00 2001
 From: =?UTF-8?q?Michael=20M=C3=BCller?= <michael@fds-team.de>
 Date: Thu, 1 Jun 2017 06:04:53 +0200
 Subject: [PATCH] ntdll: Fix holes in ELF mappings. (v2)
 
 Based on a patch by Andrew Wesie.
 ---
- dlls/ntdll/virtual.c          | 23 +++++++++++++++++++++++
+ dlls/ntdll/unix/virtual.c     | 23 +++++++++++++++++++++++
  dlls/psapi/tests/psapi_main.c | 14 +++++++++++++-
  2 files changed, 36 insertions(+), 1 deletion(-)
 
-diff --git a/dlls/ntdll/virtual.c b/dlls/ntdll/virtual.c
-index 6cb47f2cae8..2ba116c4e92 100644
---- a/dlls/ntdll/virtual.c
-+++ b/dlls/ntdll/virtual.c
-@@ -485,6 +485,16 @@ static inline BOOL is_write_watch_range( const void *addr, size_t size )
+diff --git a/dlls/ntdll/unix/virtual.c b/dlls/ntdll/unix/virtual.c
+index e824b9ced25..90143f5c07b 100644
+--- a/dlls/ntdll/unix/virtual.c
++++ b/dlls/ntdll/unix/virtual.c
+@@ -966,6 +966,16 @@ static inline BOOL is_write_watch_range( const void *addr, size_t size )
  }
  
  
@@ -22,7 +22,7 @@ index 6cb47f2cae8..2ba116c4e92 100644
 + */
 +static inline BOOL is_system_range( const void *addr, size_t size )
 +{
-+    struct file_view *view = VIRTUAL_FindView( addr, size );
++    struct file_view *view = find_view( addr, size );
 +    return view && (view->protect & VPROT_SYSTEM);
 +}
 +
@@ -30,13 +30,13 @@ index 6cb47f2cae8..2ba116c4e92 100644
  /***********************************************************************
   *           find_view_range
   *
-@@ -2386,6 +2396,19 @@ NTSTATUS virtual_handle_fault( LPCVOID addr, DWORD err, BOOL on_signal_stack )
+@@ -2812,6 +2822,19 @@ NTSTATUS CDECL virtual_handle_fault( LPCVOID addr, DWORD err, BOOL on_signal_sta
          /* ignore fault if page is writable now */
-         if (VIRTUAL_GetUnixProt( get_page_vprot( page )) & PROT_WRITE) ret = STATUS_SUCCESS;
+         if (get_unix_prot( get_page_vprot( page ) ) & PROT_WRITE) ret = STATUS_SUCCESS;
      }
-+    else if (!err && (VIRTUAL_GetUnixProt( vprot ) & PROT_READ) && is_system_range( page, page_size ))
++    else if (!err && (get_unix_prot( vprot ) & PROT_READ) && is_system_range( page, page_size ))
 +    {
-+        int unix_prot = VIRTUAL_GetUnixProt( vprot );
++        int unix_prot = get_unix_prot( vprot );
 +        unsigned char vec;
 +
 +        mprotect_range( page, page_size, 0, 0 );
diff --git a/patches/ntdll-Dealloc_Thread_Stack/0001-ntdll-Do-not-allow-to-allocate-thread-stack-for-curr.patch b/patches/ntdll-Dealloc_Thread_Stack/0001-ntdll-Do-not-allow-to-allocate-thread-stack-for-curr.patch
index f4213c6ca..ab2d0968c 100644
--- a/patches/ntdll-Dealloc_Thread_Stack/0001-ntdll-Do-not-allow-to-allocate-thread-stack-for-curr.patch
+++ b/patches/ntdll-Dealloc_Thread_Stack/0001-ntdll-Do-not-allow-to-allocate-thread-stack-for-curr.patch
@@ -1,19 +1,20 @@
-From a01aaa21d4709e52a01198167b49c9519090a4e3 Mon Sep 17 00:00:00 2001
+From 7ecb980c3b1d3ee2b5ce2ad6419adf5782b85c7a Mon Sep 17 00:00:00 2001
 From: Sebastian Lackner <sebastian@fds-team.de>
 Date: Fri, 21 Aug 2015 06:39:47 +0800
 Subject: [PATCH] ntdll: Do not allow to deallocate thread stack for current
  thread.
 
 ---
- dlls/ntdll/ntdll_misc.h |  1 +
- dlls/ntdll/virtual.c    | 12 ++++++++++++
- 2 files changed, 13 insertions(+)
+ dlls/ntdll/ntdll_misc.h        |  1 +
+ dlls/ntdll/unix/unix_private.h |  1 +
+ dlls/ntdll/unix/virtual.c      | 12 ++++++++++++
+ 3 files changed, 14 insertions(+)
 
 diff --git a/dlls/ntdll/ntdll_misc.h b/dlls/ntdll/ntdll_misc.h
-index f847503307b..2d037e0d7cb 100644
+index e9a3230e814..e7a74131c30 100644
 --- a/dlls/ntdll/ntdll_misc.h
 +++ b/dlls/ntdll/ntdll_misc.h
-@@ -240,6 +240,7 @@ struct ntdll_thread_data
+@@ -249,6 +249,7 @@ struct ntdll_thread_data
      int                wait_fd[2];    /* fd for sleeping server requests */
      BOOL               wow64_redir;   /* Wow64 filesystem redirection flag */
      pthread_t          pthread_id;    /* pthread thread id */
@@ -21,11 +22,23 @@ index f847503307b..2d037e0d7cb 100644
  };
  
  C_ASSERT( sizeof(struct ntdll_thread_data) <= sizeof(((TEB *)0)->GdiTebBatch) );
-diff --git a/dlls/ntdll/virtual.c b/dlls/ntdll/virtual.c
-index 5c12d87d297..f7bac9eac91 100644
---- a/dlls/ntdll/virtual.c
-+++ b/dlls/ntdll/virtual.c
-@@ -1986,6 +1986,8 @@ NTSTATUS virtual_alloc_thread_stack( INITIAL_TEB *stack, SIZE_T reserve_size, SI
+diff --git a/dlls/ntdll/unix/unix_private.h b/dlls/ntdll/unix/unix_private.h
+index 8562efb7dd4..b34adf2f07f 100644
+--- a/dlls/ntdll/unix/unix_private.h
++++ b/dlls/ntdll/unix/unix_private.h
+@@ -41,6 +41,7 @@ struct ntdll_thread_data
+     int                wait_fd[2];    /* fd for sleeping server requests */
+     BOOL               wow64_redir;   /* Wow64 filesystem redirection flag */
+     pthread_t          pthread_id;    /* pthread thread id */
++    void              *pthread_stack; /* pthread stack */
+ };
+ 
+ C_ASSERT( sizeof(struct ntdll_thread_data) <= sizeof(((TEB *)0)->GdiTebBatch) );
+diff --git a/dlls/ntdll/unix/virtual.c b/dlls/ntdll/unix/virtual.c
+index 0346d0d9753..5e995338a08 100644
+--- a/dlls/ntdll/unix/virtual.c
++++ b/dlls/ntdll/unix/virtual.c
+@@ -2715,6 +2715,8 @@ NTSTATUS CDECL virtual_alloc_thread_stack( INITIAL_TEB *stack, SIZE_T reserve_si
      stack->DeallocationStack = view->base;
      stack->StackBase = (char *)view->base + view->size;
      stack->StackLimit = (char *)view->base + 2 * page_size;
@@ -34,7 +47,7 @@ index 5c12d87d297..f7bac9eac91 100644
  done:
      server_leave_uninterrupted_section( &csVirtual, &sigset );
      return status;
-@@ -2703,6 +2705,16 @@ NTSTATUS WINAPI NtFreeVirtualMemory( HANDLE process, PVOID *addr_ptr, SIZE_T *si
+@@ -3374,6 +3376,16 @@ NTSTATUS WINAPI NtFreeVirtualMemory( HANDLE process, PVOID *addr_ptr, SIZE_T *si
          /* Free the pages */
  
          if (size || (base != view->base)) status = STATUS_INVALID_PARAMETER;
 
diff --git a/patches/ntdll-Fix_Alignment/0001-ntdll-Move-NtProtectVirtualMemory-and-NtCreateSectio.patch b/patches/ntdll-Fix_Alignment/0001-ntdll-Move-NtProtectVirtualMemory-and-NtCreateSectio.patch
index 270c82fdd..f62b97a04 100644
--- a/patches/ntdll-Fix_Alignment/0001-ntdll-Move-NtProtectVirtualMemory-and-NtCreateSectio.patch
+++ b/patches/ntdll-Fix_Alignment/0001-ntdll-Move-NtProtectVirtualMemory-and-NtCreateSectio.patch
@@ -1,18 +1,18 @@
-From 554f37a5ee79939ba9368e9bd7ea408860a32803 Mon Sep 17 00:00:00 2001
+From 9a7a3037b16670d121465036e7da2c4db6f18182 Mon Sep 17 00:00:00 2001
 From: =?UTF-8?q?Michael=20M=C3=BCller?= <michael@fds-team.de>
 Date: Wed, 20 Aug 2014 19:21:18 +0200
 Subject: [PATCH] ntdll: Move NtProtectVirtualMemory and NtCreateSection to
  separate pages on x86. (try 2)
 
 ---
- dlls/ntdll/virtual.c | 8 ++++++++
+ dlls/ntdll/unix/virtual.c | 8 ++++++++
  1 file changed, 8 insertions(+)
 
-diff --git a/dlls/ntdll/virtual.c b/dlls/ntdll/virtual.c
-index cfe30bbe710..6173846cfb4 100644
---- a/dlls/ntdll/virtual.c
-+++ b/dlls/ntdll/virtual.c
-@@ -366,6 +366,14 @@ static void free_ranges_remove_view( struct file_view *view )
+diff --git a/dlls/ntdll/unix/virtual.c b/dlls/ntdll/unix/virtual.c
+index 0346d0d9753..ab321a989dd 100644
+--- a/dlls/ntdll/unix/virtual.c
++++ b/dlls/ntdll/unix/virtual.c
+@@ -660,6 +660,14 @@ static void free_ranges_remove_view( struct file_view *view )
  }
  
  
  
diff --git a/patches/ntdll-Hide_Wine_Exports/0001-ntdll-Add-support-for-hiding-wine-version-informatio.patch b/patches/ntdll-Hide_Wine_Exports/0001-ntdll-Add-support-for-hiding-wine-version-informatio.patch
index f7f200757..91aec80f8 100644
--- a/patches/ntdll-Hide_Wine_Exports/0001-ntdll-Add-support-for-hiding-wine-version-informatio.patch
+++ b/patches/ntdll-Hide_Wine_Exports/0001-ntdll-Add-support-for-hiding-wine-version-informatio.patch
@@ -1,4 +1,4 @@
-From 6c463b0bd58fb0830271582e5dd916f936084daf Mon Sep 17 00:00:00 2001
+From 463baa9359f163b4e152f681a3703e602347ab04 Mon Sep 17 00:00:00 2001
 From: Sebastian Lackner <sebastian@fds-team.de>
 Date: Sat, 30 May 2015 02:23:15 +0200
 Subject: [PATCH] ntdll: Add support for hiding wine version information from
@@ -10,10 +10,10 @@ Subject: [PATCH] ntdll: Add support for hiding wine version information from
  2 files changed, 104 insertions(+), 1 deletion(-)
 
 diff --git a/dlls/ntdll/loader.c b/dlls/ntdll/loader.c
-index 926098ebf50a..4cf7fed9e1b2 100644
+index 71efed5fa32..ec9ddc73e9c 100644
 --- a/dlls/ntdll/loader.c
 +++ b/dlls/ntdll/loader.c
-@@ -78,6 +78,7 @@ const WCHAR system_dir[] = {'C',':','\\','w','i','n','d','o','w','s','\\',
+@@ -77,6 +77,7 @@ const WCHAR system_dir[] = {'C',':','\\','w','i','n','d','o','w','s','\\',
  const WCHAR syswow64_dir[] = {'C',':','\\','w','i','n','d','o','w','s','\\',
                                's','y','s','w','o','w','6','4','\\',0};
  
@@ -40,7 +40,7 @@ index 926098ebf50a..4cf7fed9e1b2 100644
  struct ldr_notification
  {
      struct list                    entry;
-@@ -1872,6 +1878,96 @@ NTSTATUS WINAPI LdrUnlockLoaderLock( ULONG flags, ULONG_PTR magic )
+@@ -1810,6 +1816,96 @@ NTSTATUS WINAPI LdrUnlockLoaderLock( ULONG flags, ULONG_PTR magic )
  }
  
  
@@ -137,7 +137,7 @@ index 926098ebf50a..4cf7fed9e1b2 100644
  /******************************************************************
   *		LdrGetProcedureAddress  (NTDLL.@)
   */
-@@ -1892,7 +1988,7 @@ NTSTATUS WINAPI LdrGetProcedureAddress(HMODULE module, const ANSI_STRING *name,
+@@ -1830,7 +1926,7 @@ NTSTATUS WINAPI LdrGetProcedureAddress(HMODULE module, const ANSI_STRING *name,
          LPCWSTR load_path = NtCurrentTeb()->Peb->ProcessParameters->DllPath.Buffer;
          void *proc = name ? find_named_export( module, exports, exp_size, name->Buffer, -1, load_path )
                            : find_ordinal_export( module, exports, exp_size, ord - exports->Base, load_path );
@@ -146,20 +146,20 @@ index 926098ebf50a..4cf7fed9e1b2 100644
          {
              *address = proc;
              ret = STATUS_SUCCESS;
-@@ -4739,6 +4835,8 @@ void __wine_process_init(void)
+@@ -4491,6 +4587,8 @@ void __wine_process_init(void)
          NtTerminateProcess( GetCurrentProcess(), status );
      }
  
 +    hidden_exports_init( wm->ldr.FullDllName.Buffer );
 +
-     virtual_set_large_address_space();
+     unix_funcs->virtual_set_large_address_space();
  
      /* elevate process if necessary */
 diff --git a/dlls/ntdll/ntdll_misc.h b/dlls/ntdll/ntdll_misc.h
-index 7d631cb33ddb..8256ec710a00 100644
+index dbd9a826429..b4666d82c8b 100644
 --- a/dlls/ntdll/ntdll_misc.h
 +++ b/dlls/ntdll/ntdll_misc.h
-@@ -347,6 +347,11 @@ void     WINAPI LdrInitializeThunk(CONTEXT*,void**,ULONG_PTR,ULONG_PTR);
+@@ -283,6 +283,11 @@ void     WINAPI LdrInitializeThunk(CONTEXT*,void**,ULONG_PTR,ULONG_PTR);
  #define InterlockedCompareExchange64(dest,xchg,cmp) RtlInterlockedCompareExchange64(dest,xchg,cmp)
  #endif
  
diff --git a/patches/ntdll-NtQueryVirtualMemory/0003-ntdll-Implement-NtQueryVirtualMemory-MemorySectionNa.patch b/patches/ntdll-NtQueryVirtualMemory/0003-ntdll-Implement-NtQueryVirtualMemory-MemorySectionNa.patch
index 503b5c5b4..17522de47 100644
--- a/patches/ntdll-NtQueryVirtualMemory/0003-ntdll-Implement-NtQueryVirtualMemory-MemorySectionNa.patch
+++ b/patches/ntdll-NtQueryVirtualMemory/0003-ntdll-Implement-NtQueryVirtualMemory-MemorySectionNa.patch
@@ -1,21 +1,22 @@
-From e718ef3521d76d455dbfd1088cc83e47121d987c Mon Sep 17 00:00:00 2001
+From fb9c617c12858107700c919aec3dfa5fbf0a65dc Mon Sep 17 00:00:00 2001
 From: Dmitry Timoshkov <dmitry@baikal.ru>
 Date: Sun, 28 May 2017 05:19:30 +0200
-Subject: ntdll: Implement NtQueryVirtualMemory(MemorySectionName). (v3)
+Subject: [PATCH] ntdll: Implement NtQueryVirtualMemory(MemorySectionName).
+ (v3)
 
 Contains several improvements by Sebastian Lackner <sebastian@fds-team.de>.
 ---
- dlls/ntdll/virtual.c          | 91 ++++++++++++++++++++++++++++++++++-
+ dlls/ntdll/unix/virtual.c     | 91 ++++++++++++++++++++++++++++++++++-
  dlls/psapi/tests/psapi_main.c |  8 +--
  server/mapping.c              | 29 +++++++++++
  server/protocol.def           |  9 ++++
  4 files changed, 129 insertions(+), 8 deletions(-)
 
-diff --git a/dlls/ntdll/virtual.c b/dlls/ntdll/virtual.c
-index 6ad2d21e0..f49127c3e 100644
---- a/dlls/ntdll/virtual.c
-+++ b/dlls/ntdll/virtual.c
-@@ -3192,6 +3192,93 @@ static NTSTATUS get_working_set_ex( HANDLE process, LPCVOID addr,
+diff --git a/dlls/ntdll/unix/virtual.c b/dlls/ntdll/unix/virtual.c
+index 0346d0d9753..06796f441ae 100644
+--- a/dlls/ntdll/unix/virtual.c
++++ b/dlls/ntdll/unix/virtual.c
+@@ -3695,6 +3695,93 @@ static NTSTATUS get_working_set_ex( HANDLE process, LPCVOID addr,
      return STATUS_SUCCESS;
  }
  
@@ -109,7 +110,7 @@ index 6ad2d21e0..f49127c3e 100644
  #define UNIMPLEMENTED_INFO_CLASS(c) \
      case c: \
          FIXME("(process=%p,addr=%p) Unimplemented information class: " #c "\n", process, addr); \
-@@ -3216,8 +3303,10 @@ NTSTATUS WINAPI NtQueryVirtualMemory( HANDLE process, LPCVOID addr,
+@@ -3719,8 +3806,10 @@ NTSTATUS WINAPI NtQueryVirtualMemory( HANDLE process, LPCVOID addr,
          case MemoryWorkingSetExInformation:
              return get_working_set_ex( process, addr, buffer, len, res_len );
  
@@ -122,10 +123,10 @@ index 6ad2d21e0..f49127c3e 100644
  
          default:
 diff --git a/dlls/psapi/tests/psapi_main.c b/dlls/psapi/tests/psapi_main.c
-index 0df247e9b..1cc0455aa 100644
+index da7524dd60a..bfe14231a9b 100644
 --- a/dlls/psapi/tests/psapi_main.c
 +++ b/dlls/psapi/tests/psapi_main.c
-@@ -375,14 +375,7 @@ static BOOL nt_get_mapped_file_name(HANDLE process, LPVOID addr, LPWSTR name, DW
+@@ -372,14 +372,7 @@ static BOOL nt_get_mapped_file_name(HANDLE process, LPVOID addr, LPWSTR name, DW
  
      ret_len = 0xdeadbeef;
      status = pNtQueryVirtualMemory(process, addr, MemorySectionName, buf, buf_len, &ret_len);
@@ -140,7 +141,7 @@ index 0df247e9b..1cc0455aa 100644
  
      section_name = (MEMORY_SECTION_NAME *)buf;
      ok(ret_len == section_name->SectionFileName.MaximumLength + sizeof(*section_name), "got %lu, %u\n",
-@@ -504,6 +497,7 @@ todo_wine {
+@@ -501,6 +494,7 @@ todo_wine {
      {
          ok(memcmp(map_nameW, nt_map_name, lstrlenW(map_nameW)) == 0, "map name does not start with a device name: %s\n", map_name);
          WideCharToMultiByte(CP_ACP, 0, map_nameW, -1, map_name, MAX_PATH, NULL, NULL);
@@ -149,10 +150,10 @@ index 0df247e9b..1cc0455aa 100644
      }
  
 diff --git a/server/mapping.c b/server/mapping.c
-index 6990a1913..ca28e8909 100644
+index 0941dd87c05..487cd2a6131 100644
 --- a/server/mapping.c
 +++ b/server/mapping.c
-@@ -1064,6 +1064,35 @@ DECL_HANDLER(unmap_view)
+@@ -1091,6 +1091,35 @@ DECL_HANDLER(unmap_view)
      if (view) free_memory_view( view );
  }
  
@@ -189,10 +190,10 @@ index 6990a1913..ca28e8909 100644
  DECL_HANDLER(get_mapping_committed_range)
  {
 diff --git a/server/protocol.def b/server/protocol.def
-index 6c44b2b43..e7753f8b7 100644
+index 632c996dc0e..223b45db1a8 100644
 --- a/server/protocol.def
 +++ b/server/protocol.def
-@@ -1838,6 +1838,15 @@ enum char_info_mode
+@@ -1849,6 +1849,15 @@ enum char_info_mode
  @END
  
  
 
diff --git a/patches/ntdll-NtQueryVirtualMemory/0008-ntdll-Resolve-drive-symlinks-before-returning-sectio.patch b/patches/ntdll-NtQueryVirtualMemory/0008-ntdll-Resolve-drive-symlinks-before-returning-sectio.patch
index 81e23dc88..0ef87c87a 100644
--- a/patches/ntdll-NtQueryVirtualMemory/0008-ntdll-Resolve-drive-symlinks-before-returning-sectio.patch
+++ b/patches/ntdll-NtQueryVirtualMemory/0008-ntdll-Resolve-drive-symlinks-before-returning-sectio.patch
@@ -6,15 +6,15 @@ Subject: [PATCH] ntdll: Resolve drive symlinks before returning section name.
 ---
  dlls/ntdll/directory.c        |  2 +-
  dlls/ntdll/ntdll_misc.h       |  1 +
- dlls/ntdll/virtual.c          | 37 +++++++++++++++++++++++++++++------
+ dlls/ntdll/unix/virtual.c     | 37 +++++++++++++++++++++++++++++------
  dlls/psapi/tests/psapi_main.c |  6 +-----
  4 files changed, 34 insertions(+), 12 deletions(-)
 
 diff --git a/dlls/ntdll/directory.c b/dlls/ntdll/directory.c
-index 7a9de26ccb0..1062e35e009 100644
+index 453568d641e..12da4316e88 100644
 --- a/dlls/ntdll/directory.c
 +++ b/dlls/ntdll/directory.c
-@@ -2806,7 +2806,7 @@ static NTSTATUS nt_to_unix_file_name_internal( const UNICODE_STRING *nameW, ANSI
+@@ -2798,7 +2798,7 @@ static NTSTATUS nt_to_unix_file_name_internal( const UNICODE_STRING *nameW, ANSI
  }
  
  /* read the contents of an NT symlink object */
@@ -24,10 +24,10 @@ index 7a9de26ccb0..1062e35e009 100644
      OBJECT_ATTRIBUTES attr;
      UNICODE_STRING targetW;
 diff --git a/dlls/ntdll/ntdll_misc.h b/dlls/ntdll/ntdll_misc.h
-index b6507599a92..b7822c54ad0 100644
+index e9a3230e814..750b01bd059 100644
 --- a/dlls/ntdll/ntdll_misc.h
 +++ b/dlls/ntdll/ntdll_misc.h
-@@ -182,6 +182,7 @@ extern NTSTATUS nt_to_unix_file_name_attr( const OBJECT_ATTRIBUTES *attr, ANSI_S
+@@ -175,6 +175,7 @@ extern NTSTATUS nt_to_unix_file_name_attr( const OBJECT_ATTRIBUTES *attr, ANSI_S
                                             UINT disposition ) DECLSPEC_HIDDEN;
  
  /* virtual memory */
@@ -35,11 +35,11 @@ index b6507599a92..b7822c54ad0 100644
  extern NTSTATUS virtual_map_section( HANDLE handle, PVOID *addr_ptr, unsigned short zero_bits_64, SIZE_T commit_size,
                                       const LARGE_INTEGER *offset_ptr, SIZE_T *size_ptr, ULONG alloc_type,
                                       ULONG protect, pe_image_info_t *image_info ) DECLSPEC_HIDDEN;
-diff --git a/dlls/ntdll/virtual.c b/dlls/ntdll/virtual.c
-index cc1d6e5d6f2..3d53b92cb8e 100644
---- a/dlls/ntdll/virtual.c
-+++ b/dlls/ntdll/virtual.c
-@@ -192,6 +192,8 @@ static BYTE **pages_vprot;
+diff --git a/dlls/ntdll/unix/virtual.c b/dlls/ntdll/unix/virtual.c
+index 97244822082..15b4697c441 100644
+--- a/dlls/ntdll/unix/virtual.c
++++ b/dlls/ntdll/unix/virtual.c
+@@ -194,6 +194,8 @@ static BYTE **pages_vprot;
  static BYTE *pages_vprot;
  #endif
  
@@ -48,7 +48,7 @@ index cc1d6e5d6f2..3d53b92cb8e 100644
  static struct file_view *view_block_start, *view_block_end, *next_free_view;
  #ifdef _WIN64
  static const size_t view_block_size = 0x200000;
-@@ -3713,12 +3715,15 @@ static NTSTATUS get_section_name( HANDLE process, LPCVOID addr,
+@@ -3836,12 +3838,15 @@ static NTSTATUS get_section_name( HANDLE process, LPCVOID addr,
                                    MEMORY_SECTION_NAME *info,
                                    SIZE_T len, SIZE_T *res_len )
  {
@@ -65,7 +65,7 @@ index cc1d6e5d6f2..3d53b92cb8e 100644
  
      if (!addr || !info || !res_len) return STATUS_INVALID_PARAMETER;
  
-@@ -3777,14 +3782,34 @@ static NTSTATUS get_section_name( HANDLE process, LPCVOID addr,
+@@ -3900,14 +3905,34 @@ static NTSTATUS get_section_name( HANDLE process, LPCVOID addr,
      }
  
  found:
@@ -106,10 +106,10 @@ index cc1d6e5d6f2..3d53b92cb8e 100644
      else
          status = (len < sizeof(MEMORY_SECTION_NAME)) ? STATUS_INFO_LENGTH_MISMATCH : STATUS_BUFFER_OVERFLOW;
 diff --git a/dlls/psapi/tests/psapi_main.c b/dlls/psapi/tests/psapi_main.c
-index 99e87db9543..3984805d2b9 100644
+index f6a7b69eca0..a8263a2f44b 100644
 --- a/dlls/psapi/tests/psapi_main.c
 +++ b/dlls/psapi/tests/psapi_main.c
-@@ -488,7 +488,6 @@ static void test_GetMappedFileName(void)
+@@ -476,7 +476,6 @@ static void test_GetMappedFileName(void)
      ret = GetMappedFileNameA(GetCurrentProcess(), base, map_name, sizeof(map_name));
      ok(ret, "GetMappedFileName error %d\n", GetLastError());
      ok(ret > strlen(device_name), "map_name should be longer than device_name\n");
@@ -117,7 +117,7 @@ index 99e87db9543..3984805d2b9 100644
      ok(memcmp(map_name, device_name, strlen(device_name)) == 0, "map name does not start with a device name: %s\n", map_name);
  
      SetLastError(0xdeadbeef);
-@@ -501,7 +500,6 @@ todo_wine {
+@@ -489,7 +488,6 @@ todo_wine {
      {
          ok(memcmp(map_nameW, nt_map_name, lstrlenW(map_nameW)) == 0, "map name does not start with a device name: %s\n", map_name);
          WideCharToMultiByte(CP_ACP, 0, map_nameW, -1, map_name, MAX_PATH, NULL, NULL);
@@ -125,7 +125,7 @@ index 99e87db9543..3984805d2b9 100644
          ok(memcmp(map_name, device_name, strlen(device_name)) == 0, "map name does not start with a device name: %s\n", map_name);
      }
  
-@@ -514,7 +512,6 @@ todo_wine
+@@ -502,7 +500,6 @@ todo_wine
      {
          ok(memcmp(map_nameW, nt_map_name, lstrlenW(map_nameW)) == 0, "map name does not start with a device name: %s\n", map_name);
          WideCharToMultiByte(CP_ACP, 0, map_nameW, -1, map_name, MAX_PATH, NULL, NULL);
@@ -133,7 +133,7 @@ index 99e87db9543..3984805d2b9 100644
          ok(memcmp(map_name, device_name, strlen(device_name)) == 0, "map name does not start with a device name: %s\n", map_name);
      }
  
-@@ -522,7 +519,6 @@ todo_wine
+@@ -510,7 +507,6 @@ todo_wine
      ret = GetMappedFileNameA(GetCurrentProcess(), base + 0x2000, map_name, sizeof(map_name));
      ok(ret, "GetMappedFileName error %d\n", GetLastError());
      ok(ret > strlen(device_name), "map_name should be longer than device_name\n");
@@ -141,7 +141,7 @@ index 99e87db9543..3984805d2b9 100644
      ok(memcmp(map_name, device_name, strlen(device_name)) == 0, "map name does not start with a device name: %s\n", map_name);
  
      SetLastError(0xdeadbeef);
-@@ -604,7 +600,7 @@ static void test_GetProcessImageFileName(void)
+@@ -592,7 +588,7 @@ static void test_GetProcessImageFileName(void)
      {
          /* Windows returns 2*strlen-1 */
          ok(ret >= strlen(szImgPath), "szImgPath=\"%s\" ret=%d\n", szImgPath, ret);
diff --git a/patches/ntdll-NtQueryVirtualMemory/definition b/patches/ntdll-NtQueryVirtualMemory/definition
index 068251748..b33d61eaa 100644
--- a/patches/ntdll-NtQueryVirtualMemory/definition
+++ b/patches/ntdll-NtQueryVirtualMemory/definition
@@ -1,3 +1,6 @@
 Fixes: [23999] Implement MemorySectionName class in NtQueryVirtualMemory
 Fixes: [27248] Implement K32GetMappedFileName
 Depends: ntdll-NtDevicePath
+Depends: ntdll-ForceBottomUpAlloc
+# Disable for now, until some other things are moved down to ntdll.so.
+Disabled: true
diff --git a/patches/ntdll-WRITECOPY/0001-ntdll-Trigger-write-watches-before-passing-userdata-.patch b/patches/ntdll-WRITECOPY/0001-ntdll-Trigger-write-watches-before-passing-userdata-.patch
index 1f72cb105..53b9152bc 100644
--- a/patches/ntdll-WRITECOPY/0001-ntdll-Trigger-write-watches-before-passing-userdata-.patch
+++ b/patches/ntdll-WRITECOPY/0001-ntdll-Trigger-write-watches-before-passing-userdata-.patch
@@ -6,8 +6,8 @@ Subject: [PATCH] ntdll: Trigger write watches before passing userdata pointer
 
 ---
  dlls/advapi32/tests/security.c | 1 -
- dlls/ntdll/server.c            | 9 +++++++++
- 2 files changed, 9 insertions(+), 1 deletion(-)
+ dlls/ntdll/unix/server.c       | 8 ++++++++
+ 2 files changed, 8 insertions(+), 1 deletion(-)
 
 diff --git a/dlls/advapi32/tests/security.c b/dlls/advapi32/tests/security.c
 index 825f8451904..b414401634a 100644
@@ -21,16 +21,18 @@ index 825f8451904..b414401634a 100644
      ok(Access == 0x1abe11ed && AccessStatus == 0x1abe11ed,
         "Access and/or AccessStatus were changed!\n");
  
-diff --git a/dlls/ntdll/server.c b/dlls/ntdll/server.c
-index ed4e3f25531..921dec86c82 100644
---- a/dlls/ntdll/server.c
-+++ b/dlls/ntdll/server.c
-@@ -166,6 +166,15 @@ static DECLSPEC_NORETURN void server_protocol_perror( const char *err )
+diff --git a/dlls/ntdll/unix/server.c b/dlls/ntdll/unix/server.c
+index 17b23e58d28..91155a1663d 100644
+--- a/dlls/ntdll/unix/server.c
++++ b/dlls/ntdll/unix/server.c
+@@ -304,9 +304,17 @@ unsigned int server_call_unlocked( void *req_ptr )
   */
  unsigned int CDECL wine_server_call( void *req_ptr )
  {
 +    struct __server_request_info * const req = req_ptr;
-+
+     sigset_t old_set;
+     unsigned int ret;
+ 
 +    /* trigger write watches, otherwise read() might return EFAULT */
 +    if (req->u.req.request_header.reply_size &&
 +        !virtual_check_buffer_for_write( req->reply_data, req->u.req.request_header.reply_size ))
@@ -38,9 +40,9 @@ index ed4e3f25531..921dec86c82 100644
 +        return STATUS_ACCESS_VIOLATION;
 +    }
 +
-     return unix_funcs->server_call( req_ptr );
- }
- 
+     pthread_sigmask( SIG_BLOCK, &server_block_set, &old_set );
+     ret = server_call_unlocked( req_ptr );
+     pthread_sigmask( SIG_SETMASK, &old_set, NULL );
 -- 
 2.26.2
 
diff --git a/patches/ntdll-WRITECOPY/0003-ntdll-Setup-a-temporary-signal-handler-during-proces.patch b/patches/ntdll-WRITECOPY/0003-ntdll-Setup-a-temporary-signal-handler-during-proces.patch
index c5f334858..c48114473 100644
--- a/patches/ntdll-WRITECOPY/0003-ntdll-Setup-a-temporary-signal-handler-during-proces.patch
+++ b/patches/ntdll-WRITECOPY/0003-ntdll-Setup-a-temporary-signal-handler-during-proces.patch
@@ -15,10 +15,10 @@ Subject: [PATCH] ntdll: Setup a temporary signal handler during process
  7 files changed, 79 insertions(+)
 
 diff --git a/dlls/ntdll/ntdll_misc.h b/dlls/ntdll/ntdll_misc.h
-index 427cdaad441..562f5ec8d4c 100644
+index e9a3230e814..04aee675e55 100644
 --- a/dlls/ntdll/ntdll_misc.h
 +++ b/dlls/ntdll/ntdll_misc.h
-@@ -80,6 +80,7 @@ extern LPCSTR debugstr_ObjectAttributes(const OBJECT_ATTRIBUTES *oa) DECLSPEC_HI
+@@ -78,6 +78,7 @@ extern LPCSTR debugstr_ObjectAttributes(const OBJECT_ATTRIBUTES *oa) DECLSPEC_HI
  extern SIZE_T signal_stack_size DECLSPEC_HIDDEN;
  extern SIZE_T signal_stack_mask DECLSPEC_HIDDEN;
  extern void signal_init_process(void) DECLSPEC_HIDDEN;
@@ -27,10 +27,10 @@ index 427cdaad441..562f5ec8d4c 100644
  extern void signal_start_process( LPTHREAD_START_ROUTINE entry, BOOL suspend ) DECLSPEC_HIDDEN;
  extern void version_init(void) DECLSPEC_HIDDEN;
 diff --git a/dlls/ntdll/signal_arm.c b/dlls/ntdll/signal_arm.c
-index e66cf922f91..dcfdeaa83ad 100644
+index b7e387babf1..bb329f888ce 100644
 --- a/dlls/ntdll/signal_arm.c
 +++ b/dlls/ntdll/signal_arm.c
-@@ -988,6 +988,12 @@ void signal_init_process(void)
+@@ -774,6 +774,12 @@ void signal_init_process(void)
      exit(1);
  }
  
@@ -44,10 +44,10 @@ index e66cf922f91..dcfdeaa83ad 100644
  /***********************************************************************
   *            RtlUnwind  (NTDLL.@)
 diff --git a/dlls/ntdll/signal_arm64.c b/dlls/ntdll/signal_arm64.c
-index c87f99f0c4c..fed76574dbc 100644
+index c2dd129a569..22d4983d5c6 100644
 --- a/dlls/ntdll/signal_arm64.c
 +++ b/dlls/ntdll/signal_arm64.c
-@@ -1303,6 +1303,12 @@ int CDECL __wine_set_signal_handler(unsigned int sig, wine_signal_handler wsh)
+@@ -1101,6 +1101,12 @@ int CDECL __wine_set_signal_handler(unsigned int sig, wine_signal_handler wsh)
      return 0;
  }
  
@@ -61,10 +61,10 @@ index c87f99f0c4c..fed76574dbc 100644
  /**********************************************************************
   *		signal_init_process
 diff --git a/dlls/ntdll/signal_i386.c b/dlls/ntdll/signal_i386.c
-index 2f2db70b57f..12771552a5d 100644
+index 78d03f669d7..e3dc2c0d1c8 100644
 --- a/dlls/ntdll/signal_i386.c
 +++ b/dlls/ntdll/signal_i386.c
-@@ -1988,6 +1988,31 @@ static BOOL handle_interrupt( unsigned int interrupt, ucontext_t *sigcontext, st
+@@ -1737,6 +1737,31 @@ static BOOL handle_interrupt( unsigned int interrupt, ucontext_t *sigcontext, st
  }
  
  
@@ -83,7 +83,7 @@ index 2f2db70b57f..12771552a5d 100644
 +    switch(get_trap_code(context))
 +    {
 +    case TRAP_x86_PAGEFLT:  /* Page fault */
-+        if (!virtual_handle_fault( siginfo->si_addr, (get_error_code(context) >> 1) & 0x09, TRUE ))
++        if (!unix_funcs->virtual_handle_fault( siginfo->si_addr, (get_error_code(context) >> 1) & 0x09, TRUE ))
 +            return;
 +        /* fall-through */
 +    default:
@@ -96,7 +96,7 @@ index 2f2db70b57f..12771552a5d 100644
  /**********************************************************************
   *		segv_handler
   *
-@@ -2315,6 +2340,34 @@ void signal_init_process(void)
+@@ -2064,6 +2089,34 @@ void signal_init_process(void)
      exit(1);
  }
  
@@ -132,10 +132,10 @@ index 2f2db70b57f..12771552a5d 100644
  /*******************************************************************
   *		RtlUnwind (NTDLL.@)
 diff --git a/dlls/ntdll/signal_powerpc.c b/dlls/ntdll/signal_powerpc.c
-index a23f6b6e4d5..c3b4b6ffd42 100644
+index 75b18e1e933..314a0677d92 100644
 --- a/dlls/ntdll/signal_powerpc.c
 +++ b/dlls/ntdll/signal_powerpc.c
-@@ -1009,6 +1009,12 @@ int CDECL __wine_set_signal_handler(unsigned int sig, wine_signal_handler wsh)
+@@ -638,6 +638,12 @@ int CDECL __wine_set_signal_handler(unsigned int sig, wine_signal_handler wsh)
      return 0;
  }
  
@@ -149,10 +149,10 @@ index a23f6b6e4d5..c3b4b6ffd42 100644
  /**********************************************************************
   *		signal_init_process
 diff --git a/dlls/ntdll/signal_x86_64.c b/dlls/ntdll/signal_x86_64.c
-index d42438f88af..b4c11ed66ed 100644
+index 7cefd1403f3..0eb58d3d149 100644
 --- a/dlls/ntdll/signal_x86_64.c
 +++ b/dlls/ntdll/signal_x86_64.c
-@@ -3141,6 +3141,12 @@ void signal_init_process(void)
+@@ -2850,6 +2850,12 @@ void signal_init_process(void)
      exit(1);
  }
  
@@ -166,7 +166,7 @@ index d42438f88af..b4c11ed66ed 100644
  static ULONG64 get_int_reg( CONTEXT *context, int reg )
  {
 diff --git a/dlls/ntdll/thread.c b/dlls/ntdll/thread.c
-index bb11521cf69..ff18b119232 100644
+index f9ea9203ed8..31213614911 100644
 --- a/dlls/ntdll/thread.c
 +++ b/dlls/ntdll/thread.c
 @@ -228,6 +228,7 @@ TEB *thread_init(void)
diff --git a/patches/ntdll-WRITECOPY/0004-ntdll-Properly-handle-PAGE_WRITECOPY-protection.-try.patch b/patches/ntdll-WRITECOPY/0004-ntdll-Properly-handle-PAGE_WRITECOPY-protection.-try.patch
index 4b3958120..6c4b17def 100644
--- a/patches/ntdll-WRITECOPY/0004-ntdll-Properly-handle-PAGE_WRITECOPY-protection.-try.patch
+++ b/patches/ntdll-WRITECOPY/0004-ntdll-Properly-handle-PAGE_WRITECOPY-protection.-try.patch
@@ -1,19 +1,19 @@
-From 8c8e2422bea9485bdcda98cea703983bb01f6e41 Mon Sep 17 00:00:00 2001
+From f5019b4f92b14ef22e7e96a38442f7f864488b10 Mon Sep 17 00:00:00 2001
 From: =?UTF-8?q?Michael=20M=C3=BCller?= <michael@fds-team.de>
 Date: Sat, 4 Oct 2014 03:22:09 +0200
 Subject: [PATCH] ntdll: Properly handle PAGE_WRITECOPY protection. (try 5)
 
 For now, only enable it when a special environment variable is set.
 ---
- dlls/ntdll/virtual.c | 46 +++++++++++++++++++++++++++++++++++++-------
+ dlls/ntdll/unix/virtual.c | 46 +++++++++++++++++++++++++++++++++------
  1 file changed, 39 insertions(+), 7 deletions(-)
 
-diff --git a/dlls/ntdll/virtual.c b/dlls/ntdll/virtual.c
-index 328bc40a92f..3533a087d88 100644
---- a/dlls/ntdll/virtual.c
-+++ b/dlls/ntdll/virtual.c
-@@ -321,6 +321,21 @@ static const char *VIRTUAL_GetProtStr( BYTE prot )
-     return buffer;
+diff --git a/dlls/ntdll/unix/virtual.c b/dlls/ntdll/unix/virtual.c
+index 0346d0d9753..5a8ba8bae2a 100644
+--- a/dlls/ntdll/unix/virtual.c
++++ b/dlls/ntdll/unix/virtual.c
+@@ -498,6 +498,21 @@ int CDECL mmap_enum_reserved_areas( int (CDECL *enum_func)(void *base, SIZE_T si
+     return ret;
  }
  
 +/* This might look like a hack, but it actually isn't - the 'experimental' version
@@ -33,8 +33,8 @@ index 328bc40a92f..3533a087d88 100644
 +}
  
  /***********************************************************************
-  *           VIRTUAL_GetUnixProt
-@@ -334,8 +349,19 @@ static int VIRTUAL_GetUnixProt( BYTE vprot )
+  *           free_ranges_lower_bound
+@@ -799,8 +814,19 @@ static int get_unix_prot( BYTE vprot )
      {
          if (vprot & VPROT_READ) prot |= PROT_READ;
          if (vprot & VPROT_WRITE) prot |= PROT_WRITE | PROT_READ;
@@ -55,7 +55,7 @@ index 328bc40a92f..3533a087d88 100644
          if (vprot & VPROT_WRITEWATCH) prot &= ~PROT_WRITE;
      }
      if (!prot) prot = PROT_NONE;
-@@ -1080,7 +1106,7 @@ static void update_write_watches( void *base, size_t size, size_t accessed_size
+@@ -1539,7 +1565,7 @@ static void update_write_watches( void *base, size_t size, size_t accessed_size
  {
      TRACE( "updating watch %p-%p-%p\n", base, (char *)base + accessed_size, (char *)base + size );
      /* clear write watch flag on accessed pages */
@@ -64,12 +64,12 @@ index 328bc40a92f..3533a087d88 100644
      /* restore page protections on the entire range */
      mprotect_range( base, size, 0, 0 );
  }
-@@ -2340,12 +2366,13 @@ NTSTATUS virtual_handle_fault( LPCVOID addr, DWORD err, BOOL on_signal_stack )
+@@ -2746,12 +2772,13 @@ NTSTATUS CDECL virtual_handle_fault( LPCVOID addr, DWORD err, BOOL on_signal_sta
              set_page_vprot_bits( page, page_size, 0, VPROT_WRITEWATCH );
              mprotect_range( page, page_size, 0, 0 );
          }
 -        /* ignore fault if page is writable now */
--        if (VIRTUAL_GetUnixProt( get_page_vprot( page )) & PROT_WRITE)
+-        if (get_unix_prot( get_page_vprot( page )) & PROT_WRITE)
 +        if (vprot & VPROT_WRITECOPY)
          {
 -            if ((vprot & VPROT_WRITEWATCH) || is_write_watch_range( page, page_size ))
@@ -78,11 +78,11 @@ index 328bc40a92f..3533a087d88 100644
 +            mprotect_range( page, page_size, 0, 0 );
          }
 +        /* ignore fault if page is writable now */
-+        if (VIRTUAL_GetUnixProt( get_page_vprot( page )) & PROT_WRITE) ret = STATUS_SUCCESS;
++        if (get_unix_prot( get_page_vprot( page ) ) & PROT_WRITE) ret = STATUS_SUCCESS;
      }
      server_leave_uninterrupted_section( &csVirtual, &sigset );
      return ret;
-@@ -2367,11 +2394,16 @@ static NTSTATUS check_write_access( void *base, size_t size, BOOL *has_write_wat
+@@ -2773,11 +2800,16 @@ static NTSTATUS check_write_access( void *base, size_t size, BOOL *has_write_wat
      {
          BYTE vprot = get_page_vprot( addr + i );
          if (vprot & VPROT_WRITEWATCH) *has_write_watch = TRUE;
@@ -91,7 +91,7 @@ index 328bc40a92f..3533a087d88 100644
 +            vprot = (vprot & ~VPROT_WRITECOPY) | VPROT_WRITE;
 +            *has_write_watch = TRUE;
 +        }
-         if (!(VIRTUAL_GetUnixProt( vprot & ~VPROT_WRITEWATCH ) & PROT_WRITE))
+         if (!(get_unix_prot( vprot & ~VPROT_WRITEWATCH ) & PROT_WRITE))
              return STATUS_INVALID_USER_BUFFER;
      }
      if (*has_write_watch)
diff --git a/patches/ntdll-WRITECOPY/0005-ntdll-Track-if-a-WRITECOPY-page-has-been-modified.patch b/patches/ntdll-WRITECOPY/0005-ntdll-Track-if-a-WRITECOPY-page-has-been-modified.patch
index 8022ad639..4e32ba6f8 100644
--- a/patches/ntdll-WRITECOPY/0005-ntdll-Track-if-a-WRITECOPY-page-has-been-modified.patch
+++ b/patches/ntdll-WRITECOPY/0005-ntdll-Track-if-a-WRITECOPY-page-has-been-modified.patch
@@ -8,14 +8,14 @@ read-write page.
 
 Signed-off-by: Andrew Wesie <awesie@gmail.com>
 ---
- dlls/ntdll/virtual.c | 25 +++++++++++++++++++------
+ dlls/ntdll/unix/virtual.c | 25 +++++++++++++++++++------
  1 file changed, 19 insertions(+), 6 deletions(-)
 
-diff --git a/dlls/ntdll/virtual.c b/dlls/ntdll/virtual.c
-index 3533a087d88..75219ae2376 100644
---- a/dlls/ntdll/virtual.c
-+++ b/dlls/ntdll/virtual.c
-@@ -85,6 +85,7 @@ struct file_view
+diff --git a/dlls/ntdll/unix/virtual.c b/dlls/ntdll/unix/virtual.c
+index 5a8ba8bae2a..c81104bd266 100644
+--- a/dlls/ntdll/unix/virtual.c
++++ b/dlls/ntdll/unix/virtual.c
+@@ -97,6 +97,7 @@ struct file_view
  #define VPROT_GUARD      0x10
  #define VPROT_COMMITTED  0x20
  #define VPROT_WRITEWATCH 0x40
@@ -23,7 +23,7 @@ index 3533a087d88..75219ae2376 100644
  /* per-mapping protection flags */
  #define VPROT_SYSTEM     0x0200  /* system view (underlying mmap not under our control) */
  
-@@ -353,7 +354,7 @@ static int VIRTUAL_GetUnixProt( BYTE vprot )
+@@ -818,7 +819,7 @@ static int get_unix_prot( BYTE vprot )
  #if defined(__i386__)
          if (vprot & VPROT_WRITECOPY)
          {
@@ -32,9 +32,9 @@ index 3533a087d88..75219ae2376 100644
                  prot = (prot & ~PROT_WRITE) | PROT_READ;
              else
                  prot |= PROT_WRITE | PROT_READ;
-@@ -925,7 +926,11 @@ static NTSTATUS create_view( struct file_view **view_ret, void *base, size_t siz
+@@ -1397,7 +1398,11 @@ static NTSTATUS create_view( struct file_view **view_ret, void *base, size_t siz
   */
- static DWORD VIRTUAL_GetWin32Prot( BYTE vprot, unsigned int map_prot )
+ static DWORD get_win32_prot( BYTE vprot, unsigned int map_prot )
  {
 -    DWORD ret = VIRTUAL_Win32Flags[vprot & 0x0f];
 +    DWORD ret;
@@ -45,7 +45,7 @@ index 3533a087d88..75219ae2376 100644
      if (vprot & VPROT_GUARD) ret |= PAGE_GUARD;
      if (map_prot & SEC_NOCACHE) ret |= PAGE_NOCACHE;
      return ret;
-@@ -1049,7 +1054,7 @@ static BOOL VIRTUAL_SetProt( struct file_view *view, /* [in] Pointer to view */
+@@ -1508,7 +1513,7 @@ static BOOL set_vprot( struct file_view *view, void *base, size_t size, BYTE vpr
      if (view->protect & VPROT_WRITEWATCH)
      {
          /* each page may need different protections depending on write watch flag */
@@ -54,7 +54,7 @@ index 3533a087d88..75219ae2376 100644
          mprotect_range( base, size, 0, 0 );
          return TRUE;
      }
-@@ -1065,10 +1070,18 @@ static BOOL VIRTUAL_SetProt( struct file_view *view, /* [in] Pointer to view */
+@@ -1524,10 +1529,18 @@ static BOOL set_vprot( struct file_view *view, void *base, size_t size, BYTE vpr
          return TRUE;
      }
  
@@ -74,7 +74,7 @@ index 3533a087d88..75219ae2376 100644
      return TRUE;
  }
  
-@@ -2368,7 +2381,7 @@ NTSTATUS virtual_handle_fault( LPCVOID addr, DWORD err, BOOL on_signal_stack )
+@@ -2774,7 +2787,7 @@ NTSTATUS CDECL virtual_handle_fault( LPCVOID addr, DWORD err, BOOL on_signal_sta
          }
          if (vprot & VPROT_WRITECOPY)
          {
@@ -83,7 +83,7 @@ index 3533a087d88..75219ae2376 100644
              mprotect_range( page, page_size, 0, 0 );
          }
          /* ignore fault if page is writable now */
-@@ -3272,7 +3285,7 @@ static NTSTATUS get_basic_memory_info( HANDLE process, LPCVOID addr,
+@@ -3660,7 +3673,7 @@ static NTSTATUS get_basic_memory_info( HANDLE process, LPCVOID addr,
          else if (view->protect & (SEC_FILE | SEC_RESERVE | SEC_COMMIT)) info->Type = MEM_MAPPED;
          else info->Type = MEM_PRIVATE;
          for (ptr = base; ptr < base + range_size; ptr += page_size)
diff --git a/patches/ntdll-WRITECOPY/0006-ntdll-Support-WRITECOPY-on-x64.patch b/patches/ntdll-WRITECOPY/0006-ntdll-Support-WRITECOPY-on-x64.patch
index 183324746..ad417ed94 100644
--- a/patches/ntdll-WRITECOPY/0006-ntdll-Support-WRITECOPY-on-x64.patch
+++ b/patches/ntdll-WRITECOPY/0006-ntdll-Support-WRITECOPY-on-x64.patch
@@ -6,14 +6,14 @@ Subject: [PATCH] ntdll: Support WRITECOPY on x64.
 Signed-off-by: Andrew Wesie <awesie@gmail.com>
 ---
  dlls/ntdll/signal_x86_64.c | 40 ++++++++++++++++++++++++++++++++++++++
- dlls/ntdll/virtual.c       |  2 +-
+ dlls/ntdll/unix/virtual.c  |  2 +-
  2 files changed, 41 insertions(+), 1 deletion(-)
 
 diff --git a/dlls/ntdll/signal_x86_64.c b/dlls/ntdll/signal_x86_64.c
-index 29829bfb1c6..89a8e36410d 100644
+index 0eb58d3d149..8fdb800984c 100644
 --- a/dlls/ntdll/signal_x86_64.c
 +++ b/dlls/ntdll/signal_x86_64.c
-@@ -2871,6 +2871,29 @@ static inline BOOL handle_interrupt( ucontext_t *sigcontext, struct stack_layout
+@@ -2575,6 +2575,29 @@ static inline BOOL handle_interrupt( ucontext_t *sigcontext, struct stack_layout
  }
  
  
@@ -30,7 +30,7 @@ index 29829bfb1c6..89a8e36410d 100644
 +    switch(TRAP_sig(ucontext))
 +    {
 +    case TRAP_x86_PAGEFLT:  /* Page fault */
-+        if (!virtual_handle_fault( siginfo->si_addr, (ERROR_sig(ucontext) >> 1) & 0x09, TRUE ))
++        if (!unix_funcs->virtual_handle_fault( siginfo->si_addr, (ERROR_sig(ucontext) >> 1) & 0x09, TRUE ))
 +            return;
 +        /* fall-through */
 +    default:
@@ -43,7 +43,7 @@ index 29829bfb1c6..89a8e36410d 100644
  /**********************************************************************
   *		segv_handler
   *
-@@ -3291,6 +3314,23 @@ void signal_init_process(void)
+@@ -2855,6 +2878,23 @@ void signal_init_process(void)
   */
  void signal_init_early(void)
  {
@@ -67,11 +67,11 @@ index 29829bfb1c6..89a8e36410d 100644
  }
  
  static ULONG64 get_int_reg( CONTEXT *context, int reg )
-diff --git a/dlls/ntdll/virtual.c b/dlls/ntdll/virtual.c
-index 75219ae2376..df77f55a9e7 100644
---- a/dlls/ntdll/virtual.c
-+++ b/dlls/ntdll/virtual.c
-@@ -351,7 +351,7 @@ static int VIRTUAL_GetUnixProt( BYTE vprot )
+diff --git a/dlls/ntdll/unix/virtual.c b/dlls/ntdll/unix/virtual.c
+index c81104bd266..1072907ffdd 100644
+--- a/dlls/ntdll/unix/virtual.c
++++ b/dlls/ntdll/unix/virtual.c
+@@ -816,7 +816,7 @@ static int get_unix_prot( BYTE vprot )
          if (vprot & VPROT_READ) prot |= PROT_READ;
          if (vprot & VPROT_WRITE) prot |= PROT_WRITE | PROT_READ;
          if (vprot & VPROT_EXEC) prot |= PROT_EXEC | PROT_READ;
diff --git a/patches/ntdll-WRITECOPY/0007-ntdll-Report-unmodified-WRITECOPY-pages-as-shared.patch b/patches/ntdll-WRITECOPY/0007-ntdll-Report-unmodified-WRITECOPY-pages-as-shared.patch
index fd45e5b51..5805bf6ba 100644
--- a/patches/ntdll-WRITECOPY/0007-ntdll-Report-unmodified-WRITECOPY-pages-as-shared.patch
+++ b/patches/ntdll-WRITECOPY/0007-ntdll-Report-unmodified-WRITECOPY-pages-as-shared.patch
@@ -9,14 +9,14 @@ match the behavior of Windows.
 Wine-Bug: https://bugs.winehq.org/show_bug.cgi?id=48665
 Signed-off-by: Andrew Wesie <awesie@gmail.com>
 ---
- dlls/ntdll/virtual.c | 4 +++-
+ dlls/ntdll/unix/virtual.c | 4 +++-
  1 file changed, 3 insertions(+), 1 deletion(-)
 
-diff --git a/dlls/ntdll/virtual.c b/dlls/ntdll/virtual.c
-index df77f55a9e7..b329a9024d8 100644
---- a/dlls/ntdll/virtual.c
-+++ b/dlls/ntdll/virtual.c
-@@ -1737,6 +1737,8 @@ static NTSTATUS map_image( HANDLE hmapping, ACCESS_MASK access, int fd, int top_
+diff --git a/dlls/ntdll/unix/virtual.c b/dlls/ntdll/unix/virtual.c
+index 1072907ffdd..9a576de4930 100644
+--- a/dlls/ntdll/unix/virtual.c
++++ b/dlls/ntdll/unix/virtual.c
+@@ -2188,6 +2188,8 @@ static NTSTATUS map_image( HANDLE hmapping, ACCESS_MASK access, int fd, int top_
                             ptr + sec->VirtualAddress + file_size,
                             ptr + sec->VirtualAddress + end );
              memset( ptr + sec->VirtualAddress + file_size, 0, end - file_size );
@@ -25,7 +25,7 @@ index df77f55a9e7..b329a9024d8 100644
          }
      }
  
-@@ -3336,7 +3338,7 @@ static NTSTATUS get_working_set_ex( HANDLE process, LPCVOID addr,
+@@ -3724,7 +3726,7 @@ static NTSTATUS get_working_set_ex( HANDLE process, LPCVOID addr,
                  (vprot & VPROT_COMMITTED))
          {
              p->VirtualAttributes.Valid = !(vprot & VPROT_GUARD) && (vprot & 0x0f) && (pagemap >> 63);
diff --git a/patches/ntdll-WRITECOPY/0008-ntdll-Fallback-to-copy-pages-for-WRITECOPY.patch b/patches/ntdll-WRITECOPY/0008-ntdll-Fallback-to-copy-pages-for-WRITECOPY.patch
index 384e6f8fa..d620b2be7 100644
--- a/patches/ntdll-WRITECOPY/0008-ntdll-Fallback-to-copy-pages-for-WRITECOPY.patch
+++ b/patches/ntdll-WRITECOPY/0008-ntdll-Fallback-to-copy-pages-for-WRITECOPY.patch
@@ -12,14 +12,14 @@ then copy the contents to the new page.
 
 Signed-off-by: Andrew Wesie <awesie@gmail.com>
 ---
- dlls/ntdll/virtual.c | 25 +++++++++++++++++++++----
+ dlls/ntdll/unix/virtual.c | 25 +++++++++++++++++++++----
  1 file changed, 21 insertions(+), 4 deletions(-)
 
-diff --git a/dlls/ntdll/virtual.c b/dlls/ntdll/virtual.c
-index b329a9024d8..e68ca274ca4 100644
---- a/dlls/ntdll/virtual.c
-+++ b/dlls/ntdll/virtual.c
-@@ -1070,8 +1070,9 @@ static BOOL VIRTUAL_SetProt( struct file_view *view, /* [in] Pointer to view */
+diff --git a/dlls/ntdll/unix/virtual.c b/dlls/ntdll/unix/virtual.c
+index 9a576de4930..e824b9ced25 100644
+--- a/dlls/ntdll/unix/virtual.c
++++ b/dlls/ntdll/unix/virtual.c
+@@ -1529,8 +1529,9 @@ static BOOL set_vprot( struct file_view *view, void *base, size_t size, BYTE vpr
          return TRUE;
      }
  
@@ -31,14 +31,14 @@ index b329a9024d8..e68ca274ca4 100644
          unix_prot |= PROT_WRITE;
  
      if (mprotect_exec( base, size, unix_prot )) /* FIXME: last error */
-@@ -2381,10 +2382,26 @@ NTSTATUS virtual_handle_fault( LPCVOID addr, DWORD err, BOOL on_signal_stack )
+@@ -2787,10 +2788,26 @@ NTSTATUS CDECL virtual_handle_fault( LPCVOID addr, DWORD err, BOOL on_signal_sta
              set_page_vprot_bits( page, page_size, 0, VPROT_WRITEWATCH );
              mprotect_range( page, page_size, 0, 0 );
          }
 -        if (vprot & VPROT_WRITECOPY)
 +        if ((vprot & VPROT_WRITECOPY) && (vprot & VPROT_COMMITTED))
          {
-+            struct file_view *view = VIRTUAL_FindView( page, 0 );
++            struct file_view *view = find_view( page, 0 );
 +
              set_page_vprot_bits( page, page_size, VPROT_WRITE | VPROT_WRITTEN, VPROT_WRITECOPY );
 -            mprotect_range( page, page_size, 0, 0 );
@@ -54,12 +54,12 @@ index b329a9024d8..e68ca274ca4 100644
 +
 +                /* original mapping is shared, replace with a private page */
 +                memcpy( temp_page, page, page_size );
-+                wine_anon_mmap( page, page_size, VIRTUAL_GetUnixProt(vprot | VPROT_WRITE | VPROT_WRITTEN), MAP_FIXED );
++                wine_anon_mmap( page, page_size, get_unix_prot( vprot | VPROT_WRITE | VPROT_WRITTEN ), MAP_FIXED );
 +                memcpy( page, temp_page, page_size );
 +            }
          }
          /* ignore fault if page is writable now */
-         if (VIRTUAL_GetUnixProt( get_page_vprot( page )) & PROT_WRITE) ret = STATUS_SUCCESS;
+         if (get_unix_prot( get_page_vprot( page ) ) & PROT_WRITE) ret = STATUS_SUCCESS;
 -- 
 2.26.2
 
diff --git a/patches/patchinstall.sh b/patches/patchinstall.sh
index 752ef3b8a..e98025998 100755
--- a/patches/patchinstall.sh
+++ b/patches/patchinstall.sh
@@ -187,7 +187,6 @@ patch_enable_all ()
 	enable_ntdll_NtDevicePath="$1"
 	enable_ntdll_NtQueryEaFile="$1"
 	enable_ntdll_NtQuerySection="$1"
-	enable_ntdll_NtQueryVirtualMemory="$1"
 	enable_ntdll_NtSetLdtEntries="$1"
 	enable_ntdll_Pipe_SpecialCharacters="$1"
 	enable_ntdll_ProcessQuotaLimits="$1"
@@ -662,9 +661,6 @@ patch_enable ()
 		ntdll-NtQuerySection)
 			enable_ntdll_NtQuerySection="$2"
 			;;
-		ntdll-NtQueryVirtualMemory)
-			enable_ntdll_NtQueryVirtualMemory="$2"
-			;;
 		ntdll-NtSetLdtEntries)
 			enable_ntdll_NtSetLdtEntries="$2"
 			;;
@@ -1687,13 +1683,6 @@ if test "$enable_ntdll_RtlCreateUserThread" -eq 1; then
 	enable_winebuild_Fake_Dlls=1
 fi
 
-if test "$enable_ntdll_NtQueryVirtualMemory" -eq 1; then
-	if test "$enable_ntdll_NtDevicePath" -gt 1; then
-		abort "Patchset ntdll-NtDevicePath disabled, but ntdll-NtQueryVirtualMemory depends on that."
-	fi
-	enable_ntdll_NtDevicePath=1
-fi
-
 if test "$enable_ntdll_NtQueryEaFile" -eq 1; then
 	if test "$enable_ntdll_Junction_Points" -gt 1; then
 		abort "Patchset ntdll-Junction_Points disabled, but ntdll-NtQueryEaFile depends on that."
@@ -3677,8 +3666,8 @@ fi
 # |
 # | Modified files:
 # |   *	dlls/advapi32/crypt.c, dlls/advapi32/tests/security.c, dlls/kernel32/tests/virtual.c, dlls/ntdll/ntdll_misc.h,
-# | 	dlls/ntdll/server.c, dlls/ntdll/signal_arm.c, dlls/ntdll/signal_arm64.c, dlls/ntdll/signal_i386.c,
-# | 	dlls/ntdll/signal_powerpc.c, dlls/ntdll/signal_x86_64.c, dlls/ntdll/thread.c, dlls/ntdll/virtual.c,
+# | 	dlls/ntdll/signal_arm.c, dlls/ntdll/signal_arm64.c, dlls/ntdll/signal_i386.c, dlls/ntdll/signal_powerpc.c,
+# | 	dlls/ntdll/signal_x86_64.c, dlls/ntdll/thread.c, dlls/ntdll/unix/server.c, dlls/ntdll/unix/virtual.c,
 # | 	dlls/psapi/tests/psapi_main.c
 # |
 if test "$enable_ntdll_WRITECOPY" -eq 1; then
@@ -3713,7 +3702,7 @@ fi
 # |   *	[#44650] Fix holes in ELF mappings
 # |
 # | Modified files:
-# |   *	dlls/ntdll/virtual.c, dlls/psapi/tests/psapi_main.c
+# |   *	dlls/ntdll/unix/virtual.c, dlls/psapi/tests/psapi_main.c
 # |
 if test "$enable_ntdll_Builtin_Prot" -eq 1; then
 	patch_apply ntdll-Builtin_Prot/0001-ntdll-Fix-holes-in-ELF-mappings.patch
@@ -3775,7 +3764,7 @@ fi
 # Patchset ntdll-Dealloc_Thread_Stack
 # |
 # | Modified files:
-# |   *	dlls/ntdll/ntdll_misc.h, dlls/ntdll/virtual.c
+# |   *	dlls/ntdll/ntdll_misc.h, dlls/ntdll/unix/unix_private.h, dlls/ntdll/unix/virtual.c
 # |
 if test "$enable_ntdll_Dealloc_Thread_Stack" -eq 1; then
 	patch_apply ntdll-Dealloc_Thread_Stack/0001-ntdll-Do-not-allow-to-allocate-thread-stack-for-curr.patch
@@ -3858,7 +3847,7 @@ fi
 # |   *	[#33162] Ensure NtProtectVirtualMemory and NtCreateSection are on separate pages
 # |
 # | Modified files:
-# |   *	dlls/ntdll/virtual.c
+# |   *	dlls/ntdll/unix/virtual.c
 # |
 if test "$enable_ntdll_Fix_Alignment" -eq 1; then
 	patch_apply ntdll-Fix_Alignment/0001-ntdll-Move-NtProtectVirtualMemory-and-NtCreateSectio.patch
@@ -3875,7 +3864,7 @@ fi
 # | 	44-bit user-mode VA limitation from Windows < 8.1)
 # |
 # | Modified files:
-# |   *	dlls/ntdll/virtual.c
+# |   *	dlls/ntdll/unix/virtual.c
 # |
 if test "$enable_ntdll_ForceBottomUpAlloc" -eq 1; then
 	patch_apply ntdll-ForceBottomUpAlloc/0001-ntdll-Stop-search-on-mmap-error-in-try_map_free_area.patch
@@ -4114,36 +4103,6 @@ if test "$enable_ntdll_NtQuerySection" -eq 1; then
 	) >> "$patchlist"
 fi
 
-# Patchset ntdll-NtQueryVirtualMemory
-# |
-# | This patchset has the following (direct or indirect) dependencies:
-# |   *	ntdll-Pipe_SpecialCharacters, ntdll-NtDevicePath
-# |
-# | This patchset fixes the following Wine bugs:
-# |   *	[#23999] Implement MemorySectionName class in NtQueryVirtualMemory
-# |   *	[#27248] Implement K32GetMappedFileName
-# |
-# | Modified files:
-# |   *	dlls/kernelbase/debug.c, dlls/ntdll/directory.c, dlls/ntdll/ntdll_misc.h, dlls/ntdll/tests/info.c, dlls/ntdll/virtual.c,
-# | 	dlls/psapi/tests/psapi_main.c, server/mapping.c, server/protocol.def
-# |
-if test "$enable_ntdll_NtQueryVirtualMemory" -eq 1; then
-	patch_apply ntdll-NtQueryVirtualMemory/0003-ntdll-Implement-NtQueryVirtualMemory-MemorySectionNa.patch
-	patch_apply ntdll-NtQueryVirtualMemory/0004-ntdll-tests-Add-tests-for-NtQueryVirtualMemory-Memor.patch
-	patch_apply ntdll-NtQueryVirtualMemory/0005-ntdll-tests-Add-test-to-ensure-section-name-is-full-.patch
-	patch_apply ntdll-NtQueryVirtualMemory/0006-ntdll-Allow-to-query-section-names-from-other-proces.patch
-	patch_apply ntdll-NtQueryVirtualMemory/0007-kernel32-Implement-K32GetMappedFileName.-v2.patch
-	patch_apply ntdll-NtQueryVirtualMemory/0008-ntdll-Resolve-drive-symlinks-before-returning-sectio.patch
-	(
-		printf '%s\n' '+    { "Dmitry Timoshkov", "ntdll: Implement NtQueryVirtualMemory(MemorySectionName).", 3 },';
-		printf '%s\n' '+    { "Dmitry Timoshkov", "ntdll/tests: Add tests for NtQueryVirtualMemory(MemorySectionName).", 1 },';
-		printf '%s\n' '+    { "Sebastian Lackner", "ntdll/tests: Add test to ensure section name is full path.", 1 },';
-		printf '%s\n' '+    { "Sebastian Lackner", "ntdll: Allow to query section names from other processes.", 2 },';
-		printf '%s\n' '+    { "Dmitry Timoshkov", "kernel32: Implement K32GetMappedFileName.", 2 },';
-		printf '%s\n' '+    { "Sebastian Lackner", "ntdll: Resolve drive symlinks before returning section name.", 1 },';
-	) >> "$patchlist"
-fi
-
 # Patchset ntdll-NtSetLdtEntries
 # |
 # | Modified files:
diff --git a/patches/winebuild-Fake_Dlls/0003-winebuild-Generate-syscall-thunks-for-ntdll-exports.patch b/patches/winebuild-Fake_Dlls/0003-winebuild-Generate-syscall-thunks-for-ntdll-exports.patch
index 8203ef163..91188a829 100644
--- a/patches/winebuild-Fake_Dlls/0003-winebuild-Generate-syscall-thunks-for-ntdll-exports.patch
+++ b/patches/winebuild-Fake_Dlls/0003-winebuild-Generate-syscall-thunks-for-ntdll-exports.patch
@@ -18,7 +18,7 @@ Based on a patch by Erich E. Hoover.
  10 files changed, 208 insertions(+), 27 deletions(-)
 
 diff --git a/dlls/ntdll/signal_i386.c b/dlls/ntdll/signal_i386.c
-index 5fd54071ffd..950408cbc38 100644
+index eb6c87bce4d..d3cbfe63f1c 100644
 --- a/dlls/ntdll/signal_i386.c
 +++ b/dlls/ntdll/signal_i386.c
 @@ -449,6 +449,8 @@ static ULONG first_ldt_entry = 32;
@@ -30,15 +30,15 @@ index 5fd54071ffd..950408cbc38 100644
  enum i386_trap_code
  {
      TRAP_x86_UNKNOWN    = -1,  /* Unknown fault (TRAP_sig not defined) */
-@@ -1487,7 +1489,7 @@ NTSTATUS CDECL DECLSPEC_HIDDEN __regs_NtGetContextThread( DWORD edi, DWORD esi,
-         {
-             context->Ebp    = ebp;
-             context->Esp    = (DWORD)&retaddr;
--            context->Eip    = *(&edi - 1);
-+            context->Eip    = (DWORD)__syscall_NtGetContextThread + 18;
-             context->SegCs  = get_cs();
-             context->SegSs  = get_ds();
-             context->EFlags = eflags;
+@@ -1275,7 +1277,7 @@ NTSTATUS CDECL DECLSPEC_HIDDEN __regs_NtGetContextThread( DWORD edi, DWORD esi,
+     {
+         context->Ebp    = ebp;
+         context->Esp    = (DWORD)&retaddr;
+-        context->Eip    = *(&edi - 1);
++        context->Eip    = (DWORD)__syscall_NtGetContextThread + 18;
+         context->EFlags = eflags;
+     }
+     return unix_funcs->NtGetContextThread( handle, context );
 diff --git a/dlls/ntdll/tests/exception.c b/dlls/ntdll/tests/exception.c
 index a5e6faa461a..51938bf84cc 100644
 --- a/dlls/ntdll/tests/exception.c
@@ -53,7 +53,7 @@ index a5e6faa461a..51938bf84cc 100644
      ok( context.SegCs == LOWORD(expect.SegCs), "wrong SegCs %08x/%08x\n", context.SegCs, expect.SegCs );
      ok( context.SegDs == LOWORD(expect.SegDs), "wrong SegDs %08x/%08x\n", context.SegDs, expect.SegDs );
 diff --git a/dlls/ntdll/thread.c b/dlls/ntdll/thread.c
-index bb11521cf69..edd6c4dfa99 100644
+index f9ea9203ed8..7e435c4ccb3 100644
 --- a/dlls/ntdll/thread.c
 +++ b/dlls/ntdll/thread.c
 @@ -212,6 +212,8 @@ void map_user_shared_data(void)
@@ -65,15 +65,15 @@ index bb11521cf69..edd6c4dfa99 100644
  /***********************************************************************
   *           thread_init
   *
-@@ -248,6 +250,7 @@ TEB *thread_init(void)
+@@ -246,6 +248,7 @@ TEB *thread_init(void)
+ 
+     teb = unix_funcs->virtual_alloc_first_teb();
      unix_funcs->init_threading( &nb_threads, &__wine_ldt_copy );
-     unix_funcs->alloc_thread( teb );
-     unix_funcs->init_thread( teb );
 +    teb->WOW32Reserved = __wine_syscall_dispatcher;
  
      peb = teb->Peb;
      peb->FastPebLock        = &peb_lock;
-@@ -493,6 +496,7 @@ NTSTATUS WINAPI RtlCreateUserThread( HANDLE process, SECURITY_DESCRIPTOR *descr,
+@@ -491,6 +494,7 @@ NTSTATUS WINAPI RtlCreateUserThread( HANDLE process, SECURITY_DESCRIPTOR *descr,
      teb->Tib.StackBase = stack.StackBase;
      teb->Tib.StackLimit = stack.StackLimit;
      teb->DeallocationStack = stack.DeallocationStack;
diff --git a/patches/winebuild-Fake_Dlls/0005-winebuild-Add-stub-functions-in-fake-dlls.patch b/patches/winebuild-Fake_Dlls/0005-winebuild-Add-stub-functions-in-fake-dlls.patch
index edbed0e5e..883ca5ee7 100644
--- a/patches/winebuild-Fake_Dlls/0005-winebuild-Add-stub-functions-in-fake-dlls.patch
+++ b/patches/winebuild-Fake_Dlls/0005-winebuild-Add-stub-functions-in-fake-dlls.patch
@@ -61,7 +61,7 @@ index 926fa913866..902907329c0 100644
      CloseHandle(map);
      CloseHandle(file);
 diff --git a/dlls/ntdll/thread.c b/dlls/ntdll/thread.c
-index edd6c4dfa99..678af513264 100644
+index 7e435c4ccb3..5148445ce3a 100644
 --- a/dlls/ntdll/thread.c
 +++ b/dlls/ntdll/thread.c
 @@ -214,6 +214,39 @@ void map_user_shared_data(void)
@@ -104,15 +104,15 @@ index edd6c4dfa99..678af513264 100644
  /***********************************************************************
   *           thread_init
   *
-@@ -251,6 +284,7 @@ TEB *thread_init(void)
-     unix_funcs->alloc_thread( teb );
-     unix_funcs->init_thread( teb );
+@@ -249,6 +282,7 @@ TEB *thread_init(void)
+     teb = unix_funcs->virtual_alloc_first_teb();
+     unix_funcs->init_threading( &nb_threads, &__wine_ldt_copy );
      teb->WOW32Reserved = __wine_syscall_dispatcher;
 +    teb->Spare2 = (ULONG_PTR)__wine_fakedll_dispatcher;
  
      peb = teb->Peb;
      peb->FastPebLock        = &peb_lock;
-@@ -497,6 +531,7 @@ NTSTATUS WINAPI RtlCreateUserThread( HANDLE process, SECURITY_DESCRIPTOR *descr,
+@@ -495,6 +529,7 @@ NTSTATUS WINAPI RtlCreateUserThread( HANDLE process, SECURITY_DESCRIPTOR *descr,
      teb->Tib.StackLimit = stack.StackLimit;
      teb->DeallocationStack = stack.DeallocationStack;
      teb->WOW32Reserved = __wine_syscall_dispatcher;
diff --git a/patches/winebuild-Fake_Dlls/0010-tools-winebuild-Add-syscall-thunks-for-64-bit.patch b/patches/winebuild-Fake_Dlls/0010-tools-winebuild-Add-syscall-thunks-for-64-bit.patch
index eac187915..2d38ff3c4 100644
--- a/patches/winebuild-Fake_Dlls/0010-tools-winebuild-Add-syscall-thunks-for-64-bit.patch
+++ b/patches/winebuild-Fake_Dlls/0010-tools-winebuild-Add-syscall-thunks-for-64-bit.patch
@@ -40,7 +40,7 @@ index 95939ba6bde..ae5462f6e55 100644
              todo_wine ok(0, "%s: Export is a stub-function, skipping\n", func_name);
              continue;
 diff --git a/dlls/ntdll/thread.c b/dlls/ntdll/thread.c
-index 678af513264..297893d8898 100644
+index 5148445ce3a..c9a2240a4da 100644
 --- a/dlls/ntdll/thread.c
 +++ b/dlls/ntdll/thread.c
 @@ -54,6 +54,8 @@ WINE_DEFAULT_DEBUG_CHANNEL(thread);
@@ -77,7 +77,7 @@ index 678af513264..297893d8898 100644
 +
      /* allocate and initialize the PEB and initial TEB */
  
-     teb = virtual_alloc_first_teb();
+     teb = unix_funcs->virtual_alloc_first_teb();
 diff --git a/libs/wine/loader.c b/libs/wine/loader.c
 index 4597a6cb324..3d0d75e9c6d 100644
 --- a/libs/wine/loader.c
diff --git a/patches/ws2_32-WSACleanup/0002-ws2_32-Invalidate-client-side-file-descriptor-cache-.patch b/patches/ws2_32-WSACleanup/0002-ws2_32-Invalidate-client-side-file-descriptor-cache-.patch
index 8d92e3765..95c2d9b8d 100644
--- a/patches/ws2_32-WSACleanup/0002-ws2_32-Invalidate-client-side-file-descriptor-cache-.patch
+++ b/patches/ws2_32-WSACleanup/0002-ws2_32-Invalidate-client-side-file-descriptor-cache-.patch
@@ -48,10 +48,10 @@ index c7788b99e2d..54291d0a909 100644
  /***********************************************************************
   *           server_init_process
 diff --git a/dlls/ntdll/unix/loader.c b/dlls/ntdll/unix/loader.c
-index aa020845bb9..0ef08edc474 100644
+index 0f342e8277e..4c7a5c488dc 100644
 --- a/dlls/ntdll/unix/loader.c
 +++ b/dlls/ntdll/unix/loader.c
-@@ -1014,6 +1014,7 @@ static struct unix_funcs unix_funcs =
+@@ -1045,6 +1045,7 @@ static struct unix_funcs unix_funcs =
      server_wait,
      server_queue_process_apc,
      server_send_fd,
@@ -60,7 +60,7 @@ index aa020845bb9..0ef08edc474 100644
      server_fd_to_handle,
      server_handle_to_fd,
 diff --git a/dlls/ntdll/unix/server.c b/dlls/ntdll/unix/server.c
-index 8889c5d4b12..929ff354d65 100644
+index 17b23e58d28..f7d172cf324 100644
 --- a/dlls/ntdll/unix/server.c
 +++ b/dlls/ntdll/unix/server.c
 @@ -983,6 +983,26 @@ static int remove_fd_from_cache( HANDLE handle )
@@ -91,10 +91,10 @@ index 8889c5d4b12..929ff354d65 100644
  /***********************************************************************
   *           server_get_unix_fd
 diff --git a/dlls/ntdll/unix/unix_private.h b/dlls/ntdll/unix/unix_private.h
-index 0694426dddb..5c13dce0b0a 100644
+index 8562efb7dd4..ee2bd47ad70 100644
 --- a/dlls/ntdll/unix/unix_private.h
 +++ b/dlls/ntdll/unix/unix_private.h
-@@ -68,6 +68,7 @@ extern unsigned int CDECL server_wait( const select_op_t *select_op, data_size_t
+@@ -90,6 +90,7 @@ extern unsigned int CDECL server_wait( const select_op_t *select_op, data_size_t
                                         const LARGE_INTEGER *timeout ) DECLSPEC_HIDDEN;
  extern unsigned int CDECL server_queue_process_apc( HANDLE process, const apc_call_t *call, apc_result_t *result ) DECLSPEC_HIDDEN;
  extern void CDECL server_send_fd( int fd ) DECLSPEC_HIDDEN;
@@ -103,19 +103,19 @@ index 0694426dddb..5c13dce0b0a 100644
                                       int *needs_close, enum server_fd_type *type,
                                       unsigned int *options ) DECLSPEC_HIDDEN;
 diff --git a/dlls/ntdll/unixlib.h b/dlls/ntdll/unixlib.h
-index 323141d3840..0189c247b7a 100644
+index fb755373f07..7df35f0eee1 100644
 --- a/dlls/ntdll/unixlib.h
 +++ b/dlls/ntdll/unixlib.h
-@@ -27,7 +27,7 @@
- struct ldt_copy;
+@@ -28,7 +28,7 @@ struct ldt_copy;
+ struct msghdr;
  
  /* increment this when you change the function table */
--#define NTDLL_UNIXLIB_VERSION 13
-+#define NTDLL_UNIXLIB_VERSION 14
+-#define NTDLL_UNIXLIB_VERSION 16
++#define NTDLL_UNIXLIB_VERSION 17
  
  struct unix_funcs
  {
-@@ -80,6 +80,7 @@ struct unix_funcs
+@@ -127,6 +127,7 @@ struct unix_funcs
                                          const LARGE_INTEGER *timeout );
      unsigned int  (CDECL *server_queue_process_apc)( HANDLE process, const apc_call_t *call, apc_result_t *result );
      void          (CDECL *server_send_fd)( int fd );


diff --git a/patches/ntdll-Syscall_Emulation/0001-ntdll-Support-x86_64-syscall-emulation.patch b/patches/ntdll-Syscall_Emulation/0001-ntdll-Support-x86_64-syscall-emulation.patch
index f38451b08..c94ae38cc 100644
--- a/patches/ntdll-Syscall_Emulation/0001-ntdll-Support-x86_64-syscall-emulation.patch
+++ b/patches/ntdll-Syscall_Emulation/0001-ntdll-Support-x86_64-syscall-emulation.patch
@@ -52,7 +52,16 @@ index d42438f88af..36bc2ef656a 100644
  #define NONAMELESSUNION
  #define NONAMELESSSTRUCT
  #include "ntstatus.h"
-@@ -3089,6 +3097,104 @@ static void usr1_handler( int signal, siginfo_t *siginfo, void *ucontext )
+@@ -77,6 +85,8 @@
+ WINE_DEFAULT_DEBUG_CHANNEL(seh);
+ WINE_DECLARE_DEBUG_CHANNEL(relay);
+ 
++extern void DECLSPEC_NORETURN __wine_syscall_dispatcher( void );
++
+ typedef struct _SCOPE_TABLE
+ {
+     ULONG Count;
+@@ -3113,6 +3123,104 @@ static void usr1_handler( int signal, siginfo_t *siginfo, void *ucontext )
      restore_context( &context, ucontext );
  }
  
@@ -157,7 +166,7 @@ index d42438f88af..36bc2ef656a 100644
  
  /***********************************************************************
   *           __wine_set_signal_handler   (NTDLL.@)
-@@ -3134,6 +3240,9 @@ void signal_init_process(void)
+@@ -3158,6 +3266,9 @@ void signal_init_process(void)
      sig_act.sa_sigaction = trap_handler;
      if (sigaction( SIGTRAP, &sig_act, NULL ) == -1) goto error;
  #endif
diff --git a/patches/ntdll-WRITECOPY/0006-ntdll-Support-WRITECOPY-on-x64.patch b/patches/ntdll-WRITECOPY/0006-ntdll-Support-WRITECOPY-on-x64.patch
index b22edcfd7..183324746 100644
--- a/patches/ntdll-WRITECOPY/0006-ntdll-Support-WRITECOPY-on-x64.patch
+++ b/patches/ntdll-WRITECOPY/0006-ntdll-Support-WRITECOPY-on-x64.patch
@@ -35,7 +35,7 @@ index 29829bfb1c6..89a8e36410d 100644
 +        /* fall-through */
 +    default:
 +        WINE_ERR( "Got unexpected trap %lld during process initialization\n", TRAP_sig(ucontext) );
-+        abort_thread(1);
++        unix_funcs->abort_thread(1);
 +        break;
 +    }
 +}

diff --git a/patches/ntdll-ApiSetMap/0001-ntdll-Add-dummy-apiset-to-PEB.patch b/patches/ntdll-ApiSetMap/0001-ntdll-Add-dummy-apiset-to-PEB.patch
index b4a9bca1f..3987c7cdf 100644
--- a/patches/ntdll-ApiSetMap/0001-ntdll-Add-dummy-apiset-to-PEB.patch
+++ b/patches/ntdll-ApiSetMap/0001-ntdll-Add-dummy-apiset-to-PEB.patch
@@ -12,19 +12,19 @@ Subject: [PATCH] ntdll: Add dummy apiset to PEB.
  create mode 100644 include/apiset.h
 
 diff --git a/dlls/ntdll/thread.c b/dlls/ntdll/thread.c
-index ca8b5e2bf8a..565dea14b39 100644
+index 21e8b0c08f8..24254d4b43c 100644
 --- a/dlls/ntdll/thread.c
 +++ b/dlls/ntdll/thread.c
-@@ -75,6 +75,7 @@ static PEB_LDR_DATA ldr;
+@@ -71,6 +71,7 @@ static PEB_LDR_DATA ldr;
  static RTL_BITMAP tls_bitmap;
  static RTL_BITMAP tls_expansion_bitmap;
  static RTL_BITMAP fls_bitmap;
 +static API_SET_NAMESPACE_ARRAY apiset_map;
  static int nb_threads = 1;
  
- static RTL_CRITICAL_SECTION peb_lock;
+ struct ldt_copy *__wine_ldt_copy = NULL;
 @@ -300,6 +301,7 @@ TEB *thread_init(void)
-     teb = virtual_alloc_first_teb();
+ 
      peb = teb->Peb;
      peb->FastPebLock        = &peb_lock;
 +    peb->ApiSetMap          = &apiset_map;

diff --git a/patches/ntdll-Fix_Alignment/0001-ntdll-Move-NtProtectVirtualMemory-and-NtCreateSectio.patch b/patches/ntdll-Fix_Alignment/0001-ntdll-Move-NtProtectVirtualMemory-and-NtCreateSectio.patch
index aa940f9de..270c82fdd 100644
--- a/patches/ntdll-Fix_Alignment/0001-ntdll-Move-NtProtectVirtualMemory-and-NtCreateSectio.patch
+++ b/patches/ntdll-Fix_Alignment/0001-ntdll-Move-NtProtectVirtualMemory-and-NtCreateSectio.patch
@@ -1,20 +1,20 @@
-From 89a4ee827b74d8e4d63ca3e1354d89d75cc0fc19 Mon Sep 17 00:00:00 2001
+From 554f37a5ee79939ba9368e9bd7ea408860a32803 Mon Sep 17 00:00:00 2001
 From: =?UTF-8?q?Michael=20M=C3=BCller?= <michael@fds-team.de>
 Date: Wed, 20 Aug 2014 19:21:18 +0200
-Subject: ntdll: Move NtProtectVirtualMemory and NtCreateSection to separate
- pages on x86. (try 2)
+Subject: [PATCH] ntdll: Move NtProtectVirtualMemory and NtCreateSection to
+ separate pages on x86. (try 2)
 
 ---
  dlls/ntdll/virtual.c | 8 ++++++++
  1 file changed, 8 insertions(+)
 
 diff --git a/dlls/ntdll/virtual.c b/dlls/ntdll/virtual.c
-index ce2469829b0..eb2dbe8a2cd 100644
+index cfe30bbe710..6173846cfb4 100644
 --- a/dlls/ntdll/virtual.c
 +++ b/dlls/ntdll/virtual.c
-@@ -168,6 +168,14 @@ static void *preload_reserve_end;
- static BOOL use_locks;
- static BOOL force_exec_prot;  /* whether to force PROT_EXEC on all PROT_READ mmaps */
+@@ -366,6 +366,14 @@ static void free_ranges_remove_view( struct file_view *view )
+ }
+ 
  
 +#if defined(__i386__)
 +NTSTATUS WINAPI NtProtectVirtualMemory( HANDLE process, PVOID *addr_ptr, SIZE_T *size_ptr,
 
diff --git a/patches/ntdll-NtQueryVirtualMemory/0008-ntdll-Resolve-drive-symlinks-before-returning-sectio.patch b/patches/ntdll-NtQueryVirtualMemory/0008-ntdll-Resolve-drive-symlinks-before-returning-sectio.patch
index 28506cf85..b125f578e 100644
--- a/patches/ntdll-NtQueryVirtualMemory/0008-ntdll-Resolve-drive-symlinks-before-returning-sectio.patch
+++ b/patches/ntdll-NtQueryVirtualMemory/0008-ntdll-Resolve-drive-symlinks-before-returning-sectio.patch
@@ -24,9 +24,9 @@ index eb7f3bc3718..0412824c811 100644
 --- a/dlls/ntdll/ntdll_misc.h
 +++ b/dlls/ntdll/ntdll_misc.h
 @@ -182,6 +182,7 @@ extern NTSTATUS nt_to_unix_file_name_attr( const OBJECT_ATTRIBUTES *attr, ANSI_S
+                                            UINT disposition ) DECLSPEC_HIDDEN;
+ 
  /* virtual memory */
- extern NTSTATUS virtual_alloc( PVOID *ret, unsigned short zero_bits_64, SIZE_T *size_ptr,
-                                ULONG type, ULONG protect ) DECLSPEC_HIDDEN;
 +extern NTSTATUS read_nt_symlink( HANDLE root, UNICODE_STRING *name, WCHAR *target, size_t length ) DECLSPEC_HIDDEN;
  extern NTSTATUS virtual_map_section( HANDLE handle, PVOID *addr_ptr, unsigned short zero_bits_64, SIZE_T commit_size,
                                       const LARGE_INTEGER *offset_ptr, SIZE_T *size_ptr, ULONG alloc_type,

diff --git a/patches/ntdll-NtSetLdtEntries/0001-ntdll-Implement-NtSetLdtEntries.patch b/patches/ntdll-NtSetLdtEntries/0001-ntdll-Implement-NtSetLdtEntries.patch
index 611b5ea6d..8b4edd8cf 100644
--- a/patches/ntdll-NtSetLdtEntries/0001-ntdll-Implement-NtSetLdtEntries.patch
+++ b/patches/ntdll-NtSetLdtEntries/0001-ntdll-Implement-NtSetLdtEntries.patch
@@ -119,11 +119,11 @@ index 2dd274e0c10..ae67a9aa0a0 100644
  #endif
     test_QueueUserWorkItem();
     test_RegisterWaitForSingleObject();
-diff --git a/dlls/ntdll/signal_i386.c b/dlls/ntdll/signal_i386.c
-index 441ef579609..eb28d668279 100644
---- a/dlls/ntdll/signal_i386.c
-+++ b/dlls/ntdll/signal_i386.c
-@@ -2533,7 +2533,7 @@ NTSTATUS get_thread_ldt_entry( HANDLE handle, void *data, ULONG len, ULONG *ret_
+diff --git a/dlls/ntdll/unix/signal_i386.c b/dlls/ntdll/unix/signal_i386.c
+index 320ffa68407..a52490a096b 100644
+--- a/dlls/ntdll/unix/signal_i386.c
++++ b/dlls/ntdll/unix/signal_i386.c
+@@ -480,7 +480,7 @@ NTSTATUS CDECL get_thread_ldt_entry( HANDLE handle, void *data, ULONG len, ULONG
                  if (reply->flags)
                      info->Entry = ldt_make_entry( (void *)reply->base, reply->limit, reply->flags );
                  else
diff --git a/patches/ntdll-NtSetLdtEntries/0002-libs-wine-Allow-to-modify-reserved-LDT-entries.patch b/patches/ntdll-NtSetLdtEntries/0002-libs-wine-Allow-to-modify-reserved-LDT-entries.patch
index 9a4adcb02..1b87d3de8 100644
--- a/patches/ntdll-NtSetLdtEntries/0002-libs-wine-Allow-to-modify-reserved-LDT-entries.patch
+++ b/patches/ntdll-NtSetLdtEntries/0002-libs-wine-Allow-to-modify-reserved-LDT-entries.patch
@@ -42,11 +42,11 @@ index ae67a9aa0a0..6149be8cf4a 100644
          ok(!memcmp(&ds_entry, &sel.entry, sizeof(ds_entry)), "entries do not match\n");
      }
  }
-diff --git a/dlls/ntdll/signal_i386.c b/dlls/ntdll/signal_i386.c
-index 98ce76c8e27..e31c3d6b0b8 100644
---- a/dlls/ntdll/signal_i386.c
-+++ b/dlls/ntdll/signal_i386.c
-@@ -2534,8 +2534,6 @@ NTSTATUS WINAPI NtSetLdtEntries( ULONG sel1, LDT_ENTRY entry1, ULONG sel2, LDT_E
+diff --git a/dlls/ntdll/unix/signal_i386.c b/dlls/ntdll/unix/signal_i386.c
+index a52490a096b..7b04be577ab 100644
+--- a/dlls/ntdll/unix/signal_i386.c
++++ b/dlls/ntdll/unix/signal_i386.c
+@@ -502,8 +502,6 @@ NTSTATUS WINAPI NtSetLdtEntries( ULONG sel1, LDT_ENTRY entry1, ULONG sel2, LDT_E
      sigset_t sigset;
  
      if (sel1 >> 16 || sel2 >> 16) return STATUS_INVALID_LDT_DESCRIPTOR;
diff --git a/patches/ntdll-Syscall_Emulation/0001-ntdll-Support-x86_64-syscall-emulation.patch b/patches/ntdll-Syscall_Emulation/0001-ntdll-Support-x86_64-syscall-emulation.patch
index dbb40f85a..f38451b08 100644
--- a/patches/ntdll-Syscall_Emulation/0001-ntdll-Support-x86_64-syscall-emulation.patch
+++ b/patches/ntdll-Syscall_Emulation/0001-ntdll-Support-x86_64-syscall-emulation.patch
@@ -52,7 +52,7 @@ index 26d688c3abe..87c5a99a65e 100644
  #define NONAMELESSUNION
  #define NONAMELESSSTRUCT
  #include "ntstatus.h"
-@@ -3096,6 +3104,38 @@ static void usr1_handler( int signal, siginfo_t *siginfo, void *ucontext )
+@@ -3089,6 +3097,104 @@ static void usr1_handler( int signal, siginfo_t *siginfo, void *ucontext )
      restore_context( &context, ucontext );
  }
  
@@ -88,13 +88,7 @@ index 26d688c3abe..87c5a99a65e 100644
 +    ctx->uc_mcontext.gregs[REG_RIP] = (ULONG64)__wine_syscall_dispatcher;
 +}
 +#endif
- 
- /***********************************************************************
-  *           __wine_set_signal_handler   (NTDLL.@)
-@@ -3266,6 +3306,72 @@ void signal_init_thread( TEB *teb )
- #endif
- }
- 
++
 +#ifdef HAVE_SECCOMP
 +static int sc_seccomp(unsigned int operation, unsigned int flags, void *args)
 +{
@@ -160,11 +154,10 @@ index 26d688c3abe..87c5a99a65e 100644
 +    WARN("Built without seccomp.\n");
 +#endif
 +}
-+
- /**********************************************************************
-  *		signal_init_process
-  */
-@@ -3298,6 +3404,9 @@ void signal_init_process(void)
+ 
+ /***********************************************************************
+  *           __wine_set_signal_handler   (NTDLL.@)
+@@ -3134,6 +3240,9 @@ void signal_init_process(void)
      sig_act.sa_sigaction = trap_handler;
      if (sigaction( SIGTRAP, &sig_act, NULL ) == -1) goto error;
  #endif
 
diff --git a/patches/ntdll-ThreadTime/0006-ntdll-Fill-process-virtual-memory-counters-in-NtQuer.patch b/patches/ntdll-ThreadTime/0006-ntdll-Fill-process-virtual-memory-counters-in-NtQuer.patch
index f74a81b37..4656891e3 100644
--- a/patches/ntdll-ThreadTime/0006-ntdll-Fill-process-virtual-memory-counters-in-NtQuer.patch
+++ b/patches/ntdll-ThreadTime/0006-ntdll-Fill-process-virtual-memory-counters-in-NtQuer.patch
@@ -13,10 +13,10 @@ FIXME: fill_VM_COUNTERS now uses a different method ... which one is better?
  4 files changed, 41 insertions(+), 1 deletion(-)
 
 diff --git a/dlls/ntdll/nt.c b/dlls/ntdll/nt.c
-index a21a8bcceee..608525347ca 100644
+index 7c2945f0a73..abb2d2176d6 100644
 --- a/dlls/ntdll/nt.c
 +++ b/dlls/ntdll/nt.c
-@@ -2703,8 +2703,11 @@ NTSTATUS WINAPI NtQuerySystemInformation(
+@@ -2686,8 +2686,11 @@ NTSTATUS WINAPI NtQuerySystemInformation(
                              /* spi->ti will be set later on */
  
                              if (reply->unix_pid != -1)
@@ -29,10 +29,10 @@ index a21a8bcceee..608525347ca 100644
                          }
                          len += procstructlen;
 diff --git a/dlls/ntdll/ntdll_misc.h b/dlls/ntdll/ntdll_misc.h
-index b4e3c7d5c83..15f72631f55 100644
+index e85f3a3b900..b45b9a02bb1 100644
 --- a/dlls/ntdll/ntdll_misc.h
 +++ b/dlls/ntdll/ntdll_misc.h
-@@ -297,6 +297,7 @@ void     WINAPI LdrInitializeThunk(CONTEXT*,void**,ULONG_PTR,ULONG_PTR);
+@@ -285,6 +285,7 @@ void     WINAPI LdrInitializeThunk(CONTEXT*,void**,ULONG_PTR,ULONG_PTR);
  /* process / thread time */
  extern BOOL read_process_time(int unix_pid, int unix_tid, unsigned long clk_tck,
                                LARGE_INTEGER *kernel, LARGE_INTEGER *user) DECLSPEC_HIDDEN;
@@ -41,10 +41,10 @@ index b4e3c7d5c83..15f72631f55 100644
  /* string functions */
  int    __cdecl NTDLL_tolower( int c );
 diff --git a/dlls/ntdll/process.c b/dlls/ntdll/process.c
-index e59c255e327..71233f92853 100644
+index c066610ebca..f2dddb18052 100644
 --- a/dlls/ntdll/process.c
 +++ b/dlls/ntdll/process.c
-@@ -186,7 +186,7 @@ static void fill_VM_COUNTERS(VM_COUNTERS* pvmi)
+@@ -192,7 +192,7 @@ static void fill_VM_COUNTERS(VM_COUNTERS* pvmi)
  
  static void fill_VM_COUNTERS(VM_COUNTERS* pvmi)
  {
@@ -54,11 +54,11 @@ index e59c255e327..71233f92853 100644
  
  #endif
 diff --git a/dlls/ntdll/thread.c b/dlls/ntdll/thread.c
-index a2a999f8996..f5f932ae703 100644
+index b7d4e399f62..21e8b0c08f8 100644
 --- a/dlls/ntdll/thread.c
 +++ b/dlls/ntdll/thread.c
-@@ -366,6 +366,42 @@ TEB *thread_init(void)
-     return teb;
+@@ -385,6 +385,42 @@ void WINAPI RtlExitUserThread( ULONG status )
+     for (;;) unix_funcs->exit_thread( status );
  }
  
 +BOOL read_process_memory_stats(int unix_pid, VM_COUNTERS *pvmi)
@@ -99,7 +99,7 @@ index a2a999f8996..f5f932ae703 100644
 +}
  
  /***********************************************************************
-  *           abort_thread
+  *           start_thread
 -- 
 2.26.2
 
diff --git a/patches/ntdll-Threading/0001-ntdll-Fix-race-condition-when-threads-are-killed-dur.patch b/patches/ntdll-Threading/0001-ntdll-Fix-race-condition-when-threads-are-killed-dur.patch
index e463ba9e7..9f370c21d 100644
--- a/patches/ntdll-Threading/0001-ntdll-Fix-race-condition-when-threads-are-killed-dur.patch
+++ b/patches/ntdll-Threading/0001-ntdll-Fix-race-condition-when-threads-are-killed-dur.patch
@@ -1,4 +1,4 @@
-From f8e12f51bebca8cda3be339bcc216ca8cc60a718 Mon Sep 17 00:00:00 2001
+From 5f34c6a4429025ee71616e677e0e59342bee17b0 Mon Sep 17 00:00:00 2001
 From: Sebastian Lackner <sebastian@fds-team.de>
 Date: Wed, 25 Feb 2015 22:45:42 +0100
 Subject: [PATCH] ntdll: Fix race-condition when threads are killed during
@@ -19,10 +19,10 @@ fix the most critical one (messed up refcounting of threads) for now.
  1 file changed, 7 insertions(+), 1 deletion(-)
 
 diff --git a/dlls/ntdll/thread.c b/dlls/ntdll/thread.c
-index b25f87e437..5fbd9e06c3 100644
+index bb11521cf69..fee26ccd21d 100644
 --- a/dlls/ntdll/thread.c
 +++ b/dlls/ntdll/thread.c
-@@ -336,6 +336,7 @@ void exit_thread( int status )
+@@ -298,6 +298,7 @@ TEB *thread_init(void)
  void WINAPI RtlExitUserThread( ULONG status )
  {
      static void *prev_teb;
@@ -30,7 +30,7 @@ index b25f87e437..5fbd9e06c3 100644
      TEB *teb;
  
      if (status)  /* send the exit code to the server (0 is already the default) */
-@@ -349,7 +350,7 @@ void WINAPI RtlExitUserThread( ULONG status )
+@@ -311,7 +312,7 @@ void WINAPI RtlExitUserThread( ULONG status )
          SERVER_END_REQ;
      }
  
@@ -38,8 +38,8 @@ index b25f87e437..5fbd9e06c3 100644
 +    if (InterlockedCompareExchange( &nb_threads, 0, 0 ) <= 0)
      {
          LdrShutdownProcess();
-         pthread_sigmask( SIG_BLOCK, &server_block_set, NULL );
-@@ -372,6 +373,11 @@ void WINAPI RtlExitUserThread( ULONG status )
+         unix_funcs->exit_process( status );
+@@ -333,6 +334,11 @@ void WINAPI RtlExitUserThread( ULONG status )
          }
      }
  
@@ -48,7 +48,7 @@ index b25f87e437..5fbd9e06c3 100644
 +    pthread_sigmask( SIG_BLOCK, &sigset, NULL );
 +    if (!InterlockedDecrement( &nb_threads )) _exit( status );
 +
-     signal_exit_thread( status );
+     for (;;) unix_funcs->exit_thread( status );
  }
  
 -- 
diff --git a/patches/ntdll-WRITECOPY/0003-ntdll-Setup-a-temporary-signal-handler-during-proces.patch b/patches/ntdll-WRITECOPY/0003-ntdll-Setup-a-temporary-signal-handler-during-proces.patch
index 27278da60..c5f334858 100644
--- a/patches/ntdll-WRITECOPY/0003-ntdll-Setup-a-temporary-signal-handler-during-proces.patch
+++ b/patches/ntdll-WRITECOPY/0003-ntdll-Setup-a-temporary-signal-handler-during-proces.patch
@@ -15,22 +15,22 @@ Subject: [PATCH] ntdll: Setup a temporary signal handler during process
  7 files changed, 79 insertions(+)
 
 diff --git a/dlls/ntdll/ntdll_misc.h b/dlls/ntdll/ntdll_misc.h
-index 58b688d06bd..f3ebfb72d32 100644
+index 427cdaad441..562f5ec8d4c 100644
 --- a/dlls/ntdll/ntdll_misc.h
 +++ b/dlls/ntdll/ntdll_misc.h
-@@ -84,6 +84,7 @@ extern NTSTATUS signal_alloc_thread( TEB *teb ) DECLSPEC_HIDDEN;
- extern void signal_free_thread( TEB *teb ) DECLSPEC_HIDDEN;
- extern void signal_init_thread( TEB *teb ) DECLSPEC_HIDDEN;
+@@ -80,6 +80,7 @@ extern LPCSTR debugstr_ObjectAttributes(const OBJECT_ATTRIBUTES *oa) DECLSPEC_HI
+ extern SIZE_T signal_stack_size DECLSPEC_HIDDEN;
+ extern SIZE_T signal_stack_mask DECLSPEC_HIDDEN;
  extern void signal_init_process(void) DECLSPEC_HIDDEN;
 +extern void signal_init_early(void) DECLSPEC_HIDDEN;
  extern void signal_start_thread( LPTHREAD_START_ROUTINE entry, void *arg, BOOL suspend ) DECLSPEC_HIDDEN;
  extern void signal_start_process( LPTHREAD_START_ROUTINE entry, BOOL suspend ) DECLSPEC_HIDDEN;
- extern void DECLSPEC_NORETURN signal_exit_thread( int status ) DECLSPEC_HIDDEN;
+ extern void version_init(void) DECLSPEC_HIDDEN;
 diff --git a/dlls/ntdll/signal_arm.c b/dlls/ntdll/signal_arm.c
-index 31280edce47..f903eb93434 100644
+index e66cf922f91..dcfdeaa83ad 100644
 --- a/dlls/ntdll/signal_arm.c
 +++ b/dlls/ntdll/signal_arm.c
-@@ -1031,6 +1031,12 @@ void signal_init_process(void)
+@@ -988,6 +988,12 @@ void signal_init_process(void)
      exit(1);
  }
  
@@ -44,11 +44,11 @@ index 31280edce47..f903eb93434 100644
  /***********************************************************************
   *            RtlUnwind  (NTDLL.@)
 diff --git a/dlls/ntdll/signal_arm64.c b/dlls/ntdll/signal_arm64.c
-index 9f84d3fbfd1..8ab83a1d142 100644
+index c87f99f0c4c..fed76574dbc 100644
 --- a/dlls/ntdll/signal_arm64.c
 +++ b/dlls/ntdll/signal_arm64.c
-@@ -1293,6 +1293,12 @@ void signal_init_thread( TEB *teb )
-     pthread_setspecific( teb_key, teb );
+@@ -1303,6 +1303,12 @@ int CDECL __wine_set_signal_handler(unsigned int sig, wine_signal_handler wsh)
+     return 0;
  }
  
 +/**********************************************************************
@@ -88,7 +88,7 @@ index 238d4eacf63..32c6eba0e51 100644
 +        /* fall-through */
 +    default:
 +        WINE_ERR( "Got unexpected trap %d during process initialization\n", get_trap_code(context) );
-+        abort_thread(1);
++        unix_funcs->abort_thread(1);
 +        break;
 +    }
 +}
@@ -132,11 +132,11 @@ index 238d4eacf63..32c6eba0e51 100644
  /*******************************************************************
   *		RtlUnwind (NTDLL.@)
 diff --git a/dlls/ntdll/signal_powerpc.c b/dlls/ntdll/signal_powerpc.c
-index 9df6eff31f4..e79fca3abce 100644
+index a23f6b6e4d5..c3b4b6ffd42 100644
 --- a/dlls/ntdll/signal_powerpc.c
 +++ b/dlls/ntdll/signal_powerpc.c
-@@ -1047,6 +1047,12 @@ void signal_init_thread( TEB *teb )
-     pthread_setspecific( teb_key, teb );
+@@ -1009,6 +1009,12 @@ int CDECL __wine_set_signal_handler(unsigned int sig, wine_signal_handler wsh)
+     return 0;
  }
  
 +/**********************************************************************

diff --git a/patches/winebuild-Fake_Dlls/0003-winebuild-Generate-syscall-thunks-for-ntdll-exports.patch b/patches/winebuild-Fake_Dlls/0003-winebuild-Generate-syscall-thunks-for-ntdll-exports.patch
index b7d57bffe..8203ef163 100644
--- a/patches/winebuild-Fake_Dlls/0003-winebuild-Generate-syscall-thunks-for-ntdll-exports.patch
+++ b/patches/winebuild-Fake_Dlls/0003-winebuild-Generate-syscall-thunks-for-ntdll-exports.patch
@@ -14,23 +15,22 @@ Based on a patch by Erich E. Hoover.
  tools/winebuild/spec16.c     |  22 +-------
  tools/winebuild/spec32.c     | 104 +++++++++++++++++++++++++++++++++++
  tools/winebuild/utils.c      |  21 +++++++
- 9 files changed, 207 insertions(+), 27 deletions(-)
+ 10 files changed, 208 insertions(+), 27 deletions(-)
 
 diff --git a/dlls/ntdll/signal_i386.c b/dlls/ntdll/signal_i386.c
-index 5353ab4df2ce..527ba01672e1 100644
+index 5fd54071ffd..950408cbc38 100644
 --- a/dlls/ntdll/signal_i386.c
 +++ b/dlls/ntdll/signal_i386.c
-@@ -476,6 +476,9 @@ static ULONG first_ldt_entry = 32;
+@@ -449,6 +449,8 @@ static ULONG first_ldt_entry = 32;
  
  static wine_signal_handler handlers[256];
  
-+extern void DECLSPEC_NORETURN __wine_syscall_dispatcher( void );
 +extern NTSTATUS WINAPI __syscall_NtGetContextThread( HANDLE handle, CONTEXT *context );
 +
  enum i386_trap_code
  {
      TRAP_x86_UNKNOWN    = -1,  /* Unknown fault (TRAP_sig not defined) */
-@@ -1514,7 +1517,7 @@ NTSTATUS CDECL DECLSPEC_HIDDEN __regs_NtGetContextThread( DWORD edi, DWORD esi,
+@@ -1487,7 +1489,7 @@ NTSTATUS CDECL DECLSPEC_HIDDEN __regs_NtGetContextThread( DWORD edi, DWORD esi,
          {
              context->Ebp    = ebp;
              context->Esp    = (DWORD)&retaddr;
@@ -39,17 +39,8 @@ index 5353ab4df2ce..527ba01672e1 100644
              context->SegCs  = get_cs();
              context->SegSs  = get_ds();
              context->EFlags = eflags;
-@@ -2561,6 +2564,8 @@ NTSTATUS signal_alloc_thread( TEB *teb )
-     }
-     else thread_data->fs = gdt_fs_sel;
- 
-+    teb->WOW32Reserved = __wine_syscall_dispatcher;
-+
-     return STATUS_SUCCESS;
- }
- 
 diff --git a/dlls/ntdll/tests/exception.c b/dlls/ntdll/tests/exception.c
-index a5e6faa461a3..51938bf84cc1 100644
+index a5e6faa461a..51938bf84cc 100644
 --- a/dlls/ntdll/tests/exception.c
 +++ b/dlls/ntdll/tests/exception.c
 @@ -1643,6 +1643,8 @@ static void test_thread_context(void)
@@ -61,8 +52,37 @@ index a5e6faa461a3..51938bf84cc1 100644
      /* segment registers clear the high word */
      ok( context.SegCs == LOWORD(expect.SegCs), "wrong SegCs %08x/%08x\n", context.SegCs, expect.SegCs );
      ok( context.SegDs == LOWORD(expect.SegDs), "wrong SegDs %08x/%08x\n", context.SegDs, expect.SegDs );
+diff --git a/dlls/ntdll/thread.c b/dlls/ntdll/thread.c
+index bb11521cf69..edd6c4dfa99 100644
+--- a/dlls/ntdll/thread.c
++++ b/dlls/ntdll/thread.c
+@@ -212,6 +212,8 @@ void map_user_shared_data(void)
+     NtClose( section );
+ }
+ 
++extern void DECLSPEC_NORETURN __wine_syscall_dispatcher( void );
++
+ /***********************************************************************
+  *           thread_init
+  *
+@@ -248,6 +250,7 @@ TEB *thread_init(void)
+     unix_funcs->init_threading( &nb_threads, &__wine_ldt_copy );
+     unix_funcs->alloc_thread( teb );
+     unix_funcs->init_thread( teb );
++    teb->WOW32Reserved = __wine_syscall_dispatcher;
+ 
+     peb = teb->Peb;
+     peb->FastPebLock        = &peb_lock;
+@@ -493,6 +496,7 @@ NTSTATUS WINAPI RtlCreateUserThread( HANDLE process, SECURITY_DESCRIPTOR *descr,
+     teb->Tib.StackBase = stack.StackBase;
+     teb->Tib.StackLimit = stack.StackLimit;
+     teb->DeallocationStack = stack.DeallocationStack;
++    teb->WOW32Reserved = __wine_syscall_dispatcher;
+ 
+     thread_data = (struct ntdll_thread_data *)&teb->GdiTebBatch;
+     thread_data->request_fd  = request_pipe[1];
 diff --git a/include/winternl.h b/include/winternl.h
-index 0f808d71dd33..d641ed1436ad 100644
+index 44a58cadc7a..065f3d24f52 100644
 --- a/include/winternl.h
 +++ b/include/winternl.h
 @@ -359,7 +359,7 @@ typedef struct _TEB

diff --git a/patches/winebuild-Fake_Dlls/0005-winebuild-Add-stub-functions-in-fake-dlls.patch b/patches/winebuild-Fake_Dlls/0005-winebuild-Add-stub-functions-in-fake-dlls.patch
index 1575836a6..edbed0e5e 100644
--- a/patches/winebuild-Fake_Dlls/0005-winebuild-Add-stub-functions-in-fake-dlls.patch
+++ b/patches/winebuild-Fake_Dlls/0005-winebuild-Add-stub-functions-in-fake-dlls.patch
@@ -60,15 +60,15 @@ index 4e7a15970cb..ec173c94a8e 100644
      UnmapViewOfFile(ptr);
      CloseHandle(map);
      CloseHandle(file);
-diff --git a/dlls/ntdll/signal_i386.c b/dlls/ntdll/signal_i386.c
-index 04fdaf564b3..1dcc54895dc 100644
---- a/dlls/ntdll/signal_i386.c
-+++ b/dlls/ntdll/signal_i386.c
-@@ -479,6 +479,39 @@ static wine_signal_handler handlers[256];
+diff --git a/dlls/ntdll/thread.c b/dlls/ntdll/thread.c
+index edd6c4dfa99..678af513264 100644
+--- a/dlls/ntdll/thread.c
++++ b/dlls/ntdll/thread.c
+@@ -214,6 +214,39 @@ void map_user_shared_data(void)
+ 
  extern void DECLSPEC_NORETURN __wine_syscall_dispatcher( void );
- extern NTSTATUS WINAPI __syscall_NtGetContextThread( HANDLE handle, CONTEXT *context );
  
-+static void* WINAPI __wine_fakedll_dispatcher( const char *module, ULONG ord )
++static void *WINAPI __wine_fakedll_dispatcher( const char *module, ULONG ord )
 +{
 +    UNICODE_STRING name;
 +    NTSTATUS status;
@@ -101,19 +101,27 @@ index 04fdaf564b3..1dcc54895dc 100644
 +    return proc;
 +}
 +
- enum i386_trap_code
- {
-     TRAP_x86_UNKNOWN    = -1,  /* Unknown fault (TRAP_sig not defined) */
-@@ -2565,6 +2598,7 @@ NTSTATUS signal_alloc_thread( TEB *teb )
-     else thread_data->fs = gdt_fs_sel;
+ /***********************************************************************
+  *           thread_init
+  *
+@@ -251,6 +284,7 @@ TEB *thread_init(void)
+     unix_funcs->alloc_thread( teb );
+     unix_funcs->init_thread( teb );
+     teb->WOW32Reserved = __wine_syscall_dispatcher;
++    teb->Spare2 = (ULONG_PTR)__wine_fakedll_dispatcher;
  
+     peb = teb->Peb;
+     peb->FastPebLock        = &peb_lock;
+@@ -497,6 +531,7 @@ NTSTATUS WINAPI RtlCreateUserThread( HANDLE process, SECURITY_DESCRIPTOR *descr,
+     teb->Tib.StackLimit = stack.StackLimit;
+     teb->DeallocationStack = stack.DeallocationStack;
      teb->WOW32Reserved = __wine_syscall_dispatcher;
-+    teb->Spare2 = __wine_fakedll_dispatcher;
++    teb->Spare2 = (ULONG_PTR)__wine_fakedll_dispatcher;
  
-     return STATUS_SUCCESS;
- }
+     thread_data = (struct ntdll_thread_data *)&teb->GdiTebBatch;
+     thread_data->request_fd  = request_pipe[1];
 diff --git a/include/winternl.h b/include/winternl.h
-index 26ee5b601fb..03f86dae253 100644
+index 065f3d24f52..199b8fc52f2 100644
 --- a/include/winternl.h
 +++ b/include/winternl.h
 @@ -398,7 +398,7 @@ typedef struct _TEB

diff --git a/patches/winebuild-Fake_Dlls/0010-tools-winebuild-Add-syscall-thunks-for-64-bit.patch b/patches/winebuild-Fake_Dlls/0010-tools-winebuild-Add-syscall-thunks-for-64-bit.patch
index 6ea842a8f..eac187915 100644
--- a/patches/winebuild-Fake_Dlls/0010-tools-winebuild-Add-syscall-thunks-for-64-bit.patch
+++ b/patches/winebuild-Fake_Dlls/0010-tools-winebuild-Add-syscall-thunks-for-64-bit.patch
@@ -40,31 +39,11 @@ index 1f525194ce7..21af7b4ce7a 100644
          {
              todo_wine ok(0, "%s: Export is a stub-function, skipping\n", func_name);
              continue;
-diff --git a/dlls/ntdll/signal_x86_64.c b/dlls/ntdll/signal_x86_64.c
-index 5defcd6a7af..c2936045c5d 100644
---- a/dlls/ntdll/signal_x86_64.c
-+++ b/dlls/ntdll/signal_x86_64.c
-@@ -354,6 +354,7 @@ static inline void set_sigcontext( const CONTEXT *context, ucontext_t *sigcontex
- #endif
- }
- 
-+extern void DECLSPEC_NORETURN __wine_syscall_dispatcher( void );
- 
- /***********************************************************************
-  * Definitions for Win32 unwind tables
-@@ -3142,6 +3143,7 @@ void signal_init_threading(void)
-  */
- NTSTATUS signal_alloc_thread( TEB *teb )
- {
-+    teb->WOW32Reserved = __wine_syscall_dispatcher;
-     return STATUS_SUCCESS;
- }
- 
 diff --git a/dlls/ntdll/thread.c b/dlls/ntdll/thread.c
-index e5ff24f34f1..ddaf41637d0 100644
+index 678af513264..297893d8898 100644
 --- a/dlls/ntdll/thread.c
 +++ b/dlls/ntdll/thread.c
-@@ -56,6 +56,8 @@ WINE_DEFAULT_DEBUG_CHANNEL(thread);
+@@ -54,6 +54,8 @@ WINE_DEFAULT_DEBUG_CHANNEL(thread);
  
  struct _KUSER_SHARED_DATA *user_shared_data = NULL;
  
  
diff --git a/patches/ws2_32-WSACleanup/0002-ws2_32-Invalidate-client-side-file-descriptor-cache-.patch b/patches/ws2_32-WSACleanup/0002-ws2_32-Invalidate-client-side-file-descriptor-cache-.patch
index 384fc90af..8d92e3765 100644
--- a/patches/ws2_32-WSACleanup/0002-ws2_32-Invalidate-client-side-file-descriptor-cache-.patch
+++ b/patches/ws2_32-WSACleanup/0002-ws2_32-Invalidate-client-side-file-descriptor-cache-.patch
@@ -29,10 +29,10 @@ index 42532bd9f1c..ba46f170670 100644
  @ cdecl wine_server_handle_to_fd(long long ptr ptr)
  @ cdecl wine_server_release_fd(long long)
 diff --git a/dlls/ntdll/server.c b/dlls/ntdll/server.c
-index ed4e3f25531..ae1e41a485e 100644
+index c7788b99e2d..54291d0a909 100644
 --- a/dlls/ntdll/server.c
 +++ b/dlls/ntdll/server.c
-@@ -687,6 +687,14 @@ void CDECL wine_server_release_fd( HANDLE handle, int unix_fd )
+@@ -239,6 +239,14 @@ void CDECL wine_server_release_fd( HANDLE handle, int unix_fd )
      unix_funcs->server_release_fd( handle, unix_fd );
  }
  
@@ -48,22 +48,22 @@ index ed4e3f25531..ae1e41a485e 100644
  /***********************************************************************
   *           server_init_process
 diff --git a/dlls/ntdll/unix/loader.c b/dlls/ntdll/unix/loader.c
-index 4a3f101d301..8b10964603e 100644
+index aa020845bb9..0ef08edc474 100644
 --- a/dlls/ntdll/unix/loader.c
 +++ b/dlls/ntdll/unix/loader.c
-@@ -1000,6 +1000,7 @@ static struct unix_funcs unix_funcs =
-     wine_server_call,
+@@ -1014,6 +1014,7 @@ static struct unix_funcs unix_funcs =
+     server_wait,
+     server_queue_process_apc,
      server_send_fd,
-     server_remove_fd_from_cache,
 +    server_remove_fds_from_cache_by_type,
      server_get_unix_fd,
      server_fd_to_handle,
      server_handle_to_fd,
 diff --git a/dlls/ntdll/unix/server.c b/dlls/ntdll/unix/server.c
-index 8dc3f33bc80..dd2cb6cf5e2 100644
+index 8889c5d4b12..929ff354d65 100644
 --- a/dlls/ntdll/unix/server.c
 +++ b/dlls/ntdll/unix/server.c
-@@ -559,6 +559,26 @@ int CDECL server_remove_fd_from_cache( HANDLE handle )
+@@ -983,6 +983,26 @@ static int remove_fd_from_cache( HANDLE handle )
      return fd;
  }
  
@@ -91,34 +91,34 @@ index 8dc3f33bc80..dd2cb6cf5e2 100644
  /***********************************************************************
   *           server_get_unix_fd
 diff --git a/dlls/ntdll/unix/unix_private.h b/dlls/ntdll/unix/unix_private.h
-index 2bf39f85371..32c03fd8983 100644
+index 0694426dddb..5c13dce0b0a 100644
 --- a/dlls/ntdll/unix/unix_private.h
 +++ b/dlls/ntdll/unix/unix_private.h
-@@ -63,6 +63,7 @@ extern void CDECL dbg_init(void) DECLSPEC_HIDDEN;
- extern unsigned int CDECL server_call_unlocked( void *req_ptr ) DECLSPEC_HIDDEN;
+@@ -68,6 +68,7 @@ extern unsigned int CDECL server_wait( const select_op_t *select_op, data_size_t
+                                        const LARGE_INTEGER *timeout ) DECLSPEC_HIDDEN;
+ extern unsigned int CDECL server_queue_process_apc( HANDLE process, const apc_call_t *call, apc_result_t *result ) DECLSPEC_HIDDEN;
  extern void CDECL server_send_fd( int fd ) DECLSPEC_HIDDEN;
- extern int CDECL server_remove_fd_from_cache( HANDLE handle ) DECLSPEC_HIDDEN;
 +extern void CDECL server_remove_fds_from_cache_by_type( enum server_fd_type type ) DECLSPEC_HIDDEN;
  extern int CDECL server_get_unix_fd( HANDLE handle, unsigned int wanted_access, int *unix_fd,
                                       int *needs_close, enum server_fd_type *type,
                                       unsigned int *options ) DECLSPEC_HIDDEN;
 diff --git a/dlls/ntdll/unixlib.h b/dlls/ntdll/unixlib.h
-index 142e8956e7e..452c725dfde 100644
+index 323141d3840..0189c247b7a 100644
 --- a/dlls/ntdll/unixlib.h
 +++ b/dlls/ntdll/unixlib.h
-@@ -25,7 +25,7 @@
- #include "wine/debug.h"
+@@ -27,7 +27,7 @@
+ struct ldt_copy;
  
  /* increment this when you change the function table */
--#define NTDLL_UNIXLIB_VERSION 10
-+#define NTDLL_UNIXLIB_VERSION 11
+-#define NTDLL_UNIXLIB_VERSION 13
++#define NTDLL_UNIXLIB_VERSION 14
  
  struct unix_funcs
  {
-@@ -55,6 +55,7 @@ struct unix_funcs
-     unsigned int  (CDECL *server_call)( void *req_ptr );
+@@ -80,6 +80,7 @@ struct unix_funcs
+                                         const LARGE_INTEGER *timeout );
+     unsigned int  (CDECL *server_queue_process_apc)( HANDLE process, const apc_call_t *call, apc_result_t *result );
      void          (CDECL *server_send_fd)( int fd );
-     int           (CDECL *server_remove_fd_from_cache)( HANDLE handle );
 +    void          (CDECL *server_remove_fds_from_cache_by_type)( enum server_fd_type type );
      int           (CDECL *server_get_unix_fd)( HANDLE handle, unsigned int wanted_access, int *unix_fd,
                                                 int *needs_close, enum server_fd_type *type, unsigned int *options );

diff --git a/patches/eventfd_synchronization/definition b/patches/eventfd_synchronization/definition
index 9598a4c55..e21e14584 100644
--- a/patches/eventfd_synchronization/definition
+++ b/patches/eventfd_synchronization/definition
@@ -9,4 +9,6 @@ Depends: server-Realtime_Priority
 Depends: advapi32-Token_Integrity_Level
 Depends: ntdll-Junction_Points
 Depends: kernel32-K32GetPerformanceInfo
-Depends: user32-rawinput-mouse
\ No newline at end of file
+Depends: user32-rawinput-mouse
+Depends: server-Desktop_Refcount
+Disabled: true
\ No newline at end of file
diff --git a/patches/ntdll-Junction_Points/0001-ntdll-Add-support-for-junction-point-creation.patch b/patches/ntdll-Junction_Points/0001-ntdll-Add-support-for-junction-point-creation.patch
index baa163978..bf05ff102 100644
--- a/patches/ntdll-Junction_Points/0001-ntdll-Add-support-for-junction-point-creation.patch
+++ b/patches/ntdll-Junction_Points/0001-ntdll-Add-support-for-junction-point-creation.patch
@@ -72,7 +72,7 @@ index 1adc1e094ec..3e10703c5da 100644
 +    NTSTATUS status;
 +    int i;
 +
-+    if ((status = server_get_unix_fd( handle, FILE_SPECIAL_ACCESS, &dest_fd, &needs_close, NULL, NULL )))
++    if ((status = unix_funcs->server_get_unix_fd( handle, FILE_SPECIAL_ACCESS, &dest_fd, &needs_close, NULL, NULL )))
 +        return status;
 +
 +    if ((status = server_get_unix_name( handle, &unix_src )))
 
diff --git a/patches/ntdll-Junction_Points/0002-ntdll-Add-support-for-reading-junction-points.patch b/patches/ntdll-Junction_Points/0002-ntdll-Add-support-for-reading-junction-points.patch
index d4eeecb36..f8b80c693 100644
--- a/patches/ntdll-Junction_Points/0002-ntdll-Add-support-for-reading-junction-points.patch
+++ b/patches/ntdll-Junction_Points/0002-ntdll-Add-support-for-reading-junction-points.patch
@@ -35,7 +35,7 @@ index 693caecffa..b9087cbf4d 100644
 +    char *p;
 +    int i;
 +
-+    if ((status = server_get_unix_fd( handle, FILE_ANY_ACCESS, &dest_fd, &needs_close, NULL, NULL )))
++    if ((status = unix_funcs->server_get_unix_fd( handle, FILE_ANY_ACCESS, &dest_fd, &needs_close, NULL, NULL )))
 +        return status;
 +
 +    if ((status = server_get_unix_name( handle, &unix_src )))
 
diff --git a/patches/ntdll-Junction_Points/0003-ntdll-Add-support-for-deleting-junction-points.patch b/patches/ntdll-Junction_Points/0003-ntdll-Add-support-for-deleting-junction-points.patch
index 311bf5921..0ec1c91ee 100644
--- a/patches/ntdll-Junction_Points/0003-ntdll-Add-support-for-deleting-junction-points.patch
+++ b/patches/ntdll-Junction_Points/0003-ntdll-Add-support-for-deleting-junction-points.patch
@@ -31,7 +31,7 @@ index b9087cbf4d..dbbb54768b 100644
 +    NTSTATUS status;
 +    struct stat st;
 +
-+    if ((status = server_get_unix_fd( handle, FILE_SPECIAL_ACCESS, &dest_fd, &needs_close, NULL, NULL )))
++    if ((status = unix_funcs->server_get_unix_fd( handle, FILE_SPECIAL_ACCESS, &dest_fd, &needs_close, NULL, NULL )))
 +        return status;
 +
 +    if ((status = server_get_unix_name( handle, &unix_name )))
 
diff --git a/patches/ntdll-Junction_Points/0007-ntdll-Add-support-for-absolute-symlink-creation.patch b/patches/ntdll-Junction_Points/0007-ntdll-Add-support-for-absolute-symlink-creation.patch
index 9df396a71..a0e626059 100644
--- a/patches/ntdll-Junction_Points/0007-ntdll-Add-support-for-absolute-symlink-creation.patch
+++ b/patches/ntdll-Junction_Points/0007-ntdll-Add-support-for-absolute-symlink-creation.patch
@@ -48,10 +48,10 @@ index dbbb54768b..62941774ec 100644
 +        return STATUS_NOT_IMPLEMENTED;
 +    }
 +
-     if ((status = server_get_unix_fd( handle, FILE_SPECIAL_ACCESS, &dest_fd, &needs_close, NULL, NULL )))
+     if ((status = unix_funcs->server_get_unix_fd( handle, FILE_SPECIAL_ACCESS, &dest_fd, &needs_close, NULL, NULL )))
          return status;
  
-@@ -1682,6 +1698,18 @@ NTSTATUS FILE_CreateSymlink(HANDLE handle, REPARSE_DATA_BUFFER *buffer)
+@@ -1706,6 +1722,18 @@ NTSTATUS FILE_CreateSymlink(HANDLE handle, REPARSE_DATA_BUFFER *buffer)
              strcat( magic_dest, "." );
          strcat( magic_dest, "/" );
      }
 
diff --git a/patches/ntdll-Junction_Points/0014-ntdll-Correctly-report-file-symbolic-links-as-files.patch b/patches/ntdll-Junction_Points/0014-ntdll-Correctly-report-file-symbolic-links-as-files.patch
index 97cce7c05..63549fa60 100644
--- a/patches/ntdll-Junction_Points/0014-ntdll-Correctly-report-file-symbolic-links-as-files.patch
+++ b/patches/ntdll-Junction_Points/0014-ntdll-Correctly-report-file-symbolic-links-as-files.patch
@@ -73,7 +73,7 @@ index 29a928153b9..4902dff190a 100644
 -    char *p;
      int i;
  
--    if ((status = server_get_unix_fd( handle, FILE_ANY_ACCESS, &dest_fd, &needs_close, NULL, NULL )))
+-    if ((status = unix_funcs->server_get_unix_fd( handle, FILE_ANY_ACCESS, &dest_fd, &needs_close, NULL, NULL )))
 -        return status;
 -
 -    if ((status = server_get_unix_name( handle, &unix_src )))
@@ -174,7 +174,7 @@ index 29a928153b9..4902dff190a 100644
 +    ULONG flags = 0;
 +    INT prefix_len;
 +
-+    if ((status = server_get_unix_fd( handle, FILE_ANY_ACCESS, &dest_fd, &needs_close, NULL, NULL )))
++    if ((status = unix_funcs->server_get_unix_fd( handle, FILE_ANY_ACCESS, &dest_fd, &needs_close, NULL, NULL )))
 +        return status;
 +
 +    if ((status = server_get_unix_name( handle, &unix_src )))
 
diff --git a/patches/ntdll-NtQueryEaFile/0001-ntdll-Improve-stub-of-NtQueryEaFile.patch b/patches/ntdll-NtQueryEaFile/0001-ntdll-Improve-stub-of-NtQueryEaFile.patch
index a50a4bec3..5c4d4fbfd 100644
--- a/patches/ntdll-NtQueryEaFile/0001-ntdll-Improve-stub-of-NtQueryEaFile.patch
+++ b/patches/ntdll-NtQueryEaFile/0001-ntdll-Improve-stub-of-NtQueryEaFile.patch
@@ -32,7 +32,7 @@ index 2269ae311a..bed55c6fe7 100644
              ea_list_len, ea_index, restart);
 -    return STATUS_ACCESS_DENIED;
 +
-+    if ((status = server_get_unix_fd( handle, 0, &fd, &needs_close, NULL, NULL )) != STATUS_SUCCESS)
++    if ((status = unix_funcs->server_get_unix_fd( handle, 0, &fd, &needs_close, NULL, NULL )) != STATUS_SUCCESS)
 +        return status;
 +
 +    if (buffer && length)
 
diff --git a/patches/ntdll-RtlCreateUserThread/0001-ntdll-Refactor-RtlCreateUserThread-into-NtCreateThre.patch b/patches/ntdll-RtlCreateUserThread/0001-ntdll-Refactor-RtlCreateUserThread-into-NtCreateThre.patch
index 1dee3e617..568cfa9a4 100644
--- a/patches/ntdll-RtlCreateUserThread/0001-ntdll-Refactor-RtlCreateUserThread-into-NtCreateThre.patch
+++ b/patches/ntdll-RtlCreateUserThread/0001-ntdll-Refactor-RtlCreateUserThread-into-NtCreateThre.patch
@@ -114,7 +114,7 @@ index ceadcff1b2..2c4a9c4949 100644
 -    }
 +    if ((status = alloc_object_attributes( thread_attr, &objattr, &len ))) return status;
  
-     if (server_pipe( request_pipe ) == -1)
+     if (unix_funcs->server_pipe( request_pipe ) == -1)
      {
 @@ -486,7 +492,7 @@ NTSTATUS WINAPI RtlCreateUserThread( HANDLE process, SECURITY_DESCRIPTOR *descr,
      SERVER_START_REQ( new_thread )

diff --git a/patches/ntdll-WRITECOPY/0001-ntdll-Trigger-write-watches-before-passing-userdata-.patch b/patches/ntdll-WRITECOPY/0001-ntdll-Trigger-write-watches-before-passing-userdata-.patch
index cb67b6c8d..1f72cb105 100644
--- a/patches/ntdll-WRITECOPY/0001-ntdll-Trigger-write-watches-before-passing-userdata-.patch
+++ b/patches/ntdll-WRITECOPY/0001-ntdll-Trigger-write-watches-before-passing-userdata-.patch
@@ -22,28 +22,25 @@ index 381062cceb1..e7c6ca63fe2 100644
         "Access and/or AccessStatus were changed!\n");
  
 diff --git a/dlls/ntdll/server.c b/dlls/ntdll/server.c
-index 046cf601ebf..3d88b47a744 100644
+index ed4e3f25531..921dec86c82 100644
 --- a/dlls/ntdll/server.c
 +++ b/dlls/ntdll/server.c
-@@ -406,9 +406,18 @@ unsigned int server_call_unlocked( void *req_ptr )
+@@ -166,6 +166,15 @@ static DECLSPEC_NORETURN void server_protocol_perror( const char *err )
   */
  unsigned int CDECL wine_server_call( void *req_ptr )
  {
 +    struct __server_request_info * const req = req_ptr;
-     sigset_t old_set;
-     unsigned int ret;
- 
++
 +    /* trigger write watches, otherwise read() might return EFAULT */
 +    if (req->u.req.request_header.reply_size &&
 +        !virtual_check_buffer_for_write( req->reply_data, req->u.req.request_header.reply_size ))
 +    {
-+        ret = STATUS_ACCESS_VIOLATION;
-+        return ret;
++        return STATUS_ACCESS_VIOLATION;
 +    }
 +
-     pthread_sigmask( SIG_BLOCK, &server_block_set, &old_set );
-     ret = server_call_unlocked( req_ptr );
-     pthread_sigmask( SIG_SETMASK, &old_set, NULL );
+     return unix_funcs->server_call( req_ptr );
+ }
+ 
 -- 
 2.26.2
 
diff --git a/patches/ntdll-ext4-case-folder/0002-ntdll-server-Mark-drive_c-as-case-insensitive-when-c.patch b/patches/ntdll-ext4-case-folder/0002-ntdll-server-Mark-drive_c-as-case-insensitive-when-c.patch
index 78dac2080..9711a7163 100644
--- a/patches/ntdll-ext4-case-folder/0002-ntdll-server-Mark-drive_c-as-case-insensitive-when-c.patch
+++ b/patches/ntdll-ext4-case-folder/0002-ntdll-server-Mark-drive_c-as-case-insensitive-when-c.patch
@@ -1,4 +1,4 @@
-From acdd5aaf5d4f618a96f21710a8ee2f44a994194c Mon Sep 17 00:00:00 2001
+From 627618459891aa36fc9a9ac0c04b7035d2272fb1 Mon Sep 17 00:00:00 2001
 From: =?UTF-8?q?Gabriel=20Iv=C4=83ncescu?= <gabrielopcode@gmail.com>
 Date: Fri, 24 May 2019 15:09:35 +0300
 Subject: [PATCH] ntdll/server: Mark drive_c as case-insensitive when created
@@ -9,14 +9,14 @@ Content-Transfer-Encoding: 8bit
 Wine-Bug: https://bugs.winehq.org/show_bug.cgi?id=47099
 Signed-off-by: Gabriel Ivăncescu <gabrielopcode@gmail.com>
 ---
- dlls/ntdll/server.c | 45 +++++++++++++++++++++++++++++++++++++++++++++
+ dlls/ntdll/unix/server.c | 45 ++++++++++++++++++++++++++++++++++++++++
  1 file changed, 45 insertions(+)
 
-diff --git a/dlls/ntdll/server.c b/dlls/ntdll/server.c
-index bc25e242a77..f2109dd1ef0 100644
---- a/dlls/ntdll/server.c
-+++ b/dlls/ntdll/server.c
-@@ -54,6 +54,12 @@
+diff --git a/dlls/ntdll/unix/server.c b/dlls/ntdll/unix/server.c
+index 8dc3f33bc80..0e6c9d90281 100644
+--- a/dlls/ntdll/unix/server.c
++++ b/dlls/ntdll/unix/server.c
+@@ -55,6 +55,12 @@
  #ifdef HAVE_SYS_MMAN_H
  #include <sys/mman.h>
  #endif
@@ -29,7 +29,7 @@ index bc25e242a77..f2109dd1ef0 100644
  #ifdef HAVE_SYS_PRCTL_H
  # include <sys/prctl.h>
  #endif
-@@ -87,6 +93,22 @@
+@@ -93,6 +99,22 @@
  
  WINE_DEFAULT_DEBUG_CHANNEL(server);
  
@@ -49,10 +49,10 @@ index bc25e242a77..f2109dd1ef0 100644
 +
 +#endif
 +
- /* Some versions of glibc don't define this */
- #ifndef SCM_RIGHTS
- #define SCM_RIGHTS 1
-@@ -1380,6 +1402,28 @@ void init_paths(void)
+ #ifndef MSG_CMSG_CLOEXEC
+ #define MSG_CMSG_CLOEXEC 0
+ #endif
+@@ -729,6 +751,28 @@ static const char *init_server_dir( dev_t dev, ino_t ino )
  }
  
  
@@ -81,7 +81,7 @@ index bc25e242a77..f2109dd1ef0 100644
  /***********************************************************************
   *           setup_config_dir
   *
-@@ -1416,6 +1460,7 @@ static int setup_config_dir(void)
+@@ -765,6 +809,7 @@ static int setup_config_dir(void)
      if (!mkdir( "dosdevices", 0777 ))
      {
          mkdir( "drive_c", 0777 );
diff --git a/patches/patchinstall.sh b/patches/patchinstall.sh
index 8fd37ebc5..e62f11999 100755
--- a/patches/patchinstall.sh
+++ b/patches/patchinstall.sh
@@ -133,7 +133,6 @@ patch_enable_all ()
 	enable_dwrite_FontFallback="$1"
 	enable_dxdiagn_Enumerate_DirectSound="$1"
 	enable_dxdiagn_GetChildContainer_Leaf_Nodes="$1"
-	enable_eventfd_synchronization="$1"
 	enable_explorer_Video_Registry_Key="$1"
 	enable_fonts_Missing_Fonts="$1"
 	enable_fsutil_Stub_Program="$1"
@@ -238,7 +237,6 @@ patch_enable_all ()
 	enable_server_PeekMessage="$1"
 	enable_server_Realtime_Priority="$1"
 	enable_server_Registry_Notifications="$1"
-	enable_server_Shared_Memory="$1"
 	enable_server_Signal_Thread="$1"
 	enable_server_Stored_ACLs="$1"
 	enable_setupapi_DiskSpaceList="$1"
@@ -502,9 +500,6 @@ patch_enable ()
 		dxva2-Video_Decoder)
 			enable_dxva2_Video_Decoder="$2"
 			;;
-		eventfd_synchronization)
-			enable_eventfd_synchronization="$2"
-			;;
 		explorer-Video_Registry_Key)
 			enable_explorer_Video_Registry_Key="$2"
 			;;
@@ -817,9 +812,6 @@ patch_enable ()
 		server-Registry_Notifications)
 			enable_server_Registry_Notifications="$2"
 			;;
-		server-Shared_Memory)
-			enable_server_Shared_Memory="$2"
-			;;
 		server-Signal_Thread)
 			enable_server_Signal_Thread="$2"
 			;;
@@ -1599,11 +1613,11 @@ if test "$enable_shell32_Progress_Dialog" -eq 1; then
 	enable_shell32_SHFileOperation_Move=1
 fi
 
-if test "$enable_server_Object_Types" -eq 1; then
-	if test "$enable_server_Shared_Memory" -gt 1; then
-		abort "Patchset server-Shared_Memory disabled, but server-Object_Types depends on that."
+if test "$enable_server_Realtime_Priority" -eq 1; then
+	if test "$enable_ntdll_ThreadTime" -gt 1; then
+		abort "Patchset ntdll-ThreadTime disabled, but server-Realtime_Priority depends on that."
 	fi
-	enable_server_Shared_Memory=1
+	enable_ntdll_ThreadTime=1
 fi
 
 if test "$enable_server_Inherited_ACLs" -eq 1; then
@@ -1625,13 +1639,9 @@ if test "$enable_server_Stored_ACLs" -eq 1; then
 fi
 
 if test "$enable_server_Desktop_Refcount" -eq 1; then
-	if test "$enable_eventfd_synchronization" -gt 1; then
-		abort "Patchset eventfd_synchronization disabled, but server-Desktop_Refcount depends on that."
-	fi
 	if test "$enable_ws2_32_WSACleanup" -gt 1; then
 		abort "Patchset ws2_32-WSACleanup disabled, but server-Desktop_Refcount depends on that."
 	fi
-	enable_eventfd_synchronization=1
 	enable_ws2_32_WSACleanup=1
 fi
 
@@ -1670,6 +1680,13 @@ if test "$enable_ntdll_Syscall_Emulation" -eq 1; then
 	enable_winebuild_Fake_Dlls=1
 fi
 
+if test "$enable_ntdll_RtlCreateUserThread" -eq 1; then
+	if test "$enable_winebuild_Fake_Dlls" -gt 1; then
+		abort "Patchset winebuild-Fake_Dlls disabled, but ntdll-RtlCreateUserThread depends on that."
+	fi
+	enable_winebuild_Fake_Dlls=1
+fi
+
 if test "$enable_ntdll_NtQueryVirtualMemory" -eq 1; then
 	if test "$enable_ntdll_NtDevicePath" -gt 1; then
 		abort "Patchset ntdll-NtDevicePath disabled, but ntdll-NtQueryVirtualMemory depends on that."
@@ -1758,71 +1758,6 @@ if test "$enable_server_File_Permissions" -eq 1; then
 	enable_ntdll_Junction_Points=1
 fi
 
-if test "$enable_eventfd_synchronization" -eq 1; then
-	if test "$enable_advapi32_Token_Integrity_Level" -gt 1; then
-		abort "Patchset advapi32-Token_Integrity_Level disabled, but eventfd_synchronization depends on that."
-	fi
-	if test "$enable_kernel32_K32GetPerformanceInfo" -gt 1; then
-		abort "Patchset kernel32-K32GetPerformanceInfo disabled, but eventfd_synchronization depends on that."
-	fi
-	if test "$enable_ntdll_Junction_Points" -gt 1; then
-		abort "Patchset ntdll-Junction_Points disabled, but eventfd_synchronization depends on that."
-	fi
-	if test "$enable_ntdll_RtlCreateUserThread" -gt 1; then
-		abort "Patchset ntdll-RtlCreateUserThread disabled, but eventfd_synchronization depends on that."
-	fi
-	if test "$enable_server_Realtime_Priority" -gt 1; then
-		abort "Patchset server-Realtime_Priority disabled, but eventfd_synchronization depends on that."
-	fi
-	if test "$enable_server_Shared_Memory" -gt 1; then
-		abort "Patchset server-Shared_Memory disabled, but eventfd_synchronization depends on that."
-	fi
-	if test "$enable_ws2_32_WSACleanup" -gt 1; then
-		abort "Patchset ws2_32-WSACleanup disabled, but eventfd_synchronization depends on that."
-	fi
-	enable_advapi32_Token_Integrity_Level=1
-	enable_kernel32_K32GetPerformanceInfo=1
-	enable_ntdll_Junction_Points=1
-	enable_ntdll_RtlCreateUserThread=1
-	enable_ntdll_SystemRoot_Symlink=1
-	enable_server_Realtime_Priority=1
-	enable_server_Shared_Memory=1
-	enable_ws2_32_WSACleanup=1
-fi
-
-if test "$enable_server_Shared_Memory" -eq 1; then
-	if test "$enable_ntdll_Threading" -gt 1; then
-		abort "Patchset ntdll-Threading disabled, but server-Shared_Memory depends on that."
-	fi
-	if test "$enable_ntdll_ext4_case_folder" -gt 1; then
-		abort "Patchset ntdll-ext4-case-folder disabled, but server-Shared_Memory depends on that."
-	fi
-	if test "$enable_server_PeekMessage" -gt 1; then
-		abort "Patchset server-PeekMessage disabled, but server-Shared_Memory depends on that."
-	fi
-	if test "$enable_server_Signal_Thread" -gt 1; then
-		abort "Patchset server-Signal_Thread disabled, but server-Shared_Memory depends on that."
-	fi
-	enable_ntdll_Threading=1
-	enable_ntdll_ext4_case_folder=1
-	enable_server_PeekMessage=1
-	enable_server_Signal_Thread=1
-fi
-
-if test "$enable_server_Realtime_Priority" -eq 1; then
-	if test "$enable_ntdll_ThreadTime" -gt 1; then
-		abort "Patchset ntdll-ThreadTime disabled, but server-Realtime_Priority depends on that."
-	fi
-	enable_ntdll_ThreadTime=1
-fi
-
-if test "$enable_ntdll_RtlCreateUserThread" -eq 1; then
-	if test "$enable_winebuild_Fake_Dlls" -gt 1; then
-		abort "Patchset winebuild-Fake_Dlls disabled, but ntdll-RtlCreateUserThread depends on that."
-	fi
-	enable_winebuild_Fake_Dlls=1
-fi
-
 if test "$enable_dxdiagn_GetChildContainer_Leaf_Nodes" -eq 1; then
 	if test "$enable_dxdiagn_Enumerate_DirectSound" -gt 1; then
 		abort "Patchset dxdiagn-Enumerate_DirectSound disabled, but dxdiagn-GetChildContainer_Leaf_Nodes depends on that."
@@ -3132,603 +3047,91 @@ if test "$enable_dxva2_Video_Decoder" -eq 1; then
 	) >> "$patchlist"
 fi
 
-# Patchset kernel32-K32GetPerformanceInfo
+# Patchset explorer-Video_Registry_Key
 # |
 # | Modified files:
-# |   *	dlls/kernelbase/debug.c, server/process.c, server/protocol.def
+# |   *	dlls/advapi32/tests/registry.c, programs/explorer/desktop.c
 # |
-if test "$enable_kernel32_K32GetPerformanceInfo" -eq 1; then
-	patch_apply kernel32-K32GetPerformanceInfo/0001-kernel32-Make-K32GetPerformanceInfo-faster.patch
+if test "$enable_explorer_Video_Registry_Key" -eq 1; then
+	patch_apply explorer-Video_Registry_Key/0001-explorer-Create-CurrentControlSet-Control-Video-regi.patch
 	(
-		printf '%s\n' '+    { "Michael Müller", "kernel32: Make K32GetPerformanceInfo faster.", 1 },';
+		printf '%s\n' '+    { "Michael Müller", "explorer: Create CurrentControlSet\\Control\\Video registry key as non-volatile.", 1 },';
 	) >> "$patchlist"
 fi
 
-# Patchset ntdll-Junction_Points
+# Patchset fonts-Missing_Fonts
 # |
 # | This patchset fixes the following Wine bugs:
-# |   *	[#12401] NET Framework 2.0, 3.0, 4.0 installers and other apps that make use of GAC API for managed assembly
-# | 	installation on NTFS filesystems need reparse point/junction API support
-# | 	(FSCTL_SET_REPARSE_POINT/FSCTL_GET_REPARSE_POINT)
-# |   *	[#44948] Multiple apps (Spine (Mod starter for Gothic), MS Office 365 installer) need CreateSymbolicLinkW implementation
+# |   *	[#32323] Implement an Arial replacement font
+# |   *	[#32342] Implement a Times New Roman replacement font
+# |   *	[#20456] Implement a Courier New replacement font
+# |   *	[#13829] Implement a Microsoft Yahei replacement font
 # |
 # | Modified files:
-# |   *	configure.ac, dlls/kernel32/path.c, dlls/ntdll/directory.c, dlls/ntdll/file.c, dlls/ntdll/tests/file.c,
-# | 	include/Makefile.in, include/ntifs.h, include/wine/port.h, include/winternl.h, libs/port/Makefile.in,
-# | 	libs/port/renameat2.c, server/fd.c
+# |   *	COPYING.arial, COPYING.cour, COPYING.msyh, COPYING.times, LICENSE, fonts/Makefile.in, fonts/arial.sfd, fonts/arial.ttf,
+# | 	fonts/cour.sfd, fonts/cour.ttf, fonts/msyh.sfd, fonts/msyh.ttf, fonts/times.sfd, fonts/times.ttf
 # |
-if test "$enable_ntdll_Junction_Points" -eq 1; then
-	patch_apply ntdll-Junction_Points/0001-ntdll-Add-support-for-junction-point-creation.patch
-	patch_apply ntdll-Junction_Points/0002-ntdll-Add-support-for-reading-junction-points.patch
-	patch_apply ntdll-Junction_Points/0003-ntdll-Add-support-for-deleting-junction-points.patch
-	patch_apply ntdll-Junction_Points/0004-ntdll-Add-a-test-for-junction-point-advertisement.patch
-	patch_apply ntdll-Junction_Points/0005-kernel32-ntdll-Add-support-for-deleting-junction-poi.patch
-	patch_apply ntdll-Junction_Points/0007-ntdll-Add-support-for-absolute-symlink-creation.patch
-	patch_apply ntdll-Junction_Points/0008-ntdll-Add-support-for-reading-absolute-symlinks.patch
-	patch_apply ntdll-Junction_Points/0009-ntdll-Add-support-for-deleting-symlinks.patch
-	patch_apply ntdll-Junction_Points/0010-ntdll-Add-support-for-relative-symlink-creation.patch
-	patch_apply ntdll-Junction_Points/0011-ntdll-Add-support-for-reading-relative-symlinks.patch
-	patch_apply ntdll-Junction_Points/0012-ntdll-Add-support-for-file-symlinks.patch
-	patch_apply ntdll-Junction_Points/0013-ntdll-Allow-creation-of-dangling-reparse-points-to-n.patch
-	patch_apply ntdll-Junction_Points/0014-ntdll-Correctly-report-file-symbolic-links-as-files.patch
-	patch_apply ntdll-Junction_Points/0015-kernel32-Set-error-code-when-attempting-to-delete-fi.patch
-	patch_apply ntdll-Junction_Points/0016-server-Properly-handle-file-symlink-deletion.patch
-	patch_apply ntdll-Junction_Points/0017-ntdll-Always-report-symbolic-links-as-containing-zer.patch
-	patch_apply ntdll-Junction_Points/0018-ntdll-Find-dangling-symlinks-quickly.patch
+if test "$enable_fonts_Missing_Fonts" -eq 1; then
+	patch_apply fonts-Missing_Fonts/0001-fonts-Add-Liberation-Sans-as-an-Arial-replacement.patch
+	patch_apply fonts-Missing_Fonts/0002-fonts-Add-Liberation-Serif-as-an-Times-New-Roman-rep.patch
+	patch_apply fonts-Missing_Fonts/0003-fonts-Add-Liberation-Mono-as-an-Courier-New-replacem.patch
+	patch_apply fonts-Missing_Fonts/0004-fonts-Add-WenQuanYi-Micro-Hei-as-a-Microsoft-Yahei-r.patch
+	patch_apply fonts-Missing_Fonts/0005-Add-licenses-for-fonts-as-separate-files.patch
 	(
-		printf '%s\n' '+    { "Erich E. Hoover", "ntdll: Add support for junction point creation.", 1 },';
-		printf '%s\n' '+    { "Erich E. Hoover", "ntdll: Add support for reading junction points.", 1 },';
-		printf '%s\n' '+    { "Erich E. Hoover", "ntdll: Add support for deleting junction points.", 1 },';
-		printf '%s\n' '+    { "Erich E. Hoover", "ntdll: Add a test for junction point advertisement.", 1 },';
-		printf '%s\n' '+    { "Erich E. Hoover", "kernel32,ntdll: Add support for deleting junction points with RemoveDirectory.", 1 },';
-		printf '%s\n' '+    { "Erich E. Hoover", "ntdll: Add support for absolute symlink creation.", 1 },';
-		printf '%s\n' '+    { "Erich E. Hoover", "ntdll: Add support for reading absolute symlinks.", 1 },';
-		printf '%s\n' '+    { "Erich E. Hoover", "ntdll: Add support for deleting symlinks.", 1 },';
-		printf '%s\n' '+    { "Erich E. Hoover", "ntdll: Add support for relative symlink creation.", 1 },';
-		printf '%s\n' '+    { "Erich E. Hoover", "ntdll: Add support for reading relative symlinks.", 1 },';
-		printf '%s\n' '+    { "Erich E. Hoover", "ntdll: Add support for file symlinks.", 1 },';
-		printf '%s\n' '+    { "Erich E. Hoover", "ntdll: Allow creation of dangling reparse points to non-existent paths.", 1 },';
-		printf '%s\n' '+    { "Erich E. Hoover", "ntdll: Correctly report file symbolic links as files.", 1 },';
-		printf '%s\n' '+    { "Erich E. Hoover", "kernel32: Set error code when attempting to delete file symlinks as directories.", 1 },';
-		printf '%s\n' '+    { "Erich E. Hoover", "server: Properly handle file symlink deletion.", 1 },';
-		printf '%s\n' '+    { "Erich E. Hoover", "ntdll: Always report symbolic links as containing zero bytes.", 1 },';
-		printf '%s\n' '+    { "Erich E. Hoover", "ntdll: Find dangling symlinks quickly.", 1 },';
+		printf '%s\n' '+    { "Torsten Kurbad", "fonts: Add Liberation Sans as an Arial replacement.", 2 },';
+		printf '%s\n' '+    { "Sebastian Lackner", "fonts: Add Liberation Serif as an Times New Roman replacement.", 1 },';
+		printf '%s\n' '+    { "Sebastian Lackner", "fonts: Add Liberation Mono as an Courier New replacement.", 1 },';
+		printf '%s\n' '+    { "Erich E. Hoover", "fonts: Add WenQuanYi Micro Hei as a Microsoft Yahei replacement.", 1 },';
+		printf '%s\n' '+    { "Michael Müller", "Add licenses for fonts as separate files.", 1 },';
 	) >> "$patchlist"
 fi
 
-# Patchset winebuild-Fake_Dlls
+# Patchset fsutil-Stub_Program
 # |
 # | This patchset fixes the following Wine bugs:
-# |   *	[#21232] Chromium-based browser engines (Chrome, Opera, Comodo Dragon, SRWare Iron) crash on startup unless '--no-
-# | 	sandbox' is used (native API sandboxing/hooking scheme incompatible with Wine)
-# |   *	[#42741] StarCraft I: 1.18 PTR fails to initialize ClientSdk.dll
-# |   *	[#45349] Multiple applications and games crash due to missing support for 64-bit syscall thunks (StreetFighter V)
-# |   *	[#45573] League of Legends 8.12+ fails to start a game (anticheat engine, hooking of syscall return instructions)
-# |   *	[#45650] chromium 32-bit sandbox expects different syscall thunks depending on Windows version
+# |   *	[#22749] Add stub for fsutil.exe hardlink command
 # |
 # | Modified files:
-# |   *	dlls/dbghelp/cpu_i386.c, dlls/kernel32/tests/loader.c, dlls/krnl386.exe16/kernel.c,
-# | 	dlls/krnl386.exe16/kernel16_private.h, dlls/krnl386.exe16/ne_module.c, dlls/krnl386.exe16/ne_segment.c,
-# | 	dlls/krnl386.exe16/task.c, dlls/krnl386.exe16/thunk.c, dlls/krnl386.exe16/wowthunk.c, dlls/ntdll/actctx.c,
-# | 	dlls/ntdll/directory.c, dlls/ntdll/loader.c, dlls/ntdll/locale.c, dlls/ntdll/ntdll_misc.h, dlls/ntdll/path.c,
-# | 	dlls/ntdll/process.c, dlls/ntdll/signal_i386.c, dlls/ntdll/signal_x86_64.c, dlls/ntdll/tests/exception.c,
-# | 	dlls/ntdll/thread.c, dlls/system.drv16/system.c, dlls/toolhelp.dll16/toolhelp.c, dlls/user.exe16/message.c,
-# | 	dlls/user.exe16/user.c, dlls/user.exe16/window.c, include/winternl.h, libs/wine/loader.c, tools/winebuild/build.h,
-# | 	tools/winebuild/import.c, tools/winebuild/parser.c, tools/winebuild/relay.c, tools/winebuild/res32.c,
-# | 	tools/winebuild/spec16.c, tools/winebuild/spec32.c, tools/winebuild/utils.c
+# |   *	programs/fsutil/Makefile.in, programs/fsutil/fsutil.rc, programs/fsutil/main.c, programs/fsutil/resources.h
 # |
-if test "$enable_winebuild_Fake_Dlls" -eq 1; then
-	patch_apply winebuild-Fake_Dlls/0001-kernel32-tests-Add-basic-tests-for-fake-dlls.patch
-	patch_apply winebuild-Fake_Dlls/0002-krnl386.exe16-Do-not-abuse-WOW32Reserved-field-for-1.patch
-	patch_apply winebuild-Fake_Dlls/0003-winebuild-Generate-syscall-thunks-for-ntdll-exports.patch
-	patch_apply winebuild-Fake_Dlls/0004-winebuild-Use-multipass-label-system-to-generate-fak.patch
-	patch_apply winebuild-Fake_Dlls/0005-winebuild-Add-stub-functions-in-fake-dlls.patch
-	patch_apply winebuild-Fake_Dlls/0006-winebuild-Add-syscall-thunks-in-fake-dlls.patch
-	patch_apply winebuild-Fake_Dlls/0007-winebuild-Fix-size-of-relocation-information-in-fake.patch
-	patch_apply winebuild-Fake_Dlls/0008-winebuild-Try-to-make-sure-RVA-matches-between-fake-.patch
-	patch_apply winebuild-Fake_Dlls/0009-libs-wine-Use-same-file-alignment-for-fake-and-built.patch
-	patch_apply winebuild-Fake_Dlls/0010-tools-winebuild-Add-syscall-thunks-for-64-bit.patch
-	patch_apply winebuild-Fake_Dlls/0011-ntdll-Call-NtOpenFile-through-syscall-thunk.patch
+if test "$enable_fsutil_Stub_Program" -eq 1; then
+	patch_apply fsutil-Stub_Program/0001-fsutil-Add-fsutil-program-with-support-for-creating-.patch
 	(
-		printf '%s\n' '+    { "Michael Müller", "kernel32/tests: Add basic tests for fake dlls.", 1 },';
-		printf '%s\n' '+    { "Sebastian Lackner", "krnl386.exe16: Do not abuse WOW32Reserved field for 16-bit stack address.", 1 },';
-		printf '%s\n' '+    { "Michael Müller", "winebuild: Generate syscall thunks for ntdll exports.", 1 },';
-		printf '%s\n' '+    { "Michael Müller", "winebuild: Use multipass label system to generate fake dlls.", 1 },';
-		printf '%s\n' '+    { "Michael Müller", "winebuild: Add stub functions in fake dlls.", 1 },';
-		printf '%s\n' '+    { "Michael Müller", "winebuild: Add syscall thunks in fake dlls.", 1 },';
-		printf '%s\n' '+    { "Michael Müller", "winebuild: Fix size of relocation information in fake dlls.", 1 },';
-		printf '%s\n' '+    { "Michael Müller", "winebuild: Try to make sure RVA matches between fake and builtin DLLs.", 1 },';
-		printf '%s\n' '+    { "Michael Müller", "libs/wine: Use same file alignment for fake and builtin DLLs.", 1 },';
-		printf '%s\n' '+    { "Michael Müller", "tools/winebuild: Add syscall thunks for 64 bit.", 1 },';
-		printf '%s\n' '+    { "Paul Gofman", "ntdll: Call NtOpenFile through syscall thunk.", 1 },';
+		printf '%s\n' '+    { "Michael Müller", "fsutil: Add fsutil program with support for creating hard links.", 1 },';
 	) >> "$patchlist"
 fi
 
-# Patchset ntdll-RtlCreateUserThread
-# |
-# | This patchset has the following (direct or indirect) dependencies:
-# |   *	winebuild-Fake_Dlls
-# |
-# | This patchset fixes the following Wine bugs:
-# |   *	[#45571] League of Legends 8.12+ fails to start a game (anticheat engine, hooking of NtCreateThread/Ex)
+# Patchset gdi32-Lazy_Font_Initialization
 # |
 # | Modified files:
-# |   *	dlls/ntdll/ntdll.spec, dlls/ntdll/thread.c, include/winternl.h
+# |   *	dlls/gdi32/dc.c, dlls/gdi32/freetype.c
 # |
-if test "$enable_ntdll_RtlCreateUserThread" -eq 1; then
-	patch_apply ntdll-RtlCreateUserThread/0001-ntdll-Refactor-RtlCreateUserThread-into-NtCreateThre.patch
+if test "$enable_gdi32_Lazy_Font_Initialization" -eq 1; then
+	patch_apply gdi32-Lazy_Font_Initialization/0001-gdi32-Perform-lazy-initialization-of-fonts-to-improv.patch
 	(
-		printf '%s\n' '+    { "Andrew Wesie", "ntdll: Refactor RtlCreateUserThread into NtCreateThreadEx.", 1 },';
+		printf '%s\n' '+    { "Sebastian Lackner", "gdi32: Perform lazy initialization of fonts to improve startup performance.", 1 },';
 	) >> "$patchlist"
 fi
 
-# Patchset ntdll-SystemRoot_Symlink
+# Patchset gdi32-rotation
+# |
+# | This patchset fixes the following Wine bugs:
+# |   *	[#34579] gdi32: fix for rotated Arc, ArcTo, Chord and Pie drawing problem
+# |   *	[#35331] gdi32: fix for rotated ellipse
 # |
 # | Modified files:
-# |   *	dlls/ntdll/om.c
+# |   *	dlls/gdi32/dibdrv/graphics.c, dlls/gdi32/gdi_private.h
 # |
-if test "$enable_ntdll_SystemRoot_Symlink" -eq 1; then
-	patch_apply ntdll-SystemRoot_Symlink/0001-ntdll-Add-special-handling-for-SystemRoot-to-satisfy.patch
+if test "$enable_gdi32_rotation" -eq 1; then
+	patch_apply gdi32-rotation/0001-gdi32-fix-for-rotated-Arc-ArcTo-Chord-and-Pie-drawin.patch
+	patch_apply gdi32-rotation/0002-gdi32-fix-for-rotated-ellipse.patch
 	(
-		printf '%s\n' '+    { "Sebastian Lackner", "ntdll: Add special handling for \\SystemRoot to satisfy MSYS2 case-insensitive system check.", 1 },';
+		printf '%s\n' '+    { "Daniel Wendt", "gdi32: Fix for rotated Arc, ArcTo, Chord and Pie drawing problem.", 1 },';
+		printf '%s\n' '+    { "Daniel Wendt", "gdi32: Fix for rotated ellipse.", 1 },';
 	) >> "$patchlist"
 fi
 
-# Patchset ntdll-ThreadTime
-# |
-# | This patchset fixes the following Wine bugs:
-# |   *	[#20230] Return correct values for GetThreadTimes function
-# |
-# | Modified files:
-# |   *	dlls/ntdll/nt.c, dlls/ntdll/ntdll_misc.h, dlls/ntdll/process.c, dlls/ntdll/thread.c, server/protocol.def,
-# | 	server/snapshot.c, server/thread.c, server/thread.h
-# |
-if test "$enable_ntdll_ThreadTime" -eq 1; then
-	patch_apply ntdll-ThreadTime/0001-ntdll-Return-correct-values-in-GetThreadTimes-for-al.patch
-	patch_apply ntdll-ThreadTime/0002-ntdll-Set-correct-thread-creation-time-for-SystemPro.patch
-	patch_apply ntdll-ThreadTime/0003-ntdll-Fill-process-kernel-and-user-time.patch
-	patch_apply ntdll-ThreadTime/0004-ntdll-Set-process-start-time.patch
-	patch_apply ntdll-ThreadTime/0005-ntdll-Fill-out-thread-times-in-process-enumeration.patch
-	patch_apply ntdll-ThreadTime/0006-ntdll-Fill-process-virtual-memory-counters-in-NtQuer.patch
-	(
-		printf '%s\n' '+    { "Sebastian Lackner", "ntdll: Return correct values in GetThreadTimes() for all threads.", 1 },';
-		printf '%s\n' '+    { "Michael Müller", "ntdll: Set correct thread creation time for SystemProcessInformation in NtQuerySystemInformation.", 1 },';
-		printf '%s\n' '+    { "Michael Müller", "ntdll: Fill process kernel and user time.", 1 },';
-		printf '%s\n' '+    { "Michael Müller", "ntdll: Set process start time.", 1 },';
-		printf '%s\n' '+    { "Michael Müller", "ntdll: Fill out thread times in process enumeration.", 1 },';
-		printf '%s\n' '+    { "Michael Müller", "ntdll: Fill process virtual memory counters in NtQuerySystemInformation.", 1 },';
-	) >> "$patchlist"
-fi
-
-# Patchset server-Realtime_Priority
-# |
-# | This patchset has the following (direct or indirect) dependencies:
-# |   *	ntdll-ThreadTime
-# |
-# | Modified files:
-# |   *	server/Makefile.in, server/main.c, server/scheduler.c, server/thread.c, server/thread.h
-# |
-if test "$enable_server_Realtime_Priority" -eq 1; then
-	patch_apply server-Realtime_Priority/0001-wineserver-Draft-to-implement-priority-levels-throug.patch
-	(
-		printf '%s\n' '+    { "Joakim Hernberg", "wineserver: Draft to implement priority levels through POSIX scheduling policies on linux.", 1 },';
-	) >> "$patchlist"
-fi
-
-# Patchset ntdll-Threading
-# |
-# | Modified files:
-# |   *	dlls/ntdll/thread.c
-# |
-if test "$enable_ntdll_Threading" -eq 1; then
-	patch_apply ntdll-Threading/0001-ntdll-Fix-race-condition-when-threads-are-killed-dur.patch
-	(
-		printf '%s\n' '+    { "Sebastian Lackner", "ntdll: Fix race-condition when threads are killed during shutdown.", 1 },';
-	) >> "$patchlist"
-fi
-
-# Patchset ntdll-ext4-case-folder
-# |
-# | This patchset fixes the following Wine bugs:
-# |   *	[#47099] Support for EXT4 case folding per directory.
-# |
-# | Modified files:
-# |   *	dlls/ntdll/server.c
-# |
-if test "$enable_ntdll_ext4_case_folder" -eq 1; then
-	patch_apply ntdll-ext4-case-folder/0002-ntdll-server-Mark-drive_c-as-case-insensitive-when-c.patch
-	(
-		printf '%s\n' '+    { "Gabriel Ivăncescu", "ntdll/server: Mark drive_c as case-insensitive when created.", 1 },';
-	) >> "$patchlist"
-fi
-
-# Patchset server-PeekMessage
-# |
-# | This patchset fixes the following Wine bugs:
-# |   *	[#28884] GetMessage should remove already seen messages with higher priority
-# |
-# | Modified files:
-# |   *	dlls/user32/tests/msg.c, server/queue.c
-# |
-if test "$enable_server_PeekMessage" -eq 1; then
-	patch_apply server-PeekMessage/0001-server-Fix-handling-of-GetMessage-after-previous-Pee.patch
-	(
-		printf '%s\n' '+    { "Sebastian Lackner", "server: Fix handling of GetMessage after previous PeekMessage call.", 3 },';
-	) >> "$patchlist"
-fi
-
-# Patchset server-Signal_Thread
-# |
-# | Modified files:
-# |   *	server/thread.c, server/thread.h
-# |
-if test "$enable_server_Signal_Thread" -eq 1; then
-	patch_apply server-Signal_Thread/0001-server-Do-not-signal-thread-until-it-is-really-gone.patch
-	(
-		printf '%s\n' '+    { "Sebastian Lackner", "server: Do not signal violently terminated threads until they are really gone.", 1 },';
-	) >> "$patchlist"
-fi
-
-# Patchset loader-KeyboardLayouts
-# |
-# | This patchset fixes the following Wine bugs:
-# |   *	[#47439] loader: Add Keyboard Layouts registry enteries.
-# |
-# | Modified files:
-# |   *	dlls/user32/driver.c, dlls/user32/tests/input.c, loader/wine.inf.in
-# |
-if test "$enable_loader_KeyboardLayouts" -eq 1; then
-	patch_apply loader-KeyboardLayouts/0001-loader-Add-Keyboard-Layouts-registry-enteries.patch
-	patch_apply loader-KeyboardLayouts/0002-user32-Improve-GetKeyboardLayoutList.patch
-	(
-		printf '%s\n' '+    { "Alistair Leslie-Hughes", "loader: Add Keyboard Layouts registry enteries.", 1 },';
-		printf '%s\n' '+    { "Alistair Leslie-Hughes", "user32: Improve GetKeyboardLayoutList.", 1 },';
-	) >> "$patchlist"
-fi
-
-# Patchset server-Shared_Memory
-# |
-# | This patchset has the following (direct or indirect) dependencies:
-# |   *	ntdll-Threading, ntdll-ext4-case-folder, server-PeekMessage, server-Signal_Thread, loader-
-# | 	KeyboardLayouts
-# |
-# | Modified files:
-# |   *	dlls/ntdll/ntdll_misc.h, dlls/ntdll/server.c, dlls/ntdll/thread.c, dlls/ntdll/virtual.c, dlls/user32/focus.c,
-# | 	dlls/user32/input.c, dlls/user32/message.c, dlls/user32/user_private.h, include/wine/server.h, include/winternl.h,
-# | 	server/fd.c, server/file.h, server/main.c, server/mapping.c, server/protocol.def, server/queue.c, server/thread.c,
-# | 	server/thread.h
-# |
-if test "$enable_server_Shared_Memory" -eq 1; then
-	patch_apply server-Shared_Memory/0001-ntdll-Implement-virtual_map_shared_memory.patch
-	patch_apply server-Shared_Memory/0002-server-Implement-support-for-global-and-local-shared.patch
-	patch_apply server-Shared_Memory/0003-user32-Get-rid-of-wineserver-call-for-GetInputState.patch
-	patch_apply server-Shared_Memory/0004-user32-Avoid-unnecessary-wineserver-calls-in-PeekMes.patch
-	patch_apply server-Shared_Memory/0005-user32-Get-rid-of-wineserver-call-for-GetLastInputIn.patch
-	patch_apply server-Shared_Memory/0006-ntdll-Only-enable-wineserver-shared-memory-communica.patch
-	patch_apply server-Shared_Memory/0007-server-Store-a-list-of-associated-queues-for-each-th.patch
-	patch_apply server-Shared_Memory/0008-user32-Get-rid-of-wineserver-call-for-GetActiveWindo.patch
-	(
-		printf '%s\n' '+    { "Sebastian Lackner", "ntdll: Implement virtual_map_shared_memory.", 1 },';
-		printf '%s\n' '+    { "Michael Müller", "server: Implement support for global and local shared memory blocks based on memfd.", 1 },';
-		printf '%s\n' '+    { "Sebastian Lackner", "user32: Get rid of wineserver call for GetInputState.", 1 },';
-		printf '%s\n' '+    { "Sebastian Lackner", "user32: Avoid unnecessary wineserver calls in PeekMessage/GetMessage.", 1 },';
-		printf '%s\n' '+    { "Michael Müller", "user32: Get rid of wineserver call for GetLastInputInfo.", 1 },';
-		printf '%s\n' '+    { "Sebastian Lackner", "ntdll: Only enable wineserver shared memory communication when a special environment variable is set.", 1 },';
-		printf '%s\n' '+    { "Sebastian Lackner", "server: Store a list of associated queues for each thread input.", 1 },';
-		printf '%s\n' '+    { "Sebastian Lackner", "user32: Get rid of wineserver call for GetActiveWindow, GetFocus, GetCapture.", 1 },';
-	) >> "$patchlist"
-fi
-
-# Patchset ws2_32-WSACleanup
-# |
-# | This patchset fixes the following Wine bugs:
-# |   *	[#18670] Properly close sockets when WSACleanup is called
-# |
-# | Modified files:
-# |   *	dlls/ntdll/ntdll.spec, dlls/ntdll/server.c, dlls/ws2_32/socket.c, dlls/ws2_32/tests/sock.c, include/wine/server.h,
-# | 	server/protocol.def, server/sock.c
-# |
-if test "$enable_ws2_32_WSACleanup" -eq 1; then
-	patch_apply ws2_32-WSACleanup/0001-ws2_32-Proper-WSACleanup-implementation-using-winese.patch
-	patch_apply ws2_32-WSACleanup/0002-ws2_32-Invalidate-client-side-file-descriptor-cache-.patch
-	(
-		printf '%s\n' '+    { "Matt Durgavich", "ws2_32: Proper WSACleanup implementation using wineserver function.", 2 },';
-		printf '%s\n' '+    { "Sebastian Lackner", "ws2_32: Invalidate client-side file descriptor cache in WSACleanup.", 1 },';
-	) >> "$patchlist"
-fi
-
-# Patchset eventfd_synchronization
-# |
-# | This patchset has the following (direct or indirect) dependencies:
-# |   *	Staging, advapi32-CreateRestrictedToken, advapi32-Token_Integrity_Level, kernel32-K32GetPerformanceInfo, ntdll-
-# | 	Junction_Points, winebuild-Fake_Dlls, ntdll-RtlCreateUserThread, ntdll-SystemRoot_Symlink, ntdll-ThreadTime, server-
-# | 	Realtime_Priority, ntdll-Threading, ntdll-ext4-case-folder, server-PeekMessage, server-Signal_Thread,
-# | 	loader-KeyboardLayouts, server-Shared_Memory, ws2_32-WSACleanup
-# |
-# | This patchset fixes the following Wine bugs:
-# |   *	[#36692] Many multi-threaded applications have poor performance due to heavy use of synchronization primitives
-# |
-# | Modified files:
-# |   *	README.esync, configure.ac, dlls/kernel32/tests/sync.c, dlls/ntdll/Makefile.in, dlls/ntdll/critsection.c,
-# | 	dlls/ntdll/esync.c, dlls/ntdll/esync.h, dlls/ntdll/loader.c, dlls/ntdll/ntdll.spec, dlls/ntdll/ntdll_misc.h,
-# | 	dlls/ntdll/om.c, dlls/ntdll/server.c, dlls/ntdll/sync.c, dlls/ntdll/thread.c, dlls/rpcrt4/rpc_server.c,
-# | 	dlls/user32/hook.c, dlls/wineandroid.drv/window.c, dlls/winemac.drv/macdrv_main.c, dlls/winex11.drv/x11drv_main.c,
-# | 	server/Makefile.in, server/async.c, server/atom.c, server/change.c, server/clipboard.c, server/completion.c,
-# | 	server/console.c, server/debugger.c, server/device.c, server/directory.c, server/esync.c, server/esync.h,
-# | 	server/event.c, server/fd.c, server/file.c, server/file.h, server/handle.c, server/hook.c, server/mailslot.c,
-# | 	server/main.c, server/mapping.c, server/mutex.c, server/named_pipe.c, server/object.h, server/process.c,
-# | 	server/process.h, server/protocol.def, server/queue.c, server/registry.c, server/request.c, server/semaphore.c,
-# | 	server/serial.c, server/signal.c, server/snapshot.c, server/sock.c, server/symlink.c, server/thread.c, server/thread.h,
-# | 	server/timer.c, server/token.c, server/winstation.c
-# |
-if test "$enable_eventfd_synchronization" -eq 1; then
-	patch_apply eventfd_synchronization/0001-configure-Check-for-sys-eventfd.h-ppoll-and-shm_open.patch
-	patch_apply eventfd_synchronization/0002-server-Create-server-objects-for-eventfd-based-synch.patch
-	patch_apply eventfd_synchronization/0003-ntdll-Create-eventfd-based-objects-for-semaphores.patch
-	patch_apply eventfd_synchronization/0004-ntdll-Store-esync-objects-locally.patch
-	patch_apply eventfd_synchronization/0005-ntdll-Implement-NtReleaseSemaphore.patch
-	patch_apply eventfd_synchronization/0006-ntdll-Close-esync-objects.patch
-	patch_apply eventfd_synchronization/0007-ntdll-Implement-waiting-on-esync-objects.patch
-	patch_apply eventfd_synchronization/0008-ntdll-Create-esync-objects-for-events.patch
-	patch_apply eventfd_synchronization/0009-ntdll-Implement-NtSetEvent.patch
-	patch_apply eventfd_synchronization/0010-ntdll-Implement-NtResetEvent.patch
-	patch_apply eventfd_synchronization/0011-ntdll-Implement-NtPulseEvent.patch
-	patch_apply eventfd_synchronization/0012-ntdll-Implement-waiting-on-events.patch
-	patch_apply eventfd_synchronization/0013-server-Add-an-object-operation-to-grab-the-esync-fil.patch
-	patch_apply eventfd_synchronization/0014-server-Add-a-request-to-get-the-eventfd-file-descrip.patch
-	patch_apply eventfd_synchronization/0015-server-Create-eventfd-file-descriptors-for-process-o.patch
-	patch_apply eventfd_synchronization/0016-ntdll-server-Implement-waiting-on-server-bound-objec.patch
-	patch_apply eventfd_synchronization/0017-server-Create-eventfd-file-descriptors-for-event-obj.patch
-	patch_apply eventfd_synchronization/0018-server-Allow-re-setting-esync-events-on-the-server-s.patch
-	patch_apply eventfd_synchronization/0019-ntdll-Try-again-if-poll-returns-EINTR.patch
-	patch_apply eventfd_synchronization/0020-server-Create-eventfd-file-descriptors-for-thread-ob.patch
-	patch_apply eventfd_synchronization/0021-rpcrt4-Avoid-closing-the-server-thread-handle-while-.patch
-	patch_apply eventfd_synchronization/0022-server-Create-eventfd-file-descriptors-for-message-q.patch
-	patch_apply eventfd_synchronization/0023-ntdll-wineandroid.drv-winemac.drv-winex11.drv-Store-.patch
-	patch_apply eventfd_synchronization/0024-server-ntdll-Also-wait-on-the-queue-fd-when-waiting-.patch
-	patch_apply eventfd_synchronization/0025-server-Create-eventfd-descriptors-for-device-manager.patch
-	patch_apply eventfd_synchronization/0026-ntdll-Create-esync-objects-for-mutexes.patch
-	patch_apply eventfd_synchronization/0027-ntdll-Implement-NtReleaseMutant.patch
-	patch_apply eventfd_synchronization/0028-ntdll-Implement-waiting-on-mutexes.patch
-	patch_apply eventfd_synchronization/0029-ntdll-Implement-wait-all.patch
-	patch_apply eventfd_synchronization/0030-esync-Add-a-README.patch
-	patch_apply eventfd_synchronization/0031-ntdll-Implement-NtSignalAndWaitForSingleObject.patch
-	patch_apply eventfd_synchronization/0032-server-ntdll-Also-store-the-esync-type-in-the-server.patch
-	patch_apply eventfd_synchronization/0033-ntdll-server-Implement-NtOpenSemaphore.patch
-	patch_apply eventfd_synchronization/0034-ntdll-Implement-NtOpenEvent.patch
-	patch_apply eventfd_synchronization/0035-ntdll-Implement-NtOpenMutant.patch
-	patch_apply eventfd_synchronization/0036-ntdll-Record-the-current-count-of-a-semaphore-locall.patch
-	patch_apply eventfd_synchronization/0037-server-Implement-esync_map_access.patch
-	patch_apply eventfd_synchronization/0038-server-Alter-conditions-in-is_queue_hung.patch
-	patch_apply eventfd_synchronization/0039-ntdll-server-Allow-DuplicateHandle-to-succeed-by-imp.patch
-	patch_apply eventfd_synchronization/0040-server-Create-eventfd-descriptors-for-timers.patch
-	patch_apply eventfd_synchronization/0041-server-Allocate-shared-memory-segments-for-semaphore.patch
-	patch_apply eventfd_synchronization/0042-ntdll-Use-shared-memory-segments-to-store-semaphore-.patch
-	patch_apply eventfd_synchronization/0043-ntdll-Lock-creating-and-opening-objects-with-volatil.patch
-	patch_apply eventfd_synchronization/0044-server-ntdll-Pass-the-shared-memory-index-back-from-.patch
-	patch_apply eventfd_synchronization/0045-server-ntdll-Implement-alertable-waits.patch
-	patch_apply eventfd_synchronization/0046-esync-Update-README.patch
-	patch_apply eventfd_synchronization/0047-kernel32-tests-Mark-some-existing-tests-as-failing-u.patch
-	patch_apply eventfd_synchronization/0048-kernel32-tests-Add-some-semaphore-tests.patch
-	patch_apply eventfd_synchronization/0049-kernel32-tests-Add-some-event-tests.patch
-	patch_apply eventfd_synchronization/0050-kernel32-tests-Add-some-mutex-tests.patch
-	patch_apply eventfd_synchronization/0051-kernel32-tests-Add-some-tests-for-wait-timeouts.patch
-	patch_apply eventfd_synchronization/0052-ntdll-Go-through-the-server-if-necessary-when-perfor.patch
-	patch_apply eventfd_synchronization/0053-server-Create-eventfd-descriptors-for-console_input_.patch
-	patch_apply eventfd_synchronization/0054-server-Alter-conditions-in-is_queue_hung-again.patch
-	patch_apply eventfd_synchronization/0055-ntdll-Let-the-server-know-when-we-are-doing-a-messag.patch
-	patch_apply eventfd_synchronization/0056-ntdll-Avoid-server_select-when-waiting-for-critical-.patch
-	patch_apply eventfd_synchronization/0057-user32-Remove-hooks-that-time-out.patch
-	patch_apply eventfd_synchronization/0058-server-Don-t-check-for-a-hung-queue-when-sending-low.patch
-	patch_apply eventfd_synchronization/0059-kernel32-tests-Zigzag-test.patch
-	patch_apply eventfd_synchronization/0060-server-Try-to-remove-a-pre-xisting-shm-file.patch
-	patch_apply eventfd_synchronization/0061-ntdll-Implement-NtQuerySemaphore.patch
-	patch_apply eventfd_synchronization/0062-ntdll-Implement-NtQueryEvent.patch
-	patch_apply eventfd_synchronization/0063-ntdll-Implement-NtQueryMutant.patch
-	patch_apply eventfd_synchronization/0064-server-Create-eventfd-descriptors-for-pseudo-fd-obje.patch
-	patch_apply eventfd_synchronization/0065-ntdll-Cache-the-esync-struct-itself-instead-of-a-poi.patch
-	patch_apply eventfd_synchronization/0066-esync-Update-README.patch
-	patch_apply eventfd_synchronization/0067-esync-Add-note-about-file-limits-not-being-raised-wh.patch
-	patch_apply eventfd_synchronization/0068-ntdll-Ignore-pseudo-handles.patch
-	patch_apply eventfd_synchronization/0069-ntdll-Try-to-avoid-poll-for-uncontended-objects.patch
-	patch_apply eventfd_synchronization/0070-ntdll-Store-an-event-s-signaled-state-internally.patch
-	patch_apply eventfd_synchronization/0071-ntdll-Fix-growing-the-shm_addrs-array.patch
-	patch_apply eventfd_synchronization/0072-server-Update-the-shared-memory-state-when-re-settin.patch
-	patch_apply eventfd_synchronization/0073-ntdll-Fix-a-missing-break-statement.patch
-	patch_apply eventfd_synchronization/0074-ntdll-server-Abort-if-esync-is-enabled-for-the-serve.patch
-	patch_apply eventfd_synchronization/0075-esync-Update-README.patch
-	patch_apply eventfd_synchronization/0076-ntdll-Correctly-allocate-the-esync-handle-cache.patch
-	patch_apply eventfd_synchronization/0077-ntdll-server-Specify-EFD_SEMAPHORE-on-the-server-sid.patch
-	patch_apply eventfd_synchronization/0078-ntdll-server-Initialize-the-shared-memory-portion-on.patch
-	patch_apply eventfd_synchronization/0079-ntdll-server-Revert-to-old-implementation-of-hung-qu.patch
-	patch_apply eventfd_synchronization/0080-ntdll-Fix-a-couple-of-misplaced-global-variables.patch
-	patch_apply eventfd_synchronization/0081-ntdll-Yield-during-PulseEvent.patch
-	patch_apply eventfd_synchronization/0082-ntdll-server-Check-the-value-of-WINEESYNC-instead-of.patch
-	patch_apply eventfd_synchronization/0083-esync-Update-README.patch
-	patch_apply eventfd_synchronization/0084-server-Use-default_fd_get_esync_fd-for-directory-cha.patch
-	patch_apply eventfd_synchronization/0085-server-Only-signal-the-APC-fd-for-user-APCs.patch
-	patch_apply eventfd_synchronization/0086-ntdll-Check-the-APC-fd-first.patch
-	patch_apply eventfd_synchronization/0087-ntdll-esync-Lock-accessing-the-shm_addrs-array.patch
-	patch_apply eventfd_synchronization/0088-ntdll-Get-rid-of-the-per-event-spinlock-for-auto-res.patch
-	patch_apply eventfd_synchronization/0089-ntdll-server-Abandon-esync-mutexes-on-thread-exit.patch
-	(
-		printf '%s\n' '+    { "Zebediah Figura", "configure: Check for sys/eventfd.h, ppoll(), and shm_open().", 1 },';
-		printf '%s\n' '+    { "Zebediah Figura", "server: Create server objects for eventfd-based synchronization objects.", 1 },';
-		printf '%s\n' '+    { "Zebediah Figura", "ntdll: Create eventfd-based objects for semaphores.", 1 },';
-		printf '%s\n' '+    { "Zebediah Figura", "ntdll: Store esync objects locally.", 1 },';
-		printf '%s\n' '+    { "Zebediah Figura", "ntdll: Implement NtReleaseSemaphore().", 1 },';
-		printf '%s\n' '+    { "Zebediah Figura", "ntdll: Close esync objects.", 1 },';
-		printf '%s\n' '+    { "Zebediah Figura", "ntdll: Implement waiting on esync objects.", 1 },';
-		printf '%s\n' '+    { "Zebediah Figura", "ntdll: Create esync objects for events.", 1 },';
-		printf '%s\n' '+    { "Zebediah Figura", "ntdll: Implement NtSetEvent().", 1 },';
-		printf '%s\n' '+    { "Zebediah Figura", "ntdll: Implement NtResetEvent().", 1 },';
-		printf '%s\n' '+    { "Zebediah Figura", "ntdll: Implement NtPulseEvent().", 1 },';
-		printf '%s\n' '+    { "Zebediah Figura", "ntdll: Implement waiting on events.", 1 },';
-		printf '%s\n' '+    { "Zebediah Figura", "server: Add an object operation to grab the esync file descriptor.", 1 },';
-		printf '%s\n' '+    { "Zebediah Figura", "server: Add a request to get the eventfd file descriptor associated with a waitable handle.", 1 },';
-		printf '%s\n' '+    { "Zebediah Figura", "server: Create eventfd file descriptors for process objects.", 1 },';
-		printf '%s\n' '+    { "Zebediah Figura", "ntdll, server: Implement waiting on server-bound objects.", 1 },';
-		printf '%s\n' '+    { "Zebediah Figura", "server: Create eventfd file descriptors for event objects.", 1 },';
-		printf '%s\n' '+    { "Zebediah Figura", "server: Allow (re)setting esync events on the server side.", 1 },';
-		printf '%s\n' '+    { "Zebediah Figura", "ntdll: Try again if poll() returns EINTR.", 1 },';
-		printf '%s\n' '+    { "Zebediah Figura", "server: Create eventfd file descriptors for thread objects.", 1 },';
-		printf '%s\n' '+    { "Zebediah Figura", "rpcrt4: Avoid closing the server thread handle while it is being waited on.", 1 },';
-		printf '%s\n' '+    { "Zebediah Figura", "server: Create eventfd file descriptors for message queues.", 1 },';
-		printf '%s\n' '+    { "Zebediah Figura", "ntdll, wineandroid.drv, winemac.drv, winex11.drv: Store the thread'\''s queue fd in ntdll.", 1 },';
-		printf '%s\n' '+    { "Zebediah Figura", "server, ntdll: Also wait on the queue fd when waiting for driver events.", 1 },';
-		printf '%s\n' '+    { "Zebediah Figura", "server: Create eventfd descriptors for device manager objects.", 1 },';
-		printf '%s\n' '+    { "Zebediah Figura", "ntdll: Create esync objects for mutexes.", 1 },';
-		printf '%s\n' '+    { "Zebediah Figura", "ntdll: Implement NtReleaseMutant().", 1 },';
-		printf '%s\n' '+    { "Zebediah Figura", "ntdll: Implement waiting on mutexes.", 1 },';
-		printf '%s\n' '+    { "Zebediah Figura", "ntdll: Implement wait-all.", 1 },';
-		printf '%s\n' '+    { "Zebediah Figura", "esync: Add a README.", 1 },';
-		printf '%s\n' '+    { "Zebediah Figura", "ntdll: Implement NtSignalAndWaitForSingleObject().", 1 },';
-		printf '%s\n' '+    { "Zebediah Figura", "server, ntdll: Also store the esync type in the server.", 1 },';
-		printf '%s\n' '+    { "Zebediah Figura", "ntdll, server: Implement NtOpenSemaphore().", 1 },';
-		printf '%s\n' '+    { "Zebediah Figura", "ntdll: Implement NtOpenEvent().", 1 },';
-		printf '%s\n' '+    { "Zebediah Figura", "ntdll: Implement NtOpenMutant().", 1 },';
-		printf '%s\n' '+    { "Zebediah Figura", "ntdll: Record the current count of a semaphore locally.", 1 },';
-		printf '%s\n' '+    { "Zebediah Figura", "server: Implement esync_map_access().", 1 },';
-		printf '%s\n' '+    { "Zebediah Figura", "server: Alter conditions in is_queue_hung().", 1 },';
-		printf '%s\n' '+    { "Zebediah Figura", "ntdll, server: Allow DuplicateHandle() to succeed by implementing esync_get_esync_fd().", 1 },';
-		printf '%s\n' '+    { "Zebediah Figura", "server: Create eventfd descriptors for timers.", 1 },';
-		printf '%s\n' '+    { "Zebediah Figura", "server: Allocate shared memory segments for semaphores and mutexes.", 1 },';
-		printf '%s\n' '+    { "Zebediah Figura", "ntdll: Use shared memory segments to store semaphore and mutex state.", 1 },';
-		printf '%s\n' '+    { "Zebediah Figura", "ntdll: Lock creating and opening objects with volatile state.", 1 },';
-		printf '%s\n' '+    { "Zebediah Figura", "server, ntdll: Pass the shared memory index back from get_esync_fd.", 1 },';
-		printf '%s\n' '+    { "Zebediah Figura", "server, ntdll: Implement alertable waits.", 1 },';
-		printf '%s\n' '+    { "Zebediah Figura", "esync: Update README.", 1 },';
-		printf '%s\n' '+    { "Zebediah Figura", "kernel32/tests: Mark some existing tests as failing under esync.", 1 },';
-		printf '%s\n' '+    { "Zebediah Figura", "kernel32/tests: Add some semaphore tests.", 1 },';
-		printf '%s\n' '+    { "Zebediah Figura", "kernel32/tests: Add some event tests.", 1 },';
-		printf '%s\n' '+    { "Zebediah Figura", "kernel32/tests: Add some mutex tests.", 1 },';
-		printf '%s\n' '+    { "Zebediah Figura", "kernel32/tests: Add some tests for wait timeouts.", 1 },';
-		printf '%s\n' '+    { "Zebediah Figura", "ntdll: Go through the server if necessary when performing event/semaphore/mutex ops.", 1 },';
-		printf '%s\n' '+    { "Zebediah Figura", "server: Create eventfd descriptors for console_input_events objects.", 1 },';
-		printf '%s\n' '+    { "Zebediah Figura", "server: Alter conditions in is_queue_hung(), again.", 1 },';
-		printf '%s\n' '+    { "Zebediah Figura", "ntdll: Let the server know when we are doing a message wait.", 1 },';
-		printf '%s\n' '+    { "Zebediah Figura", "ntdll: Avoid server_select() when waiting for critical sections.", 1 },';
-		printf '%s\n' '+    { "Zebediah Figura", "user32: Remove hooks that time out.", 1 },';
-		printf '%s\n' '+    { "Zebediah Figura", "server: Don'\''t check for a hung queue when sending low-level hooks.", 1 },';
-		printf '%s\n' '+    { "Zebediah Figura", "kernel32/tests: Zigzag test.", 1 },';
-		printf '%s\n' '+    { "Zebediah Figura", "=?UTF-8?q?server:=20Try=20to=20remove=20a=20pre?= =?UTF-8?q?=C3=ABxisting=20shm=20file.?=.", 1 },';
-		printf '%s\n' '+    { "Zebediah Figura", "ntdll: Implement NtQuerySemaphore().", 1 },';
-		printf '%s\n' '+    { "Zebediah Figura", "ntdll: Implement NtQueryEvent().", 1 },';
-		printf '%s\n' '+    { "Zebediah Figura", "ntdll: Implement NtQueryMutant().", 1 },';
-		printf '%s\n' '+    { "Zebediah Figura", "server: Create eventfd descriptors for pseudo-fd objects and use them for named pipes.", 1 },';
-		printf '%s\n' '+    { "Zebediah Figura", "ntdll: Cache the esync struct itself instead of a pointer to it.", 1 },';
-		printf '%s\n' '+    { "Zebediah Figura", "esync: Update README.", 1 },';
-		printf '%s\n' '+    { "Mathieu Comandon", "esync: Add note about file limits not being raised when using systemd.", 1 },';
-		printf '%s\n' '+    { "Zebediah Figura", "ntdll: Ignore pseudo-handles.", 1 },';
-		printf '%s\n' '+    { "Zebediah Figura", "ntdll: Try to avoid poll() for uncontended objects.", 1 },';
-		printf '%s\n' '+    { "Zebediah Figura", "ntdll: Store an event'\''s signaled state internally.", 1 },';
-		printf '%s\n' '+    { "Zebediah Figura", "ntdll: Fix growing the shm_addrs array.", 1 },';
-		printf '%s\n' '+    { "Zebediah Figura", "server: Update the shared memory state when (re)setting an event.", 1 },';
-		printf '%s\n' '+    { "Zebediah Figura", "ntdll: Fix a missing break statement.", 1 },';
-		printf '%s\n' '+    { "Zebediah Figura", "ntdll, server: Abort if esync is enabled for the server but not the client, and vice versa.", 1 },';
-		printf '%s\n' '+    { "Zebediah Figura", "esync: Update README.", 1 },';
-		printf '%s\n' '+    { "Zebediah Figura", "ntdll: Correctly allocate the esync handle cache.", 1 },';
-		printf '%s\n' '+    { "Zebediah Figura", "ntdll, server: Specify EFD_SEMAPHORE on the server side.", 1 },';
-		printf '%s\n' '+    { "Zebediah Figura", "ntdll, server: Initialize the shared memory portion on the server side.", 1 },';
-		printf '%s\n' '+    { "Zebediah Figura", "ntdll, server: Revert to old implementation of hung queue detection.", 1 },';
-		printf '%s\n' '+    { "Zebediah Figura", "ntdll: Fix a couple of misplaced global variables.", 1 },';
-		printf '%s\n' '+    { "Zebediah Figura", "ntdll: Yield during PulseEvent().", 1 },';
-		printf '%s\n' '+    { "Zebediah Figura", "ntdll, server: Check the value of WINEESYNC instead of just the presence.", 1 },';
-		printf '%s\n' '+    { "Zebediah Figura", "esync: Update README.", 1 },';
-		printf '%s\n' '+    { "Zebediah Figura", "server: Create esync file descriptors for true file objects and use them for directory change notifications.", 1 },';
-		printf '%s\n' '+    { "Zebediah Figura", "server: Only signal the APC fd for user APCs.", 1 },';
-		printf '%s\n' '+    { "Zebediah Figura", "ntdll: Check the APC fd first.", 1 },';
-		printf '%s\n' '+    { "Zebediah Figura", "ntdll/esync: Lock accessing the shm_addrs array.", 1 },';
-		printf '%s\n' '+    { "Zebediah Figura", "ntdll: Get rid of the per-event spinlock for auto-reset events.", 1 },';
-		printf '%s\n' '+    { "Zebediah Figura", "ntdll, server: Abandon esync mutexes on thread exit.", 1 },';
-	) >> "$patchlist"
-fi
-
-# Patchset explorer-Video_Registry_Key
-# |
-# | Modified files:
-# |   *	dlls/advapi32/tests/registry.c, programs/explorer/desktop.c
-# |
-if test "$enable_explorer_Video_Registry_Key" -eq 1; then
-	patch_apply explorer-Video_Registry_Key/0001-explorer-Create-CurrentControlSet-Control-Video-regi.patch
-	(
-		printf '%s\n' '+    { "Michael Müller", "explorer: Create CurrentControlSet\\Control\\Video registry key as non-volatile.", 1 },';
-	) >> "$patchlist"
-fi
-
-# Patchset fonts-Missing_Fonts
-# |
-# | This patchset fixes the following Wine bugs:
-# |   *	[#32323] Implement an Arial replacement font
-# |   *	[#32342] Implement a Times New Roman replacement font
-# |   *	[#20456] Implement a Courier New replacement font
-# |   *	[#13829] Implement a Microsoft Yahei replacement font
-# |
-# | Modified files:
-# |   *	COPYING.arial, COPYING.cour, COPYING.msyh, COPYING.times, LICENSE, fonts/Makefile.in, fonts/arial.sfd, fonts/arial.ttf,
-# | 	fonts/cour.sfd, fonts/cour.ttf, fonts/msyh.sfd, fonts/msyh.ttf, fonts/times.sfd, fonts/times.ttf
-# |
-if test "$enable_fonts_Missing_Fonts" -eq 1; then
-	patch_apply fonts-Missing_Fonts/0001-fonts-Add-Liberation-Sans-as-an-Arial-replacement.patch
-	patch_apply fonts-Missing_Fonts/0002-fonts-Add-Liberation-Serif-as-an-Times-New-Roman-rep.patch
-	patch_apply fonts-Missing_Fonts/0003-fonts-Add-Liberation-Mono-as-an-Courier-New-replacem.patch
-	patch_apply fonts-Missing_Fonts/0004-fonts-Add-WenQuanYi-Micro-Hei-as-a-Microsoft-Yahei-r.patch
-	patch_apply fonts-Missing_Fonts/0005-Add-licenses-for-fonts-as-separate-files.patch
-	(
-		printf '%s\n' '+    { "Torsten Kurbad", "fonts: Add Liberation Sans as an Arial replacement.", 2 },';
-		printf '%s\n' '+    { "Sebastian Lackner", "fonts: Add Liberation Serif as an Times New Roman replacement.", 1 },';
-		printf '%s\n' '+    { "Sebastian Lackner", "fonts: Add Liberation Mono as an Courier New replacement.", 1 },';
-		printf '%s\n' '+    { "Erich E. Hoover", "fonts: Add WenQuanYi Micro Hei as a Microsoft Yahei replacement.", 1 },';
-		printf '%s\n' '+    { "Michael Müller", "Add licenses for fonts as separate files.", 1 },';
-	) >> "$patchlist"
-fi
-
-# Patchset fsutil-Stub_Program
-# |
-# | This patchset fixes the following Wine bugs:
-# |   *	[#22749] Add stub for fsutil.exe hardlink command
-# |
-# | Modified files:
-# |   *	programs/fsutil/Makefile.in, programs/fsutil/fsutil.rc, programs/fsutil/main.c, programs/fsutil/resources.h
-# |
-if test "$enable_fsutil_Stub_Program" -eq 1; then
-	patch_apply fsutil-Stub_Program/0001-fsutil-Add-fsutil-program-with-support-for-creating-.patch
-	(
-		printf '%s\n' '+    { "Michael Müller", "fsutil: Add fsutil program with support for creating hard links.", 1 },';
-	) >> "$patchlist"
-fi
-
-# Patchset gdi32-Lazy_Font_Initialization
-# |
-# | Modified files:
-# |   *	dlls/gdi32/dc.c, dlls/gdi32/freetype.c
-# |
-if test "$enable_gdi32_Lazy_Font_Initialization" -eq 1; then
-	patch_apply gdi32-Lazy_Font_Initialization/0001-gdi32-Perform-lazy-initialization-of-fonts-to-improv.patch
-	(
-		printf '%s\n' '+    { "Sebastian Lackner", "gdi32: Perform lazy initialization of fonts to improve startup performance.", 1 },';
-	) >> "$patchlist"
-fi
-
-# Patchset gdi32-rotation
-# |
-# | This patchset fixes the following Wine bugs:
-# |   *	[#34579] gdi32: fix for rotated Arc, ArcTo, Chord and Pie drawing problem
-# |   *	[#35331] gdi32: fix for rotated ellipse
-# |
-# | Modified files:
-# |   *	dlls/gdi32/dibdrv/graphics.c, dlls/gdi32/gdi_private.h
-# |
-if test "$enable_gdi32_rotation" -eq 1; then
-	patch_apply gdi32-rotation/0001-gdi32-fix-for-rotated-Arc-ArcTo-Chord-and-Pie-drawin.patch
-	patch_apply gdi32-rotation/0002-gdi32-fix-for-rotated-ellipse.patch
-	(
-		printf '%s\n' '+    { "Daniel Wendt", "gdi32: Fix for rotated Arc, ArcTo, Chord and Pie drawing problem.", 1 },';
-		printf '%s\n' '+    { "Daniel Wendt", "gdi32: Fix for rotated ellipse.", 1 },';
-	) >> "$patchlist"
-fi
-
-# Patchset gdiplus-Performance-Improvements
+# Patchset gdiplus-Performance-Improvements
 # |
 # | Modified files:
 # |   *	dlls/gdiplus/graphics.c
@@ -3926,6 +3222,58 @@ if test "$enable_iphlpapi_System_Ping" -eq 1; then
 	) >> "$patchlist"
 fi
 
+# Patchset ntdll-Junction_Points
+# |
+# | This patchset fixes the following Wine bugs:
+# |   *	[#12401] NET Framework 2.0, 3.0, 4.0 installers and other apps that make use of GAC API for managed assembly
+# | 	installation on NTFS filesystems need reparse point/junction API support
+# | 	(FSCTL_SET_REPARSE_POINT/FSCTL_GET_REPARSE_POINT)
+# |   *	[#44948] Multiple apps (Spine (Mod starter for Gothic), MS Office 365 installer) need CreateSymbolicLinkW implementation
+# |
+# | Modified files:
+# |   *	configure.ac, dlls/kernel32/path.c, dlls/ntdll/directory.c, dlls/ntdll/file.c, dlls/ntdll/tests/file.c,
+# | 	include/Makefile.in, include/ntifs.h, include/wine/port.h, include/winternl.h, libs/port/Makefile.in,
+# | 	libs/port/renameat2.c, server/fd.c
+# |
+if test "$enable_ntdll_Junction_Points" -eq 1; then
+	patch_apply ntdll-Junction_Points/0001-ntdll-Add-support-for-junction-point-creation.patch
+	patch_apply ntdll-Junction_Points/0002-ntdll-Add-support-for-reading-junction-points.patch
+	patch_apply ntdll-Junction_Points/0003-ntdll-Add-support-for-deleting-junction-points.patch
+	patch_apply ntdll-Junction_Points/0004-ntdll-Add-a-test-for-junction-point-advertisement.patch
+	patch_apply ntdll-Junction_Points/0005-kernel32-ntdll-Add-support-for-deleting-junction-poi.patch
+	patch_apply ntdll-Junction_Points/0007-ntdll-Add-support-for-absolute-symlink-creation.patch
+	patch_apply ntdll-Junction_Points/0008-ntdll-Add-support-for-reading-absolute-symlinks.patch
+	patch_apply ntdll-Junction_Points/0009-ntdll-Add-support-for-deleting-symlinks.patch
+	patch_apply ntdll-Junction_Points/0010-ntdll-Add-support-for-relative-symlink-creation.patch
+	patch_apply ntdll-Junction_Points/0011-ntdll-Add-support-for-reading-relative-symlinks.patch
+	patch_apply ntdll-Junction_Points/0012-ntdll-Add-support-for-file-symlinks.patch
+	patch_apply ntdll-Junction_Points/0013-ntdll-Allow-creation-of-dangling-reparse-points-to-n.patch
+	patch_apply ntdll-Junction_Points/0014-ntdll-Correctly-report-file-symbolic-links-as-files.patch
+	patch_apply ntdll-Junction_Points/0015-kernel32-Set-error-code-when-attempting-to-delete-fi.patch
+	patch_apply ntdll-Junction_Points/0016-server-Properly-handle-file-symlink-deletion.patch
+	patch_apply ntdll-Junction_Points/0017-ntdll-Always-report-symbolic-links-as-containing-zer.patch
+	patch_apply ntdll-Junction_Points/0018-ntdll-Find-dangling-symlinks-quickly.patch
+	(
+		printf '%s\n' '+    { "Erich E. Hoover", "ntdll: Add support for junction point creation.", 1 },';
+		printf '%s\n' '+    { "Erich E. Hoover", "ntdll: Add support for reading junction points.", 1 },';
+		printf '%s\n' '+    { "Erich E. Hoover", "ntdll: Add support for deleting junction points.", 1 },';
+		printf '%s\n' '+    { "Erich E. Hoover", "ntdll: Add a test for junction point advertisement.", 1 },';
+		printf '%s\n' '+    { "Erich E. Hoover", "kernel32,ntdll: Add support for deleting junction points with RemoveDirectory.", 1 },';
+		printf '%s\n' '+    { "Erich E. Hoover", "ntdll: Add support for absolute symlink creation.", 1 },';
+		printf '%s\n' '+    { "Erich E. Hoover", "ntdll: Add support for reading absolute symlinks.", 1 },';
+		printf '%s\n' '+    { "Erich E. Hoover", "ntdll: Add support for deleting symlinks.", 1 },';
+		printf '%s\n' '+    { "Erich E. Hoover", "ntdll: Add support for relative symlink creation.", 1 },';
+		printf '%s\n' '+    { "Erich E. Hoover", "ntdll: Add support for reading relative symlinks.", 1 },';
+		printf '%s\n' '+    { "Erich E. Hoover", "ntdll: Add support for file symlinks.", 1 },';
+		printf '%s\n' '+    { "Erich E. Hoover", "ntdll: Allow creation of dangling reparse points to non-existent paths.", 1 },';
+		printf '%s\n' '+    { "Erich E. Hoover", "ntdll: Correctly report file symbolic links as files.", 1 },';
+		printf '%s\n' '+    { "Erich E. Hoover", "kernel32: Set error code when attempting to delete file symlinks as directories.", 1 },';
+		printf '%s\n' '+    { "Erich E. Hoover", "server: Properly handle file symlink deletion.", 1 },';
+		printf '%s\n' '+    { "Erich E. Hoover", "ntdll: Always report symbolic links as containing zero bytes.", 1 },';
+		printf '%s\n' '+    { "Erich E. Hoover", "ntdll: Find dangling symlinks quickly.", 1 },';
+	) >> "$patchlist"
+fi
+
 # Patchset server-File_Permissions
 # |
 # | This patchset has the following (direct or indirect) dependencies:
@@ -4035,6 +3383,18 @@ if test "$enable_kernel32_Job_Tests" -eq 1; then
 	) >> "$patchlist"
 fi
 
+# Patchset kernel32-K32GetPerformanceInfo
+# |
+# | Modified files:
+# |   *	dlls/kernelbase/debug.c, server/process.c, server/protocol.def
+# |
+if test "$enable_kernel32_K32GetPerformanceInfo" -eq 1; then
+	patch_apply kernel32-K32GetPerformanceInfo/0001-kernel32-Make-K32GetPerformanceInfo-faster.patch
+	(
+		printf '%s\n' '+    { "Michael Müller", "kernel32: Make K32GetPerformanceInfo faster.", 1 },';
+	) >> "$patchlist"
+fi
+
 # Patchset kernel32-Processor_Group
 # |
 # | This patchset has the following (direct or indirect) dependencies:
@@ -4103,6 +3463,23 @@ if test "$enable_krnl386_exe16_Invalid_Console_Handles" -eq 1; then
 	) >> "$patchlist"
 fi
 
+# Patchset loader-KeyboardLayouts
+# |
+# | This patchset fixes the following Wine bugs:
+# |   *	[#47439] loader: Add Keyboard Layouts registry enteries.
+# |
+# | Modified files:
+# |   *	dlls/user32/driver.c, dlls/user32/tests/input.c, loader/wine.inf.in
+# |
+if test "$enable_loader_KeyboardLayouts" -eq 1; then
+	patch_apply loader-KeyboardLayouts/0001-loader-Add-Keyboard-Layouts-registry-enteries.patch
+	patch_apply loader-KeyboardLayouts/0002-user32-Improve-GetKeyboardLayoutList.patch
+	(
+		printf '%s\n' '+    { "Alistair Leslie-Hughes", "loader: Add Keyboard Layouts registry enteries.", 1 },';
+		printf '%s\n' '+    { "Alistair Leslie-Hughes", "user32: Improve GetKeyboardLayoutList.", 1 },';
+	) >> "$patchlist"
+fi
+
 # Patchset mmsystem.dll16-MIDIHDR_Refcount
 # |
 # | This patchset fixes the following Wine bugs:
@@ -4246,6 +3623,32 @@ if test "$enable_ntdll_Activation_Context" -eq 1; then
 	) >> "$patchlist"
 fi
 
+# Patchset ntdll-ThreadTime
+# |
+# | This patchset fixes the following Wine bugs:
+# |   *	[#20230] Return correct values for GetThreadTimes function
+# |
+# | Modified files:
+# |   *	dlls/ntdll/nt.c, dlls/ntdll/ntdll_misc.h, dlls/ntdll/process.c, dlls/ntdll/thread.c, server/protocol.def,
+# | 	server/snapshot.c, server/thread.c, server/thread.h
+# |
+if test "$enable_ntdll_ThreadTime" -eq 1; then
+	patch_apply ntdll-ThreadTime/0001-ntdll-Return-correct-values-in-GetThreadTimes-for-al.patch
+	patch_apply ntdll-ThreadTime/0002-ntdll-Set-correct-thread-creation-time-for-SystemPro.patch
+	patch_apply ntdll-ThreadTime/0003-ntdll-Fill-process-kernel-and-user-time.patch
+	patch_apply ntdll-ThreadTime/0004-ntdll-Set-process-start-time.patch
+	patch_apply ntdll-ThreadTime/0005-ntdll-Fill-out-thread-times-in-process-enumeration.patch
+	patch_apply ntdll-ThreadTime/0006-ntdll-Fill-process-virtual-memory-counters-in-NtQuer.patch
+	(
+		printf '%s\n' '+    { "Sebastian Lackner", "ntdll: Return correct values in GetThreadTimes() for all threads.", 1 },';
+		printf '%s\n' '+    { "Michael Müller", "ntdll: Set correct thread creation time for SystemProcessInformation in NtQuerySystemInformation.", 1 },';
+		printf '%s\n' '+    { "Michael Müller", "ntdll: Fill process kernel and user time.", 1 },';
+		printf '%s\n' '+    { "Michael Müller", "ntdll: Set process start time.", 1 },';
+		printf '%s\n' '+    { "Michael Müller", "ntdll: Fill out thread times in process enumeration.", 1 },';
+		printf '%s\n' '+    { "Michael Müller", "ntdll: Fill process virtual memory counters in NtQuerySystemInformation.", 1 },';
+	) >> "$patchlist"
+fi
+
 # Patchset ntdll-ApiSetMap
 # |
 # | This patchset has the following (direct or indirect) dependencies:
@@ -4573,12 +3976,60 @@ fi
 # Patchset ntdll-NtAccessCheck
 # |
 # | Modified files:
-# |   *	dlls/advapi32/tests/security.c, dlls/ntdll/sec.c
+# |   *	dlls/advapi32/tests/security.c, dlls/ntdll/sec.c
+# |
+if test "$enable_ntdll_NtAccessCheck" -eq 1; then
+	patch_apply ntdll-NtAccessCheck/0001-ntdll-Improve-invalid-paramater-handling-in-NtAccess.patch
+	(
+		printf '%s\n' '+    { "Qian Hong", "ntdll: Improve invalid paramater handling in NtAccessCheck.", 1 },';
+	) >> "$patchlist"
+fi
+
+# Patchset winebuild-Fake_Dlls
+# |
+# | This patchset fixes the following Wine bugs:
+# |   *	[#21232] Chromium-based browser engines (Chrome, Opera, Comodo Dragon, SRWare Iron) crash on startup unless '--no-
+# | 	sandbox' is used (native API sandboxing/hooking scheme incompatible with Wine)
+# |   *	[#42741] StarCraft I: 1.18 PTR fails to initialize ClientSdk.dll
+# |   *	[#45349] Multiple applications and games crash due to missing support for 64-bit syscall thunks (StreetFighter V)
+# |   *	[#45573] League of Legends 8.12+ fails to start a game (anticheat engine, hooking of syscall return instructions)
+# |   *	[#45650] chromium 32-bit sandbox expects different syscall thunks depending on Windows version
+# |
+# | Modified files:
+# |   *	dlls/dbghelp/cpu_i386.c, dlls/kernel32/tests/loader.c, dlls/krnl386.exe16/kernel.c,
+# | 	dlls/krnl386.exe16/kernel16_private.h, dlls/krnl386.exe16/ne_module.c, dlls/krnl386.exe16/ne_segment.c,
+# | 	dlls/krnl386.exe16/task.c, dlls/krnl386.exe16/thunk.c, dlls/krnl386.exe16/wowthunk.c, dlls/ntdll/actctx.c,
+# | 	dlls/ntdll/directory.c, dlls/ntdll/loader.c, dlls/ntdll/locale.c, dlls/ntdll/ntdll_misc.h, dlls/ntdll/path.c,
+# | 	dlls/ntdll/process.c, dlls/ntdll/signal_i386.c, dlls/ntdll/tests/exception.c, dlls/ntdll/thread.c,
+# | 	dlls/system.drv16/system.c, dlls/toolhelp.dll16/toolhelp.c, dlls/user.exe16/message.c, dlls/user.exe16/user.c,
+# | 	dlls/user.exe16/window.c, include/winternl.h, libs/wine/loader.c, server/mapping.c, tools/winebuild/build.h,
+# | 	tools/winebuild/import.c, tools/winebuild/parser.c, tools/winebuild/relay.c, tools/winebuild/res32.c,
+# | 	tools/winebuild/spec16.c, tools/winebuild/spec32.c, tools/winebuild/utils.c
 # |
-if test "$enable_ntdll_NtAccessCheck" -eq 1; then
-	patch_apply ntdll-NtAccessCheck/0001-ntdll-Improve-invalid-paramater-handling-in-NtAccess.patch
+if test "$enable_winebuild_Fake_Dlls" -eq 1; then
+	patch_apply winebuild-Fake_Dlls/0001-kernel32-tests-Add-basic-tests-for-fake-dlls.patch
+	patch_apply winebuild-Fake_Dlls/0002-krnl386.exe16-Do-not-abuse-WOW32Reserved-field-for-1.patch
+	patch_apply winebuild-Fake_Dlls/0003-winebuild-Generate-syscall-thunks-for-ntdll-exports.patch
+	patch_apply winebuild-Fake_Dlls/0004-winebuild-Use-multipass-label-system-to-generate-fak.patch
+	patch_apply winebuild-Fake_Dlls/0005-winebuild-Add-stub-functions-in-fake-dlls.patch
+	patch_apply winebuild-Fake_Dlls/0006-winebuild-Add-syscall-thunks-in-fake-dlls.patch
+	patch_apply winebuild-Fake_Dlls/0007-winebuild-Fix-size-of-relocation-information-in-fake.patch
+	patch_apply winebuild-Fake_Dlls/0008-winebuild-Try-to-make-sure-RVA-matches-between-fake-.patch
+	patch_apply winebuild-Fake_Dlls/0009-libs-wine-Use-same-file-alignment-for-fake-and-built.patch
+	patch_apply winebuild-Fake_Dlls/0010-tools-winebuild-Add-syscall-thunks-for-64-bit.patch
+	patch_apply winebuild-Fake_Dlls/0011-ntdll-Call-NtOpenFile-through-syscall-thunk.patch
 	(
-		printf '%s\n' '+    { "Qian Hong", "ntdll: Improve invalid paramater handling in NtAccessCheck.", 1 },';
+		printf '%s\n' '+    { "Michael Müller", "kernel32/tests: Add basic tests for fake dlls.", 1 },';
+		printf '%s\n' '+    { "Sebastian Lackner", "krnl386.exe16: Do not abuse WOW32Reserved field for 16-bit stack address.", 1 },';
+		printf '%s\n' '+    { "Michael Müller", "winebuild: Generate syscall thunks for ntdll exports.", 1 },';
+		printf '%s\n' '+    { "Michael Müller", "winebuild: Use multipass label system to generate fake dlls.", 1 },';
+		printf '%s\n' '+    { "Michael Müller", "winebuild: Add stub functions in fake dlls.", 1 },';
+		printf '%s\n' '+    { "Michael Müller", "winebuild: Add syscall thunks in fake dlls.", 1 },';
+		printf '%s\n' '+    { "Michael Müller", "winebuild: Fix size of relocation information in fake dlls.", 1 },';
+		printf '%s\n' '+    { "Michael Müller", "winebuild: Try to make sure RVA matches between fake and builtin DLLs.", 1 },';
+		printf '%s\n' '+    { "Michael Müller", "libs/wine: Use same file alignment for fake and builtin DLLs.", 1 },';
+		printf '%s\n' '+    { "Michael Müller", "tools/winebuild: Add syscall thunks for 64 bit.", 1 },';
+		printf '%s\n' '+    { "Paul Gofman", "ntdll: Call NtOpenFile through syscall thunk.", 1 },';
 	) >> "$patchlist"
 fi
 
@@ -4723,6 +4174,24 @@ if test "$enable_ntdll_ProcessQuotaLimits" -eq 1; then
 	) >> "$patchlist"
 fi
 
+# Patchset ntdll-RtlCreateUserThread
+# |
+# | This patchset has the following (direct or indirect) dependencies:
+# |   *	winebuild-Fake_Dlls
+# |
+# | This patchset fixes the following Wine bugs:
+# |   *	[#45571] League of Legends 8.12+ fails to start a game (anticheat engine, hooking of NtCreateThread/Ex)
+# |
+# | Modified files:
+# |   *	dlls/ntdll/ntdll.spec, dlls/ntdll/thread.c, include/winternl.h
+# |
+if test "$enable_ntdll_RtlCreateUserThread" -eq 1; then
+	patch_apply ntdll-RtlCreateUserThread/0001-ntdll-Refactor-RtlCreateUserThread-into-NtCreateThre.patch
+	(
+		printf '%s\n' '+    { "Andrew Wesie", "ntdll: Refactor RtlCreateUserThread into NtCreateThreadEx.", 1 },';
+	) >> "$patchlist"
+fi
+
 # Patchset ntdll-RtlQueryPackageIdentity
 # |
 # | Modified files:
@@ -4866,6 +4335,30 @@ if test "$enable_ntdll_SystemModuleInformation" -eq 1; then
 	) >> "$patchlist"
 fi
 
+# Patchset ntdll-SystemRoot_Symlink
+# |
+# | Modified files:
+# |   *	dlls/ntdll/om.c
+# |
+if test "$enable_ntdll_SystemRoot_Symlink" -eq 1; then
+	patch_apply ntdll-SystemRoot_Symlink/0001-ntdll-Add-special-handling-for-SystemRoot-to-satisfy.patch
+	(
+		printf '%s\n' '+    { "Sebastian Lackner", "ntdll: Add special handling for \\SystemRoot to satisfy MSYS2 case-insensitive system check.", 1 },';
+	) >> "$patchlist"
+fi
+
+# Patchset ntdll-Threading
+# |
+# | Modified files:
+# |   *	dlls/ntdll/thread.c
+# |
+if test "$enable_ntdll_Threading" -eq 1; then
+	patch_apply ntdll-Threading/0001-ntdll-Fix-race-condition-when-threads-are-killed-dur.patch
+	(
+		printf '%s\n' '+    { "Sebastian Lackner", "ntdll: Fix race-condition when threads are killed during shutdown.", 1 },';
+	) >> "$patchlist"
+fi
+
 # Patchset ntdll-Zero_mod_name
 # |
 # | Modified files:
@@ -4910,6 +4403,21 @@ if test "$enable_ntdll_aarch_TEB" -eq 1; then
 	) >> "$patchlist"
 fi
 
+# Patchset ntdll-ext4-case-folder
+# |
+# | This patchset fixes the following Wine bugs:
+# |   *	[#47099] Support for EXT4 case folding per directory.
+# |
+# | Modified files:
+# |   *	dlls/ntdll/unix/server.c
+# |
+if test "$enable_ntdll_ext4_case_folder" -eq 1; then
+	patch_apply ntdll-ext4-case-folder/0002-ntdll-server-Mark-drive_c-as-case-insensitive-when-c.patch
+	(
+		printf '%s\n' '+    { "Gabriel Ivăncescu", "ntdll/server: Mark drive_c as case-insensitive when created.", 1 },';
+	) >> "$patchlist"
+fi
+
 # Patchset ntdll-set_full_cpu_context
 # |
 # | Modified files:
@@ -5192,13 +4700,29 @@ if test "$enable_riched20_IText_Interface" -eq 1; then
 	) >> "$patchlist"
 fi
 
+# Patchset ws2_32-WSACleanup
+# |
+# | This patchset fixes the following Wine bugs:
+# |   *	[#18670] Properly close sockets when WSACleanup is called
+# |
+# | Modified files:
+# |   *	dlls/ntdll/ntdll.spec, dlls/ntdll/server.c, dlls/ntdll/unix/loader.c, dlls/ntdll/unix/server.c,
+# | 	dlls/ntdll/unix/unix_private.h, dlls/ntdll/unixlib.h, dlls/ws2_32/socket.c, dlls/ws2_32/tests/sock.c,
+# | 	include/wine/server.h, server/protocol.def, server/sock.c
+# |
+if test "$enable_ws2_32_WSACleanup" -eq 1; then
+	patch_apply ws2_32-WSACleanup/0001-ws2_32-Proper-WSACleanup-implementation-using-winese.patch
+	patch_apply ws2_32-WSACleanup/0002-ws2_32-Invalidate-client-side-file-descriptor-cache-.patch
+	(
+		printf '%s\n' '+    { "Matt Durgavich", "ws2_32: Proper WSACleanup implementation using wineserver function.", 2 },';
+		printf '%s\n' '+    { "Sebastian Lackner", "ws2_32: Invalidate client-side file descriptor cache in WSACleanup.", 1 },';
+	) >> "$patchlist"
+fi
+
 # Patchset server-Desktop_Refcount
 # |
 # | This patchset has the following (direct or indirect) dependencies:
-# |   *	Staging, advapi32-CreateRestrictedToken, advapi32-Token_Integrity_Level, kernel32-K32GetPerformanceInfo, ntdll-
-# | 	Junction_Points, winebuild-Fake_Dlls, ntdll-RtlCreateUserThread, ntdll-SystemRoot_Symlink, ntdll-ThreadTime, server-
-# | 	Realtime_Priority, ntdll-Threading, ntdll-ext4-case-folder, server-PeekMessage, server-Signal_Thread,
-# | 	loader-KeyboardLayouts, server-Shared_Memory, ws2_32-WSACleanup, eventfd_synchronization
+# |   *	ws2_32-WSACleanup
 # |
 # | This patchset fixes the following Wine bugs:
 # |   *	[#46967] GOG Galaxy doesn't run in virtual desktop.
@@ -5320,6 +4856,36 @@ if test "$enable_server_Object_Types" -eq 1; then
 	) >> "$patchlist"
 fi
 
+# Patchset server-PeekMessage
+# |
+# | This patchset fixes the following Wine bugs:
+# |   *	[#28884] GetMessage should remove already seen messages with higher priority
+# |
+# | Modified files:
+# |   *	dlls/user32/tests/msg.c, server/queue.c
+# |
+if test "$enable_server_PeekMessage" -eq 1; then
+	patch_apply server-PeekMessage/0001-server-Fix-handling-of-GetMessage-after-previous-Pee.patch
+	(
+		printf '%s\n' '+    { "Sebastian Lackner", "server: Fix handling of GetMessage after previous PeekMessage call.", 3 },';
+	) >> "$patchlist"
+fi
+
+# Patchset server-Realtime_Priority
+# |
+# | This patchset has the following (direct or indirect) dependencies:
+# |   *	ntdll-ThreadTime
+# |
+# | Modified files:
+# |   *	server/Makefile.in, server/main.c, server/scheduler.c, server/thread.c, server/thread.h
+# |
+if test "$enable_server_Realtime_Priority" -eq 1; then
+	patch_apply server-Realtime_Priority/0001-wineserver-Draft-to-implement-priority-levels-throug.patch
+	(
+		printf '%s\n' '+    { "Joakim Hernberg", "wineserver: Draft to implement priority levels through POSIX scheduling policies on linux.", 1 },';
+	) >> "$patchlist"
+fi
+
 # Patchset server-Registry_Notifications
 # |
 # | Modified files:
@@ -5334,6 +4900,18 @@ if test "$enable_server_Registry_Notifications" -eq 1; then
 	) >> "$patchlist"
 fi
 
+# Patchset server-Signal_Thread
+# |
+# | Modified files:
+# |   *	server/thread.c, server/thread.h
+# |
+if test "$enable_server_Signal_Thread" -eq 1; then
+	patch_apply server-Signal_Thread/0001-server-Do-not-signal-thread-until-it-is-really-gone.patch
+	(
+		printf '%s\n' '+    { "Sebastian Lackner", "server: Do not signal violently terminated threads until they are really gone.", 1 },';
+	) >> "$patchlist"
+fi
+
 # Patchset setupapi-DiskSpaceList
 # |
 # | Modified files:
@@ -6969,11 +6635,7 @@ fi
 # Patchset ws2_32-TransmitFile
 # |
 # | This patchset has the following (direct or indirect) dependencies:
-# |   *	Staging, advapi32-CreateRestrictedToken, advapi32-Token_Integrity_Level, kernel32-K32GetPerformanceInfo, ntdll-
-# | 	Junction_Points, winebuild-Fake_Dlls, ntdll-RtlCreateUserThread, ntdll-SystemRoot_Symlink, ntdll-ThreadTime, server-
-# | 	Realtime_Priority, ntdll-Threading, ntdll-ext4-case-folder, server-PeekMessage, server-Signal_Thread,
-# | 	loader-KeyboardLayouts, server-Shared_Memory, ws2_32-WSACleanup, eventfd_synchronization,
-# | 	server-Desktop_Refcount
+# |   *	ws2_32-WSACleanup, server-Desktop_Refcount
 # |
 # | Modified files:
 # |   *	dlls/ws2_32/socket.c, dlls/ws2_32/tests/sock.c, include/winsock.h, server/protocol.def, server/sock.c
diff --git a/patches/server-Desktop_Refcount/0001-server-Introduce-a-new-alloc_handle-object-callback..patch b/patches/server-Desktop_Refcount/0001-server-Introduce-a-new-alloc_handle-object-callback..patch
index 69c400d52..645514f53 100644
--- a/patches/server-Desktop_Refcount/0001-server-Introduce-a-new-alloc_handle-object-callback..patch
+++ b/patches/server-Desktop_Refcount/0001-server-Introduce-a-new-alloc_handle-object-callback..patch
@@ -214,31 +213,19 @@ index 8083c686e11..a1e631d435f 100644
      no_close_handle,              /* close_handle */
      directory_destroy             /* destroy */
  };
-diff --git a/server/esync.c b/server/esync.c
-index 1b035bdb066..4563b97573a 100644
---- a/server/esync.c
-+++ b/server/esync.c
-@@ -140,6 +140,7 @@ const struct object_ops esync_ops =
-     default_unlink_name,       /* unlink_name */
-     no_open_file,              /* open_file */
-     no_kernel_obj_list,        /* get_kernel_obj_list */
-+    no_alloc_handle,           /* alloc_handle */
-     no_close_handle,           /* close_handle */
-     esync_destroy              /* destroy */
- };
 diff --git a/server/event.c b/server/event.c
-index 79287e7edc0..ad8fddbfade 100644
+index d339d85aa45..a78d73d9e78 100644
 --- a/server/event.c
 +++ b/server/event.c
-@@ -76,6 +76,7 @@ static const struct object_ops event_ops =
+@@ -71,6 +71,7 @@ static const struct object_ops event_ops =
      default_unlink_name,       /* unlink_name */
      no_open_file,              /* open_file */
      event_get_kernel_obj_list, /* get_kernel_obj_list */
 +    no_alloc_handle,           /* alloc_handle */
      no_close_handle,           /* close_handle */
-     event_destroy              /* destroy */
+     no_destroy                 /* destroy */
  };
-@@ -111,6 +112,7 @@ static const struct object_ops keyed_event_ops =
+@@ -105,6 +106,7 @@ static const struct object_ops keyed_event_ops =
      default_unlink_name,         /* unlink_name */
      no_open_file,                /* open_file */
      no_kernel_obj_list,          /* get_kernel_obj_list */
 
diff --git a/patches/server-Desktop_Refcount/definition b/patches/server-Desktop_Refcount/definition
index c56a7052a..413dc31ad 100644
--- a/patches/server-Desktop_Refcount/definition
+++ b/patches/server-Desktop_Refcount/definition
@@ -1,5 +1,4 @@
 Fixes: Fix possible leak of explorer.exe processes and implement proper desktop refcounting
 Fixes: Assign random name when trying to create Window Station without name
 Fixes: [46967] GOG Galaxy doesn't run in virtual desktop.
-Depends: eventfd_synchronization
 Depends: ws2_32-WSACleanup
diff --git a/patches/server-FileEndOfFileInformation/0001-ntdll-Set-EOF-on-file-which-has-a-memory-mapping-sho.patch b/patches/server-FileEndOfFileInformation/0001-ntdll-Set-EOF-on-file-which-has-a-memory-mapping-sho.patch
index a243e0342..229655b27 100644
--- a/patches/server-FileEndOfFileInformation/0001-ntdll-Set-EOF-on-file-which-has-a-memory-mapping-sho.patch
+++ b/patches/server-FileEndOfFileInformation/0001-ntdll-Set-EOF-on-file-which-has-a-memory-mapping-sho.patch
@@ -1,26 +1,27 @@
-From 3b5ea5ff15907d1d8f1902a08451b0a03eb11dc9 Mon Sep 17 00:00:00 2001
+From ed63a76dc481da8af510fb8f9ae6c399ca0ca0ac Mon Sep 17 00:00:00 2001
 From: Qian Hong <qhong@codeweavers.com>
 Date: Fri, 21 Aug 2015 21:58:51 +0800
-Subject: ntdll: Set EOF on file which has a memory mapping should fail.
+Subject: [PATCH] ntdll: Set EOF on file which has a memory mapping should
+ fail.
 
 ---
- dlls/ntdll/file.c   | 27 +++++++-------------------
- server/fd.c         | 55 +++++++++++++++++++++++++++++++++++++++++++++++++++++
- server/protocol.def |  7 +++++++
+ dlls/ntdll/file.c   | 27 ++++++----------------
+ server/fd.c         | 55 +++++++++++++++++++++++++++++++++++++++++++++
+ server/protocol.def |  7 ++++++
  3 files changed, 69 insertions(+), 20 deletions(-)
 
 diff --git a/dlls/ntdll/file.c b/dlls/ntdll/file.c
-index be6b591..8c9b076 100644
+index 013706889bb..a28ae265687 100644
 --- a/dlls/ntdll/file.c
 +++ b/dlls/ntdll/file.c
-@@ -2650,30 +2650,17 @@ NTSTATUS WINAPI NtSetInformationFile(HANDLE handle, PIO_STATUS_BLOCK io,
+@@ -2747,30 +2747,17 @@ NTSTATUS WINAPI NtSetInformationFile(HANDLE handle, PIO_STATUS_BLOCK io,
      case FileEndOfFileInformation:
          if (len >= sizeof(FILE_END_OF_FILE_INFORMATION))
          {
 -            struct stat st;
              const FILE_END_OF_FILE_INFORMATION *info = ptr;
  
--            if ((io->u.Status = server_get_unix_fd( handle, 0, &fd, &needs_close, NULL, NULL )))
+-            if ((io->u.Status = unix_funcs->server_get_unix_fd( handle, 0, &fd, &needs_close, NULL, NULL )))
 -                return io->u.Status;
 -
 -            /* first try normal truncate */
 
diff --git a/patches/server-Object_Types/0003-server-Register-types-during-startup.patch b/patches/server-Object_Types/0003-server-Register-types-during-startup.patch
index 1905f8f18..769f1f3c4 100644
--- a/patches/server-Object_Types/0003-server-Register-types-during-startup.patch
+++ b/patches/server-Object_Types/0003-server-Register-types-during-startup.patch
@@ -116,22 +116,22 @@ index 781e6f3141a..42350048877 100644
  }
  
 diff --git a/server/main.c b/server/main.c
-index 43297a3e93d..0a628c30e2d 100644
+index efb205f5292..fee10ea3d37 100644
 --- a/server/main.c
 +++ b/server/main.c
-@@ -146,6 +146,7 @@ int main( int argc, char *argv[] )
+@@ -145,6 +145,7 @@ int main( int argc, char *argv[] )
+     init_signals();
      init_directories();
      init_registry();
-     init_shared_memory();
 +    init_types();
      main_loop();
      return 0;
  }
 diff --git a/server/mapping.c b/server/mapping.c
-index 2a2803404cc..24ab0f63e48 100644
+index 0941dd87c05..88894661025 100644
 --- a/server/mapping.c
 +++ b/server/mapping.c
-@@ -979,8 +979,7 @@ static void mapping_dump( struct object *obj, int verbose )
+@@ -915,8 +915,7 @@ static void mapping_dump( struct object *obj, int verbose )
  
  static struct object_type *mapping_get_type( struct object *obj )
  {

diff --git a/patches/server-Object_Types/definition b/patches/server-Object_Types/definition
index 9f2708c1a..724bb014f 100644
--- a/patches/server-Object_Types/definition
+++ b/patches/server-Object_Types/definition
@@ -1,3 +1,3 @@
 Fixes: [44629] Process Hacker can't enumerate handles
 Fixes: [45374] Yet Another Process Monitor (.NET 2.0 app) reports System.AccessViolationException
-Depends: server-Shared_Memory
+#Depends: server-Shared_Memory
diff --git a/patches/server-Shared_Memory/definition b/patches/server-Shared_Memory/definition
index 644589e66..316338467 100644
--- a/patches/server-Shared_Memory/definition
+++ b/patches/server-Shared_Memory/definition
@@ -7,3 +7,5 @@ Depends: server-PeekMessage
 Depends: server-Signal_Thread
 Depends: user32-rawinput-nolegacy
 Depends: ntdll-ext4-case-folder
+# This is not worth rebasing right now.
+Disabled: true
diff --git a/patches/wineboot-DriveSerial/0001-wineboot-Assign-a-drive-serial-number-during-prefix-.patch b/patches/wineboot-DriveSerial/0001-wineboot-Assign-a-drive-serial-number-during-prefix-.patch
index 427455553..093120d00 100644
--- a/patches/wineboot-DriveSerial/0001-wineboot-Assign-a-drive-serial-number-during-prefix-.patch
+++ b/patches/wineboot-DriveSerial/0001-wineboot-Assign-a-drive-serial-number-during-prefix-.patch
@@ -57,14 +57,14 @@ index e1dbe6630..f8b0c4d74 100644
  /* create the volatile hardware registry keys */
  static void create_hardware_registry_keys(void)
  {
-@@ -1694,6 +1725,7 @@ int __cdecl main( int argc, char *argv[] )
- 
+@@ -1590,6 +1621,7 @@ int __cdecl main( int argc, char *argv[] )
      ResetEvent( event );  /* in case this is a restart */
  
+     create_user_shared_data();
 +    create_disk_serial_number();
      create_hardware_registry_keys();
      create_dynamic_registry_keys();
      create_environment_registry_keys();
 -- 
-2.25.0
+2.26.2
 
diff --git a/patches/ws2_32-WSACleanup/0002-ws2_32-Invalidate-client-side-file-descriptor-cache-.patch b/patches/ws2_32-WSACleanup/0002-ws2_32-Invalidate-client-side-file-descriptor-cache-.patch
index 7c65d3baa..384fc90af 100644
--- a/patches/ws2_32-WSACleanup/0002-ws2_32-Invalidate-client-side-file-descriptor-cache-.patch
+++ b/patches/ws2_32-WSACleanup/0002-ws2_32-Invalidate-client-side-file-descriptor-cache-.patch
@@ -24,19 +29,49 @@ index c3b6bf0..2b52562 100644
  @ cdecl wine_server_handle_to_fd(long long ptr ptr)
  @ cdecl wine_server_release_fd(long long)
 diff --git a/dlls/ntdll/server.c b/dlls/ntdll/server.c
-index 356d631..381d5aa 100644
+index ed4e3f25531..ae1e41a485e 100644
 --- a/dlls/ntdll/server.c
 +++ b/dlls/ntdll/server.c
-@@ -915,6 +915,30 @@ int server_remove_fd_from_cache( HANDLE handle )
+@@ -687,6 +687,14 @@ void CDECL wine_server_release_fd( HANDLE handle, int unix_fd )
+     unix_funcs->server_release_fd( handle, unix_fd );
+ }
  
- 
- /***********************************************************************
++ /***********************************************************************
 + *           wine_server_close_fds_by_type
-+ *
-+ * Needed for a proper implementation of WSACleanup.
 + */
 +void CDECL wine_server_close_fds_by_type( enum server_fd_type type )
 +{
++    unix_funcs->server_remove_fds_from_cache_by_type( type );
++}
++
+ 
+ /***********************************************************************
+  *           server_init_process
+diff --git a/dlls/ntdll/unix/loader.c b/dlls/ntdll/unix/loader.c
+index 4a3f101d301..8b10964603e 100644
+--- a/dlls/ntdll/unix/loader.c
++++ b/dlls/ntdll/unix/loader.c
+@@ -1000,6 +1000,7 @@ static struct unix_funcs unix_funcs =
+     wine_server_call,
+     server_send_fd,
+     server_remove_fd_from_cache,
++    server_remove_fds_from_cache_by_type,
+     server_get_unix_fd,
+     server_fd_to_handle,
+     server_handle_to_fd,
+diff --git a/dlls/ntdll/unix/server.c b/dlls/ntdll/unix/server.c
+index 8dc3f33bc80..dd2cb6cf5e2 100644
+--- a/dlls/ntdll/unix/server.c
++++ b/dlls/ntdll/unix/server.c
+@@ -559,6 +559,26 @@ int CDECL server_remove_fd_from_cache( HANDLE handle )
+     return fd;
+ }
+ 
++/***********************************************************************
++ *           server_remove_fds_from_cache_by_type
++ */
++void CDECL server_remove_fds_from_cache_by_type( enum server_fd_type type )
++{
 +    union fd_cache_entry cache;
 +    unsigned int entry, idx;
 +
@@ -52,17 +87,47 @@ index 356d631..381d5aa 100644
 +        }
 +    }
 +}
-+
-+
-+/***********************************************************************
+ 
+ /***********************************************************************
   *           server_get_unix_fd
-  *
-  * The returned unix_fd should be closed iff needs_close is non-zero.
+diff --git a/dlls/ntdll/unix/unix_private.h b/dlls/ntdll/unix/unix_private.h
+index 2bf39f85371..32c03fd8983 100644
+--- a/dlls/ntdll/unix/unix_private.h
++++ b/dlls/ntdll/unix/unix_private.h
+@@ -63,6 +63,7 @@ extern void CDECL dbg_init(void) DECLSPEC_HIDDEN;
+ extern unsigned int CDECL server_call_unlocked( void *req_ptr ) DECLSPEC_HIDDEN;
+ extern void CDECL server_send_fd( int fd ) DECLSPEC_HIDDEN;
+ extern int CDECL server_remove_fd_from_cache( HANDLE handle ) DECLSPEC_HIDDEN;
++extern void CDECL server_remove_fds_from_cache_by_type( enum server_fd_type type ) DECLSPEC_HIDDEN;
+ extern int CDECL server_get_unix_fd( HANDLE handle, unsigned int wanted_access, int *unix_fd,
+                                      int *needs_close, enum server_fd_type *type,
+                                      unsigned int *options ) DECLSPEC_HIDDEN;
+diff --git a/dlls/ntdll/unixlib.h b/dlls/ntdll/unixlib.h
+index 142e8956e7e..452c725dfde 100644
+--- a/dlls/ntdll/unixlib.h
++++ b/dlls/ntdll/unixlib.h
+@@ -25,7 +25,7 @@
+ #include "wine/debug.h"
+ 
+ /* increment this when you change the function table */
+-#define NTDLL_UNIXLIB_VERSION 10
++#define NTDLL_UNIXLIB_VERSION 11
+ 
+ struct unix_funcs
+ {
+@@ -55,6 +55,7 @@ struct unix_funcs
+     unsigned int  (CDECL *server_call)( void *req_ptr );
+     void          (CDECL *server_send_fd)( int fd );
+     int           (CDECL *server_remove_fd_from_cache)( HANDLE handle );
++    void          (CDECL *server_remove_fds_from_cache_by_type)( enum server_fd_type type );
+     int           (CDECL *server_get_unix_fd)( HANDLE handle, unsigned int wanted_access, int *unix_fd,
+                                                int *needs_close, enum server_fd_type *type, unsigned int *options );
+     NTSTATUS      (CDECL *server_fd_to_handle)( int fd, unsigned int access, unsigned int attributes,
 diff --git a/dlls/ws2_32/socket.c b/dlls/ws2_32/socket.c
-index ea45397..c50d2b6 100644
+index bbc44ca2c20..37d110d216f 100644
 --- a/dlls/ws2_32/socket.c
 +++ b/dlls/ws2_32/socket.c
-@@ -1495,6 +1495,7 @@ INT WINAPI WSACleanup(void)
+@@ -1729,6 +1729,7 @@ INT WINAPI WSACleanup(void)
  
      if (!--num_startup)
      {
 
diff --git a/patches/ntdll-NtQueryVirtualMemory/0008-ntdll-Resolve-drive-symlinks-before-returning-sectio.patch b/patches/ntdll-NtQueryVirtualMemory/0008-ntdll-Resolve-drive-symlinks-before-returning-sectio.patch
index b125f578e..81e23dc88 100644
--- a/patches/ntdll-NtQueryVirtualMemory/0008-ntdll-Resolve-drive-symlinks-before-returning-sectio.patch
+++ b/patches/ntdll-NtQueryVirtualMemory/0008-ntdll-Resolve-drive-symlinks-before-returning-sectio.patch
@@ -36,19 +36,19 @@ index 427cdaad441..f92adb0c0dc 100644
                                       const LARGE_INTEGER *offset_ptr, SIZE_T *size_ptr, ULONG alloc_type,
                                       ULONG protect, pe_image_info_t *image_info ) DECLSPEC_HIDDEN;
 diff --git a/dlls/ntdll/virtual.c b/dlls/ntdll/virtual.c
-index fb9a1a57729..89ed3bb3f0b 100644
+index cc1d6e5d6f2..3d53b92cb8e 100644
 --- a/dlls/ntdll/virtual.c
 +++ b/dlls/ntdll/virtual.c
-@@ -188,6 +188,8 @@ static BYTE **pages_vprot;
+@@ -192,6 +192,8 @@ static BYTE **pages_vprot;
  static BYTE *pages_vprot;
  #endif
  
 +#define MAX_DIR_ENTRY_LEN 255  /* max length of a directory entry in chars */
 +
  static struct file_view *view_block_start, *view_block_end, *next_free_view;
- static const size_t view_block_size = 0x100000;
- static void *preload_reserve_start;
-@@ -3471,12 +3473,15 @@ static NTSTATUS get_section_name( HANDLE process, LPCVOID addr,
+ #ifdef _WIN64
+ static const size_t view_block_size = 0x200000;
+@@ -3713,12 +3715,15 @@ static NTSTATUS get_section_name( HANDLE process, LPCVOID addr,
                                    MEMORY_SECTION_NAME *info,
                                    SIZE_T len, SIZE_T *res_len )
  {

diff --git a/patches/server-Shared_Memory/0005-user32-Get-rid-of-wineserver-call-for-GetLastInputIn.patch b/patches/server-Shared_Memory/0005-user32-Get-rid-of-wineserver-call-for-GetLastInputIn.patch
index aa1e8fd9f..e4afbfb98 100644
--- a/patches/server-Shared_Memory/0005-user32-Get-rid-of-wineserver-call-for-GetLastInputIn.patch
+++ b/patches/server-Shared_Memory/0005-user32-Get-rid-of-wineserver-call-for-GetLastInputIn.patch
@@ -54,9 +54,9 @@ index 4872251..f12109f 100644
 --- a/server/queue.c
 +++ b/server/queue.c
-@@ -1490,6 +1490,7 @@ static void queue_hardware_message( struct desktop *desktop, struct message *msg
+@@ -1600,6 +1600,7 @@ static void queue_hardware_message( struct desktop *desktop, struct message *msg
  
-     update_input_key_state( desktop, desktop->keystate, msg->msg, msg->wparam );
+     update_key_state( desktop, desktop->keystate, msg->msg, msg->wparam );
      last_input_time = get_tick_count();
 +    if (shmglobal) shmglobal->last_input_time = last_input_time;
      if (msg->msg != WM_MOUSEMOVE) always_queue = 1; 
 
diff --git a/patches/server-Shared_Memory/0007-server-Store-a-list-of-associated-queues-for-each-th.patch b/patches/server-Shared_Memory/0007-server-Store-a-list-of-associated-queues-for-each-th.patch
index aa1e8fd9f..e4afbfb98 100644
--- a/patches/server-Shared_Memory/0007-server-Store-a-list-of-associated-queues-for-each-th.patch
+++ b/patches/server-Shared_Memory/0007-server-Store-a-list-of-associated-queues-for-each-th.patch
@@ -31,9 +31,9 @@
      timeout_t              last_get_msg;    /* time of last get message call */
      unsigned int           ignore_post_msg; /* ignore post messages newer than this unique id */
 @@ -254,6 +256,7 @@ static struct thread_input *create_thread_input( struct thread *thread )
-         input->move_size    = 0;
          input->cursor       = 0;
          input->cursor_count = 0;
+         input->lock_count   = 0;
 +        list_init( &input->queues );
          list_init( &input->msg_list );
          set_caret_window( input, 0 );
@@ -45,12 +45,13 @@
          queue->hooks           = NULL;
          queue->last_get_msg    = current_time;
          queue->ignore_post_msg = 0;
-@@ -336,9 +340,11 @@ static int assign_thread_input( struct thread *thread, struct thread_input *new_
+@@ -336,10 +340,12 @@ static int assign_thread_input( struct thread *thread, struct thread_input *new_
-     if (queue->input)
      {
+         if (queue->keystate_locked) queue->input->lock_count--;
          queue->input->cursor_count -= queue->cursor_count;
 +        list_remove( &queue->input_entry );
          release_object( queue->input );
+         queue->keystate_locked = 0;
      }
      queue->input = (struct thread_input *)grab_object( new_input );
 +    list_add_tail( &new_input->queues, &queue->input_entry );
@@ -59,8 +59,8 @@
         free( timer );
  }
 @@ -1003,6 +1009,7 @@ static void msg_queue_destroy( struct object *obj )
-     }
      if (queue->timeout) remove_timeout_user( queue->timeout );
+     if (queue->keystate_locked) queue->input->lock_count--;
      queue->input->cursor_count -= queue->cursor_count;
 +    list_remove( &queue->input_entry );
      release_object( queue->input );

diff --git a/patches/eventfd_synchronization/0079-ntdll-server-Revert-to-old-implementation-of-hung-qu.patch b/patches/eventfd_synchronization/0079-ntdll-server-Revert-to-old-implementation-of-hung-qu.patch
index a22615aae..b3e73dd89 100644
--- a/patches/eventfd_synchronization/0079-ntdll-server-Revert-to-old-implementation-of-hung-qu.patch
+++ b/patches/eventfd_synchronization/0079-ntdll-server-Revert-to-old-implementation-of-hung-qu.patch
@@ -177,8 +177,8 @@ index 174a4ac09..56fa4d98c 100644
  
      if (!(msg = mem_alloc( sizeof(*msg) ))) return 0;
 @@ -3432,3 +3442,14 @@ DECL_HANDLER(get_rawinput_devices)
-     e = find_rawinput_device( 1, 6 );
-     current->process->rawinput_kbd   = e ? &e->device : NULL;
+ 
+     set_reply_data_ptr( devices, device_count * sizeof (*devices) );
  }
 +
 +DECL_HANDLER(esync_msgwait)
