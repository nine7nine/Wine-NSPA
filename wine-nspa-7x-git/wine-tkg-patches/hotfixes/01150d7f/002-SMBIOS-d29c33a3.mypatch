From a4b80f9163f87ef27a27febeb200804489f0ebc9 Mon Sep 17 00:00:00 2001
From: Tk-Glitch <ti3nou@gmail.com>
Date: Thu, 6 Aug 2020 15:09:13 +0200
Subject: hotfix-rebased d29c33a3 & 734a7120 & f7895ef2


diff --git a/dlls/ntdll/nt.c b/dlls/ntdll/nt.c
index 2d2f135576..6455b90b94 100644
--- a/dlls/ntdll/nt.c
+++ b/dlls/ntdll/nt.c
@@ -135,6 +135,12 @@ struct smbios_board {
     BYTE product;
     BYTE version;
     BYTE serial;
+    BYTE asset_tag;
+    BYTE feature_flags;
+    BYTE location;
+    WORD chassis_handle;
+    BYTE board_type;
+    BYTE num_contained_handles;
 };
 
 struct smbios_chassis {
@@ -148,6 +154,18 @@ struct smbios_chassis {
     BYTE power_supply_state;
     BYTE thermal_state;
     BYTE security_status;
+    DWORD oem_defined;
+    BYTE height;
+    BYTE num_power_cords;
+    BYTE num_contained_elements;
+    BYTE contained_element_rec_length;
+};
+
+struct smbios_boot_info
+{
+    struct smbios_header hdr;
+    BYTE reserved[6];
+    BYTE boot_status[10];
 };
 
 #include "poppack.h"
@@ -2247,8 +2265,8 @@ static NTSTATUS get_firmware_info(SYSTEM_FIRMWARE_TABLE_INFORMATION *sfti, ULONG
             size_t system_vendor_len, system_product_len, system_version_len, system_serial_len;
             char system_sku[128], system_family[128];
             size_t system_sku_len, system_family_len;
-            char board_vendor[128], board_product[128], board_version[128], board_serial[128];
-            size_t board_vendor_len, board_product_len, board_version_len, board_serial_len;
+            char board_vendor[128], board_product[128], board_version[128], board_serial[128], board_asset_tag[128];
+            size_t board_vendor_len, board_product_len, board_version_len, board_serial_len, board_asset_tag_len;
             char chassis_vendor[128], chassis_version[128], chassis_serial[128], chassis_asset_tag[128];
             char chassis_type[11] = "2"; /* unknown */
             size_t chassis_vendor_len, chassis_version_len, chassis_serial_len, chassis_asset_tag_len;
@@ -2260,6 +2278,7 @@ static NTSTATUS get_firmware_info(SYSTEM_FIRMWARE_TABLE_INFORMATION *sfti, ULONG
             struct smbios_system *system;
             struct smbios_board *board;
             struct smbios_chassis *chassis;
+            struct smbios_boot_info *boot_info;
             struct smbios_header *end_of_table;
 
 #define S(s) s, sizeof(s)
@@ -2276,6 +2295,7 @@ static NTSTATUS get_firmware_info(SYSTEM_FIRMWARE_TABLE_INFORMATION *sfti, ULONG
             board_product_len = get_smbios_string("/sys/class/dmi/id/board_name", S(board_product));
             board_version_len = get_smbios_string("/sys/class/dmi/id/board_version", S(board_version));
             board_serial_len = get_smbios_string("/sys/class/dmi/id/board_serial", S(board_serial));
+            board_asset_tag_len = get_smbios_string("/sys/class/dmi/id/board_asset_tag", S(board_asset_tag));
             chassis_vendor_len = get_smbios_string("/sys/class/dmi/id/chassis_vendor", S(chassis_vendor));
             chassis_version_len = get_smbios_string("/sys/class/dmi/id/chassis_version", S(chassis_version));
             chassis_serial_len = get_smbios_string("/sys/class/dmi/id/chassis_serial", S(chassis_serial));
@@ -2294,12 +2314,16 @@ static NTSTATUS get_firmware_info(SYSTEM_FIRMWARE_TABLE_INFORMATION *sfti, ULONG
                                  L(system_serial_len) + L(system_sku_len) + L(system_family_len) + 1, 2);
 
             *required_len += sizeof(struct smbios_board);
-            *required_len += max(L(board_vendor_len) + L(board_product_len) + L(board_version_len) + L(board_serial_len) + 1, 2);
+            *required_len += max(L(board_vendor_len) + L(board_product_len) + L(board_version_len) +
+                                 L(board_serial_len) + L(board_asset_tag_len) + 1, 2);
 
             *required_len += sizeof(struct smbios_chassis);
             *required_len += max(L(chassis_vendor_len) + L(chassis_version_len) + L(chassis_serial_len) +
                                  L(chassis_asset_tag_len) + 1, 2);
 
+            *required_len += sizeof(struct smbios_boot_info);
+            *required_len += 2;
+
             *required_len += sizeof(struct smbios_header);
             *required_len += 2;
 #undef L
@@ -2368,24 +2392,6 @@ static NTSTATUS get_firmware_info(SYSTEM_FIRMWARE_TABLE_INFORMATION *sfti, ULONG
             if (!string_count) *buffer++ = 0;
             *buffer++ = 0;
 
-            string_count = 0;
-            board = (struct smbios_board*)buffer;
-            board->hdr.type = 2;
-            board->hdr.length = sizeof(struct smbios_board);
-            board->hdr.handle = handle_count++;
-            board->vendor = board_vendor_len ? ++string_count : 0;
-            board->product = board_product_len ? ++string_count : 0;
-            board->version = board_version_len ? ++string_count : 0;
-            board->serial = board_serial_len ? ++string_count : 0;
-            buffer += sizeof(struct smbios_board);
-
-            copy_smbios_string(&buffer, board_vendor, board_vendor_len);
-            copy_smbios_string(&buffer, board_product, board_product_len);
-            copy_smbios_string(&buffer, board_version, board_version_len);
-            copy_smbios_string(&buffer, board_serial, board_serial_len);
-            if (!string_count) *buffer++ = 0;
-            *buffer++ = 0;
-
             string_count = 0;
             chassis = (struct smbios_chassis*)buffer;
             chassis->hdr.type = 3;
@@ -2400,6 +2406,11 @@ static NTSTATUS get_firmware_info(SYSTEM_FIRMWARE_TABLE_INFORMATION *sfti, ULONG
             chassis->power_supply_state = 0x02; /* unknown */
             chassis->thermal_state = 0x02; /* unknown */
             chassis->security_status = 0x02; /* unknown */
+            chassis->oem_defined = 0;
+            chassis->height = 0; /* undefined */
+            chassis->num_power_cords = 0; /* unspecified */
+            chassis->num_contained_elements = 0;
+            chassis->contained_element_rec_length = 3;
             buffer += sizeof(struct smbios_chassis);
 
             copy_smbios_string(&buffer, chassis_vendor, chassis_vendor_len);
@@ -2409,6 +2420,41 @@ static NTSTATUS get_firmware_info(SYSTEM_FIRMWARE_TABLE_INFORMATION *sfti, ULONG
             if (!string_count) *buffer++ = 0;
             *buffer++ = 0;
 
+            string_count = 0;
+            board = (struct smbios_board*)buffer;
+            board->hdr.type = 2;
+            board->hdr.length = sizeof(struct smbios_board);
+            board->hdr.handle = handle_count++;
+            board->vendor = board_vendor_len ? ++string_count : 0;
+            board->product = board_product_len ? ++string_count : 0;
+            board->version = board_version_len ? ++string_count : 0;
+            board->serial = board_serial_len ? ++string_count : 0;
+            board->asset_tag = board_asset_tag_len ? ++string_count : 0;
+            board->feature_flags = 0x5; /* hosting board, removable */
+            board->location = 0;
+            board->chassis_handle = chassis->hdr.handle;
+            board->board_type = 0xa; /* motherboard */
+            board->num_contained_handles = 0;
+            buffer += sizeof(struct smbios_board);
+
+            copy_smbios_string(&buffer, board_vendor, board_vendor_len);
+            copy_smbios_string(&buffer, board_product, board_product_len);
+            copy_smbios_string(&buffer, board_version, board_version_len);
+            copy_smbios_string(&buffer, board_serial, board_serial_len);
+            copy_smbios_string(&buffer, board_asset_tag, board_asset_tag_len);
+            if (!string_count) *buffer++ = 0;
+            *buffer++ = 0;
+
+            boot_info = (struct smbios_boot_info*)buffer;
+            boot_info->hdr.type = 32;
+            boot_info->hdr.length = sizeof(struct smbios_boot_info);
+            boot_info->hdr.handle = handle_count++;
+            memset(boot_info->reserved, 0, sizeof(boot_info->reserved));
+            memset(boot_info->boot_status, 0, sizeof(boot_info->boot_status)); /* no errors detected */
+            buffer += sizeof(struct smbios_boot_info);
+            *buffer++ = 0;
+            *buffer++ = 0;
+
             end_of_table = (struct smbios_header*)buffer;
             end_of_table->type = 127;
             end_of_table->length = sizeof(struct smbios_header);
