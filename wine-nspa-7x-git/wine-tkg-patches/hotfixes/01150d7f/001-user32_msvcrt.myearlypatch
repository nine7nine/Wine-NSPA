From 9cc92365560f19c2fd2b9796f79aa75e02381bb1 Mon Sep 17 00:00:00 2001
From: Alexandre Julliard <julliard@winehq.org>
Date: Mon, 21 Sep 2020 13:53:21 +0200
Subject: [PATCH] user32: Build with msvcrt.

Signed-off-by: Alexandre Julliard <julliard@winehq.org>
---
 dlls/kernel32/tests/loader.c |  2 +-
 dlls/user32/Makefile.in      |  2 ++
 dlls/user32/caret.c          |  3 --
 dlls/user32/class.c          | 31 ++++++++++-----------
 dlls/user32/clipboard.c      |  8 +-----
 dlls/user32/combo.c          |  1 -
 dlls/user32/cursoricon.c     |  8 ++----
 dlls/user32/dde_misc.c       |  6 +---
 dlls/user32/dde_server.c     |  4 +--
 dlls/user32/defwnd.c         | 14 ++++------
 dlls/user32/desktop.c        |  8 +-----
 dlls/user32/dialog.c         | 38 ++++++++++++-------------
 dlls/user32/driver.c         | 12 ++++----
 dlls/user32/edit.c           | 33 ++++++++++------------
 dlls/user32/exticon.c        |  5 ----
 dlls/user32/focus.c          |  3 --
 dlls/user32/hook.c           |  9 ++----
 dlls/user32/icontitle.c      | 10 ++-----
 dlls/user32/input.c          |  4 ---
 dlls/user32/listbox.c        | 40 +++++++++++++-------------
 dlls/user32/lstr.c           |  3 --
 dlls/user32/mdi.c            | 14 +++++-----
 dlls/user32/menu.c           | 26 ++++++++---------
 dlls/user32/message.c        | 16 ++++-------
 dlls/user32/misc.c           |  3 --
 dlls/user32/nonclient.c      |  7 +++--
 dlls/user32/painting.c       |  3 --
 dlls/user32/property.c       | 11 +++-----
 dlls/user32/rawinput.c       |  5 ++--
 dlls/user32/resource.c       |  2 --
 dlls/user32/scroll.c         |  2 --
 dlls/user32/spy.c            |  7 ++---
 dlls/user32/sysparams.c      | 54 +++++++++++++++++-------------------
 dlls/user32/text.c           | 16 ++++-------
 dlls/user32/uitools.c        |  3 +-
 dlls/user32/user_main.c      | 35 ++++++++++++-----------
 dlls/user32/user_private.h   |  3 +-
 dlls/user32/win.c            | 29 +++++++++----------
 dlls/user32/winhelp.c        |  8 ++----
 dlls/user32/winpos.c         |  3 --
 dlls/user32/winproc.c        | 17 +++++-------
 dlls/user32/winstation.c     | 26 ++++++++---------
 42 files changed, 216 insertions(+), 318 deletions(-)

diff --git a/dlls/kernel32/tests/loader.c b/dlls/kernel32/tests/loader.c
index 33073820240..47f02a06042 100644
--- a/dlls/kernel32/tests/loader.c
+++ b/dlls/kernel32/tests/loader.c
@@ -4045,7 +4045,6 @@ START_TEST(loader)
     test_dll_file( "ntdll.dll" );
     test_dll_file( "kernel32.dll" );
     test_dll_file( "advapi32.dll" );
-    test_dll_file( "user32.dll" );
     /* loader test must be last, it can corrupt the internal loader state on Windows */
     test_Loader();
 }
diff --git a/dlls/user32/Makefile.in b/dlls/user32/Makefile.in
index dbb620cdf84..c371e1fc28e 100644
--- a/dlls/user32/Makefile.in
+++ b/dlls/user32/Makefile.in
@@ -5,6 +5,8 @@ IMPORTS   = setupapi gdi32 version sechost advapi32 kernelbase
 EXTRAINCL = $(PNG_CFLAGS)
 DELAYIMPORTS = hid imm32 usp10
 
+EXTRADLLFLAGS = -mno-cygwin
+
 C_SRCS = \
 	button.c \
 	caret.c \
diff --git a/dlls/user32/caret.c b/dlls/user32/caret.c
index 686dade4103..2da7e02ca1a 100644
--- a/dlls/user32/caret.c
+++ b/dlls/user32/caret.c
@@ -21,9 +21,6 @@
  * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301, USA
  */
 
-#include "config.h"
-#include "wine/port.h"
-
 #include <stdarg.h>
 
 #include "windef.h"
diff --git a/dlls/user32/class.c b/dlls/user32/class.c
index 5383b6771fb..7a09502f28f 100644
--- a/dlls/user32/class.c
+++ b/dlls/user32/class.c
@@ -19,9 +19,6 @@
  * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301, USA
  */
 
-#include "config.h"
-#include "wine/port.h"
-
 #include <assert.h>
 #include <stdarg.h>
 #include <stdlib.h>
@@ -31,7 +28,7 @@
 #include "windef.h"
 #include "winbase.h"
 #include "wingdi.h"
-#include "wine/unicode.h"
+#include "winnls.h"
 #include "win.h"
 #include "user_private.h"
 #include "controls.h"
@@ -155,7 +152,7 @@ static BOOL is_comctl32_class( const WCHAR *name )
     while (min <= max)
     {
         int res, pos = (min + max) / 2;
-        if (!(res = strcmpiW( name, classesW[pos] ))) return TRUE;
+        if (!(res = wcsicmp( name, classesW[pos] ))) return TRUE;
         if (res < 0) max = pos - 1;
         else min = pos + 1;
     }
@@ -176,7 +173,7 @@ static BOOL is_builtin_class( const WCHAR *name )
     while (min <= max)
     {
         int res, pos = (min + max) / 2;
-        if (!(res = strcmpiW( name, classesW[pos] ))) return TRUE;
+        if (!(res = wcsicmp( name, classesW[pos] ))) return TRUE;
         if (res < 0) max = pos - 1;
         else min = pos + 1;
     }
@@ -243,7 +240,7 @@ static BOOL set_server_info( HWND hwnd, INT offset, LONG_PTR newval, UINT size )
 static inline LPSTR CLASS_GetMenuNameA( CLASS *classPtr )
 {
     if (IS_INTRESOURCE(classPtr->menuName)) return (LPSTR)classPtr->menuName;
-    return (LPSTR)(classPtr->menuName + strlenW(classPtr->menuName) + 1);
+    return (LPSTR)(classPtr->menuName + lstrlenW(classPtr->menuName) + 1);
 }
 
 
@@ -288,7 +285,7 @@ static void CLASS_SetMenuNameW( CLASS *classPtr, LPCWSTR name )
     if (!IS_INTRESOURCE(classPtr->menuName)) HeapFree( GetProcessHeap(), 0, classPtr->menuName );
     if (!IS_INTRESOURCE(name))
     {
-        DWORD lenW = strlenW(name) + 1;
+        DWORD lenW = lstrlenW(name) + 1;
         DWORD lenA = WideCharToMultiByte( CP_ACP, 0, name, lenW, NULL, 0, NULL, NULL );
         classPtr->menuName = HeapAlloc( GetProcessHeap(), 0, lenA + lenW*sizeof(WCHAR) );
         memcpy( classPtr->menuName, name, lenW*sizeof(WCHAR) );
@@ -355,7 +352,7 @@ const WCHAR *CLASS_GetVersionedName( const WCHAR *name, UINT *basename_offset, W
         return name;
 
     wndclass = (struct wndclass_redirect_data *)data.lpData;
-    *basename_offset = wndclass->name_len / sizeof(WCHAR) - strlenW(name);
+    *basename_offset = wndclass->name_len / sizeof(WCHAR) - lstrlenW(name);
 
     module = (const WCHAR *)((BYTE *)data.lpSectionBase + wndclass->module_offset);
     if (!(hmod = GetModuleHandleW( module )))
@@ -367,7 +364,7 @@ const WCHAR *CLASS_GetVersionedName( const WCHAR *name, UINT *basename_offset, W
     if (combined)
     {
         memcpy(combined, ret, *basename_offset * sizeof(WCHAR));
-        strcpyW(&combined[*basename_offset], name);
+        lstrcpyW(&combined[*basename_offset], name);
         ret = combined;
     }
 
@@ -381,7 +378,7 @@ const WCHAR *CLASS_GetVersionedName( const WCHAR *name, UINT *basename_offset, W
         LIST_FOR_EACH( ptr, &class_list )
         {
             CLASS *class = LIST_ENTRY( ptr, CLASS, entry );
-            if (strcmpiW( class->name, ret )) continue;
+            if (wcsicmp( class->name, ret )) continue;
             if (!class->local || class->hInstance == hmod)
             {
                 found = TRUE;
@@ -434,7 +431,7 @@ static CLASS *CLASS_FindClass( LPCWSTR name, HINSTANCE hinstance )
             }
             else
             {
-                if (strcmpiW( class->name, name )) continue;
+                if (wcsicmp( class->name, name )) continue;
             }
             if (!class->local || class->hInstance == hinstance)
             {
@@ -483,7 +480,7 @@ static CLASS *CLASS_RegisterClass( LPCWSTR name, UINT basename_offset, HINSTANCE
     classPtr->basename = classPtr->name;
     if (!classPtr->atomName && name)
     {
-        strcpyW( classPtr->name, name );
+        lstrcpyW( classPtr->name, name );
         classPtr->basename += basename_offset;
     }
     else GlobalGetAtomNameW( classPtr->atomName, classPtr->name, ARRAY_SIZE( classPtr->name ));
@@ -498,7 +495,7 @@ static CLASS *CLASS_RegisterClass( LPCWSTR name, UINT basename_offset, HINSTANCE
         req->client_ptr = wine_server_client_ptr( classPtr );
         req->atom       = classPtr->atomName;
         req->name_offset = basename_offset;
-        if (!req->atom && name) wine_server_add_data( req, name, strlenW(name) * sizeof(WCHAR) );
+        if (!req->atom && name) wine_server_add_data( req, name, lstrlenW(name) * sizeof(WCHAR) );
         ret = !wine_server_call_err( req );
         classPtr->atomName = reply->atom;
     }
@@ -805,7 +802,7 @@ BOOL WINAPI UnregisterClassW( LPCWSTR className, HINSTANCE hInstance )
     {
         req->instance = wine_server_client_ptr( hInstance );
         if (!(req->atom = get_int_atom_value(className)) && className)
-            wine_server_add_data( req, className, strlenW(className) * sizeof(WCHAR) );
+            wine_server_add_data( req, className, lstrlenW(className) * sizeof(WCHAR) );
         if (!wine_server_call_err( req )) classPtr = wine_server_get_ptr( reply->client_ptr );
     }
     SERVER_END_REQ;
@@ -1182,7 +1179,7 @@ INT WINAPI GetClassNameA( HWND hwnd, LPSTR buffer, INT count )
 
     if (count <= 0) return 0;
     if (!GetClassNameW( hwnd, tmpbuf, ARRAY_SIZE( tmpbuf ))) return 0;
-    RtlUnicodeToMultiByteN( buffer, count - 1, &len, tmpbuf, strlenW(tmpbuf) * sizeof(WCHAR) );
+    RtlUnicodeToMultiByteN( buffer, count - 1, &len, tmpbuf, lstrlenW(tmpbuf) * sizeof(WCHAR) );
     buffer[len] = 0;
     return len;
 }
@@ -1231,7 +1228,7 @@ INT WINAPI GetClassNameW( HWND hwnd, LPWSTR buffer, INT count )
         /* Return original name class was registered with. */
         lstrcpynW( buffer, class->basename, count );
         release_class_ptr( class );
-        ret = strlenW( buffer );
+        ret = lstrlenW( buffer );
     }
     return ret;
 }
diff --git a/dlls/user32/clipboard.c b/dlls/user32/clipboard.c
index 2fc5c76acf0..3d17b658e45 100644
--- a/dlls/user32/clipboard.c
+++ b/dlls/user32/clipboard.c
@@ -23,23 +23,18 @@
  *
  */
 
-#include "config.h"
-#include "wine/port.h"
-
 #include <assert.h>
 #include <stdarg.h>
 #include <stdlib.h>
 #include <sys/types.h>
 #include <fcntl.h>
-#ifdef HAVE_UNISTD_H
-# include <unistd.h>
-#endif
 #include <string.h>
 
 #include "ntstatus.h"
 #define WIN32_NO_STATUS
 #include "windef.h"
 #include "winbase.h"
+#include "winnls.h"
 #include "wingdi.h"
 #include "winuser.h"
 #include "winerror.h"
@@ -47,7 +42,6 @@
 #include "win.h"
 
 #include "wine/list.h"
-#include "wine/unicode.h"
 #include "wine/server.h"
 #include "wine/debug.h"
 
diff --git a/dlls/user32/combo.c b/dlls/user32/combo.c
index ff5ed18878b..ce5bf0c8a08 100644
--- a/dlls/user32/combo.c
+++ b/dlls/user32/combo.c
@@ -30,7 +30,6 @@
 #include "winbase.h"
 #include "wingdi.h"
 #include "winuser.h"
-#include "wine/unicode.h"
 #include "user_private.h"
 #include "win.h"
 #include "controls.h"
diff --git a/dlls/user32/cursoricon.c b/dlls/user32/cursoricon.c
index 802fd383450..e772d541235 100644
--- a/dlls/user32/cursoricon.c
+++ b/dlls/user32/cursoricon.c
@@ -24,9 +24,6 @@
  * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301, USA
  */
 
-#include "config.h"
-#include "wine/port.h"
-
 #include <assert.h>
 #include <stdarg.h>
 #include <string.h>
@@ -43,7 +40,6 @@
 #include "win.h"
 #include "user_private.h"
 #include "wine/list.h"
-#include "wine/unicode.h"
 #include "wine/debug.h"
 
 WINE_DEFAULT_DEBUG_CHANNEL(cursor);
@@ -1047,8 +1043,8 @@ static HICON create_icon_from_bmi( const BITMAPINFO *bmi, DWORD maxsize, HMODULE
         release_icon_frame( info, frame );
         if (!IS_INTRESOURCE(resname))
         {
-            info->resname = HeapAlloc( GetProcessHeap(), 0, (strlenW(resname) + 1) * sizeof(WCHAR) );
-            if (info->resname) strcpyW( info->resname, resname );
+            info->resname = HeapAlloc( GetProcessHeap(), 0, (lstrlenW(resname) + 1) * sizeof(WCHAR) );
+            if (info->resname) lstrcpyW( info->resname, resname );
         }
         else info->resname = MAKEINTRESOURCEW( LOWORD(resname) );
 
diff --git a/dlls/user32/dde_misc.c b/dlls/user32/dde_misc.c
index 175d9e31f4a..3f33ac210fd 100644
--- a/dlls/user32/dde_misc.c
+++ b/dlls/user32/dde_misc.c
@@ -23,9 +23,6 @@
  * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301, USA
  */
 
-#include "config.h"
-#include "wine/port.h"
-
 #include <string.h>
 #include <stdarg.h>
 #include <stdio.h>
@@ -37,7 +34,6 @@
 #include "ddeml.h"
 #include "win.h"
 #include "dde_private.h"
-#include "wine/unicode.h"
 #include "wine/debug.h"
 
 WINE_DEFAULT_DEBUG_CHANNEL(ddeml);
@@ -1662,7 +1658,7 @@ WDML_SERVER*	WDML_AddServer(WDML_INSTANCE* pInstance, HSZ hszService, HSZ hszTop
     WDML_IncHSZ(pInstance, hszService);
 
     DdeQueryStringW(pInstance->instanceID, hszService, buf1, 256, CP_WINUNICODE);
-    snprintfW(buf2, 256, fmtW, buf1, 2*sizeof(ULONG_PTR), GetCurrentProcessId());
+    swprintf(buf2, 256, fmtW, buf1, 2*sizeof(ULONG_PTR), GetCurrentProcessId());
     pServer->hszServiceSpec = DdeCreateStringHandleW(pInstance->instanceID, buf2, CP_WINUNICODE);
 
     pServer->atomService = WDML_MakeAtomFromHsz(pServer->hszService);
diff --git a/dlls/user32/dde_server.c b/dlls/user32/dde_server.c
index d2a79f2a9b6..c78d2b8bbf9 100644
--- a/dlls/user32/dde_server.c
+++ b/dlls/user32/dde_server.c
@@ -25,6 +25,7 @@
 
 #include <stdarg.h>
 #include <string.h>
+#include <wchar.h>
 #include "windef.h"
 #include "winbase.h"
 #include "wingdi.h"
@@ -33,7 +34,6 @@
 #include "dde.h"
 #include "ddeml.h"
 #include "win.h"
-#include "wine/unicode.h"
 #include "wine/debug.h"
 #include "dde_private.h"
 
@@ -796,7 +796,7 @@ static HDDEDATA map_W_to_A( DWORD instance, void *ptr, DWORD size )
     if (data_looks_unicode( ptr, size ))
     {
         size /= sizeof(WCHAR);
-        if ((end = memchrW( ptr, 0, size ))) size = end + 1 - (const WCHAR *)ptr;
+        if ((end = wmemchr( ptr, 0, size ))) size = end + 1 - (const WCHAR *)ptr;
         len = WideCharToMultiByte( CP_ACP, 0, ptr, size, NULL, 0, NULL, NULL );
         ret = DdeCreateDataHandle( instance, NULL, len, 0, 0, CF_TEXT, 0);
         WideCharToMultiByte( CP_ACP, 0, ptr, size, (char *)DdeAccessData(ret, NULL), len, NULL, NULL );
diff --git a/dlls/user32/defwnd.c b/dlls/user32/defwnd.c
index 9cd1298923c..a5fad52fe5b 100644
--- a/dlls/user32/defwnd.c
+++ b/dlls/user32/defwnd.c
@@ -19,9 +19,6 @@
  * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301, USA
  */
 
-#include "config.h"
-#include "wine/port.h"
-
 #include <string.h>
 #include <stdarg.h>
 
@@ -33,7 +30,6 @@
 #include "win.h"
 #include "user_private.h"
 #include "controls.h"
-#include "wine/unicode.h"
 #include "wine/server.h"
 #include "wine/exception.h"
 #include "wine/debug.h"
@@ -137,13 +133,13 @@ static LRESULT DEFWND_SetTextW( HWND hwnd, LPCWSTR text )
         return 0;
 
     if (!text) text = empty_string;
-    count = strlenW(text) + 1;
+    count = lstrlenW(text) + 1;
 
     if (!(wndPtr = WIN_GetPtr( hwnd ))) return 0;
     HeapFree(GetProcessHeap(), 0, wndPtr->text);
     if ((wndPtr->text = HeapAlloc(GetProcessHeap(), 0, count * sizeof(WCHAR))))
     {
-        strcpyW( wndPtr->text, text );
+        lstrcpyW( wndPtr->text, text );
         SERVER_START_REQ( set_window_text )
         {
             req->handle = wine_server_user_handle( hwnd );
@@ -814,7 +810,7 @@ LRESULT WINAPI DefWindowProcA( HWND hwnd, UINT msg, WPARAM wParam, LPARAM lParam
         {
             WND *wndPtr = WIN_GetPtr( hwnd );
             if (wndPtr && wndPtr->text)
-                result = WideCharToMultiByte( CP_ACP, 0, wndPtr->text, strlenW(wndPtr->text),
+                result = WideCharToMultiByte( CP_ACP, 0, wndPtr->text, lstrlenW(wndPtr->text),
                                               NULL, 0, NULL, NULL );
             WIN_ReleasePtr( wndPtr );
         }
@@ -936,7 +932,7 @@ static LPARAM DEFWND_GetTextW( WND *wndPtr, LPWSTR dest, WPARAM wParam )
         if (wndPtr->text)
         {
             lstrcpynW( dest, wndPtr->text, wParam );
-            result = strlenW( dest );
+            result = lstrlenW( dest );
         }
         else dest[0] = '\0';
     }
@@ -998,7 +994,7 @@ LRESULT WINAPI DefWindowProcW(
     case WM_GETTEXTLENGTH:
         {
             WND *wndPtr = WIN_GetPtr( hwnd );
-            if (wndPtr && wndPtr->text) result = (LRESULT)strlenW(wndPtr->text);
+            if (wndPtr && wndPtr->text) result = (LRESULT)lstrlenW(wndPtr->text);
             WIN_ReleasePtr( wndPtr );
         }
         break;
diff --git a/dlls/user32/desktop.c b/dlls/user32/desktop.c
index fe6649446ee..c61ee3dbfcc 100644
--- a/dlls/user32/desktop.c
+++ b/dlls/user32/desktop.c
@@ -18,21 +18,15 @@
  * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301, USA
  */
 
-#include "config.h"
-
 #include <stdarg.h>
 #include <stdio.h>
 #include <string.h>
-#ifdef HAVE_UNISTD_H
-# include <unistd.h>
-#endif
 
 #include "windef.h"
 #include "winbase.h"
 #include "wingdi.h"
 #include "winnls.h"
 #include "controls.h"
-#include "wine/unicode.h"
 
 static HBRUSH hbrushPattern;
 static HBITMAP hbitmapWallPaper;
@@ -119,7 +113,7 @@ LRESULT WINAPI DesktopWndProc( HWND hwnd, UINT message, WPARAM wParam, LPARAM lP
 
             if (GetAncestor( hwnd, GA_PARENT )) return FALSE;  /* refuse to create non-desktop window */
 
-            sprintfW( buffer, guid_formatW, guid->Data1, guid->Data2, guid->Data3,
+            swprintf( buffer, ARRAY_SIZE(buffer), guid_formatW, guid->Data1, guid->Data2, guid->Data3,
                       guid->Data4[0], guid->Data4[1], guid->Data4[2], guid->Data4[3],
                       guid->Data4[4], guid->Data4[5], guid->Data4[6], guid->Data4[7] );
             atom = GlobalAddAtomW( buffer );
diff --git a/dlls/user32/dialog.c b/dlls/user32/dialog.c
index 88c2930c065..f01b25545fc 100644
--- a/dlls/user32/dialog.c
+++ b/dlls/user32/dialog.c
@@ -18,9 +18,6 @@
  * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301, USA
  */
 
-#include "config.h"
-#include "wine/port.h"
-
 #include <ctype.h>
 #include <errno.h>
 #include <limits.h>
@@ -34,7 +31,6 @@
 #include "wingdi.h"
 #include "winuser.h"
 #include "winnls.h"
-#include "wine/unicode.h"
 #include "controls.h"
 #include "win.h"
 #include "user_private.h"
@@ -167,7 +163,7 @@ static const WORD *DIALOG_GetControl32( const WORD *p, DLG_CONTROL_INFO *info,
     else
     {
         info->className = p;
-        p += strlenW( info->className ) + 1;
+        p += lstrlenW( info->className ) + 1;
     }
 
     if (GET_WORD(p) == 0xffff)  /* Is it an integer id? */
@@ -178,7 +174,7 @@ static const WORD *DIALOG_GetControl32( const WORD *p, DLG_CONTROL_INFO *info,
     else
     {
         info->windowName = p;
-        p += strlenW( info->windowName ) + 1;
+        p += lstrlenW( info->windowName ) + 1;
     }
 
     TRACE("    %s %s %ld, %d, %d, %d, %d, %08x, %08x, %08x\n",
@@ -361,7 +357,7 @@ static LPCSTR DIALOG_ParseTemplate32( LPCSTR template, DLG_TEMPLATE * result )
     default:
         result->menuName = p;
         TRACE(" MENU %s\n", debugstr_w(result->menuName) );
-        p += strlenW( result->menuName ) + 1;
+        p += lstrlenW( result->menuName ) + 1;
         break;
     }
 
@@ -381,14 +377,14 @@ static LPCSTR DIALOG_ParseTemplate32( LPCSTR template, DLG_TEMPLATE * result )
     default:
         result->className = p;
         TRACE(" CLASS %s\n", debugstr_w( result->className ));
-        p += strlenW( result->className ) + 1;
+        p += lstrlenW( result->className ) + 1;
         break;
     }
 
     /* Get the window caption */
 
     result->caption = p;
-    p += strlenW( result->caption ) + 1;
+    p += lstrlenW( result->caption ) + 1;
     TRACE(" CAPTION %s\n", debugstr_w( result->caption ) );
 
     /* Get the font name */
@@ -423,7 +419,7 @@ static LPCSTR DIALOG_ParseTemplate32( LPCSTR template, DLG_TEMPLATE * result )
                 result->italic = LOBYTE(GET_WORD(p)); p++;
             }
             result->faceName = p;
-            p += strlenW( result->faceName ) + 1;
+            p += lstrlenW( result->faceName ) + 1;
 
             TRACE(" FONT %d, %s, %d, %s\n",
                   result->pointSize, debugstr_w( result->faceName ),
@@ -972,12 +968,12 @@ static BOOL DIALOG_IsAccelerator( HWND hwnd, HWND hwndDlg, WPARAM wParam )
 
                 do
                 {
-                    p = strchrW( p + 2, '&' );
+                    p = wcschr( p + 2, '&' );
                 }
                 while (p != NULL && p[1] == '&');
 
                 /* and check if it's the one we're looking for */
-                if (p != NULL && toupperW( p[1] ) == toupperW( wParam ) )
+                if (p != NULL && towupper( p[1] ) == towupper( wParam ) )
                 {
                     if ((dlgCode & DLGC_STATIC) || (style & 0x0f) == BS_GROUPBOX )
                     {
@@ -1220,7 +1216,7 @@ BOOL WINAPI IsDialogMessageW( HWND hwndDlg, LPMSG msg )
                             {
                                 INT length;
                                 SendMessageW (hwndNext, WM_GETTEXT, maxlen, (LPARAM) buffer);
-                                length = strlenW (buffer);
+                                length = lstrlenW (buffer);
                                 HeapFree (GetProcessHeap(), 0, buffer);
                                 SendMessageW (hwndNext, EM_SETSEL, 0, length);
                             }
@@ -1783,17 +1779,17 @@ static BOOL DIALOG_DlgDirSelect( HWND hwnd, LPWSTR str, INT len,
         }
         else
         {
-            buffer[strlenW(buffer)-1] = '\\';
+            buffer[lstrlenW(buffer)-1] = '\\';
             ptr = buffer + 1;
         }
     }
     else
     {
         /* Filenames without a dot extension must have one tacked at the end */
-        if (strchrW(buffer, '.') == NULL)
+        if (wcschr(buffer, '.') == NULL)
         {
-            buffer[strlenW(buffer)+1] = '\0';
-            buffer[strlenW(buffer)] = '.';
+            buffer[lstrlenW(buffer)+1] = '\0';
+            buffer[lstrlenW(buffer)] = '.';
         }
         ptr = buffer;
     }
@@ -1835,15 +1831,15 @@ static INT DIALOG_DlgDirListW( HWND hDlg, LPWSTR spec, INT idLBox,
     {
         WCHAR *p, *p2;
 
-        if (!strchrW(spec, '*') && !strchrW(spec, '?'))
+        if (!wcschr(spec, '*') && !wcschr(spec, '?'))
         {
             SetLastError(ERROR_NO_WILDCARD_CHARACTERS);
             return FALSE;
         }
         p = spec;
-        if ((p2 = strchrW( p, ':' ))) p = p2 + 1;
-        if ((p2 = strrchrW( p, '\\' ))) p = p2;
-        if ((p2 = strrchrW( p, '/' ))) p = p2;
+        if ((p2 = wcschr( p, ':' ))) p = p2 + 1;
+        if ((p2 = wcsrchr( p, '\\' ))) p = p2;
+        if ((p2 = wcsrchr( p, '/' ))) p = p2;
         if (p != spec)
         {
             WCHAR sep = *p;
diff --git a/dlls/user32/driver.c b/dlls/user32/driver.c
index abd8a34cceb..c149b0736fd 100644
--- a/dlls/user32/driver.c
+++ b/dlls/user32/driver.c
@@ -20,13 +20,15 @@
 
 #include <stdarg.h>
 #include <stdio.h>
+#include <wchar.h>
+
 #include "windef.h"
 #include "winbase.h"
+#include "winnls.h"
 #include "wingdi.h"
 #include "winuser.h"
 #include "wine/debug.h"
 #include "wine/gdi_driver.h"
-#include "wine/unicode.h"
 
 #include "user_private.h"
 #include "controls.h"
@@ -68,13 +70,13 @@ static BOOL load_desktop_driver( HWND hwnd, HMODULE *module )
 
     guid_atom = HandleToULong( GetPropW( hwnd, display_device_guid_propW ));
     memcpy( key, key_pathW, sizeof(key_pathW) );
-    if (!GlobalGetAtomNameW( guid_atom, key + strlenW(key), 40 )) return 0;
-    strcatW( key, displayW );
+    if (!GlobalGetAtomNameW( guid_atom, key + lstrlenW(key), 40 )) return 0;
+    lstrcatW( key, displayW );
     if (RegOpenKeyW( HKEY_LOCAL_MACHINE, key, &hkey )) return 0;
     size = sizeof(path);
     if (!RegQueryValueExW( hkey, driverW, NULL, NULL, (BYTE *)path, &size ))
     {
-        if ((ret = !strcmpW( path, nullW ))) *module = NULL;
+        if ((ret = !wcscmp( path, nullW ))) *module = NULL;
         else ret = (*module = LoadLibraryW( path )) != NULL;
         if (!ret) ERR( "failed to load %s\n", debugstr_w(path) );
         TRACE( "%s %p\n", debugstr_w(path), *module );
@@ -231,7 +233,7 @@ static UINT CDECL nulldrv_GetKeyboardLayoutList( INT size, HKL *layouts )
             rc = RegEnumKeyW(hKeyKeyboard, count, szKeyName, 9);
             if (rc == ERROR_SUCCESS)
             {
-                layout = (HKL)(ULONG_PTR)strtoulW(szKeyName,NULL,16);
+                layout = (HKL)(ULONG_PTR)wcstoul(szKeyName,NULL,16);
                 if (baselayout != 0 && layout == (HKL)baselayout)
                     baselayout = 0; /* found in the registry do not add again */
                 if (size && layouts)
diff --git a/dlls/user32/edit.c b/dlls/user32/edit.c
index 683c2faea3c..f4d252ee5f0 100644
--- a/dlls/user32/edit.c
+++ b/dlls/user32/edit.c
@@ -28,8 +28,6 @@
  *
  */
 
-#include "config.h"
-
 #include <stdarg.h>
 #include <string.h>
 #include <stdlib.h>
@@ -40,7 +38,6 @@
 #include "win.h"
 #include "imm.h"
 #include "usp10.h"
-#include "wine/unicode.h"
 #include "controls.h"
 #include "user_private.h"
 #include "wine/debug.h"
@@ -171,7 +168,7 @@ static LRESULT EDIT_EM_PosFromChar(EDITSTATE *es, INT index, BOOL after_wrap);
  */
 static inline BOOL EDIT_EM_CanUndo(const EDITSTATE *es)
 {
-	return (es->undo_insert_count || strlenW(es->undo_text));
+	return (es->undo_insert_count || lstrlenW(es->undo_text));
 }
 
 
@@ -243,7 +240,7 @@ static HBRUSH EDIT_NotifyCtlColor(EDITSTATE *es, HDC hdc)
 static inline UINT get_text_length(EDITSTATE *es)
 {
     if(es->text_length == (UINT)-1)
-        es->text_length = strlenW(es->text);
+        es->text_length = lstrlenW(es->text);
     return es->text_length;
 }
 
@@ -576,7 +573,7 @@ static void EDIT_BuildLineDefs_ML(EDITSTATE *es, INT istart, INT iend, INT delta
 		/* Mark type of line termination */
 		if (!(*cp)) {
 			current_line->ending = END_0;
-			current_line->net_length = strlenW(current_position);
+			current_line->net_length = lstrlenW(current_position);
 		} else if ((cp > current_position) && (*(cp - 1) == '\r')) {
 			current_line->ending = END_SOFT;
 			current_line->net_length = cp - current_position - 1;
@@ -2599,7 +2596,7 @@ static void EDIT_EM_ReplaceSel(EDITSTATE *es, BOOL can_undo, const WCHAR *lpsz_r
 		memcpy(buf, es->text + s, bufl * sizeof(WCHAR));
 		buf[bufl] = 0; /* ensure 0 termination */
 		/* now delete */
-		strcpyW(es->text + s, es->text + e);
+		lstrcpyW(es->text + s, es->text + e);
                 text_buffer_changed(es);
 	}
 	if (strl) {
@@ -2627,7 +2624,7 @@ static void EDIT_EM_ReplaceSel(EDITSTATE *es, BOOL can_undo, const WCHAR *lpsz_r
 		/* if text is too long undo all changes */
 		if (honor_limit && !(es->style & ES_AUTOVSCROLL) && (es->line_count > vlc)) {
 			if (strl)
-				strcpyW(es->text + e, es->text + e + strl);
+				lstrcpyW(es->text + e, es->text + e + strl);
 			if (e != s)
 				for (i = 0 , p = es->text ; i < e - s ; i++)
 					p[i + s] = buf[i];
@@ -2647,7 +2644,7 @@ static void EDIT_EM_ReplaceSel(EDITSTATE *es, BOOL can_undo, const WCHAR *lpsz_r
 		/* remove chars that don't fit */
 		if (honor_limit && !(es->style & ES_AUTOHSCROLL) && (es->text_width > fw)) {
 			while ((es->text_width > fw) && s + strl >= s) {
-				strcpyW(es->text + s + strl - 1, es->text + s + strl);
+				lstrcpyW(es->text + s + strl - 1, es->text + s + strl);
 				strl--;
 				es->text_length = -1;
 				EDIT_InvalidateUniscribeData(es);
@@ -2660,7 +2657,7 @@ static void EDIT_EM_ReplaceSel(EDITSTATE *es, BOOL can_undo, const WCHAR *lpsz_r
 	
 	if (e != s) {
 		if (can_undo) {
-			utl = strlenW(es->undo_text);
+			utl = lstrlenW(es->undo_text);
 			if (!es->undo_insert_count && (*es->undo_text && (s == es->undo_position))) {
 				/* undo-buffer is extended to the right */
 				EDIT_MakeUndoFit(es, utl + e - s);
@@ -3041,11 +3038,11 @@ static BOOL EDIT_EM_Undo(EDITSTATE *es)
 	if( es->style & ES_READONLY )
             return !(es->style & ES_MULTILINE);
 
-	ulength = strlenW(es->undo_text);
+	ulength = lstrlenW(es->undo_text);
 
 	utext = HeapAlloc(GetProcessHeap(), 0, (ulength + 1) * sizeof(WCHAR));
 
-	strcpyW(utext, es->undo_text);
+	lstrcpyW(utext, es->undo_text);
 
 	TRACE("before UNDO:insertion length = %d, deletion buffer = %s\n",
 		     es->undo_insert_count, debugstr_w(utext));
@@ -3096,9 +3093,9 @@ static void EDIT_WM_Paste(EDITSTATE *es)
 	OpenClipboard(es->hwndSelf);
 	if ((hsrc = GetClipboardData(CF_UNICODETEXT))) {
 		src = GlobalLock(hsrc);
-                len = strlenW(src);
+                len = lstrlenW(src);
 		/* Protect single-line edit against pasting new line character */
-		if (!(es->style & ES_MULTILINE) && ((ptr = strchrW(src, '\n')))) {
+		if (!(es->style & ES_MULTILINE) && ((ptr = wcschr(src, '\n')))) {
 			len = ptr - src;
 			if (len && src[len - 1] == '\r')
 				--len;
@@ -3358,7 +3355,7 @@ static INT EDIT_WM_GetText(const EDITSTATE *es, INT count, LPWSTR dst, BOOL unic
     if(unicode)
     {
 	lstrcpynW(dst, es->text, count);
-	return strlenW(dst);
+	return lstrlenW(dst);
     }
     else
     {
@@ -3930,7 +3927,7 @@ static void EDIT_WM_SetText(EDITSTATE *es, LPCWSTR text, BOOL unicode)
     if (text) 
     {
 	TRACE("%s\n", debugstr_w(text));
-	EDIT_EM_ReplaceSel(es, FALSE, text, strlenW(text), FALSE, FALSE);
+	EDIT_EM_ReplaceSel(es, FALSE, text, lstrlenW(text), FALSE, FALSE);
 	if(!unicode)
 	    HeapFree(GetProcessHeap(), 0, textW);
     } 
@@ -4611,7 +4608,7 @@ static LRESULT EDIT_WM_Create(EDITSTATE *es, LPCWSTR name)
         EDIT_SetRectNP(es, &clientRect);
 
        if (name && *name) {
-	   EDIT_EM_ReplaceSel(es, FALSE, name, strlenW(name), FALSE, FALSE);
+	   EDIT_EM_ReplaceSel(es, FALSE, name, lstrlenW(name), FALSE, FALSE);
 	   /* if we insert text to the editline, the text scrolls out
             * of the window, as the caret is placed after the insert
             * pos normally; thus we reset es->selection... to 0 and
@@ -4795,7 +4792,7 @@ LRESULT EditWndProc_common( HWND hwnd, UINT msg, WPARAM wParam, LPARAM lParam, B
                     MultiByteToWideChar(CP_ACP, 0, textA, -1, textW, countW);
 		}
 
-		EDIT_EM_ReplaceSel(es, (BOOL)wParam, textW, strlenW(textW), TRUE, TRUE);
+		EDIT_EM_ReplaceSel(es, (BOOL)wParam, textW, lstrlenW(textW), TRUE, TRUE);
 		result = 1;
 
 		if(!unicode)
diff --git a/dlls/user32/exticon.c b/dlls/user32/exticon.c
index a03cc6071bb..a9bc922a782 100644
--- a/dlls/user32/exticon.c
+++ b/dlls/user32/exticon.c
@@ -22,15 +22,10 @@
  * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301, USA
  */
 
-#include "config.h"
-
 #include <stdarg.h>
 #include <string.h>
 #include <stdlib.h>	/* abs() */
 #include <sys/types.h>
-#ifdef HAVE_UNISTD_H
-# include <unistd.h>
-#endif
 
 #define NONAMELESSUNION
 #define NONAMELESSSTRUCT
diff --git a/dlls/user32/focus.c b/dlls/user32/focus.c
index f1c883167ed..4c18238a98b 100644
--- a/dlls/user32/focus.c
+++ b/dlls/user32/focus.c
@@ -20,9 +20,6 @@
  * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301, USA
  */
 
-#include "config.h"
-#include "wine/port.h"
-
 #include <stdarg.h>
 
 #include "windef.h"
diff --git a/dlls/user32/hook.c b/dlls/user32/hook.c
index b6a3b3661f7..4c6dbcf7202 100644
--- a/dlls/user32/hook.c
+++ b/dlls/user32/hook.c
@@ -62,21 +62,18 @@
  *     WH_MOUSE_LL                  Implemented but should use SendMessage instead
  */
 
-#include "config.h"
-#include "wine/port.h"
-
 #include <stdarg.h>
 #include <assert.h>
 
 #include "windef.h"
 #include "winbase.h"
+#include "winnls.h"
 #include "wingdi.h"
 #include "winuser.h"
 #include "winerror.h"
 #include "win.h"
 #include "user_private.h"
 #include "wine/server.h"
-#include "wine/unicode.h"
 #include "wine/asm.h"
 #include "wine/debug.h"
 #include "winternl.h"
@@ -187,7 +184,7 @@ static HHOOK set_windows_hook( INT id, HOOKPROC proc, HINSTANCE inst, DWORD tid,
         if (inst) /* make proc relative to the module base */
         {
             req->proc = wine_server_client_ptr( (void *)((char *)proc - (char *)inst) );
-            wine_server_add_data( req, module, strlenW(module) * sizeof(WCHAR) );
+            wine_server_add_data( req, module, lstrlenW(module) * sizeof(WCHAR) );
         }
         else req->proc = wine_server_client_ptr( proc );
 
@@ -744,7 +741,7 @@ HWINEVENTHOOK WINAPI SetWinEventHook(DWORD event_min, DWORD event_max,
         if (inst) /* make proc relative to the module base */
         {
             req->proc = wine_server_client_ptr( (void *)((char *)proc - (char *)inst) );
-            wine_server_add_data( req, module, strlenW(module) * sizeof(WCHAR) );
+            wine_server_add_data( req, module, lstrlenW(module) * sizeof(WCHAR) );
         }
         else req->proc = wine_server_client_ptr( proc );
 
diff --git a/dlls/user32/icontitle.c b/dlls/user32/icontitle.c
index e10717de41b..2bead88dd42 100644
--- a/dlls/user32/icontitle.c
+++ b/dlls/user32/icontitle.c
@@ -18,20 +18,14 @@
  * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301, USA
  */
 
-#include "config.h"
-
 #include <stdarg.h>
 #include <stdio.h>
 #include <string.h>
-#ifdef HAVE_UNISTD_H
-# include <unistd.h>
-#endif
 
 #include "windef.h"
 #include "winbase.h"
 #include "wingdi.h"
 #include "winuser.h"
-#include "wine/unicode.h"
 #include "controls.h"
 #include "win.h"
 
@@ -71,8 +65,8 @@ static BOOL ICONTITLE_SetTitlePos( HWND hwnd, HWND owner )
 
     if( !length )
     {
-        strcpyW( str, emptyTitleText );
-        length = strlenW( str );
+        lstrcpyW( str, emptyTitleText );
+        length = lstrlenW( str );
     }
 
     if (!(hDC = GetDC( hwnd ))) return FALSE;
diff --git a/dlls/user32/input.c b/dlls/user32/input.c
index 1dd43a36a11..3425a2ea10f 100644
--- a/dlls/user32/input.c
+++ b/dlls/user32/input.c
@@ -22,9 +22,6 @@
  * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301, USA
  */
 
-#include "config.h"
-#include "wine/port.h"
-
 #include <stdlib.h>
 #include <string.h>
 #include <stdarg.h>
@@ -48,7 +45,6 @@
 #include "dbt.h"
 #include "wine/server.h"
 #include "wine/debug.h"
-#include "wine/unicode.h"
 
 WINE_DEFAULT_DEBUG_CHANNEL(win);
 WINE_DECLARE_DEBUG_CHANNEL(keyboard);
diff --git a/dlls/user32/listbox.c b/dlls/user32/listbox.c
index 65b052eb62b..a2e80c4ff04 100644
--- a/dlls/user32/listbox.c
+++ b/dlls/user32/listbox.c
@@ -25,8 +25,8 @@
 #include <stdio.h>
 #include "windef.h"
 #include "winbase.h"
+#include "winnls.h"
 #include "wingdi.h"
-#include "wine/unicode.h"
 #include "user_private.h"
 #include "controls.h"
 #include "wine/exception.h"
@@ -709,14 +709,14 @@ static void LISTBOX_PaintItem( LB_DESCR *descr, HDC hdc, const RECT *rect,
         else if (!(descr->style & LBS_USETABSTOPS))
             ExtTextOutW( hdc, rect->left + 1, rect->top,
                          ETO_OPAQUE | ETO_CLIPPED, rect, item_str,
-                         strlenW(item_str), NULL );
+                         lstrlenW(item_str), NULL );
         else
 	{
 	    /* Output empty string to paint background in the full width. */
             ExtTextOutW( hdc, rect->left + 1, rect->top,
                          ETO_OPAQUE | ETO_CLIPPED, rect, NULL, 0, NULL );
             TabbedTextOutW( hdc, rect->left + 1 , rect->top,
-                            item_str, strlenW(item_str),
+                            item_str, lstrlenW(item_str),
                             descr->nb_tabs, descr->tabs, 0);
 	}
         if (selected)
@@ -883,7 +883,7 @@ static LRESULT LISTBOX_GetText( LB_DESCR *descr, INT index, LPWSTR buffer, BOOL
 
         if (!buffer)
         {
-            len = strlenW(str);
+            len = lstrlenW(str);
             if( unicode )
                 return len;
             return WideCharToMultiByte( CP_ACP, 0, str, len, NULL, 0, NULL, NULL );
@@ -895,8 +895,8 @@ static LRESULT LISTBOX_GetText( LB_DESCR *descr, INT index, LPWSTR buffer, BOOL
         {
             if(unicode)
             {
-                strcpyW(buffer, str);
-                len = strlenW(buffer);
+                lstrcpyW(buffer, str);
+                len = lstrlenW(buffer);
             }
             else
             {
@@ -1053,7 +1053,7 @@ static INT LISTBOX_FindString( LB_DESCR *descr, INT start, LPCWSTR str, BOOL exa
         else
         {
             /* Special case for drives and directories: ignore prefix */
-            INT len = strlenW(str);
+            INT len = lstrlenW(str);
             WCHAR *item_str;
 
             for (i = 0, index = start; i < descr->nb_items; i++, index++)
@@ -1061,11 +1061,11 @@ static INT LISTBOX_FindString( LB_DESCR *descr, INT start, LPCWSTR str, BOOL exa
                 if (index == descr->nb_items) index = 0;
                 item_str = get_item_string(descr, index);
 
-                if (!strncmpiW(str, item_str, len)) return index;
+                if (!wcsnicmp(str, item_str, len)) return index;
                 if (item_str[0] == '[')
                 {
-                    if (!strncmpiW(str, item_str + 1, len)) return index;
-                    if (item_str[1] == '-' && !strncmpiW(str, item_str + 2, len)) return index;
+                    if (!wcsnicmp(str, item_str + 1, len)) return index;
+                    if (item_str[1] == '-' && !wcsnicmp(str, item_str + 2, len)) return index;
                 }
             }
         }
@@ -1703,12 +1703,12 @@ static LRESULT LISTBOX_InsertString( LB_DESCR *descr, INT index, LPCWSTR str )
     {
         static const WCHAR empty_stringW[] = { 0 };
         if (!str) str = empty_stringW;
-        if (!(new_str = HeapAlloc( GetProcessHeap(), 0, (strlenW(str) + 1) * sizeof(WCHAR) )))
+        if (!(new_str = HeapAlloc( GetProcessHeap(), 0, (lstrlenW(str) + 1) * sizeof(WCHAR) )))
         {
             SEND_NOTIFICATION( descr, LBN_ERRSPACE );
             return LB_ERRSPACE;
         }
-        strcpyW(new_str, str);
+        lstrcpyW(new_str, str);
     }
 
     if (index == -1) index = descr->nb_items;
@@ -1899,13 +1899,13 @@ static LRESULT LISTBOX_Directory( LB_DESCR *descr, UINT attrib,
                     static const WCHAR bracketW[]  = { ']',0 };
                     static const WCHAR dotW[] = { '.',0 };
                     if (!(attrib & DDL_DIRECTORY) ||
-                        !strcmpW( entry.cFileName, dotW )) continue;
+                        !wcscmp( entry.cFileName, dotW )) continue;
                     buffer[0] = '[';
                     if (!long_names && entry.cAlternateFileName[0])
-                        strcpyW( buffer + 1, entry.cAlternateFileName );
+                        lstrcpyW( buffer + 1, entry.cAlternateFileName );
                     else
-                        strcpyW( buffer + 1, entry.cFileName );
-                    strcatW(buffer, bracketW);
+                        lstrcpyW( buffer + 1, entry.cFileName );
+                    lstrcatW(buffer, bracketW);
                 }
                 else  /* not a directory */
                 {
@@ -1917,9 +1917,9 @@ static LRESULT LISTBOX_Directory( LB_DESCR *descr, UINT attrib,
                         continue;
 #undef ATTRIBS
                     if (!long_names && entry.cAlternateFileName[0])
-                        strcpyW( buffer, entry.cAlternateFileName );
+                        lstrcpyW( buffer, entry.cAlternateFileName );
                     else
-                        strcpyW( buffer, entry.cFileName );
+                        lstrcpyW( buffer, entry.cFileName );
                 }
                 if (!long_names) CharLowerW( buffer );
                 pos = LISTBOX_FindFileStrPos( descr, buffer );
@@ -2807,9 +2807,9 @@ LRESULT ListBoxWndProc_common( HWND hwnd, UINT msg, WPARAM wParam, LPARAM lParam
             return LB_ERR;
         }
         if (!HAS_STRINGS(descr)) return sizeof(ULONG_PTR);
-        if (unicode) return strlenW(get_item_string(descr, wParam));
+        if (unicode) return lstrlenW(get_item_string(descr, wParam));
         return WideCharToMultiByte( CP_ACP, 0, get_item_string(descr, wParam),
-                                    strlenW(get_item_string(descr, wParam)), NULL, 0, NULL, NULL );
+                                    lstrlenW(get_item_string(descr, wParam)), NULL, 0, NULL, NULL );
 
     case LB_GETCURSEL:
         if (descr->nb_items == 0)
diff --git a/dlls/user32/lstr.c b/dlls/user32/lstr.c
index be5a28105b7..3c24b8700c1 100644
--- a/dlls/user32/lstr.c
+++ b/dlls/user32/lstr.c
@@ -20,9 +20,6 @@
  * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301, USA
  */
 
-#include "config.h"
-#include "wine/port.h"
-
 #include <ctype.h>
 #include <stdarg.h>
 #include <stdlib.h>
diff --git a/dlls/user32/mdi.c b/dlls/user32/mdi.c
index ada89bc0c6f..b6752853a84 100644
--- a/dlls/user32/mdi.c
+++ b/dlls/user32/mdi.c
@@ -90,10 +90,10 @@
 
 #include "windef.h"
 #include "winbase.h"
+#include "winnls.h"
 #include "wingdi.h"
 #include "winuser.h"
 #include "wownt32.h"
-#include "wine/unicode.h"
 #include "win.h"
 #include "controls.h"
 #include "user_private.h"
@@ -984,8 +984,8 @@ static void MDI_UpdateFrameText( HWND frame, HWND hClient, BOOL repaint, LPCWSTR
     if (lpTitle)
     {
 	HeapFree( GetProcessHeap(), 0, ci->frameTitle );
-	if ((ci->frameTitle = HeapAlloc( GetProcessHeap(), 0, (strlenW(lpTitle)+1)*sizeof(WCHAR))))
-            strcpyW( ci->frameTitle, lpTitle );
+	if ((ci->frameTitle = HeapAlloc( GetProcessHeap(), 0, (lstrlenW(lpTitle)+1)*sizeof(WCHAR))))
+            lstrcpyW( ci->frameTitle, lpTitle );
     }
 
     if (ci->frameTitle)
@@ -996,16 +996,16 @@ static void MDI_UpdateFrameText( HWND frame, HWND hClient, BOOL repaint, LPCWSTR
 
 	    static const WCHAR lpBracket[]  = {' ','-',' ','[',0};
 	    static const WCHAR lpBracket2[]  = {']',0};
-	    int	i_frame_text_length = strlenW(ci->frameTitle);
+	    int	i_frame_text_length = lstrlenW(ci->frameTitle);
 
 	    lstrcpynW( lpBuffer, ci->frameTitle, MDI_MAXTITLELENGTH);
 
 	    if( i_frame_text_length + 6 < MDI_MAXTITLELENGTH )
             {
-		strcatW( lpBuffer, lpBracket );
+		lstrcatW( lpBuffer, lpBracket );
                 if (GetWindowTextW( ci->hwndActiveChild, lpBuffer + i_frame_text_length + 4,
                                     MDI_MAXTITLELENGTH - i_frame_text_length - 5 ))
-                    strcatW( lpBuffer, lpBracket2 );
+                    lstrcatW( lpBuffer, lpBracket2 );
                 else
                     lpBuffer[i_frame_text_length] = 0;  /* remove bracket */
             }
@@ -1919,7 +1919,7 @@ static INT_PTR WINAPI MDI_MoreWindowsDlgProc (HWND hDlg, UINT iMsg, WPARAM wPara
                    continue;
                SendMessageW(hListBox, LB_ADDSTRING, 0, (LPARAM)buffer );
                SendMessageW(hListBox, LB_SETITEMDATA, i, (LPARAM)ci->child[i] );
-               length = strlenW(buffer);  /* FIXME: should use GetTextExtentPoint */
+               length = lstrlenW(buffer);  /* FIXME: should use GetTextExtentPoint */
                if (length > widest)
                    widest = length;
            }
diff --git a/dlls/user32/menu.c b/dlls/user32/menu.c
index 59c2083c17c..0ba3b23d787 100644
--- a/dlls/user32/menu.c
+++ b/dlls/user32/menu.c
@@ -39,9 +39,6 @@
  *        - MNS_MODELESS
  */
 
-#include "config.h"
-#include "wine/port.h"
-
 #include <stdarg.h>
 #include <string.h>
 
@@ -52,7 +49,6 @@
 #include "wingdi.h"
 #include "winnls.h"
 #include "wine/server.h"
-#include "wine/unicode.h"
 #include "wine/exception.h"
 #include "win.h"
 #include "controls.h"
@@ -803,11 +799,11 @@ static UINT MENU_FindItemByKey( HWND hwndOwner, HMENU hmenu,
 		    do
 		    {
 			const WCHAR *q = p + 2;
-			p = strchrW (q, '&');
-			if (!p && cjk) p = strchrW (q, '\036'); /* Japanese Win16 */
+			p = wcschr (q, '&');
+			if (!p && cjk) p = wcschr (q, '\036'); /* Japanese Win16 */
 		    }
 		    while (p != NULL && p [1] == '&');
-		    if (p && (toupperW(p[1]) == toupperW(key))) return i;
+		    if (p && (towupper(p[1]) == towupper(key))) return i;
 		}
 	     }
 	}
@@ -1134,7 +1130,7 @@ static void MENU_CalcItemSize( HDC hdc, MENUITEM *lpitem, HWND hwndOwner,
                     GetSystemMetrics( SM_CYMENU) - 1);
             lpitem->rect.right +=  2 * menucharsize.cx;
         } else {
-            if ((p = strchrW( lpitem->text, '\t' )) != NULL) {
+            if ((p = wcschr( lpitem->text, '\t' )) != NULL) {
                 RECT tmprc = rc;
                 LONG tmpheight;
                 int n = (int)( p - lpitem->text);
@@ -2216,7 +2212,7 @@ static LPCSTR MENU_ParseResource( LPCSTR res, HMENU hMenu )
             res += sizeof(WORD);
         }
         str = (LPCWSTR)res;
-        res += (strlenW(str) + 1) * sizeof(WCHAR);
+        res += (lstrlenW(str) + 1) * sizeof(WCHAR);
         if (flags & MF_POPUP)
         {
             HMENU hSubMenu = CreatePopupMenu();
@@ -2258,7 +2254,7 @@ static LPCSTR MENUEX_ParseResource( LPCSTR res, HMENU hMenu)
 	/* Align the text on a word boundary.  */
 	res += (~((UINT_PTR)res - 1)) & 1;
 	mii.dwTypeData = (LPWSTR) res;
-	res += (1 + strlenW(mii.dwTypeData)) * sizeof(WCHAR);
+	res += (1 + lstrlenW(mii.dwTypeData)) * sizeof(WCHAR);
 	/* Align the following fields on a dword boundary.  */
 	res += (~((UINT_PTR)res - 1)) & 3;
 
@@ -3833,7 +3829,7 @@ INT WINAPI GetMenuStringW( HMENU hMenu, UINT wItemID,
     item = &menu->items[pos];
 
     if (!str || !nMaxSiz)
-        ret = item->text ? strlenW(item->text) : 0;
+        ret = item->text ? lstrlenW(item->text) : 0;
     else if (!item->text)
     {
         str[0] = 0;
@@ -3842,7 +3838,7 @@ INT WINAPI GetMenuStringW( HMENU hMenu, UINT wItemID,
     else
     {
         lstrcpynW( str, item->text, nMaxSiz );
-        ret = strlenW(str);
+        ret = lstrlenW(str);
     }
     release_menu_ptr(menu);
 
@@ -4785,7 +4781,7 @@ static BOOL GetMenuItemInfo_common ( HMENU hmenu, UINT id, BOOL bypos,
             int len;
             if (unicode)
             {
-                len = strlenW(item->text);
+                len = lstrlenW(item->text);
                 if(lpmii->dwTypeData && lpmii->cch)
                     lstrcpynW(lpmii->dwTypeData, item->text, lpmii->cch);
             }
@@ -4894,8 +4890,8 @@ static inline void set_menu_item_text( MENUITEM *menu, LPCWSTR text, BOOL unicod
         menu->text = NULL;
     else if (unicode)
     {
-        if ((menu->text = HeapAlloc( GetProcessHeap(), 0, (strlenW(text)+1) * sizeof(WCHAR) )))
-            strcpyW( menu->text, text );
+        if ((menu->text = HeapAlloc( GetProcessHeap(), 0, (lstrlenW(text)+1) * sizeof(WCHAR) )))
+            lstrcpyW( menu->text, text );
     }
     else
     {
diff --git a/dlls/user32/message.c b/dlls/user32/message.c
index aadec28b559..f428c9b0db8 100644
--- a/dlls/user32/message.c
+++ b/dlls/user32/message.c
@@ -19,9 +19,6 @@
  * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301, USA
  */
 
-#include "config.h"
-#include "wine/port.h"
-
 #include <assert.h>
 #include <stdarg.h>
 
@@ -39,7 +36,6 @@
 #include "dde.h"
 #include "imm.h"
 #include "ddk/imm.h"
-#include "wine/unicode.h"
 #include "wine/server.h"
 #include "user_private.h"
 #include "win.h"
@@ -450,7 +446,7 @@ static inline void push_data( struct packed_message *data, const void *ptr, size
 /* add a string to a packed message */
 static inline void push_string( struct packed_message *data, LPCWSTR str )
 {
-    push_data( data, str, (strlenW(str) + 1) * sizeof(WCHAR) );
+    push_data( data, str, (lstrlenW(str) + 1) * sizeof(WCHAR) );
 }
 
 /* make sure that the buffer contains a valid null-terminated Unicode string */
@@ -1129,8 +1125,8 @@ static BOOL unpack_message( HWND hwnd, UINT message, WPARAM *wparam, LPARAM *lpa
         {
             if (!check_string( str, size )) return FALSE;
             cs.lpszName = str;
-            size -= (strlenW(str) + 1) * sizeof(WCHAR);
-            str += strlenW(str) + 1;
+            size -= (lstrlenW(str) + 1) * sizeof(WCHAR);
+            str += lstrlenW(str) + 1;
         }
         if (ps->cs.lpszClass >> 16)
         {
@@ -1415,8 +1411,8 @@ static BOOL unpack_message( HWND hwnd, UINT message, WPARAM *wparam, LPARAM *lpa
         {
             if (!check_string( str, size )) return FALSE;
             mcs.szClass = str;
-            size -= (strlenW(str) + 1) * sizeof(WCHAR);
-            str += strlenW(str) + 1;
+            size -= (lstrlenW(str) + 1) * sizeof(WCHAR);
+            str += lstrlenW(str) + 1;
         }
         if (ps->mcs.szTitle >> 16)
         {
@@ -1646,7 +1642,7 @@ static void pack_reply( HWND hwnd, UINT message, WPARAM wparam, LPARAM lparam,
         break;
     }
     case WM_ASKCBFORMATNAME:
-        push_data( data, (WCHAR *)lparam, (strlenW((WCHAR *)lparam) + 1) * sizeof(WCHAR) );
+        push_data( data, (WCHAR *)lparam, (lstrlenW((WCHAR *)lparam) + 1) * sizeof(WCHAR) );
         break;
     }
 }
diff --git a/dlls/user32/misc.c b/dlls/user32/misc.c
index 59b85baa582..82b42efaf50 100644
--- a/dlls/user32/misc.c
+++ b/dlls/user32/misc.c
@@ -21,8 +21,6 @@
  * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301, USA
  */
 
-#include "config.h"
-
 #include <stdarg.h>
 
 #include "windef.h"
@@ -32,7 +30,6 @@
 #include "controls.h"
 #include "user_private.h"
 
-#include "wine/unicode.h"
 #include "wine/debug.h"
 
 WINE_DEFAULT_DEBUG_CHANNEL(win);
diff --git a/dlls/user32/nonclient.c b/dlls/user32/nonclient.c
index 0aee13787af..8cfd3c0d371 100644
--- a/dlls/user32/nonclient.c
+++ b/dlls/user32/nonclient.c
@@ -18,8 +18,6 @@
  * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301, USA
  */
 
-#include "config.h"
-
 #include <stdarg.h>
 
 #include "windef.h"
@@ -1583,9 +1581,12 @@ LRESULT NC_HandleSysCommand( HWND hwnd, WPARAM wParam, LPARAM lParam )
             if (hmodule)
             {
                 BOOL (WINAPI *aboutproc)(HWND, LPCSTR, LPCSTR, HICON);
+                extern const char * CDECL wine_get_version(void);
+                char app[256];
 
+                sprintf( app, "Wine %s", wine_get_version() );
                 aboutproc = (void *)GetProcAddress( hmodule, "ShellAboutA" );
-                if (aboutproc) aboutproc( hwnd, PACKAGE_STRING, NULL, 0 );
+                if (aboutproc) aboutproc( hwnd, app, NULL, 0 );
                 FreeLibrary( hmodule );
             }
         }
diff --git a/dlls/user32/painting.c b/dlls/user32/painting.c
index 313c5fa1e6d..65ccbf45728 100644
--- a/dlls/user32/painting.c
+++ b/dlls/user32/painting.c
@@ -19,9 +19,6 @@
  * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301, USA
  */
 
-#include "config.h"
-#include "wine/port.h"
-
 #include <assert.h>
 #include <stdarg.h>
 #include <string.h>
diff --git a/dlls/user32/property.c b/dlls/user32/property.c
index 8350c978f41..b6fb66a5e3e 100644
--- a/dlls/user32/property.c
+++ b/dlls/user32/property.c
@@ -18,16 +18,13 @@
  * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301, USA
  */
 
-#include "config.h"
-#include "wine/port.h"
-
 #include <stdarg.h>
 #include <string.h>
 
 #include "windef.h"
 #include "winbase.h"
+#include "winnls.h"
 #include "winuser.h"
-#include "wine/unicode.h"
 #include "wine/server.h"
 
 /* size of buffer needed to store an atom string */
@@ -135,7 +132,7 @@ HANDLE WINAPI GetPropW( HWND hwnd, LPCWSTR str )
     {
         req->window = wine_server_user_handle( hwnd );
         if (IS_INTRESOURCE(str)) req->atom = LOWORD(str);
-        else wine_server_add_data( req, str, strlenW(str) * sizeof(WCHAR) );
+        else wine_server_add_data( req, str, lstrlenW(str) * sizeof(WCHAR) );
         if (!wine_server_call_err( req )) ret = reply->data;
     }
     SERVER_END_REQ;
@@ -168,7 +165,7 @@ BOOL WINAPI SetPropW( HWND hwnd, LPCWSTR str, HANDLE handle )
         req->window = wine_server_user_handle( hwnd );
         req->data   = (ULONG_PTR)handle;
         if (IS_INTRESOURCE(str)) req->atom = LOWORD(str);
-        else wine_server_add_data( req, str, strlenW(str) * sizeof(WCHAR) );
+        else wine_server_add_data( req, str, lstrlenW(str) * sizeof(WCHAR) );
         ret = !wine_server_call_err( req );
     }
     SERVER_END_REQ;
@@ -200,7 +197,7 @@ HANDLE WINAPI RemovePropW( HWND hwnd, LPCWSTR str )
     {
         req->window = wine_server_user_handle( hwnd );
         if (IS_INTRESOURCE(str)) req->atom = LOWORD(str);
-        else wine_server_add_data( req, str, strlenW(str) * sizeof(WCHAR) );
+        else wine_server_add_data( req, str, lstrlenW(str) * sizeof(WCHAR) );
         if (!wine_server_call_err( req )) ret = reply->data;
     }
     SERVER_END_REQ;
diff --git a/dlls/user32/rawinput.c b/dlls/user32/rawinput.c
index 751dc3cae78..6355c66f3b1 100644
--- a/dlls/user32/rawinput.c
+++ b/dlls/user32/rawinput.c
@@ -19,7 +19,6 @@
  * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301, USA
  */
 
-#include "config.h"
 #include <stdarg.h>
 
 #define NONAMELESSUNION
@@ -684,7 +683,7 @@ UINT WINAPI GetRawInputDeviceInfoW(HANDLE handle, UINT command, void *data, UINT
         }
         else
         {
-            *data_size = strlenW(device->path) + 1;
+            *data_size = lstrlenW(device->path) + 1;
             to_copy = device->path;
         }
         to_copy_bytes = *data_size * sizeof(WCHAR);
@@ -745,7 +744,7 @@ UINT WINAPI GetRawInputDeviceInfoW(HANDLE handle, UINT command, void *data, UINT
     return *data_size;
 }
 
-static int compare_raw_input_devices(const void *ap, const void *bp)
+static int __cdecl compare_raw_input_devices(const void *ap, const void *bp)
 {
     const RAWINPUTDEVICE a = *(const RAWINPUTDEVICE *)ap;
     const RAWINPUTDEVICE b = *(const RAWINPUTDEVICE *)bp;
diff --git a/dlls/user32/resource.c b/dlls/user32/resource.c
index b487f1e424e..93de48fdbe2 100644
--- a/dlls/user32/resource.c
+++ b/dlls/user32/resource.c
@@ -19,8 +19,6 @@
  * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301, USA
  */
 
-#include "config.h"
-
 #include <stdarg.h>
 
 #include "windef.h"
diff --git a/dlls/user32/scroll.c b/dlls/user32/scroll.c
index 1d6c0484295..1d6fd959ed7 100644
--- a/dlls/user32/scroll.c
+++ b/dlls/user32/scroll.c
@@ -19,8 +19,6 @@
  * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301, USA
  */
 
-#include "config.h"
-
 #include <stdarg.h>
 
 #include "windef.h"
diff --git a/dlls/user32/spy.c b/dlls/user32/spy.c
index dea97547b38..fc6e03dd5af 100644
--- a/dlls/user32/spy.c
+++ b/dlls/user32/spy.c
@@ -27,7 +27,6 @@
 #include "winbase.h"
 #include "wingdi.h"
 #include "winreg.h"
-#include "wine/unicode.h"
 #include "win.h"
 #include "user_private.h"
 #include "wine/debug.h"
@@ -2147,7 +2146,7 @@ static void SPY_GetClassName( SPY_INSTANCE *sp_e )
     /* special code to detect a property sheet dialog   */
     if ((GetClassLongW(sp_e->msg_hwnd, GCW_ATOM) == WC_DIALOG) &&
         (GetPropW(sp_e->msg_hwnd, PropSheetInfoStr))) {
-        strcpyW(sp_e->wnd_class, WC_PROPSHEETW);
+        lstrcpyW(sp_e->wnd_class, WC_PROPSHEETW);
     }
     else {
         GetClassNameW(sp_e->msg_hwnd, sp_e->wnd_class, ARRAY_SIZE(sp_e->wnd_class));
@@ -2185,7 +2184,7 @@ static void SPY_GetMsgStuff( SPY_INSTANCE *sp_e )
 #endif
 
         while (cc_array[i].classname &&
-               strcmpiW(cc_array[i].classname, sp_e->wnd_class) != 0) i++;
+               wcsicmp(cc_array[i].classname, sp_e->wnd_class) != 0) i++;
 
         if (cc_array[i].classname)
         {
@@ -2541,7 +2540,7 @@ static void SPY_DumpStructure(const SPY_INSTANCE *sp_e, BOOL enter)
                         save_error = GetLastError();
                         GetClassNameW(pnmh->hwndFrom, from_class, ARRAY_SIZE(from_class));
                         SetLastError(save_error);
-                        if (strcmpW(TOOLBARCLASSNAMEW, from_class) == 0)
+                        if (wcscmp(TOOLBARCLASSNAMEW, from_class) == 0)
                             dumplen = sizeof(NMTBCUSTOMDRAW)-sizeof(NMHDR);
                     } else if ( pnmh->code >= HDN_ENDDRAG
                                 && pnmh->code <= HDN_ITEMCHANGINGA ) {
diff --git a/dlls/user32/sysparams.c b/dlls/user32/sysparams.c
index 114ac6adfab..88c5944855a 100644
--- a/dlls/user32/sysparams.c
+++ b/dlls/user32/sysparams.c
@@ -18,14 +18,13 @@
  * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301, USA
  */
 
-#include "config.h"
-
 #include <assert.h>
 #include <limits.h>
 #include <stdarg.h>
 #include <stdio.h>
 #include <stdlib.h>
 #include <string.h>
+#include <wchar.h>
 
 #define NONAMELESSUNION
 #define NONAMELESSSTRUCT
@@ -47,7 +46,6 @@
 #include "win.h"
 #include "user_private.h"
 #include "wine/gdi_driver.h"
-#include "wine/unicode.h"
 #include "wine/asm.h"
 #include "wine/debug.h"
 
@@ -595,10 +593,10 @@ static BOOL is_valid_adapter_name(const WCHAR *name)
     long int adapter_idx;
     WCHAR *end;
 
-    if (strncmpiW(name, ADAPTER_PREFIX, ARRAY_SIZE(ADAPTER_PREFIX)))
+    if (wcsnicmp(name, ADAPTER_PREFIX, ARRAY_SIZE(ADAPTER_PREFIX)))
         return FALSE;
 
-    adapter_idx = strtolW(name + ARRAY_SIZE(ADAPTER_PREFIX), &end, 10);
+    adapter_idx = wcstol(name + ARRAY_SIZE(ADAPTER_PREFIX), &end, 10);
     if (*end || adapter_idx < 1)
         return FALSE;
 
@@ -723,7 +721,7 @@ static BOOL save_entry( const struct sysparam_entry *entry, const void *data, DW
 /* save a string value to a registry entry */
 static BOOL save_entry_string( const struct sysparam_entry *entry, const WCHAR *str, UINT flags )
 {
-    return save_entry( entry, str, (strlenW(str) + 1) * sizeof(WCHAR), REG_SZ, flags );
+    return save_entry( entry, str, (lstrlenW(str) + 1) * sizeof(WCHAR), REG_SZ, flags );
 }
 
 /* initialize an entry in the registry if missing */
@@ -743,7 +741,7 @@ static BOOL init_entry( struct sysparam_entry *entry, const void *data, DWORD si
 /* initialize a string value in the registry if missing */
 static BOOL init_entry_string( struct sysparam_entry *entry, const WCHAR *str )
 {
-    return init_entry( entry, str, (strlenW(str) + 1) * sizeof(WCHAR), REG_SZ );
+    return init_entry( entry, str, (lstrlenW(str) + 1) * sizeof(WCHAR), REG_SZ );
 }
 
 HDC get_display_dc(void)
@@ -811,7 +809,7 @@ static INT CALLBACK real_fontname_proc(const LOGFONTW *lf, const TEXTMETRICW *nt
 static void get_real_fontname( LOGFONTW *lf, WCHAR fullname[LF_FACESIZE] )
 {
     HDC hdc = get_display_dc();
-    strcpyW( fullname, lf->lfFaceName );
+    lstrcpyW( fullname, lf->lfFaceName );
     EnumFontFamiliesExW( hdc, lf, real_fontname_proc, (LPARAM)fullname, 0 );
     release_display_dc( hdc );
 }
@@ -860,7 +858,7 @@ static BOOL get_uint_entry( union sysparam_all_entry *entry, UINT int_param, voi
     {
         WCHAR buf[32];
 
-        if (load_entry( &entry->hdr, buf, sizeof(buf) )) entry->uint.val = atoiW( buf );
+        if (load_entry( &entry->hdr, buf, sizeof(buf) )) entry->uint.val = wcstol( buf, NULL, 10 );
     }
     *(UINT *)ptr_param = entry->uint.val;
     return TRUE;
@@ -919,7 +917,7 @@ static BOOL get_twips_entry( union sysparam_all_entry *entry, UINT int_param, vo
     {
         WCHAR buf[32];
 
-        if (load_entry( &entry->hdr, buf, sizeof(buf) )) entry->uint.val = atoiW( buf );
+        if (load_entry( &entry->hdr, buf, sizeof(buf) )) entry->uint.val = wcstol( buf, NULL, 10 );
     }
 
     /* Dimensions are quoted as being "twips" values if negative and pixels if positive.
@@ -955,7 +953,7 @@ static BOOL get_bool_entry( union sysparam_all_entry *entry, UINT int_param, voi
     {
         WCHAR buf[32];
 
-        if (load_entry( &entry->hdr, buf, sizeof(buf) )) entry->bool.val = atoiW( buf ) != 0;
+        if (load_entry( &entry->hdr, buf, sizeof(buf) )) entry->bool.val = wcstol( buf, NULL, 10 ) != 0;
     }
     *(UINT *)ptr_param = entry->bool.val;
     return TRUE;
@@ -1059,13 +1057,13 @@ static BOOL get_rgb_entry( union sysparam_all_entry *entry, UINT int_param, void
             DWORD r, g, b;
             WCHAR *end, *str = buf;
 
-            r = strtoulW( str, &end, 10 );
+            r = wcstoul( str, &end, 10 );
             if (end == str || !*end) goto done;
             str = end + 1;
-            g = strtoulW( str, &end, 10 );
+            g = wcstoul( str, &end, 10 );
             if (end == str || !*end) goto done;
             str = end + 1;
-            b = strtoulW( str, &end, 10 );
+            b = wcstoul( str, &end, 10 );
             if (end == str) goto done;
             if (r > 255 || g > 255 || b > 255) goto done;
             entry->rgb.val = RGB( r, g, b );
@@ -1147,7 +1145,7 @@ static BOOL get_font_entry( union sysparam_all_entry *entry, UINT int_param, voi
     }
     font = entry->font.val;
     font.lfHeight = map_to_dpi( font.lfHeight, dpi );
-    strcpyW( font.lfFaceName, entry->font.fullname );
+    lstrcpyW( font.lfFaceName, entry->font.fullname );
     *(LOGFONTW *)ptr_param = font;
     return TRUE;
 }
@@ -1160,7 +1158,7 @@ static BOOL set_font_entry( union sysparam_all_entry *entry, UINT int_param, voi
 
     memcpy( &font, ptr_param, sizeof(font) );
     /* zero pad the end of lfFaceName so we don't save uninitialised data */
-    ptr = memchrW( font.lfFaceName, 0, LF_FACESIZE );
+    ptr = wmemchr( font.lfFaceName, 0, LF_FACESIZE );
     if (ptr) memset( ptr, 0, (font.lfFaceName + LF_FACESIZE - ptr) * sizeof(WCHAR) );
     if (font.lfHeight < 0) font.lfHeight = map_from_system_dpi( font.lfHeight );
 
@@ -1207,7 +1205,7 @@ static BOOL set_path_entry( union sysparam_all_entry *entry, UINT int_param, voi
     ret = save_entry_string( &entry->hdr, buffer, flags );
     if (ret)
     {
-        strcpyW( entry->path.path, buffer );
+        lstrcpyW( entry->path.path, buffer );
         entry->hdr.loaded = TRUE;
     }
     return ret;
@@ -4030,7 +4028,7 @@ static BOOL update_monitor_cache(void)
                                         (BYTE *)monitors[monitor_count].szDevice, CCHDEVICENAME * sizeof(WCHAR), NULL, 0))
             goto fail;
         monitors[monitor_count].dwFlags =
-            !lstrcmpW( DEFAULT_ADAPTER_NAME, monitors[monitor_count].szDevice ) ? MONITORINFOF_PRIMARY : 0;
+            !wcscmp( DEFAULT_ADAPTER_NAME, monitors[monitor_count].szDevice ) ? MONITORINFOF_PRIMARY : 0;
 
         monitor_count++;
     }
@@ -4301,7 +4299,7 @@ BOOL WINAPI EnumDisplayDevicesW( LPCWSTR device, DWORD index, DISPLAY_DEVICEW *i
     /* Find adapter */
     if (!device)
     {
-        sprintfW( key_nameW, VIDEO_VALUE_FMT, index );
+        swprintf( key_nameW, ARRAY_SIZE(key_nameW), VIDEO_VALUE_FMT, index );
         size = sizeof(bufferW);
         if (RegGetValueW( HKEY_LOCAL_MACHINE, VIDEO_KEY, key_nameW, RRF_RT_REG_SZ, NULL, bufferW, &size ))
             goto done;
@@ -4311,7 +4309,7 @@ BOOL WINAPI EnumDisplayDevicesW( LPCWSTR device, DWORD index, DISPLAY_DEVICEW *i
             lstrcpyW( info->DeviceKey, bufferW );
 
         /* DeviceName */
-        sprintfW( info->DeviceName, ADAPTER_FMT, index + 1 );
+        swprintf( info->DeviceName, ARRAY_SIZE(info->DeviceName), ADAPTER_FMT, index + 1 );
 
         /* Strip \Registry\Machine\ */
         lstrcpyW( key_nameW, bufferW + 18 );
@@ -4352,23 +4350,23 @@ BOOL WINAPI EnumDisplayDevicesW( LPCWSTR device, DWORD index, DISPLAY_DEVICEW *i
     else
     {
         /* Check adapter name */
-        if (strncmpiW( device, ADAPTER_PREFIX, ARRAY_SIZE(ADAPTER_PREFIX) ))
+        if (wcsnicmp( device, ADAPTER_PREFIX, ARRAY_SIZE(ADAPTER_PREFIX) ))
             goto done;
 
-        adapter_index = strtolW( device + ARRAY_SIZE(ADAPTER_PREFIX), NULL, 10 );
-        sprintfW( key_nameW, VIDEO_VALUE_FMT, adapter_index - 1 );
+        adapter_index = wcstol( device + ARRAY_SIZE(ADAPTER_PREFIX), NULL, 10 );
+        swprintf( key_nameW, ARRAY_SIZE(key_nameW), VIDEO_VALUE_FMT, adapter_index - 1 );
 
         size = sizeof(bufferW);
         if (RegGetValueW( HKEY_LOCAL_MACHINE, VIDEO_KEY, key_nameW, RRF_RT_REG_SZ, NULL, bufferW, &size ))
             goto done;
 
         /* DeviceName */
-        sprintfW( info->DeviceName, MONITOR_FMT, adapter_index, index );
+        swprintf( info->DeviceName, ARRAY_SIZE(info->DeviceName), MONITOR_FMT, adapter_index, index );
 
         /* Get monitor instance */
         /* Strip \Registry\Machine\ first */
         lstrcpyW( key_nameW, bufferW + 18 );
-        sprintfW( bufferW, MONITOR_ID_VALUE_FMT, index );
+        swprintf( bufferW, ARRAY_SIZE(bufferW), MONITOR_ID_VALUE_FMT, index );
 
         size = sizeof(instanceW);
         if (RegGetValueW( HKEY_CURRENT_CONFIG, key_nameW, bufferW, RRF_RT_REG_SZ, NULL, instanceW, &size ))
@@ -4409,7 +4407,7 @@ BOOL WINAPI EnumDisplayDevicesW( LPCWSTR device, DWORD index, DISPLAY_DEVICEW *i
                 lstrcatW( info->DeviceID, instanceW );
                 lstrcatW( info->DeviceID, GUID_DEVINTERFACE_MONITOR );
                 /* Replace '\\' with '#' after prefix */
-                for (next_charW = info->DeviceID + strlenW( MONITOR_INTERFACE_PREFIX ); *next_charW;
+                for (next_charW = info->DeviceID + lstrlenW( MONITOR_INTERFACE_PREFIX ); *next_charW;
                      next_charW++)
                 {
                     if (*next_charW == '\\')
@@ -4817,7 +4815,7 @@ LONG WINAPI QueryDisplayConfig(UINT32 flags, UINT32 *numpathelements, DISPLAYCON
             goto done;
 
         /* Extract the adapter index from device_name to use as the source ID */
-        adapter_index = strtolW(device_name + ARRAY_SIZE(ADAPTER_PREFIX), NULL, 10);
+        adapter_index = wcstol(device_name + ARRAY_SIZE(ADAPTER_PREFIX), NULL, 10);
         adapter_index--;
 
         if (path_index == *numpathelements || mode_index == *numinfoelements)
@@ -4914,7 +4912,7 @@ LONG WINAPI DisplayConfigGetDeviceInfo(DISPLAYCONFIG_DEVICE_INFO_HEADER *packet)
                                            &type, (BYTE *)device_name, sizeof(device_name), NULL, 0))
                 continue;
 
-            source_id = strtolW(device_name + ARRAY_SIZE(ADAPTER_PREFIX), NULL, 10);
+            source_id = wcstol(device_name + ARRAY_SIZE(ADAPTER_PREFIX), NULL, 10);
             source_id--;
             if (source_name->header.id != source_id)
                 continue;
diff --git a/dlls/user32/text.c b/dlls/user32/text.c
index fd0751e6f6a..b0c5c892d7a 100644
--- a/dlls/user32/text.c
+++ b/dlls/user32/text.c
@@ -24,9 +24,6 @@
  * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301, USA
  */
 
-#include "config.h"
-#include "wine/port.h"
-
 #include <stdarg.h>
 #include <stdlib.h>
 #include <string.h>
@@ -35,7 +32,6 @@
 #include "windef.h"
 #include "winbase.h"
 #include "wingdi.h"
-#include "wine/unicode.h"
 #include "winnls.h"
 #include "controls.h"
 #include "usp10.h"
@@ -142,7 +138,7 @@ static void TEXT_Ellipsify (HDC hdc, WCHAR *str, unsigned int max_len,
     unsigned int len_ellipsis;
     unsigned int lo, mid, hi;
 
-    len_ellipsis = strlenW (ELLIPSISW);
+    len_ellipsis = lstrlenW (ELLIPSISW);
     if (len_ellipsis > max_len) len_ellipsis = max_len;
     if (*len_str > max_len - len_ellipsis)
         *len_str = max_len - len_ellipsis;
@@ -239,7 +235,7 @@ static void TEXT_PathEllipsify (HDC hdc, WCHAR *str, unsigned int max_len,
     int len_under;
     WCHAR *lastBkSlash, *lastFwdSlash, *lastSlash;
 
-    len_ellipsis = strlenW (ELLIPSISW);
+    len_ellipsis = lstrlenW (ELLIPSISW);
     if (!max_len) return;
     if (len_ellipsis >= max_len) len_ellipsis = max_len - 1;
     if (*len_str + len_ellipsis >= max_len)
@@ -249,8 +245,8 @@ static void TEXT_PathEllipsify (HDC hdc, WCHAR *str, unsigned int max_len,
          */
     str[*len_str] = '\0'; /* to simplify things */
 
-    lastBkSlash  = strrchrW (str, BACK_SLASH);
-    lastFwdSlash = strrchrW (str, FORWARD_SLASH);
+    lastBkSlash  = wcsrchr (str, BACK_SLASH);
+    lastFwdSlash = wcsrchr (str, FORWARD_SLASH);
     lastSlash = lastBkSlash > lastFwdSlash ? lastBkSlash : lastFwdSlash;
     if (!lastSlash) lastSlash = str;
     len_trailing = *len_str - (lastSlash - str);
@@ -915,7 +911,7 @@ INT WINAPI DrawTextExW( HDC hdc, LPWSTR str, INT i_count,
 
     if (count == -1)
     {
-        count = strlenW(str);
+        count = lstrlenW(str);
         if (count == 0)
         {
             if( flags & DT_CALCRECT)
@@ -1286,7 +1282,7 @@ BOOL WINAPI GrayStringW( HDC hdc, HBRUSH hbr, GRAYSTRINGPROC gsprc,
                          LPARAM lParam, INT cch, INT x, INT y,
                          INT cx, INT cy )
 {
-    if (!cch) cch = strlenW( (LPCWSTR)lParam );
+    if (!cch) cch = lstrlenW( (LPCWSTR)lParam );
     if ((cx == 0 || cy == 0) && cch != -1)
     {
         SIZE s;
diff --git a/dlls/user32/uitools.c b/dlls/user32/uitools.c
index 8657f27869d..ba9d52129d4 100644
--- a/dlls/user32/uitools.c
+++ b/dlls/user32/uitools.c
@@ -28,7 +28,6 @@
 #include "winuser.h"
 #include "user_private.h"
 #include "controls.h"
-#include "wine/unicode.h"
 #include "wine/debug.h"
 
 WINE_DEFAULT_DEBUG_CHANNEL(graphics);
@@ -1599,7 +1598,7 @@ static BOOL UITOOLS_DrawState(HDC hdc, HBRUSH hbr, DRAWSTATEPROC func, LPARAM lp
         if (!lp) return FALSE;
 
         if(unicode)
-            len = strlenW((LPWSTR)lp);
+            len = lstrlenW((LPWSTR)lp);
         else
             len = strlen((LPSTR)lp);
     }
diff --git a/dlls/user32/user_main.c b/dlls/user32/user_main.c
index 6b70db4978c..78172c00158 100644
--- a/dlls/user32/user_main.c
+++ b/dlls/user32/user_main.c
@@ -29,7 +29,6 @@
 #include "controls.h"
 #include "user_private.h"
 #include "win.h"
-#include "wine/unicode.h"
 #include "wine/debug.h"
 
 WINE_DEFAULT_DEBUG_CHANNEL(graphics);
@@ -181,10 +180,10 @@ static const WCHAR *get_default_desktop(void)
 
     len = (GetModuleFileNameW( 0, buffer, MAX_PATH ));
     if (!len || len >= MAX_PATH) return defaultW;
-    if ((p = strrchrW( appname, '/' ))) appname = p + 1;
-    if ((p = strrchrW( appname, '\\' ))) appname = p + 1;
-    p = appname + strlenW(appname);
-    strcpyW( p, explorerW );
+    if ((p = wcsrchr( appname, '/' ))) appname = p + 1;
+    if ((p = wcsrchr( appname, '\\' ))) appname = p + 1;
+    p = appname + lstrlenW(appname);
+    lstrcpyW( p, explorerW );
 
     /* @@ Wine registry key: HKCU\Software\Wine\AppDefaults\app.exe\Explorer */
     if (!RegOpenKeyW( HKEY_CURRENT_USER, app_defaultsW, &tmpkey ))
@@ -202,7 +201,7 @@ static const WCHAR *get_default_desktop(void)
     }
 
     memcpy( buffer, app_defaultsW, 13 * sizeof(WCHAR) );  /* copy only software\\wine */
-    strcpyW( buffer + 13, explorerW );
+    lstrcpyW( buffer + 13, explorerW );
 
     /* @@ Wine registry key: HKCU\Software\Wine\Explorer */
     if (!RegOpenKeyW( HKEY_CURRENT_USER, buffer, &appkey ))
@@ -255,13 +254,13 @@ static void dpiaware_init(void)
         TRACE( "got dpiAwareness=%s\n", debugstr_w(buffer) );
         for (start = buffer; *start; start = end)
         {
-            start += strspnW( start, spacesW );
-            if (!(end = strchrW( start, ',' ))) end = start + strlenW(start);
+            start += wcsspn( start, spacesW );
+            if (!(end = wcschr( start, ',' ))) end = start + lstrlenW(start);
             else *end++ = 0;
-            if ((p = strpbrkW( start, spacesW ))) *p = 0;
+            if ((p = wcspbrk( start, spacesW ))) *p = 0;
             for (i = 0; i < ARRAY_SIZE(types); i++)
             {
-                if (strcmpiW( start, types[i] )) continue;
+                if (wcsicmp( start, types[i] )) continue;
                 SetProcessDpiAwarenessContext( (DPI_AWARENESS_CONTEXT)~i );
                 return;
             }
@@ -274,9 +273,9 @@ static void dpiaware_init(void)
         static const WCHAR permonW[] = {'p','e','r',' ','m','o','n','i','t','o','r',0};
 
         TRACE( "got dpiAware=%s\n", debugstr_w(buffer) );
-        if (!strcmpiW( buffer, trueW ))
+        if (!wcsicmp( buffer, trueW ))
             SetProcessDpiAwarenessContext( DPI_AWARENESS_CONTEXT_SYSTEM_AWARE );
-        else if (!strcmpiW( buffer, truepmW ) || !strcmpiW( buffer, permonW ))
+        else if (!wcsicmp( buffer, truepmW ) || !wcsicmp( buffer, permonW ))
             SetProcessDpiAwarenessContext( DPI_AWARENESS_CONTEXT_PER_MONITOR_AWARE );
         else
             SetProcessDpiAwarenessContext( DPI_AWARENESS_CONTEXT_UNAWARE );
@@ -300,9 +299,9 @@ static void winstation_init(void)
     GetStartupInfoW( &info );
     if (info.lpDesktop && *info.lpDesktop)
     {
-        buffer = HeapAlloc( GetProcessHeap(), 0, (strlenW(info.lpDesktop) + 1) * sizeof(WCHAR) );
-        strcpyW( buffer, info.lpDesktop );
-        if ((desktop = strchrW( buffer, '\\' )))
+        buffer = HeapAlloc( GetProcessHeap(), 0, (lstrlenW(info.lpDesktop) + 1) * sizeof(WCHAR) );
+        lstrcpyW( buffer, info.lpDesktop );
+        if ((desktop = wcschr( buffer, '\\' )))
         {
             *desktop++ = 0;
             winstation = buffer;
@@ -318,7 +317,7 @@ static void winstation_init(void)
         {
             SetProcessWindowStation( handle );
             /* only WinSta0 is visible */
-            if (!winstation || !strcmpiW( winstation, WinSta0 ))
+            if (!winstation || !wcsicmp( winstation, WinSta0 ))
             {
                 USEROBJECTFLAGS flags;
                 flags.fInherit  = FALSE;
@@ -439,8 +438,8 @@ BOOL WINAPI ExitWindowsEx( UINT flags, DWORD reason )
     void *redir;
 
     GetSystemDirectoryW( app, MAX_PATH - ARRAY_SIZE( winebootW ));
-    strcatW( app, winebootW );
-    strcpyW( cmdline, app );
+    lstrcatW( app, winebootW );
+    lstrcpyW( cmdline, app );
 
     if (flags & EWX_FORCE) lstrcatW( cmdline, killW );
     else
diff --git a/dlls/user32/user_private.h b/dlls/user32/user_private.h
index c96f7e47a63..7761a1ceb4f 100644
--- a/dlls/user32/user_private.h
+++ b/dlls/user32/user_private.h
@@ -29,7 +29,6 @@
 #include "winreg.h"
 #include "winternl.h"
 #include "wine/heap.h"
-#include "wine/unicode.h"
 
 #define GET_WORD(ptr)  (*(const WORD *)(ptr))
 #define GET_DWORD(ptr) (*(const DWORD *)(ptr))
@@ -387,7 +386,7 @@ static inline WCHAR *heap_strdupW(const WCHAR *src)
     WCHAR *dst;
     unsigned len;
     if (!src) return NULL;
-    len = (strlenW(src) + 1) * sizeof(WCHAR);
+    len = (lstrlenW(src) + 1) * sizeof(WCHAR);
     if ((dst = heap_alloc(len))) memcpy(dst, src, len);
     return dst;
 }
diff --git a/dlls/user32/win.c b/dlls/user32/win.c
index 49cebe99790..3b4a1d74262 100644
--- a/dlls/user32/win.c
+++ b/dlls/user32/win.c
@@ -18,9 +18,6 @@
  * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301, USA
  */
 
-#include "config.h"
-#include "wine/port.h"
-
 #include <assert.h>
 #include <stdarg.h>
 #include <stdlib.h>
@@ -28,9 +25,9 @@
 
 #include "windef.h"
 #include "winbase.h"
+#include "winnls.h"
 #include "winver.h"
 #include "wine/server.h"
-#include "wine/unicode.h"
 #include "wine/asm.h"
 #include "win.h"
 #include "user_private.h"
@@ -212,7 +209,7 @@ static WND *create_window_handle( HWND parent, HWND owner, LPCWSTR name,
         req->dpi      = GetDpiForSystem();
         req->awareness = awareness;
         if (!(req->atom = get_int_atom_value( name )) && name)
-            wine_server_add_data( req, name, strlenW(name)*sizeof(WCHAR) );
+            wine_server_add_data( req, name, lstrlenW(name)*sizeof(WCHAR) );
         if (!wine_server_call_err( req ))
         {
             handle      = wine_server_ptr_handle( reply->handle );
@@ -333,7 +330,7 @@ static HWND *list_window_children( HDESK desktop, HWND hwnd, LPCWSTR class, DWOR
             req->parent = wine_server_user_handle( hwnd );
             req->tid = tid;
             req->atom = atom;
-            if (!atom && class) wine_server_add_data( req, class, strlenW(class)*sizeof(WCHAR) );
+            if (!atom && class) wine_server_add_data( req, class, lstrlenW(class)*sizeof(WCHAR) );
             wine_server_set_reply( req, list, (size-1) * sizeof(user_handle_t) );
             if (!wine_server_call( req )) count = reply->count;
         }
@@ -1461,7 +1458,7 @@ HWND WIN_CreateWindowEx( CREATESTRUCTW *cs, LPCWSTR className, HINSTANCE module,
 
         /* are we creating the desktop or HWND_MESSAGE parent itself? */
         if (className != (LPCWSTR)DESKTOP_CLASS_ATOM &&
-            (IS_INTRESOURCE(className) || strcmpiW( className, messageW )))
+            (IS_INTRESOURCE(className) || wcsicmp( className, messageW )))
         {
             DWORD layout;
             GetProcessDefaultLayout( &layout );
@@ -1975,7 +1972,7 @@ HWND WINAPI FindWindowExW( HWND parent, HWND child, LPCWSTR className, LPCWSTR t
 
     if (title)
     {
-        len = strlenW(title) + 1;  /* one extra char to check for chars beyond the end */
+        len = lstrlenW(title) + 1;  /* one extra char to check for chars beyond the end */
         if (!(buffer = HeapAlloc( GetProcessHeap(), 0, (len + 1) * sizeof(WCHAR) ))) return 0;
     }
 
@@ -1995,7 +1992,7 @@ HWND WINAPI FindWindowExW( HWND parent, HWND child, LPCWSTR className, LPCWSTR t
         {
             if (InternalGetWindowText( list[i], buffer, len + 1 ))
             {
-                if (!strcmpiW( buffer, title )) break;
+                if (!wcsicmp( buffer, title )) break;
             }
             else
             {
@@ -2122,10 +2119,10 @@ HWND WINAPI GetDesktopWindow(void)
         si.hStdError  = GetStdHandle( STD_ERROR_HANDLE );
 
         GetSystemDirectoryW( windir, MAX_PATH );
-        strcpyW( app, windir );
-        strcatW( app, explorer );
-        strcpyW( cmdline, app );
-        strcatW( cmdline, args );
+        lstrcpyW( app, windir );
+        lstrcatW( app, explorer );
+        lstrcpyW( cmdline, app );
+        lstrcatW( cmdline, args );
 
         Wow64DisableWow64FsRedirection( &redir );
         if (CreateProcessW( app, cmdline, NULL, NULL, FALSE, DETACHED_PROCESS,
@@ -2914,7 +2911,7 @@ INT WINAPI InternalGetWindowText(HWND hwnd,LPWSTR lpString,INT nMaxCount )
     {
         get_server_window_text( hwnd, lpString, nMaxCount );
     }
-    return strlenW(lpString);
+    return lstrlenW(lpString);
 }
 
 
@@ -2933,7 +2930,7 @@ INT WINAPI GetWindowTextW( HWND hwnd, LPWSTR lpString, INT nMaxCount )
 
     /* when window belongs to other process, don't send a message */
     get_server_window_text( hwnd, lpString, nMaxCount );
-    return strlenW(lpString);
+    return lstrlenW(lpString);
 }
 
 
@@ -4081,7 +4078,7 @@ BOOL WINAPI GetProcessDefaultLayout( DWORD *layout )
                 if (LOWORD(languages[i]) == MAKELANGID( PRIMARYLANGID(user_lang), SUBLANG_NEUTRAL )) break;
         if (i == len) i = 0;  /* default to the first one */
 
-        sprintfW( buffer, filedescW, LOWORD(languages[i]), HIWORD(languages[i]) );
+        swprintf( buffer, ARRAY_SIZE(buffer), filedescW, LOWORD(languages[i]), HIWORD(languages[i]) );
         if (!VerQueryValueW( data, buffer, (void **)&str, &len )) goto done;
         TRACE( "found description %s\n", debugstr_w( str ));
         if (str[0] == 0x200e && str[1] == 0x200e) version_layout = LAYOUT_RTL;
diff --git a/dlls/user32/winhelp.c b/dlls/user32/winhelp.c
index c40b0fc8fcd..2b4ca5b89b5 100644
--- a/dlls/user32/winhelp.c
+++ b/dlls/user32/winhelp.c
@@ -19,21 +19,17 @@
  * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301, USA
  */
 
-#include "config.h"
-
 #include <stdlib.h>
 #include <stdarg.h>
 #include <stdio.h>
 #include <string.h>
-#ifdef HAVE_UNISTD_H
-# include <unistd.h>
-#endif
-#include "wine/debug.h"
+
 #include "windef.h"
 #include "winbase.h"
 #include "wingdi.h"
 #include "winuser.h"
 #include "winnls.h"
+#include "wine/debug.h"
 
 WINE_DEFAULT_DEBUG_CHANNEL(win);
 
diff --git a/dlls/user32/winpos.c b/dlls/user32/winpos.c
index e3c3f5c5c6a..9e5a0c238af 100644
--- a/dlls/user32/winpos.c
+++ b/dlls/user32/winpos.c
@@ -19,9 +19,6 @@
  * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301, USA
  */
 
-#include "config.h"
-#include "wine/port.h"
-
 #include <stdarg.h>
 #include <string.h>
 #include "ntstatus.h"
diff --git a/dlls/user32/winproc.c b/dlls/user32/winproc.c
index 6de650cd1e5..0be51779f69 100644
--- a/dlls/user32/winproc.c
+++ b/dlls/user32/winproc.c
@@ -19,20 +19,17 @@
  * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301, USA
  */
 
-#include "config.h"
-#include "wine/port.h"
-
 #include <assert.h>
 #include <stdarg.h>
 #include <string.h>
 
 #include "windef.h"
 #include "winbase.h"
+#include "winnls.h"
 #include "wingdi.h"
 #include "controls.h"
 #include "win.h"
 #include "user_private.h"
-#include "wine/unicode.h"
 #include "wine/asm.h"
 #include "wine/debug.h"
 
@@ -524,7 +521,7 @@ LRESULT WINPROC_CallProcAtoW( winproc_callback_t callback, HWND hwnd, UINT msg,
             {
                 DWORD len;
                 RtlUnicodeToMultiByteN( (LPSTR)lParam, ~0u, &len,
-                                        buffer, (strlenW(buffer) + 1) * sizeof(WCHAR) );
+                                        buffer, (lstrlenW(buffer) + 1) * sizeof(WCHAR) );
                 *result = len - 1;
             }
         }
@@ -639,12 +636,12 @@ static LRESULT WINPROC_CallProcWtoA( winproc_callback_t callback, HWND hwnd, UIN
 
             if (!IS_INTRESOURCE(csW->lpszClass))
             {
-                class_lenW = (strlenW(csW->lpszClass) + 1) * sizeof(WCHAR);
+                class_lenW = (lstrlenW(csW->lpszClass) + 1) * sizeof(WCHAR);
                 RtlUnicodeToMultiByteSize(&class_lenA, csW->lpszClass, class_lenW);
             }
             if (!IS_INTRESOURCE(csW->lpszName))
             {
-                name_lenW = (strlenW(csW->lpszName) + 1) * sizeof(WCHAR);
+                name_lenW = (lstrlenW(csW->lpszName) + 1) * sizeof(WCHAR);
                 RtlUnicodeToMultiByteSize(&name_lenA, csW->lpszName, name_lenW);
             }
 
@@ -724,7 +721,7 @@ static LRESULT WINPROC_CallProcWtoA( winproc_callback_t callback, HWND hwnd, UIN
         {
             char *ptr, buffer[512];
             LPCWSTR strW = (LPCWSTR)lParam;
-            DWORD lenA, lenW = (strlenW(strW) + 1) * sizeof(WCHAR);
+            DWORD lenA, lenW = (lstrlenW(strW) + 1) * sizeof(WCHAR);
 
             RtlUnicodeToMultiByteSize( &lenA, strW, lenW );
             if ((ptr = get_buffer( buffer, sizeof(buffer), lenA )))
@@ -747,12 +744,12 @@ static LRESULT WINPROC_CallProcWtoA( winproc_callback_t callback, HWND hwnd, UIN
 
             if (!IS_INTRESOURCE(csW->szTitle))
             {
-                title_lenW = (strlenW(csW->szTitle) + 1) * sizeof(WCHAR);
+                title_lenW = (lstrlenW(csW->szTitle) + 1) * sizeof(WCHAR);
                 RtlUnicodeToMultiByteSize( &title_lenA, csW->szTitle, title_lenW );
             }
             if (!IS_INTRESOURCE(csW->szClass))
             {
-                class_lenW = (strlenW(csW->szClass) + 1) * sizeof(WCHAR);
+                class_lenW = (lstrlenW(csW->szClass) + 1) * sizeof(WCHAR);
                 RtlUnicodeToMultiByteSize( &class_lenA, csW->szClass, class_lenW );
             }
 
diff --git a/dlls/user32/winstation.c b/dlls/user32/winstation.c
index b5d5a372faf..68762ae9ded 100644
--- a/dlls/user32/winstation.c
+++ b/dlls/user32/winstation.c
@@ -31,7 +31,6 @@
 #include "winternl.h"
 #include "ddk/wdm.h"
 #include "wine/server.h"
-#include "wine/unicode.h"
 #include "wine/debug.h"
 #include "user_private.h"
 
@@ -70,7 +69,7 @@ static HANDLE get_winstations_dir_handle(void)
     {
         HANDLE dir;
 
-        sprintfW( buffer, basenameW, NtCurrentTeb()->Peb->SessionId );
+        swprintf( buffer, ARRAY_SIZE(buffer), basenameW, NtCurrentTeb()->Peb->SessionId );
         RtlInitUnicodeString( &str, buffer );
         InitializeObjectAttributes( &attr, &str, 0, 0, NULL );
         NtOpenDirectoryObject( &dir, DIRECTORY_CREATE_OBJECT | DIRECTORY_TRAVERSE, &attr );
@@ -80,16 +79,18 @@ static HANDLE get_winstations_dir_handle(void)
     return handle;
 }
 
+static WCHAR default_name[29];
+
 static BOOL WINAPI winstation_default_name_once( INIT_ONCE *once, void *param, void **context )
 {
     static const WCHAR fmt[] = {'S','e','r','v','i','c','e','-','0','x','%','x','-','%','x','$',0};
-    WCHAR *name = (WCHAR *)param;
     TOKEN_STATISTICS stats;
     BOOL ret;
 
     ret = GetTokenInformation( GetCurrentProcessToken(), TokenStatistics, &stats, sizeof(stats), NULL );
     if (ret)
-        sprintfW( name, fmt, stats.AuthenticationId.HighPart, stats.AuthenticationId.LowPart );
+        swprintf( default_name, ARRAY_SIZE(default_name), fmt,
+                  stats.AuthenticationId.HighPart, stats.AuthenticationId.LowPart );
 
     return ret;
 }
@@ -97,11 +98,10 @@ static BOOL WINAPI winstation_default_name_once( INIT_ONCE *once, void *param, v
 static const WCHAR *get_winstation_default_name( void )
 {
     static INIT_ONCE once = INIT_ONCE_STATIC_INIT;
-    static WCHAR name[29];
     BOOL ret;
 
-    ret = InitOnceExecuteOnce( &once, winstation_default_name_once, name, NULL );
-    return ret ? name : NULL;
+    ret = InitOnceExecuteOnce( &once, winstation_default_name_once, NULL, NULL );
+    return ret ? default_name : NULL;
 }
 
 /***********************************************************************
@@ -130,7 +130,7 @@ HWINSTA WINAPI CreateWindowStationW( LPCWSTR name, DWORD flags, ACCESS_MASK acce
                                      LPSECURITY_ATTRIBUTES sa )
 {
     HANDLE ret;
-    DWORD len = name ? strlenW(name) : 0;
+    DWORD len = name ? lstrlenW(name) : 0;
 
     if (len >= MAX_PATH)
     {
@@ -140,7 +140,7 @@ HWINSTA WINAPI CreateWindowStationW( LPCWSTR name, DWORD flags, ACCESS_MASK acce
     if (!len)
     {
         name = get_winstation_default_name();
-        len = strlenW( name );
+        len = lstrlenW( name );
     }
     SERVER_START_REQ( create_winstation )
     {
@@ -183,7 +183,7 @@ HWINSTA WINAPI OpenWindowStationA( LPCSTR name, BOOL inherit, ACCESS_MASK access
 HWINSTA WINAPI OpenWindowStationW( LPCWSTR name, BOOL inherit, ACCESS_MASK access )
 {
     HANDLE ret = 0;
-    DWORD len = name ? strlenW(name) : 0;
+    DWORD len = name ? lstrlenW(name) : 0;
     if (len >= MAX_PATH)
     {
         SetLastError( ERROR_FILENAME_EXCED_RANGE );
@@ -192,7 +192,7 @@ HWINSTA WINAPI OpenWindowStationW( LPCWSTR name, BOOL inherit, ACCESS_MASK acces
     if (!len)
     {
         name = get_winstation_default_name();
-        len = strlenW( name );
+        len = lstrlenW( name );
     }
     SERVER_START_REQ( open_winstation )
     {
@@ -334,7 +334,7 @@ HDESK WINAPI CreateDesktopW( LPCWSTR name, LPCWSTR device, LPDEVMODEW devmode,
                              DWORD flags, ACCESS_MASK access, LPSECURITY_ATTRIBUTES sa )
 {
     HANDLE ret;
-    DWORD len = name ? strlenW(name) : 0;
+    DWORD len = name ? lstrlenW(name) : 0;
 
     if (device || devmode)
     {
@@ -382,7 +382,7 @@ HDESK WINAPI OpenDesktopA( LPCSTR name, DWORD flags, BOOL inherit, ACCESS_MASK a
 HDESK open_winstation_desktop( HWINSTA hwinsta, LPCWSTR name, DWORD flags, BOOL inherit, ACCESS_MASK access )
 {
     HANDLE ret = 0;
-    DWORD len = name ? strlenW(name) : 0;
+    DWORD len = name ? lstrlenW(name) : 0;
     if (len >= MAX_PATH)
     {
         SetLastError( ERROR_FILENAME_EXCED_RANGE );
From 5ad25c293b6a7b5cd5dea43f29f6fa94d8302722 Mon Sep 17 00:00:00 2001
From: Alexandre Julliard <julliard@winehq.org>
Date: Mon, 21 Sep 2020 16:31:11 +0200
Subject: [PATCH] user32: Use wide character string literals.

Signed-off-by: Alexandre Julliard <julliard@winehq.org>
---
 dlls/user32/button.c     |   3 +-
 dlls/user32/class.c      |  55 +++++-----
 dlls/user32/combo.c      |  25 ++---
 dlls/user32/dde_client.c |   2 +-
 dlls/user32/dde_misc.c   |   5 +-
 dlls/user32/dde_server.c |  10 +-
 dlls/user32/defwnd.c     |   3 +-
 dlls/user32/desktop.c    |  12 +--
 dlls/user32/dialog.c     |  18 ++--
 dlls/user32/driver.c     |  26 ++---
 dlls/user32/edit.c       |   9 +-
 dlls/user32/icontitle.c  |   3 +-
 dlls/user32/listbox.c    |  19 ++--
 dlls/user32/mdi.c        |  10 +-
 dlls/user32/menu.c       |   8 +-
 dlls/user32/message.c    |   4 +-
 dlls/user32/misc.c       |   6 +-
 dlls/user32/msgbox.c     |   6 +-
 dlls/user32/painting.c   |   4 +-
 dlls/user32/rawinput.c   |  10 +-
 dlls/user32/scroll.c     |   3 +-
 dlls/user32/spy.c        |   5 +-
 dlls/user32/static.c     |   3 +-
 dlls/user32/sysparams.c  | 221 ++++++++++++---------------------------
 dlls/user32/text.c       |   2 +-
 dlls/user32/uitools.c    |   3 +-
 dlls/user32/user_main.c  |  83 +++++----------
 dlls/user32/win.c        |  24 ++---
 dlls/user32/winstation.c |  14 +--
 dlls/user32/wsprintf.c   |   7 +-
 30 files changed, 198 insertions(+), 405 deletions(-)

diff --git a/dlls/user32/button.c b/dlls/user32/button.c
index 9a011ba266c..e3af68e0e54 100644
--- a/dlls/user32/button.c
+++ b/dlls/user32/button.c
@@ -121,10 +121,9 @@ static const pfPaint btnPaintFunc[MAX_BTN_TYPE] =
 /*********************************************************************
  * button class descriptor
  */
-static const WCHAR buttonW[] = {'B','u','t','t','o','n',0};
 const struct builtin_class_descr BUTTON_builtin_class =
 {
-    buttonW,             /* name */
+    L"Button",           /* name */
     CS_DBLCLKS | CS_VREDRAW | CS_HREDRAW | CS_PARENTDC, /* style  */
     WINPROC_BUTTON,      /* proc */
     NB_EXTRA_BYTES,      /* extra */
diff --git a/dlls/user32/class.c b/dlls/user32/class.c
index 7a09502f28f..c17a612c5b9 100644
--- a/dlls/user32/class.c
+++ b/dlls/user32/class.c
@@ -123,28 +123,28 @@ ATOM get_int_atom_value( LPCWSTR name )
  */
 static BOOL is_comctl32_class( const WCHAR *name )
 {
-    static const WCHAR classesW[][20] =
+    static const WCHAR *classesW[] =
     {
-        {'C','o','m','b','o','B','o','x','E','x','3','2',0},
-        {'m','s','c','t','l','s','_','h','o','t','k','e','y','3','2',0},
-        {'m','s','c','t','l','s','_','p','r','o','g','r','e','s','s','3','2',0},
-        {'m','s','c','t','l','s','_','s','t','a','t','u','s','b','a','r','3','2',0},
-        {'m','s','c','t','l','s','_','t','r','a','c','k','b','a','r','3','2',0},
-        {'m','s','c','t','l','s','_','u','p','d','o','w','n','3','2',0},
-        {'N','a','t','i','v','e','F','o','n','t','C','t','l',0},
-        {'R','e','B','a','r','W','i','n','d','o','w','3','2',0},
-        {'S','y','s','A','n','i','m','a','t','e','3','2',0},
-        {'S','y','s','D','a','t','e','T','i','m','e','P','i','c','k','3','2',0},
-        {'S','y','s','H','e','a','d','e','r','3','2',0},
-        {'S','y','s','I','P','A','d','d','r','e','s','s','3','2',0},
-        {'S','y','s','L','i','n','k',0},
-        {'S','y','s','L','i','s','t','V','i','e','w','3','2',0},
-        {'S','y','s','M','o','n','t','h','C','a','l','3','2',0},
-        {'S','y','s','P','a','g','e','r',0},
-        {'S','y','s','T','a','b','C','o','n','t','r','o','l','3','2',0},
-        {'S','y','s','T','r','e','e','V','i','e','w','3','2',0},
-        {'T','o','o','l','b','a','r','W','i','n','d','o','w','3','2',0},
-        {'t','o','o','l','t','i','p','s','_','c','l','a','s','s','3','2',0},
+        L"ComboBoxEx32",
+        L"msctls_hotkey32",
+        L"msctls_progress32",
+        L"msctls_statusbar32",
+        L"msctls_trackbar32",
+        L"msctls_updown32",
+        L"NativeFontCtl",
+        L"ReBarWindow32",
+        L"SysAnimate32",
+        L"SysDateTimePick32",
+        L"SysHeader32",
+        L"SysIPAddress32",
+        L"SysLink",
+        L"SysListView32",
+        L"SysMonthCal32",
+        L"SysPager",
+        L"SysTabControl32",
+        L"SysTreeView32",
+        L"ToolbarWindow32",
+        L"tooltips_class32",
     };
 
     int min = 0, max = ARRAY_SIZE( classesW ) - 1;
@@ -161,11 +161,11 @@ static BOOL is_comctl32_class( const WCHAR *name )
 
 static BOOL is_builtin_class( const WCHAR *name )
 {
-    static const WCHAR classesW[][20] =
+    static const WCHAR *classesW[] =
     {
-        {'I','M','E',0},
-        {'M','D','I','C','l','i','e','n','t',0},
-        {'S','c','r','o','l','l','b','a','r',0},
+        L"IME",
+        L"MDIClient",
+        L"Scrollbar",
     };
 
     int min = 0, max = ARRAY_SIZE( classesW ) - 1;
@@ -408,7 +408,6 @@ const WCHAR *CLASS_GetVersionedName( const WCHAR *name, UINT *basename_offset, W
  */
 static CLASS *CLASS_FindClass( LPCWSTR name, HINSTANCE hinstance )
 {
-    static const WCHAR comctl32W[] = {'c','o','m','c','t','l','3','2','.','d','l','l',0};
     struct list *ptr;
     ATOM atom = get_int_atom_value( name );
 
@@ -443,8 +442,8 @@ static CLASS *CLASS_FindClass( LPCWSTR name, HINSTANCE hinstance )
 
         if (atom) break;
         if (!is_comctl32_class( name )) break;
-        if (GetModuleHandleW( comctl32W )) break;
-        if (!LoadLibraryW( comctl32W )) break;
+        if (GetModuleHandleW( L"comctl32.dll" )) break;
+        if (!LoadLibraryW( L"comctl32.dll" )) break;
         TRACE( "%s retrying after loading comctl32\n", debugstr_w(name) );
     }
 
diff --git a/dlls/user32/combo.c b/dlls/user32/combo.c
index ce5bf0c8a08..1b53a2d6ad8 100644
--- a/dlls/user32/combo.c
+++ b/dlls/user32/combo.c
@@ -80,10 +80,9 @@ static void CBResetPos(HEADCOMBO *combo, BOOL redraw);
 /*********************************************************************
  * combo class descriptor
  */
-static const WCHAR comboboxW[] = {'C','o','m','b','o','B','o','x',0};
 const struct builtin_class_descr COMBO_builtin_class =
 {
-    comboboxW,            /* name */
+    L"ComboBox",          /* name */
     CS_PARENTDC | CS_DBLCLKS | CS_HREDRAW | CS_VREDRAW, /* style  */
     WINPROC_COMBO,        /* proc */
     sizeof(HEADCOMBO *),  /* extra */
@@ -412,9 +411,6 @@ static void CBGetDroppedControlRect( LPHEADCOMBO lphc, LPRECT lpRect)
 static LRESULT COMBO_Create( HWND hwnd, LPHEADCOMBO lphc, HWND hwndParent, LONG style,
                              BOOL unicode )
 {
-  static const WCHAR clbName[] = {'C','o','m','b','o','L','B','o','x',0};
-  static const WCHAR editName[] = {'E','d','i','t',0};
-
   if( !CB_GETTYPE(lphc) ) lphc->dwStyle |= CBS_SIMPLE;
   if( CB_GETTYPE(lphc) != CBS_DROPDOWNLIST ) lphc->wState |= CBF_EDIT;
 
@@ -495,7 +491,7 @@ static LRESULT COMBO_Create( HWND hwnd, LPHEADCOMBO lphc, HWND hwndParent, LONG
       }
 
       if (unicode)
-          lphc->hWndLBox = CreateWindowExW(lbeExStyle, clbName, NULL, lbeStyle,
+          lphc->hWndLBox = CreateWindowExW(lbeExStyle, L"ComboLBox", NULL, lbeStyle,
                                            lphc->droppedRect.left,
                                            lphc->droppedRect.top,
                                            lphc->droppedRect.right - lphc->droppedRect.left,
@@ -530,7 +526,7 @@ static LRESULT COMBO_Create( HWND hwnd, LPHEADCOMBO lphc, HWND hwndParent, LONG
               if (!IsWindowEnabled(hwnd)) lbeStyle |= WS_DISABLED;
 
               if (unicode)
-                  lphc->hWndEdit = CreateWindowExW(0, editName, NULL, lbeStyle,
+                  lphc->hWndEdit = CreateWindowExW(0, L"Edit", NULL, lbeStyle,
                                                    lphc->textRect.left, lphc->textRect.top,
                                                    lphc->textRect.right - lphc->textRect.left,
                                                    lphc->textRect.bottom - lphc->textRect.top,
@@ -678,8 +674,7 @@ static void CBPaintText(
 
    if( lphc->wState & CBF_EDIT )
    {
-        static const WCHAR empty_stringW[] = { 0 };
-	if( CB_HASSTRINGS(lphc) ) SetWindowTextW( lphc->hWndEdit, pText ? pText : empty_stringW );
+	if( CB_HASSTRINGS(lphc) ) SetWindowTextW( lphc->hWndEdit, pText ? pText : L"" );
 	if( lphc->wState & CBF_FOCUSED )
            SendMessageW(lphc->hWndEdit, EM_SETSEL, 0, MAXLONG);
    }
@@ -735,8 +730,6 @@ static void CBPaintText(
      }
      else
      {
-       static const WCHAR empty_stringW[] = { 0 };
-
        if ( (lphc->wState & CBF_FOCUSED) &&
 	    !(lphc->wState & CBF_DROPPED) ) {
 
@@ -751,7 +744,7 @@ static void CBPaintText(
 		    rectEdit.top + 1,
 		    ETO_OPAQUE | ETO_CLIPPED,
 		    &rectEdit,
-		    pText ? pText : empty_stringW , size, NULL );
+		    pText ? pText : L"" , size, NULL );
 
        if(lphc->wState & CBF_FOCUSED && !(lphc->wState & CBF_DROPPED))
 	 DrawFocusRect( hdc, &rectEdit );
@@ -890,7 +883,6 @@ static void CBUpdateEdit( LPHEADCOMBO lphc , INT index )
 {
    INT	length;
    LPWSTR pText = NULL;
-   static const WCHAR empty_stringW[] = { 0 };
 
    TRACE("\t %i\n", index );
 
@@ -909,7 +901,7 @@ static void CBUpdateEdit( LPHEADCOMBO lphc , INT index )
    if( CB_HASSTRINGS(lphc) )
    {
       lphc->wState |= (CBF_NOEDITNOTIFY | CBF_NOLBSELECT);
-      SendMessageW(lphc->hWndEdit, WM_SETTEXT, 0, pText ? (LPARAM)pText : (LPARAM)empty_stringW);
+      SendMessageW(lphc->hWndEdit, WM_SETTEXT, 0, pText ? (LPARAM)pText : (LPARAM)L"");
       lphc->wState &= ~(CBF_NOEDITNOTIFY | CBF_NOLBSELECT);
    }
 
@@ -2012,10 +2004,7 @@ LRESULT ComboWndProc_common( HWND hwnd, UINT message, WPARAM wParam, LPARAM lPar
 	case CB_RESETCONTENT:
 		SendMessageW(lphc->hWndLBox, LB_RESETCONTENT, 0, 0);
                 if( (lphc->wState & CBF_EDIT) && CB_HASSTRINGS(lphc) )
-		{
-		    static const WCHAR empty_stringW[] = { 0 };
-                    SendMessageW(lphc->hWndEdit, WM_SETTEXT, 0, (LPARAM)empty_stringW);
-		}
+                    SendMessageW(lphc->hWndEdit, WM_SETTEXT, 0, (LPARAM)L"");
                 else
                     InvalidateRect(lphc->self, NULL, TRUE);
 		return  TRUE;
diff --git a/dlls/user32/dde_client.c b/dlls/user32/dde_client.c
index 989131c66c2..3b066bde4ec 100644
--- a/dlls/user32/dde_client.c
+++ b/dlls/user32/dde_client.c
@@ -40,7 +40,7 @@ WINE_DEFAULT_DEBUG_CHANNEL(ddeml);
 
 static LRESULT CALLBACK WDML_ClientProc(HWND, UINT, WPARAM, LPARAM);	/* only for one client, not conv list */
 const char WDML_szClientConvClassA[] = "WineDdeClientA";
-const WCHAR WDML_szClientConvClassW[] = {'W','i','n','e','D','d','e','C','l','i','e','n','t','W',0};
+const WCHAR WDML_szClientConvClassW[] = L"WineDdeClientW";
 
 /******************************************************************************
  * DdeConnectList [USER32.@]  Establishes conversation with DDE servers
diff --git a/dlls/user32/dde_misc.c b/dlls/user32/dde_misc.c
index 3f33ac210fd..41181d099cc 100644
--- a/dlls/user32/dde_misc.c
+++ b/dlls/user32/dde_misc.c
@@ -44,7 +44,7 @@ WINE_DEFAULT_DEBUG_CHANNEL(ddeml);
 
 static WDML_INSTANCE*	WDML_InstanceList = NULL;
 static LONG		WDML_MaxInstanceID = 0;  /* OK for present, have to worry about wrap-around later */
-const WCHAR		WDML_szEventClass[] = {'W','i','n','e','D','d','e','E','v','e','n','t','C','l','a','s','s',0};
+const WCHAR		WDML_szEventClass[] = L"WineDdeEventClass";
 
 /* protection for instance list */
 static CRITICAL_SECTION WDML_CritSect;
@@ -1646,7 +1646,6 @@ HGLOBAL WDML_DataHandle2Global(HDDEDATA hDdeData, BOOL fResponse, BOOL fRelease,
  */
 WDML_SERVER*	WDML_AddServer(WDML_INSTANCE* pInstance, HSZ hszService, HSZ hszTopic)
 {
-    static const WCHAR fmtW[] = {'%','s','(','0','x','%','*','x',')',0};
     WDML_SERVER* 	pServer;
     WCHAR		buf1[256];
     WCHAR		buf2[256];
@@ -1658,7 +1657,7 @@ WDML_SERVER*	WDML_AddServer(WDML_INSTANCE* pInstance, HSZ hszService, HSZ hszTop
     WDML_IncHSZ(pInstance, hszService);
 
     DdeQueryStringW(pInstance->instanceID, hszService, buf1, 256, CP_WINUNICODE);
-    swprintf(buf2, 256, fmtW, buf1, 2*sizeof(ULONG_PTR), GetCurrentProcessId());
+    swprintf(buf2, 256, L"%s(0x%*x)", buf1, 2*sizeof(ULONG_PTR), GetCurrentProcessId());
     pServer->hszServiceSpec = DdeCreateStringHandleW(pInstance->instanceID, buf2, CP_WINUNICODE);
 
     pServer->atomService = WDML_MakeAtomFromHsz(pServer->hszService);
diff --git a/dlls/user32/dde_server.c b/dlls/user32/dde_server.c
index c78d2b8bbf9..e11c0c20d3b 100644
--- a/dlls/user32/dde_server.c
+++ b/dlls/user32/dde_server.c
@@ -39,9 +39,8 @@
 
 WINE_DEFAULT_DEBUG_CHANNEL(ddeml);
 
-static const WCHAR szServerNameClass[] = {'W','i','n','e','D','d','e','S','e','r','v','e','r','N','a','m','e',0};
 const char WDML_szServerConvClassA[] = "WineDdeServerConvA";
-const WCHAR WDML_szServerConvClassW[] = {'W','i','n','e','D','d','e','S','e','r','v','e','r','C','o','n','v','W',0};
+const WCHAR WDML_szServerConvClassW[] = L"WineDdeServerConvW";
 
 static LRESULT CALLBACK WDML_ServerNameProc(HWND, UINT, WPARAM, LPARAM);
 static LRESULT CALLBACK WDML_ServerConvProc(HWND, UINT, WPARAM, LPARAM);
@@ -230,15 +229,12 @@ HDDEDATA WINAPI DdeNameService(DWORD idInst, HSZ hsz1, HSZ hsz2, UINT afCmd)
 	wndclass.hCursor       = 0;
 	wndclass.hbrBackground = 0;
 	wndclass.lpszMenuName  = NULL;
-	wndclass.lpszClassName = szServerNameClass;
+	wndclass.lpszClassName = L"WineDdeServerName";
 	wndclass.hIconSm       = 0;
 
 	RegisterClassExW(&wndclass);
 
-	hwndServer = CreateWindowW(szServerNameClass, NULL,
-				   WS_POPUP, 0, 0, 0, 0,
-				   0, 0, 0, 0);
-
+	hwndServer = CreateWindowW(L"WineDdeServerName", NULL, WS_POPUP, 0, 0, 0, 0, 0, 0, 0, 0);
 	SetWindowLongPtrW(hwndServer, GWL_WDML_INSTANCE, (ULONG_PTR)pInstance);
 	SetWindowLongPtrW(hwndServer, GWL_WDML_SERVER, (ULONG_PTR)pServer);
 	TRACE("Created nameServer=%p for instance=%08x\n", hwndServer, idInst);
diff --git a/dlls/user32/defwnd.c b/dlls/user32/defwnd.c
index a5fad52fe5b..d00fc8584c6 100644
--- a/dlls/user32/defwnd.c
+++ b/dlls/user32/defwnd.c
@@ -123,7 +123,6 @@ static LRESULT DEFWND_SetTextA( HWND hwnd, LPCSTR text )
  */
 static LRESULT DEFWND_SetTextW( HWND hwnd, LPCWSTR text )
 {
-    static const WCHAR empty_string[] = {0};
     WND *wndPtr;
     int count;
 
@@ -132,7 +131,7 @@ static LRESULT DEFWND_SetTextW( HWND hwnd, LPCWSTR text )
     if (text && IS_INTRESOURCE(text))
         return 0;
 
-    if (!text) text = empty_string;
+    if (!text) text = L"";
     count = lstrlenW(text) + 1;
 
     if (!(wndPtr = WIN_GetPtr( hwnd ))) return 0;
diff --git a/dlls/user32/desktop.c b/dlls/user32/desktop.c
index c61ee3dbfcc..f7ab99a38bf 100644
--- a/dlls/user32/desktop.c
+++ b/dlls/user32/desktop.c
@@ -92,13 +92,6 @@ static void init_wallpaper( const WCHAR *wallpaper )
  */
 LRESULT WINAPI DesktopWndProc( HWND hwnd, UINT message, WPARAM wParam, LPARAM lParam )
 {
-    static const WCHAR display_device_guid_propW[] = {
-        '_','_','w','i','n','e','_','d','i','s','p','l','a','y','_',
-        'd','e','v','i','c','e','_','g','u','i','d',0 };
-    static const WCHAR guid_formatW[] = {
-        '%','0','8','x','-','%','0','4','x','-','%','0','4','x','-','%','0','2','x','%','0','2','x','-',
-        '%','0','2','x','%','0','2','x','%','0','2','x','%','0','2','x','%','0','2','x','%','0','2','x',0};
-
     switch (message)
     {
     case WM_NCCREATE:
@@ -113,11 +106,12 @@ LRESULT WINAPI DesktopWndProc( HWND hwnd, UINT message, WPARAM wParam, LPARAM lP
 
             if (GetAncestor( hwnd, GA_PARENT )) return FALSE;  /* refuse to create non-desktop window */
 
-            swprintf( buffer, ARRAY_SIZE(buffer), guid_formatW, guid->Data1, guid->Data2, guid->Data3,
+            swprintf( buffer, ARRAY_SIZE(buffer), L"%08x-%04x-%04x-%02x%02x-%02x%02x%02x%02x%02x%02x",
+                      guid->Data1, guid->Data2, guid->Data3,
                       guid->Data4[0], guid->Data4[1], guid->Data4[2], guid->Data4[3],
                       guid->Data4[4], guid->Data4[5], guid->Data4[6], guid->Data4[7] );
             atom = GlobalAddAtomW( buffer );
-            SetPropW( hwnd, display_device_guid_propW, ULongToHandle( atom ) );
+            SetPropW( hwnd, L"__wine_display_device_guid", ULongToHandle( atom ) );
         }
         return TRUE;
     }
diff --git a/dlls/user32/dialog.c b/dlls/user32/dialog.c
index f01b25545fc..9bf3470921d 100644
--- a/dlls/user32/dialog.c
+++ b/dlls/user32/dialog.c
@@ -139,14 +139,14 @@ static const WORD *DIALOG_GetControl32( const WORD *p, DLG_CONTROL_INFO *info,
 
     if (GET_WORD(p) == 0xffff)
     {
-        static const WCHAR class_names[6][10] =
+        static const WCHAR *class_names[6] =
         {
-            { 'B','u','t','t','o','n', },             /* 0x80 */
-            { 'E','d','i','t', },                     /* 0x81 */
-            { 'S','t','a','t','i','c', },             /* 0x82 */
-            { 'L','i','s','t','B','o','x', },         /* 0x83 */
-            { 'S','c','r','o','l','l','B','a','r', }, /* 0x84 */
-            { 'C','o','m','b','o','B','o','x', }      /* 0x85 */
+            L"Button",    /* 0x80 */
+            L"Edit",      /* 0x81 */
+            L"Static",    /* 0x82 */
+            L"ListBox",   /* 0x83 */
+            L"ScrollBar", /* 0x84 */
+            L"ComboBox"   /* 0x85 */
         };
         WORD id = GET_WORD(p+1);
         /* Windows treats dialog control class ids 0-5 same way as 0x80-0x85 */
@@ -1816,8 +1816,8 @@ static INT DIALOG_DlgDirListW( HWND hDlg, LPWSTR spec, INT idLBox,
 {
     HWND hwnd;
     LPWSTR orig_spec = spec;
-    WCHAR any[] = {'*','.','*',0};
-    WCHAR star[] = {'*',0};
+    WCHAR any[] = L"*.*";
+    WCHAR star[] = L"*";
 
 #define SENDMSG(msg,wparam,lparam) \
     ((attrib & DDL_POSTMSGS) ? PostMessageW( hwnd, msg, wparam, lparam ) \
diff --git a/dlls/user32/driver.c b/dlls/user32/driver.c
index c149b0736fd..8ff6b0a817e 100644
--- a/dlls/user32/driver.c
+++ b/dlls/user32/driver.c
@@ -45,22 +45,11 @@ static BOOL CDECL nodrv_CreateWindow( HWND hwnd );
 
 static BOOL load_desktop_driver( HWND hwnd, HMODULE *module )
 {
-    static const WCHAR display_device_guid_propW[] = {
-        '_','_','w','i','n','e','_','d','i','s','p','l','a','y','_',
-        'd','e','v','i','c','e','_','g','u','i','d',0 };
-    static const WCHAR key_pathW[] = {
-        'S','y','s','t','e','m','\\',
-        'C','u','r','r','e','n','t','C','o','n','t','r','o','l','S','e','t','\\',
-        'C','o','n','t','r','o','l','\\',
-        'V','i','d','e','o','\\','{',0};
-    static const WCHAR displayW[] = {'}','\\','0','0','0','0',0};
-    static const WCHAR driverW[] = {'G','r','a','p','h','i','c','s','D','r','i','v','e','r',0};
-    static const WCHAR nullW[] = {'n','u','l','l',0};
     BOOL ret = FALSE;
     HKEY hkey;
     DWORD size;
     WCHAR path[MAX_PATH];
-    WCHAR key[ARRAY_SIZE(key_pathW) + ARRAY_SIZE(displayW) + 40];
+    WCHAR key[ARRAY_SIZE(L"System\\CurrentControlSet\\Control\\Video\\{}\\0000") + 40];
     UINT guid_atom;
 
     USER_CheckNotLock();
@@ -68,15 +57,15 @@ static BOOL load_desktop_driver( HWND hwnd, HMODULE *module )
     strcpy( driver_load_error, "The explorer process failed to start." );  /* default error */
     SendMessageW( hwnd, WM_NULL, 0, 0 );  /* wait for the desktop process to be ready */
 
-    guid_atom = HandleToULong( GetPropW( hwnd, display_device_guid_propW ));
-    memcpy( key, key_pathW, sizeof(key_pathW) );
+    guid_atom = HandleToULong( GetPropW( hwnd, L"__wine_display_device_guid" ));
+    lstrcpyW( key, L"System\\CurrentControlSet\\Control\\Video\\{" );
     if (!GlobalGetAtomNameW( guid_atom, key + lstrlenW(key), 40 )) return 0;
-    lstrcatW( key, displayW );
+    lstrcatW( key, L"}\\0000" );
     if (RegOpenKeyW( HKEY_LOCAL_MACHINE, key, &hkey )) return 0;
     size = sizeof(path);
-    if (!RegQueryValueExW( hkey, driverW, NULL, NULL, (BYTE *)path, &size ))
+    if (!RegQueryValueExW( hkey, L"GraphicsDriver", NULL, NULL, (BYTE *)path, &size ))
     {
-        if ((ret = !wcscmp( path, nullW ))) *module = NULL;
+        if ((ret = !wcscmp( path, L"null" ))) *module = NULL;
         else ret = (*module = LoadLibraryW( path )) != NULL;
         if (!ret) ERR( "failed to load %s\n", debugstr_w(path) );
         TRACE( "%s %p\n", debugstr_w(path), *module );
@@ -214,7 +203,6 @@ static UINT CDECL nulldrv_GetKeyboardLayoutList( INT size, HKL *layouts )
     INT count = 0;
     ULONG_PTR baselayout;
     LANGID langid;
-    static const WCHAR szKeyboardReg[] = {'S','y','s','t','e','m','\\','C','u','r','r','e','n','t','C','o','n','t','r','o','l','S','e','t','\\','C','o','n','t','r','o','l','\\','K','e','y','b','o','a','r','d',' ','L','a','y','o','u','t','s',0};
 
     baselayout = GetUserDefaultLCID();
     langid = PRIMARYLANGID(LANGIDFROMLCID(baselayout));
@@ -224,7 +212,7 @@ static UINT CDECL nulldrv_GetKeyboardLayoutList( INT size, HKL *layouts )
         baselayout |= baselayout << 16;
 
     /* Enumerate the Registry */
-    rc = RegOpenKeyW(HKEY_LOCAL_MACHINE,szKeyboardReg,&hKeyKeyboard);
+    rc = RegOpenKeyW(HKEY_LOCAL_MACHINE,L"System\\CurrentControlSet\\Control\\Keyboard Layouts",&hKeyKeyboard);
     if (rc == ERROR_SUCCESS)
     {
         do {
diff --git a/dlls/user32/edit.c b/dlls/user32/edit.c
index f4d252ee5f0..515341f65ea 100644
--- a/dlls/user32/edit.c
+++ b/dlls/user32/edit.c
@@ -3193,18 +3193,16 @@ static LRESULT EDIT_WM_Char(EDITSTATE *es, WCHAR c)
 				EDIT_MoveHome(es, FALSE, FALSE);
 				EDIT_MoveDown_ML(es, FALSE);
 			} else {
-				static const WCHAR cr_lfW[] = {'\r','\n'};
-				EDIT_EM_ReplaceSel(es, TRUE, cr_lfW, 2, TRUE, TRUE);
+				EDIT_EM_ReplaceSel(es, TRUE, L"\r\n", 2, TRUE, TRUE);
 			}
 		}
 		break;
 	case '\t':
 		if ((es->style & ES_MULTILINE) && !(es->style & ES_READONLY))
 		{
-			static const WCHAR tabW[] = {'\t'};
                         if (EDIT_IsInsideDialog(es))
                             break;
-			EDIT_EM_ReplaceSel(es, TRUE, tabW, 1, TRUE, TRUE);
+			EDIT_EM_ReplaceSel(es, TRUE, L"\t", 1, TRUE, TRUE);
 		}
 		break;
 	case VK_BACK:
@@ -5250,10 +5248,9 @@ LRESULT EditWndProc_common( HWND hwnd, UINT msg, WPARAM wParam, LPARAM lParam, B
 /*********************************************************************
  * edit class descriptor
  */
-static const WCHAR editW[] = {'E','d','i','t',0};
 const struct builtin_class_descr EDIT_builtin_class =
 {
-    editW,                /* name */
+    L"Edit",              /* name */
     CS_DBLCLKS | CS_PARENTDC,   /* style */
     WINPROC_EDIT,         /* proc */
 #ifdef __i386__
diff --git a/dlls/user32/icontitle.c b/dlls/user32/icontitle.c
index 2bead88dd42..3c454ae69fc 100644
--- a/dlls/user32/icontitle.c
+++ b/dlls/user32/icontitle.c
@@ -50,7 +50,6 @@ const struct builtin_class_descr ICONTITLE_builtin_class =
  */
 static BOOL ICONTITLE_SetTitlePos( HWND hwnd, HWND owner )
 {
-    static const WCHAR emptyTitleText[] = {'<','.','.','.','>',0};
     WCHAR str[80];
     HDC hDC;
     HFONT hPrevFont;
@@ -65,7 +64,7 @@ static BOOL ICONTITLE_SetTitlePos( HWND hwnd, HWND owner )
 
     if( !length )
     {
-        lstrcpyW( str, emptyTitleText );
+        lstrcpyW( str, L"<...>" );
         length = lstrlenW( str );
     }
 
diff --git a/dlls/user32/listbox.c b/dlls/user32/listbox.c
index a2e80c4ff04..0122f928ba8 100644
--- a/dlls/user32/listbox.c
+++ b/dlls/user32/listbox.c
@@ -244,10 +244,9 @@ static void remove_item_data(LB_DESCR *descr, UINT index)
 /*********************************************************************
  * listbox class descriptor
  */
-static const WCHAR listboxW[] = {'L','i','s','t','B','o','x',0};
 const struct builtin_class_descr LISTBOX_builtin_class =
 {
-    listboxW,             /* name */
+    L"ListBox",           /* name */
     CS_DBLCLKS /*| CS_PARENTDC*/,  /* style */
     WINPROC_LISTBOX,      /* proc */
     sizeof(LB_DESCR *),   /* extra */
@@ -259,10 +258,9 @@ const struct builtin_class_descr LISTBOX_builtin_class =
 /*********************************************************************
  * combolbox class descriptor
  */
-static const WCHAR combolboxW[] = {'C','o','m','b','o','L','B','o','x',0};
 const struct builtin_class_descr COMBOLBOX_builtin_class =
 {
-    combolboxW,           /* name */
+    L"ComboLBox",         /* name */
     CS_DBLCLKS | CS_SAVEBITS,  /* style */
     WINPROC_LISTBOX,      /* proc */
     sizeof(LB_DESCR *),   /* extra */
@@ -1701,8 +1699,7 @@ static LRESULT LISTBOX_InsertString( LB_DESCR *descr, INT index, LPCWSTR str )
 
     if (HAS_STRINGS(descr))
     {
-        static const WCHAR empty_stringW[] = { 0 };
-        if (!str) str = empty_stringW;
+        if (!str) str = L"";
         if (!(new_str = HeapAlloc( GetProcessHeap(), 0, (lstrlenW(str) + 1) * sizeof(WCHAR) )))
         {
             SEND_NOTIFICATION( descr, LBN_ERRSPACE );
@@ -1896,16 +1893,14 @@ static LRESULT LISTBOX_Directory( LB_DESCR *descr, UINT attrib,
                 WCHAR buffer[270];
                 if (entry.dwFileAttributes & FILE_ATTRIBUTE_DIRECTORY)
                 {
-                    static const WCHAR bracketW[]  = { ']',0 };
-                    static const WCHAR dotW[] = { '.',0 };
                     if (!(attrib & DDL_DIRECTORY) ||
-                        !wcscmp( entry.cFileName, dotW )) continue;
+                        !wcscmp( entry.cFileName, L"." )) continue;
                     buffer[0] = '[';
                     if (!long_names && entry.cAlternateFileName[0])
                         lstrcpyW( buffer + 1, entry.cAlternateFileName );
                     else
                         lstrcpyW( buffer + 1, entry.cFileName );
-                    lstrcatW(buffer, bracketW);
+                    lstrcatW(buffer, L"]");
                 }
                 else  /* not a directory */
                 {
@@ -1937,8 +1932,8 @@ static LRESULT LISTBOX_Directory( LB_DESCR *descr, UINT attrib,
         /* scan drives */
         if (attrib & DDL_DRIVES)
         {
-            WCHAR buffer[] = {'[','-','a','-',']',0};
-            WCHAR root[] = {'A',':','\\',0};
+            WCHAR buffer[] = L"[-a-]";
+            WCHAR root[] = L"A:\\";
             int drive;
             for (drive = 0; drive < 26; drive++, buffer[2]++, root[0]++)
             {
diff --git a/dlls/user32/mdi.c b/dlls/user32/mdi.c
index b6752853a84..af39e5781ed 100644
--- a/dlls/user32/mdi.c
+++ b/dlls/user32/mdi.c
@@ -182,10 +182,9 @@ static void MDI_PostUpdate(HWND hwnd, MDICLIENTINFO* ci, WORD recalc)
 /*********************************************************************
  * MDIClient class descriptor
  */
-static const WCHAR mdiclientW[] = {'M','D','I','C','l','i','e','n','t',0};
 const struct builtin_class_descr MDICLIENT_builtin_class =
 {
-    mdiclientW,             /* name */
+    L"MDIClient",           /* name */
     0,                      /* style */
     WINPROC_MDICLIENT,      /* proc */
     sizeof(MDICLIENTINFO),  /* extra */
@@ -993,19 +992,16 @@ static void MDI_UpdateFrameText( HWND frame, HWND hClient, BOOL repaint, LPCWSTR
 	if (ci->hwndChildMaximized)
 	{
 	    /* combine frame title and child title if possible */
-
-	    static const WCHAR lpBracket[]  = {' ','-',' ','[',0};
-	    static const WCHAR lpBracket2[]  = {']',0};
 	    int	i_frame_text_length = lstrlenW(ci->frameTitle);
 
 	    lstrcpynW( lpBuffer, ci->frameTitle, MDI_MAXTITLELENGTH);
 
 	    if( i_frame_text_length + 6 < MDI_MAXTITLELENGTH )
             {
-		lstrcatW( lpBuffer, lpBracket );
+		lstrcatW( lpBuffer, L" - [" );
                 if (GetWindowTextW( ci->hwndActiveChild, lpBuffer + i_frame_text_length + 4,
                                     MDI_MAXTITLELENGTH - i_frame_text_length - 5 ))
-                    lstrcatW( lpBuffer, lpBracket2 );
+                    lstrcatW( lpBuffer, L"]" );
                 else
                     lpBuffer[i_frame_text_length] = 0;  /* remove bracket */
             }
diff --git a/dlls/user32/menu.c b/dlls/user32/menu.c
index 0ba3b23d787..ecefe9dd67c 100644
--- a/dlls/user32/menu.c
+++ b/dlls/user32/menu.c
@@ -400,9 +400,7 @@ static inline UINT get_scroll_arrow_height(const POPUPMENU *menu)
  */
 static HMENU MENU_CopySysPopup(BOOL mdi)
 {
-    static const WCHAR sysmenuW[] = {'S','Y','S','M','E','N','U',0};
-    static const WCHAR sysmenumdiW[] = {'S','Y','S','M','E','N','U','M','D','I',0};
-    HMENU hMenu = LoadMenuW(user32_module, (mdi ? sysmenumdiW : sysmenuW));
+    HMENU hMenu = LoadMenuW(user32_module, mdi ? L"SYSMENUMDI" : L"SYSMENU");
 
     if( hMenu ) {
         MENUINFO minfo;
@@ -979,9 +977,7 @@ static void MENU_DrawBitmapItem( HDC hdc, MENUITEM *lpitem, const RECT *rect,
             /* draw the magic bitmaps using marlett font characters */
             /* FIXME: fontsize and the position (x,y) could probably be better */
             HFONT hfont, hfontsav;
-            LOGFONTW logfont = { 0, 0, 0, 0, FW_NORMAL,
-                0, 0, 0, SYMBOL_CHARSET, 0, 0, 0, 0,
-                { 'M','a','r','l','e','t','t',0 } };
+            LOGFONTW logfont = { 0, 0, 0, 0, FW_NORMAL, 0, 0, 0, SYMBOL_CHARSET, 0, 0, 0, 0, L"Marlett" };
             logfont.lfHeight =  min( h, w) - 5 ;
             TRACE(" height %d rect %s\n", logfont.lfHeight, wine_dbgstr_rect( rect));
             hfont = CreateFontIndirectW( &logfont);
diff --git a/dlls/user32/message.c b/dlls/user32/message.c
index f428c9b0db8..4434f4b0c2a 100644
--- a/dlls/user32/message.c
+++ b/dlls/user32/message.c
@@ -280,11 +280,9 @@ static const INPUT_MESSAGE_SOURCE msg_source_unavailable = { IMDT_UNAVAILABLE, I
 
 
 /* Message class descriptor */
-static const WCHAR messageW[] = {'M','e','s','s','a','g','e',0};
-
 const struct builtin_class_descr MESSAGE_builtin_class =
 {
-    messageW,             /* name */
+    L"Message",           /* name */
     0,                    /* style */
     WINPROC_MESSAGE,      /* proc */
     0,                    /* extra */
diff --git a/dlls/user32/misc.c b/dlls/user32/misc.c
index 82b42efaf50..e12a1af5571 100644
--- a/dlls/user32/misc.c
+++ b/dlls/user32/misc.c
@@ -322,8 +322,7 @@ VOID WINAPI LoadLocalFonts(VOID)
  */
 BOOL WINAPI User32InitializeImmEntryTable(DWORD magic)
 {
-    static const WCHAR imm32_dllW[] = {'i','m','m','3','2','.','d','l','l',0};
-    HMODULE imm32 = GetModuleHandleW(imm32_dllW);
+    HMODULE imm32 = GetModuleHandleW(L"imm32.dll");
 
     TRACE("(%x)\n", magic);
 
@@ -531,10 +530,9 @@ BOOL WINAPI GetPointerType(UINT32 id, POINTER_INPUT_TYPE *type)
     return TRUE;
 }
 
-static const WCHAR imeW[] = {'I','M','E',0};
 const struct builtin_class_descr IME_builtin_class =
 {
-    imeW,               /* name */
+    L"IME",             /* name */
     0,                  /* style  */
     WINPROC_IME,        /* proc */
     2*sizeof(LONG_PTR), /* extra */
diff --git a/dlls/user32/msgbox.c b/dlls/user32/msgbox.c
index 457c3ae7d1d..397d69efbff 100644
--- a/dlls/user32/msgbox.c
+++ b/dlls/user32/msgbox.c
@@ -518,13 +518,11 @@ INT WINAPI MessageBoxIndirectW( LPMSGBOXPARAMSW msgbox )
     int ret;
     UINT i;
     struct ThreadWindows threadWindows;
-    static const WCHAR msg_box_res_nameW[] = { 'M','S','G','B','O','X',0 };
 
-    if (!(hRes = FindResourceExW(user32_module, (LPWSTR)RT_DIALOG,
-                                 msg_box_res_nameW, msgbox->dwLanguageId)))
+    if (!(hRes = FindResourceExW(user32_module, (LPWSTR)RT_DIALOG, L"MSGBOX", msgbox->dwLanguageId)))
     {
         if (!msgbox->dwLanguageId ||
-            !(hRes = FindResourceExW(user32_module, (LPWSTR)RT_DIALOG, msg_box_res_nameW, LANG_NEUTRAL)))
+            !(hRes = FindResourceExW(user32_module, (LPWSTR)RT_DIALOG, L"MSGBOX", LANG_NEUTRAL)))
             return 0;
     }
     if (!(tmplate = LoadResource(user32_module, hRes)))
diff --git a/dlls/user32/painting.c b/dlls/user32/painting.c
index 65ccbf45728..db244ff04a5 100644
--- a/dlls/user32/painting.c
+++ b/dlls/user32/painting.c
@@ -57,8 +57,6 @@ static struct list dce_list = LIST_INIT(dce_list);
 
 static BOOL CALLBACK dc_hook( HDC hDC, WORD code, DWORD_PTR data, LPARAM lParam );
 
-static const WCHAR displayW[] = { 'D','I','S','P','L','A','Y',0 };
-
 
 /***********************************************************************
  *           dump_rdw_flags
@@ -225,7 +223,7 @@ static struct dce *alloc_dce(void)
     struct dce *dce;
 
     if (!(dce = HeapAlloc( GetProcessHeap(), 0, sizeof(*dce) ))) return NULL;
-    if (!(dce->hdc = CreateDCW( displayW, NULL, NULL, NULL )))
+    if (!(dce->hdc = CreateDCW( L"DISPLAY", NULL, NULL, NULL )))
     {
         HeapFree( GetProcessHeap(), 0, dce );
         return 0;
diff --git a/dlls/user32/rawinput.c b/dlls/user32/rawinput.c
index 6355c66f3b1..ba11a121bc5 100644
--- a/dlls/user32/rawinput.c
+++ b/dlls/user32/rawinput.c
@@ -645,8 +645,6 @@ UINT WINAPI GetRawInputDeviceInfoA(HANDLE device, UINT command, void *data, UINT
 UINT WINAPI GetRawInputDeviceInfoW(HANDLE handle, UINT command, void *data, UINT *data_size)
 {
     /* FIXME: Most of this is made up. */
-    static const WCHAR keyboard_name[] = {'\\','\\','?','\\','W','I','N','E','_','K','E','Y','B','O','A','R','D',0};
-    static const WCHAR mouse_name[] = {'\\','\\','?','\\','W','I','N','E','_','M','O','U','S','E',0};
     static const RID_DEVICE_INFO_KEYBOARD keyboard_info = {0, 0, 1, 12, 3, 101};
     static const RID_DEVICE_INFO_MOUSE mouse_info = {1, 5, 0, FALSE};
 
@@ -673,13 +671,13 @@ UINT WINAPI GetRawInputDeviceInfoW(HANDLE handle, UINT command, void *data, UINT
         avail_bytes = *data_size * sizeof(WCHAR);
         if (handle == WINE_MOUSE_HANDLE)
         {
-            *data_size = ARRAY_SIZE(mouse_name);
-            to_copy = mouse_name;
+            *data_size = ARRAY_SIZE(L"\\\\?\\WINE_MOUSE");
+            to_copy = L"\\\\?\\WINE_MOUSE";
         }
         else if (handle == WINE_KEYBOARD_HANDLE)
         {
-            *data_size = ARRAY_SIZE(keyboard_name);
-            to_copy = keyboard_name;
+            *data_size = ARRAY_SIZE(L"\\\\?\\WINE_KEYBOARD");
+            to_copy = L"\\\\?\\WINE_KEYBOARD";
         }
         else
         {
diff --git a/dlls/user32/scroll.c b/dlls/user32/scroll.c
index 1d6fd959ed7..a63039262c7 100644
--- a/dlls/user32/scroll.c
+++ b/dlls/user32/scroll.c
@@ -118,10 +118,9 @@ static void SCROLL_DrawInterior_9x( HWND hwnd, HDC hdc, INT nBar,
 /*********************************************************************
  * scrollbar class descriptor
  */
-static const WCHAR scrollbarW[] = {'S','c','r','o','l','l','B','a','r',0};
 const struct builtin_class_descr SCROLL_builtin_class =
 {
-    scrollbarW,             /* name */
+    L"ScrollBar",           /* name */
     CS_DBLCLKS | CS_VREDRAW | CS_HREDRAW | CS_PARENTDC, /* style  */
     WINPROC_SCROLLBAR,      /* proc */
     sizeof(SCROLLBAR_WNDDATA), /* extra */
diff --git a/dlls/user32/spy.c b/dlls/user32/spy.c
index fc6e03dd5af..727094be05d 100644
--- a/dlls/user32/spy.c
+++ b/dlls/user32/spy.c
@@ -1671,9 +1671,6 @@ static const USER_MSG propsht_array[] = {
           USM(PSM_SETTITLEW           ,0),
           USM(PSM_SETFINISHTEXTW      ,0),
 };
-static const WCHAR PropSheetInfoStr[] =
-    {'P','r','o','p','e','r','t','y','S','h','e','e','t','I','n','f','o',0 };
-
 static const USER_MSG updown_array[] = {
           USM(UDM_SETRANGE            ,0),
           USM(UDM_GETRANGE            ,0),
@@ -2145,7 +2142,7 @@ static void SPY_GetClassName( SPY_INSTANCE *sp_e )
 {
     /* special code to detect a property sheet dialog   */
     if ((GetClassLongW(sp_e->msg_hwnd, GCW_ATOM) == WC_DIALOG) &&
-        (GetPropW(sp_e->msg_hwnd, PropSheetInfoStr))) {
+        (GetPropW(sp_e->msg_hwnd, L"PropertySheetInfo"))) {
         lstrcpyW(sp_e->wnd_class, WC_PROPSHEETW);
     }
     else {
diff --git a/dlls/user32/static.c b/dlls/user32/static.c
index 1f7c03121c3..72e49e15e8f 100644
--- a/dlls/user32/static.c
+++ b/dlls/user32/static.c
@@ -83,10 +83,9 @@ static const pfPaint staticPaintFunc[SS_TYPEMASK+1] =
 /*********************************************************************
  * static class descriptor
  */
-static const WCHAR staticW[] = {'S','t','a','t','i','c',0};
 const struct builtin_class_descr STATIC_builtin_class =
 {
-    staticW,             /* name */
+    L"Static",           /* name */
     CS_DBLCLKS | CS_PARENTDC, /* style  */
     WINPROC_STATIC,      /* proc */
     STATIC_EXTRA_BYTES,  /* extra */
diff --git a/dlls/user32/sysparams.c b/dlls/user32/sysparams.c
index 88c5944855a..a2468d73f40 100644
--- a/dlls/user32/sysparams.c
+++ b/dlls/user32/sysparams.c
@@ -80,44 +80,19 @@ enum parameter_key
     NB_PARAM_KEYS
 };
 
-static const WCHAR COLORS_REGKEY[] =   {'C','o','n','t','r','o','l',' ','P','a','n','e','l','\\','C','o','l','o','r','s',0};
-static const WCHAR DESKTOP_REGKEY[] =  {'C','o','n','t','r','o','l',' ','P','a','n','e','l','\\','D','e','s','k','t','o','p',0};
-static const WCHAR KEYBOARD_REGKEY[] = {'C','o','n','t','r','o','l',' ','P','a','n','e','l','\\','K','e','y','b','o','a','r','d',0};
-static const WCHAR MOUSE_REGKEY[] =    {'C','o','n','t','r','o','l',' ','P','a','n','e','l','\\','M','o','u','s','e',0};
-static const WCHAR METRICS_REGKEY[] =  {'C','o','n','t','r','o','l',' ','P','a','n','e','l','\\','D','e','s','k','t','o','p','\\',
-                                        'W','i','n','d','o','w','M','e','t','r','i','c','s',0};
-static const WCHAR SOUND_REGKEY[]=     {'C','o','n','t','r','o','l',' ','P','a','n','e','l','\\','S','o','u','n','d',0};
-static const WCHAR VERSION_REGKEY[] =  {'S','o','f','t','w','a','r','e','\\',
-                                        'M','i','c','r','o','s','o','f','t','\\',
-                                        'W','i','n','d','o','w','s',' ','N','T','\\',
-                                        'C','u','r','r','e','n','t','V','e','r','s','i','o','n','\\',
-                                        'W','i','n','d','o','w','s',0};
-static const WCHAR SHOWSOUNDS_REGKEY[] =   {'C','o','n','t','r','o','l',' ','P','a','n','e','l','\\',
-                                            'A','c','c','e','s','s','i','b','i','l','i','t','y','\\',
-                                            'S','h','o','w','S','o','u','n','d','s',0};
-static const WCHAR KEYBOARDPREF_REGKEY[] = {'C','o','n','t','r','o','l',' ','P','a','n','e','l','\\',
-                                            'A','c','c','e','s','s','i','b','i','l','i','t','y','\\',
-                                            'K','e','y','b','o','a','r','d',' ','P','r','e','f','e','r','e','n','c','e',0};
-static const WCHAR SCREENREADER_REGKEY[] = {'C','o','n','t','r','o','l',' ','P','a','n','e','l','\\',
-                                            'A','c','c','e','s','s','i','b','i','l','i','t','y','\\',
-                                            'B','l','i','n','d',' ','A','c','c','e','s','s',0};
-static const WCHAR AUDIODESC_REGKEY[] = {'C','o','n','t','r','o','l',' ','P','a','n','e','l','\\',
-                                            'A','c','c','e','s','s','i','b','i','l','i','t','y','\\',
-                                            'A','u','d','i','o','D','e','s','c','r','i','p','t','i','o','n',0};
-
 static const WCHAR *parameter_key_names[NB_PARAM_KEYS] =
 {
-    COLORS_REGKEY,
-    DESKTOP_REGKEY,
-    KEYBOARD_REGKEY,
-    MOUSE_REGKEY,
-    METRICS_REGKEY,
-    SOUND_REGKEY,
-    VERSION_REGKEY,
-    SHOWSOUNDS_REGKEY,
-    KEYBOARDPREF_REGKEY,
-    SCREENREADER_REGKEY,
-    AUDIODESC_REGKEY,
+    L"Control Panel\\Colors",
+    L"Control Panel\\Desktop",
+    L"Control Panel\\Keyboard",
+    L"Control Panel\\Mouse",
+    L"Control Panel\\Desktop\\WindowMetrics",
+    L"Control Panel\\Sound",
+    L"Software\\Microsoft\\Windows NT\\CurrentVersion\\Windows",
+    L"Control Panel\\Accessibility\\ShowSounds",
+    L"Control Panel\\Accessibility\\Keyboard Preference",
+    L"Control Panel\\Accessibility\\Blind Access",
+    L"Control Panel\\Accessibility\\AudioDescription",
 };
 
 /* parameter key values; the first char is actually an enum parameter_key to specify the key */
@@ -234,20 +209,6 @@ static const WCHAR AUDIODESC_ON_VALNAME[] =            {AUDIODESC_KEY,'O','n',0}
 /* FIXME - real value */
 static const WCHAR SCREENSAVERRUNNING_VALNAME[]=  {DESKTOP_KEY,'W','I','N','E','_','S','c','r','e','e','n','S','a','v','e','r','R','u','n','n','i','n','g',0};
 
-static const WCHAR WINE_CURRENT_USER_REGKEY[] = {'S','o','f','t','w','a','r','e','\\',
-                                                 'W','i','n','e',0};
-
-/* volatile registry branch under WINE_CURRENT_USER_REGKEY for temporary values storage */
-static const WCHAR WINE_CURRENT_USER_REGKEY_TEMP_PARAMS[] = {'T','e','m','p','o','r','a','r','y',' ',
-                                                             'S','y','s','t','e','m',' ',
-                                                             'P','a','r','a','m','e','t','e','r','s',0};
-
-static const WCHAR Yes[] =   {'Y','e','s',0};
-static const WCHAR No[] =    {'N','o',0};
-static const WCHAR CSu[] =   {'%','u',0};
-static const WCHAR CSd[] =   {'%','d',0};
-static const WCHAR CSrgb[] = {'%','u',' ','%','u',' ','%','u',0};
-
 DEFINE_DEVPROPKEY(DEVPROPKEY_GPU_LUID, 0x60b193cb, 0x5276, 0x4d0f, 0x96, 0xfc, 0xf1, 0x73, 0xab, 0xad, 0x3e, 0xc6, 2);
 DEFINE_DEVPROPKEY(DEVPROPKEY_MONITOR_GPU_LUID, 0xca085853, 0x16ce, 0x48aa, 0xb1, 0x14, 0xde, 0x9c, 0x72, 0x33, 0x42, 0x23, 1);
 DEFINE_DEVPROPKEY(DEVPROPKEY_MONITOR_OUTPUT_ID, 0xca085853, 0x16ce, 0x48aa, 0xb1, 0x14, 0xde, 0x9c, 0x72, 0x33, 0x42, 0x23, 2);
@@ -260,54 +221,6 @@ DEFINE_DEVPROPKEY(WINE_DEVPROPKEY_MONITOR_ADAPTERNAME, 0x233a9ef3, 0xafc4, 0x4ab
 
 #define NULLDRV_DEFAULT_HMONITOR ((HMONITOR)(UINT_PTR)(0x10000 + 1))
 
-/* Strings for monitor functions */
-static const WCHAR DEFAULT_ADAPTER_NAME[] = {'\\','\\','.','\\','D','I','S','P','L','A','Y','1',0};
-static const WCHAR DEFAULT_MONITOR_NAME[] = {'\\','\\','.','\\',
-                                             'D','I','S','P','L','A','Y','1','\\',
-                                             'M','o','n','i','t','o','r','0',0};
-static const WCHAR DEFAULT_ADAPTER_STRING[] = {'W','i','n','e',' ','A','d','a','p','t','e','r',0};
-static const WCHAR DEFAULT_MONITOR_STRING[] = {'G','e','n','e','r','i','c',' ','N','o','n','-','P','n','P',' ','M','o','n','i','t','o','r',0};
-static const WCHAR DEFAULT_ADAPTER_ID[] = {'P','C','I','\\',
-                                           'V','E','N','_','0','0','0','0','&',
-                                           'D','E','V','_','0','0','0','0','&',
-                                           'S','U','B','S','Y','S','_','0','0','0','0','0','0','0','0','&',
-                                           'R','E','V','_','0','0',0};
-static const WCHAR DEFAULT_MONITOR_ID[] = {'M','O','N','I','T','O','R','\\',
-                                           'D','e','f','a','u','l','t','_','M','o','n','i','t','o','r','\\',
-                                           '{','4','d','3','6','e','9','6','e','-','e','3','2','5','-','1','1','c','e','-',
-                                           'b','f','c','1','-','0','8','0','0','2','b','e','1','0','3','1','8','}',
-                                           '\\','0','0','0','0',0};
-static const WCHAR DEFAULT_MONITOR_INTERFACE_ID[] = {'\\','\\','\?','\\',
-                                                     'D','I','S','P','L','A','Y','#','D','e','f','a','u','l','t','_','M','o','n','i','t','o','r','#',
-                                                     '4','&','1','7','f','0','f','f','5','4','&','0','&','U','I','D','0','#',
-                                                     '{','e','6','f','0','7','b','5','f','-','e','e','9','7','-','4','a','9','0','-',
-                                                     'b','0','7','6','-','3','3','f','5','7','b','f','4','e','a','a','7','}',0};
-static const WCHAR BACKSLASH[] = {'\\',0};
-static const WCHAR DRIVER_DESC[] = {'D','r','i','v','e','r','D','e','s','c',0};
-static const WCHAR STATE_FLAGS[] = {'S','t','a','t','e','F','l','a','g','s',0};
-static const WCHAR GPU_ID[] = {'G','P','U','I','D',0};
-static const WCHAR DISPLAY[] = {'D','I','S','P','L','A','Y',0};
-static const WCHAR ADAPTER_PREFIX[] = {'\\','\\','.','\\','D','I','S','P','L','A','Y'};
-static const WCHAR MONITOR_ID_VALUE_FMT[] = {'M','o','n','i','t','o','r','I','D','%','d',0};
-static const WCHAR VIDEO_KEY[] = {'H','A','R','D','W','A','R','E','\\',
-                                  'D','E','V','I','C','E','M','A','P','\\',
-                                  'V','I','D','E','O','\\',0};
-static const WCHAR NT_CLASS[] = {'\\','R','e','g','i','s','t','r','y','\\',
-                                 'M','a','c','h','i','n','e','\\',
-                                 'S','y','s','t','e','m','\\',
-                                 'C','u','r','r','e','n','t','C','o','n','t','r','o','l','S','e','t','\\',
-                                 'C','o','n','t','r','o','l','\\',
-                                 'C','l','a','s','s','\\',0};
-static const WCHAR ADAPTER_FMT[] = {'\\','\\','.','\\','D','I','S','P','L','A','Y','%','d',0};
-static const WCHAR MONITOR_FMT[] = {'\\','\\','.','\\',
-                                    'D','I','S','P','L','A','Y','%','d','\\',
-                                    'M','o','n','i','t','o','r','%','d',0};
-static const WCHAR VIDEO_VALUE_FMT[] = {'\\','D','e','v','i','c','e','\\',
-                                        'V','i','d','e','o','%','d',0};
-static const WCHAR MONITOR_INTERFACE_PREFIX[] = {'\\','\\','\?','\\',0};
-static const WCHAR GUID_DEVINTERFACE_MONITOR[] = {'#','{','e','6','f','0','7','b','5','f','-','e','e','9','7','-',
-                                                  '4','a','9','0','-','b','0','7','6','-','3','3','f','5','7','b','f','4','e','a','a','7','}',0};
-
 /* Cached monitor information */
 static MONITORINFOEXW *monitors;
 static UINT monitor_count;
@@ -593,10 +506,10 @@ static BOOL is_valid_adapter_name(const WCHAR *name)
     long int adapter_idx;
     WCHAR *end;
 
-    if (wcsnicmp(name, ADAPTER_PREFIX, ARRAY_SIZE(ADAPTER_PREFIX)))
+    if (wcsnicmp(name, L"\\\\.\\DISPLAY", lstrlenW(L"\\\\.\\DISPLAY")))
         return FALSE;
 
-    adapter_idx = wcstol(name + ARRAY_SIZE(ADAPTER_PREFIX), &end, 10);
+    adapter_idx = wcstol(name + lstrlenW(L"\\\\.\\DISPLAY"), &end, 10);
     if (*end || adapter_idx < 1)
         return FALSE;
 
@@ -746,9 +659,8 @@ static BOOL init_entry_string( struct sysparam_entry *entry, const WCHAR *str )
 
 HDC get_display_dc(void)
 {
-    static const WCHAR DISPLAY[] = {'D','I','S','P','L','A','Y',0};
     EnterCriticalSection( &display_dc_section );
-    if (!display_dc) display_dc = CreateDCW( DISPLAY, NULL, NULL, NULL );
+    if (!display_dc) display_dc = CreateDCW( L"DISPLAY", NULL, NULL, NULL );
     return display_dc;
 }
 
@@ -759,8 +671,7 @@ void release_display_dc( HDC hdc )
 
 static HANDLE get_display_device_init_mutex( void )
 {
-    static const WCHAR init_mutexW[] = {'d','i','s','p','l','a','y','_','d','e','v','i','c','e','_','i','n','i','t',0};
-    HANDLE mutex = CreateMutexW( NULL, FALSE, init_mutexW );
+    HANDLE mutex = CreateMutexW( NULL, FALSE, L"display_device_init" );
 
     WaitForSingleObject( mutex, INFINITE );
     return mutex;
@@ -869,7 +780,7 @@ static BOOL set_uint_entry( union sysparam_all_entry *entry, UINT int_param, voi
 {
     WCHAR buf[32];
 
-    wsprintfW( buf, CSu, int_param );
+    wsprintfW( buf, L"%u", int_param );
     if (!save_entry_string( &entry->hdr, buf, flags )) return FALSE;
     entry->uint.val = int_param;
     entry->hdr.loaded = TRUE;
@@ -881,7 +792,7 @@ static BOOL init_uint_entry( union sysparam_all_entry *entry )
 {
     WCHAR buf[32];
 
-    wsprintfW( buf, CSu, entry->uint.val );
+    wsprintfW( buf, L"%u", entry->uint.val );
     return init_entry_string( &entry->hdr, buf );
 }
 
@@ -890,7 +801,7 @@ static BOOL set_int_entry( union sysparam_all_entry *entry, UINT int_param, void
 {
     WCHAR buf[32];
 
-    wsprintfW( buf, CSd, int_param );
+    wsprintfW( buf, L"%d", int_param );
     if (!save_entry_string( &entry->hdr, buf, flags )) return FALSE;
     entry->uint.val = int_param;
     entry->hdr.loaded = TRUE;
@@ -902,7 +813,7 @@ static BOOL init_int_entry( union sysparam_all_entry *entry )
 {
     WCHAR buf[32];
 
-    wsprintfW( buf, CSd, entry->uint.val );
+    wsprintfW( buf, L"%d", entry->uint.val );
     return init_entry_string( &entry->hdr, buf );
 }
 
@@ -964,7 +875,7 @@ static BOOL set_bool_entry( union sysparam_all_entry *entry, UINT int_param, voi
 {
     WCHAR buf[32];
 
-    wsprintfW( buf, CSu, int_param != 0 );
+    wsprintfW( buf, L"%u", int_param != 0 );
     if (!save_entry_string( &entry->hdr, buf, flags )) return FALSE;
     entry->bool.val = int_param != 0;
     entry->hdr.loaded = TRUE;
@@ -976,7 +887,7 @@ static BOOL init_bool_entry( union sysparam_all_entry *entry )
 {
     WCHAR buf[32];
 
-    wsprintfW( buf, CSu, entry->bool.val != 0 );
+    wsprintfW( buf, L"%u", entry->bool.val != 0 );
     return init_entry_string( &entry->hdr, buf );
 }
 
@@ -989,7 +900,7 @@ static BOOL get_yesno_entry( union sysparam_all_entry *entry, UINT int_param, vo
     {
         WCHAR buf[32];
 
-        if (load_entry( &entry->hdr, buf, sizeof(buf) )) entry->bool.val = !lstrcmpiW( Yes, buf );
+        if (load_entry( &entry->hdr, buf, sizeof(buf) )) entry->bool.val = !lstrcmpiW( L"Yes", buf );
     }
     *(UINT *)ptr_param = entry->bool.val;
     return TRUE;
@@ -998,7 +909,7 @@ static BOOL get_yesno_entry( union sysparam_all_entry *entry, UINT int_param, vo
 /* set a bool parameter using Yes/No strings from the registry */
 static BOOL set_yesno_entry( union sysparam_all_entry *entry, UINT int_param, void *ptr_param, UINT flags )
 {
-    const WCHAR *str = int_param ? Yes : No;
+    const WCHAR *str = int_param ? L"Yes" : L"No";
 
     if (!save_entry_string( &entry->hdr, str, flags )) return FALSE;
     entry->bool.val = int_param != 0;
@@ -1009,7 +920,7 @@ static BOOL set_yesno_entry( union sysparam_all_entry *entry, UINT int_param, vo
 /* initialize a bool parameter using Yes/No strings */
 static BOOL init_yesno_entry( union sysparam_all_entry *entry )
 {
-    return init_entry_string( &entry->hdr, entry->bool.val ? Yes : No );
+    return init_entry_string( &entry->hdr, entry->bool.val ? L"Yes" : L"No" );
 }
 
 /* load a dword (binary) parameter from the registry */
@@ -1081,7 +992,7 @@ static BOOL set_rgb_entry( union sysparam_all_entry *entry, UINT int_param, void
     HBRUSH brush;
     HPEN pen;
 
-    wsprintfW( buf, CSrgb, GetRValue(int_param), GetGValue(int_param), GetBValue(int_param) );
+    wsprintfW( buf, L"%u %u %u", GetRValue(int_param), GetGValue(int_param), GetBValue(int_param) );
     if (!save_entry_string( &entry->hdr, buf, flags )) return FALSE;
     entry->rgb.val = int_param;
     entry->hdr.loaded = TRUE;
@@ -1103,7 +1014,7 @@ static BOOL init_rgb_entry( union sysparam_all_entry *entry )
 {
     WCHAR buf[32];
 
-    wsprintfW( buf, CSrgb, GetRValue(entry->rgb.val), GetGValue(entry->rgb.val), GetBValue(entry->rgb.val) );
+    wsprintfW( buf, L"%u %u %u", GetRValue(entry->rgb.val), GetGValue(entry->rgb.val), GetBValue(entry->rgb.val) );
     return init_entry_string( &entry->hdr, buf );
 }
 
@@ -1565,20 +1476,18 @@ static union sysparam_all_entry * const default_entries[] =
  */
 void SYSPARAMS_Init(void)
 {
-    static const WCHAR def_key_name[] = {'S','o','f','t','w','a','r','e','\\','F','o','n','t','s',0};
-    static const WCHAR def_value_name[] = {'L','o','g','P','i','x','e','l','s',0};
     HKEY key;
     DWORD i, dispos, dpi_scaling;
 
     /* this one must be non-volatile */
-    if (RegCreateKeyW( HKEY_CURRENT_USER, WINE_CURRENT_USER_REGKEY, &key ))
+    if (RegCreateKeyW( HKEY_CURRENT_USER, L"Software\\Wine", &key ))
     {
         ERR("Can't create wine registry branch\n");
         return;
     }
 
     /* @@ Wine registry key: HKCU\Software\Wine\Temporary System Parameters */
-    if (RegCreateKeyExW( key, WINE_CURRENT_USER_REGKEY_TEMP_PARAMS, 0, 0,
+    if (RegCreateKeyExW( key, L"Temporary System Parameters", 0, 0,
                          REG_OPTION_VOLATILE, KEY_ALL_ACCESS, 0, &volatile_base_key, &dispos ))
         ERR("Can't create non-permanent wine registry branch\n");
 
@@ -1587,10 +1496,10 @@ void SYSPARAMS_Init(void)
     get_dword_entry( (union sysparam_all_entry *)&entry_LOGPIXELS, 0, &system_dpi, 0 );
     if (!system_dpi)  /* check fallback key */
     {
-        if (!RegOpenKeyW( HKEY_CURRENT_CONFIG, def_key_name, &key ))
+        if (!RegOpenKeyW( HKEY_CURRENT_CONFIG, L"Software\\Fonts", &key ))
         {
             DWORD type, size = sizeof(system_dpi);
-            if (RegQueryValueExW( key, def_value_name, NULL, &type, (void *)&system_dpi, &size ) ||
+            if (RegQueryValueExW( key, L"LogPixels", NULL, &type, (void *)&system_dpi, &size ) ||
                 type != REG_DWORD)
                 system_dpi = 0;
             RegCloseKey( key );
@@ -3967,7 +3876,7 @@ static BOOL update_monitor_cache(void)
     DWORD type;
 
     /* Update monitor cache from SetupAPI if it's outdated */
-    if (!video_key && RegOpenKeyW( HKEY_LOCAL_MACHINE, VIDEO_KEY, &video_key ))
+    if (!video_key && RegOpenKeyW( HKEY_LOCAL_MACHINE, L"HARDWARE\\DEVICEMAP\\VIDEO", &video_key ))
         return FALSE;
     if (RegQueryInfoKeyW( video_key, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, &filetime ))
         return FALSE;
@@ -3976,7 +3885,7 @@ static BOOL update_monitor_cache(void)
 
     mutex = get_display_device_init_mutex();
     EnterCriticalSection( &monitors_section );
-    devinfo = SetupDiGetClassDevsW( &GUID_DEVCLASS_MONITOR, DISPLAY, NULL, DIGCF_PRESENT );
+    devinfo = SetupDiGetClassDevsW( &GUID_DEVCLASS_MONITOR, L"DISPLAY", NULL, DIGCF_PRESENT );
 
     while (SetupDiEnumDeviceInfo( devinfo, i++, &device_data ))
     {
@@ -4028,7 +3937,7 @@ static BOOL update_monitor_cache(void)
                                         (BYTE *)monitors[monitor_count].szDevice, CCHDEVICENAME * sizeof(WCHAR), NULL, 0))
             goto fail;
         monitors[monitor_count].dwFlags =
-            !wcscmp( DEFAULT_ADAPTER_NAME, monitors[monitor_count].szDevice ) ? MONITORINFOF_PRIMARY : 0;
+            !wcscmp( L"\\\\.\\DISPLAY1", monitors[monitor_count].szDevice ) ? MONITORINFOF_PRIMARY : 0;
 
         monitor_count++;
     }
@@ -4056,7 +3965,7 @@ BOOL CDECL nulldrv_GetMonitorInfo( HMONITOR handle, MONITORINFO *info )
         info->rcWork = default_rect;
         info->dwFlags = MONITORINFOF_PRIMARY;
         if (info->cbSize >= sizeof(MONITORINFOEXW))
-            lstrcpyW( ((MONITORINFOEXW *)info)->szDevice, DEFAULT_ADAPTER_NAME );
+            lstrcpyW( ((MONITORINFOEXW *)info)->szDevice, L"\\\\.\\DISPLAY1" );
         return TRUE;
     }
 
@@ -4299,9 +4208,9 @@ BOOL WINAPI EnumDisplayDevicesW( LPCWSTR device, DWORD index, DISPLAY_DEVICEW *i
     /* Find adapter */
     if (!device)
     {
-        swprintf( key_nameW, ARRAY_SIZE(key_nameW), VIDEO_VALUE_FMT, index );
+        swprintf( key_nameW, ARRAY_SIZE(key_nameW), L"\\Device\\Video%d", index );
         size = sizeof(bufferW);
-        if (RegGetValueW( HKEY_LOCAL_MACHINE, VIDEO_KEY, key_nameW, RRF_RT_REG_SZ, NULL, bufferW, &size ))
+        if (RegGetValueW( HKEY_LOCAL_MACHINE, L"HARDWARE\\DEVICEMAP\\VIDEO", key_nameW, RRF_RT_REG_SZ, NULL, bufferW, &size ))
             goto done;
 
         /* DeviceKey */
@@ -4309,20 +4218,20 @@ BOOL WINAPI EnumDisplayDevicesW( LPCWSTR device, DWORD index, DISPLAY_DEVICEW *i
             lstrcpyW( info->DeviceKey, bufferW );
 
         /* DeviceName */
-        swprintf( info->DeviceName, ARRAY_SIZE(info->DeviceName), ADAPTER_FMT, index + 1 );
+        swprintf( info->DeviceName, ARRAY_SIZE(info->DeviceName), L"\\\\.\\DISPLAY%d", index + 1 );
 
         /* Strip \Registry\Machine\ */
         lstrcpyW( key_nameW, bufferW + 18 );
 
         /* DeviceString */
         size = sizeof(info->DeviceString);
-        if (RegGetValueW( HKEY_LOCAL_MACHINE, key_nameW, DRIVER_DESC, RRF_RT_REG_SZ, NULL,
+        if (RegGetValueW( HKEY_LOCAL_MACHINE, key_nameW, L"DriverDesc", RRF_RT_REG_SZ, NULL,
                           info->DeviceString, &size ))
             goto done;
 
         /* StateFlags */
         size = sizeof(info->StateFlags);
-        if (RegGetValueW( HKEY_CURRENT_CONFIG, key_nameW, STATE_FLAGS, RRF_RT_REG_DWORD, NULL,
+        if (RegGetValueW( HKEY_CURRENT_CONFIG, key_nameW, L"StateFlags", RRF_RT_REG_DWORD, NULL,
                           &info->StateFlags, &size ))
             goto done;
 
@@ -4334,7 +4243,7 @@ BOOL WINAPI EnumDisplayDevicesW( LPCWSTR device, DWORD index, DISPLAY_DEVICEW *i
             else
             {
                 size = sizeof(bufferW);
-                if (RegGetValueW( HKEY_CURRENT_CONFIG, key_nameW, GPU_ID, RRF_RT_REG_SZ | RRF_ZEROONFAILURE, NULL,
+                if (RegGetValueW( HKEY_CURRENT_CONFIG, key_nameW, L"GPUID", RRF_RT_REG_SZ | RRF_ZEROONFAILURE, NULL,
                                   bufferW, &size ))
                     goto done;
                 set = SetupDiCreateDeviceInfoList( &GUID_DEVCLASS_DISPLAY, NULL );
@@ -4350,23 +4259,23 @@ BOOL WINAPI EnumDisplayDevicesW( LPCWSTR device, DWORD index, DISPLAY_DEVICEW *i
     else
     {
         /* Check adapter name */
-        if (wcsnicmp( device, ADAPTER_PREFIX, ARRAY_SIZE(ADAPTER_PREFIX) ))
+        if (wcsnicmp( device, L"\\\\.\\DISPLAY", lstrlenW(L"\\\\.\\DISPLAY") ))
             goto done;
 
-        adapter_index = wcstol( device + ARRAY_SIZE(ADAPTER_PREFIX), NULL, 10 );
-        swprintf( key_nameW, ARRAY_SIZE(key_nameW), VIDEO_VALUE_FMT, adapter_index - 1 );
+        adapter_index = wcstol( device + lstrlenW(L"\\\\.\\DISPLAY"), NULL, 10 );
+        swprintf( key_nameW, ARRAY_SIZE(key_nameW), L"\\Device\\Video%d", adapter_index - 1 );
 
         size = sizeof(bufferW);
-        if (RegGetValueW( HKEY_LOCAL_MACHINE, VIDEO_KEY, key_nameW, RRF_RT_REG_SZ, NULL, bufferW, &size ))
+        if (RegGetValueW( HKEY_LOCAL_MACHINE, L"HARDWARE\\DEVICEMAP\\VIDEO", key_nameW, RRF_RT_REG_SZ, NULL, bufferW, &size ))
             goto done;
 
         /* DeviceName */
-        swprintf( info->DeviceName, ARRAY_SIZE(info->DeviceName), MONITOR_FMT, adapter_index, index );
+        swprintf( info->DeviceName, ARRAY_SIZE(info->DeviceName), L"\\\\.\\DISPLAY%d\\Monitor%d", adapter_index, index );
 
         /* Get monitor instance */
         /* Strip \Registry\Machine\ first */
         lstrcpyW( key_nameW, bufferW + 18 );
-        swprintf( bufferW, ARRAY_SIZE(bufferW), MONITOR_ID_VALUE_FMT, index );
+        swprintf( bufferW, ARRAY_SIZE(bufferW), L"MonitorID%d", index );
 
         size = sizeof(instanceW);
         if (RegGetValueW( HKEY_CURRENT_CONFIG, key_nameW, bufferW, RRF_RT_REG_SZ, NULL, instanceW, &size ))
@@ -4394,7 +4303,7 @@ BOOL WINAPI EnumDisplayDevicesW( LPCWSTR device, DWORD index, DISPLAY_DEVICEW *i
                                                     sizeof(bufferW), NULL ))
                 goto done;
 
-            lstrcpyW( info->DeviceKey, NT_CLASS );
+            lstrcpyW( info->DeviceKey, L"\\Registry\\Machine\\System\\CurrentControlSet\\Control\\Class\\" );
             lstrcatW( info->DeviceKey, bufferW );
         }
 
@@ -4403,11 +4312,11 @@ BOOL WINAPI EnumDisplayDevicesW( LPCWSTR device, DWORD index, DISPLAY_DEVICEW *i
         {
             if (flags & EDD_GET_DEVICE_INTERFACE_NAME)
             {
-                lstrcpyW( info->DeviceID, MONITOR_INTERFACE_PREFIX );
+                lstrcpyW( info->DeviceID, L"\\\\\?\\" );
                 lstrcatW( info->DeviceID, instanceW );
-                lstrcatW( info->DeviceID, GUID_DEVINTERFACE_MONITOR );
+                lstrcatW( info->DeviceID, L"#{e6f07b5f-ee97-4a90-b076-33f57bf4eaa7}" );
                 /* Replace '\\' with '#' after prefix */
-                for (next_charW = info->DeviceID + lstrlenW( MONITOR_INTERFACE_PREFIX ); *next_charW;
+                for (next_charW = info->DeviceID + lstrlenW( L"\\\\\?\\" ); *next_charW;
                      next_charW++)
                 {
                     if (*next_charW == '\\')
@@ -4421,7 +4330,7 @@ BOOL WINAPI EnumDisplayDevicesW( LPCWSTR device, DWORD index, DISPLAY_DEVICEW *i
                     goto done;
 
                 lstrcpyW( info->DeviceID, bufferW );
-                lstrcatW( info->DeviceID, BACKSLASH );
+                lstrcatW( info->DeviceID, L"\\" );
 
                 if (!SetupDiGetDeviceRegistryPropertyW( set, &device_data, SPDRP_DRIVER, NULL, (BYTE *)bufferW,
                                                         sizeof(bufferW), NULL ))
@@ -4444,7 +4353,7 @@ BOOL WINAPI EnumDisplayDevicesW( LPCWSTR device, DWORD index, DISPLAY_DEVICEW *i
         return FALSE;
 
     /* If user driver did initialize the registry, then exit */
-    if (!RegOpenKeyW( HKEY_LOCAL_MACHINE, VIDEO_KEY, &hkey ))
+    if (!RegOpenKeyW( HKEY_LOCAL_MACHINE, L"HARDWARE\\DEVICEMAP\\VIDEO", &hkey ))
     {
         RegCloseKey( hkey );
         return FALSE;
@@ -4454,8 +4363,8 @@ BOOL WINAPI EnumDisplayDevicesW( LPCWSTR device, DWORD index, DISPLAY_DEVICEW *i
     /* Adapter */
     if (!device)
     {
-        memcpy( info->DeviceName, DEFAULT_ADAPTER_NAME, sizeof(DEFAULT_ADAPTER_NAME) );
-        memcpy( info->DeviceString, DEFAULT_ADAPTER_STRING, sizeof(DEFAULT_ADAPTER_STRING) );
+        lstrcpyW( info->DeviceName, L"\\\\.\\DISPLAY1" );
+        lstrcpyW( info->DeviceString, L"Wine Adapter" );
         info->StateFlags =
             DISPLAY_DEVICE_ATTACHED_TO_DESKTOP | DISPLAY_DEVICE_PRIMARY_DEVICE | DISPLAY_DEVICE_VGA_COMPATIBLE;
         if (info->cb >= offsetof(DISPLAY_DEVICEW, DeviceID) + sizeof(info->DeviceID))
@@ -4463,24 +4372,24 @@ BOOL WINAPI EnumDisplayDevicesW( LPCWSTR device, DWORD index, DISPLAY_DEVICEW *i
             if (flags & EDD_GET_DEVICE_INTERFACE_NAME)
                 info->DeviceID[0] = 0;
             else
-                memcpy( info->DeviceID, DEFAULT_ADAPTER_ID, sizeof(DEFAULT_ADAPTER_ID) );
+                lstrcpyW( info->DeviceID, L"PCI\\VEN_0000&DEV_0000&SUBSYS_00000000&REV_00" );
         }
     }
     /* Monitor */
     else
     {
-        if (lstrcmpiW( DEFAULT_ADAPTER_NAME, device ))
+        if (lstrcmpiW( L"\\\\.\\DISPLAY1", device ))
             return FALSE;
 
-        memcpy( info->DeviceName, DEFAULT_MONITOR_NAME, sizeof(DEFAULT_MONITOR_NAME) );
-        memcpy( info->DeviceString, DEFAULT_MONITOR_STRING, sizeof(DEFAULT_MONITOR_STRING) );
+        lstrcpyW( info->DeviceName, L"\\\\.\\DISPLAY1\\Monitor0" );
+        lstrcpyW( info->DeviceString, L"Generic Non-PnP Monitor" );
         info->StateFlags = DISPLAY_DEVICE_ACTIVE | DISPLAY_DEVICE_ATTACHED;
         if (info->cb >= offsetof(DISPLAY_DEVICEW, DeviceID) + sizeof(info->DeviceID))
         {
             if (flags & EDD_GET_DEVICE_INTERFACE_NAME)
-                memcpy( info->DeviceID, DEFAULT_MONITOR_INTERFACE_ID, sizeof(DEFAULT_MONITOR_INTERFACE_ID) );
+                lstrcpyW( info->DeviceID, L"\\\\\?\\DISPLAY#Default_Monitor#4&17f0ff54&0&UID0#{e6f07b5f-ee97-4a90-b076-33f57bf4eaa7}" );
             else
-                memcpy( info->DeviceID, DEFAULT_MONITOR_ID, sizeof(DEFAULT_MONITOR_ID) );
+                lstrcpyW( info->DeviceID, L"MONITOR\\Default_Monitor\\{4d36e96e-e325-11ce-bfc1-08002be10318}\\0000" );
         }
     }
 
@@ -4583,7 +4492,7 @@ LONG WINAPI GetDisplayConfigBufferSizes(UINT32 flags, UINT32 *num_path_info, UIN
     /* Iterate through "targets"/monitors.
      * Each target corresponds to a path, and each path references a source and a target mode.
      */
-    devinfo = SetupDiGetClassDevsW(&GUID_DEVCLASS_MONITOR, DISPLAY, NULL, DIGCF_PRESENT);
+    devinfo = SetupDiGetClassDevsW(&GUID_DEVCLASS_MONITOR, L"DISPLAY", NULL, DIGCF_PRESENT);
     if (devinfo == INVALID_HANDLE_VALUE)
         goto done;
 
@@ -4780,7 +4689,7 @@ LONG WINAPI QueryDisplayConfig(UINT32 flags, UINT32 *numpathelements, DISPLAYCON
     /* Iterate through "targets"/monitors.
      * Each target corresponds to a path, and each path corresponds to one or two unique modes.
      */
-    devinfo = SetupDiGetClassDevsW(&GUID_DEVCLASS_MONITOR, DISPLAY, NULL, DIGCF_PRESENT);
+    devinfo = SetupDiGetClassDevsW(&GUID_DEVCLASS_MONITOR, L"DISPLAY", NULL, DIGCF_PRESENT);
     if (devinfo == INVALID_HANDLE_VALUE)
     {
         ret = ERROR_GEN_FAILURE;
@@ -4815,7 +4724,7 @@ LONG WINAPI QueryDisplayConfig(UINT32 flags, UINT32 *numpathelements, DISPLAYCON
             goto done;
 
         /* Extract the adapter index from device_name to use as the source ID */
-        adapter_index = wcstol(device_name + ARRAY_SIZE(ADAPTER_PREFIX), NULL, 10);
+        adapter_index = wcstol(device_name + lstrlenW(L"\\\\.\\DISPLAY"), NULL, 10);
         adapter_index--;
 
         if (path_index == *numpathelements || mode_index == *numinfoelements)
@@ -4890,7 +4799,7 @@ LONG WINAPI DisplayConfigGetDeviceInfo(DISPLAYCONFIG_DEVICE_INFO_HEADER *packet)
             return ERROR_INVALID_PARAMETER;
 
         mutex = get_display_device_init_mutex();
-        devinfo = SetupDiGetClassDevsW(&GUID_DEVCLASS_MONITOR, DISPLAY, NULL, DIGCF_PRESENT);
+        devinfo = SetupDiGetClassDevsW(&GUID_DEVCLASS_MONITOR, L"DISPLAY", NULL, DIGCF_PRESENT);
         if (devinfo == INVALID_HANDLE_VALUE)
         {
             release_display_device_init_mutex(mutex);
@@ -4912,7 +4821,7 @@ LONG WINAPI DisplayConfigGetDeviceInfo(DISPLAYCONFIG_DEVICE_INFO_HEADER *packet)
                                            &type, (BYTE *)device_name, sizeof(device_name), NULL, 0))
                 continue;
 
-            source_id = wcstol(device_name + ARRAY_SIZE(ADAPTER_PREFIX), NULL, 10);
+            source_id = wcstol(device_name + lstrlenW(L"\\\\.\\DISPLAY"), NULL, 10);
             source_id--;
             if (source_name->header.id != source_id)
                 continue;
diff --git a/dlls/user32/text.c b/dlls/user32/text.c
index b0c5c892d7a..dd9d711cd48 100644
--- a/dlls/user32/text.c
+++ b/dlls/user32/text.c
@@ -91,7 +91,7 @@ WINE_DEFAULT_DEBUG_CHANNEL(text);
 #define FORWARD_SLASH '/'
 #define BACK_SLASH '\\'
 
-static const WCHAR ELLIPSISW[] = {'.','.','.', 0};
+static const WCHAR ELLIPSISW[] = L"...";
 
 typedef struct tag_ellipsis_data
 {
diff --git a/dlls/user32/uitools.c b/dlls/user32/uitools.c
index ba9d52129d4..528d72945ce 100644
--- a/dlls/user32/uitools.c
+++ b/dlls/user32/uitools.c
@@ -918,7 +918,6 @@ static BOOL UITOOLS95_DrawFrameCaption(HDC dc, LPRECT r, UINT uFlags)
     int xc = (myr.left+myr.right)/2;
     int yc = (myr.top+myr.bottom)/2;
     WCHAR str[] = {0, 0};
-    static const WCHAR glyphFontName[] = { 'M','a','r','l','e','t','t',0 };
     UINT alignsave;
     int bksave;
     COLORREF clrsave;
@@ -940,7 +939,7 @@ static BOOL UITOOLS95_DrawFrameCaption(HDC dc, LPRECT r, UINT uFlags)
     
     hf = CreateFontW(-SmallDiam, 0, 0, 0, FW_NORMAL, FALSE, FALSE, FALSE,
                     SYMBOL_CHARSET, OUT_DEFAULT_PRECIS, CLIP_DEFAULT_PRECIS,
-                    DEFAULT_QUALITY, FIXED_PITCH|FF_DONTCARE, glyphFontName);
+                    DEFAULT_QUALITY, FIXED_PITCH|FF_DONTCARE, L"Marlett");
     alignsave = SetTextAlign(dc, TA_TOP|TA_LEFT);
     bksave = SetBkMode(dc, TRANSPARENT);
     clrsave = GetTextColor(dc);
diff --git a/dlls/user32/user_main.c b/dlls/user32/user_main.c
index 78172c00158..c4c4853c213 100644
--- a/dlls/user32/user_main.c
+++ b/dlls/user32/user_main.c
@@ -166,52 +166,43 @@ static void palette_init(void)
  */
 static const WCHAR *get_default_desktop(void)
 {
-    static const WCHAR defaultW[] = {'D','e','f','a','u','l','t',0};
-    static const WCHAR desktopW[] = {'D','e','s','k','t','o','p',0};
-    static const WCHAR explorerW[] = {'\\','E','x','p','l','o','r','e','r',0};
-    static const WCHAR app_defaultsW[] = {'S','o','f','t','w','a','r','e','\\',
-                                          'W','i','n','e','\\',
-                                          'A','p','p','D','e','f','a','u','l','t','s',0};
-    static WCHAR buffer[MAX_PATH + ARRAY_SIZE(explorerW)];
+    static WCHAR buffer[MAX_PATH + ARRAY_SIZE(L"\\Explorer")];
     WCHAR *p, *appname = buffer;
     const WCHAR *ret = NULL;
     DWORD len;
     HKEY tmpkey, appkey;
 
     len = (GetModuleFileNameW( 0, buffer, MAX_PATH ));
-    if (!len || len >= MAX_PATH) return defaultW;
+    if (!len || len >= MAX_PATH) return L"Default";
     if ((p = wcsrchr( appname, '/' ))) appname = p + 1;
     if ((p = wcsrchr( appname, '\\' ))) appname = p + 1;
     p = appname + lstrlenW(appname);
-    lstrcpyW( p, explorerW );
+    lstrcpyW( p, L"\\Explorer" );
 
     /* @@ Wine registry key: HKCU\Software\Wine\AppDefaults\app.exe\Explorer */
-    if (!RegOpenKeyW( HKEY_CURRENT_USER, app_defaultsW, &tmpkey ))
+    if (!RegOpenKeyW( HKEY_CURRENT_USER, L"Software\\Wine\\AppDefaults", &tmpkey ))
     {
         if (RegOpenKeyW( tmpkey, appname, &appkey )) appkey = 0;
         RegCloseKey( tmpkey );
         if (appkey)
         {
             len = sizeof(buffer);
-            if (!RegQueryValueExW( appkey, desktopW, 0, NULL, (LPBYTE)buffer, &len )) ret = buffer;
+            if (!RegQueryValueExW( appkey, L"Desktop", 0, NULL, (LPBYTE)buffer, &len )) ret = buffer;
             RegCloseKey( appkey );
             if (ret && *ret) return ret;
             ret = NULL;
         }
     }
 
-    memcpy( buffer, app_defaultsW, 13 * sizeof(WCHAR) );  /* copy only software\\wine */
-    lstrcpyW( buffer + 13, explorerW );
-
     /* @@ Wine registry key: HKCU\Software\Wine\Explorer */
-    if (!RegOpenKeyW( HKEY_CURRENT_USER, buffer, &appkey ))
+    if (!RegOpenKeyW( HKEY_CURRENT_USER, L"Software\\Wine\\Explorer", &appkey ))
     {
         len = sizeof(buffer);
-        if (!RegQueryValueExW( appkey, desktopW, 0, NULL, (LPBYTE)buffer, &len )) ret = buffer;
+        if (!RegQueryValueExW( appkey, L"Desktop", 0, NULL, (LPBYTE)buffer, &len )) ret = buffer;
         RegCloseKey( appkey );
         if (ret && *ret) return ret;
     }
-    return defaultW;
+    return L"Default";
 }
 
 
@@ -224,13 +215,9 @@ static void dpiaware_init(void)
 {
     WCHAR buffer[256];
     DWORD option;
-    static const WCHAR dpiAwareW[] = {'d','p','i','A','w','a','r','e',0};
-    static const WCHAR dpiAwarenessW[] = {'d','p','i','A','w','a','r','e','n','e','s','s',0};
-    static const WCHAR namespace2005W[] = {'h','t','t','p',':','/','/','s','c','h','e','m','a','s','.','m','i','c','r','o','s','o','f','t','.','c','o','m','/','S','M','I','/','2','0','0','5','/','W','i','n','d','o','w','s','S','e','t','t','i','n','g','s',0};
-    static const WCHAR namespace2016W[] = {'h','t','t','p',':','/','/','s','c','h','e','m','a','s','.','m','i','c','r','o','s','o','f','t','.','c','o','m','/','S','M','I','/','2','0','1','6','/','W','i','n','d','o','w','s','S','e','t','t','i','n','g','s',0};
 
     if (!LdrQueryImageFileExecutionOptions( &NtCurrentTeb()->Peb->ProcessParameters->ImagePathName,
-                                            dpiAwarenessW, REG_DWORD, &option, sizeof(option), NULL ))
+                                            L"dpiAwareness", REG_DWORD, &option, sizeof(option), NULL ))
     {
         TRACE( "got option %x\n", option );
         if (option <= 2)
@@ -240,24 +227,20 @@ static void dpiaware_init(void)
         }
     }
 
-    if (QueryActCtxSettingsW( 0, NULL, namespace2016W, dpiAwarenessW, buffer, ARRAY_SIZE(buffer), NULL ))
+    if (QueryActCtxSettingsW( 0, NULL, L"http://schemas.microsoft.com/SMI/2016/WindowsSettings",
+                              L"dpiAwareness", buffer, ARRAY_SIZE(buffer), NULL ))
     {
-        static const WCHAR unawareW[] = {'u','n','a','w','a','r','e',0};
-        static const WCHAR systemW[] = {'s','y','s','t','e','m',0};
-        static const WCHAR permonW[] = {'p','e','r','m','o','n','i','t','o','r',0};
-        static const WCHAR permonv2W[] = {'p','e','r','m','o','n','i','t','o','r','v','2',0};
-        static const WCHAR spacesW[] = {' ','\t','\r','\n',0};
-        static const WCHAR * const types[] = { unawareW, systemW, permonW, permonv2W };
+        static const WCHAR * const types[] = { L"unaware", L"system", L"permonitor", L"permonitorv2" };
         WCHAR *p, *start, *end;
         ULONG_PTR i;
 
         TRACE( "got dpiAwareness=%s\n", debugstr_w(buffer) );
         for (start = buffer; *start; start = end)
         {
-            start += wcsspn( start, spacesW );
+            start += wcsspn( start, L" \t\r\n" );
             if (!(end = wcschr( start, ',' ))) end = start + lstrlenW(start);
             else *end++ = 0;
-            if ((p = wcspbrk( start, spacesW ))) *p = 0;
+            if ((p = wcspbrk( start, L" \t\r\n" ))) *p = 0;
             for (i = 0; i < ARRAY_SIZE(types); i++)
             {
                 if (wcsicmp( start, types[i] )) continue;
@@ -266,16 +249,13 @@ static void dpiaware_init(void)
             }
         }
     }
-    else if (QueryActCtxSettingsW( 0, NULL, namespace2005W, dpiAwareW, buffer, ARRAY_SIZE(buffer), NULL ))
+    else if (QueryActCtxSettingsW( 0, NULL, L"http://schemas.microsoft.com/SMI/2005/WindowsSettings",
+                                   L"dpiAware", buffer, ARRAY_SIZE(buffer), NULL ))
     {
-        static const WCHAR trueW[] = {'t','r','u','e',0};
-        static const WCHAR truepmW[] = {'t','r','u','e','/','p','m',0};
-        static const WCHAR permonW[] = {'p','e','r',' ','m','o','n','i','t','o','r',0};
-
         TRACE( "got dpiAware=%s\n", debugstr_w(buffer) );
-        if (!wcsicmp( buffer, trueW ))
+        if (!wcsicmp( buffer, L"true" ))
             SetProcessDpiAwarenessContext( DPI_AWARENESS_CONTEXT_SYSTEM_AWARE );
-        else if (!wcsicmp( buffer, truepmW ) || !wcsicmp( buffer, permonW ))
+        else if (!wcsicmp( buffer, L"true/pm" ) || !wcsicmp( buffer, L"per monitor" ))
             SetProcessDpiAwarenessContext( DPI_AWARENESS_CONTEXT_PER_MONITOR_AWARE );
         else
             SetProcessDpiAwarenessContext( DPI_AWARENESS_CONTEXT_UNAWARE );
@@ -290,8 +270,6 @@ static void dpiaware_init(void)
  */
 static void winstation_init(void)
 {
-    static const WCHAR WinSta0[] = {'W','i','n','S','t','a','0',0};
-
     STARTUPINFOW info;
     WCHAR *winstation = NULL, *desktop = NULL, *buffer = NULL;
     HANDLE handle;
@@ -312,12 +290,12 @@ static void winstation_init(void)
     /* set winstation if explicitly specified, or if we don't have one yet */
     if (buffer || !GetProcessWindowStation())
     {
-        handle = CreateWindowStationW( winstation ? winstation : WinSta0, 0, WINSTA_ALL_ACCESS, NULL );
+        handle = CreateWindowStationW( winstation ? winstation : L"WinSta0", 0, WINSTA_ALL_ACCESS, NULL );
         if (handle)
         {
             SetProcessWindowStation( handle );
             /* only WinSta0 is visible */
-            if (!winstation || !wcsicmp( winstation, WinSta0 ))
+            if (!winstation || !wcsicmp( winstation, L"WinSta0" ))
             {
                 USEROBJECTFLAGS flags;
                 flags.fInherit  = FALSE;
@@ -395,7 +373,6 @@ static void thread_detach(void)
  */
 BOOL WINAPI DllMain( HINSTANCE inst, DWORD reason, LPVOID reserved )
 {
-    static const WCHAR imm32_dllW[] = {'i','m','m','3','2','.','d','l','l',0};
     static HMODULE imm32_module;
     BOOL ret = TRUE;
 
@@ -405,7 +382,7 @@ BOOL WINAPI DllMain( HINSTANCE inst, DWORD reason, LPVOID reserved )
         user32_module = inst;
         ret = process_attach();
         if(ret)
-            imm32_module = LoadLibraryW(imm32_dllW);
+            imm32_module = LoadLibraryW(L"imm32.dll");
         break;
     case DLL_THREAD_DETACH:
         thread_detach();
@@ -425,29 +402,23 @@ BOOL WINAPI DllMain( HINSTANCE inst, DWORD reason, LPVOID reserved )
  */
 BOOL WINAPI ExitWindowsEx( UINT flags, DWORD reason )
 {
-    static const WCHAR winebootW[]    = { '\\','w','i','n','e','b','o','o','t','.','e','x','e',0 };
-    static const WCHAR killW[]        = { ' ','-','-','k','i','l','l',0 };
-    static const WCHAR end_sessionW[] = { ' ','-','-','e','n','d','-','s','e','s','s','i','o','n',0 };
-    static const WCHAR forceW[]       = { ' ','-','-','f','o','r','c','e',0 };
-    static const WCHAR shutdownW[]    = { ' ','-','-','s','h','u','t','d','o','w','n',0 };
-
     WCHAR app[MAX_PATH];
     WCHAR cmdline[MAX_PATH + 64];
     PROCESS_INFORMATION pi;
     STARTUPINFOW si;
     void *redir;
 
-    GetSystemDirectoryW( app, MAX_PATH - ARRAY_SIZE( winebootW ));
-    lstrcatW( app, winebootW );
+    GetSystemDirectoryW( app, MAX_PATH - ARRAY_SIZE( L"\\wineboot.exe" ));
+    lstrcatW( app, L"\\wineboot.exe" );
     lstrcpyW( cmdline, app );
 
-    if (flags & EWX_FORCE) lstrcatW( cmdline, killW );
+    if (flags & EWX_FORCE) lstrcatW( cmdline, L" --kill" );
     else
     {
-        lstrcatW( cmdline, end_sessionW );
-        if (flags & EWX_FORCEIFHUNG) lstrcatW( cmdline, forceW );
+        lstrcatW( cmdline, L" --end-session" );
+        if (flags & EWX_FORCEIFHUNG) lstrcatW( cmdline, L" --force" );
     }
-    if (!(flags & EWX_REBOOT)) lstrcatW( cmdline, shutdownW );
+    if (!(flags & EWX_REBOOT)) lstrcatW( cmdline, L" --shutdown" );
 
     memset( &si, 0, sizeof si );
     si.cb = sizeof si;
diff --git a/dlls/user32/win.c b/dlls/user32/win.c
index 3b4a1d74262..d0fd5420d3d 100644
--- a/dlls/user32/win.c
+++ b/dlls/user32/win.c
@@ -1447,8 +1447,6 @@ HWND WIN_CreateWindowEx( CREATESTRUCTW *cs, LPCWSTR className, HINSTANCE module,
     }
     else
     {
-        static const WCHAR messageW[] = {'M','e','s','s','a','g','e',0};
-
         if ((cs->style & (WS_CHILD|WS_POPUP)) == WS_CHILD)
         {
             WARN("No parent for child window\n" );
@@ -1458,7 +1456,7 @@ HWND WIN_CreateWindowEx( CREATESTRUCTW *cs, LPCWSTR className, HINSTANCE module,
 
         /* are we creating the desktop or HWND_MESSAGE parent itself? */
         if (className != (LPCWSTR)DESKTOP_CLASS_ATOM &&
-            (IS_INTRESOURCE(className) || wcsicmp( className, messageW )))
+            (IS_INTRESOURCE(className) || wcsicmp( className, L"Message" )))
         {
             DWORD layout;
             GetProcessDefaultLayout( &layout );
@@ -2084,13 +2082,11 @@ HWND WINAPI GetDesktopWindow(void)
 
     if (!thread_info->top_window)
     {
-        static const WCHAR explorer[] = {'\\','e','x','p','l','o','r','e','r','.','e','x','e',0};
-        static const WCHAR args[] = {' ','/','d','e','s','k','t','o','p',0};
         STARTUPINFOW si;
         PROCESS_INFORMATION pi;
         WCHAR windir[MAX_PATH];
-        WCHAR app[MAX_PATH + ARRAY_SIZE( explorer )];
-        WCHAR cmdline[MAX_PATH + ARRAY_SIZE( explorer ) + ARRAY_SIZE( args )];
+        WCHAR app[MAX_PATH + ARRAY_SIZE( L"\\explorer.exe" )];
+        WCHAR cmdline[MAX_PATH + ARRAY_SIZE( L"\\explorer.exe /desktop" )];
         WCHAR desktop[MAX_PATH];
         void *redir;
 
@@ -2120,9 +2116,9 @@ HWND WINAPI GetDesktopWindow(void)
 
         GetSystemDirectoryW( windir, MAX_PATH );
         lstrcpyW( app, windir );
-        lstrcatW( app, explorer );
+        lstrcatW( app, L"\\explorer.exe" );
         lstrcpyW( cmdline, app );
-        lstrcatW( cmdline, args );
+        lstrcatW( cmdline, L" /desktop" );
 
         Wow64DisableWow64FsRedirection( &redir );
         if (CreateProcessW( app, cmdline, NULL, NULL, FALSE, DETACHED_PROCESS,
@@ -4054,11 +4050,6 @@ BOOL WINAPI GetProcessDefaultLayout( DWORD *layout )
     }
     if (process_layout == ~0u)
     {
-        static const WCHAR translationW[] = { '\\','V','a','r','F','i','l','e','I','n','f','o',
-                                              '\\','T','r','a','n','s','l','a','t','i','o','n', 0 };
-        static const WCHAR filedescW[] = { '\\','S','t','r','i','n','g','F','i','l','e','I','n','f','o',
-                                           '\\','%','0','4','x','%','0','4','x',
-                                           '\\','F','i','l','e','D','e','s','c','r','i','p','t','i','o','n',0 };
         WCHAR *str, buffer[MAX_PATH];
         DWORD i, len, version_layout = 0;
         DWORD user_lang = GetUserDefaultLangID();
@@ -4069,7 +4060,7 @@ BOOL WINAPI GetProcessDefaultLayout( DWORD *layout )
         if (!(len = GetFileVersionInfoSizeW( buffer, NULL ))) goto done;
         if (!(data = HeapAlloc( GetProcessHeap(), 0, len ))) goto done;
         if (!GetFileVersionInfoW( buffer, 0, len, data )) goto done;
-        if (!VerQueryValueW( data, translationW, (void **)&languages, &len ) || !len) goto done;
+        if (!VerQueryValueW( data, L"\\VarFileInfo\\Translation", (void **)&languages, &len ) || !len) goto done;
 
         len /= sizeof(DWORD);
         for (i = 0; i < len; i++) if (LOWORD(languages[i]) == user_lang) break;
@@ -4078,7 +4069,8 @@ BOOL WINAPI GetProcessDefaultLayout( DWORD *layout )
                 if (LOWORD(languages[i]) == MAKELANGID( PRIMARYLANGID(user_lang), SUBLANG_NEUTRAL )) break;
         if (i == len) i = 0;  /* default to the first one */
 
-        swprintf( buffer, ARRAY_SIZE(buffer), filedescW, LOWORD(languages[i]), HIWORD(languages[i]) );
+        swprintf( buffer, ARRAY_SIZE(buffer), L"\\StringFileInfo\\%04x%04x\\FileDescription",
+                  LOWORD(languages[i]), HIWORD(languages[i]) );
         if (!VerQueryValueW( data, buffer, (void **)&str, &len )) goto done;
         TRACE( "found description %s\n", debugstr_w( str ));
         if (str[0] == 0x200e && str[1] == 0x200e) version_layout = LAYOUT_RTL;
diff --git a/dlls/user32/winstation.c b/dlls/user32/winstation.c
index 68762ae9ded..95a9eb85099 100644
--- a/dlls/user32/winstation.c
+++ b/dlls/user32/winstation.c
@@ -58,9 +58,6 @@ static BOOL CALLBACK enum_names_WtoA( LPWSTR name, LPARAM lparam )
 static HANDLE get_winstations_dir_handle(void)
 {
     static HANDLE handle = NULL;
-    static const WCHAR basenameW[] = {'\\','S','e','s','s','i','o','n','s','\\','%','u',
-                                      '\\','W','i','n','d','o','w','s','\\',
-                                      'W','i','n','d','o','w','S','t','a','t','i','o','n','s',0};
     WCHAR buffer[64];
     UNICODE_STRING str;
     OBJECT_ATTRIBUTES attr;
@@ -69,7 +66,7 @@ static HANDLE get_winstations_dir_handle(void)
     {
         HANDLE dir;
 
-        swprintf( buffer, ARRAY_SIZE(buffer), basenameW, NtCurrentTeb()->Peb->SessionId );
+        swprintf( buffer, ARRAY_SIZE(buffer), L"\\Sessions\\%u\\Windows\\WindowStations", NtCurrentTeb()->Peb->SessionId );
         RtlInitUnicodeString( &str, buffer );
         InitializeObjectAttributes( &attr, &str, 0, 0, NULL );
         NtOpenDirectoryObject( &dir, DIRECTORY_CREATE_OBJECT | DIRECTORY_TRAVERSE, &attr );
@@ -83,13 +80,12 @@ static WCHAR default_name[29];
 
 static BOOL WINAPI winstation_default_name_once( INIT_ONCE *once, void *param, void **context )
 {
-    static const WCHAR fmt[] = {'S','e','r','v','i','c','e','-','0','x','%','x','-','%','x','$',0};
     TOKEN_STATISTICS stats;
     BOOL ret;
 
     ret = GetTokenInformation( GetCurrentProcessToken(), TokenStatistics, &stats, sizeof(stats), NULL );
     if (ret)
-        swprintf( default_name, ARRAY_SIZE(default_name), fmt,
+        swprintf( default_name, ARRAY_SIZE(default_name), L"Service-0x%x-%x$",
                   stats.AuthenticationId.HighPart, stats.AuthenticationId.LowPart );
 
     return ret;
@@ -579,8 +575,6 @@ BOOL WINAPI GetUserObjectInformationA( HANDLE handle, INT index, LPVOID info, DW
  */
 BOOL WINAPI GetUserObjectInformationW( HANDLE handle, INT index, LPVOID info, DWORD len, LPDWORD needed )
 {
-    static const WCHAR desktopW[] = { 'D','e','s','k','t','o','p',0 };
-    static const WCHAR winstationW[] = { 'W','i','n','d','o','w','S','t','a','t','i','o','n',0 };
     BOOL ret;
 
     switch(index)
@@ -617,14 +611,14 @@ BOOL WINAPI GetUserObjectInformationW( HANDLE handle, INT index, LPVOID info, DW
             ret = !wine_server_call_err( req );
             if (ret)
             {
-                size_t size = reply->is_desktop ? sizeof(desktopW) : sizeof(winstationW);
+                size_t size = reply->is_desktop ? sizeof(L"Desktop") : sizeof(L"WindowStation");
                 if (needed) *needed = size;
                 if (len < size)
                 {
                     SetLastError( ERROR_INSUFFICIENT_BUFFER );
                     ret = FALSE;
                 }
-                else memcpy( info, reply->is_desktop ? desktopW : winstationW, size );
+                else memcpy( info, reply->is_desktop ? L"Desktop" : L"WindowStation", size );
             }
         }
         SERVER_END_REQ;
diff --git a/dlls/user32/wsprintf.c b/dlls/user32/wsprintf.c
index ac57603b763..4c1c44365aa 100644
--- a/dlls/user32/wsprintf.c
+++ b/dlls/user32/wsprintf.c
@@ -75,9 +75,6 @@ typedef union {
     LONGLONG int_view;
 } WPRINTF_DATA;
 
-static const CHAR null_stringA[] = "(null)";
-static const WCHAR null_stringW[] = { '(', 'n', 'u', 'l', 'l', ')', 0 };
-
 /***********************************************************************
  *           WPRINTF_ParseFormatA
  *
@@ -261,7 +258,7 @@ static UINT WPRINTF_GetLen( WPRINTF_FORMAT *format, WPRINTF_DATA *arg,
         else len = WideCharToMultiByte( CP_ACP, 0, &arg->wchar_view, 1, NULL, 0, NULL, NULL );
         return (format->precision = len);
     case WPR_STRING:
-        if (!arg->lpcstr_view) arg->lpcstr_view = null_stringA;
+        if (!arg->lpcstr_view) arg->lpcstr_view = "(null)";
         if (dst_is_wide)
         {
             LPCSTR p = arg->lpcstr_view;
@@ -281,7 +278,7 @@ static UINT WPRINTF_GetLen( WPRINTF_FORMAT *format, WPRINTF_DATA *arg,
         if (len > maxlen) len = maxlen;
         return (format->precision = len);
     case WPR_WSTRING:
-        if (!arg->lpcwstr_view) arg->lpcwstr_view = null_stringW;
+        if (!arg->lpcwstr_view) arg->lpcwstr_view = L"(null)";
         if (dst_is_wide)
         {
             for (len = 0; !format->precision || (len < format->precision); len++)
From 6456973f0a64d326bb54da4675310caffc2588f1 Mon Sep 17 00:00:00 2001
From: Alexandre Julliard <julliard@winehq.org>
Date: Mon, 21 Sep 2020 19:09:43 +0200
Subject: [PATCH] user32: Use wide character string literals for system
 parameter entries.

Signed-off-by: Alexandre Julliard <julliard@winehq.org>
---
 dlls/user32/sysparams.c | 432 +++++++++++++++-------------------------
 1 file changed, 160 insertions(+), 272 deletions(-)

diff --git a/dlls/user32/sysparams.c b/dlls/user32/sysparams.c
index a2468d73f40..d4640e0068e 100644
--- a/dlls/user32/sysparams.c
+++ b/dlls/user32/sysparams.c
@@ -95,120 +95,6 @@ static const WCHAR *parameter_key_names[NB_PARAM_KEYS] =
     L"Control Panel\\Accessibility\\AudioDescription",
 };
 
-/* parameter key values; the first char is actually an enum parameter_key to specify the key */
-static const WCHAR BEEP_VALNAME[]=                     {SOUND_KEY,'B','e','e','p',0};
-static const WCHAR MOUSETHRESHOLD1_VALNAME[]=          {MOUSE_KEY,'M','o','u','s','e','T','h','r','e','s','h','o','l','d','1',0};
-static const WCHAR MOUSETHRESHOLD2_VALNAME[]=          {MOUSE_KEY,'M','o','u','s','e','T','h','r','e','s','h','o','l','d','2',0};
-static const WCHAR MOUSEACCELERATION_VALNAME[]=        {MOUSE_KEY,'M','o','u','s','e','S','p','e','e','d',0};
-static const WCHAR BORDER_VALNAME[]=                   {METRICS_KEY,'B','o','r','d','e','r','W','i','d','t','h',0};
-static const WCHAR KEYBOARDSPEED_VALNAME[]=            {KEYBOARD_KEY,'K','e','y','b','o','a','r','d','S','p','e','e','d',0};
-static const WCHAR ICONHORIZONTALSPACING_VALNAME[]=    {METRICS_KEY,'I','c','o','n','S','p','a','c','i','n','g',0};
-static const WCHAR SCREENSAVETIMEOUT_VALNAME[]=        {DESKTOP_KEY,'S','c','r','e','e','n','S','a','v','e','T','i','m','e','O','u','t',0};
-static const WCHAR SCREENSAVEACTIVE_VALNAME[]=         {DESKTOP_KEY,'S','c','r','e','e','n','S','a','v','e','A','c','t','i','v','e',0};
-static const WCHAR GRIDGRANULARITY_VALNAME[]=          {DESKTOP_KEY,'G','r','i','d','G','r','a','n','u','l','a','r','i','t','y',0};
-static const WCHAR KEYBOARDDELAY_VALNAME[]=            {KEYBOARD_KEY,'K','e','y','b','o','a','r','d','D','e','l','a','y',0};
-static const WCHAR ICONVERTICALSPACING_VALNAME[]=      {METRICS_KEY,'I','c','o','n','V','e','r','t','i','c','a','l','S','p','a','c','i','n','g',0};
-static const WCHAR ICONTITLEWRAP_VALNAME[]=            {DESKTOP_KEY,'I','c','o','n','T','i','t','l','e','W','r','a','p',0};
-static const WCHAR ICONTITLEWRAP_MIRROR[]=             {METRICS_KEY,'I','c','o','n','T','i','t','l','e','W','r','a','p',0};
-static const WCHAR ICONTITLELOGFONT_VALNAME[]=         {METRICS_KEY,'I','c','o','n','F','o','n','t',0};
-static const WCHAR MENUDROPALIGNMENT_VALNAME[]=        {DESKTOP_KEY,'M','e','n','u','D','r','o','p','A','l','i','g','n','m','e','n','t',0};
-static const WCHAR MENUDROPALIGNMENT_MIRROR[]=         {VERSION_KEY,'M','e','n','u','D','r','o','p','A','l','i','g','n','m','e','n','t',0};
-static const WCHAR MOUSETRAILS_VALNAME[]=              {MOUSE_KEY,'M','o','u','s','e','T','r','a','i','l','s',0};
-static const WCHAR SNAPTODEFBUTTON_VALNAME[]=          {MOUSE_KEY,'S','n','a','p','T','o','D','e','f','a','u','l','t','B','u','t','t','o','n',0};
-static const WCHAR DOUBLECLKWIDTH_VALNAME[]=           {MOUSE_KEY,'D','o','u','b','l','e','C','l','i','c','k','W','i','d','t','h',0};
-static const WCHAR DOUBLECLKWIDTH_MIRROR[]=            {DESKTOP_KEY,'D','o','u','b','l','e','C','l','i','c','k','W','i','d','t','h',0};
-static const WCHAR DOUBLECLKHEIGHT_VALNAME[]=          {MOUSE_KEY,'D','o','u','b','l','e','C','l','i','c','k','H','e','i','g','h','t',0};
-static const WCHAR DOUBLECLKHEIGHT_MIRROR[]=           {DESKTOP_KEY,'D','o','u','b','l','e','C','l','i','c','k','H','e','i','g','h','t',0};
-static const WCHAR DOUBLECLICKTIME_VALNAME[]=          {MOUSE_KEY,'D','o','u','b','l','e','C','l','i','c','k','S','p','e','e','d',0};
-static const WCHAR MOUSEBUTTONSWAP_VALNAME[]=          {MOUSE_KEY,'S','w','a','p','M','o','u','s','e','B','u','t','t','o','n','s',0};
-static const WCHAR DRAGFULLWINDOWS_VALNAME[]=          {DESKTOP_KEY,'D','r','a','g','F','u','l','l','W','i','n','d','o','w','s',0};
-static const WCHAR SHOWSOUNDS_VALNAME[]=               {SHOWSOUNDS_KEY,'O','n',0};
-static const WCHAR KEYBOARDPREF_VALNAME[]=             {KEYBOARDPREF_KEY,'O','n',0};
-static const WCHAR SCREENREADER_VALNAME[]=             {SCREENREADER_KEY,'O','n',0};
-static const WCHAR DESKWALLPAPER_VALNAME[]=            {DESKTOP_KEY,'W','a','l','l','p','a','p','e','r',0};
-static const WCHAR DESKPATTERN_VALNAME[]=              {DESKTOP_KEY,'P','a','t','t','e','r','n',0};
-static const WCHAR FONTSMOOTHING_VALNAME[]=            {DESKTOP_KEY,'F','o','n','t','S','m','o','o','t','h','i','n','g',0};
-static const WCHAR DRAGWIDTH_VALNAME[]=                {DESKTOP_KEY,'D','r','a','g','W','i','d','t','h',0};
-static const WCHAR DRAGHEIGHT_VALNAME[]=               {DESKTOP_KEY,'D','r','a','g','H','e','i','g','h','t',0};
-static const WCHAR DPISCALINGVER_VALNAME[]=            {DESKTOP_KEY,'D','p','i','S','c','a','l','i','n','g','V','e','r',0};
-static const WCHAR LOGPIXELS_VALNAME[]=                {DESKTOP_KEY,'L','o','g','P','i','x','e','l','s',0};
-static const WCHAR LOWPOWERACTIVE_VALNAME[]=           {DESKTOP_KEY,'L','o','w','P','o','w','e','r','A','c','t','i','v','e',0};
-static const WCHAR POWEROFFACTIVE_VALNAME[]=           {DESKTOP_KEY,'P','o','w','e','r','O','f','f','A','c','t','i','v','e',0};
-static const WCHAR USERPREFERENCESMASK_VALNAME[]=      {DESKTOP_KEY,'U','s','e','r','P','r','e','f','e','r','e','n','c','e','s','M','a','s','k',0};
-static const WCHAR MOUSEHOVERWIDTH_VALNAME[]=          {MOUSE_KEY,'M','o','u','s','e','H','o','v','e','r','W','i','d','t','h',0};
-static const WCHAR MOUSEHOVERHEIGHT_VALNAME[]=         {MOUSE_KEY,'M','o','u','s','e','H','o','v','e','r','H','e','i','g','h','t',0};
-static const WCHAR MOUSEHOVERTIME_VALNAME[]=           {MOUSE_KEY,'M','o','u','s','e','H','o','v','e','r','T','i','m','e',0};
-static const WCHAR WHEELSCROLLCHARS_VALNAME[]=         {DESKTOP_KEY,'W','h','e','e','l','S','c','r','o','l','l','C','h','a','r','s',0};
-static const WCHAR WHEELSCROLLLINES_VALNAME[]=         {DESKTOP_KEY,'W','h','e','e','l','S','c','r','o','l','l','L','i','n','e','s',0};
-static const WCHAR ACTIVEWINDOWTRACKING_VALNAME[]=     {MOUSE_KEY,'A','c','t','i','v','e','W','i','n','d','o','w','T','r','a','c','k','i','n','g',0};
-static const WCHAR MENUSHOWDELAY_VALNAME[]=            {DESKTOP_KEY,'M','e','n','u','S','h','o','w','D','e','l','a','y',0};
-static const WCHAR BLOCKSENDINPUTRESETS_VALNAME[]=     {DESKTOP_KEY,'B','l','o','c','k','S','e','n','d','I','n','p','u','t','R','e','s','e','t','s',0};
-static const WCHAR FOREGROUNDLOCKTIMEOUT_VALNAME[]=    {DESKTOP_KEY,'F','o','r','e','g','r','o','u','n','d','L','o','c','k','T','i','m','e','o','u','t',0};
-static const WCHAR ACTIVEWNDTRKTIMEOUT_VALNAME[]=      {DESKTOP_KEY,'A','c','t','i','v','e','W','n','d','T','r','a','c','k','T','i','m','e','o','u','t',0};
-static const WCHAR FOREGROUNDFLASHCOUNT_VALNAME[]=     {DESKTOP_KEY,'F','o','r','e','g','r','o','u','n','d','F','l','a','s','h','C','o','u','n','t',0};
-static const WCHAR CARETWIDTH_VALNAME[]=               {DESKTOP_KEY,'C','a','r','e','t','W','i','d','t','h',0};
-static const WCHAR MOUSECLICKLOCKTIME_VALNAME[]=       {DESKTOP_KEY,'C','l','i','c','k','L','o','c','k','T','i','m','e',0};
-static const WCHAR MOUSESPEED_VALNAME[]=               {MOUSE_KEY,'M','o','u','s','e','S','e','n','s','i','t','i','v','i','t','y',0};
-static const WCHAR FONTSMOOTHINGTYPE_VALNAME[]=        {DESKTOP_KEY,'F','o','n','t','S','m','o','o','t','h','i','n','g','T','y','p','e',0};
-static const WCHAR FONTSMOOTHINGCONTRAST_VALNAME[]=    {DESKTOP_KEY,'F','o','n','t','S','m','o','o','t','h','i','n','g','G','a','m','m','a',0};
-static const WCHAR FONTSMOOTHINGORIENTATION_VALNAME[]= {DESKTOP_KEY,'F','o','n','t','S','m','o','o','t','h','i','n','g','O','r','i','e','n','t','a','t','i','o','n',0};
-static const WCHAR FOCUSBORDERWIDTH_VALNAME[]=         {DESKTOP_KEY,'F','o','c','u','s','B','o','r','d','e','r','W','i','d','t','h',0};
-static const WCHAR FOCUSBORDERHEIGHT_VALNAME[]=        {DESKTOP_KEY,'F','o','c','u','s','B','o','r','d','e','r','H','e','i','g','h','t',0};
-static const WCHAR SCROLLWIDTH_VALNAME[]=              {METRICS_KEY,'S','c','r','o','l','l','W','i','d','t','h',0};
-static const WCHAR SCROLLHEIGHT_VALNAME[]=             {METRICS_KEY,'S','c','r','o','l','l','H','e','i','g','h','t',0};
-static const WCHAR CAPTIONWIDTH_VALNAME[]=             {METRICS_KEY,'C','a','p','t','i','o','n','W','i','d','t','h',0};
-static const WCHAR CAPTIONHEIGHT_VALNAME[]=            {METRICS_KEY,'C','a','p','t','i','o','n','H','e','i','g','h','t',0};
-static const WCHAR SMCAPTIONWIDTH_VALNAME[]=           {METRICS_KEY,'S','m','C','a','p','t','i','o','n','W','i','d','t','h',0};
-static const WCHAR SMCAPTIONHEIGHT_VALNAME[]=          {METRICS_KEY,'S','m','C','a','p','t','i','o','n','H','e','i','g','h','t',0};
-static const WCHAR MENUWIDTH_VALNAME[]=                {METRICS_KEY,'M','e','n','u','W','i','d','t','h',0};
-static const WCHAR MENUHEIGHT_VALNAME[]=               {METRICS_KEY,'M','e','n','u','H','e','i','g','h','t',0};
-static const WCHAR PADDEDBORDERWIDTH_VALNAME[]=        {METRICS_KEY,'P','a','d','d','e','d','B','o','r','d','e','r','W','i','d','t','h',0};
-static const WCHAR CAPTIONLOGFONT_VALNAME[]=           {METRICS_KEY,'C','a','p','t','i','o','n','F','o','n','t',0};
-static const WCHAR SMCAPTIONLOGFONT_VALNAME[]=         {METRICS_KEY,'S','m','C','a','p','t','i','o','n','F','o','n','t',0};
-static const WCHAR MENULOGFONT_VALNAME[]=              {METRICS_KEY,'M','e','n','u','F','o','n','t',0};
-static const WCHAR MESSAGELOGFONT_VALNAME[]=           {METRICS_KEY,'M','e','s','s','a','g','e','F','o','n','t',0};
-static const WCHAR STATUSLOGFONT_VALNAME[]=            {METRICS_KEY,'S','t','a','t','u','s','F','o','n','t',0};
-static const WCHAR MINWIDTH_VALNAME[] =                {METRICS_KEY,'M','i','n','W','i','d','t','h',0};
-static const WCHAR MINHORZGAP_VALNAME[] =              {METRICS_KEY,'M','i','n','H','o','r','z','G','a','p',0};
-static const WCHAR MINVERTGAP_VALNAME[] =              {METRICS_KEY,'M','i','n','V','e','r','t','G','a','p',0};
-static const WCHAR MINARRANGE_VALNAME[] =              {METRICS_KEY,'M','i','n','A','r','r','a','n','g','e',0};
-static const WCHAR COLOR_SCROLLBAR_VALNAME[] =         {COLORS_KEY,'S','c','r','o','l','l','b','a','r',0};
-static const WCHAR COLOR_BACKGROUND_VALNAME[] =        {COLORS_KEY,'B','a','c','k','g','r','o','u','n','d',0};
-static const WCHAR COLOR_ACTIVECAPTION_VALNAME[] =     {COLORS_KEY,'A','c','t','i','v','e','T','i','t','l','e',0};
-static const WCHAR COLOR_INACTIVECAPTION_VALNAME[] =   {COLORS_KEY,'I','n','a','c','t','i','v','e','T','i','t','l','e',0};
-static const WCHAR COLOR_MENU_VALNAME[] =              {COLORS_KEY,'M','e','n','u',0};
-static const WCHAR COLOR_WINDOW_VALNAME[] =            {COLORS_KEY,'W','i','n','d','o','w',0};
-static const WCHAR COLOR_WINDOWFRAME_VALNAME[] =       {COLORS_KEY,'W','i','n','d','o','w','F','r','a','m','e',0};
-static const WCHAR COLOR_MENUTEXT_VALNAME[] =          {COLORS_KEY,'M','e','n','u','T','e','x','t',0};
-static const WCHAR COLOR_WINDOWTEXT_VALNAME[] =        {COLORS_KEY,'W','i','n','d','o','w','T','e','x','t',0};
-static const WCHAR COLOR_CAPTIONTEXT_VALNAME[] =       {COLORS_KEY,'T','i','t','l','e','T','e','x','t',0};
-static const WCHAR COLOR_ACTIVEBORDER_VALNAME[] =      {COLORS_KEY,'A','c','t','i','v','e','B','o','r','d','e','r',0};
-static const WCHAR COLOR_INACTIVEBORDER_VALNAME[] =    {COLORS_KEY,'I','n','a','c','t','i','v','e','B','o','r','d','e','r',0};
-static const WCHAR COLOR_APPWORKSPACE_VALNAME[] =      {COLORS_KEY,'A','p','p','W','o','r','k','S','p','a','c','e',0};
-static const WCHAR COLOR_HIGHLIGHT_VALNAME[] =         {COLORS_KEY,'H','i','l','i','g','h','t',0};
-static const WCHAR COLOR_HIGHLIGHTTEXT_VALNAME[] =     {COLORS_KEY,'H','i','l','i','g','h','t','T','e','x','t',0};
-static const WCHAR COLOR_BTNFACE_VALNAME[] =           {COLORS_KEY,'B','u','t','t','o','n','F','a','c','e',0};
-static const WCHAR COLOR_BTNSHADOW_VALNAME[] =         {COLORS_KEY,'B','u','t','t','o','n','S','h','a','d','o','w',0};
-static const WCHAR COLOR_GRAYTEXT_VALNAME[] =          {COLORS_KEY,'G','r','a','y','T','e','x','t',0};
-static const WCHAR COLOR_BTNTEXT_VALNAME[] =           {COLORS_KEY,'B','u','t','t','o','n','T','e','x','t',0};
-static const WCHAR COLOR_INACTIVECAPTIONTEXT_VALNAME[] = {COLORS_KEY,'I','n','a','c','t','i','v','e','T','i','t','l','e','T','e','x','t',0};
-static const WCHAR COLOR_BTNHIGHLIGHT_VALNAME[] =      {COLORS_KEY,'B','u','t','t','o','n','H','i','l','i','g','h','t',0};
-static const WCHAR COLOR_3DDKSHADOW_VALNAME[] =        {COLORS_KEY,'B','u','t','t','o','n','D','k','S','h','a','d','o','w',0};
-static const WCHAR COLOR_3DLIGHT_VALNAME[] =           {COLORS_KEY,'B','u','t','t','o','n','L','i','g','h','t',0};
-static const WCHAR COLOR_INFOTEXT_VALNAME[] =          {COLORS_KEY,'I','n','f','o','T','e','x','t',0};
-static const WCHAR COLOR_INFOBK_VALNAME[] =            {COLORS_KEY,'I','n','f','o','W','i','n','d','o','w',0};
-static const WCHAR COLOR_ALTERNATEBTNFACE_VALNAME[] =  {COLORS_KEY,'B','u','t','t','o','n','A','l','t','e','r','n','a','t','e','F','a','c','e',0};
-static const WCHAR COLOR_HOTLIGHT_VALNAME[] =          {COLORS_KEY,'H','o','t','T','r','a','c','k','i','n','g','C','o','l','o','r',0};
-static const WCHAR COLOR_GRADIENTACTIVECAPTION_VALNAME[] = {COLORS_KEY,'G','r','a','d','i','e','n','t','A','c','t','i','v','e','T','i','t','l','e',0};
-static const WCHAR COLOR_GRADIENTINACTIVECAPTION_VALNAME[] = {COLORS_KEY,'G','r','a','d','i','e','n','t','I','n','a','c','t','i','v','e','T','i','t','l','e',0};
-static const WCHAR COLOR_MENUHILIGHT_VALNAME[] =       {COLORS_KEY,'M','e','n','u','H','i','l','i','g','h','t',0};
-static const WCHAR COLOR_MENUBAR_VALNAME[] =           {COLORS_KEY,'M','e','n','u','B','a','r',0};
-static const WCHAR AUDIODESC_LOCALE_VALNAME[] =        {AUDIODESC_KEY,'L','o','c','a','l','e',0};
-static const WCHAR AUDIODESC_ON_VALNAME[] =            {AUDIODESC_KEY,'O','n',0};
-
-/* FIXME - real value */
-static const WCHAR SCREENSAVERRUNNING_VALNAME[]=  {DESKTOP_KEY,'W','I','N','E','_','S','c','r','e','e','n','S','a','v','e','r','R','u','n','n','i','n','g',0};
-
 DEFINE_DEVPROPKEY(DEVPROPKEY_GPU_LUID, 0x60b193cb, 0x5276, 0x4d0f, 0x96, 0xfc, 0xf1, 0x73, 0xab, 0xad, 0x3e, 0xc6, 2);
 DEFINE_DEVPROPKEY(DEVPROPKEY_MONITOR_GPU_LUID, 0xca085853, 0x16ce, 0x48aa, 0xb1, 0x14, 0xde, 0x9c, 0x72, 0x33, 0x42, 0x23, 1);
 DEFINE_DEVPROPKEY(DEVPROPKEY_MONITOR_OUTPUT_ID, 0xca085853, 0x16ce, 0x48aa, 0xb1, 0x14, 0xde, 0x9c, 0x72, 0x33, 0x42, 0x23, 2);
@@ -263,12 +149,14 @@ union sysparam_all_entry;
 
 struct sysparam_entry
 {
-    BOOL       (*get)( union sysparam_all_entry *entry, UINT int_param, void *ptr_param, UINT dpi );
-    BOOL       (*set)( union sysparam_all_entry *entry, UINT int_param, void *ptr_param, UINT flags );
-    BOOL       (*init)( union sysparam_all_entry *entry );
-    const WCHAR *regval;
-    const WCHAR *mirror;
-    BOOL         loaded;
+    BOOL             (*get)( union sysparam_all_entry *entry, UINT int_param, void *ptr_param, UINT dpi );
+    BOOL             (*set)( union sysparam_all_entry *entry, UINT int_param, void *ptr_param, UINT flags );
+    BOOL             (*init)( union sysparam_all_entry *entry );
+    enum parameter_key base_key;
+    const WCHAR       *regval;
+    enum parameter_key mirror_key;
+    const WCHAR       *mirror;
+    BOOL               loaded;
 };
 
 struct sysparam_uint_entry
@@ -594,13 +482,13 @@ static DWORD load_entry( struct sysparam_entry *entry, void *data, DWORD size )
     DWORD type, count;
     HKEY base_key, volatile_key;
 
-    if (!get_base_keys( entry->regval[0], &base_key, &volatile_key )) return FALSE;
+    if (!get_base_keys( entry->base_key, &base_key, &volatile_key )) return FALSE;
 
     count = size;
-    if (RegQueryValueExW( volatile_key, entry->regval + 1, NULL, &type, data, &count ))
+    if (RegQueryValueExW( volatile_key, entry->regval, NULL, &type, data, &count ))
     {
         count = size;
-        if (RegQueryValueExW( base_key, entry->regval + 1, NULL, &type, data, &count )) count = 0;
+        if (RegQueryValueExW( base_key, entry->regval, NULL, &type, data, &count )) count = 0;
     }
     /* make sure strings are null-terminated */
     if (size && count == size && type == REG_SZ) ((WCHAR *)data)[count / sizeof(WCHAR) - 1] = 0;
@@ -616,17 +504,17 @@ static BOOL save_entry( const struct sysparam_entry *entry, const void *data, DW
 
     if (flags & SPIF_UPDATEINIFILE)
     {
-        if (!get_base_keys( entry->regval[0], &base_key, &volatile_key )) return FALSE;
-        if (RegSetValueExW( base_key, entry->regval + 1, 0, type, data, size )) return FALSE;
-        RegDeleteValueW( volatile_key, entry->regval + 1 );
+        if (!get_base_keys( entry->base_key, &base_key, &volatile_key )) return FALSE;
+        if (RegSetValueExW( base_key, entry->regval, 0, type, data, size )) return FALSE;
+        RegDeleteValueW( volatile_key, entry->regval );
 
-        if (entry->mirror && get_base_keys( entry->mirror[0], &base_key, NULL ))
-            RegSetValueExW( base_key, entry->mirror + 1, 0, type, data, size );
+        if (entry->mirror && get_base_keys( entry->mirror_key, &base_key, NULL ))
+            RegSetValueExW( base_key, entry->mirror, 0, type, data, size );
     }
     else
     {
-        if (!get_base_keys( entry->regval[0], NULL, &volatile_key )) return FALSE;
-        if (RegSetValueExW( volatile_key, entry->regval + 1, 0, type, data, size )) return FALSE;
+        if (!get_base_keys( entry->base_key, NULL, &volatile_key )) return FALSE;
+        if (RegSetValueExW( volatile_key, entry->regval, 0, type, data, size )) return FALSE;
     }
     return TRUE;
 }
@@ -642,11 +530,11 @@ static BOOL init_entry( struct sysparam_entry *entry, const void *data, DWORD si
 {
     HKEY base_key;
 
-    if (!get_base_keys( entry->regval[0], &base_key, NULL )) return FALSE;
-    if (!RegQueryValueExW( base_key, entry->regval + 1, NULL, NULL, NULL, NULL )) return TRUE;
-    if (RegSetValueExW( base_key, entry->regval + 1, 0, type, data, size )) return FALSE;
-    if (entry->mirror && get_base_keys( entry->mirror[0], &base_key, NULL ))
-        RegSetValueExW( base_key, entry->mirror + 1, 0, type, data, size );
+    if (!get_base_keys( entry->base_key, &base_key, NULL )) return FALSE;
+    if (!RegQueryValueExW( base_key, entry->regval, NULL, NULL, NULL, NULL )) return TRUE;
+    if (RegSetValueExW( base_key, entry->regval, 0, type, data, size )) return FALSE;
+    if (entry->mirror && get_base_keys( entry->mirror_key, &base_key, NULL ))
+        RegSetValueExW( base_key, entry->mirror, 0, type, data, size );
     entry->loaded = TRUE;
     return TRUE;
 }
@@ -1041,8 +929,8 @@ static BOOL get_font_entry( union sysparam_all_entry *entry, UINT int_param, voi
             break;
         default:
             WARN( "Unknown format in key %s value %s\n",
-                  debugstr_w( parameter_key_names[entry->hdr.regval[0]] ),
-                  debugstr_w( entry->hdr.regval + 1 ));
+                  debugstr_w( parameter_key_names[entry->hdr.base_key] ),
+                  debugstr_w( entry->hdr.regval ));
             /* fall through */
         case 0: /* use the default GUI font */
             GetObjectW( GetStockObject( DEFAULT_GUI_FONT ), sizeof(font), &font );
@@ -1218,138 +1106,138 @@ static BOOL set_entry( void *ptr, UINT int_param, void *ptr_param, UINT flags )
     return entry->hdr.set( entry, int_param, ptr_param, flags );
 }
 
-#define UINT_ENTRY(name,val) \
+#define UINT_ENTRY(name,val,base,reg) \
     struct sysparam_uint_entry entry_##name = { { get_uint_entry, set_uint_entry, init_uint_entry, \
-                                                  name ##_VALNAME }, (val) }
+                                                  base, reg }, (val) }
 
-#define UINT_ENTRY_MIRROR(name,val) \
+#define UINT_ENTRY_MIRROR(name,val,base,reg,mirror_base) \
     struct sysparam_uint_entry entry_##name = { { get_uint_entry, set_uint_entry, init_uint_entry, \
-                                                  name ##_VALNAME, name ##_MIRROR }, (val) }
+                                                  base, reg, mirror_base, reg }, (val) }
 
-#define INT_ENTRY(name,val) \
+#define INT_ENTRY(name,val,base,reg) \
     struct sysparam_uint_entry entry_##name = { { get_uint_entry, set_int_entry, init_int_entry, \
-                                                  name ##_VALNAME }, (val) }
+                                                  base, reg }, (val) }
 
-#define BOOL_ENTRY(name,val) \
+#define BOOL_ENTRY(name,val,base,reg) \
     struct sysparam_bool_entry entry_##name = { { get_bool_entry, set_bool_entry, init_bool_entry, \
-                                                  name ##_VALNAME }, (val) }
+                                                  base, reg }, (val) }
 
-#define BOOL_ENTRY_MIRROR(name,val) \
+#define BOOL_ENTRY_MIRROR(name,val,base,reg,mirror_base) \
     struct sysparam_bool_entry entry_##name = { { get_bool_entry, set_bool_entry, init_bool_entry, \
-                                                  name ##_VALNAME, name ##_MIRROR }, (val) }
+                                                  base, reg, mirror_base, reg }, (val) }
 
-#define YESNO_ENTRY(name,val) \
+#define YESNO_ENTRY(name,val,base,reg) \
     struct sysparam_bool_entry entry_##name = { { get_yesno_entry, set_yesno_entry, init_yesno_entry, \
-                                                  name ##_VALNAME }, (val) }
+                                                  base, reg }, (val) }
 
-#define TWIPS_ENTRY(name,val) \
+#define TWIPS_ENTRY(name,val,base,reg) \
     struct sysparam_uint_entry entry_##name = { { get_twips_entry, set_twips_entry, init_int_entry, \
-                                                  name ##_VALNAME }, (val) }
+                                                  base, reg }, (val) }
 
-#define DWORD_ENTRY(name,val) \
+#define DWORD_ENTRY(name,val,base,reg) \
     struct sysparam_dword_entry entry_##name = { { get_dword_entry, set_dword_entry, init_dword_entry, \
-                                                   name ##_VALNAME }, (val) }
+                                                   base, reg }, (val) }
 
-#define BINARY_ENTRY(name,data) \
+#define BINARY_ENTRY(name,data,base,reg) \
     struct sysparam_binary_entry entry_##name = { { get_binary_entry, set_binary_entry, init_binary_entry, \
-                                                    name ##_VALNAME }, data, sizeof(data) }
+                                                    base, reg }, data, sizeof(data) }
 
-#define PATH_ENTRY(name) \
+#define PATH_ENTRY(name,base,reg) \
     struct sysparam_path_entry entry_##name = { { get_path_entry, set_path_entry, init_path_entry, \
-                                                  name ##_VALNAME } }
+                                                  base, reg } }
 
-#define FONT_ENTRY(name,weight) \
+#define FONT_ENTRY(name,weight,base,reg) \
     struct sysparam_font_entry entry_##name = { { get_font_entry, set_font_entry, init_font_entry, \
-                                                  name ##_VALNAME }, (weight) }
+                                                  base, reg }, (weight) }
 
 #define USERPREF_ENTRY(name,offset,mask) \
     struct sysparam_pref_entry entry_##name = { { get_userpref_entry, set_userpref_entry }, \
                                                 &entry_USERPREFERENCESMASK, (offset), (mask) }
 
-static UINT_ENTRY( DRAGWIDTH, 4 );
-static UINT_ENTRY( DRAGHEIGHT, 4 );
-static UINT_ENTRY( DOUBLECLICKTIME, 500 );
-static UINT_ENTRY( FONTSMOOTHING, 2 );
-static UINT_ENTRY( GRIDGRANULARITY, 0 );
-static UINT_ENTRY( KEYBOARDDELAY, 1 );
-static UINT_ENTRY( KEYBOARDSPEED, 31 );
-static UINT_ENTRY( MENUSHOWDELAY, 400 );
-static UINT_ENTRY( MINARRANGE, ARW_HIDE );
-static UINT_ENTRY( MINHORZGAP, 0 );
-static UINT_ENTRY( MINVERTGAP, 0 );
-static UINT_ENTRY( MINWIDTH, 154 );
-static UINT_ENTRY( MOUSEHOVERHEIGHT, 4 );
-static UINT_ENTRY( MOUSEHOVERTIME, 400 );
-static UINT_ENTRY( MOUSEHOVERWIDTH, 4 );
-static UINT_ENTRY( MOUSESPEED, 10 );
-static UINT_ENTRY( MOUSETRAILS, 0 );
-static UINT_ENTRY( SCREENSAVETIMEOUT, 300 );
-static UINT_ENTRY( WHEELSCROLLCHARS, 3 );
-static UINT_ENTRY( WHEELSCROLLLINES, 3 );
-static UINT_ENTRY_MIRROR( DOUBLECLKHEIGHT, 4 );
-static UINT_ENTRY_MIRROR( DOUBLECLKWIDTH, 4 );
-static UINT_ENTRY_MIRROR( MENUDROPALIGNMENT, 0 );
-
-static INT_ENTRY( MOUSETHRESHOLD1, 6 );
-static INT_ENTRY( MOUSETHRESHOLD2, 10 );
-static INT_ENTRY( MOUSEACCELERATION, 1 );
-
-static BOOL_ENTRY( BLOCKSENDINPUTRESETS, FALSE );
-static BOOL_ENTRY( DRAGFULLWINDOWS, FALSE );
-static BOOL_ENTRY( KEYBOARDPREF, TRUE );
-static BOOL_ENTRY( LOWPOWERACTIVE, FALSE );
-static BOOL_ENTRY( MOUSEBUTTONSWAP, FALSE );
-static BOOL_ENTRY( POWEROFFACTIVE, FALSE );
-static BOOL_ENTRY( SCREENREADER, FALSE );
-static BOOL_ENTRY( SCREENSAVEACTIVE, TRUE );
-static BOOL_ENTRY( SCREENSAVERRUNNING, FALSE );
-static BOOL_ENTRY( SHOWSOUNDS, FALSE );
-static BOOL_ENTRY( SNAPTODEFBUTTON, FALSE );
-static BOOL_ENTRY_MIRROR( ICONTITLEWRAP, TRUE );
-static BOOL_ENTRY( AUDIODESC_ON, FALSE);
-
-static YESNO_ENTRY( BEEP, TRUE );
-
-static TWIPS_ENTRY( BORDER, -15 );
-static TWIPS_ENTRY( CAPTIONHEIGHT, -270 );
-static TWIPS_ENTRY( CAPTIONWIDTH, -270 );
-static TWIPS_ENTRY( ICONHORIZONTALSPACING, -1125 );
-static TWIPS_ENTRY( ICONVERTICALSPACING, -1125 );
-static TWIPS_ENTRY( MENUHEIGHT, -270 );
-static TWIPS_ENTRY( MENUWIDTH, -270 );
-static TWIPS_ENTRY( PADDEDBORDERWIDTH, 0 );
-static TWIPS_ENTRY( SCROLLHEIGHT, -240 );
-static TWIPS_ENTRY( SCROLLWIDTH, -240 );
-static TWIPS_ENTRY( SMCAPTIONHEIGHT, -225 );
-static TWIPS_ENTRY( SMCAPTIONWIDTH, -225 );
-
-static DWORD_ENTRY( ACTIVEWINDOWTRACKING, 0 );
-static DWORD_ENTRY( ACTIVEWNDTRKTIMEOUT, 0 );
-static DWORD_ENTRY( CARETWIDTH, 1 );
-static DWORD_ENTRY( DPISCALINGVER, 0 );
-static DWORD_ENTRY( FOCUSBORDERHEIGHT, 1 );
-static DWORD_ENTRY( FOCUSBORDERWIDTH, 1 );
-static DWORD_ENTRY( FONTSMOOTHINGCONTRAST, 0 );
-static DWORD_ENTRY( FONTSMOOTHINGORIENTATION, FE_FONTSMOOTHINGORIENTATIONRGB );
-static DWORD_ENTRY( FONTSMOOTHINGTYPE, FE_FONTSMOOTHINGSTANDARD );
-static DWORD_ENTRY( FOREGROUNDFLASHCOUNT, 3 );
-static DWORD_ENTRY( FOREGROUNDLOCKTIMEOUT, 0 );
-static DWORD_ENTRY( LOGPIXELS, 0 );
-static DWORD_ENTRY( MOUSECLICKLOCKTIME, 1200 );
-static DWORD_ENTRY( AUDIODESC_LOCALE, 0 );
-
-static PATH_ENTRY( DESKPATTERN );
-static PATH_ENTRY( DESKWALLPAPER );
+static UINT_ENTRY( DRAGWIDTH, 4, DESKTOP_KEY, L"DragWidth" );
+static UINT_ENTRY( DRAGHEIGHT, 4, DESKTOP_KEY, L"DragHeight" );
+static UINT_ENTRY( DOUBLECLICKTIME, 500, MOUSE_KEY, L"DoubleClickSpeed" );
+static UINT_ENTRY( FONTSMOOTHING, 2, DESKTOP_KEY, L"FontSmoothing" );
+static UINT_ENTRY( GRIDGRANULARITY, 0, DESKTOP_KEY, L"GridGranularity" );
+static UINT_ENTRY( KEYBOARDDELAY, 1, KEYBOARD_KEY, L"KeyboardDelay" );
+static UINT_ENTRY( KEYBOARDSPEED, 31, KEYBOARD_KEY, L"KeyboardSpeed" );
+static UINT_ENTRY( MENUSHOWDELAY, 400, DESKTOP_KEY, L"MenuShowDelay" );
+static UINT_ENTRY( MINARRANGE, ARW_HIDE, METRICS_KEY, L"MinArrange" );
+static UINT_ENTRY( MINHORZGAP, 0, METRICS_KEY, L"MinHorzGap" );
+static UINT_ENTRY( MINVERTGAP, 0, METRICS_KEY, L"MinVertGap" );
+static UINT_ENTRY( MINWIDTH, 154, METRICS_KEY, L"MinWidth" );
+static UINT_ENTRY( MOUSEHOVERHEIGHT, 4, MOUSE_KEY, L"MouseHoverHeight" );
+static UINT_ENTRY( MOUSEHOVERTIME, 400, MOUSE_KEY, L"MouseHoverTime" );
+static UINT_ENTRY( MOUSEHOVERWIDTH, 4, MOUSE_KEY, L"MouseHoverWidth" );
+static UINT_ENTRY( MOUSESPEED, 10, MOUSE_KEY, L"MouseSensitivity" );
+static UINT_ENTRY( MOUSETRAILS, 0, MOUSE_KEY, L"MouseTrails" );
+static UINT_ENTRY( SCREENSAVETIMEOUT, 300, DESKTOP_KEY, L"ScreenSaveTimeOut" );
+static UINT_ENTRY( WHEELSCROLLCHARS, 3, DESKTOP_KEY, L"WheelScrollChars" );
+static UINT_ENTRY( WHEELSCROLLLINES, 3, DESKTOP_KEY, L"WheelScrollLines" );
+static UINT_ENTRY_MIRROR( DOUBLECLKHEIGHT, 4, MOUSE_KEY, L"DoubleClickHeight", DESKTOP_KEY );
+static UINT_ENTRY_MIRROR( DOUBLECLKWIDTH, 4, MOUSE_KEY, L"DoubleClickWidth", DESKTOP_KEY );
+static UINT_ENTRY_MIRROR( MENUDROPALIGNMENT, 0, DESKTOP_KEY, L"MenuDropAlignment", VERSION_KEY );
+
+static INT_ENTRY( MOUSETHRESHOLD1, 6, MOUSE_KEY, L"MouseThreshold1" );
+static INT_ENTRY( MOUSETHRESHOLD2, 10, MOUSE_KEY, L"MouseThreshold2" );
+static INT_ENTRY( MOUSEACCELERATION, 1, MOUSE_KEY, L"MouseSpeed" );
+
+static BOOL_ENTRY( BLOCKSENDINPUTRESETS, FALSE, DESKTOP_KEY, L"BlockSendInputResets" );
+static BOOL_ENTRY( DRAGFULLWINDOWS, FALSE, DESKTOP_KEY, L"DragFullWindows" );
+static BOOL_ENTRY( KEYBOARDPREF, TRUE, KEYBOARDPREF_KEY, L"On" );
+static BOOL_ENTRY( LOWPOWERACTIVE, FALSE, DESKTOP_KEY, L"LowPowerActive" );
+static BOOL_ENTRY( MOUSEBUTTONSWAP, FALSE, MOUSE_KEY, L"SwapMouseButtons" );
+static BOOL_ENTRY( POWEROFFACTIVE, FALSE, DESKTOP_KEY, L"PowerOffActive" );
+static BOOL_ENTRY( SCREENREADER, FALSE, SCREENREADER_KEY, L"On" );
+static BOOL_ENTRY( SCREENSAVEACTIVE, TRUE, DESKTOP_KEY, L"ScreenSaveActive" );
+static BOOL_ENTRY( SCREENSAVERRUNNING, FALSE, DESKTOP_KEY, L"WINE_ScreenSaverRunning" ); /* FIXME - real value */
+static BOOL_ENTRY( SHOWSOUNDS, FALSE, SHOWSOUNDS_KEY, L"On" );
+static BOOL_ENTRY( SNAPTODEFBUTTON, FALSE, MOUSE_KEY, L"SnapToDefaultButton" );
+static BOOL_ENTRY_MIRROR( ICONTITLEWRAP, TRUE, DESKTOP_KEY, L"IconTitleWrap", METRICS_KEY );
+static BOOL_ENTRY( AUDIODESC_ON, FALSE, AUDIODESC_KEY, L"On" );
+
+static YESNO_ENTRY( BEEP, TRUE, SOUND_KEY, L"Beep" );
+
+static TWIPS_ENTRY( BORDER, -15, METRICS_KEY, L"BorderWidth" );
+static TWIPS_ENTRY( CAPTIONHEIGHT, -270, METRICS_KEY, L"CaptionHeight" );
+static TWIPS_ENTRY( CAPTIONWIDTH, -270, METRICS_KEY, L"CaptionWidth" );
+static TWIPS_ENTRY( ICONHORIZONTALSPACING, -1125, METRICS_KEY, L"IconSpacing" );
+static TWIPS_ENTRY( ICONVERTICALSPACING, -1125, METRICS_KEY, L"IconVerticalSpacing" );
+static TWIPS_ENTRY( MENUHEIGHT, -270, METRICS_KEY, L"MenuHeight" );
+static TWIPS_ENTRY( MENUWIDTH, -270, METRICS_KEY, L"MenuWidth" );
+static TWIPS_ENTRY( PADDEDBORDERWIDTH, 0, METRICS_KEY, L"PaddedBorderWidth" );
+static TWIPS_ENTRY( SCROLLHEIGHT, -240, METRICS_KEY, L"ScrollHeight" );
+static TWIPS_ENTRY( SCROLLWIDTH, -240, METRICS_KEY, L"ScrollWidth" );
+static TWIPS_ENTRY( SMCAPTIONHEIGHT, -225, METRICS_KEY, L"SmCaptionHeight" );
+static TWIPS_ENTRY( SMCAPTIONWIDTH, -225, METRICS_KEY, L"SmCaptionWidth" );
+
+static DWORD_ENTRY( ACTIVEWINDOWTRACKING, 0, MOUSE_KEY, L"ActiveWindowTracking" );
+static DWORD_ENTRY( ACTIVEWNDTRKTIMEOUT, 0, DESKTOP_KEY, L"ActiveWndTrackTimeout" );
+static DWORD_ENTRY( CARETWIDTH, 1, DESKTOP_KEY, L"CaretWidth" );
+static DWORD_ENTRY( DPISCALINGVER, 0, DESKTOP_KEY, L"DpiScalingVer" );
+static DWORD_ENTRY( FOCUSBORDERHEIGHT, 1, DESKTOP_KEY, L"FocusBorderHeight" );
+static DWORD_ENTRY( FOCUSBORDERWIDTH, 1, DESKTOP_KEY, L"FocusBorderWidth" );
+static DWORD_ENTRY( FONTSMOOTHINGCONTRAST, 0, DESKTOP_KEY, L"FontSmoothingGamma" );
+static DWORD_ENTRY( FONTSMOOTHINGORIENTATION, FE_FONTSMOOTHINGORIENTATIONRGB, DESKTOP_KEY, L"FontSmoothingOrientation" );
+static DWORD_ENTRY( FONTSMOOTHINGTYPE, FE_FONTSMOOTHINGSTANDARD, DESKTOP_KEY, L"FontSmoothingType" );
+static DWORD_ENTRY( FOREGROUNDFLASHCOUNT, 3, DESKTOP_KEY, L"ForegroundFlashCount" );
+static DWORD_ENTRY( FOREGROUNDLOCKTIMEOUT, 0, DESKTOP_KEY, L"ForegroundLockTimeout" );
+static DWORD_ENTRY( LOGPIXELS, 0, DESKTOP_KEY, L"LogPixels" );
+static DWORD_ENTRY( MOUSECLICKLOCKTIME, 1200, DESKTOP_KEY, L"ClickLockTime" );
+static DWORD_ENTRY( AUDIODESC_LOCALE, 0, AUDIODESC_KEY, L"Locale" );
+
+static PATH_ENTRY( DESKPATTERN, DESKTOP_KEY, L"Pattern" );
+static PATH_ENTRY( DESKWALLPAPER, DESKTOP_KEY, L"Wallpaper" );
 
 static BYTE user_prefs[8] = { 0x30, 0x00, 0x00, 0x80, 0x12, 0x00, 0x00, 0x00 };
-static BINARY_ENTRY( USERPREFERENCESMASK, user_prefs );
+static BINARY_ENTRY( USERPREFERENCESMASK, user_prefs, DESKTOP_KEY, L"UserPreferencesMask" );
 
-static FONT_ENTRY( CAPTIONLOGFONT, FW_BOLD );
-static FONT_ENTRY( ICONTITLELOGFONT, FW_NORMAL );
-static FONT_ENTRY( MENULOGFONT, FW_NORMAL );
-static FONT_ENTRY( MESSAGELOGFONT, FW_NORMAL );
-static FONT_ENTRY( SMCAPTIONLOGFONT, FW_NORMAL );
-static FONT_ENTRY( STATUSLOGFONT, FW_NORMAL );
+static FONT_ENTRY( CAPTIONLOGFONT, FW_BOLD, METRICS_KEY, L"CaptionFont" );
+static FONT_ENTRY( ICONTITLELOGFONT, FW_NORMAL, METRICS_KEY, L"IconFont" );
+static FONT_ENTRY( MENULOGFONT, FW_NORMAL, METRICS_KEY, L"MenuFont" );
+static FONT_ENTRY( MESSAGELOGFONT, FW_NORMAL, METRICS_KEY, L"MessageFont" );
+static FONT_ENTRY( SMCAPTIONLOGFONT, FW_NORMAL, METRICS_KEY, L"SmCaptionFont" );
+static FONT_ENTRY( STATUSLOGFONT, FW_NORMAL, METRICS_KEY, L"StatusFont" );
 
 static USERPREF_ENTRY( MENUANIMATION,            0, 0x02 );
 static USERPREF_ENTRY( COMBOBOXANIMATION,        0, 0x04 );
@@ -1376,38 +1264,38 @@ static USERPREF_ENTRY( SPEECHRECOGNITION,        4, 0x20 );
 
 static struct sysparam_rgb_entry system_colors[] =
 {
-#define RGB_ENTRY(name,val) { { get_rgb_entry, set_rgb_entry, init_rgb_entry, name ##_VALNAME }, (val) }
-    RGB_ENTRY( COLOR_SCROLLBAR, RGB(212, 208, 200) ),
-    RGB_ENTRY( COLOR_BACKGROUND, RGB(58, 110, 165) ),
-    RGB_ENTRY( COLOR_ACTIVECAPTION, RGB(10, 36, 106) ),
-    RGB_ENTRY( COLOR_INACTIVECAPTION, RGB(128, 128, 128) ),
-    RGB_ENTRY( COLOR_MENU, RGB(212, 208, 200) ),
-    RGB_ENTRY( COLOR_WINDOW, RGB(255, 255, 255) ),
-    RGB_ENTRY( COLOR_WINDOWFRAME, RGB(0, 0, 0) ),
-    RGB_ENTRY( COLOR_MENUTEXT, RGB(0, 0, 0) ),
-    RGB_ENTRY( COLOR_WINDOWTEXT, RGB(0, 0, 0) ),
-    RGB_ENTRY( COLOR_CAPTIONTEXT, RGB(255, 255, 255) ),
-    RGB_ENTRY( COLOR_ACTIVEBORDER, RGB(212, 208, 200) ),
-    RGB_ENTRY( COLOR_INACTIVEBORDER, RGB(212, 208, 200) ),
-    RGB_ENTRY( COLOR_APPWORKSPACE, RGB(128, 128, 128) ),
-    RGB_ENTRY( COLOR_HIGHLIGHT, RGB(10, 36, 106) ),
-    RGB_ENTRY( COLOR_HIGHLIGHTTEXT, RGB(255, 255, 255) ),
-    RGB_ENTRY( COLOR_BTNFACE, RGB(212, 208, 200) ),
-    RGB_ENTRY( COLOR_BTNSHADOW, RGB(128, 128, 128) ),
-    RGB_ENTRY( COLOR_GRAYTEXT, RGB(128, 128, 128) ),
-    RGB_ENTRY( COLOR_BTNTEXT, RGB(0, 0, 0) ),
-    RGB_ENTRY( COLOR_INACTIVECAPTIONTEXT, RGB(212, 208, 200) ),
-    RGB_ENTRY( COLOR_BTNHIGHLIGHT, RGB(255, 255, 255) ),
-    RGB_ENTRY( COLOR_3DDKSHADOW, RGB(64, 64, 64) ),
-    RGB_ENTRY( COLOR_3DLIGHT, RGB(212, 208, 200) ),
-    RGB_ENTRY( COLOR_INFOTEXT, RGB(0, 0, 0) ),
-    RGB_ENTRY( COLOR_INFOBK, RGB(255, 255, 225) ),
-    RGB_ENTRY( COLOR_ALTERNATEBTNFACE, RGB(181, 181, 181) ),
-    RGB_ENTRY( COLOR_HOTLIGHT, RGB(0, 0, 200) ),
-    RGB_ENTRY( COLOR_GRADIENTACTIVECAPTION, RGB(166, 202, 240) ),
-    RGB_ENTRY( COLOR_GRADIENTINACTIVECAPTION, RGB(192, 192, 192) ),
-    RGB_ENTRY( COLOR_MENUHILIGHT, RGB(10, 36, 106) ),
-    RGB_ENTRY( COLOR_MENUBAR, RGB(212, 208, 200) )
+#define RGB_ENTRY(name,val,reg) { { get_rgb_entry, set_rgb_entry, init_rgb_entry, COLORS_KEY, reg }, (val) }
+    RGB_ENTRY( COLOR_SCROLLBAR, RGB(212, 208, 200), L"Scrollbar" ),
+    RGB_ENTRY( COLOR_BACKGROUND, RGB(58, 110, 165), L"Background" ),
+    RGB_ENTRY( COLOR_ACTIVECAPTION, RGB(10, 36, 106), L"ActiveTitle" ),
+    RGB_ENTRY( COLOR_INACTIVECAPTION, RGB(128, 128, 128), L"InactiveTitle" ),
+    RGB_ENTRY( COLOR_MENU, RGB(212, 208, 200), L"Menu" ),
+    RGB_ENTRY( COLOR_WINDOW, RGB(255, 255, 255), L"Window" ),
+    RGB_ENTRY( COLOR_WINDOWFRAME, RGB(0, 0, 0), L"WindowFrame" ),
+    RGB_ENTRY( COLOR_MENUTEXT, RGB(0, 0, 0), L"MenuText" ),
+    RGB_ENTRY( COLOR_WINDOWTEXT, RGB(0, 0, 0), L"WindowText" ),
+    RGB_ENTRY( COLOR_CAPTIONTEXT, RGB(255, 255, 255), L"TitleText" ),
+    RGB_ENTRY( COLOR_ACTIVEBORDER, RGB(212, 208, 200), L"ActiveBorder" ),
+    RGB_ENTRY( COLOR_INACTIVEBORDER, RGB(212, 208, 200), L"InactiveBorder" ),
+    RGB_ENTRY( COLOR_APPWORKSPACE, RGB(128, 128, 128), L"AppWorkSpace" ),
+    RGB_ENTRY( COLOR_HIGHLIGHT, RGB(10, 36, 106), L"Hilight" ),
+    RGB_ENTRY( COLOR_HIGHLIGHTTEXT, RGB(255, 255, 255), L"HilightText" ),
+    RGB_ENTRY( COLOR_BTNFACE, RGB(212, 208, 200), L"ButtonFace" ),
+    RGB_ENTRY( COLOR_BTNSHADOW, RGB(128, 128, 128), L"ButtonShadow" ),
+    RGB_ENTRY( COLOR_GRAYTEXT, RGB(128, 128, 128), L"GrayText" ),
+    RGB_ENTRY( COLOR_BTNTEXT, RGB(0, 0, 0), L"ButtonText" ),
+    RGB_ENTRY( COLOR_INACTIVECAPTIONTEXT, RGB(212, 208, 200), L"InactiveTitleText" ),
+    RGB_ENTRY( COLOR_BTNHIGHLIGHT, RGB(255, 255, 255), L"ButtonHilight" ),
+    RGB_ENTRY( COLOR_3DDKSHADOW, RGB(64, 64, 64), L"ButtonDkShadow" ),
+    RGB_ENTRY( COLOR_3DLIGHT, RGB(212, 208, 200), L"ButtonLight" ),
+    RGB_ENTRY( COLOR_INFOTEXT, RGB(0, 0, 0), L"InfoText" ),
+    RGB_ENTRY( COLOR_INFOBK, RGB(255, 255, 225), L"InfoWindow" ),
+    RGB_ENTRY( COLOR_ALTERNATEBTNFACE, RGB(181, 181, 181), L"ButtonAlternateFace" ),
+    RGB_ENTRY( COLOR_HOTLIGHT, RGB(0, 0, 200), L"HotTrackingColor" ),
+    RGB_ENTRY( COLOR_GRADIENTACTIVECAPTION, RGB(166, 202, 240), L"GradientActiveTitle" ),
+    RGB_ENTRY( COLOR_GRADIENTINACTIVECAPTION, RGB(192, 192, 192), L"GradientInactiveTitle" ),
+    RGB_ENTRY( COLOR_MENUHILIGHT, RGB(10, 36, 106), L"MenuHilight" ),
+    RGB_ENTRY( COLOR_MENUBAR, RGB(212, 208, 200), L"MenuBar" )
 #undef RGB_ENTRY
 };
 
 
