diff --git a/patches/wow64cpu-Wow64Transition/0002-ntdll-Add-a-stub-implementation-of-Wow64Transition.patch b/patches/wow64cpu-Wow64Transition/0002-ntdll-Add-a-stub-implementation-of-Wow64Transition.patch
index ec9de02f7..f5c5c6c58 100644
--- a/patches/wow64cpu-Wow64Transition/0002-ntdll-Add-a-stub-implementation-of-Wow64Transition.patch
+++ b/patches/wow64cpu-Wow64Transition/0002-ntdll-Add-a-stub-implementation-of-Wow64Transition.patch
@@ -1,18 +1,18 @@
-From 8281eb9d4c2c5d20a336fda58c5bf1e603f05590 Mon Sep 17 00:00:00 2001
+From 384a965d9dd8ad2d946682e45c409795bba292a2 Mon Sep 17 00:00:00 2001
 From: Zebediah Figura <z.figura12@gmail.com>
 Date: Wed, 8 Aug 2018 20:00:15 -0500
 Subject: [PATCH] ntdll: Add a stub implementation of Wow64Transition.
 
 ---
- dlls/ntdll/loader.c   | 11 ++++++++++-
+ dlls/ntdll/loader.c   | 13 ++++++++++++-
  dlls/ntdll/ntdll.spec |  1 +
- 2 files changed, 11 insertions(+), 1 deletion(-)
+ 2 files changed, 13 insertions(+), 1 deletion(-)
 
 diff --git a/dlls/ntdll/loader.c b/dlls/ntdll/loader.c
-index 92ae87c6e6d..533bad12103 100644
+index 42b681e4cd3..c8cdf4f5436 100644
 --- a/dlls/ntdll/loader.c
 +++ b/dlls/ntdll/loader.c
-@@ -4322,6 +4322,7 @@ NTSTATUS WINAPI NtLoadDriver( const UNICODE_STRING *DriverServiceName )
+@@ -4324,6 +4324,7 @@ NTSTATUS WINAPI NtLoadDriver( const UNICODE_STRING *DriverServiceName )
      return STATUS_NOT_IMPLEMENTED;
  }
  
@@ -20,11 +20,13 @@ index 92ae87c6e6d..533bad12103 100644
  
  /***********************************************************************
   *           NtUnloadDriver   (NTDLL.@)
-@@ -4380,13 +4381,14 @@ void __wine_process_init(void)
+@@ -4382,13 +4383,16 @@ void __wine_process_init(void)
      static const WCHAR ntdllW[] = {'\\','?','?','\\','C',':','\\','w','i','n','d','o','w','s','\\',
                                     's','y','s','t','e','m','3','2','\\',
                                     'n','t','d','l','l','.','d','l','l',0};
-+    static const WCHAR wow64cpuW[] = {'w','o','w','6','4','c','p','u','.','d','l','l',0};
++    static const WCHAR wow64cpuW[] = {'\\','?','?','\\','C',':','\\','w','i','n','d','o','w','s','\\',
++                                      's','y','s','t','e','m','3','2','\\',
++                                      'w','o','w','6','4','c','p','u','.','d','l','l',0};
      static const WCHAR kernel32W[] = {'\\','?','?','\\','C',':','\\','w','i','n','d','o','w','s','\\',
                                        's','y','s','t','e','m','3','2','\\',
                                        'k','e','r','n','e','l','3','2','.','d','l','l',0};
@@ -36,7 +38,7 @@ index 92ae87c6e6d..533bad12103 100644
      NTSTATUS status;
      ANSI_STRING func_name;
      UNICODE_STRING nt_name;
-@@ -4429,6 +4431,13 @@ void __wine_process_init(void)
+@@ -4431,6 +4435,13 @@ void __wine_process_init(void)
          MESSAGE( "wine: could not load kernel32.dll, status %x\n", status );
          exit(1);
      }
@@ -51,10 +53,10 @@ index 92ae87c6e6d..533bad12103 100644
      if ((status = LdrGetProcedureAddress( wm->ldr.DllBase, &func_name,
                                            0, (void **)&kernel32_start_process )) != STATUS_SUCCESS)
 diff --git a/dlls/ntdll/ntdll.spec b/dlls/ntdll/ntdll.spec
-index 05e46bd1b3d..c24889479a4 100644
+index e313d5807b3..b20ded3d108 100644
 --- a/dlls/ntdll/ntdll.spec
 +++ b/dlls/ntdll/ntdll.spec
-@@ -1111,6 +1111,7 @@
+@@ -1112,6 +1112,7 @@
  @ stdcall WinSqmIsOptedIn()
  @ stdcall WinSqmSetDWORD(ptr long long)
  @ stdcall WinSqmStartSession(ptr long long)

diff --git a/patches/ntdll-Syscall_Emulation/0001-ntdll-Support-x86_64-syscall-emulation.patch b/patches/ntdll-Syscall_Emulation/0001-ntdll-Support-x86_64-syscall-emulation.patch
index f7c6526f1..6aaf9caad 100644
--- a/patches/ntdll-Syscall_Emulation/0001-ntdll-Support-x86_64-syscall-emulation.patch
+++ b/patches/ntdll-Syscall_Emulation/0001-ntdll-Support-x86_64-syscall-emulation.patch
@@ -1,4 +1,4 @@
-From 7ac261609be678c827b32e36656a56d77e729fcc Mon Sep 17 00:00:00 2001
+From a660effad7b09d7333aa46f9bbef45eb4c1bed3d Mon Sep 17 00:00:00 2001
 From: Paul Gofman <pgofman@codeweavers.com>
 Date: Mon, 30 Dec 2019 13:27:53 +0300
 Subject: [PATCH] ntdll: Support x86_64 syscall emulation.
@@ -13,13 +13,13 @@ is used for trapping syscalls.
  dlls/ntdll/thread.c             |   8 ++-
  dlls/ntdll/unix/signal_x86_64.c | 105 ++++++++++++++++++++++++++++++++
  dlls/ntdll/unix/thread.c        |   8 ++-
- dlls/ntdll/unix/unix_private.h  |   5 +-
+ dlls/ntdll/unix/unix_private.h  |   6 +-
  dlls/ntdll/unixlib.h            |   3 +-
  tools/winebuild/spec32.c        |   9 ++-
- 7 files changed, 133 insertions(+), 6 deletions(-)
+ 7 files changed, 134 insertions(+), 6 deletions(-)
 
 diff --git a/configure.ac b/configure.ac
-index 5418d1aa7329..d82069e74574 100644
+index 5418d1aa732..d82069e7457 100644
 --- a/configure.ac
 +++ b/configure.ac
 @@ -474,6 +474,7 @@ AC_CHECK_HEADERS(\
@@ -31,7 +31,7 @@ index 5418d1aa7329..d82069e74574 100644
  	linux/types.h \
  	linux/ucdrom.h \
 diff --git a/dlls/ntdll/thread.c b/dlls/ntdll/thread.c
-index a14e3a12ae0c..a0411446e243 100644
+index a14e3a12ae0..a0411446e24 100644
 --- a/dlls/ntdll/thread.c
 +++ b/dlls/ntdll/thread.c
 @@ -229,6 +229,12 @@ void __wine_syscall_dispatcher( void )
@@ -57,7 +57,7 @@ index a14e3a12ae0c..a0411446e243 100644
  
      peb = teb->Peb;
 diff --git a/dlls/ntdll/unix/signal_x86_64.c b/dlls/ntdll/unix/signal_x86_64.c
-index 1d1b879310ee..c8a8d1d1d33d 100644
+index 1d1b879310e..c8a8d1d1d33 100644
 --- a/dlls/ntdll/unix/signal_x86_64.c
 +++ b/dlls/ntdll/unix/signal_x86_64.c
 @@ -28,6 +28,7 @@
@@ -194,7 +194,7 @@ index 1d1b879310ee..c8a8d1d1d33d 100644
  
   error:
 diff --git a/dlls/ntdll/unix/thread.c b/dlls/ntdll/unix/thread.c
-index e1da90222d38..91e1596ddcba 100644
+index e1da90222d3..91e1596ddcb 100644
 --- a/dlls/ntdll/unix/thread.c
 +++ b/dlls/ntdll/unix/thread.c
 @@ -58,6 +58,9 @@ WINE_DEFAULT_DEBUG_CHANNEL(seh);
@@ -227,10 +227,10 @@ index e1da90222d38..91e1596ddcba 100644
      teb = virtual_alloc_first_teb();
      teb->WOW32Reserved = syscall_handler;
 diff --git a/dlls/ntdll/unix/unix_private.h b/dlls/ntdll/unix/unix_private.h
-index d06f366d3c6d..4e1bdbcc5094 100644
+index 75594832572..e42fa44f9a0 100644
 --- a/dlls/ntdll/unix/unix_private.h
 +++ b/dlls/ntdll/unix/unix_private.h
-@@ -108,7 +108,8 @@ extern void CDECL server_release_fd( HANDLE handle, int unix_fd ) DECLSPEC_HIDDE
+@@ -112,7 +112,8 @@ extern void CDECL server_release_fd( HANDLE handle, int unix_fd ) DECLSPEC_HIDDE
  extern void CDECL server_init_process_done( void *relay ) DECLSPEC_HIDDEN;
  extern TEB * CDECL init_threading( int *nb_threads_ptr, struct ldt_copy **ldt_copy, SIZE_T *size,
                                     BOOL *suspend, unsigned int *cpus, BOOL *wow64,
@@ -240,20 +240,21 @@ index d06f366d3c6d..4e1bdbcc5094 100644
  extern void CDECL DECLSPEC_NORETURN exit_thread( int status ) DECLSPEC_HIDDEN;
  extern void CDECL DECLSPEC_NORETURN exit_process( int status ) DECLSPEC_HIDDEN;
  extern NTSTATUS CDECL get_thread_ldt_entry( HANDLE handle, void *data, ULONG len, ULONG *ret_len ) DECLSPEC_HIDDEN;
-@@ -123,6 +124,8 @@ extern timeout_t server_start_time DECLSPEC_HIDDEN;
- extern sigset_t server_block_set DECLSPEC_HIDDEN;
- extern SIZE_T signal_stack_size DECLSPEC_HIDDEN;
- extern SIZE_T signal_stack_mask DECLSPEC_HIDDEN;
+@@ -132,6 +133,9 @@ extern struct _KUSER_SHARED_DATA *user_shared_data DECLSPEC_HIDDEN;
+ extern void init_environment( int argc, char *argv[], char *envp[] ) DECLSPEC_HIDDEN;
+ extern DWORD ntdll_umbstowcs( const char *src, DWORD srclen, WCHAR *dst, DWORD dstlen ) DECLSPEC_HIDDEN;
+ 
 +extern unsigned int __wine_nb_syscalls DECLSPEC_HIDDEN;
 +extern void *__wine_syscall_dispatcher DECLSPEC_HIDDEN;
- 
++
  extern unsigned int server_call_unlocked( void *req_ptr ) DECLSPEC_HIDDEN;
  extern void server_enter_uninterrupted_section( RTL_CRITICAL_SECTION *cs, sigset_t *sigset ) DECLSPEC_HIDDEN;
+ extern void server_leave_uninterrupted_section( RTL_CRITICAL_SECTION *cs, sigset_t *sigset ) DECLSPEC_HIDDEN;
 diff --git a/dlls/ntdll/unixlib.h b/dlls/ntdll/unixlib.h
-index 4f0080db03d9..ae17b78862a3 100644
+index 63d0a519b74..92762e802ee 100644
 --- a/dlls/ntdll/unixlib.h
 +++ b/dlls/ntdll/unixlib.h
-@@ -199,7 +199,8 @@ struct unix_funcs
+@@ -204,7 +204,8 @@ struct unix_funcs
  
      /* thread/process functions */
      TEB *         (CDECL *init_threading)( int *nb_threads_ptr, struct ldt_copy **ldt_copy, SIZE_T *size,
@@ -264,7 +265,7 @@ index 4f0080db03d9..ae17b78862a3 100644
      void          (CDECL *exit_process)( int status );
      NTSTATUS      (CDECL *get_thread_ldt_entry)( HANDLE handle, void *data, ULONG len, ULONG *ret_len );
 diff --git a/tools/winebuild/spec32.c b/tools/winebuild/spec32.c
-index 9cc4698d0d7d..c572fe499230 100644
+index 9cc4698d0d7..c572fe49923 100644
 --- a/tools/winebuild/spec32.c
 +++ b/tools/winebuild/spec32.c
 @@ -531,7 +531,7 @@ static void output_syscall_thunks_x64( DLLSPEC *spec )
diff --git a/patches/patchinstall.sh b/patches/patchinstall.sh
index 6e7df7582..795604b48 100755
--- a/patches/patchinstall.sh
+++ b/patches/patchinstall.sh
@@ -4190,7 +4190,8 @@ fi
 # |   *	[#48291] Detroit: Become Human crashes on launch
 # |
 # | Modified files:
-# |   *	configure.ac, dlls/ntdll/unix/signal_x86_64.c, tools/winebuild/spec32.c
+# |   *	configure.ac, dlls/ntdll/thread.c, dlls/ntdll/unix/signal_x86_64.c, dlls/ntdll/unix/thread.c,
+# | 	dlls/ntdll/unix/unix_private.h, dlls/ntdll/unixlib.h, tools/winebuild/spec32.c
 # |
 if test "$enable_ntdll_Syscall_Emulation" -eq 1; then
 	patch_apply ntdll-Syscall_Emulation/0001-ntdll-Support-x86_64-syscall-emulation.patch
diff --git a/patches/winebuild-Fake_Dlls/0003-winebuild-Generate-syscall-thunks-for-ntdll-exports.patch b/patches/winebuild-Fake_Dlls/0003-winebuild-Generate-syscall-thunks-for-ntdll-exports.patch
index a0487f91b..b78ca856c 100644
--- a/patches/winebuild-Fake_Dlls/0003-winebuild-Generate-syscall-thunks-for-ntdll-exports.patch
+++ b/patches/winebuild-Fake_Dlls/0003-winebuild-Generate-syscall-thunks-for-ntdll-exports.patch
@@ -1,4 +1,4 @@
-From d8ff827f7a94aee2bed89c620120af0a148ca81c Mon Sep 17 00:00:00 2001
+From 531ffc16d33f96bfeb65973efd1cdbd22fb6a32f Mon Sep 17 00:00:00 2001
 From: =?UTF-8?q?Michael=20M=C3=BCller?= <michael@fds-team.de>
 Date: Thu, 11 May 2017 05:32:55 +0200
 Subject: [PATCH] winebuild: Generate syscall thunks for ntdll exports.
@@ -22,7 +22,7 @@ Based on a patch by Erich E. Hoover.
  14 files changed, 221 insertions(+), 32 deletions(-)
 
 diff --git a/dlls/ntdll/loader.c b/dlls/ntdll/loader.c
-index 2553b0b9d397..cac6aae2f3dd 100644
+index 2553b0b9d39..cac6aae2f3d 100644
 --- a/dlls/ntdll/loader.c
 +++ b/dlls/ntdll/loader.c
 @@ -4021,6 +4021,7 @@ PIMAGE_NT_HEADERS WINAPI RtlImageNtHeader(HMODULE hModule)
@@ -43,7 +43,7 @@ index 2553b0b9d397..cac6aae2f3dd 100644
  
      RtlEnterCriticalSection( &loader_section );
 diff --git a/dlls/ntdll/signal_i386.c b/dlls/ntdll/signal_i386.c
-index 21cc1b3ead40..18be5693a7d2 100644
+index 21cc1b3ead4..18be5693a7d 100644
 --- a/dlls/ntdll/signal_i386.c
 +++ b/dlls/ntdll/signal_i386.c
 @@ -346,6 +346,8 @@ __ASM_STDCALL_FUNC( RtlCaptureContext, 4,
@@ -65,7 +65,7 @@ index 21cc1b3ead40..18be5693a7d2 100644
      }
      return unix_funcs->NtGetContextThread( handle, context );
 diff --git a/dlls/ntdll/tests/exception.c b/dlls/ntdll/tests/exception.c
-index 1389a542cdee..54796476e25b 100644
+index 1389a542cde..54796476e25 100644
 --- a/dlls/ntdll/tests/exception.c
 +++ b/dlls/ntdll/tests/exception.c
 @@ -1643,6 +1643,8 @@ static void test_thread_context(void)
@@ -78,7 +78,7 @@ index 1389a542cdee..54796476e25b 100644
      ok( context.SegCs == LOWORD(expect.SegCs), "wrong SegCs %08x/%08x\n", context.SegCs, expect.SegCs );
      ok( context.SegDs == LOWORD(expect.SegDs), "wrong SegDs %08x/%08x\n", context.SegDs, expect.SegDs );
 diff --git a/dlls/ntdll/thread.c b/dlls/ntdll/thread.c
-index ff5fe9d6226a..e93498b27ea0 100644
+index ff5fe9d6226..e93498b27ea 100644
 --- a/dlls/ntdll/thread.c
 +++ b/dlls/ntdll/thread.c
 @@ -220,6 +220,14 @@ int __cdecl __wine_dbg_output( const char *str )
@@ -106,7 +106,7 @@ index ff5fe9d6226a..e93498b27ea0 100644
      peb = teb->Peb;
      peb->FastPebLock        = &peb_lock;
 diff --git a/dlls/ntdll/unix/thread.c b/dlls/ntdll/unix/thread.c
-index 97b191e1a5b3..2dbaa43e731a 100644
+index 97b191e1a5b..2dbaa43e731 100644
 --- a/dlls/ntdll/unix/thread.c
 +++ b/dlls/ntdll/unix/thread.c
 @@ -85,7 +85,7 @@ static void pthread_exit_wrapper( int status )
@@ -127,10 +127,10 @@ index 97b191e1a5b3..2dbaa43e731a 100644
      thread_data->request_fd = -1;
      thread_data->reply_fd   = -1;
 diff --git a/dlls/ntdll/unix/unix_private.h b/dlls/ntdll/unix/unix_private.h
-index 92a58417827b..33a551e947c2 100644
+index e26a64fdac0..e93d8f21d10 100644
 --- a/dlls/ntdll/unix/unix_private.h
 +++ b/dlls/ntdll/unix/unix_private.h
-@@ -108,7 +108,7 @@ extern void CDECL server_release_fd( HANDLE handle, int unix_fd ) DECLSPEC_HIDDE
+@@ -112,7 +112,7 @@ extern void CDECL server_release_fd( HANDLE handle, int unix_fd ) DECLSPEC_HIDDE
  extern void CDECL server_init_process_done( void *relay ) DECLSPEC_HIDDEN;
  extern TEB * CDECL init_threading( int *nb_threads_ptr, struct ldt_copy **ldt_copy, SIZE_T *size,
                                     BOOL *suspend, unsigned int *cpus, BOOL *wow64,
@@ -140,19 +140,19 @@ index 92a58417827b..33a551e947c2 100644
  extern void CDECL DECLSPEC_NORETURN exit_process( int status ) DECLSPEC_HIDDEN;
  extern NTSTATUS CDECL get_thread_ldt_entry( HANDLE handle, void *data, ULONG len, ULONG *ret_len ) DECLSPEC_HIDDEN;
 diff --git a/dlls/ntdll/unixlib.h b/dlls/ntdll/unixlib.h
-index 4c580c49d139..4f0080db03d9 100644
+index 768ab5b006c..63d0a519b74 100644
 --- a/dlls/ntdll/unixlib.h
 +++ b/dlls/ntdll/unixlib.h
 @@ -28,7 +28,7 @@ struct ldt_copy;
  struct msghdr;
  
  /* increment this when you change the function table */
--#define NTDLL_UNIXLIB_VERSION 38
-+#define NTDLL_UNIXLIB_VERSION 39
+-#define NTDLL_UNIXLIB_VERSION 41
++#define NTDLL_UNIXLIB_VERSION 42
  
  struct unix_funcs
  {
-@@ -199,7 +199,7 @@ struct unix_funcs
+@@ -204,7 +204,7 @@ struct unix_funcs
  
      /* thread/process functions */
      TEB *         (CDECL *init_threading)( int *nb_threads_ptr, struct ldt_copy **ldt_copy, SIZE_T *size,
@@ -162,7 +162,7 @@ index 4c580c49d139..4f0080db03d9 100644
      void          (CDECL *exit_process)( int status );
      NTSTATUS      (CDECL *get_thread_ldt_entry)( HANDLE handle, void *data, ULONG len, ULONG *ret_len );
 diff --git a/include/winternl.h b/include/winternl.h
-index 2d9f54b89d8c..0c15a0ee6c34 100644
+index 2d9f54b89d8..0c15a0ee6c3 100644
 --- a/include/winternl.h
 +++ b/include/winternl.h
 @@ -360,7 +360,7 @@ typedef struct _TEB
@@ -175,7 +175,7 @@ index 2d9f54b89d8c..0c15a0ee6c34 100644
      ULONG                        FpSoftwareStatusRegister;          /* 0c8/010c */
      PVOID                        SystemReserved1[54];               /* 0cc/0110 used for krnl386.exe16 private data in Wine */
 diff --git a/tools/winebuild/build.h b/tools/winebuild/build.h
-index c162888a0356..55d5b0b9dc28 100644
+index c162888a035..55d5b0b9dc2 100644
 --- a/tools/winebuild/build.h
 +++ b/tools/winebuild/build.h
 @@ -105,6 +105,7 @@ typedef struct
@@ -223,7 +223,7 @@ index c162888a0356..55d5b0b9dc28 100644
  
  extern int byte_swapped;
 diff --git a/tools/winebuild/import.c b/tools/winebuild/import.c
-index 04ab433dd65a..0c6bafed8e54 100644
+index 04ab433dd65..0c6bafed8e5 100644
 --- a/tools/winebuild/import.c
 +++ b/tools/winebuild/import.c
 @@ -531,6 +531,7 @@ static void check_undefined_forwards( DLLSPEC *spec )
@@ -263,7 +263,7 @@ index 04ab433dd65a..0c6bafed8e54 100644
              }
          }
 diff --git a/tools/winebuild/parser.c b/tools/winebuild/parser.c
-index 0f2b9c1e10ad..74216f8bb6e7 100644
+index 0f2b9c1e10a..74216f8bb6e 100644
 --- a/tools/winebuild/parser.c
 +++ b/tools/winebuild/parser.c
 @@ -543,6 +543,24 @@ static const char *parse_spec_flags( DLLSPEC *spec, ORDDEF *odp )
@@ -354,7 +354,7 @@ index 0f2b9c1e10ad..74216f8bb6e7 100644
  }
  
 diff --git a/tools/winebuild/spec16.c b/tools/winebuild/spec16.c
-index a52c03aaa6a7..15ef9a3f8930 100644
+index a52c03aaa6a..15ef9a3f893 100644
 --- a/tools/winebuild/spec16.c
 +++ b/tools/winebuild/spec16.c
 @@ -495,27 +495,6 @@ static int relay_type_compare( const void *e1, const void *e2 )
@@ -394,7 +394,7 @@ index a52c03aaa6a7..15ef9a3f8930 100644
          entry_point->u.func.nb_args = 0;
          assert( !spec->ordinals[0] );
 diff --git a/tools/winebuild/spec32.c b/tools/winebuild/spec32.c
-index b1e20e0484dc..22dd399cb2b4 100644
+index b1e20e0484d..22dd399cb2b 100644
 --- a/tools/winebuild/spec32.c
 +++ b/tools/winebuild/spec32.c
 @@ -374,6 +374,109 @@ static void output_relay_debug( DLLSPEC *spec )
@@ -516,7 +516,7 @@ index b1e20e0484dc..22dd399cb2b4 100644
      output_exports( spec );
      output_imports( spec );
 diff --git a/tools/winebuild/utils.c b/tools/winebuild/utils.c
-index 2a1fc960926b..07a579004adc 100644
+index 2a1fc960926..07a579004ad 100644
 --- a/tools/winebuild/utils.c
 +++ b/tools/winebuild/utils.c
 @@ -860,6 +860,7 @@ void free_dll_spec( DLLSPEC *spec )
diff --git a/patches/ws2_32-WSACleanup/0002-ws2_32-Invalidate-client-side-file-descriptor-cache-.patch b/patches/ws2_32-WSACleanup/0002-ws2_32-Invalidate-client-side-file-descriptor-cache-.patch
index 7b9e61d85..f59482fe7 100644
--- a/patches/ws2_32-WSACleanup/0002-ws2_32-Invalidate-client-side-file-descriptor-cache-.patch
+++ b/patches/ws2_32-WSACleanup/0002-ws2_32-Invalidate-client-side-file-descriptor-cache-.patch
@@ -1,4 +1,4 @@
-From 6cc54a973b9b786166db76df6a4f0a33867103ce Mon Sep 17 00:00:00 2001
+From b8b29d74bc946a359d9296a051371b78f88570d5 Mon Sep 17 00:00:00 2001
 From: Sebastian Lackner <sebastian@fds-team.de>
 Date: Sun, 6 Sep 2015 12:41:17 +0200
 Subject: [PATCH] ws2_32: Invalidate client-side file descriptor cache in
@@ -17,10 +17,10 @@ Subject: [PATCH] ws2_32: Invalidate client-side file descriptor cache in
  9 files changed, 36 insertions(+), 5 deletions(-)
 
 diff --git a/dlls/ntdll/ntdll.spec b/dlls/ntdll/ntdll.spec
-index e054eabba3a..82ed6c68cbe 100644
+index a9422723b71..e4f2f0e9c2b 100644
 --- a/dlls/ntdll/ntdll.spec
 +++ b/dlls/ntdll/ntdll.spec
-@@ -1576,6 +1576,7 @@
+@@ -1578,6 +1578,7 @@
  
  # Server interface
  @ cdecl -norelay wine_server_call(ptr)
@@ -48,10 +48,10 @@ index 9e1cc85a36e..3f4ba60b7bb 100644
  /***********************************************************************
   *           wine_server_release_fd   (NTDLL.@)
 diff --git a/dlls/ntdll/unix/loader.c b/dlls/ntdll/unix/loader.c
-index eac43ba42c4..cd11d0d647e 100644
+index 370a57dea9e..29d7c1c681c 100644
 --- a/dlls/ntdll/unix/loader.c
 +++ b/dlls/ntdll/unix/loader.c
-@@ -1089,6 +1089,7 @@ static struct unix_funcs unix_funcs =
+@@ -927,6 +927,7 @@ static struct unix_funcs unix_funcs =
      get_thread_ldt_entry,
      wine_server_call,
      server_send_fd,
@@ -60,10 +60,10 @@ index eac43ba42c4..cd11d0d647e 100644
      server_fd_to_handle,
      server_handle_to_fd,
 diff --git a/dlls/ntdll/unix/server.c b/dlls/ntdll/unix/server.c
-index cf6f6c3832c..586d0ffcf72 100644
+index 5faca657783..2e278480896 100644
 --- a/dlls/ntdll/unix/server.c
 +++ b/dlls/ntdll/unix/server.c
-@@ -995,6 +995,26 @@ static int remove_fd_from_cache( HANDLE handle )
+@@ -1003,6 +1003,26 @@ static int remove_fd_from_cache( HANDLE handle )
      return fd;
  }
  
@@ -91,10 +91,10 @@ index cf6f6c3832c..586d0ffcf72 100644
  /***********************************************************************
   *           server_get_unix_fd
 diff --git a/dlls/ntdll/unix/unix_private.h b/dlls/ntdll/unix/unix_private.h
-index 3e61111cba5..ae0c47b5a79 100644
+index d2586556f6e..e26a64fdac0 100644
 --- a/dlls/ntdll/unix/unix_private.h
 +++ b/dlls/ntdll/unix/unix_private.h
-@@ -95,6 +95,7 @@ extern void CDECL virtual_release_address_space(void) DECLSPEC_HIDDEN;
+@@ -100,6 +100,7 @@ extern void CDECL virtual_release_address_space(void) DECLSPEC_HIDDEN;
  extern void CDECL virtual_set_large_address_space(void) DECLSPEC_HIDDEN;
  
  extern void CDECL server_send_fd( int fd ) DECLSPEC_HIDDEN;
@@ -103,19 +103,19 @@ index 3e61111cba5..ae0c47b5a79 100644
                                       int *needs_close, enum server_fd_type *type,
                                       unsigned int *options ) DECLSPEC_HIDDEN;
 diff --git a/dlls/ntdll/unixlib.h b/dlls/ntdll/unixlib.h
-index 80d3ce27601..4c580c49d13 100644
+index 54705b7f6d2..768ab5b006c 100644
 --- a/dlls/ntdll/unixlib.h
 +++ b/dlls/ntdll/unixlib.h
 @@ -28,7 +28,7 @@ struct ldt_copy;
  struct msghdr;
  
  /* increment this when you change the function table */
--#define NTDLL_UNIXLIB_VERSION 37
-+#define NTDLL_UNIXLIB_VERSION 38
+-#define NTDLL_UNIXLIB_VERSION 40
++#define NTDLL_UNIXLIB_VERSION 41
  
  struct unix_funcs
  {
-@@ -207,6 +207,7 @@ struct unix_funcs
+@@ -212,6 +212,7 @@ struct unix_funcs
      /* server functions */
      unsigned int  (CDECL *server_call)( void *req_ptr );
      void          (CDECL *server_send_fd)( int fd );

diff --git a/patches/ntdll-Syscall_Emulation/0001-ntdll-Support-x86_64-syscall-emulation.patch b/patches/ntdll-Syscall_Emulation/0001-ntdll-Support-x86_64-syscall-emulation.patch
index 2e659ca0c..f7c6526f1 100644
--- a/patches/ntdll-Syscall_Emulation/0001-ntdll-Support-x86_64-syscall-emulation.patch
+++ b/patches/ntdll-Syscall_Emulation/0001-ntdll-Support-x86_64-syscall-emulation.patch
@@ -1,4 +1,4 @@
-From 3c60ef5d082e5298b113cf0cc93fa2bb44deadba Mon Sep 17 00:00:00 2001
+From 7ac261609be678c827b32e36656a56d77e729fcc Mon Sep 17 00:00:00 2001
 From: Paul Gofman <pgofman@codeweavers.com>
 Date: Mon, 30 Dec 2019 13:27:53 +0300
 Subject: [PATCH] ntdll: Support x86_64 syscall emulation.
@@ -10,15 +10,19 @@ get the number from syscall thunks). Linux specific Seccomp
 is used for trapping syscalls.
 ---
  configure.ac                    |   1 +
- dlls/ntdll/unix/signal_x86_64.c | 109 ++++++++++++++++++++++++++++++++
+ dlls/ntdll/thread.c             |   8 ++-
+ dlls/ntdll/unix/signal_x86_64.c | 105 ++++++++++++++++++++++++++++++++
+ dlls/ntdll/unix/thread.c        |   8 ++-
+ dlls/ntdll/unix/unix_private.h  |   5 +-
+ dlls/ntdll/unixlib.h            |   3 +-
  tools/winebuild/spec32.c        |   9 ++-
- 3 files changed, 117 insertions(+), 2 deletions(-)
+ 7 files changed, 133 insertions(+), 6 deletions(-)
 
 diff --git a/configure.ac b/configure.ac
-index e61a98455c3..4adeb52d225 100644
+index 5418d1aa7329..d82069e74574 100644
 --- a/configure.ac
 +++ b/configure.ac
-@@ -464,6 +464,7 @@ AC_CHECK_HEADERS(\
+@@ -474,6 +474,7 @@ AC_CHECK_HEADERS(\
  	linux/joystick.h \
  	linux/major.h \
  	linux/param.h \
@@ -26,8 +30,34 @@ index e61a98455c3..4adeb52d225 100644
  	linux/serial.h \
  	linux/types.h \
  	linux/ucdrom.h \
+diff --git a/dlls/ntdll/thread.c b/dlls/ntdll/thread.c
+index a14e3a12ae0c..a0411446e243 100644
+--- a/dlls/ntdll/thread.c
++++ b/dlls/ntdll/thread.c
+@@ -229,6 +229,12 @@ void __wine_syscall_dispatcher( void )
+ }
+ #endif
+ 
++#if defined(__x86_64__)
++extern unsigned int __wine_nb_syscalls;
++#else
++unsigned int __wine_nb_syscalls;
++#endif
++
+ void *WINAPI __wine_fakedll_dispatcher( const char *module, ULONG ord )
+ {
+     UNICODE_STRING name;
+@@ -272,7 +278,7 @@ void *WINAPI __wine_fakedll_dispatcher( const char *module, ULONG ord )
+ TEB *thread_init( SIZE_T *info_size, BOOL *suspend )
+ {
+     TEB *teb = unix_funcs->init_threading( &nb_threads, &__wine_ldt_copy, info_size, suspend, &server_cpus,
+-                                           &is_wow64, &server_start_time, __wine_syscall_dispatcher );
++                                           &is_wow64, &server_start_time, __wine_syscall_dispatcher, __wine_nb_syscalls );
+     teb->Spare2 = (ULONG_PTR)__wine_fakedll_dispatcher;
+ 
+     peb = teb->Peb;
 diff --git a/dlls/ntdll/unix/signal_x86_64.c b/dlls/ntdll/unix/signal_x86_64.c
-index 1d1b879310e..d4dda481127 100644
+index 1d1b879310ee..c8a8d1d1d33d 100644
 --- a/dlls/ntdll/unix/signal_x86_64.c
 +++ b/dlls/ntdll/unix/signal_x86_64.c
 @@ -28,6 +28,7 @@
@@ -52,21 +82,10 @@ index 1d1b879310e..d4dda481127 100644
  #define NONAMELESSUNION
  #define NONAMELESSSTRUCT
  #include "ntstatus.h"
-@@ -78,6 +86,8 @@
- 
- WINE_DEFAULT_DEBUG_CHANNEL(seh);
- 
-+extern void DECLSPEC_NORETURN __wine_syscall_dispatcher( void );
-+
- /***********************************************************************
-  * signal context platform-specific definitions
-  */
-@@ -982,6 +992,104 @@ static inline DWORD is_privileged_instr( CONTEXT *context )
+@@ -982,6 +990,102 @@ static inline DWORD is_privileged_instr( CONTEXT *context )
      return 0;
  }
  
-+extern unsigned int __wine_nb_syscalls;
-+
 +#ifdef HAVE_SECCOMP
 +static void sigsys_handler( int signal, siginfo_t *siginfo, void *sigcontext )
 +{
@@ -166,7 +185,7 @@ index 1d1b879310e..d4dda481127 100644
  
  /***********************************************************************
   *           handle_interrupt
-@@ -1431,6 +1539,7 @@ void signal_init_process(void)
+@@ -1431,6 +1535,7 @@ void signal_init_process(void)
      if (sigaction( SIGSEGV, &sig_act, NULL ) == -1) goto error;
      if (sigaction( SIGILL, &sig_act, NULL ) == -1) goto error;
      if (sigaction( SIGBUS, &sig_act, NULL ) == -1) goto error;
@@ -174,8 +193,78 @@ index 1d1b879310e..d4dda481127 100644
      return;
  
   error:
+diff --git a/dlls/ntdll/unix/thread.c b/dlls/ntdll/unix/thread.c
+index e1da90222d38..91e1596ddcba 100644
+--- a/dlls/ntdll/unix/thread.c
++++ b/dlls/ntdll/unix/thread.c
+@@ -58,6 +58,9 @@ WINE_DEFAULT_DEBUG_CHANNEL(seh);
+ #define PTHREAD_STACK_MIN 16384
+ #endif
+ 
++unsigned int __wine_nb_syscalls;
++void *__wine_syscall_dispatcher;
++
+ static int *nb_threads;
+ 
+ static inline int get_unix_exit_code( NTSTATUS status )
+@@ -85,7 +88,8 @@ static void pthread_exit_wrapper( int status )
+  *           init_threading
+  */
+ TEB * CDECL init_threading( int *nb_threads_ptr, struct ldt_copy **ldt_copy, SIZE_T *size, BOOL *suspend,
+-                            unsigned int *cpus, BOOL *wow64, timeout_t *start_time, void *syscall_handler )
++                            unsigned int *cpus, BOOL *wow64, timeout_t *start_time, void *syscall_handler,
++                            unsigned int syscall_count )
+ {
+     TEB *teb;
+     SIZE_T info_size;
+@@ -95,6 +99,8 @@ TEB * CDECL init_threading( int *nb_threads_ptr, struct ldt_copy **ldt_copy, SIZ
+     *ldt_copy = &__wine_ldt_copy;
+ #endif
+     nb_threads = nb_threads_ptr;
++    __wine_nb_syscalls = syscall_count;
++    __wine_syscall_dispatcher = syscall_handler;
+ 
+     teb = virtual_alloc_first_teb();
+     teb->WOW32Reserved = syscall_handler;
+diff --git a/dlls/ntdll/unix/unix_private.h b/dlls/ntdll/unix/unix_private.h
+index d06f366d3c6d..4e1bdbcc5094 100644
+--- a/dlls/ntdll/unix/unix_private.h
++++ b/dlls/ntdll/unix/unix_private.h
+@@ -108,7 +108,8 @@ extern void CDECL server_release_fd( HANDLE handle, int unix_fd ) DECLSPEC_HIDDE
+ extern void CDECL server_init_process_done( void *relay ) DECLSPEC_HIDDEN;
+ extern TEB * CDECL init_threading( int *nb_threads_ptr, struct ldt_copy **ldt_copy, SIZE_T *size,
+                                    BOOL *suspend, unsigned int *cpus, BOOL *wow64,
+-                                   timeout_t *start_time, void *syscall_handler ) DECLSPEC_HIDDEN;
++                                   timeout_t *start_time, void *syscall_handler,
++                                   unsigned int syscall_count ) DECLSPEC_HIDDEN;
+ extern void CDECL DECLSPEC_NORETURN exit_thread( int status ) DECLSPEC_HIDDEN;
+ extern void CDECL DECLSPEC_NORETURN exit_process( int status ) DECLSPEC_HIDDEN;
+ extern NTSTATUS CDECL get_thread_ldt_entry( HANDLE handle, void *data, ULONG len, ULONG *ret_len ) DECLSPEC_HIDDEN;
+@@ -123,6 +124,8 @@ extern timeout_t server_start_time DECLSPEC_HIDDEN;
+ extern sigset_t server_block_set DECLSPEC_HIDDEN;
+ extern SIZE_T signal_stack_size DECLSPEC_HIDDEN;
+ extern SIZE_T signal_stack_mask DECLSPEC_HIDDEN;
++extern unsigned int __wine_nb_syscalls DECLSPEC_HIDDEN;
++extern void *__wine_syscall_dispatcher DECLSPEC_HIDDEN;
+ 
+ extern unsigned int server_call_unlocked( void *req_ptr ) DECLSPEC_HIDDEN;
+ extern void server_enter_uninterrupted_section( RTL_CRITICAL_SECTION *cs, sigset_t *sigset ) DECLSPEC_HIDDEN;
+diff --git a/dlls/ntdll/unixlib.h b/dlls/ntdll/unixlib.h
+index 4f0080db03d9..ae17b78862a3 100644
+--- a/dlls/ntdll/unixlib.h
++++ b/dlls/ntdll/unixlib.h
+@@ -199,7 +199,8 @@ struct unix_funcs
+ 
+     /* thread/process functions */
+     TEB *         (CDECL *init_threading)( int *nb_threads_ptr, struct ldt_copy **ldt_copy, SIZE_T *size,
+-                                           BOOL *suspend, unsigned int *cpus, BOOL *wow64, timeout_t *start_time, void *syscall_handler );
++                                           BOOL *suspend, unsigned int *cpus, BOOL *wow64, timeout_t *start_time,
++                                           void *syscall_handler, unsigned int syscall_count );
+     void          (CDECL *exit_thread)( int status );
+     void          (CDECL *exit_process)( int status );
+     NTSTATUS      (CDECL *get_thread_ldt_entry)( HANDLE handle, void *data, ULONG len, ULONG *ret_len );
 diff --git a/tools/winebuild/spec32.c b/tools/winebuild/spec32.c
-index 9cc4698d0d7..c572fe49923 100644
+index 9cc4698d0d7d..c572fe499230 100644
 --- a/tools/winebuild/spec32.c
 +++ b/tools/winebuild/spec32.c
 @@ -531,7 +531,7 @@ static void output_syscall_thunks_x64( DLLSPEC *spec )

diff --git a/patches/winebuild-Fake_Dlls/0001-kernel32-tests-Add-basic-tests-for-fake-dlls.patch b/patches/winebuild-Fake_Dlls/0001-kernel32-tests-Add-basic-tests-for-fake-dlls.patch
index ef056cfcf..21d69fd59 100644
--- a/patches/winebuild-Fake_Dlls/0001-kernel32-tests-Add-basic-tests-for-fake-dlls.patch
+++ b/patches/winebuild-Fake_Dlls/0001-kernel32-tests-Add-basic-tests-for-fake-dlls.patch
@@ -1,4 +1,4 @@
-From de68d5c0e6bd728788bbec09100ea59802b8ff13 Mon Sep 17 00:00:00 2001
+From 8b88aa45856684e63786425f72886f2ac57b3630 Mon Sep 17 00:00:00 2001
 From: =?UTF-8?q?Michael=20M=C3=BCller?= <michael@fds-team.de>
 Date: Thu, 25 May 2017 07:02:46 +0200
 Subject: [PATCH] kernel32/tests: Add basic tests for fake dlls.
@@ -8,10 +8,10 @@ Subject: [PATCH] kernel32/tests: Add basic tests for fake dlls.
  1 file changed, 91 insertions(+)
 
 diff --git a/dlls/kernel32/tests/loader.c b/dlls/kernel32/tests/loader.c
-index 5474d543248..4e7a15970cb 100644
+index ef8c47c04f1a..efd5a25a432d 100644
 --- a/dlls/kernel32/tests/loader.c
 +++ b/dlls/kernel32/tests/loader.c
-@@ -1535,6 +1535,96 @@ static void test_filenames(void)
+@@ -1572,6 +1572,96 @@ static void test_filenames(void)
      DeleteFileA( long_path );
  }
  
@@ -108,7 +108,7 @@ index 5474d543248..4e7a15970cb 100644
  /* Verify linking style of import descriptors */
  static void test_ImportDescriptors(void)
  {
-@@ -3997,6 +4087,7 @@ START_TEST(loader)
+@@ -4094,6 +4184,7 @@ START_TEST(loader)
          return;
      }
  
diff --git a/patches/winebuild-Fake_Dlls/0002-krnl386.exe16-Do-not-abuse-WOW32Reserved-field-for-1.patch b/patches/winebuild-Fake_Dlls/0002-krnl386.exe16-Do-not-abuse-WOW32Reserved-field-for-1.patch
index 15aaa85df..ae98c2798 100644
--- a/patches/winebuild-Fake_Dlls/0002-krnl386.exe16-Do-not-abuse-WOW32Reserved-field-for-1.patch
+++ b/patches/winebuild-Fake_Dlls/0002-krnl386.exe16-Do-not-abuse-WOW32Reserved-field-for-1.patch
@@ -1,4 +1,4 @@
-From 25d08438aba3dee16c79ce3168a4f76f39816fad Mon Sep 17 00:00:00 2001
+From 7af81866f286e60f601d1c3f9bfe8592a794d21d Mon Sep 17 00:00:00 2001
 From: Sebastian Lackner <sebastian@fds-team.de>
 Date: Tue, 16 May 2017 04:37:52 +0200
 Subject: [PATCH] krnl386.exe16: Do not abuse WOW32Reserved field for 16-bit
@@ -24,7 +24,7 @@ Subject: [PATCH] krnl386.exe16: Do not abuse WOW32Reserved field for 16-bit
  16 files changed, 78 insertions(+), 77 deletions(-)
 
 diff --git a/dlls/dbghelp/cpu_i386.c b/dlls/dbghelp/cpu_i386.c
-index fd808a0d324..7d6723977a2 100644
+index fd808a0d3248..7d6723977a29 100644
 --- a/dlls/dbghelp/cpu_i386.c
 +++ b/dlls/dbghelp/cpu_i386.c
 @@ -213,16 +213,16 @@ static BOOL i386_stack_walk(struct cpu_stack_walk *csw, STACKFRAME64 *frame,
@@ -48,7 +48,7 @@ index fd808a0d324..7d6723977a2 100644
              }
              next_switch = p;
 diff --git a/dlls/krnl386.exe16/kernel.c b/dlls/krnl386.exe16/kernel.c
-index 07a57d0d937..89ea5c042e7 100644
+index 07a57d0d9372..89ea5c042e71 100644
 --- a/dlls/krnl386.exe16/kernel.c
 +++ b/dlls/krnl386.exe16/kernel.c
 @@ -47,8 +47,8 @@ static void thread_attach(void)
@@ -72,7 +72,7 @@ index 07a57d0d937..89ea5c042e7 100644
  }
  
 diff --git a/dlls/krnl386.exe16/kernel16_private.h b/dlls/krnl386.exe16/kernel16_private.h
-index f15934daa0e..9f939a9d5ba 100644
+index f15934daa0e4..9f939a9d5bac 100644
 --- a/dlls/krnl386.exe16/kernel16_private.h
 +++ b/dlls/krnl386.exe16/kernel16_private.h
 @@ -169,7 +169,7 @@ extern THHOOK *pThhook DECLSPEC_HIDDEN;
@@ -119,7 +119,7 @@ index f15934daa0e..9f939a9d5ba 100644
  
  static inline struct kernel_thread_data *kernel_get_thread_data(void)
 diff --git a/dlls/krnl386.exe16/ne_module.c b/dlls/krnl386.exe16/ne_module.c
-index f1e1a14dd67..c951a18f869 100644
+index f1e1a14dd679..c951a18f8699 100644
 --- a/dlls/krnl386.exe16/ne_module.c
 +++ b/dlls/krnl386.exe16/ne_module.c
 @@ -1208,7 +1208,7 @@ DWORD NE_StartTask(void)
@@ -143,7 +143,7 @@ index f1e1a14dd67..c951a18f869 100644
          WOWCallback16Ex( 0, WCB16_REGS, 0, NULL, (DWORD *)&context );
          ExitThread( LOWORD(context.Eax) );
 diff --git a/dlls/krnl386.exe16/ne_segment.c b/dlls/krnl386.exe16/ne_segment.c
-index aa886148029..70eb3360914 100644
+index aa8861480298..70eb33609144 100644
 --- a/dlls/krnl386.exe16/ne_segment.c
 +++ b/dlls/krnl386.exe16/ne_segment.c
 @@ -370,9 +370,9 @@ BOOL NE_LoadSegment( NE_MODULE *pModule, WORD segnum )
@@ -209,7 +209,7 @@ index aa886148029..70eb3360914 100644
          args[7] = HIWORD(dwReason);
          args[6] = LOWORD(dwReason);
 diff --git a/dlls/krnl386.exe16/task.c b/dlls/krnl386.exe16/task.c
-index 39a60cb97a9..21de62c5a01 100644
+index 39a60cb97a94..21de62c5a015 100644
 --- a/dlls/krnl386.exe16/task.c
 +++ b/dlls/krnl386.exe16/task.c
 @@ -624,7 +624,7 @@ void WINAPI InitTask16( CONTEXT *context )
@@ -267,7 +267,7 @@ index 39a60cb97a9..21de62c5a01 100644
      context->Esp   = OFFSETOF(pData->old_ss_sp) - sizeof(DWORD); /*ret addr*/
      pData->old_ss_sp = 0;
 diff --git a/dlls/krnl386.exe16/thunk.c b/dlls/krnl386.exe16/thunk.c
-index e913a08f88c..ecc94371488 100644
+index e913a08f88cc..ecc94371488f 100644
 --- a/dlls/krnl386.exe16/thunk.c
 +++ b/dlls/krnl386.exe16/thunk.c
 @@ -429,7 +429,7 @@ void WINAPI __regs_QT_Thunk( CONTEXT *context )
@@ -413,7 +413,7 @@ index e913a08f88c..ecc94371488 100644
          if (OFFSETOF(frame32->frame16) > lpbuf[2])
          {
 diff --git a/dlls/krnl386.exe16/wowthunk.c b/dlls/krnl386.exe16/wowthunk.c
-index 2dddbf93289..3a4b104a673 100644
+index 2dddbf932898..3a4b104a673f 100644
 --- a/dlls/krnl386.exe16/wowthunk.c
 +++ b/dlls/krnl386.exe16/wowthunk.c
 @@ -127,7 +127,7 @@ static DWORD call16_handler( EXCEPTION_RECORD *record, EXCEPTION_REGISTRATION_RE
@@ -473,7 +473,7 @@ index 2dddbf93289..3a4b104a673 100644
          }
      }
 diff --git a/dlls/ntdll/unix/signal_i386.c b/dlls/ntdll/unix/signal_i386.c
-index 2928f314358..138f56b94eb 100644
+index ac34f86a5883..55f1e2ce4b23 100644
 --- a/dlls/ntdll/unix/signal_i386.c
 +++ b/dlls/ntdll/unix/signal_i386.c
 @@ -645,7 +645,7 @@ static inline void *init_handler( const ucontext_t *sigcontext )
@@ -486,7 +486,7 @@ index 2928f314358..138f56b94eb 100644
      return (void *)(ESP_sig(sigcontext) & ~3);
  }
 diff --git a/dlls/system.drv16/system.c b/dlls/system.drv16/system.c
-index b6fd51c05f0..695ad7b6003 100644
+index b6fd51c05f01..695ad7b60039 100644
 --- a/dlls/system.drv16/system.c
 +++ b/dlls/system.drv16/system.c
 @@ -70,7 +70,7 @@ static void CALLBACK SYSTEM_TimerTick( LPVOID arg, DWORD low, DWORD high )
@@ -499,7 +499,7 @@ index b6fd51c05f0..695ad7b6003 100644
  
              WOWCallback16Ex( 0, WCB16_REGS, 0, NULL, (DWORD *)&context );
 diff --git a/dlls/toolhelp.dll16/toolhelp.c b/dlls/toolhelp.dll16/toolhelp.c
-index 578d1ae7fab..1077f0b0367 100644
+index 578d1ae7faba..1077f0b03672 100644
 --- a/dlls/toolhelp.dll16/toolhelp.c
 +++ b/dlls/toolhelp.dll16/toolhelp.c
 @@ -491,8 +491,8 @@ BOOL16 WINAPI TaskNext16( TASKENTRY *lpte )
@@ -523,7 +523,7 @@ index 578d1ae7fab..1077f0b0367 100644
      WORD user = LoadLibrary16( "USER.EXE" );
      WORD gdi = LoadLibrary16( "GDI.EXE" );
 diff --git a/dlls/user.exe16/message.c b/dlls/user.exe16/message.c
-index e3ca3fd779d..fa9388ceaa1 100644
+index e3ca3fd779d3..fa9388ceaa11 100644
 --- a/dlls/user.exe16/message.c
 +++ b/dlls/user.exe16/message.c
 @@ -240,11 +240,11 @@ static LRESULT call_window_proc16( HWND16 hwnd, UINT16 msg, WPARAM16 wParam, LPA
@@ -595,7 +595,7 @@ index e3ca3fd779d..fa9388ceaa1 100644
  
          stack16->ds = GetWindowLongPtrW( hwnd, GWLP_HINSTANCE );
 diff --git a/dlls/user.exe16/user.c b/dlls/user.exe16/user.c
-index 27b92793836..deec596f766 100644
+index 27b92793836a..deec596f7660 100644
 --- a/dlls/user.exe16/user.c
 +++ b/dlls/user.exe16/user.c
 @@ -1394,7 +1394,7 @@ DWORD WINAPI GetTabbedTextExtent16( HDC16 hdc, LPCSTR lpstr, INT16 count,
@@ -617,7 +617,7 @@ index 27b92793836..deec596f766 100644
      int userPercent, gdiPercent;
  
 diff --git a/dlls/user.exe16/window.c b/dlls/user.exe16/window.c
-index bf86719325b..1f53bdc9540 100644
+index bf86719325b8..1f53bdc95402 100644
 --- a/dlls/user.exe16/window.c
 +++ b/dlls/user.exe16/window.c
 @@ -456,7 +456,7 @@ HWND16 WINAPI GetParent16( HWND16 hwnd )
@@ -630,10 +630,10 @@ index bf86719325b..1f53bdc9540 100644
      /* don't use WIN_Handle32 here, we don't care about the full handle */
      return IsWindow( HWND_32(hwnd) );
 diff --git a/include/winternl.h b/include/winternl.h
-index acbce20c212..68c1ae3fd82 100644
+index 87eb0d32926b..2d9f54b89d8c 100644
 --- a/include/winternl.h
 +++ b/include/winternl.h
-@@ -362,7 +362,7 @@ typedef struct _TEB
+@@ -363,7 +363,7 @@ typedef struct _TEB
      PVOID                        WOW32Reserved;                     /* 0c0/0100 */
      ULONG                        CurrentLocale;                     /* 0c4/0108 */
      ULONG                        FpSoftwareStatusRegister;          /* 0c8/010c */
@@ -643,7 +643,7 @@ index acbce20c212..68c1ae3fd82 100644
      ACTIVATION_CONTEXT_STACK     ActivationContextStack;            /* 1a8/02c8 */
      BYTE                         SpareBytes1[24];                   /* 1bc/02e8 */
 diff --git a/tools/winebuild/relay.c b/tools/winebuild/relay.c
-index 29d0a74c833..01bb97e02b4 100644
+index 29d0a74c833c..01bb97e02b4c 100644
 --- a/tools/winebuild/relay.c
 +++ b/tools/winebuild/relay.c
 @@ -31,7 +31,7 @@
diff --git a/patches/winebuild-Fake_Dlls/0003-winebuild-Generate-syscall-thunks-for-ntdll-exports.patch b/patches/winebuild-Fake_Dlls/0003-winebuild-Generate-syscall-thunks-for-ntdll-exports.patch
index 547e27f8f..a0487f91b 100644
--- a/patches/winebuild-Fake_Dlls/0003-winebuild-Generate-syscall-thunks-for-ntdll-exports.patch
+++ b/patches/winebuild-Fake_Dlls/0003-winebuild-Generate-syscall-thunks-for-ntdll-exports.patch
@@ -1,4 +1,4 @@
-From 0c4d2573b123f2198f74292133b7a6eefa472620 Mon Sep 17 00:00:00 2001
+From d8ff827f7a94aee2bed89c620120af0a148ca81c Mon Sep 17 00:00:00 2001
 From: =?UTF-8?q?Michael=20M=C3=BCller?= <michael@fds-team.de>
 Date: Thu, 11 May 2017 05:32:55 +0200
 Subject: [PATCH] winebuild: Generate syscall thunks for ntdll exports.
@@ -8,7 +8,7 @@ Based on a patch by Erich E. Hoover.
  dlls/ntdll/loader.c            |   3 +
  dlls/ntdll/signal_i386.c       |   4 +-
  dlls/ntdll/tests/exception.c   |   2 +
- dlls/ntdll/thread.c            |   3 +-
+ dlls/ntdll/thread.c            |  10 +++-
  dlls/ntdll/unix/thread.c       |   3 +-
  dlls/ntdll/unix/unix_private.h |   2 +-
  dlls/ntdll/unixlib.h           |   4 +-
@@ -19,13 +19,13 @@ Based on a patch by Erich E. Hoover.
  tools/winebuild/spec16.c       |  22 +------
  tools/winebuild/spec32.c       | 104 +++++++++++++++++++++++++++++++++
  tools/winebuild/utils.c        |  21 +++++++
- 14 files changed, 214 insertions(+), 32 deletions(-)
+ 14 files changed, 221 insertions(+), 32 deletions(-)
 
 diff --git a/dlls/ntdll/loader.c b/dlls/ntdll/loader.c
-index 0c8f05285c4..26c540050dc 100644
+index 2553b0b9d397..cac6aae2f3dd 100644
 --- a/dlls/ntdll/loader.c
 +++ b/dlls/ntdll/loader.c
-@@ -3810,6 +3810,7 @@ PIMAGE_NT_HEADERS WINAPI RtlImageNtHeader(HMODULE hModule)
+@@ -4021,6 +4021,7 @@ PIMAGE_NT_HEADERS WINAPI RtlImageNtHeader(HMODULE hModule)
      return ret;
  }
  
@@ -33,7 +33,7 @@ index 0c8f05285c4..26c540050dc 100644
  
  /******************************************************************
   *		LdrInitializeThunk (NTDLL.@)
-@@ -3826,6 +3827,8 @@ void WINAPI LdrInitializeThunk( CONTEXT *context, void **entry, ULONG_PTR unknow
+@@ -4038,6 +4039,8 @@ void WINAPI LdrInitializeThunk( CONTEXT *context, void **entry, ULONG_PTR unknow
      WINE_MODREF *wm;
      LPCWSTR load_path = NtCurrentTeb()->Peb->ProcessParameters->DllPath.Buffer;
  
@@ -43,7 +43,7 @@ index 0c8f05285c4..26c540050dc 100644
  
      RtlEnterCriticalSection( &loader_section );
 diff --git a/dlls/ntdll/signal_i386.c b/dlls/ntdll/signal_i386.c
-index 21cc1b3ead4..18be5693a7d 100644
+index 21cc1b3ead40..18be5693a7d2 100644
 --- a/dlls/ntdll/signal_i386.c
 +++ b/dlls/ntdll/signal_i386.c
 @@ -346,6 +346,8 @@ __ASM_STDCALL_FUNC( RtlCaptureContext, 4,
@@ -65,7 +65,7 @@ index 21cc1b3ead4..18be5693a7d 100644
      }
      return unix_funcs->NtGetContextThread( handle, context );
 diff --git a/dlls/ntdll/tests/exception.c b/dlls/ntdll/tests/exception.c
-index a5e6faa461a..51938bf84cc 100644
+index 1389a542cdee..54796476e25b 100644
 --- a/dlls/ntdll/tests/exception.c
 +++ b/dlls/ntdll/tests/exception.c
 @@ -1643,6 +1643,8 @@ static void test_thread_context(void)
@@ -78,18 +78,25 @@ index a5e6faa461a..51938bf84cc 100644
      ok( context.SegCs == LOWORD(expect.SegCs), "wrong SegCs %08x/%08x\n", context.SegCs, expect.SegCs );
      ok( context.SegDs == LOWORD(expect.SegDs), "wrong SegDs %08x/%08x\n", context.SegDs, expect.SegDs );
 diff --git a/dlls/ntdll/thread.c b/dlls/ntdll/thread.c
-index 5a6809638ae..fa10cdf1062 100644
+index ff5fe9d6226a..e93498b27ea0 100644
 --- a/dlls/ntdll/thread.c
 +++ b/dlls/ntdll/thread.c
-@@ -170,6 +170,7 @@ int __cdecl __wine_dbg_output( const char *str )
+@@ -220,6 +220,14 @@ int __cdecl __wine_dbg_output( const char *str )
      return unix_funcs->dbg_output( str );
  }
  
++#if defined(__i386__) || defined(__x86_64__)
 +extern void DECLSPEC_NORETURN __wine_syscall_dispatcher( void );
++#else
++void __wine_syscall_dispatcher( void )
++{
++    FIXME("Syscall dispatcher is not available for this architecture.\n");
++}
++#endif
  
  /***********************************************************************
   *           thread_init
-@@ -181,7 +182,7 @@ int __cdecl __wine_dbg_output( const char *str )
+@@ -231,7 +239,7 @@ int __cdecl __wine_dbg_output( const char *str )
  TEB *thread_init( SIZE_T *info_size, BOOL *suspend )
  {
      TEB *teb = unix_funcs->init_threading( &nb_threads, &__wine_ldt_copy, info_size, suspend, &server_cpus,
@@ -99,7 +106,7 @@ index 5a6809638ae..fa10cdf1062 100644
      peb = teb->Peb;
      peb->FastPebLock        = &peb_lock;
 diff --git a/dlls/ntdll/unix/thread.c b/dlls/ntdll/unix/thread.c
-index 97b191e1a5b..2dbaa43e731 100644
+index 97b191e1a5b3..2dbaa43e731a 100644
 --- a/dlls/ntdll/unix/thread.c
 +++ b/dlls/ntdll/unix/thread.c
 @@ -85,7 +85,7 @@ static void pthread_exit_wrapper( int status )
@@ -120,10 +127,10 @@ index 97b191e1a5b..2dbaa43e731 100644
      thread_data->request_fd = -1;
      thread_data->reply_fd   = -1;
 diff --git a/dlls/ntdll/unix/unix_private.h b/dlls/ntdll/unix/unix_private.h
-index 19dd216fc35..a1c48a52606 100644
+index 92a58417827b..33a551e947c2 100644
 --- a/dlls/ntdll/unix/unix_private.h
 +++ b/dlls/ntdll/unix/unix_private.h
-@@ -107,7 +107,7 @@ extern void CDECL server_release_fd( HANDLE handle, int unix_fd ) DECLSPEC_HIDDE
+@@ -108,7 +108,7 @@ extern void CDECL server_release_fd( HANDLE handle, int unix_fd ) DECLSPEC_HIDDE
  extern void CDECL server_init_process_done( void *relay ) DECLSPEC_HIDDEN;
  extern TEB * CDECL init_threading( int *nb_threads_ptr, struct ldt_copy **ldt_copy, SIZE_T *size,
                                     BOOL *suspend, unsigned int *cpus, BOOL *wow64,
@@ -133,7 +140,7 @@ index 19dd216fc35..a1c48a52606 100644
  extern void CDECL DECLSPEC_NORETURN exit_process( int status ) DECLSPEC_HIDDEN;
  extern NTSTATUS CDECL get_thread_ldt_entry( HANDLE handle, void *data, ULONG len, ULONG *ret_len ) DECLSPEC_HIDDEN;
 diff --git a/dlls/ntdll/unixlib.h b/dlls/ntdll/unixlib.h
-index 4c580c49d13..4f0080db03d 100644
+index 4c580c49d139..4f0080db03d9 100644
 --- a/dlls/ntdll/unixlib.h
 +++ b/dlls/ntdll/unixlib.h
 @@ -28,7 +28,7 @@ struct ldt_copy;
@@ -155,10 +162,10 @@ index 4c580c49d13..4f0080db03d 100644
      void          (CDECL *exit_process)( int status );
      NTSTATUS      (CDECL *get_thread_ldt_entry)( HANDLE handle, void *data, ULONG len, ULONG *ret_len );
 diff --git a/include/winternl.h b/include/winternl.h
-index 68c1ae3fd82..f2da9157aab 100644
+index 2d9f54b89d8c..0c15a0ee6c34 100644
 --- a/include/winternl.h
 +++ b/include/winternl.h
-@@ -359,7 +359,7 @@ typedef struct _TEB
+@@ -360,7 +360,7 @@ typedef struct _TEB
      PVOID                        CsrClientThread;                   /* 03c/0070 */
      PVOID                        Win32ThreadInfo;                   /* 040/0078 */
      ULONG                        Win32ClientInfo[31];               /* 044/0080 used for user32 private data in Wine */
@@ -168,7 +175,7 @@ index 68c1ae3fd82..f2da9157aab 100644
      ULONG                        FpSoftwareStatusRegister;          /* 0c8/010c */
      PVOID                        SystemReserved1[54];               /* 0cc/0110 used for krnl386.exe16 private data in Wine */
 diff --git a/tools/winebuild/build.h b/tools/winebuild/build.h
-index c162888a035..55d5b0b9dc2 100644
+index c162888a0356..55d5b0b9dc28 100644
 --- a/tools/winebuild/build.h
 +++ b/tools/winebuild/build.h
 @@ -105,6 +105,7 @@ typedef struct
@@ -216,7 +223,7 @@ index c162888a035..55d5b0b9dc2 100644
  
  extern int byte_swapped;
 diff --git a/tools/winebuild/import.c b/tools/winebuild/import.c
-index 04ab433dd65..0c6bafed8e5 100644
+index 04ab433dd65a..0c6bafed8e54 100644
 --- a/tools/winebuild/import.c
 +++ b/tools/winebuild/import.c
 @@ -531,6 +531,7 @@ static void check_undefined_forwards( DLLSPEC *spec )
@@ -256,7 +263,7 @@ index 04ab433dd65..0c6bafed8e5 100644
              }
          }
 diff --git a/tools/winebuild/parser.c b/tools/winebuild/parser.c
-index 0f2b9c1e10a..74216f8bb6e 100644
+index 0f2b9c1e10ad..74216f8bb6e7 100644
 --- a/tools/winebuild/parser.c
 +++ b/tools/winebuild/parser.c
 @@ -543,6 +543,24 @@ static const char *parse_spec_flags( DLLSPEC *spec, ORDDEF *odp )
@@ -347,7 +354,7 @@ index 0f2b9c1e10a..74216f8bb6e 100644
  }
  
 diff --git a/tools/winebuild/spec16.c b/tools/winebuild/spec16.c
-index a52c03aaa6a..15ef9a3f893 100644
+index a52c03aaa6a7..15ef9a3f8930 100644
 --- a/tools/winebuild/spec16.c
 +++ b/tools/winebuild/spec16.c
 @@ -495,27 +495,6 @@ static int relay_type_compare( const void *e1, const void *e2 )
@@ -387,7 +394,7 @@ index a52c03aaa6a..15ef9a3f893 100644
          entry_point->u.func.nb_args = 0;
          assert( !spec->ordinals[0] );
 diff --git a/tools/winebuild/spec32.c b/tools/winebuild/spec32.c
-index b1e20e0484d..22dd399cb2b 100644
+index b1e20e0484dc..22dd399cb2b4 100644
 --- a/tools/winebuild/spec32.c
 +++ b/tools/winebuild/spec32.c
 @@ -374,6 +374,109 @@ static void output_relay_debug( DLLSPEC *spec )
@@ -509,7 +516,7 @@ index b1e20e0484d..22dd399cb2b 100644
      output_exports( spec );
      output_imports( spec );
 diff --git a/tools/winebuild/utils.c b/tools/winebuild/utils.c
-index 2a1fc960926..07a579004ad 100644
+index 2a1fc960926b..07a579004adc 100644
 --- a/tools/winebuild/utils.c
 +++ b/tools/winebuild/utils.c
 @@ -860,6 +860,7 @@ void free_dll_spec( DLLSPEC *spec )
diff --git a/patches/winebuild-Fake_Dlls/0004-winebuild-Use-multipass-label-system-to-generate-fak.patch b/patches/winebuild-Fake_Dlls/0004-winebuild-Use-multipass-label-system-to-generate-fak.patch
index 6c3984f8b..d4813799e 100644
--- a/patches/winebuild-Fake_Dlls/0004-winebuild-Use-multipass-label-system-to-generate-fak.patch
+++ b/patches/winebuild-Fake_Dlls/0004-winebuild-Use-multipass-label-system-to-generate-fak.patch
@@ -1,4 +1,4 @@
-From 15182deeb13e26abdb3067a77353354726ac82aa Mon Sep 17 00:00:00 2001
+From 344eb39bdfee74d4d826fa2f61a95736f0ee9823 Mon Sep 17 00:00:00 2001
 From: =?UTF-8?q?Michael=20M=C3=BCller?= <michael@fds-team.de>
 Date: Mon, 15 May 2017 02:05:49 +0200
 Subject: [PATCH] winebuild: Use multipass label system to generate fake dlls.
@@ -11,7 +11,7 @@ Subject: [PATCH] winebuild: Use multipass label system to generate fake dlls.
  4 files changed, 181 insertions(+), 63 deletions(-)
 
 diff --git a/tools/winebuild/build.h b/tools/winebuild/build.h
-index 6ee847f908c..210324406a9 100644
+index 55d5b0b9dc28..8930df408d3b 100644
 --- a/tools/winebuild/build.h
 +++ b/tools/winebuild/build.h
 @@ -343,6 +343,7 @@ extern size_t input_buffer_pos;
@@ -35,7 +35,7 @@ index 6ee847f908c..210324406a9 100644
  /* global variables */
  
 diff --git a/tools/winebuild/res32.c b/tools/winebuild/res32.c
-index bd55bb2fa5c..d9329019f8a 100644
+index bd55bb2fa5c4..d9329019f8a3 100644
 --- a/tools/winebuild/res32.c
 +++ b/tools/winebuild/res32.c
 @@ -539,7 +539,6 @@ void output_bin_resources( DLLSPEC *spec, unsigned int start_rva )
@@ -47,7 +47,7 @@ index bd55bb2fa5c..d9329019f8a 100644
      /* output the resource directories */
  
 diff --git a/tools/winebuild/spec32.c b/tools/winebuild/spec32.c
-index 22dd399cb2b..c38f1fe663c 100644
+index 22dd399cb2b4..c38f1fe663c7 100644
 --- a/tools/winebuild/spec32.c
 +++ b/tools/winebuild/spec32.c
 @@ -844,11 +844,11 @@ void output_spec32_file( DLLSPEC *spec )
@@ -279,7 +279,7 @@ index 22dd399cb2b..c38f1fe663c 100644
  }
  
 diff --git a/tools/winebuild/utils.c b/tools/winebuild/utils.c
-index 7dc61a708db..64e1fa51455 100644
+index 07a579004adc..80dec6db29ea 100644
 --- a/tools/winebuild/utils.c
 +++ b/tools/winebuild/utils.c
 @@ -34,6 +34,7 @@
diff --git a/patches/winebuild-Fake_Dlls/0005-winebuild-Add-stub-functions-in-fake-dlls.patch b/patches/winebuild-Fake_Dlls/0005-winebuild-Add-stub-functions-in-fake-dlls.patch
index f96d51aee..4ac05a314 100644
--- a/patches/winebuild-Fake_Dlls/0005-winebuild-Add-stub-functions-in-fake-dlls.patch
+++ b/patches/winebuild-Fake_Dlls/0005-winebuild-Add-stub-functions-in-fake-dlls.patch
@@ -1,4 +1,4 @@
-From 167ad04157dd746ee9395afa9505fe00cc866f9b Mon Sep 17 00:00:00 2001
+From e5fc6ee60be5dd3b80af96dcbd81adb742ba7a5d Mon Sep 17 00:00:00 2001
 From: =?UTF-8?q?Michael=20M=C3=BCller?= <michael@fds-team.de>
 Date: Mon, 15 May 2017 16:27:56 +0200
 Subject: [PATCH] winebuild: Add stub functions in fake dlls.
@@ -14,10 +14,10 @@ Subject: [PATCH] winebuild: Add stub functions in fake dlls.
  7 files changed, 251 insertions(+), 15 deletions(-)
 
 diff --git a/dlls/kernel32/tests/loader.c b/dlls/kernel32/tests/loader.c
-index 926fa913866..902907329c0 100644
+index efd5a25a432d..182b61b731a2 100644
 --- a/dlls/kernel32/tests/loader.c
 +++ b/dlls/kernel32/tests/loader.c
-@@ -1596,9 +1596,7 @@ static void test_FakeDLL(void)
+@@ -1597,9 +1597,7 @@ static void test_FakeDLL(void)
      ok(ptr != NULL, "MapViewOfFile failed with error %u\n", GetLastError());
  
      dir = RtlImageDirectoryEntryToData(ptr, TRUE, IMAGE_DIRECTORY_ENTRY_EXPORT, &size);
@@ -27,7 +27,7 @@ index 926fa913866..902907329c0 100644
  
      names    = RVAToAddr(dir->AddressOfNames, ptr);
      ordinals = RVAToAddr(dir->AddressOfNameOrdinals, ptr);
-@@ -1627,17 +1625,20 @@ todo_wine
+@@ -1628,17 +1626,20 @@ todo_wine
          /* check position in memory */
          dll_rva = (DWORD_PTR)dll_func - (DWORD_PTR)module;
          map_rva = funcs[ordinals[i]];
@@ -48,7 +48,7 @@ index 926fa913866..902907329c0 100644
          ok(!memcmp(map_func, dll_func, 0x20), "%s: Function content does not match!\n", func_name);
  
          if (!strcmp(func_name, "NtSetEvent"))
-@@ -1651,10 +1652,11 @@ todo_wine
+@@ -1652,10 +1653,11 @@ todo_wine
          ok(event != NULL, "CreateEvent failed with error %u\n", GetLastError());
          pNtSetEvent(event, 0);
          ok(WaitForSingleObject(event, 0) == WAIT_OBJECT_0, "Event was not signaled\n");
@@ -62,10 +62,10 @@ index 926fa913866..902907329c0 100644
      CloseHandle(map);
      CloseHandle(file);
 diff --git a/dlls/ntdll/loader.c b/dlls/ntdll/loader.c
-index 26c540050dc..09d3870c31a 100644
+index cac6aae2f3dd..51d989f30b45 100644
 --- a/dlls/ntdll/loader.c
 +++ b/dlls/ntdll/loader.c
-@@ -3811,6 +3811,7 @@ PIMAGE_NT_HEADERS WINAPI RtlImageNtHeader(HMODULE hModule)
+@@ -4022,6 +4022,7 @@ PIMAGE_NT_HEADERS WINAPI RtlImageNtHeader(HMODULE hModule)
  }
  
  extern void DECLSPEC_NORETURN __wine_syscall_dispatcher( void );
@@ -73,7 +73,7 @@ index 26c540050dc..09d3870c31a 100644
  
  /******************************************************************
   *		LdrInitializeThunk (NTDLL.@)
-@@ -3828,6 +3829,7 @@ void WINAPI LdrInitializeThunk( CONTEXT *context, void **entry, ULONG_PTR unknow
+@@ -4040,6 +4041,7 @@ void WINAPI LdrInitializeThunk( CONTEXT *context, void **entry, ULONG_PTR unknow
      LPCWSTR load_path = NtCurrentTeb()->Peb->ProcessParameters->DllPath.Buffer;
  
      NtCurrentTeb()->WOW32Reserved = __wine_syscall_dispatcher;
@@ -82,12 +82,12 @@ index 26c540050dc..09d3870c31a 100644
      if (process_detaching) return;
  
 diff --git a/dlls/ntdll/thread.c b/dlls/ntdll/thread.c
-index fa10cdf1062..4840f527e59 100644
+index e93498b27ea0..a14e3a12ae0c 100644
 --- a/dlls/ntdll/thread.c
 +++ b/dlls/ntdll/thread.c
-@@ -172,6 +172,39 @@ int __cdecl __wine_dbg_output( const char *str )
- 
- extern void DECLSPEC_NORETURN __wine_syscall_dispatcher( void );
+@@ -229,6 +229,39 @@ void __wine_syscall_dispatcher( void )
+ }
+ #endif
  
 +void *WINAPI __wine_fakedll_dispatcher( const char *module, ULONG ord )
 +{
@@ -125,7 +125,7 @@ index fa10cdf1062..4840f527e59 100644
  /***********************************************************************
   *           thread_init
   *
-@@ -183,6 +216,7 @@ TEB *thread_init( SIZE_T *info_size, BOOL *suspend )
+@@ -240,6 +273,7 @@ TEB *thread_init( SIZE_T *info_size, BOOL *suspend )
  {
      TEB *teb = unix_funcs->init_threading( &nb_threads, &__wine_ldt_copy, info_size, suspend, &server_cpus,
                                             &is_wow64, &server_start_time, __wine_syscall_dispatcher );
@@ -134,10 +134,10 @@ index fa10cdf1062..4840f527e59 100644
      peb = teb->Peb;
      peb->FastPebLock        = &peb_lock;
 diff --git a/include/winternl.h b/include/winternl.h
-index f2da9157aab..ce8021af503 100644
+index 0c15a0ee6c34..6da672e979e5 100644
 --- a/include/winternl.h
 +++ b/include/winternl.h
-@@ -398,7 +398,7 @@ typedef struct _TEB
+@@ -399,7 +399,7 @@ typedef struct _TEB
      PVOID                        Instrumentation[16];               /* f2c/16b8 */
      PVOID                        WinSockData;                       /* f6c/1738 */
      ULONG                        GdiBatchCount;                     /* f70/1740 */
@@ -147,7 +147,7 @@ index f2da9157aab..ce8021af503 100644
      PVOID                        ReservedForPerf;                   /* f7c/1750 */
      PVOID                        ReservedForOle;                    /* f80/1758 */
 diff --git a/tools/winebuild/build.h b/tools/winebuild/build.h
-index 8930df408d3..44113bad28a 100644
+index 8930df408d3b..44113bad28af 100644
 --- a/tools/winebuild/build.h
 +++ b/tools/winebuild/build.h
 @@ -358,6 +358,7 @@ extern void put_word( unsigned short val );
@@ -159,7 +159,7 @@ index 8930df408d3..44113bad28a 100644
  extern void align_output_rva( unsigned int file_align, unsigned int rva_align );
  extern size_t label_pos( const char *name );
 diff --git a/tools/winebuild/spec32.c b/tools/winebuild/spec32.c
-index c38f1fe663c..bf82ca497c0 100644
+index c38f1fe663c7..bf82ca497c0d 100644
 --- a/tools/winebuild/spec32.c
 +++ b/tools/winebuild/spec32.c
 @@ -843,6 +843,163 @@ void output_spec32_file( DLLSPEC *spec )
@@ -415,7 +415,7 @@ index c38f1fe663c..bf82ca497c0 100644
      /* .reloc contents */
      align_output_rva( file_align, section_align );
 diff --git a/tools/winebuild/utils.c b/tools/winebuild/utils.c
-index 80dec6db29e..d394a1382c6 100644
+index 80dec6db29ea..d394a1382c68 100644
 --- a/tools/winebuild/utils.c
 +++ b/tools/winebuild/utils.c
 @@ -549,7 +549,7 @@ size_t output_buffer_size;
diff --git a/patches/winebuild-Fake_Dlls/0006-winebuild-Add-syscall-thunks-in-fake-dlls.patch b/patches/winebuild-Fake_Dlls/0006-winebuild-Add-syscall-thunks-in-fake-dlls.patch
index 5ae2b3deb..13f46d6b0 100644
--- a/patches/winebuild-Fake_Dlls/0006-winebuild-Add-syscall-thunks-in-fake-dlls.patch
+++ b/patches/winebuild-Fake_Dlls/0006-winebuild-Add-syscall-thunks-in-fake-dlls.patch
@@ -1,4 +1,4 @@
-From 84a9f7b8192d7735108da2d7e81cf63faef97c13 Mon Sep 17 00:00:00 2001
+From fd72d405abba827ab5e2603551d48200aedad3ce Mon Sep 17 00:00:00 2001
 From: =?UTF-8?q?Michael=20M=C3=BCller?= <michael@fds-team.de>
 Date: Mon, 15 May 2017 17:56:48 +0200
 Subject: [PATCH] winebuild: Add syscall thunks in fake dlls.
@@ -9,10 +9,10 @@ Subject: [PATCH] winebuild: Add syscall thunks in fake dlls.
  2 files changed, 25 insertions(+), 3 deletions(-)
 
 diff --git a/dlls/kernel32/tests/loader.c b/dlls/kernel32/tests/loader.c
-index ec173c94a8e..a3bed8b310b 100644
+index 182b61b731a2..98369c7d508c 100644
 --- a/dlls/kernel32/tests/loader.c
 +++ b/dlls/kernel32/tests/loader.c
-@@ -1602,7 +1602,6 @@ static void test_FakeDLL(void)
+@@ -1639,7 +1639,6 @@ static void test_FakeDLL(void)
  
          /* check function content */
          map_func = RVAToAddr(map_rva, ptr);
@@ -21,7 +21,7 @@ index ec173c94a8e..a3bed8b310b 100644
  
          if (!strcmp(func_name, "NtSetEvent"))
 diff --git a/tools/winebuild/spec32.c b/tools/winebuild/spec32.c
-index bf82ca497c0..6968e41260f 100644
+index bf82ca497c0d..6968e41260f1 100644
 --- a/tools/winebuild/spec32.c
 +++ b/tools/winebuild/spec32.c
 @@ -860,13 +860,36 @@ static void create_stub_exports_text( DLLSPEC *spec )
diff --git a/patches/winebuild-Fake_Dlls/0007-winebuild-Fix-size-of-relocation-information-in-fake.patch b/patches/winebuild-Fake_Dlls/0007-winebuild-Fix-size-of-relocation-information-in-fake.patch
index 92a7161de..3b3745ed6 100644
--- a/patches/winebuild-Fake_Dlls/0007-winebuild-Fix-size-of-relocation-information-in-fake.patch
+++ b/patches/winebuild-Fake_Dlls/0007-winebuild-Fix-size-of-relocation-information-in-fake.patch
@@ -1,4 +1,4 @@
-From d77c31b1567bfbde1ce4ceb526ad596d0be3e788 Mon Sep 17 00:00:00 2001
+From f92fc0572be02ce2eee2a9cbf60724372678a5af Mon Sep 17 00:00:00 2001
 From: =?UTF-8?q?Michael=20M=C3=BCller?= <michael@fds-team.de>
 Date: Thu, 25 May 2017 03:22:25 +0200
 Subject: [PATCH] winebuild: Fix size of relocation information in fake dlls.
@@ -8,7 +8,7 @@ Subject: [PATCH] winebuild: Fix size of relocation information in fake dlls.
  1 file changed, 2 insertions(+), 2 deletions(-)
 
 diff --git a/tools/winebuild/spec32.c b/tools/winebuild/spec32.c
-index 6968e41260f..f95b45b9a0d 100644
+index 6968e41260f1..f95b45b9a0d5 100644
 --- a/tools/winebuild/spec32.c
 +++ b/tools/winebuild/spec32.c
 @@ -1238,8 +1238,8 @@ static void output_fake_module_pass( DLLSPEC *spec )
diff --git a/patches/winebuild-Fake_Dlls/0008-winebuild-Try-to-make-sure-RVA-matches-between-fake-.patch b/patches/winebuild-Fake_Dlls/0008-winebuild-Try-to-make-sure-RVA-matches-between-fake-.patch
index c4f1fb004..2cb4b7cf1 100644
--- a/patches/winebuild-Fake_Dlls/0008-winebuild-Try-to-make-sure-RVA-matches-between-fake-.patch
+++ b/patches/winebuild-Fake_Dlls/0008-winebuild-Try-to-make-sure-RVA-matches-between-fake-.patch
@@ -1,4 +1,4 @@
-From afa59bbabca36f306e9db4c1b080a250c4a919ea Mon Sep 17 00:00:00 2001
+From 59efee63a7442dfee4d9e76b11f651a11a4b523e Mon Sep 17 00:00:00 2001
 From: =?UTF-8?q?Michael=20M=C3=BCller?= <michael@fds-team.de>
 Date: Thu, 25 May 2017 21:46:27 +0200
 Subject: [PATCH] winebuild: Try to make sure RVA matches between fake and
@@ -11,10 +11,10 @@ Subject: [PATCH] winebuild: Try to make sure RVA matches between fake and
  3 files changed, 26 insertions(+), 5 deletions(-)
 
 diff --git a/dlls/kernel32/tests/loader.c b/dlls/kernel32/tests/loader.c
-index a3bed8b310b..8b5a345b086 100644
+index 98369c7d508c..77e73b3ca37b 100644
 --- a/dlls/kernel32/tests/loader.c
 +++ b/dlls/kernel32/tests/loader.c
-@@ -1589,7 +1589,6 @@ static void test_FakeDLL(void)
+@@ -1626,7 +1626,6 @@ static void test_FakeDLL(void)
          /* check position in memory */
          dll_rva = (DWORD_PTR)dll_func - (DWORD_PTR)module;
          map_rva = funcs[ordinals[i]];
@@ -23,7 +23,7 @@ index a3bed8b310b..8b5a345b086 100644
             func_name, dll_rva, map_rva);
  
 diff --git a/libs/wine/loader.c b/libs/wine/loader.c
-index c3b59d90224..b6847ca77b3 100644
+index c3b59d902243..b6847ca77b31 100644
 --- a/libs/wine/loader.c
 +++ b/libs/wine/loader.c
 @@ -335,8 +335,12 @@ static void *map_dll( const IMAGE_NT_HEADERS *nt_descr )
@@ -54,7 +54,7 @@ index c3b59d90224..b6847ca77b3 100644
  
      memcpy( sec->Name, ".text", sizeof(".text") );
 diff --git a/tools/winebuild/spec32.c b/tools/winebuild/spec32.c
-index f95b45b9a0d..07d6eed05fc 100644
+index f95b45b9a0d5..07d6eed05fcc 100644
 --- a/tools/winebuild/spec32.c
 +++ b/tools/winebuild/spec32.c
 @@ -381,14 +381,25 @@ static void output_relay_debug( DLLSPEC *spec )
diff --git a/patches/winebuild-Fake_Dlls/0009-libs-wine-Use-same-file-alignment-for-fake-and-built.patch b/patches/winebuild-Fake_Dlls/0009-libs-wine-Use-same-file-alignment-for-fake-and-built.patch
index e0ae33a59..9113beb5f 100644
--- a/patches/winebuild-Fake_Dlls/0009-libs-wine-Use-same-file-alignment-for-fake-and-built.patch
+++ b/patches/winebuild-Fake_Dlls/0009-libs-wine-Use-same-file-alignment-for-fake-and-built.patch
@@ -1,4 +1,4 @@
-From 29478273c4db90d209ac5afbdc1dd80add3d2c7e Mon Sep 17 00:00:00 2001
+From 370eccb19c65a8b02abfa31a76651ae533dda22f Mon Sep 17 00:00:00 2001
 From: =?UTF-8?q?Michael=20M=C3=BCller?= <michael@fds-team.de>
 Date: Thu, 25 May 2017 21:56:06 +0200
 Subject: [PATCH] libs/wine: Use same file alignment for fake and builtin DLLs.
@@ -9,10 +9,10 @@ Subject: [PATCH] libs/wine: Use same file alignment for fake and builtin DLLs.
  2 files changed, 1 insertion(+), 2 deletions(-)
 
 diff --git a/dlls/kernel32/tests/loader.c b/dlls/kernel32/tests/loader.c
-index 8b5a345b086..5373dc4efe1 100644
+index 77e73b3ca37b..1f525194ce73 100644
 --- a/dlls/kernel32/tests/loader.c
 +++ b/dlls/kernel32/tests/loader.c
-@@ -1595,7 +1595,6 @@ static void test_FakeDLL(void)
+@@ -1632,7 +1632,6 @@ static void test_FakeDLL(void)
          /* check position in file */
          map_offset = (DWORD_PTR)RtlImageRvaToVa(RtlImageNtHeader(ptr),    ptr,    map_rva, NULL) - (DWORD_PTR)ptr;
          dll_offset = (DWORD_PTR)RtlImageRvaToVa(RtlImageNtHeader(module), module, dll_rva, NULL) - (DWORD_PTR)module;
@@ -21,7 +21,7 @@ index 8b5a345b086..5373dc4efe1 100644
             func_name, map_offset, dll_offset);
  
 diff --git a/libs/wine/loader.c b/libs/wine/loader.c
-index b6847ca77b3..4597a6cb324 100644
+index b6847ca77b31..4597a6cb3243 100644
 --- a/libs/wine/loader.c
 +++ b/libs/wine/loader.c
 @@ -398,7 +398,7 @@ static void *map_dll( const IMAGE_NT_HEADERS *nt_descr )
diff --git a/patches/winebuild-Fake_Dlls/0010-tools-winebuild-Add-syscall-thunks-for-64-bit.patch b/patches/winebuild-Fake_Dlls/0010-tools-winebuild-Add-syscall-thunks-for-64-bit.patch
index 6024e5a2f..e40a80148 100644
--- a/patches/winebuild-Fake_Dlls/0010-tools-winebuild-Add-syscall-thunks-for-64-bit.patch
+++ b/patches/winebuild-Fake_Dlls/0010-tools-winebuild-Add-syscall-thunks-for-64-bit.patch
@@ -1,4 +1,4 @@
-From a5b4feebd008daab008f72567fe0001da619030e Mon Sep 17 00:00:00 2001
+From 6f1973aa2aee35139ae041e59d37a45ff22dc5bf Mon Sep 17 00:00:00 2001
 From: =?UTF-8?q?Michael=20M=C3=BCller?= <michael@fds-team.de>
 Date: Thu, 7 Sep 2017 00:38:09 +0200
 Subject: [PATCH] tools/winebuild: Add syscall thunks for 64 bit.
@@ -7,18 +7,18 @@ Subject: [PATCH] tools/winebuild: Add syscall thunks for 64 bit.
  dlls/kernel32/tests/loader.c   |   7 +-
  dlls/ntdll/unix/thread.c       |   2 +-
  dlls/ntdll/unix/unix_private.h |   2 +-
- dlls/ntdll/unix/virtual.c      |  12 +-
+ dlls/ntdll/unix/virtual.c      |  11 +-
  libs/wine/loader.c             |   4 +
  server/mapping.c               |   6 +-
  tools/winebuild/parser.c       |   2 +-
  tools/winebuild/spec32.c       | 285 ++++++++++++++++++++++++++++++++-
- 8 files changed, 306 insertions(+), 14 deletions(-)
+ 8 files changed, 305 insertions(+), 14 deletions(-)
 
 diff --git a/dlls/kernel32/tests/loader.c b/dlls/kernel32/tests/loader.c
-index 95939ba6bde..ae5462f6e55 100644
+index 1f525194ce73..21af7b4ce7a4 100644
 --- a/dlls/kernel32/tests/loader.c
 +++ b/dlls/kernel32/tests/loader.c
-@@ -1573,7 +1573,7 @@ static void test_filenames(void)
+@@ -1574,7 +1574,7 @@ static void test_filenames(void)
  
  static void test_FakeDLL(void)
  {
@@ -27,7 +27,7 @@ index 95939ba6bde..ae5462f6e55 100644
      NTSTATUS (WINAPI *pNtSetEvent)(HANDLE, ULONG *) = NULL;
      IMAGE_EXPORT_DIRECTORY *dir;
      HMODULE module = GetModuleHandleA("ntdll.dll");
-@@ -1615,8 +1615,13 @@ static void test_FakeDLL(void)
+@@ -1616,8 +1616,13 @@ static void test_FakeDLL(void)
  
          dll_func = (BYTE *)GetProcAddress(module, func_name);
          ok(dll_func != NULL, "%s: GetProcAddress returned NULL\n", func_name);
@@ -42,7 +42,7 @@ index 95939ba6bde..ae5462f6e55 100644
              todo_wine ok(0, "%s: Export is a stub-function, skipping\n", func_name);
              continue;
 diff --git a/dlls/ntdll/unix/thread.c b/dlls/ntdll/unix/thread.c
-index 2dbaa43e731..e1da90222d3 100644
+index 2dbaa43e731a..e1da90222d38 100644
 --- a/dlls/ntdll/unix/thread.c
 +++ b/dlls/ntdll/unix/thread.c
 @@ -110,7 +110,7 @@ TEB * CDECL init_threading( int *nb_threads_ptr, struct ldt_copy **ldt_copy, SIZ
@@ -55,10 +55,10 @@ index 2dbaa43e731..e1da90222d3 100644
  
      if (size) *size = info_size;
 diff --git a/dlls/ntdll/unix/unix_private.h b/dlls/ntdll/unix/unix_private.h
-index a1c48a52606..9c9e5b80b0c 100644
+index 33a551e947c2..d06f366d3c6d 100644
 --- a/dlls/ntdll/unix/unix_private.h
 +++ b/dlls/ntdll/unix/unix_private.h
-@@ -152,7 +152,7 @@ extern void virtual_init(void) DECLSPEC_HIDDEN;
+@@ -153,7 +153,7 @@ extern void virtual_init(void) DECLSPEC_HIDDEN;
  extern TEB *virtual_alloc_first_teb(void) DECLSPEC_HIDDEN;
  extern NTSTATUS virtual_alloc_teb( TEB **ret_teb ) DECLSPEC_HIDDEN;
  extern void virtual_free_teb( TEB *teb ) DECLSPEC_HIDDEN;
@@ -68,10 +68,10 @@ index a1c48a52606..9c9e5b80b0c 100644
  extern BOOL virtual_is_valid_code_address( const void *addr, SIZE_T size ) DECLSPEC_HIDDEN;
  extern int virtual_handle_stack_fault( void *addr ) DECLSPEC_HIDDEN;
 diff --git a/dlls/ntdll/unix/virtual.c b/dlls/ntdll/unix/virtual.c
-index 660323d4dcc..a5e5cb8422d 100644
+index 9fb2ecd38ca3..ad11485d1cea 100644
 --- a/dlls/ntdll/unix/virtual.c
 +++ b/dlls/ntdll/unix/virtual.c
-@@ -2588,14 +2588,14 @@ TEB *virtual_alloc_first_teb(void)
+@@ -2772,14 +2772,14 @@ TEB *virtual_alloc_first_teb(void)
      TEB *teb;
      PEB *peb;
      NTSTATUS status;
@@ -88,12 +88,7 @@ index 660323d4dcc..a5e5cb8422d 100644
      if (status)
      {
          ERR( "wine: failed to map the shared user data: %08x\n", status );
-@@ -2787,11 +2787,12 @@ void virtual_clear_thread_stack( void *stack_end )
-     if (force_exec_prot) mprotect( stack, size, PROT_READ | PROT_WRITE | PROT_EXEC );
- }
- 
-+extern void DECLSPEC_NORETURN __wine_syscall_dispatcher( void );
- 
+@@ -2977,7 +2977,7 @@ void virtual_clear_thread_stack( void *stack_end )
  /***********************************************************************
   *           virtual_map_user_shared_data
   */
@@ -102,7 +97,7 @@ index 660323d4dcc..a5e5cb8422d 100644
  {
      static const WCHAR wine_usdW[] = {'\\','K','e','r','n','e','l','O','b','j','e','c','t','s',
                                        '\\','_','_','w','i','n','e','_','u','s','e','r','_','s','h','a','r','e','d','_','d','a','t','a',0};
-@@ -2814,6 +2815,11 @@ void virtual_map_user_shared_data(void)
+@@ -3000,6 +3000,11 @@ void virtual_map_user_shared_data(void)
          ERR( "failed to remap the process USD: %d\n", res );
          exit(1);
      }
@@ -115,7 +110,7 @@ index 660323d4dcc..a5e5cb8422d 100644
      NtClose( section );
  }
 diff --git a/libs/wine/loader.c b/libs/wine/loader.c
-index 4597a6cb324..3d0d75e9c6d 100644
+index 4597a6cb3243..3d0d75e9c6d3 100644
 --- a/libs/wine/loader.c
 +++ b/libs/wine/loader.c
 @@ -398,7 +398,11 @@ static void *map_dll( const IMAGE_NT_HEADERS *nt_descr )
@@ -131,7 +126,7 @@ index 4597a6cb324..3d0d75e9c6d 100644
      sec++;
  
 diff --git a/server/mapping.c b/server/mapping.c
-index 0941dd87c05..002f3215af2 100644
+index 0941dd87c05d..002f3215af2e 100644
 --- a/server/mapping.c
 +++ b/server/mapping.c
 @@ -964,7 +964,11 @@ struct object *create_user_data_mapping( struct object *root, const struct unico
@@ -148,7 +143,7 @@ index 0941dd87c05..002f3215af2 100644
  }
  
 diff --git a/tools/winebuild/parser.c b/tools/winebuild/parser.c
-index 74216f8bb6e..820516329a4 100644
+index 74216f8bb6e7..820516329a47 100644
 --- a/tools/winebuild/parser.c
 +++ b/tools/winebuild/parser.c
 @@ -545,7 +545,7 @@ static const char *parse_spec_flags( DLLSPEC *spec, ORDDEF *odp )
@@ -161,7 +156,7 @@ index 74216f8bb6e..820516329a4 100644
      if (odp->flags & (FLAG_FORWARD | FLAG_REGISTER))
          return 0;
 diff --git a/tools/winebuild/spec32.c b/tools/winebuild/spec32.c
-index 07d6eed05fc..9cc4698d0d7 100644
+index 07d6eed05fcc..9cc4698d0d7d 100644
 --- a/tools/winebuild/spec32.c
 +++ b/tools/winebuild/spec32.c
 @@ -375,11 +375,11 @@ static void output_relay_debug( DLLSPEC *spec )
diff --git a/patches/winebuild-Fake_Dlls/0011-ntdll-Call-NtOpenFile-through-syscall-thunk.patch b/patches/winebuild-Fake_Dlls/0011-ntdll-Call-NtOpenFile-through-syscall-thunk.patch
index 69ee26be8..c3e065b26 100644
--- a/patches/winebuild-Fake_Dlls/0011-ntdll-Call-NtOpenFile-through-syscall-thunk.patch
+++ b/patches/winebuild-Fake_Dlls/0011-ntdll-Call-NtOpenFile-through-syscall-thunk.patch
@@ -1,4 +1,4 @@
-From 659e192979eecfb59d1c1b26e8cea78c42300de5 Mon Sep 17 00:00:00 2001
+From feb53ed39179603391eff600ea59edc41407b238 Mon Sep 17 00:00:00 2001
 From: Paul Gofman <gofmanp@gmail.com>
 Date: Fri, 3 Jan 2020 17:39:08 +0300
 Subject: [PATCH] ntdll: Call NtOpenFile through syscall thunk.
@@ -15,10 +15,10 @@ Wine-Bug: https://bugs.winehq.org/show_bug.cgi?id=48410
  7 files changed, 16 insertions(+), 8 deletions(-)
 
 diff --git a/dlls/ntdll/actctx.c b/dlls/ntdll/actctx.c
-index 1ca794ae3e5..b3c13042adc 100644
+index a25cefa555ac..34ba0dc813c6 100644
 --- a/dlls/ntdll/actctx.c
 +++ b/dlls/ntdll/actctx.c
-@@ -2892,7 +2892,7 @@ static NTSTATUS open_nt_file( HANDLE *handle, UNICODE_STRING *name )
+@@ -2894,7 +2894,7 @@ static NTSTATUS open_nt_file( HANDLE *handle, UNICODE_STRING *name )
      attr.ObjectName = name;
      attr.SecurityDescriptor = NULL;
      attr.SecurityQualityOfService = NULL;
@@ -27,7 +27,7 @@ index 1ca794ae3e5..b3c13042adc 100644
  }
  
  static NTSTATUS get_manifest_in_module( struct actctx_loader* acl, struct assembly_identity* ai,
-@@ -3209,7 +3209,7 @@ static NTSTATUS lookup_winsxs(struct actctx_loader* acl, struct assembly_identit
+@@ -3211,7 +3211,7 @@ static NTSTATUS lookup_winsxs(struct actctx_loader* acl, struct assembly_identit
      attr.SecurityDescriptor = NULL;
      attr.SecurityQualityOfService = NULL;
  
@@ -37,10 +37,10 @@ index 1ca794ae3e5..b3c13042adc 100644
      {
          sxs_ai = *ai;
 diff --git a/dlls/ntdll/directory.c b/dlls/ntdll/directory.c
-index d18df38f626..69607a4fed9 100644
+index 18428658a5b5..7a9de26ccb0c 100644
 --- a/dlls/ntdll/directory.c
 +++ b/dlls/ntdll/directory.c
-@@ -2943,7 +2943,7 @@ NTSTATUS DIR_get_unix_cwd( char **cwd )
+@@ -3071,7 +3071,7 @@ NTSTATUS DIR_get_unix_cwd( char **cwd )
          attr.SecurityDescriptor = NULL;
          attr.SecurityQualityOfService = NULL;
  
@@ -50,10 +50,10 @@ index d18df38f626..69607a4fed9 100644
          RtlFreeUnicodeString( &dirW );
          if (status != STATUS_SUCCESS) goto done;
 diff --git a/dlls/ntdll/loader.c b/dlls/ntdll/loader.c
-index 0b8c28a0651..e48cd84cffd 100644
+index 51d989f30b45..8f1653b0d626 100644
 --- a/dlls/ntdll/loader.c
 +++ b/dlls/ntdll/loader.c
-@@ -2469,7 +2469,7 @@ static NTSTATUS open_dll_file( UNICODE_STRING *nt_name, WINE_MODREF **pwm,
+@@ -2521,7 +2521,7 @@ static NTSTATUS open_dll_file( UNICODE_STRING *nt_name, WINE_MODREF **pwm,
      attr.ObjectName = nt_name;
      attr.SecurityDescriptor = NULL;
      attr.SecurityQualityOfService = NULL;
@@ -63,10 +63,10 @@ index 0b8c28a0651..e48cd84cffd 100644
                                FILE_SYNCHRONOUS_IO_NONALERT | FILE_NON_DIRECTORY_FILE )))
      {
 diff --git a/dlls/ntdll/locale.c b/dlls/ntdll/locale.c
-index 0d0c1194d23..a1bf219ed0a 100644
+index 15ccdeb2e637..928edcb04e2c 100644
 --- a/dlls/ntdll/locale.c
 +++ b/dlls/ntdll/locale.c
-@@ -661,7 +661,7 @@ static NTSTATUS open_nls_data_file( ULONG type, ULONG id, HANDLE *file )
+@@ -660,7 +660,7 @@ static NTSTATUS open_nls_data_file( ULONG type, ULONG id, HANDLE *file )
          return STATUS_NO_MEMORY;
      valueW.Length = NTDLL_swprintf( valueW.Buffer, pathfmtW, dir, name ) * sizeof(WCHAR);
      InitializeObjectAttributes( &attr, &valueW, 0, 0, NULL );
@@ -75,7 +75,7 @@ index 0d0c1194d23..a1bf219ed0a 100644
      if (!status) TRACE( "found %s\n", debugstr_w( valueW.Buffer ));
      RtlFreeUnicodeString( &valueW );
      if (status != STATUS_OBJECT_NAME_NOT_FOUND && status != STATUS_OBJECT_PATH_NOT_FOUND) return status;
-@@ -685,7 +685,7 @@ static NTSTATUS open_nls_data_file( ULONG type, ULONG id, HANDLE *file )
+@@ -684,7 +684,7 @@ static NTSTATUS open_nls_data_file( ULONG type, ULONG id, HANDLE *file )
          wcscat( valueW.Buffer, name );
          valueW.Length = wcslen(valueW.Buffer) * sizeof(WCHAR);
          InitializeObjectAttributes( &attr, &valueW, 0, 0, NULL );
@@ -85,10 +85,10 @@ index 0d0c1194d23..a1bf219ed0a 100644
      }
      RtlFreeUnicodeString( &valueW );
 diff --git a/dlls/ntdll/ntdll_misc.h b/dlls/ntdll/ntdll_misc.h
-index 2e791b92f73..f8170793185 100644
+index 9091d1ae8c77..f8e81ae49eaf 100644
 --- a/dlls/ntdll/ntdll_misc.h
 +++ b/dlls/ntdll/ntdll_misc.h
-@@ -350,4 +350,12 @@ static inline void ascii_to_unicode( WCHAR *dst, const char *src, size_t len )
+@@ -329,4 +329,12 @@ static inline void ascii_to_unicode( WCHAR *dst, const char *src, size_t len )
      while (len--) *dst++ = (unsigned char)*src++;
  }
  
@@ -102,7 +102,7 @@ index 2e791b92f73..f8170793185 100644
 +
  #endif
 diff --git a/dlls/ntdll/path.c b/dlls/ntdll/path.c
-index 32e1f951af5..71ae44dd498 100644
+index 32e1f951af5c..71ae44dd4988 100644
 --- a/dlls/ntdll/path.c
 +++ b/dlls/ntdll/path.c
 @@ -1020,7 +1020,7 @@ NTSTATUS WINAPI RtlSetCurrentDirectory_U(const UNICODE_STRING* dir)
@@ -115,10 +115,10 @@ index 32e1f951af5..71ae44dd498 100644
      if (nts != STATUS_SUCCESS) goto out;
  
 diff --git a/dlls/ntdll/process.c b/dlls/ntdll/process.c
-index 60ee39765bf..70dfe6f768a 100644
+index 884141da060c..32a1f5107f06 100644
 --- a/dlls/ntdll/process.c
 +++ b/dlls/ntdll/process.c
-@@ -1281,7 +1281,7 @@ static NTSTATUS get_pe_file_info( UNICODE_STRING *path, ULONG attributes,
+@@ -1357,7 +1357,7 @@ static NTSTATUS get_pe_file_info( UNICODE_STRING *path, ULONG attributes,
  
      memset( info, 0, sizeof(*info) );
      InitializeObjectAttributes( &attr, path, attributes, 0, 0 );

From 938c0aa15547f151622dfdeb1f66507624248cf4 Mon Sep 17 00:00:00 2001
From: Alistair Leslie-Hughes <leslie_alistair@hotmail.com>
Date: Thu, 11 Jun 2020 08:44:26 +1000
Subject: [PATCH] Rebase against 343043153b44fa46a2081fa8a2c171eac7c8dab6.

---
 ...-support-for-creating-processes-usin.patch | 77 ++++++++-----------
 ...or-NtQuerySystemInformation-SystemMo.patch | 16 ++--
 patches/patchinstall.sh                       |  2 +-
 staging/upstream-commit                       |  2 +-
 4 files changed, 44 insertions(+), 53 deletions(-)

diff --git a/patches/advapi32-Token_Integrity_Level/0010-server-Implement-support-for-creating-processes-usin.patch b/patches/advapi32-Token_Integrity_Level/0010-server-Implement-support-for-creating-processes-usin.patch
index 3eafa10db..291992dfb 100644
--- a/patches/advapi32-Token_Integrity_Level/0010-server-Implement-support-for-creating-processes-usin.patch
+++ b/patches/advapi32-Token_Integrity_Level/0010-server-Implement-support-for-creating-processes-usin.patch
@@ -1,4 +1,4 @@
-From 51830c6683b199e79cb9e782ee51555054a4da7c Mon Sep 17 00:00:00 2001
+From 35487aacbfe53d2584e83d4f59e119577901d4ea Mon Sep 17 00:00:00 2001
 From: =?UTF-8?q?Michael=20M=C3=BCller?= <michael@fds-team.de>
 Date: Sun, 6 Aug 2017 02:08:05 +0200
 Subject: [PATCH] server: Implement support for creating processes using a
@@ -6,20 +6,20 @@ Subject: [PATCH] server: Implement support for creating processes using a
 
 ---
  dlls/kernelbase/process.c | 24 +++++++++++++-----------
- dlls/ntdll/process.c      |  3 ++-
+ dlls/ntdll/process.c      |  1 +
  server/process.c          | 39 +++++++++++++++++++++++++++++++++++----
  server/process.h          |  2 +-
  server/protocol.def       |  1 +
  server/request.c          |  2 +-
  server/security.h         |  2 ++
  server/token.c            | 11 +++++++++++
- 8 files changed, 66 insertions(+), 18 deletions(-)
+ 8 files changed, 65 insertions(+), 17 deletions(-)
 
 diff --git a/dlls/kernelbase/process.c b/dlls/kernelbase/process.c
-index a07dddb1f..99985ab89 100644
+index a3b168543fc..b5c8b47239d 100644
 --- a/dlls/kernelbase/process.c
 +++ b/dlls/kernelbase/process.c
-@@ -242,7 +242,7 @@ static RTL_USER_PROCESS_PARAMETERS *create_process_params( const WCHAR *filename
+@@ -244,7 +244,7 @@ static RTL_USER_PROCESS_PARAMETERS *create_process_params( const WCHAR *filename
  /***********************************************************************
   *           create_nt_process
   */
@@ -28,7 +28,7 @@ index a07dddb1f..99985ab89 100644
                                     BOOL inherit, DWORD flags, RTL_USER_PROCESS_PARAMETERS *params,
                                     RTL_USER_PROCESS_INFORMATION *info, HANDLE parent )
  {
-@@ -257,7 +257,7 @@ static NTSTATUS create_nt_process( SECURITY_ATTRIBUTES *psa, SECURITY_ATTRIBUTES
+@@ -259,7 +259,7 @@ static NTSTATUS create_nt_process( SECURITY_ATTRIBUTES *psa, SECURITY_ATTRIBUTES
          status = RtlCreateUserProcess( &nameW, OBJ_CASE_INSENSITIVE, params,
                                         psa ? psa->lpSecurityDescriptor : NULL,
                                         tsa ? tsa->lpSecurityDescriptor : NULL,
@@ -37,7 +37,7 @@ index a07dddb1f..99985ab89 100644
          RtlFreeUnicodeString( &nameW );
      }
      return status;
-@@ -267,7 +267,7 @@ static NTSTATUS create_nt_process( SECURITY_ATTRIBUTES *psa, SECURITY_ATTRIBUTES
+@@ -269,7 +269,7 @@ static NTSTATUS create_nt_process( SECURITY_ATTRIBUTES *psa, SECURITY_ATTRIBUTES
  /***********************************************************************
   *           create_vdm_process
   */
@@ -46,7 +46,7 @@ index a07dddb1f..99985ab89 100644
                                      BOOL inherit, DWORD flags, RTL_USER_PROCESS_PARAMETERS *params,
                                      RTL_USER_PROCESS_INFORMATION *info )
  {
-@@ -288,7 +288,7 @@ static NTSTATUS create_vdm_process( SECURITY_ATTRIBUTES *psa, SECURITY_ATTRIBUTE
+@@ -290,7 +290,7 @@ static NTSTATUS create_vdm_process( SECURITY_ATTRIBUTES *psa, SECURITY_ATTRIBUTE
                winevdm, params->ImagePathName.Buffer, params->CommandLine.Buffer );
      RtlInitUnicodeString( &params->ImagePathName, winevdm );
      RtlInitUnicodeString( &params->CommandLine, newcmdline );
@@ -55,7 +55,7 @@ index a07dddb1f..99985ab89 100644
      HeapFree( GetProcessHeap(), 0, newcmdline );
      return status;
  }
-@@ -297,7 +297,7 @@ static NTSTATUS create_vdm_process( SECURITY_ATTRIBUTES *psa, SECURITY_ATTRIBUTE
+@@ -299,7 +299,7 @@ static NTSTATUS create_vdm_process( SECURITY_ATTRIBUTES *psa, SECURITY_ATTRIBUTE
  /***********************************************************************
   *           create_cmd_process
   */
@@ -64,7 +64,7 @@ index a07dddb1f..99985ab89 100644
                                      BOOL inherit, DWORD flags, RTL_USER_PROCESS_PARAMETERS *params,
                                      RTL_USER_PROCESS_INFORMATION *info )
  {
-@@ -316,7 +316,7 @@ static NTSTATUS create_cmd_process( SECURITY_ATTRIBUTES *psa, SECURITY_ATTRIBUTE
+@@ -318,7 +318,7 @@ static NTSTATUS create_cmd_process( SECURITY_ATTRIBUTES *psa, SECURITY_ATTRIBUTE
      swprintf( newcmdline, len, L"%s /s/c \"%s\"", comspec, params->CommandLine.Buffer );
      RtlInitUnicodeString( &params->ImagePathName, comspec );
      RtlInitUnicodeString( &params->CommandLine, newcmdline );
@@ -73,7 +73,7 @@ index a07dddb1f..99985ab89 100644
      RtlFreeHeap( GetProcessHeap(), 0, newcmdline );
      return status;
  }
-@@ -448,7 +448,9 @@ BOOL WINAPI DECLSPEC_HOTPATCH CreateProcessInternalW( HANDLE token, const WCHAR
+@@ -450,7 +450,9 @@ BOOL WINAPI DECLSPEC_HOTPATCH CreateProcessInternalW( HANDLE token, const WCHAR
  
      TRACE( "app %s cmdline %s\n", debugstr_w(app_name), debugstr_w(cmd_line) );
  
@@ -84,7 +84,7 @@ index a07dddb1f..99985ab89 100644
      if (new_token) FIXME( "No support for returning created process token\n" );
  
      if (app_name)
-@@ -521,7 +523,7 @@ BOOL WINAPI DECLSPEC_HOTPATCH CreateProcessInternalW( HANDLE token, const WCHAR
+@@ -523,7 +525,7 @@ BOOL WINAPI DECLSPEC_HOTPATCH CreateProcessInternalW( HANDLE token, const WCHAR
          }
      }
  
@@ -93,7 +93,7 @@ index a07dddb1f..99985ab89 100644
      switch (status)
      {
      case STATUS_SUCCESS:
-@@ -530,7 +532,7 @@ BOOL WINAPI DECLSPEC_HOTPATCH CreateProcessInternalW( HANDLE token, const WCHAR
+@@ -532,7 +534,7 @@ BOOL WINAPI DECLSPEC_HOTPATCH CreateProcessInternalW( HANDLE token, const WCHAR
      case STATUS_INVALID_IMAGE_NE_FORMAT:
      case STATUS_INVALID_IMAGE_PROTECT:
          TRACE( "starting %s as Win16/DOS binary\n", debugstr_w(app_name) );
@@ -102,7 +102,7 @@ index a07dddb1f..99985ab89 100644
          break;
      case STATUS_INVALID_IMAGE_NOT_MZ:
          /* check for .com or .bat extension */
-@@ -538,12 +540,12 @@ BOOL WINAPI DECLSPEC_HOTPATCH CreateProcessInternalW( HANDLE token, const WCHAR
+@@ -540,12 +542,12 @@ BOOL WINAPI DECLSPEC_HOTPATCH CreateProcessInternalW( HANDLE token, const WCHAR
          if (!wcsicmp( p, L".com" ) || !wcsicmp( p, L".pif" ))
          {
              TRACE( "starting %s as DOS binary\n", debugstr_w(app_name) );
@@ -118,20 +118,11 @@ index a07dddb1f..99985ab89 100644
          break;
      }
 diff --git a/dlls/ntdll/process.c b/dlls/ntdll/process.c
-index f3d9079f8..2fa553091 100644
+index f7f1b7c68fd..66961530de1 100644
 --- a/dlls/ntdll/process.c
 +++ b/dlls/ntdll/process.c
-@@ -1667,7 +1667,7 @@ NTSTATUS WINAPI RtlCreateUserProcess( UNICODE_STRING *path, ULONG attributes,
-                                       RTL_USER_PROCESS_PARAMETERS *params,
-                                       SECURITY_DESCRIPTOR *process_descr,
-                                       SECURITY_DESCRIPTOR *thread_descr,
--                                      HANDLE parent, BOOLEAN inherit, HANDLE debug, HANDLE exception,
-+                                      HANDLE parent, BOOLEAN inherit, HANDLE debug, HANDLE token,
-                                       RTL_USER_PROCESS_INFORMATION *info )
- {
-     NTSTATUS status;
-@@ -1735,6 +1735,7 @@ NTSTATUS WINAPI RtlCreateUserProcess( UNICODE_STRING *path, ULONG attributes,
-         req->access         = PROCESS_ALL_ACCESS;
+@@ -1712,6 +1712,7 @@ NTSTATUS WINAPI NtCreateUserProcess( HANDLE *process_handle_ptr, HANDLE *thread_
+         req->access         = process_access;
          req->cpu            = pe_info.cpu;
          req->info_size      = startup_info_size;
 +        req->token          = wine_server_obj_handle( token );
@@ -139,10 +130,10 @@ index f3d9079f8..2fa553091 100644
          wine_server_add_data( req, startup_info, startup_info_size );
          wine_server_add_data( req, params->Environment, env_size );
 diff --git a/server/process.c b/server/process.c
-index d6f71a774..aa66814d8 100644
+index 52604ec4d61..047916ffd09 100644
 --- a/server/process.c
 +++ b/server/process.c
-@@ -491,7 +491,7 @@ static void start_sigkill_timer( struct process *process )
+@@ -499,7 +499,7 @@ static void start_sigkill_timer( struct process *process )
  /* create a new process */
  /* if the function fails the fd is closed */
  struct process *create_process( int fd, struct process *parent, int inherit_all,
@@ -151,7 +142,7 @@ index d6f71a774..aa66814d8 100644
  {
      struct process *process;
  
-@@ -568,7 +568,7 @@ struct process *create_process( int fd, struct process *parent, int inherit_all,
+@@ -576,7 +576,7 @@ struct process *create_process( int fd, struct process *parent, int inherit_all,
                                         : alloc_handle_table( process, 0 );
          /* Note: for security reasons, starting a new process does not attempt
           * to use the current impersonation token for the new process */
@@ -160,7 +151,7 @@ index d6f71a774..aa66814d8 100644
          process->affinity = parent->affinity;
      }
      if (!process->handles || !process->token) goto error;
-@@ -1124,6 +1124,7 @@ DECL_HANDLER(new_process)
+@@ -1132,6 +1132,7 @@ DECL_HANDLER(new_process)
      const struct security_descriptor *sd;
      const struct object_attributes *objattr = get_req_object_attributes( &sd, &name, NULL );
      struct process *process = NULL;
@@ -168,7 +159,7 @@ index d6f71a774..aa66814d8 100644
      struct process *parent;
      struct thread *parent_thread = current;
      int socket_fd = thread_get_inflight_fd( current, req->socket_fd );
-@@ -1177,10 +1178,39 @@ DECL_HANDLER(new_process)
+@@ -1185,10 +1186,39 @@ DECL_HANDLER(new_process)
          return;
      }
  
@@ -208,7 +199,7 @@ index d6f71a774..aa66814d8 100644
          release_object( parent );
          return;
      }
-@@ -1228,7 +1258,7 @@ DECL_HANDLER(new_process)
+@@ -1236,7 +1266,7 @@ DECL_HANDLER(new_process)
  #undef FIXUP_LEN
      }
  
@@ -217,7 +208,7 @@ index d6f71a774..aa66814d8 100644
  
      process->startup_info = (struct startup_info *)grab_object( info );
  
-@@ -1289,6 +1319,7 @@ DECL_HANDLER(new_process)
+@@ -1297,6 +1327,7 @@ DECL_HANDLER(new_process)
      reply->handle = alloc_handle_no_access_check( current->process, process, req->access, objattr->attributes );
  
   done:
@@ -225,7 +216,7 @@ index d6f71a774..aa66814d8 100644
      if (process) release_object( process );
      release_object( parent );
      release_object( info );
-@@ -1322,7 +1353,7 @@ DECL_HANDLER(exec_process)
+@@ -1330,7 +1361,7 @@ DECL_HANDLER(exec_process)
          close( socket_fd );
          return;
      }
@@ -235,7 +226,7 @@ index d6f71a774..aa66814d8 100644
      release_object( process );
  }
 diff --git a/server/process.h b/server/process.h
-index dfe5c4e52..61b83abf6 100644
+index dfe5c4e52d8..61b83abf693 100644
 --- a/server/process.h
 +++ b/server/process.h
 @@ -118,7 +118,7 @@ extern unsigned int alloc_ptid( void *ptr );
@@ -248,10 +239,10 @@ index dfe5c4e52..61b83abf6 100644
  extern struct thread *get_process_first_thread( struct process *process );
  extern struct process *get_process_from_id( process_id_t id );
 diff --git a/server/protocol.def b/server/protocol.def
-index 45ab670ea..c763da4ca 100644
+index 901c380b721..8c86967609f 100644
 --- a/server/protocol.def
 +++ b/server/protocol.def
-@@ -791,6 +791,7 @@ struct rawinput_device
+@@ -801,6 +801,7 @@ struct rawinput_device
      unsigned int access;         /* access rights for process object */
      client_cpu_t cpu;            /* CPU that the new process will use */
      data_size_t  info_size;      /* size of startup info */
@@ -260,7 +251,7 @@ index 45ab670ea..c763da4ca 100644
      VARARG(info,startup_info,info_size); /* startup information */
      VARARG(env,unicode_str);     /* environment for new process */
 diff --git a/server/request.c b/server/request.c
-index 200c2697d..f743b720a 100644
+index 4c1f30a5fe7..321bb6cfa81 100644
 --- a/server/request.c
 +++ b/server/request.c
 @@ -582,7 +582,7 @@ static void master_socket_poll_event( struct fd *fd, int event )
@@ -273,7 +264,7 @@ index 200c2697d..f743b720a 100644
              create_thread( -1, process, NULL );
              release_object( process );
 diff --git a/server/security.h b/server/security.h
-index 21e90ccf2..32dfe5f8d 100644
+index 21e90ccf23f..32dfe5f8db9 100644
 --- a/server/security.h
 +++ b/server/security.h
 @@ -67,6 +67,8 @@ extern const ACL *token_get_default_dacl( struct token *token );
@@ -286,10 +277,10 @@ index 21e90ccf2..32dfe5f8d 100644
  static inline const ACE_HEADER *ace_next( const ACE_HEADER *ace )
  {
 diff --git a/server/token.c b/server/token.c
-index 181219d21..858ec25d7 100644
+index 1c1d49989b3..2f466aa1b25 100644
 --- a/server/token.c
 +++ b/server/token.c
-@@ -845,6 +845,12 @@ int token_assign_label( struct token *token, PSID label )
+@@ -843,6 +843,12 @@ int token_assign_label( struct token *token, PSID label )
      return ret;
  }
  
@@ -302,7 +293,7 @@ index 181219d21..858ec25d7 100644
  struct token *token_create_admin( void )
  {
      struct token *token = NULL;
-@@ -1271,6 +1277,11 @@ const SID *token_get_primary_group( struct token *token )
+@@ -1269,6 +1275,11 @@ const SID *token_get_primary_group( struct token *token )
      return token->primary_group;
  }
  
@@ -315,5 +306,5 @@ index 181219d21..858ec25d7 100644
  {
      GENERIC_MAPPING mapping;
 -- 
-2.24.0
+2.26.2
 
diff --git a/patches/ntdll-SystemModuleInformation/0003-ntdll-Add-stub-for-NtQuerySystemInformation-SystemMo.patch b/patches/ntdll-SystemModuleInformation/0003-ntdll-Add-stub-for-NtQuerySystemInformation-SystemMo.patch
index ce26ca0c8..fd52fcfaf 100644
--- a/patches/ntdll-SystemModuleInformation/0003-ntdll-Add-stub-for-NtQuerySystemInformation-SystemMo.patch
+++ b/patches/ntdll-SystemModuleInformation/0003-ntdll-Add-stub-for-NtQuerySystemInformation-SystemMo.patch
@@ -1,4 +1,4 @@
-From dbe17b07a502aa2fc29f9e382adccf8bdc211824 Mon Sep 17 00:00:00 2001
+From 120d2e0cf3f75c087be14f65953980f5605f652e Mon Sep 17 00:00:00 2001
 From: Andrew Wesie <awesie@gmail.com>
 Date: Fri, 12 Apr 2019 20:06:08 -0500
 Subject: [PATCH] ntdll: Add stub for
@@ -10,10 +10,10 @@ Subject: [PATCH] ntdll: Add stub for
  2 files changed, 30 insertions(+)
 
 diff --git a/dlls/ntdll/nt.c b/dlls/ntdll/nt.c
-index ea740ac81..77b64cac0 100644
+index 3ce1b344dbd..935c6abec7f 100644
 --- a/dlls/ntdll/nt.c
 +++ b/dlls/ntdll/nt.c
-@@ -2622,6 +2622,27 @@ NTSTATUS WINAPI NtQuerySystemInformation(
+@@ -3008,6 +3008,27 @@ NTSTATUS WINAPI NtQuerySystemInformation(
              ret = STATUS_SUCCESS;
          }
          break;
@@ -42,12 +42,12 @@ index ea740ac81..77b64cac0 100644
          {
              struct handle_info *info;
 diff --git a/include/winternl.h b/include/winternl.h
-index 2b3fb947b..613f55701 100644
+index d315d68be8f..d2d1001897d 100644
 --- a/include/winternl.h
 +++ b/include/winternl.h
-@@ -2272,6 +2272,15 @@ typedef struct _SYSTEM_MODULE_INFORMATION
-     SYSTEM_MODULE       Modules[1]; /* FIXME: should be Modules[0] */
- } SYSTEM_MODULE_INFORMATION, *PSYSTEM_MODULE_INFORMATION;
+@@ -2478,6 +2478,15 @@ typedef struct _SYSTEM_MODULE_INFORMATION
+ #define PROCESS_CREATE_FLAGS_SUSPENDED              0x00000200
+ #define PROCESS_CREATE_FLAGS_EXTENDED_UNKNOWN       0x00000400
  
 +typedef struct _SYSTEM_MODULE_INFORMATION_EX
 +{
@@ -62,5 +62,5 @@ index 2b3fb947b..613f55701 100644
  #define THREAD_CREATE_FLAGS_SKIP_THREAD_ATTACH      0x00000002
  #define THREAD_CREATE_FLAGS_HIDE_FROM_DEBUGGER      0x00000004
 -- 
-2.21.0
+2.26.2
 

diff --git a/patches/advapi32-Token_Integrity_Level/0008-ntdll-Implement-process-token-elevation-through-mani.patch b/patches/advapi32-Token_Integrity_Level/0008-ntdll-Implement-process-token-elevation-through-mani.patch
index 60c16278d..46b146499 100644
--- a/patches/advapi32-Token_Integrity_Level/0008-ntdll-Implement-process-token-elevation-through-mani.patch
+++ b/patches/advapi32-Token_Integrity_Level/0008-ntdll-Implement-process-token-elevation-through-mani.patch
@@ -1,4 +1,4 @@
-From 0e9d9a6aa1b65dae1c8dc34d6d5fb27aa73f96ea Mon Sep 17 00:00:00 2001
+From 1f2b1bafabfd457836f18741f178b3745e129c36 Mon Sep 17 00:00:00 2001
 From: =?UTF-8?q?Michael=20M=C3=BCller?= <michael@fds-team.de>
 Date: Sat, 5 Aug 2017 03:39:55 +0200
 Subject: [PATCH] ntdll: Implement process token elevation through manifests.
@@ -12,10 +12,10 @@ Subject: [PATCH] ntdll: Implement process token elevation through manifests.
  5 files changed, 67 insertions(+)
 
 diff --git a/dlls/ntdll/loader.c b/dlls/ntdll/loader.c
-index 51addaaf983..71efed5fa32 100644
+index 0c8f05285c4..92ae87c6e6d 100644
 --- a/dlls/ntdll/loader.c
 +++ b/dlls/ntdll/loader.c
-@@ -3903,6 +3903,32 @@ void WINAPI LdrInitializeThunk( CONTEXT *context, void **entry, ULONG_PTR unknow
+@@ -3898,6 +3898,32 @@ void WINAPI LdrInitializeThunk( CONTEXT *context, void **entry, ULONG_PTR unknow
  }
  
  
@@ -48,15 +48,15 @@ index 51addaaf983..71efed5fa32 100644
  /***********************************************************************
   *           load_global_options
   */
-@@ -4363,6 +4389,7 @@ void __wine_process_init(void)
-                                       's','y','s','t','e','m','3','2','\\',
+@@ -4359,6 +4385,7 @@ void __wine_process_init(void)
                                        'k','e','r','n','e','l','3','2','.','d','l','l',0};
+     void (WINAPI *kernel32_start_process)(LPTHREAD_START_ROUTINE,void*) = NULL;
      RTL_USER_PROCESS_PARAMETERS *params;
 +    ACTIVATION_CONTEXT_RUN_LEVEL_INFORMATION runlevel;
      WINE_MODREF *wm;
      NTSTATUS status;
      ANSI_STRING func_name;
-@@ -4466,6 +4493,16 @@ void __wine_process_init(void)
+@@ -4453,6 +4480,16 @@ void __wine_process_init(void)
  
      unix_funcs->virtual_set_large_address_space();
  
@@ -74,10 +74,10 @@ index 51addaaf983..71efed5fa32 100644
      RemoveEntryList( &wm->ldr.InLoadOrderLinks );
      InsertHeadList( &peb->LdrData->InLoadOrderModuleList, &wm->ldr.InLoadOrderLinks );
 diff --git a/server/process.c b/server/process.c
-index 80a091b0c72..34010b301c3 100644
+index ac85cace95d..52604ec4d61 100644
 --- a/server/process.c
 +++ b/server/process.c
-@@ -1112,6 +1112,14 @@ struct process_snapshot *process_snap( int *count )
+@@ -1115,6 +1115,14 @@ struct process_snapshot *process_snap( int *count )
      return snapshot;
  }
  
@@ -105,10 +105,10 @@ index 5b83e111a6f..dfe5c4e52d8 100644
  /* console functions */
  extern void inherit_console( struct thread *parent_thread, struct process *parent,
 diff --git a/server/protocol.def b/server/protocol.def
-index d8618a5c964..89adc93305c 100644
+index 7315f8ac4ea..901c380b721 100644
 --- a/server/protocol.def
 +++ b/server/protocol.def
-@@ -3762,6 +3762,13 @@ struct handle_info
+@@ -3763,6 +3763,13 @@ struct handle_info
  @END
  
  
diff --git a/patches/ntdll-HashLinks/0001-ntdll-Implement-HashLinks-field-in-LDR-module-data.patch b/patches/ntdll-HashLinks/0001-ntdll-Implement-HashLinks-field-in-LDR-module-data.patch
index 0669eac85..ade275815 100644
--- a/patches/ntdll-HashLinks/0001-ntdll-Implement-HashLinks-field-in-LDR-module-data.patch
+++ b/patches/ntdll-HashLinks/0001-ntdll-Implement-HashLinks-field-in-LDR-module-data.patch
@@ -1,4 +1,4 @@
-From 875ab1e7ff6b708f15b07537a91406fe83dec681 Mon Sep 17 00:00:00 2001
+From 6f7c87fdffe6aca49a2795eb29821557f20858c2 Mon Sep 17 00:00:00 2001
 From: =?UTF-8?q?Michael=20M=C3=BCller?= <michael@fds-team.de>
 Date: Mon, 3 Apr 2017 05:30:27 +0200
 Subject: [PATCH] ntdll: Implement HashLinks field in LDR module data.
@@ -10,7 +10,7 @@ Subject: [PATCH] ntdll: Implement HashLinks field in LDR module data.
  3 files changed, 142 insertions(+), 1 deletion(-)
 
 diff --git a/dlls/kernel32/tests/loader.c b/dlls/kernel32/tests/loader.c
-index 5474d543248..2d382d4f326 100644
+index 4bafd0f6349..f8a65e10758 100644
 --- a/dlls/kernel32/tests/loader.c
 +++ b/dlls/kernel32/tests/loader.c
 @@ -30,6 +30,7 @@
@@ -21,7 +21,7 @@ index 5474d543248..2d382d4f326 100644
  #include "wine/test.h"
  #include "delayloadhandler.h"
  
-@@ -3934,6 +3935,79 @@ static void test_LoadPackagedLibrary(void)
+@@ -3970,6 +3971,79 @@ static void test_LoadPackagedLibrary(void)
              h, GetLastError());
  }
  
@@ -101,7 +101,7 @@ index 5474d543248..2d382d4f326 100644
  START_TEST(loader)
  {
      int argc;
-@@ -4006,10 +4080,12 @@ START_TEST(loader)
+@@ -4042,10 +4116,12 @@ START_TEST(loader)
      test_InMemoryOrderModuleList();
      test_LoadPackagedLibrary();
      test_wow64_redirection();
@@ -115,10 +115,10 @@ index 5474d543248..2d382d4f326 100644
      test_Loader();
  }
 diff --git a/dlls/ntdll/loader.c b/dlls/ntdll/loader.c
-index 35dc7e1eaa4..d1e5fdeb5b8 100644
+index 0c8f05285c4..ebbd910d6cd 100644
 --- a/dlls/ntdll/loader.c
 +++ b/dlls/ntdll/loader.c
-@@ -120,6 +120,9 @@ static const char * const reason_names[] =
+@@ -122,6 +122,9 @@ static const char * const reason_names[] =
  
  static const WCHAR dllW[] = {'.','d','l','l',0};
  
@@ -128,7 +128,7 @@ index 35dc7e1eaa4..d1e5fdeb5b8 100644
  /* internal representation of 32bit modules. per process. */
  typedef struct _wine_modref
  {
-@@ -460,6 +463,52 @@ static void call_ldr_notifications( ULONG reason, LDR_DATA_TABLE_ENTRY *module )
+@@ -462,6 +465,52 @@ static void call_ldr_notifications( ULONG reason, LDR_DATA_TABLE_ENTRY *module )
      }
  }
  
@@ -181,7 +181,7 @@ index 35dc7e1eaa4..d1e5fdeb5b8 100644
  /*************************************************************************
   *		get_modref
   *
-@@ -1225,7 +1274,12 @@ static WINE_MODREF *alloc_module( HMODULE hModule, const UNICODE_STRING *nt_name
+@@ -1227,7 +1276,12 @@ static WINE_MODREF *alloc_module( HMODULE hModule, const UNICODE_STRING *nt_name
                     &wm->ldr.InLoadOrderLinks);
      InsertTailList(&NtCurrentTeb()->Peb->LdrData->InMemoryOrderModuleList,
                     &wm->ldr.InMemoryOrderLinks);
@@ -194,7 +194,7 @@ index 35dc7e1eaa4..d1e5fdeb5b8 100644
  
      if (!(nt->OptionalHeader.DllCharacteristics & IMAGE_DLLCHARACTERISTICS_NX_COMPAT))
      {
-@@ -1850,6 +1904,7 @@ static NTSTATUS build_so_dll_module( const WCHAR *load_path, const UNICODE_STRIN
+@@ -1886,6 +1940,7 @@ static NTSTATUS build_so_dll_module( const WCHAR *load_path, const UNICODE_STRIN
              /* the module has only been inserted in the load & memory order lists */
              RemoveEntryList(&wm->ldr.InLoadOrderLinks);
              RemoveEntryList(&wm->ldr.InMemoryOrderLinks);
@@ -202,7 +202,7 @@ index 35dc7e1eaa4..d1e5fdeb5b8 100644
              /* FIXME: free the modref */
              return status;
          }
-@@ -2393,6 +2448,7 @@ static NTSTATUS load_native_dll( LPCWSTR load_path, const UNICODE_STRING *nt_nam
+@@ -2429,6 +2484,7 @@ static NTSTATUS load_native_dll( LPCWSTR load_path, const UNICODE_STRING *nt_nam
              /* the module has only be inserted in the load & memory order lists */
              RemoveEntryList(&wm->ldr.InLoadOrderLinks);
              RemoveEntryList(&wm->ldr.InMemoryOrderLinks);
@@ -210,7 +210,7 @@ index 35dc7e1eaa4..d1e5fdeb5b8 100644
  
              /* FIXME: there are several more dangling references
               * left. Including dlls loaded by this dll before the
-@@ -3609,6 +3665,7 @@ static void free_modref( WINE_MODREF *wm )
+@@ -3649,6 +3705,7 @@ static void free_modref( WINE_MODREF *wm )
  {
      RemoveEntryList(&wm->ldr.InLoadOrderLinks);
      RemoveEntryList(&wm->ldr.InMemoryOrderLinks);
@@ -218,7 +218,7 @@ index 35dc7e1eaa4..d1e5fdeb5b8 100644
      if (wm->ldr.InInitializationOrderLinks.Flink)
          RemoveEntryList(&wm->ldr.InInitializationOrderLinks);
  
-@@ -4333,6 +4390,7 @@ void __wine_process_init(void)
+@@ -4369,6 +4426,7 @@ void __wine_process_init(void)
      SIZE_T info_size;
      TEB *teb;
      PEB *peb;
@@ -226,7 +226,7 @@ index 35dc7e1eaa4..d1e5fdeb5b8 100644
  
      if (!unix_funcs) load_ntdll_so( ntdll_module, &__wine_spec_nt_header );
  
-@@ -4360,6 +4418,10 @@ void __wine_process_init(void)
+@@ -4389,6 +4447,10 @@ void __wine_process_init(void)
      load_global_options();
      version_init();
  
@@ -237,21 +237,21 @@ index 35dc7e1eaa4..d1e5fdeb5b8 100644
      /* setup the load callback and create ntdll modref */
      RtlInitUnicodeString( &nt_name, ntdllW );
      status = build_so_dll_module( params->DllPath.Buffer, &nt_name, ntdll_module, 0, &wm );
-@@ -4435,6 +4497,9 @@ void __wine_process_init(void)
+@@ -4464,6 +4526,9 @@ void __wine_process_init(void)
      teb->Tib.StackLimit = stack.StackLimit;
      teb->DeallocationStack = stack.DeallocationStack;
  
 +    /* the windows version was not set yet when ntdll and kernel32 were loaded */
 +    recompute_hash_map();
 +
-     server_init_process_done();
+     unix_funcs->server_init_process_done( kernel32_start_process );
  }
  
 diff --git a/include/winternl.h b/include/winternl.h
-index 9df1f0bb800..8625b192cf1 100644
+index acbce20c212..150a3777d4b 100644
 --- a/include/winternl.h
 +++ b/include/winternl.h
-@@ -2330,8 +2330,8 @@ typedef struct _LDR_DATA_TABLE_ENTRY
+@@ -2354,8 +2354,8 @@ typedef struct _LDR_DATA_TABLE_ENTRY
      ULONG               Flags;
      SHORT               LoadCount;
      SHORT               TlsIndex;
diff --git a/patches/ntdll-Interrupt-0x2e/0001-ntdll-Catch-windows-int-0x2e-syscall-on-i386.patch b/patches/ntdll-Interrupt-0x2e/0001-ntdll-Catch-windows-int-0x2e-syscall-on-i386.patch
index caf7f628c..8432d08a5 100644
--- a/patches/ntdll-Interrupt-0x2e/0001-ntdll-Catch-windows-int-0x2e-syscall-on-i386.patch
+++ b/patches/ntdll-Interrupt-0x2e/0001-ntdll-Catch-windows-int-0x2e-syscall-on-i386.patch
@@ -1,17 +1,17 @@
-From f15c706847288555a76b3827b09691b23d7ec57d Mon Sep 17 00:00:00 2001
+From 17b12b07aae111f5dde4f4dca3520ab93487b2aa Mon Sep 17 00:00:00 2001
 From: =?UTF-8?q?Michael=20M=C3=BCller?= <michael@fds-team.de>
 Date: Sun, 19 Mar 2017 19:08:34 +0100
 Subject: [PATCH] ntdll: Catch windows int 0x2e syscall on i386.
 
 ---
- dlls/ntdll/signal_i386.c | 5 +++++
+ dlls/ntdll/unix/signal_i386.c | 5 +++++
  1 file changed, 5 insertions(+)
 
-diff --git a/dlls/ntdll/signal_i386.c b/dlls/ntdll/signal_i386.c
-index 78d03f669d7..a134b6d54ab 100644
---- a/dlls/ntdll/signal_i386.c
-+++ b/dlls/ntdll/signal_i386.c
-@@ -1731,6 +1731,11 @@ static BOOL handle_interrupt( unsigned int interrupt, ucontext_t *sigcontext, st
+diff --git a/dlls/ntdll/unix/signal_i386.c b/dlls/ntdll/unix/signal_i386.c
+index 7ae4cda33a6..80fef44d055 100644
+--- a/dlls/ntdll/unix/signal_i386.c
++++ b/dlls/ntdll/unix/signal_i386.c
+@@ -1638,6 +1638,11 @@ static BOOL handle_interrupt( unsigned int interrupt, ucontext_t *sigcontext, st
          stack->rec.ExceptionInformation[2] = stack->context.Edx;
          setup_raise_exception( sigcontext, stack );
          return TRUE;
diff --git a/patches/ntdll-Syscall_Emulation/0001-ntdll-Support-x86_64-syscall-emulation.patch b/patches/ntdll-Syscall_Emulation/0001-ntdll-Support-x86_64-syscall-emulation.patch
index 0a39d4355..2e659ca0c 100644
--- a/patches/ntdll-Syscall_Emulation/0001-ntdll-Support-x86_64-syscall-emulation.patch
+++ b/patches/ntdll-Syscall_Emulation/0001-ntdll-Support-x86_64-syscall-emulation.patch
@@ -1,4 +1,4 @@
-From cd04d1910294b035bb3858b3ef1bb295aec3a732 Mon Sep 17 00:00:00 2001
+From 3c60ef5d082e5298b113cf0cc93fa2bb44deadba Mon Sep 17 00:00:00 2001
 From: Paul Gofman <pgofman@codeweavers.com>
 Date: Mon, 30 Dec 2019 13:27:53 +0300
 Subject: [PATCH] ntdll: Support x86_64 syscall emulation.
@@ -9,10 +9,10 @@ used in the applications (i. e., that the applications
 get the number from syscall thunks). Linux specific Seccomp
 is used for trapping syscalls.
 ---
- configure.ac               |   1 +
- dlls/ntdll/signal_x86_64.c | 111 +++++++++++++++++++++++++++++++++++++
- tools/winebuild/spec32.c   |   9 ++-
- 3 files changed, 119 insertions(+), 2 deletions(-)
+ configure.ac                    |   1 +
+ dlls/ntdll/unix/signal_x86_64.c | 109 ++++++++++++++++++++++++++++++++
+ tools/winebuild/spec32.c        |   9 ++-
+ 3 files changed, 117 insertions(+), 2 deletions(-)
 
 diff --git a/configure.ac b/configure.ac
 index e61a98455c3..4adeb52d225 100644
@@ -26,19 +26,19 @@ index e61a98455c3..4adeb52d225 100644
  	linux/serial.h \
  	linux/types.h \
  	linux/ucdrom.h \
-diff --git a/dlls/ntdll/signal_x86_64.c b/dlls/ntdll/signal_x86_64.c
-index dd8b45fa907..a5612abf2b1 100644
---- a/dlls/ntdll/signal_x86_64.c
-+++ b/dlls/ntdll/signal_x86_64.c
-@@ -24,6 +24,7 @@
+diff --git a/dlls/ntdll/unix/signal_x86_64.c b/dlls/ntdll/unix/signal_x86_64.c
+index 1d1b879310e..d4dda481127 100644
+--- a/dlls/ntdll/unix/signal_x86_64.c
++++ b/dlls/ntdll/unix/signal_x86_64.c
+@@ -28,6 +28,7 @@
  #include "wine/port.h"
  
  #include <assert.h>
 +#include <errno.h>
+ #include <pthread.h>
  #include <signal.h>
  #include <stdlib.h>
- #include <stdarg.h>
-@@ -59,6 +60,13 @@
+@@ -64,6 +65,13 @@
  # include <mach/mach.h>
  #endif
  
@@ -52,16 +52,16 @@ index dd8b45fa907..a5612abf2b1 100644
  #define NONAMELESSUNION
  #define NONAMELESSSTRUCT
  #include "ntstatus.h"
-@@ -76,6 +84,8 @@
+@@ -78,6 +86,8 @@
  
  WINE_DEFAULT_DEBUG_CHANNEL(seh);
  
 +extern void DECLSPEC_NORETURN __wine_syscall_dispatcher( void );
 +
- typedef struct _SCOPE_TABLE
- {
-     ULONG Count;
-@@ -2480,6 +2490,104 @@ static inline DWORD is_privileged_instr( CONTEXT *context )
+ /***********************************************************************
+  * signal context platform-specific definitions
+  */
+@@ -982,6 +992,104 @@ static inline DWORD is_privileged_instr( CONTEXT *context )
      return 0;
  }
  
@@ -166,13 +166,11 @@ index dd8b45fa907..a5612abf2b1 100644
  
  /***********************************************************************
   *           handle_interrupt
-@@ -2793,6 +2901,9 @@ void signal_init_process(void)
-     sig_act.sa_sigaction = trap_handler;
-     if (sigaction( SIGTRAP, &sig_act, NULL ) == -1) goto error;
- #endif
-+
+@@ -1431,6 +1539,7 @@ void signal_init_process(void)
+     if (sigaction( SIGSEGV, &sig_act, NULL ) == -1) goto error;
+     if (sigaction( SIGILL, &sig_act, NULL ) == -1) goto error;
+     if (sigaction( SIGBUS, &sig_act, NULL ) == -1) goto error;
 +    install_bpf(&sig_act);
-+
      return;
  
   error:
diff --git a/patches/ntdll-WRITECOPY/0003-ntdll-Setup-a-temporary-signal-handler-during-proces.patch b/patches/ntdll-WRITECOPY/0003-ntdll-Setup-a-temporary-signal-handler-during-proces.patch
index db0631234..e02f07486 100644
--- a/patches/ntdll-WRITECOPY/0003-ntdll-Setup-a-temporary-signal-handler-during-proces.patch
+++ b/patches/ntdll-WRITECOPY/0003-ntdll-Setup-a-temporary-signal-handler-during-proces.patch
@@ -1,36 +1,36 @@
-From bd60a4308f3ec1df20328887335b4c95f9be215d Mon Sep 17 00:00:00 2001
+From 42a9d6a0464a17831ae2c16df222f4de7638349e Mon Sep 17 00:00:00 2001
 From: =?UTF-8?q?Michael=20M=C3=BCller?= <michael@fds-team.de>
 Date: Sat, 4 Oct 2014 02:53:22 +0200
 Subject: [PATCH] ntdll: Setup a temporary signal handler during process
  startup to handle page faults. (v2)
 
 ---
- dlls/ntdll/ntdll_misc.h     |  1 +
- dlls/ntdll/signal_arm.c     |  6 +++++
- dlls/ntdll/signal_arm64.c   |  6 +++++
- dlls/ntdll/signal_i386.c    | 53 +++++++++++++++++++++++++++++++++++++
- dlls/ntdll/signal_powerpc.c |  6 +++++
- dlls/ntdll/signal_x86_64.c  |  6 +++++
- dlls/ntdll/thread.c         |  1 +
+ dlls/ntdll/unix/loader.c         |  1 +
+ dlls/ntdll/unix/signal_arm.c     |  6 ++++
+ dlls/ntdll/unix/signal_arm64.c   |  7 +++++
+ dlls/ntdll/unix/signal_i386.c    | 52 ++++++++++++++++++++++++++++++++
+ dlls/ntdll/unix/signal_powerpc.c |  6 ++++
+ dlls/ntdll/unix/signal_x86_64.c  |  6 ++++
+ dlls/ntdll/unix/unix_private.h   |  1 +
  7 files changed, 79 insertions(+)
 
-diff --git a/dlls/ntdll/ntdll_misc.h b/dlls/ntdll/ntdll_misc.h
-index 65c65cc02d8..63a4b597872 100644
---- a/dlls/ntdll/ntdll_misc.h
-+++ b/dlls/ntdll/ntdll_misc.h
-@@ -78,6 +78,7 @@ extern LPCSTR debugstr_ObjectAttributes(const OBJECT_ATTRIBUTES *oa) DECLSPEC_HI
- extern SIZE_T signal_stack_size DECLSPEC_HIDDEN;
- extern SIZE_T signal_stack_mask DECLSPEC_HIDDEN;
- extern void signal_init_process(void) DECLSPEC_HIDDEN;
-+extern void signal_init_early(void) DECLSPEC_HIDDEN;
- extern void version_init(void) DECLSPEC_HIDDEN;
- extern void debug_init(void) DECLSPEC_HIDDEN;
- extern TEB *thread_init( SIZE_T *info_size, BOOL *suspend ) DECLSPEC_HIDDEN;
-diff --git a/dlls/ntdll/signal_arm.c b/dlls/ntdll/signal_arm.c
-index a09848449a6..c6f7231fec6 100644
---- a/dlls/ntdll/signal_arm.c
-+++ b/dlls/ntdll/signal_arm.c
-@@ -792,6 +792,12 @@ void signal_init_process(void)
+diff --git a/dlls/ntdll/unix/loader.c b/dlls/ntdll/unix/loader.c
+index eac43ba42c4..48910dd4d50 100644
+--- a/dlls/ntdll/unix/loader.c
++++ b/dlls/ntdll/unix/loader.c
+@@ -1418,6 +1418,7 @@ void __wine_main( int argc, char *argv[], char *envp[] )
+ #endif
+ 
+     virtual_init();
++    signal_init_early();
+ 
+     module = load_ntdll();
+     fixup_ntdll_imports( &__wine_spec_nt_header, module );
+diff --git a/dlls/ntdll/unix/signal_arm.c b/dlls/ntdll/unix/signal_arm.c
+index 1ef3ff6618b..5e0b25cec5d 100644
+--- a/dlls/ntdll/unix/signal_arm.c
++++ b/dlls/ntdll/unix/signal_arm.c
+@@ -869,6 +869,12 @@ void signal_init_process(void)
      exit(1);
  }
  
@@ -42,13 +42,13 @@ index a09848449a6..c6f7231fec6 100644
 +}
  
  /***********************************************************************
-  *            RtlUnwind  (NTDLL.@)
-diff --git a/dlls/ntdll/signal_arm64.c b/dlls/ntdll/signal_arm64.c
-index a9a58a2e7ad..a9c6614794e 100644
---- a/dlls/ntdll/signal_arm64.c
-+++ b/dlls/ntdll/signal_arm64.c
-@@ -1047,6 +1047,12 @@ static void usr2_handler( int signal, siginfo_t *siginfo, void *sigcontext )
-     restore_context( context, sigcontext );
+  *           init_thread_context
+diff --git a/dlls/ntdll/unix/signal_arm64.c b/dlls/ntdll/unix/signal_arm64.c
+index 6c9083664e0..3a4e7d5b9cb 100644
+--- a/dlls/ntdll/unix/signal_arm64.c
++++ b/dlls/ntdll/unix/signal_arm64.c
+@@ -791,6 +791,13 @@ void signal_init_process(void)
+     exit(1);
  }
  
 +/**********************************************************************
@@ -57,14 +57,15 @@ index a9a58a2e7ad..a9c6614794e 100644
 +void signal_init_early(void)
 +{
 +}
- 
- /**********************************************************************
-  *		signal_init_process
-diff --git a/dlls/ntdll/signal_i386.c b/dlls/ntdll/signal_i386.c
-index 83868f25121..b048b2bc688 100644
---- a/dlls/ntdll/signal_i386.c
-+++ b/dlls/ntdll/signal_i386.c
-@@ -1575,6 +1575,31 @@ static BOOL handle_interrupt( unsigned int interrupt, ucontext_t *sigcontext, st
++
+ /***********************************************************************
+  *           init_thread_context
+  */
+diff --git a/dlls/ntdll/unix/signal_i386.c b/dlls/ntdll/unix/signal_i386.c
+index 7ae4cda33a6..1a86b6e05f3 100644
+--- a/dlls/ntdll/unix/signal_i386.c
++++ b/dlls/ntdll/unix/signal_i386.c
+@@ -1644,6 +1644,30 @@ static BOOL handle_interrupt( unsigned int interrupt, ucontext_t *sigcontext, st
  }
  
  
@@ -76,19 +77,18 @@ index 83868f25121..b048b2bc688 100644
 + */
 +static void segv_handler_early( int signal, siginfo_t *siginfo, void *sigcontext )
 +{
-+    WORD fs, gs;
 +    ucontext_t *context = sigcontext;
-+    init_handler( sigcontext, &fs, &gs );
++    init_handler( sigcontext );
 +
-+    switch(get_trap_code(context))
++    switch (TRAP_sig(context))
 +    {
 +    case TRAP_x86_PAGEFLT:  /* Page fault */
-+        if (!unix_funcs->virtual_handle_fault( siginfo->si_addr, (get_error_code(context) >> 1) & 0x09, TRUE ))
++        if (!virtual_handle_fault( siginfo->si_addr, (ERROR_sig(context) >> 1) & 0x09, TRUE ))
 +            return;
 +        /* fall-through */
 +    default:
-+        WINE_ERR( "Got unexpected trap %d during process initialization\n", get_trap_code(context) );
-+        unix_funcs->abort_thread(1);
++        WINE_ERR( "Got unexpected trap %d during process initialization\n", TRAP_sig(context) );
++        abort_thread(1);
 +        break;
 +    }
 +}
@@ -96,7 +96,7 @@ index 83868f25121..b048b2bc688 100644
  /**********************************************************************
   *		segv_handler
   *
-@@ -1883,6 +1908,34 @@ void signal_init_process(void)
+@@ -2243,6 +2267,34 @@ void signal_init_process(void)
      exit(1);
  }
  
@@ -129,14 +129,14 @@ index 83868f25121..b048b2bc688 100644
 +    exit(1);
 +}
  
- /*******************************************************************
-  *		RtlUnwind (NTDLL.@)
-diff --git a/dlls/ntdll/signal_powerpc.c b/dlls/ntdll/signal_powerpc.c
-index 879b2b58c49..f17d6267102 100644
---- a/dlls/ntdll/signal_powerpc.c
-+++ b/dlls/ntdll/signal_powerpc.c
-@@ -634,6 +634,12 @@ static void quit_handler( int signal, siginfo_t *siginfo, void *sigcontext )
-     unix_funcs->abort_thread(0);
+ /***********************************************************************
+  *           init_thread_context
+diff --git a/dlls/ntdll/unix/signal_powerpc.c b/dlls/ntdll/unix/signal_powerpc.c
+index f98d6fc9713..fdc5f66d092 100644
+--- a/dlls/ntdll/unix/signal_powerpc.c
++++ b/dlls/ntdll/unix/signal_powerpc.c
+@@ -978,6 +978,12 @@ void signal_init_process(void)
+     exit(1);
  }
  
 +/**********************************************************************
@@ -146,13 +146,13 @@ index 879b2b58c49..f17d6267102 100644
 +{
 +}
  
- /**********************************************************************
-  *		usr1_handler
-diff --git a/dlls/ntdll/signal_x86_64.c b/dlls/ntdll/signal_x86_64.c
-index c6b0fbf618d..bb481ba1b81 100644
---- a/dlls/ntdll/signal_x86_64.c
-+++ b/dlls/ntdll/signal_x86_64.c
-@@ -2777,6 +2777,12 @@ void signal_init_process(void)
+ /***********************************************************************
+  *           signal_exit_thread
+diff --git a/dlls/ntdll/unix/signal_x86_64.c b/dlls/ntdll/unix/signal_x86_64.c
+index d4a6e821a4c..98bd7bb8bed 100644
+--- a/dlls/ntdll/unix/signal_x86_64.c
++++ b/dlls/ntdll/unix/signal_x86_64.c
+@@ -1415,6 +1415,12 @@ void signal_init_process(void)
      exit(1);
  }
  
@@ -163,20 +163,20 @@ index c6b0fbf618d..bb481ba1b81 100644
 +{
 +}
  
- static ULONG64 get_int_reg( CONTEXT *context, int reg )
- {
-diff --git a/dlls/ntdll/thread.c b/dlls/ntdll/thread.c
-index d045466f6d2..49daa33ca58 100644
---- a/dlls/ntdll/thread.c
-+++ b/dlls/ntdll/thread.c
-@@ -186,6 +186,7 @@ TEB *thread_init( SIZE_T *info_size, BOOL *suspend )
-     TEB *teb;
- 
-     virtual_init();
-+    signal_init_early();
- 
-     teb = unix_funcs->init_threading( &nb_threads, &__wine_ldt_copy, info_size, suspend, &server_cpus,
-                                       &is_wow64, &server_start_time );
+ /***********************************************************************
+  *           init_thread_context
+diff --git a/dlls/ntdll/unix/unix_private.h b/dlls/ntdll/unix/unix_private.h
+index 3e61111cba5..1319ca90b96 100644
+--- a/dlls/ntdll/unix/unix_private.h
++++ b/dlls/ntdll/unix/unix_private.h
+@@ -163,6 +163,7 @@ extern NTSTATUS signal_alloc_thread( TEB *teb ) DECLSPEC_HIDDEN;
+ extern void signal_free_thread( TEB *teb ) DECLSPEC_HIDDEN;
+ extern void signal_init_thread( TEB *teb ) DECLSPEC_HIDDEN;
+ extern void signal_init_process(void) DECLSPEC_HIDDEN;
++extern void signal_init_early(void) DECLSPEC_HIDDEN;
+ extern void DECLSPEC_NORETURN signal_start_thread( PRTL_THREAD_START_ROUTINE entry, void *arg,
+                                                    BOOL suspend, void *relay, TEB *teb ) DECLSPEC_HIDDEN;
+ extern void DECLSPEC_NORETURN signal_exit_thread( int status, void (*func)(int) ) DECLSPEC_HIDDEN;
 -- 
 2.26.2
 
diff --git a/patches/ntdll-WRITECOPY/0006-ntdll-Support-WRITECOPY-on-x64.patch b/patches/ntdll-WRITECOPY/0006-ntdll-Support-WRITECOPY-on-x64.patch
index ad417ed94..7c03bd33d 100644
--- a/patches/ntdll-WRITECOPY/0006-ntdll-Support-WRITECOPY-on-x64.patch
+++ b/patches/ntdll-WRITECOPY/0006-ntdll-Support-WRITECOPY-on-x64.patch
@@ -1,19 +1,19 @@
-From aae6e8d097aaa6665a65ec6f896e37b445c371ea Mon Sep 17 00:00:00 2001
+From 38e1b3603dc067d91621b63d157edc339d8a33d8 Mon Sep 17 00:00:00 2001
 From: Andrew Wesie <awesie@gmail.com>
 Date: Fri, 24 Apr 2020 14:55:15 -0500
 Subject: [PATCH] ntdll: Support WRITECOPY on x64.
 
 Signed-off-by: Andrew Wesie <awesie@gmail.com>
 ---
- dlls/ntdll/signal_x86_64.c | 40 ++++++++++++++++++++++++++++++++++++++
- dlls/ntdll/unix/virtual.c  |  2 +-
+ dlls/ntdll/unix/signal_x86_64.c | 40 +++++++++++++++++++++++++++++++++
+ dlls/ntdll/unix/virtual.c       |  2 +-
  2 files changed, 41 insertions(+), 1 deletion(-)
 
-diff --git a/dlls/ntdll/signal_x86_64.c b/dlls/ntdll/signal_x86_64.c
-index 0eb58d3d149..8fdb800984c 100644
---- a/dlls/ntdll/signal_x86_64.c
-+++ b/dlls/ntdll/signal_x86_64.c
-@@ -2575,6 +2575,29 @@ static inline BOOL handle_interrupt( ucontext_t *sigcontext, struct stack_layout
+diff --git a/dlls/ntdll/unix/signal_x86_64.c b/dlls/ntdll/unix/signal_x86_64.c
+index 98bd7bb8bed..1d1b879310e 100644
+--- a/dlls/ntdll/unix/signal_x86_64.c
++++ b/dlls/ntdll/unix/signal_x86_64.c
+@@ -1019,6 +1019,29 @@ static inline BOOL handle_interrupt( ucontext_t *sigcontext, struct stack_layout
  }
  
  
@@ -30,12 +30,12 @@ index 0eb58d3d149..8fdb800984c 100644
 +    switch(TRAP_sig(ucontext))
 +    {
 +    case TRAP_x86_PAGEFLT:  /* Page fault */
-+        if (!unix_funcs->virtual_handle_fault( siginfo->si_addr, (ERROR_sig(ucontext) >> 1) & 0x09, TRUE ))
++        if (!virtual_handle_fault( siginfo->si_addr, (ERROR_sig(ucontext) >> 1) & 0x09, TRUE ))
 +            return;
 +        /* fall-through */
 +    default:
 +        WINE_ERR( "Got unexpected trap %lld during process initialization\n", TRAP_sig(ucontext) );
-+        unix_funcs->abort_thread(1);
++        abort_thread(1);
 +        break;
 +    }
 +}
@@ -43,7 +43,7 @@ index 0eb58d3d149..8fdb800984c 100644
  /**********************************************************************
   *		segv_handler
   *
-@@ -2855,6 +2878,23 @@ void signal_init_process(void)
+@@ -1420,6 +1443,23 @@ void signal_init_process(void)
   */
  void signal_init_early(void)
  {
@@ -66,12 +66,12 @@ index 0eb58d3d149..8fdb800984c 100644
 +    exit(1);
  }
  
- static ULONG64 get_int_reg( CONTEXT *context, int reg )
+ /***********************************************************************
 diff --git a/dlls/ntdll/unix/virtual.c b/dlls/ntdll/unix/virtual.c
-index c81104bd266..1072907ffdd 100644
+index b20eafb3334..c351c7db0e3 100644
 --- a/dlls/ntdll/unix/virtual.c
 +++ b/dlls/ntdll/unix/virtual.c
-@@ -816,7 +816,7 @@ static int get_unix_prot( BYTE vprot )
+@@ -818,7 +818,7 @@ static int get_unix_prot( BYTE vprot )
          if (vprot & VPROT_READ) prot |= PROT_READ;
          if (vprot & VPROT_WRITE) prot |= PROT_WRITE | PROT_READ;
          if (vprot & VPROT_EXEC) prot |= PROT_EXEC | PROT_READ;
diff --git a/patches/ntdll-x86_64_SegDs/0001-ntdll-Report-SegDs-to-be-identical-to-SegSs-on-x86_6.patch b/patches/ntdll-x86_64_SegDs/0001-ntdll-Report-SegDs-to-be-identical-to-SegSs-on-x86_6.patch
index 455a3be41..d07ca424d 100644
--- a/patches/ntdll-x86_64_SegDs/0001-ntdll-Report-SegDs-to-be-identical-to-SegSs-on-x86_6.patch
+++ b/patches/ntdll-x86_64_SegDs/0001-ntdll-Report-SegDs-to-be-identical-to-SegSs-on-x86_6.patch
@@ -1,4 +1,4 @@
-From 1178a02719088e81b2e5b35074b4559f60d8a5b1 Mon Sep 17 00:00:00 2001
+From 6fb2e6ef08a7cf1339b39fa753b29092fa76c3df Mon Sep 17 00:00:00 2001
 From: Zebediah Figura <z.figura12@gmail.com>
 Date: Thu, 21 Nov 2019 10:44:42 -0600
 Subject: [PATCH] ntdll: Report SegDs to be identical to SegSs on x86_64.
@@ -8,14 +8,14 @@ Based on a patch by David Torok.
 Wine-Bug: https://bugs.winehq.org/show_bug.cgi?id=47970
 Signed-off-by: Zebediah Figura <z.figura12@gmail.com>
 ---
- dlls/ntdll/signal_x86_64.c | 11 ++++++-----
+ dlls/ntdll/unix/signal_x86_64.c | 11 ++++++-----
  1 file changed, 6 insertions(+), 5 deletions(-)
 
-diff --git a/dlls/ntdll/signal_x86_64.c b/dlls/ntdll/signal_x86_64.c
-index c372f65b34b..a1797811da3 100644
---- a/dlls/ntdll/signal_x86_64.c
-+++ b/dlls/ntdll/signal_x86_64.c
-@@ -1699,11 +1699,6 @@ static void save_context( CONTEXT *context, const ucontext_t *sigcontext )
+diff --git a/dlls/ntdll/unix/signal_x86_64.c b/dlls/ntdll/unix/signal_x86_64.c
+index d4a6e821a4c..ebbef9d2fcd 100644
+--- a/dlls/ntdll/unix/signal_x86_64.c
++++ b/dlls/ntdll/unix/signal_x86_64.c
+@@ -348,11 +348,6 @@ static void save_context( CONTEXT *context, const ucontext_t *sigcontext )
      context->SegFs  = FS_sig(sigcontext);
      context->SegGs  = GS_sig(sigcontext);
      context->EFlags = EFL_sig(sigcontext);
@@ -27,7 +27,7 @@ index c372f65b34b..a1797811da3 100644
  #ifdef ES_sig
      context->SegEs  = ES_sig(sigcontext);
  #else
-@@ -1714,6 +1709,12 @@ static void save_context( CONTEXT *context, const ucontext_t *sigcontext )
+@@ -363,6 +358,12 @@ static void save_context( CONTEXT *context, const ucontext_t *sigcontext )
  #else
      __asm__("movw %%ss,%0" : "=m" (context->SegSs));
  #endif
@@ -41,5 +41,5 @@ index c372f65b34b..a1797811da3 100644
      context->Dr1    = amd64_thread_data()->dr1;
      context->Dr2    = amd64_thread_data()->dr2;
 -- 
-2.23.0
+2.26.2
 
diff --git a/patches/patchinstall.sh b/patches/patchinstall.sh
index 9c2ce4ce0..99f6e5be5 100755
--- a/patches/patchinstall.sh
+++ b/patches/patchinstall.sh
@@ -3657,10 +3657,10 @@ fi
 # | 	Empires II, MSYS2)
 # |
 # | Modified files:
-# |   *	dlls/advapi32/crypt.c, dlls/advapi32/tests/security.c, dlls/kernel32/tests/virtual.c, dlls/ntdll/ntdll_misc.h,
-# | 	dlls/ntdll/signal_arm.c, dlls/ntdll/signal_arm64.c, dlls/ntdll/signal_i386.c, dlls/ntdll/signal_powerpc.c,
-# | 	dlls/ntdll/signal_x86_64.c, dlls/ntdll/thread.c, dlls/ntdll/unix/server.c, dlls/ntdll/unix/virtual.c,
-# | 	dlls/psapi/tests/psapi_main.c
+# |   *	dlls/advapi32/crypt.c, dlls/advapi32/tests/security.c, dlls/kernel32/tests/virtual.c, dlls/ntdll/unix/loader.c,
+# | 	dlls/ntdll/unix/server.c, dlls/ntdll/unix/signal_arm.c, dlls/ntdll/unix/signal_arm64.c, dlls/ntdll/unix/signal_i386.c,
+# | 	dlls/ntdll/unix/signal_powerpc.c, dlls/ntdll/unix/signal_x86_64.c, dlls/ntdll/unix/unix_private.h,
+# | 	dlls/ntdll/unix/virtual.c, dlls/psapi/tests/psapi_main.c
 # |
 if test "$enable_ntdll_WRITECOPY" -eq 1; then
 	patch_apply ntdll-WRITECOPY/0001-ntdll-Trigger-write-watches-before-passing-userdata-.patch
@@ -3930,7 +3930,7 @@ fi
 # |   *	[#42647] Implement stub handler for int 0x2e
 # |
 # | Modified files:
-# |   *	dlls/ntdll/signal_i386.c
+# |   *	dlls/ntdll/unix/signal_i386.c
 # |
 if test "$enable_ntdll_Interrupt_0x2e" -eq 1; then
 	patch_apply ntdll-Interrupt-0x2e/0001-ntdll-Catch-windows-int-0x2e-syscall-on-i386.patch
@@ -4148,11 +4148,11 @@ fi
 # | 	dlls/krnl386.exe16/task.c, dlls/krnl386.exe16/thunk.c, dlls/krnl386.exe16/wowthunk.c, dlls/ntdll/actctx.c,
 # | 	dlls/ntdll/directory.c, dlls/ntdll/loader.c, dlls/ntdll/locale.c, dlls/ntdll/ntdll_misc.h, dlls/ntdll/path.c,
 # | 	dlls/ntdll/process.c, dlls/ntdll/signal_i386.c, dlls/ntdll/tests/exception.c, dlls/ntdll/thread.c,
-# | 	dlls/ntdll/unix/thread.c, dlls/ntdll/unix/unix_private.h, dlls/ntdll/unix/virtual.c, dlls/ntdll/unixlib.h,
-# | 	dlls/system.drv16/system.c, dlls/toolhelp.dll16/toolhelp.c, dlls/user.exe16/message.c, dlls/user.exe16/user.c,
-# | 	dlls/user.exe16/window.c, include/winternl.h, libs/wine/loader.c, server/mapping.c, tools/winebuild/build.h,
-# | 	tools/winebuild/import.c, tools/winebuild/parser.c, tools/winebuild/relay.c, tools/winebuild/res32.c,
-# | 	tools/winebuild/spec16.c, tools/winebuild/spec32.c, tools/winebuild/utils.c
+# | 	dlls/ntdll/unix/signal_i386.c, dlls/ntdll/unix/thread.c, dlls/ntdll/unix/unix_private.h, dlls/ntdll/unix/virtual.c,
+# | 	dlls/ntdll/unixlib.h, dlls/system.drv16/system.c, dlls/toolhelp.dll16/toolhelp.c, dlls/user.exe16/message.c,
+# | 	dlls/user.exe16/user.c, dlls/user.exe16/window.c, include/winternl.h, libs/wine/loader.c, server/mapping.c,
+# | 	tools/winebuild/build.h, tools/winebuild/import.c, tools/winebuild/parser.c, tools/winebuild/relay.c,
+# | 	tools/winebuild/res32.c, tools/winebuild/spec16.c, tools/winebuild/spec32.c, tools/winebuild/utils.c
 # |
 if test "$enable_winebuild_Fake_Dlls" -eq 1; then
 	patch_apply winebuild-Fake_Dlls/0001-kernel32-tests-Add-basic-tests-for-fake-dlls.patch
@@ -4190,7 +4190,7 @@ fi
 # |   *	[#48291] Detroit: Become Human crashes on launch
 # |
 # | Modified files:
-# |   *	configure.ac, dlls/ntdll/signal_x86_64.c, tools/winebuild/spec32.c
+# |   *	configure.ac, dlls/ntdll/unix/signal_x86_64.c, tools/winebuild/spec32.c
 # |
 if test "$enable_ntdll_Syscall_Emulation" -eq 1; then
 	patch_apply ntdll-Syscall_Emulation/0001-ntdll-Support-x86_64-syscall-emulation.patch
@@ -4371,7 +4371,7 @@ fi
 # |   *	[#47970] Legends of Runeterra crashes at launch
 # |
 # | Modified files:
-# |   *	dlls/ntdll/signal_x86_64.c
+# |   *	dlls/ntdll/unix/signal_x86_64.c
 # |
 if test "$enable_ntdll_x86_64_SegDs" -eq 1; then
 	patch_apply ntdll-x86_64_SegDs/0001-ntdll-Report-SegDs-to-be-identical-to-SegSs-on-x86_6.patch
 
diff --git a/patches/winebuild-Fake_Dlls/0002-krnl386.exe16-Do-not-abuse-WOW32Reserved-field-for-1.patch b/patches/winebuild-Fake_Dlls/0002-krnl386.exe16-Do-not-abuse-WOW32Reserved-field-for-1.patch
index 012936760..15aaa85df 100644
--- a/patches/winebuild-Fake_Dlls/0002-krnl386.exe16-Do-not-abuse-WOW32Reserved-field-for-1.patch
+++ b/patches/winebuild-Fake_Dlls/0002-krnl386.exe16-Do-not-abuse-WOW32Reserved-field-for-1.patch
@@ -1,4 +1,4 @@
-From 362b04b78c2da18e81dd4f571d3671d452c76634 Mon Sep 17 00:00:00 2001
+From 25d08438aba3dee16c79ce3168a4f76f39816fad Mon Sep 17 00:00:00 2001
 From: Sebastian Lackner <sebastian@fds-team.de>
 Date: Tue, 16 May 2017 04:37:52 +0200
 Subject: [PATCH] krnl386.exe16: Do not abuse WOW32Reserved field for 16-bit
@@ -13,7 +13,7 @@ Subject: [PATCH] krnl386.exe16: Do not abuse WOW32Reserved field for 16-bit
  dlls/krnl386.exe16/task.c             | 14 +++++------
  dlls/krnl386.exe16/thunk.c            | 36 +++++++++++++--------------
  dlls/krnl386.exe16/wowthunk.c         | 20 +++++++--------
- dlls/ntdll/signal_i386.c              |  2 +-
+ dlls/ntdll/unix/signal_i386.c         |  2 +-
  dlls/system.drv16/system.c            |  2 +-
  dlls/toolhelp.dll16/toolhelp.c        |  6 ++---
  dlls/user.exe16/message.c             | 16 ++++++------
@@ -267,10 +267,10 @@ index 39a60cb97a9..21de62c5a01 100644
      context->Esp   = OFFSETOF(pData->old_ss_sp) - sizeof(DWORD); /*ret addr*/
      pData->old_ss_sp = 0;
 diff --git a/dlls/krnl386.exe16/thunk.c b/dlls/krnl386.exe16/thunk.c
-index 78925f594ba..141acb8d5e6 100644
+index e913a08f88c..ecc94371488 100644
 --- a/dlls/krnl386.exe16/thunk.c
 +++ b/dlls/krnl386.exe16/thunk.c
-@@ -428,7 +428,7 @@ void WINAPI __regs_QT_Thunk( CONTEXT *context )
+@@ -429,7 +429,7 @@ void WINAPI __regs_QT_Thunk( CONTEXT *context )
      context16.Eip   = LOWORD(context->Edx);
      /* point EBP to the STACK16FRAME on the stack
       * for the call_to_16 to set up the register content on calling */
@@ -279,7 +279,7 @@ index 78925f594ba..141acb8d5e6 100644
  
      /*
       * used to be (problematic):
-@@ -450,7 +450,7 @@ void WINAPI __regs_QT_Thunk( CONTEXT *context )
+@@ -451,7 +451,7 @@ void WINAPI __regs_QT_Thunk( CONTEXT *context )
       * the number of parameters that the Win16 function
       * accepted (that it popped from the corresponding Win16 stack) */
      context->Esp +=   LOWORD(context16.Esp) -
@@ -288,7 +288,7 @@ index 78925f594ba..141acb8d5e6 100644
  }
  DEFINE_REGS_ENTRYPOINT( QT_Thunk )
  
-@@ -554,7 +554,7 @@ void WINAPI __regs_FT_Thunk( CONTEXT *context )
+@@ -555,7 +555,7 @@ void WINAPI __regs_FT_Thunk( CONTEXT *context )
  
      context16.SegCs = HIWORD(callTarget);
      context16.Eip   = LOWORD(callTarget);
@@ -297,7 +297,7 @@ index 78925f594ba..141acb8d5e6 100644
  
      argsize  = context->Ebp-context->Esp-0x40;
      if (argsize > sizeof(newstack)) argsize = sizeof(newstack);
-@@ -566,8 +566,8 @@ void WINAPI __regs_FT_Thunk( CONTEXT *context )
+@@ -567,8 +567,8 @@ void WINAPI __regs_FT_Thunk( CONTEXT *context )
  	if (mapESPrelative & (1 << i))
  	{
  	    SEGPTR *arg = (SEGPTR *)newstack[i];
@@ -308,7 +308,7 @@ index 78925f594ba..141acb8d5e6 100644
                                + (*(LPBYTE *)arg - oldstack));
  	}
  
-@@ -577,7 +577,7 @@ void WINAPI __regs_FT_Thunk( CONTEXT *context )
+@@ -578,7 +578,7 @@ void WINAPI __regs_FT_Thunk( CONTEXT *context )
      context->Ecx = context16.Ecx;
  
      context->Esp +=   LOWORD(context16.Esp) -
@@ -317,7 +317,7 @@ index 78925f594ba..141acb8d5e6 100644
  
      /* Copy modified buffers back to 32-bit stack */
      memcpy( oldstack, newstack, argsize );
-@@ -712,7 +712,7 @@ void WINAPI __regs_Common32ThkLS( CONTEXT *context )
+@@ -713,7 +713,7 @@ void WINAPI __regs_Common32ThkLS( CONTEXT *context )
      context16.Edi   = LOWORD(context->Ecx);
      context16.SegCs = HIWORD(context->Eax);
      context16.Eip   = LOWORD(context->Eax);
@@ -326,7 +326,7 @@ index 78925f594ba..141acb8d5e6 100644
  
      argsize = HIWORD(context->Edx) * 4;
  
-@@ -768,7 +768,7 @@ void WINAPI __regs_OT_32ThkLSF( CONTEXT *context )
+@@ -769,7 +769,7 @@ void WINAPI __regs_OT_32ThkLSF( CONTEXT *context )
  
      context16.SegCs = HIWORD(context->Edx);
      context16.Eip   = LOWORD(context->Edx);
@@ -335,7 +335,7 @@ index 78925f594ba..141acb8d5e6 100644
  
      argsize = 2 * *(WORD *)context->Esp + 2;
  
-@@ -781,7 +781,7 @@ void WINAPI __regs_OT_32ThkLSF( CONTEXT *context )
+@@ -782,7 +782,7 @@ void WINAPI __regs_OT_32ThkLSF( CONTEXT *context )
              (LPBYTE)CURRENT_STACK16 - argsize, argsize );
  
      context->Esp +=   LOWORD(context16.Esp) -
@@ -344,7 +344,7 @@ index 78925f594ba..141acb8d5e6 100644
  }
  DEFINE_REGS_ENTRYPOINT( OT_32ThkLSF )
  
-@@ -1233,26 +1233,26 @@ void WINAPI __regs_K32Thk1632Prolog( CONTEXT *context )
+@@ -1234,26 +1234,26 @@ void WINAPI __regs_K32Thk1632Prolog( CONTEXT *context )
        DWORD argSize = context->Ebp - context->Esp;
        char *stack16 = (char *)context->Esp - 4;
        STACK16FRAME *frame16 = (STACK16FRAME *)stack16 - 1;
@@ -375,7 +375,7 @@ index 78925f594ba..141acb8d5e6 100644
     }
  
      /* entry_point is never used again once the entry point has
-@@ -1275,7 +1275,7 @@ void WINAPI __regs_K32Thk1632Epilog( CONTEXT *context )
+@@ -1276,7 +1276,7 @@ void WINAPI __regs_K32Thk1632Epilog( CONTEXT *context )
     if (   code[5] == 0xFF && code[6] == 0x55 && code[7] == 0xFC
         && code[13] == 0x66 && code[14] == 0xCB)
     {
@@ -384,7 +384,7 @@ index 78925f594ba..141acb8d5e6 100644
        char *stack16 = (char *)(frame16 + 1);
        DWORD argSize = frame16->ebp - (DWORD)stack16;
        char *stack32 = (char *)frame16->frame32 - argSize;
-@@ -1283,15 +1283,15 @@ void WINAPI __regs_K32Thk1632Epilog( CONTEXT *context )
+@@ -1284,15 +1284,15 @@ void WINAPI __regs_K32Thk1632Epilog( CONTEXT *context )
        DWORD nArgsPopped = context->Esp - (DWORD)stack32;
  
        TRACE("before SYSTHUNK hack: EBP: %08x ESP: %08x cur_stack: %p\n",
@@ -403,7 +403,7 @@ index 78925f594ba..141acb8d5e6 100644
     }
  }
  DEFINE_REGS_ENTRYPOINT( K32Thk1632Epilog )
-@@ -2302,7 +2302,7 @@ void WINAPI Throw16( LPCATCHBUF lpbuf, INT16 retval, CONTEXT *context )
+@@ -2303,7 +2303,7 @@ void WINAPI Throw16( LPCATCHBUF lpbuf, INT16 retval, CONTEXT *context )
      frame32 = pFrame->frame32;
      while (frame32 && frame32->frame16)
      {
@@ -472,11 +472,11 @@ index 2dddbf93289..3a4b104a673 100644
              SYSLEVEL_CheckNotLevel( 2 );
          }
      }
-diff --git a/dlls/ntdll/signal_i386.c b/dlls/ntdll/signal_i386.c
-index e905ed0af17..8a976f7745d 100644
---- a/dlls/ntdll/signal_i386.c
-+++ b/dlls/ntdll/signal_i386.c
-@@ -912,7 +912,7 @@ static inline void *init_handler( const ucontext_t *sigcontext, WORD *fs, WORD *
+diff --git a/dlls/ntdll/unix/signal_i386.c b/dlls/ntdll/unix/signal_i386.c
+index 2928f314358..138f56b94eb 100644
+--- a/dlls/ntdll/unix/signal_i386.c
++++ b/dlls/ntdll/unix/signal_i386.c
+@@ -645,7 +645,7 @@ static inline void *init_handler( const ucontext_t *sigcontext )
           * SS is still non-system segment. This is why both CS and SS
           * are checked.
           */
@@ -630,7 +630,7 @@ index bf86719325b..1f53bdc9540 100644
      /* don't use WIN_Handle32 here, we don't care about the full handle */
      return IsWindow( HWND_32(hwnd) );
 diff --git a/include/winternl.h b/include/winternl.h
-index dd63300d915..0aa0ac311c3 100644
+index acbce20c212..68c1ae3fd82 100644
 --- a/include/winternl.h
 +++ b/include/winternl.h
 @@ -362,7 +362,7 @@ typedef struct _TEB
diff --git a/patches/winebuild-Fake_Dlls/0003-winebuild-Generate-syscall-thunks-for-ntdll-exports.patch b/patches/winebuild-Fake_Dlls/0003-winebuild-Generate-syscall-thunks-for-ntdll-exports.patch
index 684c28e16..547e27f8f 100644
--- a/patches/winebuild-Fake_Dlls/0003-winebuild-Generate-syscall-thunks-for-ntdll-exports.patch
+++ b/patches/winebuild-Fake_Dlls/0003-winebuild-Generate-syscall-thunks-for-ntdll-exports.patch
@@ -1,4 +1,4 @@
-From e60eb454ecfb4c043a585c1ecd2970c92be1c664 Mon Sep 17 00:00:00 2001
+From 0c4d2573b123f2198f74292133b7a6eefa472620 Mon Sep 17 00:00:00 2001
 From: =?UTF-8?q?Michael=20M=C3=BCller?= <michael@fds-team.de>
 Date: Thu, 11 May 2017 05:32:55 +0200
 Subject: [PATCH] winebuild: Generate syscall thunks for ntdll exports.
@@ -22,7 +22,7 @@ Based on a patch by Erich E. Hoover.
  14 files changed, 214 insertions(+), 32 deletions(-)
 
 diff --git a/dlls/ntdll/loader.c b/dlls/ntdll/loader.c
-index ffbc9fabb23..a633099877d 100644
+index 0c8f05285c4..26c540050dc 100644
 --- a/dlls/ntdll/loader.c
 +++ b/dlls/ntdll/loader.c
 @@ -3810,6 +3810,7 @@ PIMAGE_NT_HEADERS WINAPI RtlImageNtHeader(HMODULE hModule)
@@ -39,23 +39,23 @@ index ffbc9fabb23..a633099877d 100644
  
 +    NtCurrentTeb()->WOW32Reserved = __wine_syscall_dispatcher;
 +
-     pthread_sigmask( SIG_UNBLOCK, &server_block_set, NULL );
- 
      if (process_detaching) return;
+ 
+     RtlEnterCriticalSection( &loader_section );
 diff --git a/dlls/ntdll/signal_i386.c b/dlls/ntdll/signal_i386.c
-index 3be6342a945..85329be4f42 100644
+index 21cc1b3ead4..18be5693a7d 100644
 --- a/dlls/ntdll/signal_i386.c
 +++ b/dlls/ntdll/signal_i386.c
-@@ -444,6 +444,8 @@ struct stack_layout
+@@ -346,6 +346,8 @@ __ASM_STDCALL_FUNC( RtlCaptureContext, 4,
+                     "ret $4" )
  
- static ULONG first_ldt_entry = 32;
  
 +extern NTSTATUS WINAPI __syscall_NtGetContextThread( HANDLE handle, CONTEXT *context );
 +
- enum i386_trap_code
- {
-     TRAP_x86_UNKNOWN    = -1,  /* Unknown fault (TRAP_sig not defined) */
-@@ -1127,7 +1129,7 @@ NTSTATUS CDECL DECLSPEC_HIDDEN __regs_NtGetContextThread( DWORD edi, DWORD esi,
+ /***********************************************************************
+  *              NtGetContextThread  (NTDLL.@)
+  *              ZwGetContextThread  (NTDLL.@)
+@@ -370,7 +372,7 @@ NTSTATUS CDECL DECLSPEC_HIDDEN __regs_NtGetContextThread( DWORD edi, DWORD esi,
      {
          context->Ebp    = ebp;
          context->Esp    = (DWORD)&retaddr;
@@ -78,10 +78,10 @@ index a5e6faa461a..51938bf84cc 100644
      ok( context.SegCs == LOWORD(expect.SegCs), "wrong SegCs %08x/%08x\n", context.SegCs, expect.SegCs );
      ok( context.SegDs == LOWORD(expect.SegDs), "wrong SegDs %08x/%08x\n", context.SegDs, expect.SegDs );
 diff --git a/dlls/ntdll/thread.c b/dlls/ntdll/thread.c
-index 49daa33ca58..17b5d40215a 100644
+index 5a6809638ae..fa10cdf1062 100644
 --- a/dlls/ntdll/thread.c
 +++ b/dlls/ntdll/thread.c
-@@ -173,6 +173,7 @@ int __cdecl __wine_dbg_output( const char *str )
+@@ -170,6 +170,7 @@ int __cdecl __wine_dbg_output( const char *str )
      return unix_funcs->dbg_output( str );
  }
  
@@ -89,17 +89,17 @@ index 49daa33ca58..17b5d40215a 100644
  
  /***********************************************************************
   *           thread_init
-@@ -189,7 +190,7 @@ TEB *thread_init( SIZE_T *info_size, BOOL *suspend )
-     signal_init_early();
- 
-     teb = unix_funcs->init_threading( &nb_threads, &__wine_ldt_copy, info_size, suspend, &server_cpus,
--                                      &is_wow64, &server_start_time );
-+                                      &is_wow64, &server_start_time, __wine_syscall_dispatcher );
+@@ -181,7 +182,7 @@ int __cdecl __wine_dbg_output( const char *str )
+ TEB *thread_init( SIZE_T *info_size, BOOL *suspend )
+ {
+     TEB *teb = unix_funcs->init_threading( &nb_threads, &__wine_ldt_copy, info_size, suspend, &server_cpus,
+-                                           &is_wow64, &server_start_time );
++                                           &is_wow64, &server_start_time, __wine_syscall_dispatcher );
  
      peb = teb->Peb;
      peb->FastPebLock        = &peb_lock;
 diff --git a/dlls/ntdll/unix/thread.c b/dlls/ntdll/unix/thread.c
-index d4b7a51a627..bdc87e4b9cf 100644
+index 97b191e1a5b..2dbaa43e731 100644
 --- a/dlls/ntdll/unix/thread.c
 +++ b/dlls/ntdll/unix/thread.c
 @@ -85,7 +85,7 @@ static void pthread_exit_wrapper( int status )
@@ -120,42 +120,42 @@ index d4b7a51a627..bdc87e4b9cf 100644
      thread_data->request_fd = -1;
      thread_data->reply_fd   = -1;
 diff --git a/dlls/ntdll/unix/unix_private.h b/dlls/ntdll/unix/unix_private.h
-index 19104f0f5cc..bdf8bc99e3f 100644
+index 19dd216fc35..a1c48a52606 100644
 --- a/dlls/ntdll/unix/unix_private.h
 +++ b/dlls/ntdll/unix/unix_private.h
-@@ -101,7 +101,7 @@ extern void CDECL server_release_fd( HANDLE handle, int unix_fd ) DECLSPEC_HIDDE
- extern void CDECL server_init_process_done(void) DECLSPEC_HIDDEN;
+@@ -107,7 +107,7 @@ extern void CDECL server_release_fd( HANDLE handle, int unix_fd ) DECLSPEC_HIDDE
+ extern void CDECL server_init_process_done( void *relay ) DECLSPEC_HIDDEN;
  extern TEB * CDECL init_threading( int *nb_threads_ptr, struct ldt_copy **ldt_copy, SIZE_T *size,
                                     BOOL *suspend, unsigned int *cpus, BOOL *wow64,
 -                                   timeout_t *start_time ) DECLSPEC_HIDDEN;
 +                                   timeout_t *start_time, void *syscall_handler ) DECLSPEC_HIDDEN;
- extern void CDECL DECLSPEC_NORETURN start_process( PRTL_THREAD_START_ROUTINE entry, BOOL suspend, void *relay ) DECLSPEC_HIDDEN;
- extern void CDECL DECLSPEC_NORETURN abort_thread( int status ) DECLSPEC_HIDDEN;
  extern void CDECL DECLSPEC_NORETURN exit_thread( int status ) DECLSPEC_HIDDEN;
+ extern void CDECL DECLSPEC_NORETURN exit_process( int status ) DECLSPEC_HIDDEN;
+ extern NTSTATUS CDECL get_thread_ldt_entry( HANDLE handle, void *data, ULONG len, ULONG *ret_len ) DECLSPEC_HIDDEN;
 diff --git a/dlls/ntdll/unixlib.h b/dlls/ntdll/unixlib.h
-index 6a751993421..4e39ed53786 100644
+index 4c580c49d13..4f0080db03d 100644
 --- a/dlls/ntdll/unixlib.h
 +++ b/dlls/ntdll/unixlib.h
 @@ -28,7 +28,7 @@ struct ldt_copy;
  struct msghdr;
  
  /* increment this when you change the function table */
--#define NTDLL_UNIXLIB_VERSION 33
-+#define NTDLL_UNIXLIB_VERSION 34
+-#define NTDLL_UNIXLIB_VERSION 38
++#define NTDLL_UNIXLIB_VERSION 39
  
  struct unix_funcs
  {
-@@ -174,7 +174,7 @@ struct unix_funcs
+@@ -199,7 +199,7 @@ struct unix_funcs
  
      /* thread/process functions */
      TEB *         (CDECL *init_threading)( int *nb_threads_ptr, struct ldt_copy **ldt_copy, SIZE_T *size,
 -                                           BOOL *suspend, unsigned int *cpus, BOOL *wow64, timeout_t *start_time );
 +                                           BOOL *suspend, unsigned int *cpus, BOOL *wow64, timeout_t *start_time, void *syscall_handler );
-     void          (CDECL *start_process)( PRTL_THREAD_START_ROUTINE entry, BOOL suspend, void *relay );
-     void          (CDECL *abort_thread)( int status );
      void          (CDECL *exit_thread)( int status );
+     void          (CDECL *exit_process)( int status );
+     NTSTATUS      (CDECL *get_thread_ldt_entry)( HANDLE handle, void *data, ULONG len, ULONG *ret_len );
 diff --git a/include/winternl.h b/include/winternl.h
-index 9b8218c861f..ff6916c98e7 100644
+index 68c1ae3fd82..f2da9157aab 100644
 --- a/include/winternl.h
 +++ b/include/winternl.h
 @@ -359,7 +359,7 @@ typedef struct _TEB
diff --git a/patches/winebuild-Fake_Dlls/0005-winebuild-Add-stub-functions-in-fake-dlls.patch b/patches/winebuild-Fake_Dlls/0005-winebuild-Add-stub-functions-in-fake-dlls.patch
index 7dcd7ad93..f96d51aee 100644
--- a/patches/winebuild-Fake_Dlls/0005-winebuild-Add-stub-functions-in-fake-dlls.patch
+++ b/patches/winebuild-Fake_Dlls/0005-winebuild-Add-stub-functions-in-fake-dlls.patch
@@ -1,4 +1,4 @@
-From 1c0ba3961674f316dba2d89042571b7863076f08 Mon Sep 17 00:00:00 2001
+From 167ad04157dd746ee9395afa9505fe00cc866f9b Mon Sep 17 00:00:00 2001
 From: =?UTF-8?q?Michael=20M=C3=BCller?= <michael@fds-team.de>
 Date: Mon, 15 May 2017 16:27:56 +0200
 Subject: [PATCH] winebuild: Add stub functions in fake dlls.
@@ -62,7 +62,7 @@ index 926fa913866..902907329c0 100644
      CloseHandle(map);
      CloseHandle(file);
 diff --git a/dlls/ntdll/loader.c b/dlls/ntdll/loader.c
-index b42cff8bcd4..b21d88bb13b 100644
+index 26c540050dc..09d3870c31a 100644
 --- a/dlls/ntdll/loader.c
 +++ b/dlls/ntdll/loader.c
 @@ -3811,6 +3811,7 @@ PIMAGE_NT_HEADERS WINAPI RtlImageNtHeader(HMODULE hModule)
@@ -73,19 +73,19 @@ index b42cff8bcd4..b21d88bb13b 100644
  
  /******************************************************************
   *		LdrInitializeThunk (NTDLL.@)
-@@ -3829,6 +3830,7 @@ void WINAPI LdrInitializeThunk( CONTEXT *context, void **entry, ULONG_PTR unknow
+@@ -3828,6 +3829,7 @@ void WINAPI LdrInitializeThunk( CONTEXT *context, void **entry, ULONG_PTR unknow
      LPCWSTR load_path = NtCurrentTeb()->Peb->ProcessParameters->DllPath.Buffer;
  
      NtCurrentTeb()->WOW32Reserved = __wine_syscall_dispatcher;
 +    NtCurrentTeb()->Spare2 = (ULONG_PTR)__wine_fakedll_dispatcher;
  
-     pthread_sigmask( SIG_UNBLOCK, &server_block_set, NULL );
+     if (process_detaching) return;
  
 diff --git a/dlls/ntdll/thread.c b/dlls/ntdll/thread.c
-index ed77e4a2e98..a988d4c3e6b 100644
+index fa10cdf1062..4840f527e59 100644
 --- a/dlls/ntdll/thread.c
 +++ b/dlls/ntdll/thread.c
-@@ -175,6 +175,39 @@ int __cdecl __wine_dbg_output( const char *str )
+@@ -172,6 +172,39 @@ int __cdecl __wine_dbg_output( const char *str )
  
  extern void DECLSPEC_NORETURN __wine_syscall_dispatcher( void );
  
@@ -125,16 +125,16 @@ index ed77e4a2e98..a988d4c3e6b 100644
  /***********************************************************************
   *           thread_init
   *
-@@ -190,6 +223,7 @@ TEB *thread_init( SIZE_T *info_size, BOOL *suspend )
- 
-     teb = unix_funcs->init_threading( &nb_threads, &__wine_ldt_copy, info_size, suspend, &server_cpus,
-                                       &is_wow64, &server_start_time, __wine_syscall_dispatcher );
+@@ -183,6 +216,7 @@ TEB *thread_init( SIZE_T *info_size, BOOL *suspend )
+ {
+     TEB *teb = unix_funcs->init_threading( &nb_threads, &__wine_ldt_copy, info_size, suspend, &server_cpus,
+                                            &is_wow64, &server_start_time, __wine_syscall_dispatcher );
 +    teb->Spare2 = (ULONG_PTR)__wine_fakedll_dispatcher;
  
      peb = teb->Peb;
      peb->FastPebLock        = &peb_lock;
 diff --git a/include/winternl.h b/include/winternl.h
-index 065f3d24f52..199b8fc52f2 100644
+index f2da9157aab..ce8021af503 100644
 --- a/include/winternl.h
 +++ b/include/winternl.h
 @@ -398,7 +398,7 @@ typedef struct _TEB
diff --git a/patches/winebuild-Fake_Dlls/0010-tools-winebuild-Add-syscall-thunks-for-64-bit.patch b/patches/winebuild-Fake_Dlls/0010-tools-winebuild-Add-syscall-thunks-for-64-bit.patch
index f1f5a5e5c..6024e5a2f 100644
--- a/patches/winebuild-Fake_Dlls/0010-tools-winebuild-Add-syscall-thunks-for-64-bit.patch
+++ b/patches/winebuild-Fake_Dlls/0010-tools-winebuild-Add-syscall-thunks-for-64-bit.patch
@@ -1,4 +1,4 @@
-From 7a2dceb0c325caa23d55f4ed4747221b09885c85 Mon Sep 17 00:00:00 2001
+From a5b4feebd008daab008f72567fe0001da619030e Mon Sep 17 00:00:00 2001
 From: =?UTF-8?q?Michael=20M=C3=BCller?= <michael@fds-team.de>
 Date: Thu, 7 Sep 2017 00:38:09 +0200
 Subject: [PATCH] tools/winebuild: Add syscall thunks for 64 bit.
@@ -15,10 +15,10 @@ Subject: [PATCH] tools/winebuild: Add syscall thunks for 64 bit.
  8 files changed, 306 insertions(+), 14 deletions(-)
 
 diff --git a/dlls/kernel32/tests/loader.c b/dlls/kernel32/tests/loader.c
-index 1f525194ce7..21af7b4ce7a 100644
+index 95939ba6bde..ae5462f6e55 100644
 --- a/dlls/kernel32/tests/loader.c
 +++ b/dlls/kernel32/tests/loader.c
-@@ -1574,7 +1574,7 @@ static void test_filenames(void)
+@@ -1573,7 +1573,7 @@ static void test_filenames(void)
  
  static void test_FakeDLL(void)
  {
@@ -27,7 +27,7 @@ index 1f525194ce7..21af7b4ce7a 100644
      NTSTATUS (WINAPI *pNtSetEvent)(HANDLE, ULONG *) = NULL;
      IMAGE_EXPORT_DIRECTORY *dir;
      HMODULE module = GetModuleHandleA("ntdll.dll");
-@@ -1616,8 +1616,13 @@ static void test_FakeDLL(void)
+@@ -1615,8 +1615,13 @@ static void test_FakeDLL(void)
  
          dll_func = (BYTE *)GetProcAddress(module, func_name);
          ok(dll_func != NULL, "%s: GetProcAddress returned NULL\n", func_name);
@@ -42,10 +42,10 @@ index 1f525194ce7..21af7b4ce7a 100644
              todo_wine ok(0, "%s: Export is a stub-function, skipping\n", func_name);
              continue;
 diff --git a/dlls/ntdll/unix/thread.c b/dlls/ntdll/unix/thread.c
-index 449e5814c2e..05cbd4b443b 100644
+index 2dbaa43e731..e1da90222d3 100644
 --- a/dlls/ntdll/unix/thread.c
 +++ b/dlls/ntdll/unix/thread.c
-@@ -108,7 +108,7 @@ TEB * CDECL init_threading( int *nb_threads_ptr, struct ldt_copy **ldt_copy, SIZ
+@@ -110,7 +110,7 @@ TEB * CDECL init_threading( int *nb_threads_ptr, struct ldt_copy **ldt_copy, SIZ
      dbg_init();
      server_init_process();
      info_size = server_init_thread( teb->Peb, suspend );
@@ -55,23 +55,23 @@ index 449e5814c2e..05cbd4b443b 100644
  
      if (size) *size = info_size;
 diff --git a/dlls/ntdll/unix/unix_private.h b/dlls/ntdll/unix/unix_private.h
-index 5f891d52e17..6ccd2ff6cc4 100644
+index a1c48a52606..9c9e5b80b0c 100644
 --- a/dlls/ntdll/unix/unix_private.h
 +++ b/dlls/ntdll/unix/unix_private.h
-@@ -137,7 +137,7 @@ extern void virtual_init(void) DECLSPEC_HIDDEN;
+@@ -152,7 +152,7 @@ extern void virtual_init(void) DECLSPEC_HIDDEN;
  extern TEB *virtual_alloc_first_teb(void) DECLSPEC_HIDDEN;
  extern NTSTATUS virtual_alloc_teb( TEB **ret_teb ) DECLSPEC_HIDDEN;
  extern void virtual_free_teb( TEB *teb ) DECLSPEC_HIDDEN;
 -extern void virtual_map_user_shared_data(void) DECLSPEC_HIDDEN;
 +extern void virtual_map_user_shared_data(void *) DECLSPEC_HIDDEN;
- 
- extern void signal_init_threading(void) DECLSPEC_HIDDEN;
- extern NTSTATUS signal_alloc_thread( TEB *teb ) DECLSPEC_HIDDEN;
+ extern NTSTATUS virtual_handle_fault( LPCVOID addr, DWORD err, BOOL on_signal_stack ) DECLSPEC_HIDDEN;
+ extern BOOL virtual_is_valid_code_address( const void *addr, SIZE_T size ) DECLSPEC_HIDDEN;
+ extern int virtual_handle_stack_fault( void *addr ) DECLSPEC_HIDDEN;
 diff --git a/dlls/ntdll/unix/virtual.c b/dlls/ntdll/unix/virtual.c
-index 83e51c369cb..40629214479 100644
+index 660323d4dcc..a5e5cb8422d 100644
 --- a/dlls/ntdll/unix/virtual.c
 +++ b/dlls/ntdll/unix/virtual.c
-@@ -2742,14 +2742,14 @@ TEB *virtual_alloc_first_teb(void)
+@@ -2588,14 +2588,14 @@ TEB *virtual_alloc_first_teb(void)
      TEB *teb;
      PEB *peb;
      NTSTATUS status;
@@ -88,7 +88,7 @@ index 83e51c369cb..40629214479 100644
      if (status)
      {
          ERR( "wine: failed to map the shared user data: %08x\n", status );
-@@ -2943,11 +2943,12 @@ void virtual_clear_thread_stack( void *stack_end )
+@@ -2787,11 +2787,12 @@ void virtual_clear_thread_stack( void *stack_end )
      if (force_exec_prot) mprotect( stack, size, PROT_READ | PROT_WRITE | PROT_EXEC );
  }
  
@@ -102,7 +102,7 @@ index 83e51c369cb..40629214479 100644
  {
      static const WCHAR wine_usdW[] = {'\\','K','e','r','n','e','l','O','b','j','e','c','t','s',
                                        '\\','_','_','w','i','n','e','_','u','s','e','r','_','s','h','a','r','e','d','_','d','a','t','a',0};
-@@ -2970,6 +2971,11 @@ void virtual_map_user_shared_data(void)
+@@ -2814,6 +2815,11 @@ void virtual_map_user_shared_data(void)
          ERR( "failed to remap the process USD: %d\n", res );
          exit(1);
      }
diff --git a/patches/wow64cpu-Wow64Transition/0002-ntdll-Add-a-stub-implementation-of-Wow64Transition.patch b/patches/wow64cpu-Wow64Transition/0002-ntdll-Add-a-stub-implementation-of-Wow64Transition.patch
index 3e655e0cb..ec9de02f7 100644
--- a/patches/wow64cpu-Wow64Transition/0002-ntdll-Add-a-stub-implementation-of-Wow64Transition.patch
+++ b/patches/wow64cpu-Wow64Transition/0002-ntdll-Add-a-stub-implementation-of-Wow64Transition.patch
@@ -1,4 +1,4 @@
-From 68293a760784f2b4fd2fe79bbba443d76b17e11a Mon Sep 17 00:00:00 2001
+From 8281eb9d4c2c5d20a336fda58c5bf1e603f05590 Mon Sep 17 00:00:00 2001
 From: Zebediah Figura <z.figura12@gmail.com>
 Date: Wed, 8 Aug 2018 20:00:15 -0500
 Subject: [PATCH] ntdll: Add a stub implementation of Wow64Transition.
@@ -9,10 +9,10 @@ Subject: [PATCH] ntdll: Add a stub implementation of Wow64Transition.
  2 files changed, 11 insertions(+), 1 deletion(-)
 
 diff --git a/dlls/ntdll/loader.c b/dlls/ntdll/loader.c
-index 6155996b7c4..0e99604eb2b 100644
+index 92ae87c6e6d..533bad12103 100644
 --- a/dlls/ntdll/loader.c
 +++ b/dlls/ntdll/loader.c
-@@ -4287,6 +4287,7 @@ NTSTATUS WINAPI NtLoadDriver( const UNICODE_STRING *DriverServiceName )
+@@ -4322,6 +4322,7 @@ NTSTATUS WINAPI NtLoadDriver( const UNICODE_STRING *DriverServiceName )
      return STATUS_NOT_IMPLEMENTED;
  }
  
@@ -20,7 +20,7 @@ index 6155996b7c4..0e99604eb2b 100644
  
  /***********************************************************************
   *           NtUnloadDriver   (NTDLL.@)
-@@ -4345,12 +4346,13 @@ void __wine_process_init(void)
+@@ -4380,13 +4381,14 @@ void __wine_process_init(void)
      static const WCHAR ntdllW[] = {'\\','?','?','\\','C',':','\\','w','i','n','d','o','w','s','\\',
                                     's','y','s','t','e','m','3','2','\\',
                                     'n','t','d','l','l','.','d','l','l',0};
@@ -28,6 +28,7 @@ index 6155996b7c4..0e99604eb2b 100644
      static const WCHAR kernel32W[] = {'\\','?','?','\\','C',':','\\','w','i','n','d','o','w','s','\\',
                                        's','y','s','t','e','m','3','2','\\',
                                        'k','e','r','n','e','l','3','2','.','d','l','l',0};
+     void (WINAPI *kernel32_start_process)(LPTHREAD_START_ROUTINE,void*) = NULL;
      RTL_USER_PROCESS_PARAMETERS *params;
      ACTIVATION_CONTEXT_RUN_LEVEL_INFORMATION runlevel;
 -    WINE_MODREF *wm;
@@ -35,7 +36,7 @@ index 6155996b7c4..0e99604eb2b 100644
      NTSTATUS status;
      ANSI_STRING func_name;
      UNICODE_STRING nt_name;
-@@ -4400,6 +4402,13 @@ void __wine_process_init(void)
+@@ -4429,6 +4431,13 @@ void __wine_process_init(void)
          MESSAGE( "wine: could not load kernel32.dll, status %x\n", status );
          exit(1);
      }
@@ -50,10 +51,10 @@ index 6155996b7c4..0e99604eb2b 100644
      if ((status = LdrGetProcedureAddress( wm->ldr.DllBase, &func_name,
                                            0, (void **)&kernel32_start_process )) != STATUS_SUCCESS)
 diff --git a/dlls/ntdll/ntdll.spec b/dlls/ntdll/ntdll.spec
-index b97eed0bc7d..9e2f6e418eb 100644
+index 05e46bd1b3d..c24889479a4 100644
 --- a/dlls/ntdll/ntdll.spec
 +++ b/dlls/ntdll/ntdll.spec
-@@ -1103,6 +1103,7 @@
+@@ -1111,6 +1111,7 @@
  @ stdcall WinSqmIsOptedIn()
  @ stdcall WinSqmSetDWORD(ptr long long)
  @ stdcall WinSqmStartSession(ptr long long)
diff --git a/patches/ws2_32-WSACleanup/0002-ws2_32-Invalidate-client-side-file-descriptor-cache-.patch b/patches/ws2_32-WSACleanup/0002-ws2_32-Invalidate-client-side-file-descriptor-cache-.patch
index 0861f99c0..7b9e61d85 100644
--- a/patches/ws2_32-WSACleanup/0002-ws2_32-Invalidate-client-side-file-descriptor-cache-.patch
+++ b/patches/ws2_32-WSACleanup/0002-ws2_32-Invalidate-client-side-file-descriptor-cache-.patch
@@ -1,4 +1,4 @@
-From 20661308a50202350a3a2887cbd558b1e931aad1 Mon Sep 17 00:00:00 2001
+From 6cc54a973b9b786166db76df6a4f0a33867103ce Mon Sep 17 00:00:00 2001
 From: Sebastian Lackner <sebastian@fds-team.de>
 Date: Sun, 6 Sep 2015 12:41:17 +0200
 Subject: [PATCH] ws2_32: Invalidate client-side file descriptor cache in
@@ -17,7 +17,7 @@ Subject: [PATCH] ws2_32: Invalidate client-side file descriptor cache in
  9 files changed, 36 insertions(+), 5 deletions(-)
 
 diff --git a/dlls/ntdll/ntdll.spec b/dlls/ntdll/ntdll.spec
-index ce5c580bd54..279845ae830 100644
+index e054eabba3a..82ed6c68cbe 100644
 --- a/dlls/ntdll/ntdll.spec
 +++ b/dlls/ntdll/ntdll.spec
 @@ -1576,6 +1576,7 @@
@@ -29,11 +29,11 @@ index ce5c580bd54..279845ae830 100644
  @ cdecl wine_server_handle_to_fd(long long ptr ptr)
  @ cdecl wine_server_release_fd(long long)
 diff --git a/dlls/ntdll/server.c b/dlls/ntdll/server.c
-index 6fb86a68d6f..2f95e190963 100644
+index 9e1cc85a36e..3f4ba60b7bb 100644
 --- a/dlls/ntdll/server.c
 +++ b/dlls/ntdll/server.c
-@@ -239,6 +239,14 @@ void CDECL wine_server_release_fd( HANDLE handle, int unix_fd )
-     unix_funcs->server_release_fd( handle, unix_fd );
+@@ -130,6 +130,14 @@ int CDECL wine_server_handle_to_fd( HANDLE handle, unsigned int access, int *uni
+     return unix_funcs->server_handle_to_fd( handle, access, unix_fd, options );
  }
  
 + /***********************************************************************
@@ -46,21 +46,21 @@ index 6fb86a68d6f..2f95e190963 100644
 +
  
  /***********************************************************************
-  *           server_init_process
+  *           wine_server_release_fd   (NTDLL.@)
 diff --git a/dlls/ntdll/unix/loader.c b/dlls/ntdll/unix/loader.c
-index 618e3d6adb3..bdda739897b 100644
+index eac43ba42c4..cd11d0d647e 100644
 --- a/dlls/ntdll/unix/loader.c
 +++ b/dlls/ntdll/unix/loader.c
-@@ -1076,6 +1076,7 @@ static struct unix_funcs unix_funcs =
-     server_select,
-     server_wait,
+@@ -1089,6 +1089,7 @@ static struct unix_funcs unix_funcs =
+     get_thread_ldt_entry,
+     wine_server_call,
      server_send_fd,
 +    server_remove_fds_from_cache_by_type,
      server_get_unix_fd,
      server_fd_to_handle,
      server_handle_to_fd,
 diff --git a/dlls/ntdll/unix/server.c b/dlls/ntdll/unix/server.c
-index fb3f98dd579..0754928cfe8 100644
+index cf6f6c3832c..586d0ffcf72 100644
 --- a/dlls/ntdll/unix/server.c
 +++ b/dlls/ntdll/unix/server.c
 @@ -995,6 +995,26 @@ static int remove_fd_from_cache( HANDLE handle )
@@ -91,33 +91,33 @@ index fb3f98dd579..0754928cfe8 100644
  /***********************************************************************
   *           server_get_unix_fd
 diff --git a/dlls/ntdll/unix/unix_private.h b/dlls/ntdll/unix/unix_private.h
-index 03b92f9e912..19104f0f5cc 100644
+index 3e61111cba5..ae0c47b5a79 100644
 --- a/dlls/ntdll/unix/unix_private.h
 +++ b/dlls/ntdll/unix/unix_private.h
-@@ -89,6 +89,7 @@ extern unsigned int CDECL server_select( const select_op_t *select_op, data_size
- extern unsigned int CDECL server_wait( const select_op_t *select_op, data_size_t size, UINT flags,
-                                        const LARGE_INTEGER *timeout ) DECLSPEC_HIDDEN;
+@@ -95,6 +95,7 @@ extern void CDECL virtual_release_address_space(void) DECLSPEC_HIDDEN;
+ extern void CDECL virtual_set_large_address_space(void) DECLSPEC_HIDDEN;
+ 
  extern void CDECL server_send_fd( int fd ) DECLSPEC_HIDDEN;
 +extern void CDECL server_remove_fds_from_cache_by_type( enum server_fd_type type ) DECLSPEC_HIDDEN;
  extern int CDECL server_get_unix_fd( HANDLE handle, unsigned int wanted_access, int *unix_fd,
                                       int *needs_close, enum server_fd_type *type,
                                       unsigned int *options ) DECLSPEC_HIDDEN;
 diff --git a/dlls/ntdll/unixlib.h b/dlls/ntdll/unixlib.h
-index 017a0a71b3f..6a751993421 100644
+index 80d3ce27601..4c580c49d13 100644
 --- a/dlls/ntdll/unixlib.h
 +++ b/dlls/ntdll/unixlib.h
 @@ -28,7 +28,7 @@ struct ldt_copy;
  struct msghdr;
  
  /* increment this when you change the function table */
--#define NTDLL_UNIXLIB_VERSION 32
-+#define NTDLL_UNIXLIB_VERSION 33
+-#define NTDLL_UNIXLIB_VERSION 37
++#define NTDLL_UNIXLIB_VERSION 38
  
  struct unix_funcs
  {
-@@ -189,6 +189,7 @@ struct unix_funcs
-     unsigned int  (CDECL *server_wait)( const select_op_t *select_op, data_size_t size, UINT flags,
-                                         const LARGE_INTEGER *timeout );
+@@ -207,6 +207,7 @@ struct unix_funcs
+     /* server functions */
+     unsigned int  (CDECL *server_call)( void *req_ptr );
      void          (CDECL *server_send_fd)( int fd );
 +    void          (CDECL *server_remove_fds_from_cache_by_type)( enum server_fd_type type );
      int           (CDECL *server_get_unix_fd)( HANDLE handle, unsigned int wanted_access, int *unix_fd,

diff --git a/patches/ntdll-FLS_Callbacks/0001-kernelbase-Maintain-FLS-storage-list-in-PEB.patch b/patches/ntdll-FLS_Callbacks/0001-kernelbase-Maintain-FLS-storage-list-in-PEB.patch
index 1d5434bf6..40f2a0b86 100644
--- a/patches/ntdll-FLS_Callbacks/0001-kernelbase-Maintain-FLS-storage-list-in-PEB.patch
+++ b/patches/ntdll-FLS_Callbacks/0001-kernelbase-Maintain-FLS-storage-list-in-PEB.patch
@@ -1,4 +1,4 @@
-From 5c370d9f0be803d89302da7471ef0b93b45a0d75 Mon Sep 17 00:00:00 2001
+From 3fe24d6e3b216c21b6a7b68766414213fdd2ff2d Mon Sep 17 00:00:00 2001
 From: Paul Gofman <pgofman@codeweavers.com>
 Date: Thu, 23 Apr 2020 14:32:23 +0300
 Subject: [PATCH] kernelbase: Maintain FLS storage list in PEB.
@@ -73,10 +73,10 @@ index 7501165dc87..2bcc3ee60c4 100644
       * FlsFree should fail
       * FlsGetValue and FlsSetValue should succeed
 diff --git a/dlls/kernel32/tests/thread.c b/dlls/kernel32/tests/thread.c
-index a454bf118cc..dac30959734 100644
+index a9869863b44..b24f9e98bc7 100644
 --- a/dlls/kernel32/tests/thread.c
 +++ b/dlls/kernel32/tests/thread.c
-@@ -2435,7 +2435,6 @@ START_TEST(thread)
+@@ -2377,7 +2377,6 @@ START_TEST(thread)
         }
         return;
     }
@@ -84,7 +84,7 @@ index a454bf118cc..dac30959734 100644
     test_thread_info();
     test_reserved_tls();
     test_CreateRemoteThread();
-@@ -2463,6 +2462,5 @@ START_TEST(thread)
+@@ -2405,6 +2404,5 @@ START_TEST(thread)
     test_thread_fpu_cw();
     test_thread_actctx();
     test_thread_description();
@@ -92,7 +92,7 @@ index a454bf118cc..dac30959734 100644
     test_threadpool();
  }
 diff --git a/dlls/kernelbase/thread.c b/dlls/kernelbase/thread.c
-index 03b16da95bb..4409f120491 100644
+index f20d460d07d..3c77b6a42f4 100644
 --- a/dlls/kernelbase/thread.c
 +++ b/dlls/kernelbase/thread.c
 @@ -38,6 +38,10 @@
@@ -106,7 +106,7 @@ index 03b16da95bb..4409f120491 100644
  
  /***********************************************************************
   * Threads
-@@ -916,6 +920,19 @@ static void init_fiber_context( struct fiber_data *fiber )
+@@ -915,6 +919,19 @@ static void init_fiber_context( struct fiber_data *fiber )
  #endif
  }
  
@@ -126,7 +126,7 @@ index 03b16da95bb..4409f120491 100644
  
  /***********************************************************************
   *           CreateFiber   (kernelbase.@)
-@@ -1023,7 +1040,16 @@ void WINAPI DECLSPEC_HOTPATCH DeleteFiber( LPVOID fiber_ptr )
+@@ -1022,7 +1039,16 @@ void WINAPI DECLSPEC_HOTPATCH DeleteFiber( LPVOID fiber_ptr )
          RtlExitUserThread( 1 );
      }
      RtlFreeUserStack( fiber->stack_allocation );
@@ -144,7 +144,7 @@ index 03b16da95bb..4409f120491 100644
      HeapFree( GetProcessHeap(), 0, fiber );
  }
  
-@@ -1045,6 +1071,19 @@ void WINAPI DECLSPEC_HOTPATCH SwitchToFiber( LPVOID fiber )
+@@ -1044,6 +1070,19 @@ void WINAPI DECLSPEC_HOTPATCH SwitchToFiber( LPVOID fiber )
      struct fiber_data *new_fiber = fiber;
      struct fiber_data *current_fiber = NtCurrentTeb()->Tib.u.FiberData;
  
@@ -164,7 +164,7 @@ index 03b16da95bb..4409f120491 100644
      current_fiber->except      = NtCurrentTeb()->Tib.ExceptionList;
      current_fiber->stack_limit = NtCurrentTeb()->Tib.StackLimit;
      current_fiber->fls_slots   = NtCurrentTeb()->FlsSlots;
-@@ -1070,9 +1109,7 @@ DWORD WINAPI DECLSPEC_HOTPATCH FlsAlloc( PFLS_CALLBACK_FUNCTION callback )
+@@ -1069,9 +1108,7 @@ DWORD WINAPI DECLSPEC_HOTPATCH FlsAlloc( PFLS_CALLBACK_FUNCTION callback )
      PEB * const peb = NtCurrentTeb()->Peb;
  
      RtlAcquirePebLock();
@@ -175,7 +175,7 @@ index 03b16da95bb..4409f120491 100644
      {
          SetLastError( ERROR_NOT_ENOUGH_MEMORY );
          index = FLS_OUT_OF_INDEXES;
-@@ -1082,9 +1119,7 @@ DWORD WINAPI DECLSPEC_HOTPATCH FlsAlloc( PFLS_CALLBACK_FUNCTION callback )
+@@ -1081,9 +1118,7 @@ DWORD WINAPI DECLSPEC_HOTPATCH FlsAlloc( PFLS_CALLBACK_FUNCTION callback )
          index = RtlFindClearBitsAndSet( peb->FlsBitmap, 1, 1 );
          if (index != ~0U)
          {
@@ -186,7 +186,7 @@ index 03b16da95bb..4409f120491 100644
              {
                  RtlClearBits( peb->FlsBitmap, index, 1 );
                  index = FLS_OUT_OF_INDEXES;
-@@ -1092,8 +1127,8 @@ DWORD WINAPI DECLSPEC_HOTPATCH FlsAlloc( PFLS_CALLBACK_FUNCTION callback )
+@@ -1091,8 +1126,8 @@ DWORD WINAPI DECLSPEC_HOTPATCH FlsAlloc( PFLS_CALLBACK_FUNCTION callback )
              }
              else
              {
@@ -197,7 +197,7 @@ index 03b16da95bb..4409f120491 100644
              }
          }
          else SetLastError( ERROR_NO_MORE_ITEMS );
-@@ -1117,7 +1152,7 @@ BOOL WINAPI DECLSPEC_HOTPATCH FlsFree( DWORD index )
+@@ -1116,7 +1151,7 @@ BOOL WINAPI DECLSPEC_HOTPATCH FlsFree( DWORD index )
      {
          /* FIXME: call Fls callback */
          /* FIXME: add equivalent of ThreadZeroTlsCell here */
@@ -206,7 +206,7 @@ index 03b16da95bb..4409f120491 100644
      }
      else SetLastError( ERROR_INVALID_PARAMETER );
      RtlReleasePebLock();
-@@ -1136,7 +1171,7 @@ PVOID WINAPI DECLSPEC_HOTPATCH FlsGetValue( DWORD index )
+@@ -1135,7 +1170,7 @@ PVOID WINAPI DECLSPEC_HOTPATCH FlsGetValue( DWORD index )
          return NULL;
      }
      SetLastError( ERROR_SUCCESS );
@@ -215,7 +215,7 @@ index 03b16da95bb..4409f120491 100644
  }
  
  
-@@ -1150,14 +1185,12 @@ BOOL WINAPI DECLSPEC_HOTPATCH FlsSetValue( DWORD index, PVOID data )
+@@ -1149,14 +1184,12 @@ BOOL WINAPI DECLSPEC_HOTPATCH FlsSetValue( DWORD index, PVOID data )
          SetLastError( ERROR_INVALID_PARAMETER );
          return FALSE;
      }
@@ -233,10 +233,10 @@ index 03b16da95bb..4409f120491 100644
  }
  
 diff --git a/dlls/ntdll/loader.c b/dlls/ntdll/loader.c
-index 5e8de8821dd..71ef1cfea0a 100644
+index ffbc9fabb23..be53d98e5b8 100644
 --- a/dlls/ntdll/loader.c
 +++ b/dlls/ntdll/loader.c
-@@ -179,6 +179,15 @@ static CRITICAL_SECTION_DEBUG dlldir_critsect_debug =
+@@ -169,6 +169,15 @@ static CRITICAL_SECTION_DEBUG dlldir_critsect_debug =
  };
  static CRITICAL_SECTION dlldir_section = { &dlldir_critsect_debug, -1, 0, 0, 0, 0 };
  
@@ -252,7 +252,7 @@ index 5e8de8821dd..71ef1cfea0a 100644
  static WINE_MODREF *cached_modref;
  static WINE_MODREF *current_modref;
  static WINE_MODREF *last_failed_modref;
-@@ -219,6 +228,16 @@ static RTL_UNLOAD_EVENT_TRACE unload_traces[RTL_UNLOAD_EVENT_TRACE_NUMBER];
+@@ -209,6 +218,16 @@ static RTL_UNLOAD_EVENT_TRACE unload_traces[RTL_UNLOAD_EVENT_TRACE_NUMBER];
  static RTL_UNLOAD_EVENT_TRACE *unload_trace_ptr;
  static unsigned int unload_trace_seq;
  
@@ -269,7 +269,7 @@ index 5e8de8821dd..71ef1cfea0a 100644
  static void module_push_unload_trace( const LDR_DATA_TABLE_ENTRY *ldr )
  {
      RTL_UNLOAD_EVENT_TRACE *ptr = &unload_traces[unload_trace_seq];
-@@ -3913,6 +3932,13 @@ void WINAPI LdrShutdownThread(void)
+@@ -3610,6 +3629,13 @@ void WINAPI LdrShutdownThread(void)
      /* don't do any detach calls if process is exiting */
      if (process_detaching) return;
  
@@ -283,15 +283,15 @@ index 5e8de8821dd..71ef1cfea0a 100644
      RtlEnterCriticalSection( &loader_section );
  
      mark = &NtCurrentTeb()->Peb->LdrData->InInitializationOrderModuleList;
-@@ -4153,6 +4179,7 @@ static void user_shared_data_init(void)
+@@ -3819,6 +3845,7 @@ PIMAGE_NT_HEADERS WINAPI RtlImageNtHeader(HMODULE hModule)
   */
  void WINAPI LdrInitializeThunk( CONTEXT *context, void **entry, ULONG_PTR unknown3, ULONG_PTR unknown4 )
  {
 +    static const unsigned int fls_slot_count = 8 * sizeof(NtCurrentTeb()->Peb->FlsBitmapBits);
-     static const LARGE_INTEGER zero;
      static int attach_done;
      int i;
-@@ -4191,6 +4218,25 @@ void WINAPI LdrInitializeThunk( CONTEXT *context, void **entry, ULONG_PTR unknow
+     NTSTATUS status;
+@@ -3856,6 +3883,25 @@ void WINAPI LdrInitializeThunk( CONTEXT *context, void **entry, ULONG_PTR unknow
      InsertHeadList( &tls_links, &NtCurrentTeb()->TlsLinks );
      RtlReleasePebLock();
  
@@ -318,5 +318,5 @@ index 5e8de8821dd..71ef1cfea0a 100644
      {
          attach_done = 1;
 -- 
-2.25.3
+2.26.2
 
diff --git a/patches/ntdll-NtContinue/0001-ntdll-Add-stub-for-NtContinue.patch b/patches/ntdll-NtContinue/0001-ntdll-Add-stub-for-NtContinue.patch
deleted file mode 100644
index 7145857bd..000000000
--- a/patches/ntdll-NtContinue/0001-ntdll-Add-stub-for-NtContinue.patch
+++ /dev/null
@@ -1,63 +0,0 @@
-From 9ea4f081689959bd393eab2caaa0ed8237846117 Mon Sep 17 00:00:00 2001
-From: =?UTF-8?q?Michael=20M=C3=BCller?= <michael@fds-team.de>
-Date: Thu, 25 May 2017 05:04:26 +0200
-Subject: [PATCH] ntdll: Add stub for NtContinue.
-
----
- dlls/ntdll/exception.c | 10 +++++++++-
- dlls/ntdll/ntdll.spec  |  4 ++--
- 2 files changed, 11 insertions(+), 3 deletions(-)
-
-diff --git a/dlls/ntdll/exception.c b/dlls/ntdll/exception.c
-index c35312fd1d1..3b85f1efa04 100644
---- a/dlls/ntdll/exception.c
-+++ b/dlls/ntdll/exception.c
-@@ -328,7 +328,6 @@ LONG WINAPI call_unhandled_exception_filter( PEXCEPTION_POINTERS eptr )
-     return unhandled_exception_filter( eptr );
- }
- 
--
- #if defined(__x86_64__) || defined(__arm__) || defined(__aarch64__)
- 
- struct dynamic_unwind_entry
-@@ -667,6 +666,15 @@ PRUNTIME_FUNCTION WINAPI RtlLookupFunctionEntry( ULONG_PTR pc, ULONG_PTR *base,
- 
- #endif  /* __x86_64__ || __arm__ || __aarch64__ */
- 
-+/*********************************************************************
-+ *         NtContinue   (NTDLL.@)
-+ */
-+NTSTATUS WINAPI NtContinue( CONTEXT *context, BOOLEAN alert )
-+{
-+    FIXME( "(%p, %d) stub!\n", context, alert );
-+    return STATUS_NOT_IMPLEMENTED;
-+}
-+
- /*************************************************************
-  *            __wine_spec_unimplemented_stub
-  *
-diff --git a/dlls/ntdll/ntdll.spec b/dlls/ntdll/ntdll.spec
-index 81faf7fc280..d21a6f08ac2 100644
---- a/dlls/ntdll/ntdll.spec
-+++ b/dlls/ntdll/ntdll.spec
-@@ -150,7 +150,7 @@
- @ stdcall NtCompleteConnectPort(ptr)
- # @ stub NtCompressKey
- @ stdcall NtConnectPort(ptr ptr ptr ptr ptr ptr ptr ptr)
--@ stub NtContinue
-+@ stdcall NtContinue(ptr long)
- # @ stub NtCreateDebugObject
- @ stdcall NtCreateDirectoryObject(ptr long ptr)
- @ stdcall NtCreateEvent(ptr long ptr long long)
-@@ -1105,7 +1105,7 @@
- @ stdcall -private ZwCompleteConnectPort(ptr) NtCompleteConnectPort
- # @ stub ZwCompressKey
- @ stdcall -private ZwConnectPort(ptr ptr ptr ptr ptr ptr ptr ptr) NtConnectPort
--@ stub ZwContinue
-+@ stdcall -private ZwContinue(ptr long) NtContinue
- # @ stub ZwCreateDebugObject
- @ stdcall -private ZwCreateDirectoryObject(ptr long ptr) NtCreateDirectoryObject
- @ stdcall -private ZwCreateEvent(ptr long ptr long long) NtCreateEvent
--- 
-2.17.1
-
diff --git a/patches/ntdll-NtContinue/0002-Use-NtContinue-to-continue-execution-after-exception.patch b/patches/ntdll-NtContinue/0002-Use-NtContinue-to-continue-execution-after-exception.patch
deleted file mode 100644
index 902940977..000000000
--- a/patches/ntdll-NtContinue/0002-Use-NtContinue-to-continue-execution-after-exception.patch
+++ /dev/null
@@ -1,82 +0,0 @@
-From 812de54c6fc8f93e8fda01f0802397b183adab59 Mon Sep 17 00:00:00 2001
-From: Andrew Wesie <awesie@gmail.com>
-Date: Fri, 27 Jul 2018 01:26:56 -0500
-Subject: [PATCH] ntdll: Use NtContinue to continue execution after exceptions.
-
-NtContinue is exported by ntdll and some programs expect it to be used to
-restore the thread context after an exception handler returns
-EXCEPTION_CONTINUE_EXECUTION. It must take a context as its first argument
-and restore that context.
-
-Current implementation is a simple wrapper around NtSetContextThread. It is
-unlikely that it has the correct behavior if called by an external caller.
-
-The __syscall_NtContinue wrapper is used so that it can be hooked by a
-third-party.
----
- dlls/ntdll/exception.c     | 5 +++--
- dlls/ntdll/signal_i386.c   | 3 ++-
- dlls/ntdll/signal_x86_64.c | 3 ++-
- 3 files changed, 7 insertions(+), 4 deletions(-)
-
-diff --git a/dlls/ntdll/exception.c b/dlls/ntdll/exception.c
-index 3b85f1efa..bc972254f 100644
---- a/dlls/ntdll/exception.c
-+++ b/dlls/ntdll/exception.c
-@@ -671,8 +671,9 @@ PRUNTIME_FUNCTION WINAPI RtlLookupFunctionEntry( ULONG_PTR pc, ULONG_PTR *base,
-  */
- NTSTATUS WINAPI NtContinue( CONTEXT *context, BOOLEAN alert )
- {
--    FIXME( "(%p, %d) stub!\n", context, alert );
--    return STATUS_NOT_IMPLEMENTED;
-+    TRACE( "(%p, %d) stub!\n", context, alert );
-+
-+    return NtSetContextThread( GetCurrentThread(), context );
- }
- 
- /*************************************************************
-diff --git a/dlls/ntdll/signal_i386.c b/dlls/ntdll/signal_i386.c
-index e55164630..8fc885ed4 100644
---- a/dlls/ntdll/signal_i386.c
-+++ b/dlls/ntdll/signal_i386.c
-@@ -730,6 +730,7 @@ static NTSTATUS call_stack_handlers( EXCEPTION_RECORD *rec, CONTEXT *context )
-     return STATUS_UNHANDLED_EXCEPTION;
- }
- 
-+NTSTATUS WINAPI __syscall_NtContinue( CONTEXT *context, BOOLEAN alert );
- 
- /*******************************************************************
-  *		raise_exception
-@@ -794,7 +795,7 @@ static NTSTATUS raise_exception( EXCEPTION_RECORD *rec, CONTEXT *context, BOOL f
-         NtTerminateProcess( NtCurrentProcess(), rec->ExceptionCode );
-     }
- done:
--    return NtSetContextThread( GetCurrentThread(), context );
-+    return __syscall_NtContinue( context, FALSE );
- }
- 
- 
-diff --git a/dlls/ntdll/signal_x86_64.c b/dlls/ntdll/signal_x86_64.c
-index e48529d73..0e74fda43 100644
---- a/dlls/ntdll/signal_x86_64.c
-+++ b/dlls/ntdll/signal_x86_64.c
-@@ -2520,6 +2520,7 @@ static NTSTATUS call_stack_handlers( EXCEPTION_RECORD *rec, CONTEXT *orig_contex
-     return STATUS_UNHANDLED_EXCEPTION;
- }
- 
-+NTSTATUS WINAPI __syscall_NtContinue( CONTEXT *context, BOOLEAN alert );
- 
- static NTSTATUS raise_exception( EXCEPTION_RECORD *rec, CONTEXT *context, BOOL first_chance )
- {
-@@ -2582,7 +2583,7 @@ static NTSTATUS raise_exception( EXCEPTION_RECORD *rec, CONTEXT *context, BOOL f
-     }
- 
- done:
--    return NtSetContextThread( GetCurrentThread(), context );
-+    return __syscall_NtContinue( context, FALSE );
- }
- 
- 
--- 
-2.23.0
-
diff --git a/patches/ntdll-NtContinue/definition b/patches/ntdll-NtContinue/definition
deleted file mode 100644
index 06c2ebf9e..000000000
--- a/patches/ntdll-NtContinue/definition
+++ /dev/null
@@ -1,3 +0,0 @@
-Fixes: [31910] Add stub for NtContinue
-Fixes: [45572] League of Legends 8.12+ fails to start a game (anticheat engine, hooking of NtContinue)
-Depends: winebuild-Fake_Dlls
\ No newline at end of file
diff --git a/patches/ntdll-Syscall_Emulation/0001-ntdll-Support-x86_64-syscall-emulation.patch b/patches/ntdll-Syscall_Emulation/0001-ntdll-Support-x86_64-syscall-emulation.patch
index 4ae5fcdfa..0a39d4355 100644
--- a/patches/ntdll-Syscall_Emulation/0001-ntdll-Support-x86_64-syscall-emulation.patch
+++ b/patches/ntdll-Syscall_Emulation/0001-ntdll-Support-x86_64-syscall-emulation.patch
@@ -1,4 +1,4 @@
-From 20298be5a42af52be27c56f88ad6a8a0304b55b6 Mon Sep 17 00:00:00 2001
+From cd04d1910294b035bb3858b3ef1bb295aec3a732 Mon Sep 17 00:00:00 2001
 From: Paul Gofman <pgofman@codeweavers.com>
 Date: Mon, 30 Dec 2019 13:27:53 +0300
 Subject: [PATCH] ntdll: Support x86_64 syscall emulation.
@@ -15,7 +15,7 @@ is used for trapping syscalls.
  3 files changed, 119 insertions(+), 2 deletions(-)
 
 diff --git a/configure.ac b/configure.ac
-index e3d63ed7501..2fbec4129df 100644
+index e61a98455c3..4adeb52d225 100644
 --- a/configure.ac
 +++ b/configure.ac
 @@ -464,6 +464,7 @@ AC_CHECK_HEADERS(\
@@ -27,7 +27,7 @@ index e3d63ed7501..2fbec4129df 100644
  	linux/types.h \
  	linux/ucdrom.h \
 diff --git a/dlls/ntdll/signal_x86_64.c b/dlls/ntdll/signal_x86_64.c
-index 0ccc7cbceb6..149ad1bf5e7 100644
+index dd8b45fa907..a5612abf2b1 100644
 --- a/dlls/ntdll/signal_x86_64.c
 +++ b/dlls/ntdll/signal_x86_64.c
 @@ -24,6 +24,7 @@
@@ -61,8 +61,8 @@ index 0ccc7cbceb6..149ad1bf5e7 100644
  typedef struct _SCOPE_TABLE
  {
      ULONG Count;
-@@ -2797,6 +2807,104 @@ static void usr1_handler( int signal, siginfo_t *siginfo, void *ucontext )
-     restore_context( &context, ucontext );
+@@ -2480,6 +2490,104 @@ static inline DWORD is_privileged_instr( CONTEXT *context )
+     return 0;
  }
  
 +extern unsigned int __wine_nb_syscalls;
@@ -165,8 +165,8 @@ index 0ccc7cbceb6..149ad1bf5e7 100644
 +}
  
  /***********************************************************************
-  *           __wine_set_signal_handler   (NTDLL.@)
-@@ -2842,6 +2950,9 @@ void signal_init_process(void)
+  *           handle_interrupt
+@@ -2793,6 +2901,9 @@ void signal_init_process(void)
      sig_act.sa_sigaction = trap_handler;
      if (sigaction( SIGTRAP, &sig_act, NULL ) == -1) goto error;
  #endif
diff --git a/patches/ntdll-WRITECOPY/0003-ntdll-Setup-a-temporary-signal-handler-during-proces.patch b/patches/ntdll-WRITECOPY/0003-ntdll-Setup-a-temporary-signal-handler-during-proces.patch
index d6e9a6824..db0631234 100644
--- a/patches/ntdll-WRITECOPY/0003-ntdll-Setup-a-temporary-signal-handler-during-proces.patch
+++ b/patches/ntdll-WRITECOPY/0003-ntdll-Setup-a-temporary-signal-handler-during-proces.patch
@@ -1,4 +1,4 @@
-From 46968c583a30476a86463530d0047699e64529b5 Mon Sep 17 00:00:00 2001
+From bd60a4308f3ec1df20328887335b4c95f9be215d Mon Sep 17 00:00:00 2001
 From: =?UTF-8?q?Michael=20M=C3=BCller?= <michael@fds-team.de>
 Date: Sat, 4 Oct 2014 02:53:22 +0200
 Subject: [PATCH] ntdll: Setup a temporary signal handler during process
@@ -27,10 +27,10 @@ index 65c65cc02d8..63a4b597872 100644
  extern void debug_init(void) DECLSPEC_HIDDEN;
  extern TEB *thread_init( SIZE_T *info_size, BOOL *suspend ) DECLSPEC_HIDDEN;
 diff --git a/dlls/ntdll/signal_arm.c b/dlls/ntdll/signal_arm.c
-index 8ff9f66d3f0..44e3d2df523 100644
+index a09848449a6..c6f7231fec6 100644
 --- a/dlls/ntdll/signal_arm.c
 +++ b/dlls/ntdll/signal_arm.c
-@@ -773,6 +773,12 @@ void signal_init_process(void)
+@@ -792,6 +792,12 @@ void signal_init_process(void)
      exit(1);
  }
  
@@ -44,11 +44,11 @@ index 8ff9f66d3f0..44e3d2df523 100644
  /***********************************************************************
   *            RtlUnwind  (NTDLL.@)
 diff --git a/dlls/ntdll/signal_arm64.c b/dlls/ntdll/signal_arm64.c
-index 104ffbf6df9..e7c6abd0046 100644
+index a9a58a2e7ad..a9c6614794e 100644
 --- a/dlls/ntdll/signal_arm64.c
 +++ b/dlls/ntdll/signal_arm64.c
-@@ -1100,6 +1100,12 @@ int CDECL __wine_set_signal_handler(unsigned int sig, wine_signal_handler wsh)
-     return 0;
+@@ -1047,6 +1047,12 @@ static void usr2_handler( int signal, siginfo_t *siginfo, void *sigcontext )
+     restore_context( context, sigcontext );
  }
  
 +/**********************************************************************
@@ -61,10 +61,10 @@ index 104ffbf6df9..e7c6abd0046 100644
  /**********************************************************************
   *		signal_init_process
 diff --git a/dlls/ntdll/signal_i386.c b/dlls/ntdll/signal_i386.c
-index 1b0b9352a87..0fe9f7a3c84 100644
+index 83868f25121..b048b2bc688 100644
 --- a/dlls/ntdll/signal_i386.c
 +++ b/dlls/ntdll/signal_i386.c
-@@ -1621,6 +1621,31 @@ static BOOL handle_interrupt( unsigned int interrupt, ucontext_t *sigcontext, st
+@@ -1575,6 +1575,31 @@ static BOOL handle_interrupt( unsigned int interrupt, ucontext_t *sigcontext, st
  }
  
  
@@ -96,7 +96,7 @@ index 1b0b9352a87..0fe9f7a3c84 100644
  /**********************************************************************
   *		segv_handler
   *
-@@ -1948,6 +1973,34 @@ void signal_init_process(void)
+@@ -1883,6 +1908,34 @@ void signal_init_process(void)
      exit(1);
  }
  
@@ -132,11 +132,11 @@ index 1b0b9352a87..0fe9f7a3c84 100644
  /*******************************************************************
   *		RtlUnwind (NTDLL.@)
 diff --git a/dlls/ntdll/signal_powerpc.c b/dlls/ntdll/signal_powerpc.c
-index 7e73322cbeb..07f0b89f30a 100644
+index 879b2b58c49..f17d6267102 100644
 --- a/dlls/ntdll/signal_powerpc.c
 +++ b/dlls/ntdll/signal_powerpc.c
-@@ -637,6 +637,12 @@ int CDECL __wine_set_signal_handler(unsigned int sig, wine_signal_handler wsh)
-     return 0;
+@@ -634,6 +634,12 @@ static void quit_handler( int signal, siginfo_t *siginfo, void *sigcontext )
+     unix_funcs->abort_thread(0);
  }
  
 +/**********************************************************************
@@ -147,12 +147,12 @@ index 7e73322cbeb..07f0b89f30a 100644
 +}
  
  /**********************************************************************
-  *		signal_init_process
+  *		usr1_handler
 diff --git a/dlls/ntdll/signal_x86_64.c b/dlls/ntdll/signal_x86_64.c
-index 0ccc7cbceb6..dc8a1a987c5 100644
+index c6b0fbf618d..bb481ba1b81 100644
 --- a/dlls/ntdll/signal_x86_64.c
 +++ b/dlls/ntdll/signal_x86_64.c
-@@ -2849,6 +2849,12 @@ void signal_init_process(void)
+@@ -2777,6 +2777,12 @@ void signal_init_process(void)
      exit(1);
  }
  
@@ -166,7 +166,7 @@ index 0ccc7cbceb6..dc8a1a987c5 100644
  static ULONG64 get_int_reg( CONTEXT *context, int reg )
  {
 diff --git a/dlls/ntdll/thread.c b/dlls/ntdll/thread.c
-index 8918b39a9c5..a2f5df1b1c2 100644
+index d045466f6d2..49daa33ca58 100644
 --- a/dlls/ntdll/thread.c
 +++ b/dlls/ntdll/thread.c
 @@ -186,6 +186,7 @@ TEB *thread_init( SIZE_T *info_size, BOOL *suspend )
diff --git a/patches/patchinstall.sh b/patches/patchinstall.sh
index c5ff8c0b3..9c2ce4ce0 100755
--- a/patches/patchinstall.sh
+++ b/patches/patchinstall.sh
@@ -183,7 +183,6 @@ patch_enable_all ()
 	enable_ntdll_Junction_Points="$1"
 	enable_ntdll_Manifest_Range="$1"
 	enable_ntdll_NtAccessCheck="$1"
-	enable_ntdll_NtContinue="$1"
 	enable_ntdll_NtDevicePath="$1"
 	enable_ntdll_NtQueryEaFile="$1"
 	enable_ntdll_NtQuerySection="$1"
@@ -648,9 +647,6 @@ patch_enable ()
 		ntdll-NtAccessCheck)
 			enable_ntdll_NtAccessCheck="$2"
 			;;
-		ntdll-NtContinue)
-			enable_ntdll_NtContinue="$2"
-			;;
 		ntdll-NtDevicePath)
 			enable_ntdll_NtDevicePath="$2"
 			;;
@@ -1672,6 +1668,17 @@ if test "$enable_ntdll_Syscall_Emulation" -eq 1; then
 	enable_winebuild_Fake_Dlls=1
 fi
 
+if test "$enable_winebuild_Fake_Dlls" -eq 1; then
+	if test "$enable_ntdll_WRITECOPY" -gt 1; then
+		abort "Patchset ntdll-WRITECOPY disabled, but winebuild-Fake_Dlls depends on that."
+	fi
+	if test "$enable_ws2_32_WSACleanup" -gt 1; then
+		abort "Patchset ws2_32-WSACleanup disabled, but winebuild-Fake_Dlls depends on that."
+	fi
+	enable_ntdll_WRITECOPY=1
+	enable_ws2_32_WSACleanup=1
+fi
+
 if test "$enable_ntdll_NtQueryEaFile" -eq 1; then
 	if test "$enable_ntdll_Junction_Points" -gt 1; then
 		abort "Patchset ntdll-Junction_Points disabled, but ntdll-NtQueryEaFile depends on that."
@@ -1686,24 +1693,6 @@ if test "$enable_ntdll_NtDevicePath" -eq 1; then
 	enable_ntdll_Pipe_SpecialCharacters=1
 fi
 
-if test "$enable_ntdll_NtContinue" -eq 1; then
-	if test "$enable_winebuild_Fake_Dlls" -gt 1; then
-		abort "Patchset winebuild-Fake_Dlls disabled, but ntdll-NtContinue depends on that."
-	fi
-	enable_winebuild_Fake_Dlls=1
-fi
-
-if test "$enable_winebuild_Fake_Dlls" -eq 1; then
-	if test "$enable_ntdll_WRITECOPY" -gt 1; then
-		abort "Patchset ntdll-WRITECOPY disabled, but winebuild-Fake_Dlls depends on that."
-	fi
-	if test "$enable_ws2_32_WSACleanup" -gt 1; then
-		abort "Patchset ws2_32-WSACleanup disabled, but winebuild-Fake_Dlls depends on that."
-	fi
-	enable_ntdll_WRITECOPY=1
-	enable_ws2_32_WSACleanup=1
-fi
-
 if test "$enable_ntdll_Hide_Wine_Exports" -eq 1; then
 	if test "$enable_advapi32_Token_Integrity_Level" -gt 1; then
 		abort "Patchset advapi32-Token_Integrity_Level disabled, but ntdll-Hide_Wine_Exports depends on that."
@@ -3977,98 +3966,6 @@ if test "$enable_ntdll_NtAccessCheck" -eq 1; then
 	) >> "$patchlist"
 fi
 
-# Patchset ws2_32-WSACleanup
-# |
-# | This patchset fixes the following Wine bugs:
-# |   *	[#18670] Properly close sockets when WSACleanup is called
-# |
-# | Modified files:
-# |   *	dlls/ntdll/ntdll.spec, dlls/ntdll/server.c, dlls/ntdll/unix/loader.c, dlls/ntdll/unix/server.c,
-# | 	dlls/ntdll/unix/unix_private.h, dlls/ntdll/unixlib.h, dlls/ws2_32/socket.c, dlls/ws2_32/tests/sock.c,
-# | 	include/wine/server.h, server/protocol.def, server/sock.c
-# |
-if test "$enable_ws2_32_WSACleanup" -eq 1; then
-	patch_apply ws2_32-WSACleanup/0001-ws2_32-Proper-WSACleanup-implementation-using-winese.patch
-	patch_apply ws2_32-WSACleanup/0002-ws2_32-Invalidate-client-side-file-descriptor-cache-.patch
-	(
-		printf '%s\n' '+    { "Matt Durgavich", "ws2_32: Proper WSACleanup implementation using wineserver function.", 2 },';
-		printf '%s\n' '+    { "Sebastian Lackner", "ws2_32: Invalidate client-side file descriptor cache in WSACleanup.", 1 },';
-	) >> "$patchlist"
-fi
-
-# Patchset winebuild-Fake_Dlls
-# |
-# | This patchset has the following (direct or indirect) dependencies:
-# |   *	ntdll-WRITECOPY, ws2_32-WSACleanup
-# |
-# | This patchset fixes the following Wine bugs:
-# |   *	[#21232] Chromium-based browser engines (Chrome, Opera, Comodo Dragon, SRWare Iron) crash on startup unless '--no-
-# | 	sandbox' is used (native API sandboxing/hooking scheme incompatible with Wine)
-# |   *	[#42741] StarCraft I: 1.18 PTR fails to initialize ClientSdk.dll
-# |   *	[#45349] Multiple applications and games crash due to missing support for 64-bit syscall thunks (StreetFighter V)
-# |   *	[#45573] League of Legends 8.12+ fails to start a game (anticheat engine, hooking of syscall return instructions)
-# |   *	[#45650] chromium 32-bit sandbox expects different syscall thunks depending on Windows version
-# |
-# | Modified files:
-# |   *	dlls/dbghelp/cpu_i386.c, dlls/kernel32/tests/loader.c, dlls/krnl386.exe16/kernel.c,
-# | 	dlls/krnl386.exe16/kernel16_private.h, dlls/krnl386.exe16/ne_module.c, dlls/krnl386.exe16/ne_segment.c,
-# | 	dlls/krnl386.exe16/task.c, dlls/krnl386.exe16/thunk.c, dlls/krnl386.exe16/wowthunk.c, dlls/ntdll/actctx.c,
-# | 	dlls/ntdll/directory.c, dlls/ntdll/loader.c, dlls/ntdll/locale.c, dlls/ntdll/ntdll_misc.h, dlls/ntdll/path.c,
-# | 	dlls/ntdll/process.c, dlls/ntdll/signal_i386.c, dlls/ntdll/tests/exception.c, dlls/ntdll/thread.c,
-# | 	dlls/ntdll/unix/thread.c, dlls/ntdll/unix/unix_private.h, dlls/ntdll/unix/virtual.c, dlls/ntdll/unixlib.h,
-# | 	dlls/system.drv16/system.c, dlls/toolhelp.dll16/toolhelp.c, dlls/user.exe16/message.c, dlls/user.exe16/user.c,
-# | 	dlls/user.exe16/window.c, include/winternl.h, libs/wine/loader.c, server/mapping.c, tools/winebuild/build.h,
-# | 	tools/winebuild/import.c, tools/winebuild/parser.c, tools/winebuild/relay.c, tools/winebuild/res32.c,
-# | 	tools/winebuild/spec16.c, tools/winebuild/spec32.c, tools/winebuild/utils.c
-# |
-if test "$enable_winebuild_Fake_Dlls" -eq 1; then
-	patch_apply winebuild-Fake_Dlls/0001-kernel32-tests-Add-basic-tests-for-fake-dlls.patch
-	patch_apply winebuild-Fake_Dlls/0002-krnl386.exe16-Do-not-abuse-WOW32Reserved-field-for-1.patch
-	patch_apply winebuild-Fake_Dlls/0003-winebuild-Generate-syscall-thunks-for-ntdll-exports.patch
-	patch_apply winebuild-Fake_Dlls/0004-winebuild-Use-multipass-label-system-to-generate-fak.patch
-	patch_apply winebuild-Fake_Dlls/0005-winebuild-Add-stub-functions-in-fake-dlls.patch
-	patch_apply winebuild-Fake_Dlls/0006-winebuild-Add-syscall-thunks-in-fake-dlls.patch
-	patch_apply winebuild-Fake_Dlls/0007-winebuild-Fix-size-of-relocation-information-in-fake.patch
-	patch_apply winebuild-Fake_Dlls/0008-winebuild-Try-to-make-sure-RVA-matches-between-fake-.patch
-	patch_apply winebuild-Fake_Dlls/0009-libs-wine-Use-same-file-alignment-for-fake-and-built.patch
-	patch_apply winebuild-Fake_Dlls/0010-tools-winebuild-Add-syscall-thunks-for-64-bit.patch
-	patch_apply winebuild-Fake_Dlls/0011-ntdll-Call-NtOpenFile-through-syscall-thunk.patch
-	(
-		printf '%s\n' '+    { "Michael Müller", "kernel32/tests: Add basic tests for fake dlls.", 1 },';
-		printf '%s\n' '+    { "Sebastian Lackner", "krnl386.exe16: Do not abuse WOW32Reserved field for 16-bit stack address.", 1 },';
-		printf '%s\n' '+    { "Michael Müller", "winebuild: Generate syscall thunks for ntdll exports.", 1 },';
-		printf '%s\n' '+    { "Michael Müller", "winebuild: Use multipass label system to generate fake dlls.", 1 },';
-		printf '%s\n' '+    { "Michael Müller", "winebuild: Add stub functions in fake dlls.", 1 },';
-		printf '%s\n' '+    { "Michael Müller", "winebuild: Add syscall thunks in fake dlls.", 1 },';
-		printf '%s\n' '+    { "Michael Müller", "winebuild: Fix size of relocation information in fake dlls.", 1 },';
-		printf '%s\n' '+    { "Michael Müller", "winebuild: Try to make sure RVA matches between fake and builtin DLLs.", 1 },';
-		printf '%s\n' '+    { "Michael Müller", "libs/wine: Use same file alignment for fake and builtin DLLs.", 1 },';
-		printf '%s\n' '+    { "Michael Müller", "tools/winebuild: Add syscall thunks for 64 bit.", 1 },';
-		printf '%s\n' '+    { "Paul Gofman", "ntdll: Call NtOpenFile through syscall thunk.", 1 },';
-	) >> "$patchlist"
-fi
-
-# Patchset ntdll-NtContinue
-# |
-# | This patchset has the following (direct or indirect) dependencies:
-# |   *	ntdll-WRITECOPY, ws2_32-WSACleanup, winebuild-Fake_Dlls
-# |
-# | This patchset fixes the following Wine bugs:
-# |   *	[#31910] Add stub for NtContinue
-# |   *	[#45572] League of Legends 8.12+ fails to start a game (anticheat engine, hooking of NtContinue)
-# |
-# | Modified files:
-# |   *	dlls/ntdll/exception.c, dlls/ntdll/ntdll.spec, dlls/ntdll/signal_i386.c, dlls/ntdll/signal_x86_64.c
-# |
-if test "$enable_ntdll_NtContinue" -eq 1; then
-	patch_apply ntdll-NtContinue/0001-ntdll-Add-stub-for-NtContinue.patch
-	patch_apply ntdll-NtContinue/0002-Use-NtContinue-to-continue-execution-after-exception.patch
-	(
-		printf '%s\n' '+    { "Michael Müller", "ntdll: Add stub for NtContinue.", 1 },';
-		printf '%s\n' '+    { "Andrew Wesie", "ntdll: Use NtContinue to continue execution after exceptions.", 1 },';
-	) >> "$patchlist"
-fi
-
 # Patchset ntdll-Pipe_SpecialCharacters
 # |
 # | This patchset fixes the following Wine bugs:
@@ -4213,6 +4110,77 @@ if test "$enable_ntdll_Status_Mapping" -eq 1; then
 	) >> "$patchlist"
 fi
 
+# Patchset ws2_32-WSACleanup
+# |
+# | This patchset fixes the following Wine bugs:
+# |   *	[#18670] Properly close sockets when WSACleanup is called
+# |
+# | Modified files:
+# |   *	dlls/ntdll/ntdll.spec, dlls/ntdll/server.c, dlls/ntdll/unix/loader.c, dlls/ntdll/unix/server.c,
+# | 	dlls/ntdll/unix/unix_private.h, dlls/ntdll/unixlib.h, dlls/ws2_32/socket.c, dlls/ws2_32/tests/sock.c,
+# | 	include/wine/server.h, server/protocol.def, server/sock.c
+# |
+if test "$enable_ws2_32_WSACleanup" -eq 1; then
+	patch_apply ws2_32-WSACleanup/0001-ws2_32-Proper-WSACleanup-implementation-using-winese.patch
+	patch_apply ws2_32-WSACleanup/0002-ws2_32-Invalidate-client-side-file-descriptor-cache-.patch
+	(
+		printf '%s\n' '+    { "Matt Durgavich", "ws2_32: Proper WSACleanup implementation using wineserver function.", 2 },';
+		printf '%s\n' '+    { "Sebastian Lackner", "ws2_32: Invalidate client-side file descriptor cache in WSACleanup.", 1 },';
+	) >> "$patchlist"
+fi
+
+# Patchset winebuild-Fake_Dlls
+# |
+# | This patchset has the following (direct or indirect) dependencies:
+# |   *	ntdll-WRITECOPY, ws2_32-WSACleanup
+# |
+# | This patchset fixes the following Wine bugs:
+# |   *	[#21232] Chromium-based browser engines (Chrome, Opera, Comodo Dragon, SRWare Iron) crash on startup unless '--no-
+# | 	sandbox' is used (native API sandboxing/hooking scheme incompatible with Wine)
+# |   *	[#42741] StarCraft I: 1.18 PTR fails to initialize ClientSdk.dll
+# |   *	[#45349] Multiple applications and games crash due to missing support for 64-bit syscall thunks (StreetFighter V)
+# |   *	[#45573] League of Legends 8.12+ fails to start a game (anticheat engine, hooking of syscall return instructions)
+# |   *	[#45650] chromium 32-bit sandbox expects different syscall thunks depending on Windows version
+# |
+# | Modified files:
+# |   *	dlls/dbghelp/cpu_i386.c, dlls/kernel32/tests/loader.c, dlls/krnl386.exe16/kernel.c,
+# | 	dlls/krnl386.exe16/kernel16_private.h, dlls/krnl386.exe16/ne_module.c, dlls/krnl386.exe16/ne_segment.c,
+# | 	dlls/krnl386.exe16/task.c, dlls/krnl386.exe16/thunk.c, dlls/krnl386.exe16/wowthunk.c, dlls/ntdll/actctx.c,
+# | 	dlls/ntdll/directory.c, dlls/ntdll/loader.c, dlls/ntdll/locale.c, dlls/ntdll/ntdll_misc.h, dlls/ntdll/path.c,
+# | 	dlls/ntdll/process.c, dlls/ntdll/signal_i386.c, dlls/ntdll/tests/exception.c, dlls/ntdll/thread.c,
+# | 	dlls/ntdll/unix/thread.c, dlls/ntdll/unix/unix_private.h, dlls/ntdll/unix/virtual.c, dlls/ntdll/unixlib.h,
+# | 	dlls/system.drv16/system.c, dlls/toolhelp.dll16/toolhelp.c, dlls/user.exe16/message.c, dlls/user.exe16/user.c,
+# | 	dlls/user.exe16/window.c, include/winternl.h, libs/wine/loader.c, server/mapping.c, tools/winebuild/build.h,
+# | 	tools/winebuild/import.c, tools/winebuild/parser.c, tools/winebuild/relay.c, tools/winebuild/res32.c,
+# | 	tools/winebuild/spec16.c, tools/winebuild/spec32.c, tools/winebuild/utils.c
+# |
+if test "$enable_winebuild_Fake_Dlls" -eq 1; then
+	patch_apply winebuild-Fake_Dlls/0001-kernel32-tests-Add-basic-tests-for-fake-dlls.patch
+	patch_apply winebuild-Fake_Dlls/0002-krnl386.exe16-Do-not-abuse-WOW32Reserved-field-for-1.patch
+	patch_apply winebuild-Fake_Dlls/0003-winebuild-Generate-syscall-thunks-for-ntdll-exports.patch
+	patch_apply winebuild-Fake_Dlls/0004-winebuild-Use-multipass-label-system-to-generate-fak.patch
+	patch_apply winebuild-Fake_Dlls/0005-winebuild-Add-stub-functions-in-fake-dlls.patch
+	patch_apply winebuild-Fake_Dlls/0006-winebuild-Add-syscall-thunks-in-fake-dlls.patch
+	patch_apply winebuild-Fake_Dlls/0007-winebuild-Fix-size-of-relocation-information-in-fake.patch
+	patch_apply winebuild-Fake_Dlls/0008-winebuild-Try-to-make-sure-RVA-matches-between-fake-.patch
+	patch_apply winebuild-Fake_Dlls/0009-libs-wine-Use-same-file-alignment-for-fake-and-built.patch
+	patch_apply winebuild-Fake_Dlls/0010-tools-winebuild-Add-syscall-thunks-for-64-bit.patch
+	patch_apply winebuild-Fake_Dlls/0011-ntdll-Call-NtOpenFile-through-syscall-thunk.patch
+	(
+		printf '%s\n' '+    { "Michael Müller", "kernel32/tests: Add basic tests for fake dlls.", 1 },';
+		printf '%s\n' '+    { "Sebastian Lackner", "krnl386.exe16: Do not abuse WOW32Reserved field for 16-bit stack address.", 1 },';
+		printf '%s\n' '+    { "Michael Müller", "winebuild: Generate syscall thunks for ntdll exports.", 1 },';
+		printf '%s\n' '+    { "Michael Müller", "winebuild: Use multipass label system to generate fake dlls.", 1 },';
+		printf '%s\n' '+    { "Michael Müller", "winebuild: Add stub functions in fake dlls.", 1 },';
+		printf '%s\n' '+    { "Michael Müller", "winebuild: Add syscall thunks in fake dlls.", 1 },';
+		printf '%s\n' '+    { "Michael Müller", "winebuild: Fix size of relocation information in fake dlls.", 1 },';
+		printf '%s\n' '+    { "Michael Müller", "winebuild: Try to make sure RVA matches between fake and builtin DLLs.", 1 },';
+		printf '%s\n' '+    { "Michael Müller", "libs/wine: Use same file alignment for fake and builtin DLLs.", 1 },';
+		printf '%s\n' '+    { "Michael Müller", "tools/winebuild: Add syscall thunks for 64 bit.", 1 },';
+		printf '%s\n' '+    { "Paul Gofman", "ntdll: Call NtOpenFile through syscall thunk.", 1 },';
+	) >> "$patchlist"
+fi
+
 # Patchset ntdll-Syscall_Emulation
 # |
 # | This patchset has the following (direct or indirect) dependencies:
diff --git a/patches/winebuild-Fake_Dlls/0003-winebuild-Generate-syscall-thunks-for-ntdll-exports.patch b/patches/winebuild-Fake_Dlls/0003-winebuild-Generate-syscall-thunks-for-ntdll-exports.patch
index 751b497da..684c28e16 100644
--- a/patches/winebuild-Fake_Dlls/0003-winebuild-Generate-syscall-thunks-for-ntdll-exports.patch
+++ b/patches/winebuild-Fake_Dlls/0003-winebuild-Generate-syscall-thunks-for-ntdll-exports.patch
@@ -1,4 +1,4 @@
-From 1fec139d96f32869fc0c8d15219fff493d9951d8 Mon Sep 17 00:00:00 2001
+From e60eb454ecfb4c043a585c1ecd2970c92be1c664 Mon Sep 17 00:00:00 2001
 From: =?UTF-8?q?Michael=20M=C3=BCller?= <michael@fds-team.de>
 Date: Thu, 11 May 2017 05:32:55 +0200
 Subject: [PATCH] winebuild: Generate syscall thunks for ntdll exports.
@@ -22,7 +22,7 @@ Based on a patch by Erich E. Hoover.
  14 files changed, 214 insertions(+), 32 deletions(-)
 
 diff --git a/dlls/ntdll/loader.c b/dlls/ntdll/loader.c
-index 45d32399adf..b42cff8bcd4 100644
+index ffbc9fabb23..a633099877d 100644
 --- a/dlls/ntdll/loader.c
 +++ b/dlls/ntdll/loader.c
 @@ -3810,6 +3810,7 @@ PIMAGE_NT_HEADERS WINAPI RtlImageNtHeader(HMODULE hModule)
@@ -33,7 +33,7 @@ index 45d32399adf..b42cff8bcd4 100644
  
  /******************************************************************
   *		LdrInitializeThunk (NTDLL.@)
-@@ -3827,6 +3828,8 @@ void WINAPI LdrInitializeThunk( CONTEXT *context, void **entry, ULONG_PTR unknow
+@@ -3826,6 +3827,8 @@ void WINAPI LdrInitializeThunk( CONTEXT *context, void **entry, ULONG_PTR unknow
      WINE_MODREF *wm;
      LPCWSTR load_path = NtCurrentTeb()->Peb->ProcessParameters->DllPath.Buffer;
  
@@ -43,19 +43,19 @@ index 45d32399adf..b42cff8bcd4 100644
  
      if (process_detaching) return;
 diff --git a/dlls/ntdll/signal_i386.c b/dlls/ntdll/signal_i386.c
-index be88d9bf3c7..84ab7991886 100644
+index 3be6342a945..85329be4f42 100644
 --- a/dlls/ntdll/signal_i386.c
 +++ b/dlls/ntdll/signal_i386.c
-@@ -448,6 +448,8 @@ static ULONG first_ldt_entry = 32;
+@@ -444,6 +444,8 @@ struct stack_layout
  
- static wine_signal_handler handlers[256];
+ static ULONG first_ldt_entry = 32;
  
 +extern NTSTATUS WINAPI __syscall_NtGetContextThread( HANDLE handle, CONTEXT *context );
 +
  enum i386_trap_code
  {
      TRAP_x86_UNKNOWN    = -1,  /* Unknown fault (TRAP_sig not defined) */
-@@ -1159,7 +1161,7 @@ NTSTATUS CDECL DECLSPEC_HIDDEN __regs_NtGetContextThread( DWORD edi, DWORD esi,
+@@ -1127,7 +1129,7 @@ NTSTATUS CDECL DECLSPEC_HIDDEN __regs_NtGetContextThread( DWORD edi, DWORD esi,
      {
          context->Ebp    = ebp;
          context->Esp    = (DWORD)&retaddr;
@@ -78,7 +78,7 @@ index a5e6faa461a..51938bf84cc 100644
      ok( context.SegCs == LOWORD(expect.SegCs), "wrong SegCs %08x/%08x\n", context.SegCs, expect.SegCs );
      ok( context.SegDs == LOWORD(expect.SegDs), "wrong SegDs %08x/%08x\n", context.SegDs, expect.SegDs );
 diff --git a/dlls/ntdll/thread.c b/dlls/ntdll/thread.c
-index 79d13a01a86..94eb6d1252d 100644
+index 49daa33ca58..17b5d40215a 100644
 --- a/dlls/ntdll/thread.c
 +++ b/dlls/ntdll/thread.c
 @@ -173,6 +173,7 @@ int __cdecl __wine_dbg_output( const char *str )
@@ -99,10 +99,10 @@ index 79d13a01a86..94eb6d1252d 100644
      peb = teb->Peb;
      peb->FastPebLock        = &peb_lock;
 diff --git a/dlls/ntdll/unix/thread.c b/dlls/ntdll/unix/thread.c
-index b6458da61ad..a158ec20a6a 100644
+index d4b7a51a627..bdc87e4b9cf 100644
 --- a/dlls/ntdll/unix/thread.c
 +++ b/dlls/ntdll/unix/thread.c
-@@ -83,7 +83,7 @@ static void pthread_exit_wrapper( int status )
+@@ -85,7 +85,7 @@ static void pthread_exit_wrapper( int status )
   *           init_threading
   */
  TEB * CDECL init_threading( int *nb_threads_ptr, struct ldt_copy **ldt_copy, SIZE_T *size, BOOL *suspend,
@@ -111,7 +111,7 @@ index b6458da61ad..a158ec20a6a 100644
  {
      TEB *teb;
      SIZE_T info_size;
-@@ -95,6 +95,7 @@ TEB * CDECL init_threading( int *nb_threads_ptr, struct ldt_copy **ldt_copy, SIZ
+@@ -97,6 +97,7 @@ TEB * CDECL init_threading( int *nb_threads_ptr, struct ldt_copy **ldt_copy, SIZ
      nb_threads = nb_threads_ptr;
  
      teb = virtual_alloc_first_teb();
@@ -120,10 +120,10 @@ index b6458da61ad..a158ec20a6a 100644
      thread_data->request_fd = -1;
      thread_data->reply_fd   = -1;
 diff --git a/dlls/ntdll/unix/unix_private.h b/dlls/ntdll/unix/unix_private.h
-index 880e3aacf33..6c7b961e95a 100644
+index 19104f0f5cc..bdf8bc99e3f 100644
 --- a/dlls/ntdll/unix/unix_private.h
 +++ b/dlls/ntdll/unix/unix_private.h
-@@ -96,7 +96,7 @@ extern void CDECL server_release_fd( HANDLE handle, int unix_fd ) DECLSPEC_HIDDE
+@@ -101,7 +101,7 @@ extern void CDECL server_release_fd( HANDLE handle, int unix_fd ) DECLSPEC_HIDDE
  extern void CDECL server_init_process_done(void) DECLSPEC_HIDDEN;
  extern TEB * CDECL init_threading( int *nb_threads_ptr, struct ldt_copy **ldt_copy, SIZE_T *size,
                                     BOOL *suspend, unsigned int *cpus, BOOL *wow64,
@@ -133,19 +133,19 @@ index 880e3aacf33..6c7b961e95a 100644
  extern void CDECL DECLSPEC_NORETURN abort_thread( int status ) DECLSPEC_HIDDEN;
  extern void CDECL DECLSPEC_NORETURN exit_thread( int status ) DECLSPEC_HIDDEN;
 diff --git a/dlls/ntdll/unixlib.h b/dlls/ntdll/unixlib.h
-index 83c9f3a163b..63728b1c071 100644
+index 6a751993421..4e39ed53786 100644
 --- a/dlls/ntdll/unixlib.h
 +++ b/dlls/ntdll/unixlib.h
 @@ -28,7 +28,7 @@ struct ldt_copy;
  struct msghdr;
  
  /* increment this when you change the function table */
--#define NTDLL_UNIXLIB_VERSION 31
-+#define NTDLL_UNIXLIB_VERSION 32
+-#define NTDLL_UNIXLIB_VERSION 33
++#define NTDLL_UNIXLIB_VERSION 34
  
  struct unix_funcs
  {
-@@ -172,7 +172,7 @@ struct unix_funcs
+@@ -174,7 +174,7 @@ struct unix_funcs
  
      /* thread/process functions */
      TEB *         (CDECL *init_threading)( int *nb_threads_ptr, struct ldt_copy **ldt_copy, SIZE_T *size,
diff --git a/patches/ws2_32-WSACleanup/0002-ws2_32-Invalidate-client-side-file-descriptor-cache-.patch b/patches/ws2_32-WSACleanup/0002-ws2_32-Invalidate-client-side-file-descriptor-cache-.patch
index 25c315648..0861f99c0 100644
--- a/patches/ws2_32-WSACleanup/0002-ws2_32-Invalidate-client-side-file-descriptor-cache-.patch
+++ b/patches/ws2_32-WSACleanup/0002-ws2_32-Invalidate-client-side-file-descriptor-cache-.patch
@@ -1,4 +1,4 @@
-From 1bb20ff5903d8d5e81e8a2b7b22bf67b189b16ec Mon Sep 17 00:00:00 2001
+From 20661308a50202350a3a2887cbd558b1e931aad1 Mon Sep 17 00:00:00 2001
 From: Sebastian Lackner <sebastian@fds-team.de>
 Date: Sun, 6 Sep 2015 12:41:17 +0200
 Subject: [PATCH] ws2_32: Invalidate client-side file descriptor cache in
@@ -17,7 +17,7 @@ Subject: [PATCH] ws2_32: Invalidate client-side file descriptor cache in
  9 files changed, 36 insertions(+), 5 deletions(-)
 
 diff --git a/dlls/ntdll/ntdll.spec b/dlls/ntdll/ntdll.spec
-index c4d78128758..3d6c8850086 100644
+index ce5c580bd54..279845ae830 100644
 --- a/dlls/ntdll/ntdll.spec
 +++ b/dlls/ntdll/ntdll.spec
 @@ -1576,6 +1576,7 @@
@@ -48,10 +48,10 @@ index 6fb86a68d6f..2f95e190963 100644
  /***********************************************************************
   *           server_init_process
 diff --git a/dlls/ntdll/unix/loader.c b/dlls/ntdll/unix/loader.c
-index b5ee692024c..d8827b147df 100644
+index 618e3d6adb3..bdda739897b 100644
 --- a/dlls/ntdll/unix/loader.c
 +++ b/dlls/ntdll/unix/loader.c
-@@ -1074,6 +1074,7 @@ static struct unix_funcs unix_funcs =
+@@ -1076,6 +1076,7 @@ static struct unix_funcs unix_funcs =
      server_select,
      server_wait,
      server_send_fd,
@@ -91,10 +91,10 @@ index fb3f98dd579..0754928cfe8 100644
  /***********************************************************************
   *           server_get_unix_fd
 diff --git a/dlls/ntdll/unix/unix_private.h b/dlls/ntdll/unix/unix_private.h
-index a422fd825ed..880e3aacf33 100644
+index 03b92f9e912..19104f0f5cc 100644
 --- a/dlls/ntdll/unix/unix_private.h
 +++ b/dlls/ntdll/unix/unix_private.h
-@@ -84,6 +84,7 @@ extern unsigned int CDECL server_select( const select_op_t *select_op, data_size
+@@ -89,6 +89,7 @@ extern unsigned int CDECL server_select( const select_op_t *select_op, data_size
  extern unsigned int CDECL server_wait( const select_op_t *select_op, data_size_t size, UINT flags,
                                         const LARGE_INTEGER *timeout ) DECLSPEC_HIDDEN;
  extern void CDECL server_send_fd( int fd ) DECLSPEC_HIDDEN;
@@ -103,19 +103,19 @@ index a422fd825ed..880e3aacf33 100644
                                       int *needs_close, enum server_fd_type *type,
                                       unsigned int *options ) DECLSPEC_HIDDEN;
 diff --git a/dlls/ntdll/unixlib.h b/dlls/ntdll/unixlib.h
-index 58bdad19397..83c9f3a163b 100644
+index 017a0a71b3f..6a751993421 100644
 --- a/dlls/ntdll/unixlib.h
 +++ b/dlls/ntdll/unixlib.h
 @@ -28,7 +28,7 @@ struct ldt_copy;
  struct msghdr;
  
  /* increment this when you change the function table */
--#define NTDLL_UNIXLIB_VERSION 30
-+#define NTDLL_UNIXLIB_VERSION 31
+-#define NTDLL_UNIXLIB_VERSION 32
++#define NTDLL_UNIXLIB_VERSION 33
  
  struct unix_funcs
  {
-@@ -187,6 +187,7 @@ struct unix_funcs
+@@ -189,6 +189,7 @@ struct unix_funcs
      unsigned int  (CDECL *server_wait)( const select_op_t *select_op, data_size_t size, UINT flags,
                                          const LARGE_INTEGER *timeout );
      void          (CDECL *server_send_fd)( int fd );


diff --git a/patches/eventfd_synchronization/definition b/patches/eventfd_synchronization/definition
index e21e14584..1f084c73a 100644
--- a/patches/eventfd_synchronization/definition
+++ b/patches/eventfd_synchronization/definition
@@ -4,7 +4,6 @@ Fixes: [36692] Many multi-threaded applications have poor performance due to hea
 Depends: server-Shared_Memory
 Depends: ntdll-SystemRoot_Symlink
 Depends: ws2_32-WSACleanup
-Depends: ntdll-RtlCreateUserThread
 Depends: server-Realtime_Priority
 Depends: advapi32-Token_Integrity_Level
 Depends: ntdll-Junction_Points
diff --git a/patches/ntdll-RtlCreateUserThread/0001-ntdll-Refactor-RtlCreateUserThread-into-NtCreateThre.patch b/patches/ntdll-RtlCreateUserThread/0001-ntdll-Refactor-RtlCreateUserThread-into-NtCreateThre.patch
deleted file mode 100644
index 83ff11527..000000000
--- a/patches/ntdll-RtlCreateUserThread/0001-ntdll-Refactor-RtlCreateUserThread-into-NtCreateThre.patch
+++ /dev/null
@@ -1,287 +0,0 @@
-From df45ba13b75af0ae4c8c4166e39f9e640942466b Mon Sep 17 00:00:00 2001
-From: Andrew Wesie <awesie@gmail.com>
-Date: Fri, 27 Jul 2018 01:22:59 -0500
-Subject: [PATCH] ntdll: Refactor RtlCreateUserThread into NtCreateThreadEx.
-
-League of Legends hooks NtCreateThread or NtCreateThreadEx (depending on the
-reported version), and expects it to be called whenever a thread is created.
----
- dlls/ntdll/ntdll.spec |   2 +-
- dlls/ntdll/thread.c   | 180 +++++++++++++++++++++++++++++++++++-------
- include/winternl.h    |  27 +++++++
- 3 files changed, 180 insertions(+), 29 deletions(-)
-
-diff --git a/dlls/ntdll/ntdll.spec b/dlls/ntdll/ntdll.spec
-index 42532bd9f1c..65fdc30d7a4 100644
---- a/dlls/ntdll/ntdll.spec
-+++ b/dlls/ntdll/ntdll.spec
-@@ -182,7 +182,7 @@
- @ stdcall NtCreateSection(ptr long ptr ptr long long long)
- @ stdcall NtCreateSemaphore(ptr long ptr long long)
- @ stdcall NtCreateSymbolicLinkObject(ptr long ptr ptr)
--@ stub NtCreateThread
-+@ stdcall NtCreateThread(ptr long ptr long ptr ptr ptr long)
- @ stdcall NtCreateThreadEx(ptr long ptr long ptr ptr long long long long ptr)
- @ stdcall NtCreateTimer(ptr long ptr long)
- @ stub NtCreateToken
-diff --git a/dlls/ntdll/thread.c b/dlls/ntdll/thread.c
-index d5e34cae3b1..4e1b3f23b7c 100644
---- a/dlls/ntdll/thread.c
-+++ b/dlls/ntdll/thread.c
-@@ -377,28 +377,10 @@ static void WINAPI call_thread_entry_point( LPTHREAD_START_ROUTINE entry, void *
- /***********************************************************************
-  *              NtCreateThreadEx   (NTDLL.@)
-  */
--NTSTATUS WINAPI NtCreateThreadEx( HANDLE *handle_ptr, ACCESS_MASK access, OBJECT_ATTRIBUTES *attr,
--                                  HANDLE process, LPTHREAD_START_ROUTINE start, void *param,
-+NTSTATUS WINAPI NtCreateThreadEx( HANDLE *handle_ptr, ACCESS_MASK access, OBJECT_ATTRIBUTES *thread_attr,
-+                                  HANDLE process, PRTL_THREAD_START_ROUTINE start, void *param,
-                                   ULONG flags, ULONG zero_bits, ULONG stack_commit,
--                                  ULONG stack_reserve, void *attribute_list )
--{
--    FIXME( "%p, %x, %p, %p, %p, %p, %x, %x, %x, %x, %p semi-stub!\n", handle_ptr, access, attr,
--           process, start, param, flags, zero_bits, stack_commit, stack_reserve, attribute_list );
--
--    return RtlCreateUserThread( process, NULL, flags & THREAD_CREATE_FLAGS_CREATE_SUSPENDED,
--                                NULL, stack_reserve, stack_commit, (PRTL_THREAD_START_ROUTINE)start,
--                                param, handle_ptr, NULL );
--}
--
--
--/***********************************************************************
-- *              RtlCreateUserThread   (NTDLL.@)
-- */
--NTSTATUS WINAPI RtlCreateUserThread( HANDLE process, SECURITY_DESCRIPTOR *descr,
--                                     BOOLEAN suspended, PVOID stack_addr,
--                                     SIZE_T stack_reserve, SIZE_T stack_commit,
--                                     PRTL_THREAD_START_ROUTINE start, void *param,
--                                     HANDLE *handle_ptr, CLIENT_ID *id )
-+                                  ULONG stack_reserve, PPS_ATTRIBUTE_LIST ps_attr_list )
- {
-     HANDLE handle = 0, actctx = 0;
-     DWORD tid = 0;
-@@ -406,6 +388,35 @@ NTSTATUS WINAPI RtlCreateUserThread( HANDLE process, SECURITY_DESCRIPTOR *descr,
-     NTSTATUS status;
-     data_size_t len = 0;
-     struct object_attributes *objattr = NULL;
-+    BOOLEAN suspended = !!(flags & THREAD_CREATE_FLAGS_CREATE_SUSPENDED);
-+    CLIENT_ID *id = NULL;
-+
-+    TRACE("(%p, %d, %p, %p, %p, %p, %u, %u, %u, %u, %p)\n",
-+          handle_ptr, access, thread_attr, process, start, param, flags,
-+          zero_bits, stack_commit, stack_reserve, ps_attr_list);
-+
-+    if (ps_attr_list != NULL)
-+    {
-+        PS_ATTRIBUTE *ps_attr,
-+                     *ps_attr_end = (PS_ATTRIBUTE *)((UINT_PTR)ps_attr_list + ps_attr_list->TotalLength);
-+        for (ps_attr = &ps_attr_list->Attributes[0]; ps_attr < ps_attr_end; ps_attr++)
-+        {
-+            switch (ps_attr->Attribute)
-+            {
-+            case PS_ATTRIBUTE_CLIENT_ID:
-+                /* TODO validate ps_attr->Size == sizeof(CLIENT_ID) */
-+                /* TODO set *ps_attr->ReturnLength */
-+                id = ps_attr->ValuePtr;
-+                break;
-+            default:
-+                FIXME("Unsupported attribute %08X\n", ps_attr->Attribute);
-+                break;
-+            }
-+        }
-+    }
-+
-+    if (access == (ACCESS_MASK)0)
-+        access = THREAD_ALL_ACCESS;
- 
-     if (process != NtCurrentProcess())
-     {
-@@ -432,12 +443,7 @@ NTSTATUS WINAPI RtlCreateUserThread( HANDLE process, SECURITY_DESCRIPTOR *descr,
-         return result.create_thread.status;
-     }
- 
--    if (descr)
--    {
--        OBJECT_ATTRIBUTES thread_attr;
--        InitializeObjectAttributes( &thread_attr, NULL, 0, NULL, descr );
--        if ((status = alloc_object_attributes( &thread_attr, &objattr, &len ))) return status;
--    }
-+    if ((status = alloc_object_attributes( thread_attr, &objattr, &len ))) return status;
- 
-     if (unix_funcs->server_pipe( request_pipe ) == -1)
-     {
-@@ -449,7 +455,7 @@ NTSTATUS WINAPI RtlCreateUserThread( HANDLE process, SECURITY_DESCRIPTOR *descr,
-     SERVER_START_REQ( new_thread )
-     {
-         req->process    = wine_server_obj_handle( process );
--        req->access     = THREAD_ALL_ACCESS;
-+        req->access     = access;
-         req->suspend    = suspended;
-         req->request_fd = request_pipe[0];
-         wine_server_add_data( req, objattr, len );
-@@ -539,6 +545,124 @@ NTSTATUS WINAPI NtSuspendThread( HANDLE handle, PULONG count )
-     return ret;
- }
- 
-+NTSTATUS WINAPI NtCreateThread( HANDLE *handle_ptr, ACCESS_MASK access, OBJECT_ATTRIBUTES *attr, HANDLE process,
-+                                CLIENT_ID *id, CONTEXT *context, INITIAL_TEB *teb, BOOLEAN suspended )
-+{
-+    PRTL_THREAD_START_ROUTINE entry;
-+    void *arg;
-+    ULONG flags = suspended ? THREAD_CREATE_FLAGS_CREATE_SUSPENDED : 0;
-+    PS_ATTRIBUTE_LIST attr_list, *pattr_list = NULL;
-+
-+#if defined(__i386__)
-+        entry = (PRTL_THREAD_START_ROUTINE) context->Eax;
-+        arg = (void *)context->Ebx;
-+#elif defined(__x86_64__)
-+        entry = (PRTL_THREAD_START_ROUTINE) context->Rcx;
-+        arg = (void *)context->Rdx;
-+#elif defined(__arm__)
-+        entry = (PRTL_THREAD_START_ROUTINE) context->R0;
-+        arg = (void *)context->R1;
-+#elif defined(__aarch64__)
-+        entry = (PRTL_THREAD_START_ROUTINE) context->u.X0;
-+        arg = (void *)context->u.X1;
-+#elif defined(__powerpc__)
-+        entry = (PRTL_THREAD_START_ROUTINE) context->Gpr3;
-+        arg = (void *)context->Gpr4;
-+#endif
-+
-+    if (id)
-+    {
-+        attr_list.TotalLength = sizeof(PS_ATTRIBUTE_LIST);
-+        attr_list.Attributes[0].Attribute = PS_ATTRIBUTE_CLIENT_ID;
-+        attr_list.Attributes[0].Size = sizeof(CLIENT_ID);
-+        attr_list.Attributes[0].ValuePtr = id;
-+        attr_list.Attributes[0].ReturnLength = NULL;
-+        pattr_list = &attr_list;
-+    }
-+
-+    return NtCreateThreadEx(handle_ptr, access, attr, process, entry, arg, flags, 0, 0, 0, pattr_list);
-+}
-+
-+NTSTATUS WINAPI __syscall_NtCreateThread( HANDLE *handle_ptr, ACCESS_MASK access, OBJECT_ATTRIBUTES *attr,
-+                                          HANDLE process, CLIENT_ID *id, CONTEXT *context, INITIAL_TEB *teb,
-+                                          BOOLEAN suspended );
-+NTSTATUS WINAPI __syscall_NtCreateThreadEx( HANDLE *handle_ptr, ACCESS_MASK access, OBJECT_ATTRIBUTES *attr,
-+                                            HANDLE process, LPTHREAD_START_ROUTINE start, void *param,
-+                                            ULONG flags, ULONG zero_bits, ULONG stack_commit,
-+                                            ULONG stack_reserve, PPS_ATTRIBUTE_LIST ps_attr_list );
-+
-+/***********************************************************************
-+ *              RtlCreateUserThread   (NTDLL.@)
-+ */
-+NTSTATUS WINAPI RtlCreateUserThread( HANDLE process, SECURITY_DESCRIPTOR *descr,
-+                                     BOOLEAN suspended, void *stack_addr,
-+                                     SIZE_T stack_reserve, SIZE_T stack_commit,
-+                                     PRTL_THREAD_START_ROUTINE entry, void *arg,
-+                                     HANDLE *handle_ptr, CLIENT_ID *id )
-+{
-+    OBJECT_ATTRIBUTES thread_attr;
-+    InitializeObjectAttributes( &thread_attr, NULL, 0, NULL, descr );
-+    if (stack_addr)
-+        FIXME("stack_addr != NULL is unimplemented\n");
-+
-+    if (NtCurrentTeb()->Peb->OSMajorVersion < 6)
-+    {
-+        /* Use old API. */
-+        CONTEXT context = { 0 };
-+
-+        if (stack_commit)
-+            FIXME("stack_commit != 0 is unimplemented\n");
-+        if (stack_reserve)
-+            FIXME("stack_reserve != 0 is unimplemented\n");
-+
-+        context.ContextFlags = CONTEXT_FULL;
-+#if defined(__i386__)
-+        context.Eax = (DWORD)entry;
-+        context.Ebx = (DWORD)arg;
-+#elif defined(__x86_64__)
-+        context.Rcx = (ULONG_PTR)entry;
-+        context.Rdx = (ULONG_PTR)arg;
-+#elif defined(__arm__)
-+        context.R0 = (DWORD)entry;
-+        context.R1 = (DWORD)arg;
-+#elif defined(__aarch64__)
-+        context.u.X0 = (DWORD_PTR)entry;
-+        context.u.X1 = (DWORD_PTR)arg;
-+#elif defined(__powerpc__)
-+        context.Gpr3 = (DWORD)entry;
-+        context.Gpr4 = (DWORD)arg;
-+#endif
-+
-+#if defined(__i386__) || defined(__x86_64__)
-+        return __syscall_NtCreateThread(handle_ptr, (ACCESS_MASK)0, &thread_attr, process, id, &context, NULL, suspended);
-+#else
-+        return NtCreateThread(handle_ptr, (ACCESS_MASK)0, &thread_attr, process, id, &context, NULL, suspended);
-+#endif
-+    }
-+    else
-+    {
-+        /* Use new API from Vista+. */
-+        ULONG flags = suspended ? THREAD_CREATE_FLAGS_CREATE_SUSPENDED : 0;
-+        PS_ATTRIBUTE_LIST attr_list, *pattr_list = NULL;
-+
-+        if (id)
-+        {
-+            attr_list.TotalLength = sizeof(PS_ATTRIBUTE_LIST);
-+            attr_list.Attributes[0].Attribute = PS_ATTRIBUTE_CLIENT_ID;
-+            attr_list.Attributes[0].Size = sizeof(CLIENT_ID);
-+            attr_list.Attributes[0].ValuePtr = id;
-+            attr_list.Attributes[0].ReturnLength = NULL;
-+            pattr_list = &attr_list;
-+        }
-+
-+#if defined(__i386__) || defined(__x86_64__)
-+        return __syscall_NtCreateThreadEx(handle_ptr, (ACCESS_MASK)0, &thread_attr, process, (LPTHREAD_START_ROUTINE)entry, arg, flags, 0, stack_commit, stack_reserve, pattr_list);
-+#else
-+        return NtCreateThreadEx(handle_ptr, (ACCESS_MASK)0, &thread_attr, process, (LPTHREAD_START_ROUTINE)entry, arg, flags, 0, stack_commit, stack_reserve, pattr_list);
-+#endif
-+    }
-+}
-+
- 
- /******************************************************************************
-  *              NtResumeThread   (NTDLL.@)
-diff --git a/include/winternl.h b/include/winternl.h
-index f362790dbca..b79fcd67012 100644
---- a/include/winternl.h
-+++ b/include/winternl.h
-@@ -2274,6 +2274,33 @@ typedef struct _NLSTABLEINFO
-     USHORT     *LowerCaseTable;
- } NLSTABLEINFO, *PNLSTABLEINFO;
- 
-+#define PS_ATTRIBUTE_THREAD  0x00010000
-+#define PS_ATTRIBUTE_INPUT   0x00020000
-+#define PS_ATTRIBUTE_UNKNOWN 0x00040000
-+
-+typedef enum _PS_ATTRIBUTE_NUM {
-+    PsAttributeClientId = 3,
-+} PS_ATTRIBUTE_NUM;
-+
-+#define PS_ATTRIBUTE_CLIENT_ID (PsAttributeClientId | PS_ATTRIBUTE_THREAD)
-+
-+typedef struct _PS_ATTRIBUTE {
-+    ULONG Attribute;
-+    SIZE_T Size;
-+    union {
-+        ULONG Value;
-+        PVOID ValuePtr;
-+    };
-+    PSIZE_T ReturnLength;
-+} PS_ATTRIBUTE;
-+
-+typedef struct _PS_ATTRIBUTE_LIST {
-+    SIZE_T TotalLength;
-+    PS_ATTRIBUTE Attributes[1];
-+} PS_ATTRIBUTE_LIST, *PPS_ATTRIBUTE_LIST;
-+
-+
-+
- /*************************************************************************
-  * Loader structures
-  *
--- 
-2.26.2
-
diff --git a/patches/ntdll-RtlCreateUserThread/definition b/patches/ntdll-RtlCreateUserThread/definition
deleted file mode 100644
index f9fbdcf1e..000000000
--- a/patches/ntdll-RtlCreateUserThread/definition
+++ /dev/null
@@ -1,2 +0,0 @@
-Fixes: [45571] League of Legends 8.12+ fails to start a game (anticheat engine, hooking of NtCreateThread/Ex)
-Depends: winebuild-Fake_Dlls
diff --git a/patches/ntdll-ThreadTime/0006-ntdll-Fill-process-virtual-memory-counters-in-NtQuer.patch b/patches/ntdll-ThreadTime/0006-ntdll-Fill-process-virtual-memory-counters-in-NtQuer.patch
index 7b2e48dd6..829d8f4dd 100644
--- a/patches/ntdll-ThreadTime/0006-ntdll-Fill-process-virtual-memory-counters-in-NtQuer.patch
+++ b/patches/ntdll-ThreadTime/0006-ntdll-Fill-process-virtual-memory-counters-in-NtQuer.patch
@@ -1,4 +1,4 @@
-From 4fd43a8364333519e777718b66e628ace1ad9fff Mon Sep 17 00:00:00 2001
+From ee29bbfa7e10de295db39ab6b89f2175d00692c5 Mon Sep 17 00:00:00 2001
 From: =?UTF-8?q?Michael=20M=C3=BCller?= <michael@fds-team.de>
 Date: Thu, 9 Mar 2017 22:56:45 +0100
 Subject: [PATCH] ntdll: Fill process virtual memory counters in
@@ -29,10 +29,10 @@ index cbb7937631d..bb078c1aa21 100644
                          }
                          len += procstructlen;
 diff --git a/dlls/ntdll/ntdll_misc.h b/dlls/ntdll/ntdll_misc.h
-index 3ea0dd81349..3e2fa3642c1 100644
+index 6e77694d87b..d725a678246 100644
 --- a/dlls/ntdll/ntdll_misc.h
 +++ b/dlls/ntdll/ntdll_misc.h
-@@ -249,6 +249,7 @@ void     WINAPI LdrInitializeThunk(CONTEXT*,void**,ULONG_PTR,ULONG_PTR);
+@@ -248,6 +248,7 @@ void     WINAPI LdrInitializeThunk(CONTEXT*,void**,ULONG_PTR,ULONG_PTR);
  /* process / thread time */
  extern BOOL read_process_time(int unix_pid, int unix_tid, unsigned long clk_tck,
                                LARGE_INTEGER *kernel, LARGE_INTEGER *user) DECLSPEC_HIDDEN;
@@ -41,7 +41,7 @@ index 3ea0dd81349..3e2fa3642c1 100644
  /* string functions */
  int    __cdecl NTDLL_tolower( int c );
 diff --git a/dlls/ntdll/process.c b/dlls/ntdll/process.c
-index f47d3c4bc6c..b36fc037dc5 100644
+index 35937ce6026..b4f2dbc8160 100644
 --- a/dlls/ntdll/process.c
 +++ b/dlls/ntdll/process.c
 @@ -192,7 +192,7 @@ static void fill_VM_COUNTERS(VM_COUNTERS* pvmi)
@@ -54,11 +54,11 @@ index f47d3c4bc6c..b36fc037dc5 100644
  
  #endif
 diff --git a/dlls/ntdll/thread.c b/dlls/ntdll/thread.c
-index cd1b65a210c..71051adc8b0 100644
+index 14198d77b7b..8ae8251f975 100644
 --- a/dlls/ntdll/thread.c
 +++ b/dlls/ntdll/thread.c
-@@ -355,6 +355,42 @@ void WINAPI RtlExitUserThread( ULONG status )
-     for (;;) unix_funcs->exit_thread( status );
+@@ -381,6 +381,42 @@ NTSTATUS WINAPI NtCreateThreadEx( HANDLE *handle_ptr, ACCESS_MASK access, OBJECT
+                                          flags, zero_bits, stack_commit, stack_reserve, attr_list );
  }
  
 +BOOL read_process_memory_stats(int unix_pid, VM_COUNTERS *pvmi)
@@ -99,7 +99,7 @@ index cd1b65a210c..71051adc8b0 100644
 +}
  
  /***********************************************************************
-  *           call_thread_entry_point
+  *              RtlCreateUserThread   (NTDLL.@)
 -- 
 2.26.2
 
diff --git a/patches/patchinstall.sh b/patches/patchinstall.sh
index f790eae02..800cdcdf5 100755
--- a/patches/patchinstall.sh
+++ b/patches/patchinstall.sh
@@ -190,7 +190,6 @@ patch_enable_all ()
 	enable_ntdll_NtSetLdtEntries="$1"
 	enable_ntdll_Pipe_SpecialCharacters="$1"
 	enable_ntdll_ProcessQuotaLimits="$1"
-	enable_ntdll_RtlCreateUserThread="$1"
 	enable_ntdll_RtlQueryPackageIdentity="$1"
 	enable_ntdll_RtlQueryRegistryValuesEx="$1"
 	enable_ntdll_Serial_Port_Detection="$1"
@@ -670,9 +669,6 @@ patch_enable ()
 		ntdll-ProcessQuotaLimits)
 			enable_ntdll_ProcessQuotaLimits="$2"
 			;;
-		ntdll-RtlCreateUserThread)
-			enable_ntdll_RtlCreateUserThread="$2"
-			;;
 		ntdll-RtlQueryPackageIdentity)
 			enable_ntdll_RtlQueryPackageIdentity="$2"
 			;;
@@ -1676,13 +1672,6 @@ if test "$enable_ntdll_Syscall_Emulation" -eq 1; then
 	enable_winebuild_Fake_Dlls=1
 fi
 
-if test "$enable_ntdll_RtlCreateUserThread" -eq 1; then
-	if test "$enable_winebuild_Fake_Dlls" -gt 1; then
-		abort "Patchset winebuild-Fake_Dlls disabled, but ntdll-RtlCreateUserThread depends on that."
-	fi
-	enable_winebuild_Fake_Dlls=1
-fi
-
 if test "$enable_ntdll_NtQueryEaFile" -eq 1; then
 	if test "$enable_ntdll_Junction_Points" -gt 1; then
 		abort "Patchset ntdll-Junction_Points disabled, but ntdll-NtQueryEaFile depends on that."
@@ -4170,24 +4159,6 @@ if test "$enable_ntdll_ProcessQuotaLimits" -eq 1; then
 	) >> "$patchlist"
 fi
 
-# Patchset ntdll-RtlCreateUserThread
-# |
-# | This patchset has the following (direct or indirect) dependencies:
-# |   *	ntdll-WRITECOPY, ws2_32-WSACleanup, winebuild-Fake_Dlls
-# |
-# | This patchset fixes the following Wine bugs:
-# |   *	[#45571] League of Legends 8.12+ fails to start a game (anticheat engine, hooking of NtCreateThread/Ex)
-# |
-# | Modified files:
-# |   *	dlls/ntdll/ntdll.spec, dlls/ntdll/thread.c, include/winternl.h
-# |
-if test "$enable_ntdll_RtlCreateUserThread" -eq 1; then
-	patch_apply ntdll-RtlCreateUserThread/0001-ntdll-Refactor-RtlCreateUserThread-into-NtCreateThre.patch
-	(
-		printf '%s\n' '+    { "Andrew Wesie", "ntdll: Refactor RtlCreateUserThread into NtCreateThreadEx.", 1 },';
-	) >> "$patchlist"
-fi
-
 # Patchset ntdll-RtlQueryPackageIdentity
 # |
 # | Modified files:
diff --git a/patches/winebuild-Fake_Dlls/0003-winebuild-Generate-syscall-thunks-for-ntdll-exports.patch b/patches/winebuild-Fake_Dlls/0003-winebuild-Generate-syscall-thunks-for-ntdll-exports.patch
index 6d62c691d..751b497da 100644
--- a/patches/winebuild-Fake_Dlls/0003-winebuild-Generate-syscall-thunks-for-ntdll-exports.patch
+++ b/patches/winebuild-Fake_Dlls/0003-winebuild-Generate-syscall-thunks-for-ntdll-exports.patch
@@ -1,4 +1,4 @@
-From e695bf789da272b2855ad864b0837c38c1a78e62 Mon Sep 17 00:00:00 2001
+From 1fec139d96f32869fc0c8d15219fff493d9951d8 Mon Sep 17 00:00:00 2001
 From: =?UTF-8?q?Michael=20M=C3=BCller?= <michael@fds-team.de>
 Date: Thu, 11 May 2017 05:32:55 +0200
 Subject: [PATCH] winebuild: Generate syscall thunks for ntdll exports.
@@ -78,7 +78,7 @@ index a5e6faa461a..51938bf84cc 100644
      ok( context.SegCs == LOWORD(expect.SegCs), "wrong SegCs %08x/%08x\n", context.SegCs, expect.SegCs );
      ok( context.SegDs == LOWORD(expect.SegDs), "wrong SegDs %08x/%08x\n", context.SegDs, expect.SegDs );
 diff --git a/dlls/ntdll/thread.c b/dlls/ntdll/thread.c
-index a2f5df1b1c2..dc9affc061a 100644
+index 79d13a01a86..94eb6d1252d 100644
 --- a/dlls/ntdll/thread.c
 +++ b/dlls/ntdll/thread.c
 @@ -173,6 +173,7 @@ int __cdecl __wine_dbg_output( const char *str )
@@ -99,7 +99,7 @@ index a2f5df1b1c2..dc9affc061a 100644
      peb = teb->Peb;
      peb->FastPebLock        = &peb_lock;
 diff --git a/dlls/ntdll/unix/thread.c b/dlls/ntdll/unix/thread.c
-index d3e07cae80e..449e5814c2e 100644
+index b6458da61ad..a158ec20a6a 100644
 --- a/dlls/ntdll/unix/thread.c
 +++ b/dlls/ntdll/unix/thread.c
 @@ -83,7 +83,7 @@ static void pthread_exit_wrapper( int status )
@@ -120,42 +120,42 @@ index d3e07cae80e..449e5814c2e 100644
      thread_data->request_fd = -1;
      thread_data->reply_fd   = -1;
 diff --git a/dlls/ntdll/unix/unix_private.h b/dlls/ntdll/unix/unix_private.h
-index 6512160972d..e9a56b37ea1 100644
+index 880e3aacf33..6c7b961e95a 100644
 --- a/dlls/ntdll/unix/unix_private.h
 +++ b/dlls/ntdll/unix/unix_private.h
-@@ -98,7 +98,7 @@ extern int CDECL server_pipe( int fd[2] ) DECLSPEC_HIDDEN;
+@@ -96,7 +96,7 @@ extern void CDECL server_release_fd( HANDLE handle, int unix_fd ) DECLSPEC_HIDDE
  extern void CDECL server_init_process_done(void) DECLSPEC_HIDDEN;
  extern TEB * CDECL init_threading( int *nb_threads_ptr, struct ldt_copy **ldt_copy, SIZE_T *size,
                                     BOOL *suspend, unsigned int *cpus, BOOL *wow64,
 -                                   timeout_t *start_time ) DECLSPEC_HIDDEN;
 +                                   timeout_t *start_time, void *syscall_handler ) DECLSPEC_HIDDEN;
- extern NTSTATUS CDECL create_thread( SIZE_T stack_reserve, SIZE_T stack_commit, HANDLE actctx, DWORD tid,
-                                      int request_fd, PRTL_THREAD_START_ROUTINE start,
-                                      void *param, void *relay ) DECLSPEC_HIDDEN;
+ extern void CDECL DECLSPEC_NORETURN start_process( PRTL_THREAD_START_ROUTINE entry, BOOL suspend, void *relay ) DECLSPEC_HIDDEN;
+ extern void CDECL DECLSPEC_NORETURN abort_thread( int status ) DECLSPEC_HIDDEN;
+ extern void CDECL DECLSPEC_NORETURN exit_thread( int status ) DECLSPEC_HIDDEN;
 diff --git a/dlls/ntdll/unixlib.h b/dlls/ntdll/unixlib.h
-index 72f35cf67e8..93a51871f1d 100644
+index 83c9f3a163b..63728b1c071 100644
 --- a/dlls/ntdll/unixlib.h
 +++ b/dlls/ntdll/unixlib.h
 @@ -28,7 +28,7 @@ struct ldt_copy;
  struct msghdr;
  
  /* increment this when you change the function table */
--#define NTDLL_UNIXLIB_VERSION 28
-+#define NTDLL_UNIXLIB_VERSION 29
+-#define NTDLL_UNIXLIB_VERSION 31
++#define NTDLL_UNIXLIB_VERSION 32
  
  struct unix_funcs
  {
-@@ -165,7 +165,7 @@ struct unix_funcs
+@@ -172,7 +172,7 @@ struct unix_funcs
  
      /* thread/process functions */
      TEB *         (CDECL *init_threading)( int *nb_threads_ptr, struct ldt_copy **ldt_copy, SIZE_T *size,
 -                                           BOOL *suspend, unsigned int *cpus, BOOL *wow64, timeout_t *start_time );
 +                                           BOOL *suspend, unsigned int *cpus, BOOL *wow64, timeout_t *start_time, void *syscall_handler );
-     NTSTATUS      (CDECL *create_thread)( SIZE_T stack_reserve, SIZE_T stack_commit, HANDLE actctx,
-                                           DWORD tid, int request_fd, PRTL_THREAD_START_ROUTINE start,
-                                           void *param, void *relay );
+     void          (CDECL *start_process)( PRTL_THREAD_START_ROUTINE entry, BOOL suspend, void *relay );
+     void          (CDECL *abort_thread)( int status );
+     void          (CDECL *exit_thread)( int status );
 diff --git a/include/winternl.h b/include/winternl.h
-index 44a58cadc7a..065f3d24f52 100644
+index 9b8218c861f..ff6916c98e7 100644
 --- a/include/winternl.h
 +++ b/include/winternl.h
 @@ -359,7 +359,7 @@ typedef struct _TEB
diff --git a/patches/ws2_32-WSACleanup/0002-ws2_32-Invalidate-client-side-file-descriptor-cache-.patch b/patches/ws2_32-WSACleanup/0002-ws2_32-Invalidate-client-side-file-descriptor-cache-.patch
index d830cf2db..25c315648 100644
--- a/patches/ws2_32-WSACleanup/0002-ws2_32-Invalidate-client-side-file-descriptor-cache-.patch
+++ b/patches/ws2_32-WSACleanup/0002-ws2_32-Invalidate-client-side-file-descriptor-cache-.patch
@@ -1,4 +1,4 @@
-From 613ea1e263d4fbda67465ebaae2331df7728106a Mon Sep 17 00:00:00 2001
+From 1bb20ff5903d8d5e81e8a2b7b22bf67b189b16ec Mon Sep 17 00:00:00 2001
 From: Sebastian Lackner <sebastian@fds-team.de>
 Date: Sun, 6 Sep 2015 12:41:17 +0200
 Subject: [PATCH] ws2_32: Invalidate client-side file descriptor cache in
@@ -17,10 +17,10 @@ Subject: [PATCH] ws2_32: Invalidate client-side file descriptor cache in
  9 files changed, 36 insertions(+), 5 deletions(-)
 
 diff --git a/dlls/ntdll/ntdll.spec b/dlls/ntdll/ntdll.spec
-index 42532bd9f1c..ba46f170670 100644
+index c4d78128758..3d6c8850086 100644
 --- a/dlls/ntdll/ntdll.spec
 +++ b/dlls/ntdll/ntdll.spec
-@@ -1575,6 +1575,7 @@
+@@ -1576,6 +1576,7 @@
  
  # Server interface
  @ cdecl -norelay wine_server_call(ptr)
@@ -48,22 +48,22 @@ index 6fb86a68d6f..2f95e190963 100644
  /***********************************************************************
   *           server_init_process
 diff --git a/dlls/ntdll/unix/loader.c b/dlls/ntdll/unix/loader.c
-index 767cae92b48..05c6f1e43bf 100644
+index b5ee692024c..d8827b147df 100644
 --- a/dlls/ntdll/unix/loader.c
 +++ b/dlls/ntdll/unix/loader.c
 @@ -1074,6 +1074,7 @@ static struct unix_funcs unix_funcs =
+     server_select,
      server_wait,
-     server_queue_process_apc,
      server_send_fd,
 +    server_remove_fds_from_cache_by_type,
      server_get_unix_fd,
      server_fd_to_handle,
      server_handle_to_fd,
 diff --git a/dlls/ntdll/unix/server.c b/dlls/ntdll/unix/server.c
-index 66c438fd62d..c6eb52c5986 100644
+index fb3f98dd579..0754928cfe8 100644
 --- a/dlls/ntdll/unix/server.c
 +++ b/dlls/ntdll/unix/server.c
-@@ -991,6 +991,26 @@ static int remove_fd_from_cache( HANDLE handle )
+@@ -995,6 +995,26 @@ static int remove_fd_from_cache( HANDLE handle )
      return fd;
  }
  
@@ -91,33 +91,33 @@ index 66c438fd62d..c6eb52c5986 100644
  /***********************************************************************
   *           server_get_unix_fd
 diff --git a/dlls/ntdll/unix/unix_private.h b/dlls/ntdll/unix/unix_private.h
-index 6fdaa17f087..6512160972d 100644
+index a422fd825ed..880e3aacf33 100644
 --- a/dlls/ntdll/unix/unix_private.h
 +++ b/dlls/ntdll/unix/unix_private.h
-@@ -85,6 +85,7 @@ extern unsigned int CDECL server_wait( const select_op_t *select_op, data_size_t
+@@ -84,6 +84,7 @@ extern unsigned int CDECL server_select( const select_op_t *select_op, data_size
+ extern unsigned int CDECL server_wait( const select_op_t *select_op, data_size_t size, UINT flags,
                                         const LARGE_INTEGER *timeout ) DECLSPEC_HIDDEN;
- extern unsigned int CDECL server_queue_process_apc( HANDLE process, const apc_call_t *call, apc_result_t *result ) DECLSPEC_HIDDEN;
  extern void CDECL server_send_fd( int fd ) DECLSPEC_HIDDEN;
 +extern void CDECL server_remove_fds_from_cache_by_type( enum server_fd_type type ) DECLSPEC_HIDDEN;
  extern int CDECL server_get_unix_fd( HANDLE handle, unsigned int wanted_access, int *unix_fd,
                                       int *needs_close, enum server_fd_type *type,
                                       unsigned int *options ) DECLSPEC_HIDDEN;
 diff --git a/dlls/ntdll/unixlib.h b/dlls/ntdll/unixlib.h
-index 4e5cec6637e..72f35cf67e8 100644
+index 58bdad19397..83c9f3a163b 100644
 --- a/dlls/ntdll/unixlib.h
 +++ b/dlls/ntdll/unixlib.h
 @@ -28,7 +28,7 @@ struct ldt_copy;
  struct msghdr;
  
  /* increment this when you change the function table */
--#define NTDLL_UNIXLIB_VERSION 27
-+#define NTDLL_UNIXLIB_VERSION 28
+-#define NTDLL_UNIXLIB_VERSION 30
++#define NTDLL_UNIXLIB_VERSION 31
  
  struct unix_funcs
  {
-@@ -184,6 +184,7 @@ struct unix_funcs
+@@ -187,6 +187,7 @@ struct unix_funcs
+     unsigned int  (CDECL *server_wait)( const select_op_t *select_op, data_size_t size, UINT flags,
                                          const LARGE_INTEGER *timeout );
-     unsigned int  (CDECL *server_queue_process_apc)( HANDLE process, const apc_call_t *call, apc_result_t *result );
      void          (CDECL *server_send_fd)( int fd );
 +    void          (CDECL *server_remove_fds_from_cache_by_type)( enum server_fd_type type );
      int           (CDECL *server_get_unix_fd)( HANDLE handle, unsigned int wanted_access, int *unix_fd,

diff --git a/patches/winebuild-Fake_Dlls/0010-tools-winebuild-Add-syscall-thunks-for-64-bit.patch b/patches/winebuild-Fake_Dlls/0010-tools-winebuild-Add-syscall-thunks-for-64-bit.patch
index b1663793e..f1f5a5e5c 100644
--- a/patches/winebuild-Fake_Dlls/0010-tools-winebuild-Add-syscall-thunks-for-64-bit.patch
+++ b/patches/winebuild-Fake_Dlls/0010-tools-winebuild-Add-syscall-thunks-for-64-bit.patch
@@ -1,22 +1,24 @@
-From 2f82153b52cd517c9e30ab5ac26a0c60ed70a48d Mon Sep 17 00:00:00 2001
+From 7a2dceb0c325caa23d55f4ed4747221b09885c85 Mon Sep 17 00:00:00 2001
 From: =?UTF-8?q?Michael=20M=C3=BCller?= <michael@fds-team.de>
 Date: Thu, 7 Sep 2017 00:38:09 +0200
 Subject: [PATCH] tools/winebuild: Add syscall thunks for 64 bit.
 
 ---
- dlls/kernel32/tests/loader.c |   7 +-
- dlls/ntdll/unix/virtual.c    |   4 +-
- libs/wine/loader.c           |   4 +
- server/mapping.c             |   6 +-
- tools/winebuild/parser.c     |   2 +-
- tools/winebuild/spec32.c     | 285 ++++++++++++++++++++++++++++++++++-
- 6 files changed, 297 insertions(+), 11 deletions(-)
+ dlls/kernel32/tests/loader.c   |   7 +-
+ dlls/ntdll/unix/thread.c       |   2 +-
+ dlls/ntdll/unix/unix_private.h |   2 +-
+ dlls/ntdll/unix/virtual.c      |  12 +-
+ libs/wine/loader.c             |   4 +
+ server/mapping.c               |   6 +-
+ tools/winebuild/parser.c       |   2 +-
+ tools/winebuild/spec32.c       | 285 ++++++++++++++++++++++++++++++++-
+ 8 files changed, 306 insertions(+), 14 deletions(-)
 
 diff --git a/dlls/kernel32/tests/loader.c b/dlls/kernel32/tests/loader.c
-index 95939ba6bde..ae5462f6e55 100644
+index 1f525194ce7..21af7b4ce7a 100644
 --- a/dlls/kernel32/tests/loader.c
 +++ b/dlls/kernel32/tests/loader.c
-@@ -1573,7 +1573,7 @@ static void test_filenames(void)
+@@ -1574,7 +1574,7 @@ static void test_filenames(void)
  
  static void test_FakeDLL(void)
  {
@@ -25,7 +27,7 @@ index 95939ba6bde..ae5462f6e55 100644
      NTSTATUS (WINAPI *pNtSetEvent)(HANDLE, ULONG *) = NULL;
      IMAGE_EXPORT_DIRECTORY *dir;
      HMODULE module = GetModuleHandleA("ntdll.dll");
-@@ -1615,8 +1615,13 @@ static void test_FakeDLL(void)
+@@ -1616,8 +1616,13 @@ static void test_FakeDLL(void)
  
          dll_func = (BYTE *)GetProcAddress(module, func_name);
          ok(dll_func != NULL, "%s: GetProcAddress returned NULL\n", func_name);
@@ -39,11 +41,37 @@ index 95939ba6bde..ae5462f6e55 100644
          {
              todo_wine ok(0, "%s: Export is a stub-function, skipping\n", func_name);
              continue;
+diff --git a/dlls/ntdll/unix/thread.c b/dlls/ntdll/unix/thread.c
+index 449e5814c2e..05cbd4b443b 100644
+--- a/dlls/ntdll/unix/thread.c
++++ b/dlls/ntdll/unix/thread.c
+@@ -108,7 +108,7 @@ TEB * CDECL init_threading( int *nb_threads_ptr, struct ldt_copy **ldt_copy, SIZ
+     dbg_init();
+     server_init_process();
+     info_size = server_init_thread( teb->Peb, suspend );
+-    virtual_map_user_shared_data();
++    virtual_map_user_shared_data(syscall_handler);
+     NtCreateKeyedEvent( &keyed_event, GENERIC_READ | GENERIC_WRITE, NULL, 0 );
+ 
+     if (size) *size = info_size;
+diff --git a/dlls/ntdll/unix/unix_private.h b/dlls/ntdll/unix/unix_private.h
+index 5f891d52e17..6ccd2ff6cc4 100644
+--- a/dlls/ntdll/unix/unix_private.h
++++ b/dlls/ntdll/unix/unix_private.h
+@@ -137,7 +137,7 @@ extern void virtual_init(void) DECLSPEC_HIDDEN;
+ extern TEB *virtual_alloc_first_teb(void) DECLSPEC_HIDDEN;
+ extern NTSTATUS virtual_alloc_teb( TEB **ret_teb ) DECLSPEC_HIDDEN;
+ extern void virtual_free_teb( TEB *teb ) DECLSPEC_HIDDEN;
+-extern void virtual_map_user_shared_data(void) DECLSPEC_HIDDEN;
++extern void virtual_map_user_shared_data(void *) DECLSPEC_HIDDEN;
+ 
+ extern void signal_init_threading(void) DECLSPEC_HIDDEN;
+ extern NTSTATUS signal_alloc_thread( TEB *teb ) DECLSPEC_HIDDEN;
 diff --git a/dlls/ntdll/unix/virtual.c b/dlls/ntdll/unix/virtual.c
-index 7c5b5d5cf15..66ae4cb841c 100644
+index 83e51c369cb..40629214479 100644
 --- a/dlls/ntdll/unix/virtual.c
 +++ b/dlls/ntdll/unix/virtual.c
-@@ -2546,14 +2546,14 @@ TEB *virtual_alloc_first_teb(void)
+@@ -2742,14 +2742,14 @@ TEB *virtual_alloc_first_teb(void)
      TEB *teb;
      PEB *peb;
      NTSTATUS status;
@@ -60,6 +88,32 @@ index 7c5b5d5cf15..66ae4cb841c 100644
      if (status)
      {
          ERR( "wine: failed to map the shared user data: %08x\n", status );
+@@ -2943,11 +2943,12 @@ void virtual_clear_thread_stack( void *stack_end )
+     if (force_exec_prot) mprotect( stack, size, PROT_READ | PROT_WRITE | PROT_EXEC );
+ }
+ 
++extern void DECLSPEC_NORETURN __wine_syscall_dispatcher( void );
+ 
+ /***********************************************************************
+  *           virtual_map_user_shared_data
+  */
+-void virtual_map_user_shared_data(void)
++void virtual_map_user_shared_data(void *syscall_handler)
+ {
+     static const WCHAR wine_usdW[] = {'\\','K','e','r','n','e','l','O','b','j','e','c','t','s',
+                                       '\\','_','_','w','i','n','e','_','u','s','e','r','_','s','h','a','r','e','d','_','d','a','t','a',0};
+@@ -2970,6 +2971,11 @@ void virtual_map_user_shared_data(void)
+         ERR( "failed to remap the process USD: %d\n", res );
+         exit(1);
+     }
++
++#if defined(__APPLE__) && defined(__x86_64__)
++    *((void **)((char*)user_shared_data + 0x1000)) = syscall_handler;
++#endif
++
+     if (needs_close) close( fd );
+     NtClose( section );
+ }
 diff --git a/libs/wine/loader.c b/libs/wine/loader.c
 index 4597a6cb324..3d0d75e9c6d 100644
 --- a/libs/wine/loader.c

diff --git a/patches/ntdll-WRITECOPY/0003-ntdll-Setup-a-temporary-signal-handler-during-proces.patch b/patches/ntdll-WRITECOPY/0003-ntdll-Setup-a-temporary-signal-handler-during-proces.patch
index 8cb334d6f..d6e9a6824 100644
--- a/patches/ntdll-WRITECOPY/0003-ntdll-Setup-a-temporary-signal-handler-during-proces.patch
+++ b/patches/ntdll-WRITECOPY/0003-ntdll-Setup-a-temporary-signal-handler-during-proces.patch
@@ -1,4 +1,4 @@
-From fb4189551e75a8c52ee1abd98871138c06d94e0e Mon Sep 17 00:00:00 2001
+From 46968c583a30476a86463530d0047699e64529b5 Mon Sep 17 00:00:00 2001
 From: =?UTF-8?q?Michael=20M=C3=BCller?= <michael@fds-team.de>
 Date: Sat, 4 Oct 2014 02:53:22 +0200
 Subject: [PATCH] ntdll: Setup a temporary signal handler during process
@@ -15,7 +15,7 @@ Subject: [PATCH] ntdll: Setup a temporary signal handler during process
  7 files changed, 79 insertions(+)
 
 diff --git a/dlls/ntdll/ntdll_misc.h b/dlls/ntdll/ntdll_misc.h
-index ff791a60764..eba4ace6ae8 100644
+index 65c65cc02d8..63a4b597872 100644
 --- a/dlls/ntdll/ntdll_misc.h
 +++ b/dlls/ntdll/ntdll_misc.h
 @@ -78,6 +78,7 @@ extern LPCSTR debugstr_ObjectAttributes(const OBJECT_ATTRIBUTES *oa) DECLSPEC_HI
@@ -25,7 +25,7 @@ index ff791a60764..eba4ace6ae8 100644
 +extern void signal_init_early(void) DECLSPEC_HIDDEN;
  extern void version_init(void) DECLSPEC_HIDDEN;
  extern void debug_init(void) DECLSPEC_HIDDEN;
- extern TEB *thread_init(void) DECLSPEC_HIDDEN;
+ extern TEB *thread_init( SIZE_T *info_size, BOOL *suspend ) DECLSPEC_HIDDEN;
 diff --git a/dlls/ntdll/signal_arm.c b/dlls/ntdll/signal_arm.c
 index 8ff9f66d3f0..44e3d2df523 100644
 --- a/dlls/ntdll/signal_arm.c
@@ -166,17 +166,17 @@ index 0ccc7cbceb6..dc8a1a987c5 100644
  static ULONG64 get_int_reg( CONTEXT *context, int reg )
  {
 diff --git a/dlls/ntdll/thread.c b/dlls/ntdll/thread.c
-index d5e34cae3b1..16e61658cdf 100644
+index 8918b39a9c5..a2f5df1b1c2 100644
 --- a/dlls/ntdll/thread.c
 +++ b/dlls/ntdll/thread.c
-@@ -217,6 +217,7 @@ TEB *thread_init(void)
-     struct ntdll_thread_data *thread_data;
+@@ -186,6 +186,7 @@ TEB *thread_init( SIZE_T *info_size, BOOL *suspend )
+     TEB *teb;
  
      virtual_init();
 +    signal_init_early();
  
-     /* reserve space for shared user data */
- 
+     teb = unix_funcs->init_threading( &nb_threads, &__wine_ldt_copy, info_size, suspend, &server_cpus,
+                                       &is_wow64, &server_start_time );
 -- 
 2.26.2
 
diff --git a/patches/patchinstall.sh b/patches/patchinstall.sh
index 807d3c39c..f790eae02 100755
--- a/patches/patchinstall.sh
+++ b/patches/patchinstall.sh
@@ -1704,6 +1704,17 @@ if test "$enable_ntdll_NtContinue" -eq 1; then
 	enable_winebuild_Fake_Dlls=1
 fi
 
+if test "$enable_winebuild_Fake_Dlls" -eq 1; then
+	if test "$enable_ntdll_WRITECOPY" -gt 1; then
+		abort "Patchset ntdll-WRITECOPY disabled, but winebuild-Fake_Dlls depends on that."
+	fi
+	if test "$enable_ws2_32_WSACleanup" -gt 1; then
+		abort "Patchset ws2_32-WSACleanup disabled, but winebuild-Fake_Dlls depends on that."
+	fi
+	enable_ntdll_WRITECOPY=1
+	enable_ws2_32_WSACleanup=1
+fi
+
 if test "$enable_ntdll_Hide_Wine_Exports" -eq 1; then
 	if test "$enable_advapi32_Token_Integrity_Level" -gt 1; then
 		abort "Patchset advapi32-Token_Integrity_Level disabled, but ntdll-Hide_Wine_Exports depends on that."
@@ -3977,8 +3988,30 @@ if test "$enable_ntdll_NtAccessCheck" -eq 1; then
 	) >> "$patchlist"
 fi
 
+# Patchset ws2_32-WSACleanup
+# |
+# | This patchset fixes the following Wine bugs:
+# |   *	[#18670] Properly close sockets when WSACleanup is called
+# |
+# | Modified files:
+# |   *	dlls/ntdll/ntdll.spec, dlls/ntdll/server.c, dlls/ntdll/unix/loader.c, dlls/ntdll/unix/server.c,
+# | 	dlls/ntdll/unix/unix_private.h, dlls/ntdll/unixlib.h, dlls/ws2_32/socket.c, dlls/ws2_32/tests/sock.c,
+# | 	include/wine/server.h, server/protocol.def, server/sock.c
+# |
+if test "$enable_ws2_32_WSACleanup" -eq 1; then
+	patch_apply ws2_32-WSACleanup/0001-ws2_32-Proper-WSACleanup-implementation-using-winese.patch
+	patch_apply ws2_32-WSACleanup/0002-ws2_32-Invalidate-client-side-file-descriptor-cache-.patch
+	(
+		printf '%s\n' '+    { "Matt Durgavich", "ws2_32: Proper WSACleanup implementation using wineserver function.", 2 },';
+		printf '%s\n' '+    { "Sebastian Lackner", "ws2_32: Invalidate client-side file descriptor cache in WSACleanup.", 1 },';
+	) >> "$patchlist"
+fi
+
 # Patchset winebuild-Fake_Dlls
 # |
+# | This patchset has the following (direct or indirect) dependencies:
+# |   *	ntdll-WRITECOPY, ws2_32-WSACleanup
+# |
 # | This patchset fixes the following Wine bugs:
 # |   *	[#21232] Chromium-based browser engines (Chrome, Opera, Comodo Dragon, SRWare Iron) crash on startup unless '--no-
 # | 	sandbox' is used (native API sandboxing/hooking scheme incompatible with Wine)
@@ -3993,6 +4026,7 @@ fi
 # | 	dlls/krnl386.exe16/task.c, dlls/krnl386.exe16/thunk.c, dlls/krnl386.exe16/wowthunk.c, dlls/ntdll/actctx.c,
 # | 	dlls/ntdll/directory.c, dlls/ntdll/loader.c, dlls/ntdll/locale.c, dlls/ntdll/ntdll_misc.h, dlls/ntdll/path.c,
 # | 	dlls/ntdll/process.c, dlls/ntdll/signal_i386.c, dlls/ntdll/tests/exception.c, dlls/ntdll/thread.c,
+# | 	dlls/ntdll/unix/thread.c, dlls/ntdll/unix/unix_private.h, dlls/ntdll/unix/virtual.c, dlls/ntdll/unixlib.h,
 # | 	dlls/system.drv16/system.c, dlls/toolhelp.dll16/toolhelp.c, dlls/user.exe16/message.c, dlls/user.exe16/user.c,
 # | 	dlls/user.exe16/window.c, include/winternl.h, libs/wine/loader.c, server/mapping.c, tools/winebuild/build.h,
 # | 	tools/winebuild/import.c, tools/winebuild/parser.c, tools/winebuild/relay.c, tools/winebuild/res32.c,
@@ -4028,7 +4062,7 @@ fi
 # Patchset ntdll-NtContinue
 # |
 # | This patchset has the following (direct or indirect) dependencies:
-# |   *	winebuild-Fake_Dlls
+# |   *	ntdll-WRITECOPY, ws2_32-WSACleanup, winebuild-Fake_Dlls
 # |
 # | This patchset fixes the following Wine bugs:
 # |   *	[#31910] Add stub for NtContinue
@@ -4139,7 +4173,7 @@ fi
 # Patchset ntdll-RtlCreateUserThread
 # |
 # | This patchset has the following (direct or indirect) dependencies:
-# |   *	winebuild-Fake_Dlls
+# |   *	ntdll-WRITECOPY, ws2_32-WSACleanup, winebuild-Fake_Dlls
 # |
 # | This patchset fixes the following Wine bugs:
 # |   *	[#45571] League of Legends 8.12+ fails to start a game (anticheat engine, hooking of NtCreateThread/Ex)
@@ -4211,7 +4245,7 @@ fi
 # Patchset ntdll-Syscall_Emulation
 # |
 # | This patchset has the following (direct or indirect) dependencies:
-# |   *	winebuild-Fake_Dlls
+# |   *	ntdll-WRITECOPY, ws2_32-WSACleanup, winebuild-Fake_Dlls
 # |
 # | This patchset fixes the following Wine bugs:
 # |   *	[#48291] Detroit: Become Human crashes on launch
@@ -4662,25 +4696,6 @@ if test "$enable_riched20_IText_Interface" -eq 1; then
 	) >> "$patchlist"
 fi
 
-# Patchset ws2_32-WSACleanup
-# |
-# | This patchset fixes the following Wine bugs:
-# |   *	[#18670] Properly close sockets when WSACleanup is called
-# |
-# | Modified files:
-# |   *	dlls/ntdll/ntdll.spec, dlls/ntdll/server.c, dlls/ntdll/unix/loader.c, dlls/ntdll/unix/server.c,
-# | 	dlls/ntdll/unix/unix_private.h, dlls/ntdll/unixlib.h, dlls/ws2_32/socket.c, dlls/ws2_32/tests/sock.c,
-# | 	include/wine/server.h, server/protocol.def, server/sock.c
-# |
-if test "$enable_ws2_32_WSACleanup" -eq 1; then
-	patch_apply ws2_32-WSACleanup/0001-ws2_32-Proper-WSACleanup-implementation-using-winese.patch
-	patch_apply ws2_32-WSACleanup/0002-ws2_32-Invalidate-client-side-file-descriptor-cache-.patch
-	(
-		printf '%s\n' '+    { "Matt Durgavich", "ws2_32: Proper WSACleanup implementation using wineserver function.", 2 },';
-		printf '%s\n' '+    { "Sebastian Lackner", "ws2_32: Invalidate client-side file descriptor cache in WSACleanup.", 1 },';
-	) >> "$patchlist"
-fi
-
 # Patchset server-Desktop_Refcount
 # |
 # | This patchset has the following (direct or indirect) dependencies:
diff --git a/patches/winebuild-Fake_Dlls/0003-winebuild-Generate-syscall-thunks-for-ntdll-exports.patch b/patches/winebuild-Fake_Dlls/0003-winebuild-Generate-syscall-thunks-for-ntdll-exports.patch
index 8dd18d544..6d62c691d 100644
--- a/patches/winebuild-Fake_Dlls/0003-winebuild-Generate-syscall-thunks-for-ntdll-exports.patch
+++ b/patches/winebuild-Fake_Dlls/0003-winebuild-Generate-syscall-thunks-for-ntdll-exports.patch
@@ -1,25 +1,28 @@
-From 916104878b837947e14ed7d44f591de5ba4fa2dc Mon Sep 17 00:00:00 2001
+From e695bf789da272b2855ad864b0837c38c1a78e62 Mon Sep 17 00:00:00 2001
 From: =?UTF-8?q?Michael=20M=C3=BCller?= <michael@fds-team.de>
 Date: Thu, 11 May 2017 05:32:55 +0200
 Subject: [PATCH] winebuild: Generate syscall thunks for ntdll exports.
 
 Based on a patch by Erich E. Hoover.
 ---
- dlls/ntdll/loader.c          |   3 +
- dlls/ntdll/signal_i386.c     |   4 +-
- dlls/ntdll/tests/exception.c |   2 +
- dlls/ntdll/thread.c          |   3 +
- include/winternl.h           |   2 +-
- tools/winebuild/build.h      |   7 +++
- tools/winebuild/import.c     |  10 ++--
- tools/winebuild/parser.c     |  59 ++++++++++++++++++++
- tools/winebuild/spec16.c     |  22 +-------
- tools/winebuild/spec32.c     | 104 +++++++++++++++++++++++++++++++++++
- tools/winebuild/utils.c      |  21 +++++++
- 11 files changed, 210 insertions(+), 27 deletions(-)
+ dlls/ntdll/loader.c            |   3 +
+ dlls/ntdll/signal_i386.c       |   4 +-
+ dlls/ntdll/tests/exception.c   |   2 +
+ dlls/ntdll/thread.c            |   3 +-
+ dlls/ntdll/unix/thread.c       |   3 +-
+ dlls/ntdll/unix/unix_private.h |   2 +-
+ dlls/ntdll/unixlib.h           |   4 +-
+ include/winternl.h             |   2 +-
+ tools/winebuild/build.h        |   7 +++
+ tools/winebuild/import.c       |  10 ++--
+ tools/winebuild/parser.c       |  59 +++++++++++++++++++
+ tools/winebuild/spec16.c       |  22 +------
+ tools/winebuild/spec32.c       | 104 +++++++++++++++++++++++++++++++++
+ tools/winebuild/utils.c        |  21 +++++++
+ 14 files changed, 214 insertions(+), 32 deletions(-)
 
 diff --git a/dlls/ntdll/loader.c b/dlls/ntdll/loader.c
-index 51addaaf983..b888b680bc4 100644
+index 45d32399adf..b42cff8bcd4 100644
 --- a/dlls/ntdll/loader.c
 +++ b/dlls/ntdll/loader.c
 @@ -3810,6 +3810,7 @@ PIMAGE_NT_HEADERS WINAPI RtlImageNtHeader(HMODULE hModule)
@@ -40,7 +43,7 @@ index 51addaaf983..b888b680bc4 100644
  
      if (process_detaching) return;
 diff --git a/dlls/ntdll/signal_i386.c b/dlls/ntdll/signal_i386.c
-index 72413dcd6c7..88dffb03138 100644
+index be88d9bf3c7..84ab7991886 100644
 --- a/dlls/ntdll/signal_i386.c
 +++ b/dlls/ntdll/signal_i386.c
 @@ -448,6 +448,8 @@ static ULONG first_ldt_entry = 32;
@@ -75,26 +78,82 @@ index a5e6faa461a..51938bf84cc 100644
      ok( context.SegCs == LOWORD(expect.SegCs), "wrong SegCs %08x/%08x\n", context.SegCs, expect.SegCs );
      ok( context.SegDs == LOWORD(expect.SegDs), "wrong SegDs %08x/%08x\n", context.SegDs, expect.SegDs );
 diff --git a/dlls/ntdll/thread.c b/dlls/ntdll/thread.c
-index d5e34cae3b1..73057d9a9a4 100644
+index a2f5df1b1c2..dc9affc061a 100644
 --- a/dlls/ntdll/thread.c
 +++ b/dlls/ntdll/thread.c
-@@ -201,6 +201,8 @@ void map_user_shared_data(void)
-     NtClose( section );
+@@ -173,6 +173,7 @@ int __cdecl __wine_dbg_output( const char *str )
+     return unix_funcs->dbg_output( str );
  }
  
 +extern void DECLSPEC_NORETURN __wine_syscall_dispatcher( void );
-+
+ 
  /***********************************************************************
   *           thread_init
-  *
-@@ -235,6 +237,7 @@ TEB *thread_init(void)
+@@ -189,7 +190,7 @@ TEB *thread_init( SIZE_T *info_size, BOOL *suspend )
+     signal_init_early();
  
-     teb = unix_funcs->virtual_alloc_first_teb();
-     unix_funcs->init_threading( &nb_threads, &__wine_ldt_copy );
-+    teb->WOW32Reserved = __wine_syscall_dispatcher;
+     teb = unix_funcs->init_threading( &nb_threads, &__wine_ldt_copy, info_size, suspend, &server_cpus,
+-                                      &is_wow64, &server_start_time );
++                                      &is_wow64, &server_start_time, __wine_syscall_dispatcher );
  
      peb = teb->Peb;
      peb->FastPebLock        = &peb_lock;
+diff --git a/dlls/ntdll/unix/thread.c b/dlls/ntdll/unix/thread.c
+index d3e07cae80e..449e5814c2e 100644
+--- a/dlls/ntdll/unix/thread.c
++++ b/dlls/ntdll/unix/thread.c
+@@ -83,7 +83,7 @@ static void pthread_exit_wrapper( int status )
+  *           init_threading
+  */
+ TEB * CDECL init_threading( int *nb_threads_ptr, struct ldt_copy **ldt_copy, SIZE_T *size, BOOL *suspend,
+-                            unsigned int *cpus, BOOL *wow64, timeout_t *start_time )
++                            unsigned int *cpus, BOOL *wow64, timeout_t *start_time, void *syscall_handler )
+ {
+     TEB *teb;
+     SIZE_T info_size;
+@@ -95,6 +95,7 @@ TEB * CDECL init_threading( int *nb_threads_ptr, struct ldt_copy **ldt_copy, SIZ
+     nb_threads = nb_threads_ptr;
+ 
+     teb = virtual_alloc_first_teb();
++    teb->WOW32Reserved = syscall_handler;
+     thread_data = (struct ntdll_thread_data *)&teb->GdiTebBatch;
+     thread_data->request_fd = -1;
+     thread_data->reply_fd   = -1;
+diff --git a/dlls/ntdll/unix/unix_private.h b/dlls/ntdll/unix/unix_private.h
+index 6512160972d..e9a56b37ea1 100644
+--- a/dlls/ntdll/unix/unix_private.h
++++ b/dlls/ntdll/unix/unix_private.h
+@@ -98,7 +98,7 @@ extern int CDECL server_pipe( int fd[2] ) DECLSPEC_HIDDEN;
+ extern void CDECL server_init_process_done(void) DECLSPEC_HIDDEN;
+ extern TEB * CDECL init_threading( int *nb_threads_ptr, struct ldt_copy **ldt_copy, SIZE_T *size,
+                                    BOOL *suspend, unsigned int *cpus, BOOL *wow64,
+-                                   timeout_t *start_time ) DECLSPEC_HIDDEN;
++                                   timeout_t *start_time, void *syscall_handler ) DECLSPEC_HIDDEN;
+ extern NTSTATUS CDECL create_thread( SIZE_T stack_reserve, SIZE_T stack_commit, HANDLE actctx, DWORD tid,
+                                      int request_fd, PRTL_THREAD_START_ROUTINE start,
+                                      void *param, void *relay ) DECLSPEC_HIDDEN;
+diff --git a/dlls/ntdll/unixlib.h b/dlls/ntdll/unixlib.h
+index 72f35cf67e8..93a51871f1d 100644
+--- a/dlls/ntdll/unixlib.h
++++ b/dlls/ntdll/unixlib.h
+@@ -28,7 +28,7 @@ struct ldt_copy;
+ struct msghdr;
+ 
+ /* increment this when you change the function table */
+-#define NTDLL_UNIXLIB_VERSION 28
++#define NTDLL_UNIXLIB_VERSION 29
+ 
+ struct unix_funcs
+ {
+@@ -165,7 +165,7 @@ struct unix_funcs
+ 
+     /* thread/process functions */
+     TEB *         (CDECL *init_threading)( int *nb_threads_ptr, struct ldt_copy **ldt_copy, SIZE_T *size,
+-                                           BOOL *suspend, unsigned int *cpus, BOOL *wow64, timeout_t *start_time );
++                                           BOOL *suspend, unsigned int *cpus, BOOL *wow64, timeout_t *start_time, void *syscall_handler );
+     NTSTATUS      (CDECL *create_thread)( SIZE_T stack_reserve, SIZE_T stack_commit, HANDLE actctx,
+                                           DWORD tid, int request_fd, PRTL_THREAD_START_ROUTINE start,
+                                           void *param, void *relay );
 diff --git a/include/winternl.h b/include/winternl.h
 index 44a58cadc7a..065f3d24f52 100644
 --- a/include/winternl.h
diff --git a/patches/winebuild-Fake_Dlls/0005-winebuild-Add-stub-functions-in-fake-dlls.patch b/patches/winebuild-Fake_Dlls/0005-winebuild-Add-stub-functions-in-fake-dlls.patch
index c26e699f4..7dcd7ad93 100644
--- a/patches/winebuild-Fake_Dlls/0005-winebuild-Add-stub-functions-in-fake-dlls.patch
+++ b/patches/winebuild-Fake_Dlls/0005-winebuild-Add-stub-functions-in-fake-dlls.patch
@@ -1,4 +1,4 @@
-From c7bd63dbac91eb167ec90846cd8cb7a193b04aa1 Mon Sep 17 00:00:00 2001
+From 1c0ba3961674f316dba2d89042571b7863076f08 Mon Sep 17 00:00:00 2001
 From: =?UTF-8?q?Michael=20M=C3=BCller?= <michael@fds-team.de>
 Date: Mon, 15 May 2017 16:27:56 +0200
 Subject: [PATCH] winebuild: Add stub functions in fake dlls.
@@ -62,7 +62,7 @@ index 926fa913866..902907329c0 100644
      CloseHandle(map);
      CloseHandle(file);
 diff --git a/dlls/ntdll/loader.c b/dlls/ntdll/loader.c
-index b888b680bc4..bb60aa919af 100644
+index b42cff8bcd4..b21d88bb13b 100644
 --- a/dlls/ntdll/loader.c
 +++ b/dlls/ntdll/loader.c
 @@ -3811,6 +3811,7 @@ PIMAGE_NT_HEADERS WINAPI RtlImageNtHeader(HMODULE hModule)
@@ -82,10 +82,10 @@ index b888b680bc4..bb60aa919af 100644
      pthread_sigmask( SIG_UNBLOCK, &server_block_set, NULL );
  
 diff --git a/dlls/ntdll/thread.c b/dlls/ntdll/thread.c
-index 73057d9a9a4..8c9b0b11c86 100644
+index ed77e4a2e98..a988d4c3e6b 100644
 --- a/dlls/ntdll/thread.c
 +++ b/dlls/ntdll/thread.c
-@@ -203,6 +203,39 @@ void map_user_shared_data(void)
+@@ -175,6 +175,39 @@ int __cdecl __wine_dbg_output( const char *str )
  
  extern void DECLSPEC_NORETURN __wine_syscall_dispatcher( void );
  
@@ -125,10 +125,10 @@ index 73057d9a9a4..8c9b0b11c86 100644
  /***********************************************************************
   *           thread_init
   *
-@@ -238,6 +271,7 @@ TEB *thread_init(void)
-     teb = unix_funcs->virtual_alloc_first_teb();
-     unix_funcs->init_threading( &nb_threads, &__wine_ldt_copy );
-     teb->WOW32Reserved = __wine_syscall_dispatcher;
+@@ -190,6 +223,7 @@ TEB *thread_init( SIZE_T *info_size, BOOL *suspend )
+ 
+     teb = unix_funcs->init_threading( &nb_threads, &__wine_ldt_copy, info_size, suspend, &server_cpus,
+                                       &is_wow64, &server_start_time, __wine_syscall_dispatcher );
 +    teb->Spare2 = (ULONG_PTR)__wine_fakedll_dispatcher;
  
      peb = teb->Peb;
diff --git a/patches/winebuild-Fake_Dlls/0010-tools-winebuild-Add-syscall-thunks-for-64-bit.patch b/patches/winebuild-Fake_Dlls/0010-tools-winebuild-Add-syscall-thunks-for-64-bit.patch
index 35f9eb138..b1663793e 100644
--- a/patches/winebuild-Fake_Dlls/0010-tools-winebuild-Add-syscall-thunks-for-64-bit.patch
+++ b/patches/winebuild-Fake_Dlls/0010-tools-winebuild-Add-syscall-thunks-for-64-bit.patch
@@ -1,16 +1,16 @@
-From 9382d41830426f68bf5da895f308f6691df8111b Mon Sep 17 00:00:00 2001
+From 2f82153b52cd517c9e30ab5ac26a0c60ed70a48d Mon Sep 17 00:00:00 2001
 From: =?UTF-8?q?Michael=20M=C3=BCller?= <michael@fds-team.de>
 Date: Thu, 7 Sep 2017 00:38:09 +0200
 Subject: [PATCH] tools/winebuild: Add syscall thunks for 64 bit.
 
 ---
  dlls/kernel32/tests/loader.c |   7 +-
- dlls/ntdll/thread.c          |  13 +-
+ dlls/ntdll/unix/virtual.c    |   4 +-
  libs/wine/loader.c           |   4 +
  server/mapping.c             |   6 +-
  tools/winebuild/parser.c     |   2 +-
  tools/winebuild/spec32.c     | 285 ++++++++++++++++++++++++++++++++++-
- 6 files changed, 306 insertions(+), 11 deletions(-)
+ 6 files changed, 297 insertions(+), 11 deletions(-)
 
 diff --git a/dlls/kernel32/tests/loader.c b/dlls/kernel32/tests/loader.c
 index 95939ba6bde..ae5462f6e55 100644
@@ -39,45 +39,27 @@ index 95939ba6bde..ae5462f6e55 100644
          {
              todo_wine ok(0, "%s: Export is a stub-function, skipping\n", func_name);
              continue;
-diff --git a/dlls/ntdll/thread.c b/dlls/ntdll/thread.c
-index 8187dbe1f2d..5427cbcf04e 100644
---- a/dlls/ntdll/thread.c
-+++ b/dlls/ntdll/thread.c
-@@ -51,6 +51,8 @@ WINE_DECLARE_DEBUG_CHANNEL(relay);
+diff --git a/dlls/ntdll/unix/virtual.c b/dlls/ntdll/unix/virtual.c
+index 7c5b5d5cf15..66ae4cb841c 100644
+--- a/dlls/ntdll/unix/virtual.c
++++ b/dlls/ntdll/unix/virtual.c
+@@ -2546,14 +2546,14 @@ TEB *virtual_alloc_first_teb(void)
+     TEB *teb;
+     PEB *peb;
+     NTSTATUS status;
+-    SIZE_T data_size = page_size;
++    SIZE_T data_size = page_size * 2;
+     SIZE_T peb_size = page_size;
+     SIZE_T teb_size = signal_stack_mask + 1;
+     SIZE_T total = 32 * teb_size;
  
- struct _KUSER_SHARED_DATA *user_shared_data = NULL;
- 
-+extern void DECLSPEC_NORETURN __wine_syscall_dispatcher( void );
-+
- void (WINAPI *kernel32_start_process)(LPTHREAD_START_ROUTINE,void*) = NULL;
- 
- static PEB *peb;
-@@ -256,9 +258,9 @@ TEB *thread_init(void)
      /* reserve space for shared user data */
- 
-     addr = (void *)0x7ffe0000;
--    size = 0x1000;
-+    size = 0x2000;
-     status = NtAllocateVirtualMemory( NtCurrentProcess(), &addr, 0, &size,
--                                      MEM_RESERVE|MEM_COMMIT, PAGE_READONLY );
-+                                      MEM_RESERVE|MEM_COMMIT, PAGE_READWRITE );
+     status = NtAllocateVirtualMemory( NtCurrentProcess(), (void **)&user_shared_data, 0, &data_size,
+-                                      MEM_RESERVE | MEM_COMMIT, PAGE_READONLY );
++                                      MEM_RESERVE | MEM_COMMIT, PAGE_READWRITE );
      if (status)
      {
-         MESSAGE( "wine: failed to map the shared user data: %08x\n", status );
-@@ -266,6 +268,13 @@ TEB *thread_init(void)
-     }
-     user_shared_data = addr;
- 
-+#if defined(__APPLE__) && defined(__x86_64__)
-+    *((DWORD*)((char*)user_shared_data + 0x1000)) = __wine_syscall_dispatcher;
-+#endif
-+
-+    /* Init this field early for x86_64 syscall thunks. */
-+    user_shared_data->SystemCallPad[0] = 1;
-+
-     /* allocate and initialize the PEB and initial TEB */
- 
-     teb = unix_funcs->virtual_alloc_first_teb();
+         ERR( "wine: failed to map the shared user data: %08x\n", status );
 diff --git a/libs/wine/loader.c b/libs/wine/loader.c
 index 4597a6cb324..3d0d75e9c6d 100644
 --- a/libs/wine/loader.c
diff --git a/patches/winebuild-Fake_Dlls/definition b/patches/winebuild-Fake_Dlls/definition
index 5ffc046f0..99799c336 100644
--- a/patches/winebuild-Fake_Dlls/definition
+++ b/patches/winebuild-Fake_Dlls/definition
@@ -3,3 +3,5 @@ Fixes: [42741] StarCraft I: 1.18 PTR fails to initialize ClientSdk.dll
 Fixes: [45349] Multiple applications and games crash due to missing support for 64-bit syscall thunks (StreetFighter V)
 Fixes: [45573] League of Legends 8.12+ fails to start a game (anticheat engine, hooking of syscall return instructions)
 Fixes: [45650] chromium 32-bit sandbox expects different syscall thunks depending on Windows version
+Depends: ntdll-WRITECOPY
+Depends: ws2_32-WSACleanup
\ No newline at end of file
diff --git a/patches/ws2_32-WSACleanup/0002-ws2_32-Invalidate-client-side-file-descriptor-cache-.patch b/patches/ws2_32-WSACleanup/0002-ws2_32-Invalidate-client-side-file-descriptor-cache-.patch
index 2d0f016cc..d830cf2db 100644
--- a/patches/ws2_32-WSACleanup/0002-ws2_32-Invalidate-client-side-file-descriptor-cache-.patch
+++ b/patches/ws2_32-WSACleanup/0002-ws2_32-Invalidate-client-side-file-descriptor-cache-.patch
@@ -1,4 +1,4 @@
-From d6f023a80929f22d520584d47abb08e5b523e0c0 Mon Sep 17 00:00:00 2001
+From 613ea1e263d4fbda67465ebaae2331df7728106a Mon Sep 17 00:00:00 2001
 From: Sebastian Lackner <sebastian@fds-team.de>
 Date: Sun, 6 Sep 2015 12:41:17 +0200
 Subject: [PATCH] ws2_32: Invalidate client-side file descriptor cache in
@@ -29,7 +29,7 @@ index 42532bd9f1c..ba46f170670 100644
  @ cdecl wine_server_handle_to_fd(long long ptr ptr)
  @ cdecl wine_server_release_fd(long long)
 diff --git a/dlls/ntdll/server.c b/dlls/ntdll/server.c
-index bde4a2add18..de3b4b9d2e7 100644
+index 6fb86a68d6f..2f95e190963 100644
 --- a/dlls/ntdll/server.c
 +++ b/dlls/ntdll/server.c
 @@ -239,6 +239,14 @@ void CDECL wine_server_release_fd( HANDLE handle, int unix_fd )
@@ -48,10 +48,10 @@ index bde4a2add18..de3b4b9d2e7 100644
  /***********************************************************************
   *           server_init_process
 diff --git a/dlls/ntdll/unix/loader.c b/dlls/ntdll/unix/loader.c
-index 1297c451a10..06c0174dd5e 100644
+index 767cae92b48..05c6f1e43bf 100644
 --- a/dlls/ntdll/unix/loader.c
 +++ b/dlls/ntdll/unix/loader.c
-@@ -1044,6 +1044,7 @@ static struct unix_funcs unix_funcs =
+@@ -1074,6 +1074,7 @@ static struct unix_funcs unix_funcs =
      server_wait,
      server_queue_process_apc,
      server_send_fd,
@@ -60,10 +60,10 @@ index 1297c451a10..06c0174dd5e 100644
      server_fd_to_handle,
      server_handle_to_fd,
 diff --git a/dlls/ntdll/unix/server.c b/dlls/ntdll/unix/server.c
-index 17b23e58d28..f7d172cf324 100644
+index 66c438fd62d..c6eb52c5986 100644
 --- a/dlls/ntdll/unix/server.c
 +++ b/dlls/ntdll/unix/server.c
-@@ -983,6 +983,26 @@ static int remove_fd_from_cache( HANDLE handle )
+@@ -991,6 +991,26 @@ static int remove_fd_from_cache( HANDLE handle )
      return fd;
  }
  
@@ -91,10 +91,10 @@ index 17b23e58d28..f7d172cf324 100644
  /***********************************************************************
   *           server_get_unix_fd
 diff --git a/dlls/ntdll/unix/unix_private.h b/dlls/ntdll/unix/unix_private.h
-index 14c4ee4cd97..5657bc9c27d 100644
+index 6fdaa17f087..6512160972d 100644
 --- a/dlls/ntdll/unix/unix_private.h
 +++ b/dlls/ntdll/unix/unix_private.h
-@@ -90,6 +90,7 @@ extern unsigned int CDECL server_wait( const select_op_t *select_op, data_size_t
+@@ -85,6 +85,7 @@ extern unsigned int CDECL server_wait( const select_op_t *select_op, data_size_t
                                         const LARGE_INTEGER *timeout ) DECLSPEC_HIDDEN;
  extern unsigned int CDECL server_queue_process_apc( HANDLE process, const apc_call_t *call, apc_result_t *result ) DECLSPEC_HIDDEN;
  extern void CDECL server_send_fd( int fd ) DECLSPEC_HIDDEN;
@@ -103,19 +103,19 @@ index 14c4ee4cd97..5657bc9c27d 100644
                                       int *needs_close, enum server_fd_type *type,
                                       unsigned int *options ) DECLSPEC_HIDDEN;
 diff --git a/dlls/ntdll/unixlib.h b/dlls/ntdll/unixlib.h
-index 67c63fd9268..51e27be22b7 100644
+index 4e5cec6637e..72f35cf67e8 100644
 --- a/dlls/ntdll/unixlib.h
 +++ b/dlls/ntdll/unixlib.h
 @@ -28,7 +28,7 @@ struct ldt_copy;
  struct msghdr;
  
  /* increment this when you change the function table */
--#define NTDLL_UNIXLIB_VERSION 19
-+#define NTDLL_UNIXLIB_VERSION 20
+-#define NTDLL_UNIXLIB_VERSION 27
++#define NTDLL_UNIXLIB_VERSION 28
  
  struct unix_funcs
  {
-@@ -128,6 +128,7 @@ struct unix_funcs
+@@ -184,6 +184,7 @@ struct unix_funcs
                                          const LARGE_INTEGER *timeout );
      unsigned int  (CDECL *server_queue_process_apc)( HANDLE process, const apc_call_t *call, apc_result_t *result );
      void          (CDECL *server_send_fd)( int fd );

diff --git a/patches/ntdll-RtlCreateUserThread/0001-ntdll-Refactor-RtlCreateUserThread-into-NtCreateThre.patch b/patches/ntdll-RtlCreateUserThread/0001-ntdll-Refactor-RtlCreateUserThread-into-NtCreateThre.patch
index 4869a02b3..83ff11527 100644
--- a/patches/ntdll-RtlCreateUserThread/0001-ntdll-Refactor-RtlCreateUserThread-into-NtCreateThre.patch
+++ b/patches/ntdll-RtlCreateUserThread/0001-ntdll-Refactor-RtlCreateUserThread-into-NtCreateThre.patch
@@ -1,4 +1,4 @@
-From 9fdc6855fed56b4b6baa0c5bd0f4633fec536c06 Mon Sep 17 00:00:00 2001
+From df45ba13b75af0ae4c8c4166e39f9e640942466b Mon Sep 17 00:00:00 2001
 From: Andrew Wesie <awesie@gmail.com>
 Date: Fri, 27 Jul 2018 01:22:59 -0500
 Subject: [PATCH] ntdll: Refactor RtlCreateUserThread into NtCreateThreadEx.
@@ -7,9 +7,9 @@ League of Legends hooks NtCreateThread or NtCreateThreadEx (depending on the
 reported version), and expects it to be called whenever a thread is created.
 ---
  dlls/ntdll/ntdll.spec |   2 +-
- dlls/ntdll/thread.c   | 196 ++++++++++++++++++++++++++++++++++--------
- include/winternl.h    |  27 ++++++
- 3 files changed, 188 insertions(+), 37 deletions(-)
+ dlls/ntdll/thread.c   | 180 +++++++++++++++++++++++++++++++++++-------
+ include/winternl.h    |  27 +++++++
+ 3 files changed, 180 insertions(+), 29 deletions(-)
 
 diff --git a/dlls/ntdll/ntdll.spec b/dlls/ntdll/ntdll.spec
 index 42532bd9f1c..65fdc30d7a4 100644
@@ -25,10 +25,10 @@ index 42532bd9f1c..65fdc30d7a4 100644
  @ stdcall NtCreateTimer(ptr long ptr long)
  @ stub NtCreateToken
 diff --git a/dlls/ntdll/thread.c b/dlls/ntdll/thread.c
-index c9a2240a4da..f04b8bb337e 100644
+index d5e34cae3b1..4e1b3f23b7c 100644
 --- a/dlls/ntdll/thread.c
 +++ b/dlls/ntdll/thread.c
-@@ -406,34 +406,18 @@ static void start_thread( struct startup_info *info )
+@@ -377,28 +377,10 @@ static void WINAPI call_thread_entry_point( LPTHREAD_START_ROUTINE entry, void *
  /***********************************************************************
   *              NtCreateThreadEx   (NTDLL.@)
   */
@@ -58,21 +58,15 @@ index c9a2240a4da..f04b8bb337e 100644
 -                                     HANDLE *handle_ptr, CLIENT_ID *id )
 +                                  ULONG stack_reserve, PPS_ATTRIBUTE_LIST ps_attr_list )
  {
-     sigset_t sigset;
-     pthread_t pthread_id;
--    pthread_attr_t attr;
-+    pthread_attr_t pthread_attr;
-     struct ntdll_thread_data *thread_data;
-     struct startup_info *info;
-+    BOOLEAN suspended = !!(flags & THREAD_CREATE_FLAGS_CREATE_SUSPENDED);
-+    CLIENT_ID *id = NULL;
      HANDLE handle = 0, actctx = 0;
-     TEB *teb = NULL;
      DWORD tid = 0;
-@@ -444,6 +428,33 @@ NTSTATUS WINAPI RtlCreateUserThread( HANDLE process, SECURITY_DESCRIPTOR *descr,
+@@ -406,6 +388,35 @@ NTSTATUS WINAPI RtlCreateUserThread( HANDLE process, SECURITY_DESCRIPTOR *descr,
+     NTSTATUS status;
+     data_size_t len = 0;
      struct object_attributes *objattr = NULL;
-     INITIAL_TEB stack;
- 
++    BOOLEAN suspended = !!(flags & THREAD_CREATE_FLAGS_CREATE_SUSPENDED);
++    CLIENT_ID *id = NULL;
++
 +    TRACE("(%p, %d, %p, %p, %p, %p, %u, %u, %u, %u, %p)\n",
 +          handle_ptr, access, thread_attr, process, start, param, flags,
 +          zero_bits, stack_commit, stack_reserve, ps_attr_list);
@@ -99,11 +93,10 @@ index c9a2240a4da..f04b8bb337e 100644
 +
 +    if (access == (ACCESS_MASK)0)
 +        access = THREAD_ALL_ACCESS;
-+
+ 
      if (process != NtCurrentProcess())
      {
-         apc_call_t call;
-@@ -469,12 +480,7 @@ NTSTATUS WINAPI RtlCreateUserThread( HANDLE process, SECURITY_DESCRIPTOR *descr,
+@@ -432,12 +443,7 @@ NTSTATUS WINAPI RtlCreateUserThread( HANDLE process, SECURITY_DESCRIPTOR *descr,
          return result.create_thread.status;
      }
  
@@ -117,7 +110,7 @@ index c9a2240a4da..f04b8bb337e 100644
  
      if (unix_funcs->server_pipe( request_pipe ) == -1)
      {
-@@ -486,7 +492,7 @@ NTSTATUS WINAPI RtlCreateUserThread( HANDLE process, SECURITY_DESCRIPTOR *descr,
+@@ -449,7 +455,7 @@ NTSTATUS WINAPI RtlCreateUserThread( HANDLE process, SECURITY_DESCRIPTOR *descr,
      SERVER_START_REQ( new_thread )
      {
          req->process    = wine_server_obj_handle( process );
@@ -126,36 +119,8 @@ index c9a2240a4da..f04b8bb337e 100644
          req->suspend    = suspended;
          req->request_fd = request_pipe[0];
          wine_server_add_data( req, objattr, len );
-@@ -547,20 +553,20 @@ NTSTATUS WINAPI RtlCreateUserThread( HANDLE process, SECURITY_DESCRIPTOR *descr,
-     thread_data->wait_fd[1]  = -1;
-     thread_data->start_stack = (char *)teb->Tib.StackBase;
- 
--    pthread_attr_init( &attr );
--    pthread_attr_setstack( &attr, teb->DeallocationStack,
-+    pthread_attr_init( &pthread_attr );
-+    pthread_attr_setstack( &pthread_attr, teb->DeallocationStack,
-                          (char *)teb->Tib.StackBase + extra_stack - (char *)teb->DeallocationStack );
--    pthread_attr_setguardsize( &attr, 0 );
--    pthread_attr_setscope( &attr, PTHREAD_SCOPE_SYSTEM ); /* force creating a kernel thread */
-+    pthread_attr_setguardsize( &pthread_attr, 0 );
-+    pthread_attr_setscope( &pthread_attr, PTHREAD_SCOPE_SYSTEM ); /* force creating a kernel thread */
-     InterlockedIncrement( &nb_threads );
--    if (pthread_create( &pthread_id, &attr, (void * (*)(void *))start_thread, info ))
-+    if (pthread_create( &pthread_id, &pthread_attr, (void * (*)(void *))start_thread, info ))
-     {
-         InterlockedDecrement( &nb_threads );
--        pthread_attr_destroy( &attr );
-+        pthread_attr_destroy( &pthread_attr );
-         status = STATUS_NO_MEMORY;
-         goto error;
-     }
--    pthread_attr_destroy( &attr );
-+    pthread_attr_destroy( &pthread_attr );
-     pthread_sigmask( SIG_SETMASK, &sigset, NULL );
- 
-     if (id) id->UniqueThread = ULongToHandle(tid);
-@@ -577,6 +583,124 @@ error:
-     return status;
+@@ -539,6 +545,124 @@ NTSTATUS WINAPI NtSuspendThread( HANDLE handle, PULONG count )
+     return ret;
  }
  
 +NTSTATUS WINAPI NtCreateThread( HANDLE *handle_ptr, ACCESS_MASK access, OBJECT_ATTRIBUTES *attr, HANDLE process,
@@ -278,9 +243,9 @@ index c9a2240a4da..f04b8bb337e 100644
 +
  
  /******************************************************************************
-  *              RtlGetNtGlobalFlags   (NTDLL.@)
+  *              NtResumeThread   (NTDLL.@)
 diff --git a/include/winternl.h b/include/winternl.h
-index 199b8fc52f2..489b145937c 100644
+index f362790dbca..b79fcd67012 100644
 --- a/include/winternl.h
 +++ b/include/winternl.h
 @@ -2274,6 +2274,33 @@ typedef struct _NLSTABLEINFO
diff --git a/patches/ntdll-Syscall_Emulation/0001-ntdll-Support-x86_64-syscall-emulation.patch b/patches/ntdll-Syscall_Emulation/0001-ntdll-Support-x86_64-syscall-emulation.patch
index c94ae38cc..4ae5fcdfa 100644
--- a/patches/ntdll-Syscall_Emulation/0001-ntdll-Support-x86_64-syscall-emulation.patch
+++ b/patches/ntdll-Syscall_Emulation/0001-ntdll-Support-x86_64-syscall-emulation.patch
@@ -1,4 +1,4 @@
-From b18e90a92f2e44b5167016c90ea1d49f4d7e3211 Mon Sep 17 00:00:00 2001
+From 20298be5a42af52be27c56f88ad6a8a0304b55b6 Mon Sep 17 00:00:00 2001
 From: Paul Gofman <pgofman@codeweavers.com>
 Date: Mon, 30 Dec 2019 13:27:53 +0300
 Subject: [PATCH] ntdll: Support x86_64 syscall emulation.
@@ -15,10 +15,10 @@ is used for trapping syscalls.
  3 files changed, 119 insertions(+), 2 deletions(-)
 
 diff --git a/configure.ac b/configure.ac
-index 7b7433efde4..e62daf9e384 100644
+index e3d63ed7501..2fbec4129df 100644
 --- a/configure.ac
 +++ b/configure.ac
-@@ -474,6 +474,7 @@ AC_CHECK_HEADERS(\
+@@ -464,6 +464,7 @@ AC_CHECK_HEADERS(\
  	linux/joystick.h \
  	linux/major.h \
  	linux/param.h \
@@ -27,7 +27,7 @@ index 7b7433efde4..e62daf9e384 100644
  	linux/types.h \
  	linux/ucdrom.h \
 diff --git a/dlls/ntdll/signal_x86_64.c b/dlls/ntdll/signal_x86_64.c
-index 66a17b9bbc9..2424109553c 100644
+index 0ccc7cbceb6..149ad1bf5e7 100644
 --- a/dlls/ntdll/signal_x86_64.c
 +++ b/dlls/ntdll/signal_x86_64.c
 @@ -24,6 +24,7 @@
@@ -52,16 +52,16 @@ index 66a17b9bbc9..2424109553c 100644
  #define NONAMELESSUNION
  #define NONAMELESSSTRUCT
  #include "ntstatus.h"
-@@ -77,6 +85,8 @@
+@@ -76,6 +84,8 @@
+ 
  WINE_DEFAULT_DEBUG_CHANNEL(seh);
- WINE_DECLARE_DEBUG_CHANNEL(relay);
  
 +extern void DECLSPEC_NORETURN __wine_syscall_dispatcher( void );
 +
  typedef struct _SCOPE_TABLE
  {
      ULONG Count;
-@@ -3113,6 +3123,104 @@ static void usr1_handler( int signal, siginfo_t *siginfo, void *ucontext )
+@@ -2797,6 +2807,104 @@ static void usr1_handler( int signal, siginfo_t *siginfo, void *ucontext )
      restore_context( &context, ucontext );
  }
  
@@ -166,7 +166,7 @@ index 66a17b9bbc9..2424109553c 100644
  
  /***********************************************************************
   *           __wine_set_signal_handler   (NTDLL.@)
-@@ -3158,6 +3266,9 @@ void signal_init_process(void)
+@@ -2842,6 +2950,9 @@ void signal_init_process(void)
      sig_act.sa_sigaction = trap_handler;
      if (sigaction( SIGTRAP, &sig_act, NULL ) == -1) goto error;
  #endif
diff --git a/patches/ntdll-ThreadTime/0006-ntdll-Fill-process-virtual-memory-counters-in-NtQuer.patch b/patches/ntdll-ThreadTime/0006-ntdll-Fill-process-virtual-memory-counters-in-NtQuer.patch
index 4656891e3..7b2e48dd6 100644
--- a/patches/ntdll-ThreadTime/0006-ntdll-Fill-process-virtual-memory-counters-in-NtQuer.patch
+++ b/patches/ntdll-ThreadTime/0006-ntdll-Fill-process-virtual-memory-counters-in-NtQuer.patch
@@ -1,4 +1,4 @@
-From e1ff2fee38b602ff500c35f1eb589162c0d166d1 Mon Sep 17 00:00:00 2001
+From 4fd43a8364333519e777718b66e628ace1ad9fff Mon Sep 17 00:00:00 2001
 From: =?UTF-8?q?Michael=20M=C3=BCller?= <michael@fds-team.de>
 Date: Thu, 9 Mar 2017 22:56:45 +0100
 Subject: [PATCH] ntdll: Fill process virtual memory counters in
@@ -13,7 +13,7 @@ FIXME: fill_VM_COUNTERS now uses a different method ... which one is better?
  4 files changed, 41 insertions(+), 1 deletion(-)
 
 diff --git a/dlls/ntdll/nt.c b/dlls/ntdll/nt.c
-index 7c2945f0a73..abb2d2176d6 100644
+index cbb7937631d..bb078c1aa21 100644
 --- a/dlls/ntdll/nt.c
 +++ b/dlls/ntdll/nt.c
 @@ -2686,8 +2686,11 @@ NTSTATUS WINAPI NtQuerySystemInformation(
@@ -29,10 +29,10 @@ index 7c2945f0a73..abb2d2176d6 100644
                          }
                          len += procstructlen;
 diff --git a/dlls/ntdll/ntdll_misc.h b/dlls/ntdll/ntdll_misc.h
-index e85f3a3b900..b45b9a02bb1 100644
+index 3ea0dd81349..3e2fa3642c1 100644
 --- a/dlls/ntdll/ntdll_misc.h
 +++ b/dlls/ntdll/ntdll_misc.h
-@@ -285,6 +285,7 @@ void     WINAPI LdrInitializeThunk(CONTEXT*,void**,ULONG_PTR,ULONG_PTR);
+@@ -249,6 +249,7 @@ void     WINAPI LdrInitializeThunk(CONTEXT*,void**,ULONG_PTR,ULONG_PTR);
  /* process / thread time */
  extern BOOL read_process_time(int unix_pid, int unix_tid, unsigned long clk_tck,
                                LARGE_INTEGER *kernel, LARGE_INTEGER *user) DECLSPEC_HIDDEN;
@@ -41,7 +41,7 @@ index e85f3a3b900..b45b9a02bb1 100644
  /* string functions */
  int    __cdecl NTDLL_tolower( int c );
 diff --git a/dlls/ntdll/process.c b/dlls/ntdll/process.c
-index c066610ebca..f2dddb18052 100644
+index f47d3c4bc6c..b36fc037dc5 100644
 --- a/dlls/ntdll/process.c
 +++ b/dlls/ntdll/process.c
 @@ -192,7 +192,7 @@ static void fill_VM_COUNTERS(VM_COUNTERS* pvmi)
@@ -54,10 +54,10 @@ index c066610ebca..f2dddb18052 100644
  
  #endif
 diff --git a/dlls/ntdll/thread.c b/dlls/ntdll/thread.c
-index b7d4e399f62..21e8b0c08f8 100644
+index cd1b65a210c..71051adc8b0 100644
 --- a/dlls/ntdll/thread.c
 +++ b/dlls/ntdll/thread.c
-@@ -385,6 +385,42 @@ void WINAPI RtlExitUserThread( ULONG status )
+@@ -355,6 +355,42 @@ void WINAPI RtlExitUserThread( ULONG status )
      for (;;) unix_funcs->exit_thread( status );
  }
  
@@ -99,7 +99,7 @@ index b7d4e399f62..21e8b0c08f8 100644
 +}
  
  /***********************************************************************
-  *           start_thread
+  *           call_thread_entry_point
 -- 
 2.26.2
 
diff --git a/patches/ntdll-Threading/0001-ntdll-Fix-race-condition-when-threads-are-killed-dur.patch b/patches/ntdll-Threading/0001-ntdll-Fix-race-condition-when-threads-are-killed-dur.patch
index 9f370c21d..e331c3dca 100644
--- a/patches/ntdll-Threading/0001-ntdll-Fix-race-condition-when-threads-are-killed-dur.patch
+++ b/patches/ntdll-Threading/0001-ntdll-Fix-race-condition-when-threads-are-killed-dur.patch
@@ -1,4 +1,4 @@
-From 5f34c6a4429025ee71616e677e0e59342bee17b0 Mon Sep 17 00:00:00 2001
+From 9da818bd948256572640e17766a14a72e58ce100 Mon Sep 17 00:00:00 2001
 From: Sebastian Lackner <sebastian@fds-team.de>
 Date: Wed, 25 Feb 2015 22:45:42 +0100
 Subject: [PATCH] ntdll: Fix race-condition when threads are killed during
@@ -15,22 +15,15 @@ only be executed safely when all other threads have terminated before. Most
 likely there are more Wine bugs in this area, but the attached patch should
 fix the most critical one (messed up refcounting of threads) for now.
 ---
- dlls/ntdll/thread.c | 8 +++++++-
- 1 file changed, 7 insertions(+), 1 deletion(-)
+ dlls/ntdll/thread.c      | 2 +-
+ dlls/ntdll/unix/thread.c | 7 +++++++
+ 2 files changed, 8 insertions(+), 1 deletion(-)
 
 diff --git a/dlls/ntdll/thread.c b/dlls/ntdll/thread.c
-index bb11521cf69..fee26ccd21d 100644
+index d5e34cae3b1..83237b3569a 100644
 --- a/dlls/ntdll/thread.c
 +++ b/dlls/ntdll/thread.c
-@@ -298,6 +298,7 @@ TEB *thread_init(void)
- void WINAPI RtlExitUserThread( ULONG status )
- {
-     static void *prev_teb;
-+    sigset_t sigset;
-     TEB *teb;
- 
-     if (status)  /* send the exit code to the server (0 is already the default) */
-@@ -311,7 +312,7 @@ void WINAPI RtlExitUserThread( ULONG status )
+@@ -295,7 +295,7 @@ void WINAPI RtlExitUserThread( ULONG status )
          SERVER_END_REQ;
      }
  
@@ -39,16 +32,29 @@ index bb11521cf69..fee26ccd21d 100644
      {
          LdrShutdownProcess();
          unix_funcs->exit_process( status );
-@@ -333,6 +334,11 @@ void WINAPI RtlExitUserThread( ULONG status )
+diff --git a/dlls/ntdll/unix/thread.c b/dlls/ntdll/unix/thread.c
+index 205a1312e92..563712bd59e 100644
+--- a/dlls/ntdll/unix/thread.c
++++ b/dlls/ntdll/unix/thread.c
+@@ -219,6 +219,7 @@ void CDECL abort_thread( int status )
+ void CDECL exit_thread( int status )
+ {
+     static void *prev_teb;
++    sigset_t sigset;
+     TEB *teb;
+ 
+     pthread_sigmask( SIG_BLOCK, &server_block_set, NULL );
+@@ -233,6 +234,12 @@ void CDECL exit_thread( int status )
+             virtual_free_teb( teb );
          }
      }
- 
++
 +    sigemptyset( &sigset );
 +    sigaddset( &sigset, SIGQUIT );
 +    pthread_sigmask( SIG_BLOCK, &sigset, NULL );
-+    if (!InterlockedDecrement( &nb_threads )) _exit( status );
++    if (!InterlockedDecrement( nb_threads )) _exit( status );
 +
-     for (;;) unix_funcs->exit_thread( status );
+     signal_exit_thread( status, pthread_exit_wrapper );
  }
  
 -- 
diff --git a/patches/ntdll-WRITECOPY/0003-ntdll-Setup-a-temporary-signal-handler-during-proces.patch b/patches/ntdll-WRITECOPY/0003-ntdll-Setup-a-temporary-signal-handler-during-proces.patch
index c48114473..8cb334d6f 100644
--- a/patches/ntdll-WRITECOPY/0003-ntdll-Setup-a-temporary-signal-handler-during-proces.patch
+++ b/patches/ntdll-WRITECOPY/0003-ntdll-Setup-a-temporary-signal-handler-during-proces.patch
@@ -1,4 +1,4 @@
-From 6fa954cc5fd6840c9207abf4f41e53be0dbf8728 Mon Sep 17 00:00:00 2001
+From fb4189551e75a8c52ee1abd98871138c06d94e0e Mon Sep 17 00:00:00 2001
 From: =?UTF-8?q?Michael=20M=C3=BCller?= <michael@fds-team.de>
 Date: Sat, 4 Oct 2014 02:53:22 +0200
 Subject: [PATCH] ntdll: Setup a temporary signal handler during process
@@ -15,7 +15,7 @@ Subject: [PATCH] ntdll: Setup a temporary signal handler during process
  7 files changed, 79 insertions(+)
 
 diff --git a/dlls/ntdll/ntdll_misc.h b/dlls/ntdll/ntdll_misc.h
-index e9a3230e814..04aee675e55 100644
+index ff791a60764..eba4ace6ae8 100644
 --- a/dlls/ntdll/ntdll_misc.h
 +++ b/dlls/ntdll/ntdll_misc.h
 @@ -78,6 +78,7 @@ extern LPCSTR debugstr_ObjectAttributes(const OBJECT_ATTRIBUTES *oa) DECLSPEC_HI
@@ -23,14 +23,14 @@ index e9a3230e814..04aee675e55 100644
  extern SIZE_T signal_stack_mask DECLSPEC_HIDDEN;
  extern void signal_init_process(void) DECLSPEC_HIDDEN;
 +extern void signal_init_early(void) DECLSPEC_HIDDEN;
- extern void signal_start_thread( LPTHREAD_START_ROUTINE entry, void *arg, BOOL suspend ) DECLSPEC_HIDDEN;
- extern void signal_start_process( LPTHREAD_START_ROUTINE entry, BOOL suspend ) DECLSPEC_HIDDEN;
  extern void version_init(void) DECLSPEC_HIDDEN;
+ extern void debug_init(void) DECLSPEC_HIDDEN;
+ extern TEB *thread_init(void) DECLSPEC_HIDDEN;
 diff --git a/dlls/ntdll/signal_arm.c b/dlls/ntdll/signal_arm.c
-index b7e387babf1..bb329f888ce 100644
+index 8ff9f66d3f0..44e3d2df523 100644
 --- a/dlls/ntdll/signal_arm.c
 +++ b/dlls/ntdll/signal_arm.c
-@@ -774,6 +774,12 @@ void signal_init_process(void)
+@@ -773,6 +773,12 @@ void signal_init_process(void)
      exit(1);
  }
  
@@ -44,10 +44,10 @@ index b7e387babf1..bb329f888ce 100644
  /***********************************************************************
   *            RtlUnwind  (NTDLL.@)
 diff --git a/dlls/ntdll/signal_arm64.c b/dlls/ntdll/signal_arm64.c
-index c2dd129a569..22d4983d5c6 100644
+index 104ffbf6df9..e7c6abd0046 100644
 --- a/dlls/ntdll/signal_arm64.c
 +++ b/dlls/ntdll/signal_arm64.c
-@@ -1101,6 +1101,12 @@ int CDECL __wine_set_signal_handler(unsigned int sig, wine_signal_handler wsh)
+@@ -1100,6 +1100,12 @@ int CDECL __wine_set_signal_handler(unsigned int sig, wine_signal_handler wsh)
      return 0;
  }
  
@@ -61,10 +61,10 @@ index c2dd129a569..22d4983d5c6 100644
  /**********************************************************************
   *		signal_init_process
 diff --git a/dlls/ntdll/signal_i386.c b/dlls/ntdll/signal_i386.c
-index 78d03f669d7..e3dc2c0d1c8 100644
+index 1b0b9352a87..0fe9f7a3c84 100644
 --- a/dlls/ntdll/signal_i386.c
 +++ b/dlls/ntdll/signal_i386.c
-@@ -1737,6 +1737,31 @@ static BOOL handle_interrupt( unsigned int interrupt, ucontext_t *sigcontext, st
+@@ -1621,6 +1621,31 @@ static BOOL handle_interrupt( unsigned int interrupt, ucontext_t *sigcontext, st
  }
  
  
@@ -96,7 +96,7 @@ index 78d03f669d7..e3dc2c0d1c8 100644
  /**********************************************************************
   *		segv_handler
   *
-@@ -2064,6 +2089,34 @@ void signal_init_process(void)
+@@ -1948,6 +1973,34 @@ void signal_init_process(void)
      exit(1);
  }
  
@@ -132,10 +132,10 @@ index 78d03f669d7..e3dc2c0d1c8 100644
  /*******************************************************************
   *		RtlUnwind (NTDLL.@)
 diff --git a/dlls/ntdll/signal_powerpc.c b/dlls/ntdll/signal_powerpc.c
-index 75b18e1e933..314a0677d92 100644
+index 7e73322cbeb..07f0b89f30a 100644
 --- a/dlls/ntdll/signal_powerpc.c
 +++ b/dlls/ntdll/signal_powerpc.c
-@@ -638,6 +638,12 @@ int CDECL __wine_set_signal_handler(unsigned int sig, wine_signal_handler wsh)
+@@ -637,6 +637,12 @@ int CDECL __wine_set_signal_handler(unsigned int sig, wine_signal_handler wsh)
      return 0;
  }
  
@@ -149,10 +149,10 @@ index 75b18e1e933..314a0677d92 100644
  /**********************************************************************
   *		signal_init_process
 diff --git a/dlls/ntdll/signal_x86_64.c b/dlls/ntdll/signal_x86_64.c
-index 7cefd1403f3..0eb58d3d149 100644
+index 0ccc7cbceb6..dc8a1a987c5 100644
 --- a/dlls/ntdll/signal_x86_64.c
 +++ b/dlls/ntdll/signal_x86_64.c
-@@ -2850,6 +2850,12 @@ void signal_init_process(void)
+@@ -2849,6 +2849,12 @@ void signal_init_process(void)
      exit(1);
  }
  
@@ -166,10 +166,10 @@ index 7cefd1403f3..0eb58d3d149 100644
  static ULONG64 get_int_reg( CONTEXT *context, int reg )
  {
 diff --git a/dlls/ntdll/thread.c b/dlls/ntdll/thread.c
-index f9ea9203ed8..31213614911 100644
+index d5e34cae3b1..16e61658cdf 100644
 --- a/dlls/ntdll/thread.c
 +++ b/dlls/ntdll/thread.c
-@@ -228,6 +228,7 @@ TEB *thread_init(void)
+@@ -217,6 +217,7 @@ TEB *thread_init(void)
      struct ntdll_thread_data *thread_data;
  
      virtual_init();
diff --git a/patches/ntdll-set_full_cpu_context/0001-ntdll-Add-back-SS-segment-prefixes-in-set_full_cpu_c.patch b/patches/ntdll-set_full_cpu_context/0001-ntdll-Add-back-SS-segment-prefixes-in-set_full_cpu_c.patch
index 91d6081d4..c311d2672 100644
--- a/patches/ntdll-set_full_cpu_context/0001-ntdll-Add-back-SS-segment-prefixes-in-set_full_cpu_c.patch
+++ b/patches/ntdll-set_full_cpu_context/0001-ntdll-Add-back-SS-segment-prefixes-in-set_full_cpu_c.patch
@@ -1,17 +1,17 @@
-From 9701b29e87bc913b95e26ec8f7d26ba404dc1bce Mon Sep 17 00:00:00 2001
+From afec7f854357083d9741054ff0d3c768c8b77e9b Mon Sep 17 00:00:00 2001
 From: Sebastian Lackner <sebastian@fds-team.de>
 Date: Wed, 26 Jul 2017 23:44:32 +0200
-Subject: ntdll: Add back SS segment prefixes in set_full_cpu_context.
+Subject: [PATCH] ntdll: Add back SS segment prefixes in set_full_cpu_context.
 
 ---
- dlls/ntdll/signal_i386.c | 4 ++++
+ dlls/ntdll/unix/signal_i386.c | 4 ++++
  1 file changed, 4 insertions(+)
 
-diff --git a/dlls/ntdll/signal_i386.c b/dlls/ntdll/signal_i386.c
-index bee08275340..75c6654a7f5 100644
---- a/dlls/ntdll/signal_i386.c
-+++ b/dlls/ntdll/signal_i386.c
-@@ -1274,12 +1274,16 @@ __ASM_GLOBAL_FUNC( set_full_cpu_context,
+diff --git a/dlls/ntdll/unix/signal_i386.c b/dlls/ntdll/unix/signal_i386.c
+index 515090d9af8..06751681f5b 100644
+--- a/dlls/ntdll/unix/signal_i386.c
++++ b/dlls/ntdll/unix/signal_i386.c
+@@ -304,12 +304,16 @@ __ASM_GLOBAL_FUNC( set_full_cpu_context,
                     "movl 0xc4(%ecx),%eax\n\t" /* Esp */
                     "leal -4*4(%eax),%eax\n\t"
                     "movl 0xc0(%ecx),%edx\n\t" /* EFlags */
@@ -29,5 +29,5 @@ index bee08275340..75c6654a7f5 100644
                     "pushl 0x98(%ecx)\n\t"     /* SegDs */
                     "movl 0xa8(%ecx),%edx\n\t" /* Edx */
 -- 
-2.13.1
+2.26.2
 
diff --git a/patches/patchinstall.sh b/patches/patchinstall.sh
index 0688e05fa..807d3c39c 100755
--- a/patches/patchinstall.sh
+++ b/patches/patchinstall.sh
@@ -4327,7 +4327,7 @@ fi
 # Patchset ntdll-Threading
 # |
 # | Modified files:
-# |   *	dlls/ntdll/thread.c
+# |   *	dlls/ntdll/thread.c, dlls/ntdll/unix/thread.c
 # |
 if test "$enable_ntdll_Threading" -eq 1; then
 	patch_apply ntdll-Threading/0001-ntdll-Fix-race-condition-when-threads-are-killed-dur.patch
@@ -4383,7 +4383,7 @@ fi
 # Patchset ntdll-set_full_cpu_context
 # |
 # | Modified files:
-# |   *	dlls/ntdll/signal_i386.c
+# |   *	dlls/ntdll/unix/signal_i386.c
 # |
 if test "$enable_ntdll_set_full_cpu_context" -eq 1; then
 	patch_apply ntdll-set_full_cpu_context/0001-ntdll-Add-back-SS-segment-prefixes-in-set_full_cpu_c.patch
diff --git a/patches/winebuild-Fake_Dlls/0003-winebuild-Generate-syscall-thunks-for-ntdll-exports.patch b/patches/winebuild-Fake_Dlls/0003-winebuild-Generate-syscall-thunks-for-ntdll-exports.patch
index 91188a829..8dd18d544 100644
--- a/patches/winebuild-Fake_Dlls/0003-winebuild-Generate-syscall-thunks-for-ntdll-exports.patch
+++ b/patches/winebuild-Fake_Dlls/0003-winebuild-Generate-syscall-thunks-for-ntdll-exports.patch
@@ -1,13 +1,14 @@
-From 3b9456b9e0bc870281df2144b67d42112baad4bd Mon Sep 17 00:00:00 2001
+From 916104878b837947e14ed7d44f591de5ba4fa2dc Mon Sep 17 00:00:00 2001
 From: =?UTF-8?q?Michael=20M=C3=BCller?= <michael@fds-team.de>
 Date: Thu, 11 May 2017 05:32:55 +0200
 Subject: [PATCH] winebuild: Generate syscall thunks for ntdll exports.
 
 Based on a patch by Erich E. Hoover.
 ---
+ dlls/ntdll/loader.c          |   3 +
  dlls/ntdll/signal_i386.c     |   4 +-
  dlls/ntdll/tests/exception.c |   2 +
- dlls/ntdll/thread.c          |   4 ++
+ dlls/ntdll/thread.c          |   3 +
  include/winternl.h           |   2 +-
  tools/winebuild/build.h      |   7 +++
  tools/winebuild/import.c     |  10 ++--
@@ -15,13 +16,34 @@ Based on a patch by Erich E. Hoover.
  tools/winebuild/spec16.c     |  22 +-------
  tools/winebuild/spec32.c     | 104 +++++++++++++++++++++++++++++++++++
  tools/winebuild/utils.c      |  21 +++++++
- 10 files changed, 208 insertions(+), 27 deletions(-)
+ 11 files changed, 210 insertions(+), 27 deletions(-)
 
+diff --git a/dlls/ntdll/loader.c b/dlls/ntdll/loader.c
+index 51addaaf983..b888b680bc4 100644
+--- a/dlls/ntdll/loader.c
++++ b/dlls/ntdll/loader.c
+@@ -3810,6 +3810,7 @@ PIMAGE_NT_HEADERS WINAPI RtlImageNtHeader(HMODULE hModule)
+     return ret;
+ }
+ 
++extern void DECLSPEC_NORETURN __wine_syscall_dispatcher( void );
+ 
+ /******************************************************************
+  *		LdrInitializeThunk (NTDLL.@)
+@@ -3827,6 +3828,8 @@ void WINAPI LdrInitializeThunk( CONTEXT *context, void **entry, ULONG_PTR unknow
+     WINE_MODREF *wm;
+     LPCWSTR load_path = NtCurrentTeb()->Peb->ProcessParameters->DllPath.Buffer;
+ 
++    NtCurrentTeb()->WOW32Reserved = __wine_syscall_dispatcher;
++
+     pthread_sigmask( SIG_UNBLOCK, &server_block_set, NULL );
+ 
+     if (process_detaching) return;
 diff --git a/dlls/ntdll/signal_i386.c b/dlls/ntdll/signal_i386.c
-index eb6c87bce4d..d3cbfe63f1c 100644
+index 72413dcd6c7..88dffb03138 100644
 --- a/dlls/ntdll/signal_i386.c
 +++ b/dlls/ntdll/signal_i386.c
-@@ -449,6 +449,8 @@ static ULONG first_ldt_entry = 32;
+@@ -448,6 +448,8 @@ static ULONG first_ldt_entry = 32;
  
  static wine_signal_handler handlers[256];
  
@@ -30,7 +52,7 @@ index eb6c87bce4d..d3cbfe63f1c 100644
  enum i386_trap_code
  {
      TRAP_x86_UNKNOWN    = -1,  /* Unknown fault (TRAP_sig not defined) */
-@@ -1275,7 +1277,7 @@ NTSTATUS CDECL DECLSPEC_HIDDEN __regs_NtGetContextThread( DWORD edi, DWORD esi,
+@@ -1159,7 +1161,7 @@ NTSTATUS CDECL DECLSPEC_HIDDEN __regs_NtGetContextThread( DWORD edi, DWORD esi,
      {
          context->Ebp    = ebp;
          context->Esp    = (DWORD)&retaddr;
@@ -53,10 +75,10 @@ index a5e6faa461a..51938bf84cc 100644
      ok( context.SegCs == LOWORD(expect.SegCs), "wrong SegCs %08x/%08x\n", context.SegCs, expect.SegCs );
      ok( context.SegDs == LOWORD(expect.SegDs), "wrong SegDs %08x/%08x\n", context.SegDs, expect.SegDs );
 diff --git a/dlls/ntdll/thread.c b/dlls/ntdll/thread.c
-index f9ea9203ed8..7e435c4ccb3 100644
+index d5e34cae3b1..73057d9a9a4 100644
 --- a/dlls/ntdll/thread.c
 +++ b/dlls/ntdll/thread.c
-@@ -212,6 +212,8 @@ void map_user_shared_data(void)
+@@ -201,6 +201,8 @@ void map_user_shared_data(void)
      NtClose( section );
  }
  
@@ -65,7 +87,7 @@ index f9ea9203ed8..7e435c4ccb3 100644
  /***********************************************************************
   *           thread_init
   *
-@@ -246,6 +248,7 @@ TEB *thread_init(void)
+@@ -235,6 +237,7 @@ TEB *thread_init(void)
  
      teb = unix_funcs->virtual_alloc_first_teb();
      unix_funcs->init_threading( &nb_threads, &__wine_ldt_copy );
@@ -73,14 +95,6 @@ index f9ea9203ed8..7e435c4ccb3 100644
  
      peb = teb->Peb;
      peb->FastPebLock        = &peb_lock;
-@@ -491,6 +494,7 @@ NTSTATUS WINAPI RtlCreateUserThread( HANDLE process, SECURITY_DESCRIPTOR *descr,
-     teb->Tib.StackBase = stack.StackBase;
-     teb->Tib.StackLimit = stack.StackLimit;
-     teb->DeallocationStack = stack.DeallocationStack;
-+    teb->WOW32Reserved = __wine_syscall_dispatcher;
- 
-     thread_data = (struct ntdll_thread_data *)&teb->GdiTebBatch;
-     thread_data->request_fd  = request_pipe[1];
 diff --git a/include/winternl.h b/include/winternl.h
 index 44a58cadc7a..065f3d24f52 100644
 --- a/include/winternl.h
diff --git a/patches/winebuild-Fake_Dlls/0005-winebuild-Add-stub-functions-in-fake-dlls.patch b/patches/winebuild-Fake_Dlls/0005-winebuild-Add-stub-functions-in-fake-dlls.patch
index 883ca5ee7..c26e699f4 100644
--- a/patches/winebuild-Fake_Dlls/0005-winebuild-Add-stub-functions-in-fake-dlls.patch
+++ b/patches/winebuild-Fake_Dlls/0005-winebuild-Add-stub-functions-in-fake-dlls.patch
@@ -1,16 +1,17 @@
-From 724fec1afabf68217dc161e0f784a8b65c2c5854 Mon Sep 17 00:00:00 2001
+From c7bd63dbac91eb167ec90846cd8cb7a193b04aa1 Mon Sep 17 00:00:00 2001
 From: =?UTF-8?q?Michael=20M=C3=BCller?= <michael@fds-team.de>
 Date: Mon, 15 May 2017 16:27:56 +0200
 Subject: [PATCH] winebuild: Add stub functions in fake dlls.
 
 ---
  dlls/kernel32/tests/loader.c |   8 +-
- dlls/ntdll/thread.c          |  35 ++++++
+ dlls/ntdll/loader.c          |   2 +
+ dlls/ntdll/thread.c          |  34 ++++++
  include/winternl.h           |   2 +-
  tools/winebuild/build.h      |   1 +
  tools/winebuild/spec32.c     | 209 +++++++++++++++++++++++++++++++++--
  tools/winebuild/utils.c      |  10 +-
- 6 files changed, 250 insertions(+), 15 deletions(-)
+ 7 files changed, 251 insertions(+), 15 deletions(-)
 
 diff --git a/dlls/kernel32/tests/loader.c b/dlls/kernel32/tests/loader.c
 index 926fa913866..902907329c0 100644
@@ -60,15 +61,35 @@ index 926fa913866..902907329c0 100644
      UnmapViewOfFile(ptr);
      CloseHandle(map);
      CloseHandle(file);
+diff --git a/dlls/ntdll/loader.c b/dlls/ntdll/loader.c
+index b888b680bc4..bb60aa919af 100644
+--- a/dlls/ntdll/loader.c
++++ b/dlls/ntdll/loader.c
+@@ -3811,6 +3811,7 @@ PIMAGE_NT_HEADERS WINAPI RtlImageNtHeader(HMODULE hModule)
+ }
+ 
+ extern void DECLSPEC_NORETURN __wine_syscall_dispatcher( void );
++extern void *WINAPI __wine_fakedll_dispatcher( const char *module, ULONG ord );
+ 
+ /******************************************************************
+  *		LdrInitializeThunk (NTDLL.@)
+@@ -3829,6 +3830,7 @@ void WINAPI LdrInitializeThunk( CONTEXT *context, void **entry, ULONG_PTR unknow
+     LPCWSTR load_path = NtCurrentTeb()->Peb->ProcessParameters->DllPath.Buffer;
+ 
+     NtCurrentTeb()->WOW32Reserved = __wine_syscall_dispatcher;
++    NtCurrentTeb()->Spare2 = (ULONG_PTR)__wine_fakedll_dispatcher;
+ 
+     pthread_sigmask( SIG_UNBLOCK, &server_block_set, NULL );
+ 
 diff --git a/dlls/ntdll/thread.c b/dlls/ntdll/thread.c
-index 7e435c4ccb3..5148445ce3a 100644
+index 73057d9a9a4..8c9b0b11c86 100644
 --- a/dlls/ntdll/thread.c
 +++ b/dlls/ntdll/thread.c
-@@ -214,6 +214,39 @@ void map_user_shared_data(void)
+@@ -203,6 +203,39 @@ void map_user_shared_data(void)
  
  extern void DECLSPEC_NORETURN __wine_syscall_dispatcher( void );
  
-+static void *WINAPI __wine_fakedll_dispatcher( const char *module, ULONG ord )
++void *WINAPI __wine_fakedll_dispatcher( const char *module, ULONG ord )
 +{
 +    UNICODE_STRING name;
 +    NTSTATUS status;
@@ -104,7 +125,7 @@ index 7e435c4ccb3..5148445ce3a 100644
  /***********************************************************************
   *           thread_init
   *
-@@ -249,6 +282,7 @@ TEB *thread_init(void)
+@@ -238,6 +271,7 @@ TEB *thread_init(void)
      teb = unix_funcs->virtual_alloc_first_teb();
      unix_funcs->init_threading( &nb_threads, &__wine_ldt_copy );
      teb->WOW32Reserved = __wine_syscall_dispatcher;
@@ -112,14 +133,6 @@ index 7e435c4ccb3..5148445ce3a 100644
  
      peb = teb->Peb;
      peb->FastPebLock        = &peb_lock;
-@@ -495,6 +529,7 @@ NTSTATUS WINAPI RtlCreateUserThread( HANDLE process, SECURITY_DESCRIPTOR *descr,
-     teb->Tib.StackLimit = stack.StackLimit;
-     teb->DeallocationStack = stack.DeallocationStack;
-     teb->WOW32Reserved = __wine_syscall_dispatcher;
-+    teb->Spare2 = (ULONG_PTR)__wine_fakedll_dispatcher;
- 
-     thread_data = (struct ntdll_thread_data *)&teb->GdiTebBatch;
-     thread_data->request_fd  = request_pipe[1];
 diff --git a/include/winternl.h b/include/winternl.h
 index 065f3d24f52..199b8fc52f2 100644
 --- a/include/winternl.h
diff --git a/patches/winebuild-Fake_Dlls/0010-tools-winebuild-Add-syscall-thunks-for-64-bit.patch b/patches/winebuild-Fake_Dlls/0010-tools-winebuild-Add-syscall-thunks-for-64-bit.patch
index 2d38ff3c4..35f9eb138 100644
--- a/patches/winebuild-Fake_Dlls/0010-tools-winebuild-Add-syscall-thunks-for-64-bit.patch
+++ b/patches/winebuild-Fake_Dlls/0010-tools-winebuild-Add-syscall-thunks-for-64-bit.patch
@@ -1,4 +1,4 @@
-From 253d27816a1eb43b54834a12aa4c55442b0b1062 Mon Sep 17 00:00:00 2001
+From 9382d41830426f68bf5da895f308f6691df8111b Mon Sep 17 00:00:00 2001
 From: =?UTF-8?q?Michael=20M=C3=BCller?= <michael@fds-team.de>
 Date: Thu, 7 Sep 2017 00:38:09 +0200
 Subject: [PATCH] tools/winebuild: Add syscall thunks for 64 bit.
@@ -40,10 +40,10 @@ index 95939ba6bde..ae5462f6e55 100644
              todo_wine ok(0, "%s: Export is a stub-function, skipping\n", func_name);
              continue;
 diff --git a/dlls/ntdll/thread.c b/dlls/ntdll/thread.c
-index 5148445ce3a..c9a2240a4da 100644
+index 8187dbe1f2d..5427cbcf04e 100644
 --- a/dlls/ntdll/thread.c
 +++ b/dlls/ntdll/thread.c
-@@ -54,6 +54,8 @@ WINE_DEFAULT_DEBUG_CHANNEL(thread);
+@@ -51,6 +51,8 @@ WINE_DECLARE_DEBUG_CHANNEL(relay);
  
  struct _KUSER_SHARED_DATA *user_shared_data = NULL;
  
@@ -51,8 +51,8 @@ index 5148445ce3a..c9a2240a4da 100644
 +
  void (WINAPI *kernel32_start_process)(LPTHREAD_START_ROUTINE,void*) = NULL;
  
- /* info passed to a starting thread */
-@@ -267,9 +269,9 @@ TEB *thread_init(void)
+ static PEB *peb;
+@@ -256,9 +258,9 @@ TEB *thread_init(void)
      /* reserve space for shared user data */
  
      addr = (void *)0x7ffe0000;
@@ -64,7 +64,7 @@ index 5148445ce3a..c9a2240a4da 100644
      if (status)
      {
          MESSAGE( "wine: failed to map the shared user data: %08x\n", status );
-@@ -277,6 +279,13 @@ TEB *thread_init(void)
+@@ -266,6 +268,13 @@ TEB *thread_init(void)
      }
      user_shared_data = addr;
  
diff --git a/patches/ws2_32-WSACleanup/0002-ws2_32-Invalidate-client-side-file-descriptor-cache-.patch b/patches/ws2_32-WSACleanup/0002-ws2_32-Invalidate-client-side-file-descriptor-cache-.patch
index 95c2d9b8d..2d0f016cc 100644
--- a/patches/ws2_32-WSACleanup/0002-ws2_32-Invalidate-client-side-file-descriptor-cache-.patch
+++ b/patches/ws2_32-WSACleanup/0002-ws2_32-Invalidate-client-side-file-descriptor-cache-.patch
@@ -1,4 +1,4 @@
-From 88f8d0382e55cbe97ae5d7937a63bd801f277f25 Mon Sep 17 00:00:00 2001
+From d6f023a80929f22d520584d47abb08e5b523e0c0 Mon Sep 17 00:00:00 2001
 From: Sebastian Lackner <sebastian@fds-team.de>
 Date: Sun, 6 Sep 2015 12:41:17 +0200
 Subject: [PATCH] ws2_32: Invalidate client-side file descriptor cache in
@@ -29,7 +29,7 @@ index 42532bd9f1c..ba46f170670 100644
  @ cdecl wine_server_handle_to_fd(long long ptr ptr)
  @ cdecl wine_server_release_fd(long long)
 diff --git a/dlls/ntdll/server.c b/dlls/ntdll/server.c
-index c7788b99e2d..54291d0a909 100644
+index bde4a2add18..de3b4b9d2e7 100644
 --- a/dlls/ntdll/server.c
 +++ b/dlls/ntdll/server.c
 @@ -239,6 +239,14 @@ void CDECL wine_server_release_fd( HANDLE handle, int unix_fd )
@@ -48,10 +48,10 @@ index c7788b99e2d..54291d0a909 100644
  /***********************************************************************
   *           server_init_process
 diff --git a/dlls/ntdll/unix/loader.c b/dlls/ntdll/unix/loader.c
-index 0f342e8277e..4c7a5c488dc 100644
+index 1297c451a10..06c0174dd5e 100644
 --- a/dlls/ntdll/unix/loader.c
 +++ b/dlls/ntdll/unix/loader.c
-@@ -1045,6 +1045,7 @@ static struct unix_funcs unix_funcs =
+@@ -1044,6 +1044,7 @@ static struct unix_funcs unix_funcs =
      server_wait,
      server_queue_process_apc,
      server_send_fd,
@@ -91,7 +91,7 @@ index 17b23e58d28..f7d172cf324 100644
  /***********************************************************************
   *           server_get_unix_fd
 diff --git a/dlls/ntdll/unix/unix_private.h b/dlls/ntdll/unix/unix_private.h
-index 8562efb7dd4..ee2bd47ad70 100644
+index 14c4ee4cd97..5657bc9c27d 100644
 --- a/dlls/ntdll/unix/unix_private.h
 +++ b/dlls/ntdll/unix/unix_private.h
 @@ -90,6 +90,7 @@ extern unsigned int CDECL server_wait( const select_op_t *select_op, data_size_t
@@ -103,19 +103,19 @@ index 8562efb7dd4..ee2bd47ad70 100644
                                       int *needs_close, enum server_fd_type *type,
                                       unsigned int *options ) DECLSPEC_HIDDEN;
 diff --git a/dlls/ntdll/unixlib.h b/dlls/ntdll/unixlib.h
-index fb755373f07..7df35f0eee1 100644
+index 67c63fd9268..51e27be22b7 100644
 --- a/dlls/ntdll/unixlib.h
 +++ b/dlls/ntdll/unixlib.h
 @@ -28,7 +28,7 @@ struct ldt_copy;
  struct msghdr;
  
  /* increment this when you change the function table */
--#define NTDLL_UNIXLIB_VERSION 16
-+#define NTDLL_UNIXLIB_VERSION 17
+-#define NTDLL_UNIXLIB_VERSION 19
++#define NTDLL_UNIXLIB_VERSION 20
  
  struct unix_funcs
  {
-@@ -127,6 +127,7 @@ struct unix_funcs
+@@ -128,6 +128,7 @@ struct unix_funcs
                                          const LARGE_INTEGER *timeout );
      unsigned int  (CDECL *server_queue_process_apc)( HANDLE process, const apc_call_t *call, apc_result_t *result );
      void          (CDECL *server_send_fd)( int fd );

diff --git a/patches/ntdll-RtlCreateUserThread/0001-ntdll-Refactor-RtlCreateUserThread-into-NtCreateThre.patch b/patches/ntdll-RtlCreateUserThread/0001-ntdll-Refactor-RtlCreateUserThread-into-NtCreateThre.patch
index 568cfa9a4..4869a02b3 100644
--- a/patches/ntdll-RtlCreateUserThread/0001-ntdll-Refactor-RtlCreateUserThread-into-NtCreateThre.patch
+++ b/patches/ntdll-RtlCreateUserThread/0001-ntdll-Refactor-RtlCreateUserThread-into-NtCreateThre.patch
@@ -25,16 +25,17 @@ index 42532bd9f1c..65fdc30d7a4 100644
  @ stdcall NtCreateTimer(ptr long ptr long)
  @ stub NtCreateToken
 diff --git a/dlls/ntdll/thread.c b/dlls/ntdll/thread.c
-index 20934448fa3..9deb4397ba9 100644
+index c9a2240a4da..f04b8bb337e 100644
 --- a/dlls/ntdll/thread.c
 +++ b/dlls/ntdll/thread.c
-@@ -390,34 +390,18 @@ static void start_thread( struct startup_info *info )
+@@ -406,34 +406,18 @@ static void start_thread( struct startup_info *info )
  /***********************************************************************
   *              NtCreateThreadEx   (NTDLL.@)
   */
 -NTSTATUS WINAPI NtCreateThreadEx( HANDLE *handle_ptr, ACCESS_MASK access, OBJECT_ATTRIBUTES *attr,
+-                                  HANDLE process, LPTHREAD_START_ROUTINE start, void *param,
 +NTSTATUS WINAPI NtCreateThreadEx( HANDLE *handle_ptr, ACCESS_MASK access, OBJECT_ATTRIBUTES *thread_attr,
-                                   HANDLE process, LPTHREAD_START_ROUTINE start, void *param,
++                                  HANDLE process, PRTL_THREAD_START_ROUTINE start, void *param,
                                    ULONG flags, ULONG zero_bits, ULONG stack_commit,
 -                                  ULONG stack_reserve, void *attribute_list )
 -{
@@ -153,32 +154,32 @@ index 20934448fa3..9deb4397ba9 100644
      pthread_sigmask( SIG_SETMASK, &sigset, NULL );
  
      if (id) id->UniqueThread = ULongToHandle(tid);
-@@ -559,6 +565,124 @@ error:
+@@ -577,6 +583,124 @@ error:
      return status;
  }
  
 +NTSTATUS WINAPI NtCreateThread( HANDLE *handle_ptr, ACCESS_MASK access, OBJECT_ATTRIBUTES *attr, HANDLE process,
 +                                CLIENT_ID *id, CONTEXT *context, INITIAL_TEB *teb, BOOLEAN suspended )
 +{
-+    LPTHREAD_START_ROUTINE entry;
++    PRTL_THREAD_START_ROUTINE entry;
 +    void *arg;
 +    ULONG flags = suspended ? THREAD_CREATE_FLAGS_CREATE_SUSPENDED : 0;
 +    PS_ATTRIBUTE_LIST attr_list, *pattr_list = NULL;
 +
 +#if defined(__i386__)
-+        entry = (LPTHREAD_START_ROUTINE) context->Eax;
++        entry = (PRTL_THREAD_START_ROUTINE) context->Eax;
 +        arg = (void *)context->Ebx;
 +#elif defined(__x86_64__)
-+        entry = (LPTHREAD_START_ROUTINE) context->Rcx;
++        entry = (PRTL_THREAD_START_ROUTINE) context->Rcx;
 +        arg = (void *)context->Rdx;
 +#elif defined(__arm__)
-+        entry = (LPTHREAD_START_ROUTINE) context->R0;
++        entry = (PRTL_THREAD_START_ROUTINE) context->R0;
 +        arg = (void *)context->R1;
 +#elif defined(__aarch64__)
-+        entry = (LPTHREAD_START_ROUTINE) context->u.X0;
++        entry = (PRTL_THREAD_START_ROUTINE) context->u.X0;
 +        arg = (void *)context->u.X1;
 +#elif defined(__powerpc__)
-+        entry = (LPTHREAD_START_ROUTINE) context->Gpr3;
++        entry = (PRTL_THREAD_START_ROUTINE) context->Gpr3;
 +        arg = (void *)context->Gpr4;
 +#endif
 +

diff --git a/patches/ntdll-Interrupt-0x2e/0001-ntdll-Catch-windows-int-0x2e-syscall-on-i386.patch b/patches/ntdll-Interrupt-0x2e/0001-ntdll-Catch-windows-int-0x2e-syscall-on-i386.patch
index e4a07ff29..caf7f628c 100644
--- a/patches/ntdll-Interrupt-0x2e/0001-ntdll-Catch-windows-int-0x2e-syscall-on-i386.patch
+++ b/patches/ntdll-Interrupt-0x2e/0001-ntdll-Catch-windows-int-0x2e-syscall-on-i386.patch
@@ -8,15 +8,15 @@ Subject: [PATCH] ntdll: Catch windows int 0x2e syscall on i386.
  1 file changed, 5 insertions(+)
 
 diff --git a/dlls/ntdll/signal_i386.c b/dlls/ntdll/signal_i386.c
-index 8d1c59150..ca2c67333 100644
+index 78d03f669d7..a134b6d54ab 100644
 --- a/dlls/ntdll/signal_i386.c
 +++ b/dlls/ntdll/signal_i386.c
-@@ -1946,6 +1946,11 @@ static BOOL handle_interrupt( unsigned int interrupt, ucontext_t *sigcontext, st
+@@ -1731,6 +1731,11 @@ static BOOL handle_interrupt( unsigned int interrupt, ucontext_t *sigcontext, st
          stack->rec.ExceptionInformation[2] = stack->context.Edx;
          setup_raise_exception( sigcontext, stack );
          return TRUE;
 +    case 0x2e:
-+        FIXME("unimplemented syscall handler for %#lx\n", stack->context.Eax);
++        FIXME("unimplemented syscall handler for %#x\n", stack->context.Eax);
 +        EAX_sig(sigcontext) = STATUS_INVALID_SYSTEM_SERVICE;
 +        EIP_sig(sigcontext) += 2;
 +        return TRUE;

diff --git a/patches/advapi32-Token_Integrity_Level/0008-ntdll-Implement-process-token-elevation-through-mani.patch b/patches/advapi32-Token_Integrity_Level/0008-ntdll-Implement-process-token-elevation-through-mani.patch
index e5e576572..60c16278d 100644
--- a/patches/advapi32-Token_Integrity_Level/0008-ntdll-Implement-process-token-elevation-through-mani.patch
+++ b/patches/advapi32-Token_Integrity_Level/0008-ntdll-Implement-process-token-elevation-through-mani.patch
@@ -12,10 +12,10 @@ Subject: [PATCH] ntdll: Implement process token elevation through manifests.
  5 files changed, 67 insertions(+)
 
 diff --git a/dlls/ntdll/loader.c b/dlls/ntdll/loader.c
-index 38c893e3eb4..d32b57612d5 100644
+index 51addaaf983..71efed5fa32 100644
 --- a/dlls/ntdll/loader.c
 +++ b/dlls/ntdll/loader.c
-@@ -4045,6 +4045,32 @@ void WINAPI LdrInitializeThunk( CONTEXT *context, void **entry, ULONG_PTR unknow
+@@ -3903,6 +3903,32 @@ void WINAPI LdrInitializeThunk( CONTEXT *context, void **entry, ULONG_PTR unknow
  }
  
  
@@ -48,7 +48,7 @@ index 38c893e3eb4..d32b57612d5 100644
  /***********************************************************************
   *           load_global_options
   */
-@@ -4478,6 +4504,7 @@ void __wine_process_init(void)
+@@ -4363,6 +4389,7 @@ void __wine_process_init(void)
                                        's','y','s','t','e','m','3','2','\\',
                                        'k','e','r','n','e','l','3','2','.','d','l','l',0};
      RTL_USER_PROCESS_PARAMETERS *params;
@@ -56,9 +56,9 @@ index 38c893e3eb4..d32b57612d5 100644
      WINE_MODREF *wm;
      NTSTATUS status;
      ANSI_STRING func_name;
-@@ -4575,6 +4602,16 @@ void __wine_process_init(void)
+@@ -4466,6 +4493,16 @@ void __wine_process_init(void)
  
-     virtual_set_large_address_space();
+     unix_funcs->virtual_set_large_address_space();
  
 +    /* elevate process if necessary */
 +    status = RtlQueryInformationActivationContext( 0, NULL, 0, RunlevelInformationInActivationContext,
@@ -74,10 +74,10 @@ index 38c893e3eb4..d32b57612d5 100644
      RemoveEntryList( &wm->ldr.InLoadOrderLinks );
      InsertHeadList( &peb->LdrData->InLoadOrderModuleList, &wm->ldr.InLoadOrderLinks );
 diff --git a/server/process.c b/server/process.c
-index 4c7da9223c1..d6f71a774f3 100644
+index 80a091b0c72..34010b301c3 100644
 --- a/server/process.c
 +++ b/server/process.c
-@@ -1107,6 +1107,14 @@ struct process_snapshot *process_snap( int *count )
+@@ -1112,6 +1112,14 @@ struct process_snapshot *process_snap( int *count )
      return snapshot;
  }
  
 
diff --git a/patches/ntdll-Builtin_Prot/0001-ntdll-Fix-holes-in-ELF-mappings.patch b/patches/ntdll-Builtin_Prot/0001-ntdll-Fix-holes-in-ELF-mappings.patch
index cef9bed67..9c3036cac 100644
--- a/patches/ntdll-Builtin_Prot/0001-ntdll-Fix-holes-in-ELF-mappings.patch
+++ b/patches/ntdll-Builtin_Prot/0001-ntdll-Fix-holes-in-ELF-mappings.patch
@@ -1,19 +1,19 @@
-From ce12fa75ca18eeea3f0ec53788353d07ec683e95 Mon Sep 17 00:00:00 2001
+From be204ab84d031b7efb223ac7c4962246549c8eb0 Mon Sep 17 00:00:00 2001
 From: =?UTF-8?q?Michael=20M=C3=BCller?= <michael@fds-team.de>
 Date: Thu, 1 Jun 2017 06:04:53 +0200
 Subject: [PATCH] ntdll: Fix holes in ELF mappings. (v2)
 
 Based on a patch by Andrew Wesie.
 ---
- dlls/ntdll/virtual.c          | 23 +++++++++++++++++++++++
+ dlls/ntdll/unix/virtual.c     | 23 +++++++++++++++++++++++
  dlls/psapi/tests/psapi_main.c | 14 +++++++++++++-
  2 files changed, 36 insertions(+), 1 deletion(-)
 
-diff --git a/dlls/ntdll/virtual.c b/dlls/ntdll/virtual.c
-index 6cb47f2cae8..2ba116c4e92 100644
---- a/dlls/ntdll/virtual.c
-+++ b/dlls/ntdll/virtual.c
-@@ -485,6 +485,16 @@ static inline BOOL is_write_watch_range( const void *addr, size_t size )
+diff --git a/dlls/ntdll/unix/virtual.c b/dlls/ntdll/unix/virtual.c
+index e824b9ced25..90143f5c07b 100644
+--- a/dlls/ntdll/unix/virtual.c
++++ b/dlls/ntdll/unix/virtual.c
+@@ -966,6 +966,16 @@ static inline BOOL is_write_watch_range( const void *addr, size_t size )
  }
  
  
@@ -22,7 +22,7 @@ index 6cb47f2cae8..2ba116c4e92 100644
 + */
 +static inline BOOL is_system_range( const void *addr, size_t size )
 +{
-+    struct file_view *view = VIRTUAL_FindView( addr, size );
++    struct file_view *view = find_view( addr, size );
 +    return view && (view->protect & VPROT_SYSTEM);
 +}
 +
@@ -30,13 +30,13 @@ index 6cb47f2cae8..2ba116c4e92 100644
  /***********************************************************************
   *           find_view_range
   *
-@@ -2386,6 +2396,19 @@ NTSTATUS virtual_handle_fault( LPCVOID addr, DWORD err, BOOL on_signal_stack )
+@@ -2812,6 +2822,19 @@ NTSTATUS CDECL virtual_handle_fault( LPCVOID addr, DWORD err, BOOL on_signal_sta
          /* ignore fault if page is writable now */
-         if (VIRTUAL_GetUnixProt( get_page_vprot( page )) & PROT_WRITE) ret = STATUS_SUCCESS;
+         if (get_unix_prot( get_page_vprot( page ) ) & PROT_WRITE) ret = STATUS_SUCCESS;
      }
-+    else if (!err && (VIRTUAL_GetUnixProt( vprot ) & PROT_READ) && is_system_range( page, page_size ))
++    else if (!err && (get_unix_prot( vprot ) & PROT_READ) && is_system_range( page, page_size ))
 +    {
-+        int unix_prot = VIRTUAL_GetUnixProt( vprot );
++        int unix_prot = get_unix_prot( vprot );
 +        unsigned char vec;
 +
 +        mprotect_range( page, page_size, 0, 0 );
diff --git a/patches/ntdll-Dealloc_Thread_Stack/0001-ntdll-Do-not-allow-to-allocate-thread-stack-for-curr.patch b/patches/ntdll-Dealloc_Thread_Stack/0001-ntdll-Do-not-allow-to-allocate-thread-stack-for-curr.patch
index f4213c6ca..ab2d0968c 100644
--- a/patches/ntdll-Dealloc_Thread_Stack/0001-ntdll-Do-not-allow-to-allocate-thread-stack-for-curr.patch
+++ b/patches/ntdll-Dealloc_Thread_Stack/0001-ntdll-Do-not-allow-to-allocate-thread-stack-for-curr.patch
@@ -1,19 +1,20 @@
-From a01aaa21d4709e52a01198167b49c9519090a4e3 Mon Sep 17 00:00:00 2001
+From 7ecb980c3b1d3ee2b5ce2ad6419adf5782b85c7a Mon Sep 17 00:00:00 2001
 From: Sebastian Lackner <sebastian@fds-team.de>
 Date: Fri, 21 Aug 2015 06:39:47 +0800
 Subject: [PATCH] ntdll: Do not allow to deallocate thread stack for current
  thread.
 
 ---
- dlls/ntdll/ntdll_misc.h |  1 +
- dlls/ntdll/virtual.c    | 12 ++++++++++++
- 2 files changed, 13 insertions(+)
+ dlls/ntdll/ntdll_misc.h        |  1 +
+ dlls/ntdll/unix/unix_private.h |  1 +
+ dlls/ntdll/unix/virtual.c      | 12 ++++++++++++
+ 3 files changed, 14 insertions(+)
 
 diff --git a/dlls/ntdll/ntdll_misc.h b/dlls/ntdll/ntdll_misc.h
-index f847503307b..2d037e0d7cb 100644
+index e9a3230e814..e7a74131c30 100644
 --- a/dlls/ntdll/ntdll_misc.h
 +++ b/dlls/ntdll/ntdll_misc.h
-@@ -240,6 +240,7 @@ struct ntdll_thread_data
+@@ -249,6 +249,7 @@ struct ntdll_thread_data
      int                wait_fd[2];    /* fd for sleeping server requests */
      BOOL               wow64_redir;   /* Wow64 filesystem redirection flag */
      pthread_t          pthread_id;    /* pthread thread id */
@@ -21,11 +22,23 @@ index f847503307b..2d037e0d7cb 100644
  };
  
  C_ASSERT( sizeof(struct ntdll_thread_data) <= sizeof(((TEB *)0)->GdiTebBatch) );
-diff --git a/dlls/ntdll/virtual.c b/dlls/ntdll/virtual.c
-index 5c12d87d297..f7bac9eac91 100644
---- a/dlls/ntdll/virtual.c
-+++ b/dlls/ntdll/virtual.c
-@@ -1986,6 +1986,8 @@ NTSTATUS virtual_alloc_thread_stack( INITIAL_TEB *stack, SIZE_T reserve_size, SI
+diff --git a/dlls/ntdll/unix/unix_private.h b/dlls/ntdll/unix/unix_private.h
+index 8562efb7dd4..b34adf2f07f 100644
+--- a/dlls/ntdll/unix/unix_private.h
++++ b/dlls/ntdll/unix/unix_private.h
+@@ -41,6 +41,7 @@ struct ntdll_thread_data
+     int                wait_fd[2];    /* fd for sleeping server requests */
+     BOOL               wow64_redir;   /* Wow64 filesystem redirection flag */
+     pthread_t          pthread_id;    /* pthread thread id */
++    void              *pthread_stack; /* pthread stack */
+ };
+ 
+ C_ASSERT( sizeof(struct ntdll_thread_data) <= sizeof(((TEB *)0)->GdiTebBatch) );
+diff --git a/dlls/ntdll/unix/virtual.c b/dlls/ntdll/unix/virtual.c
+index 0346d0d9753..5e995338a08 100644
+--- a/dlls/ntdll/unix/virtual.c
++++ b/dlls/ntdll/unix/virtual.c
+@@ -2715,6 +2715,8 @@ NTSTATUS CDECL virtual_alloc_thread_stack( INITIAL_TEB *stack, SIZE_T reserve_si
      stack->DeallocationStack = view->base;
      stack->StackBase = (char *)view->base + view->size;
      stack->StackLimit = (char *)view->base + 2 * page_size;
@@ -34,7 +47,7 @@ index 5c12d87d297..f7bac9eac91 100644
  done:
      server_leave_uninterrupted_section( &csVirtual, &sigset );
      return status;
-@@ -2703,6 +2705,16 @@ NTSTATUS WINAPI NtFreeVirtualMemory( HANDLE process, PVOID *addr_ptr, SIZE_T *si
+@@ -3374,6 +3376,16 @@ NTSTATUS WINAPI NtFreeVirtualMemory( HANDLE process, PVOID *addr_ptr, SIZE_T *si
          /* Free the pages */
  
          if (size || (base != view->base)) status = STATUS_INVALID_PARAMETER;
 
diff --git a/patches/ntdll-Fix_Alignment/0001-ntdll-Move-NtProtectVirtualMemory-and-NtCreateSectio.patch b/patches/ntdll-Fix_Alignment/0001-ntdll-Move-NtProtectVirtualMemory-and-NtCreateSectio.patch
index 270c82fdd..f62b97a04 100644
--- a/patches/ntdll-Fix_Alignment/0001-ntdll-Move-NtProtectVirtualMemory-and-NtCreateSectio.patch
+++ b/patches/ntdll-Fix_Alignment/0001-ntdll-Move-NtProtectVirtualMemory-and-NtCreateSectio.patch
@@ -1,18 +1,18 @@
-From 554f37a5ee79939ba9368e9bd7ea408860a32803 Mon Sep 17 00:00:00 2001
+From 9a7a3037b16670d121465036e7da2c4db6f18182 Mon Sep 17 00:00:00 2001
 From: =?UTF-8?q?Michael=20M=C3=BCller?= <michael@fds-team.de>
 Date: Wed, 20 Aug 2014 19:21:18 +0200
 Subject: [PATCH] ntdll: Move NtProtectVirtualMemory and NtCreateSection to
  separate pages on x86. (try 2)
 
 ---
- dlls/ntdll/virtual.c | 8 ++++++++
+ dlls/ntdll/unix/virtual.c | 8 ++++++++
  1 file changed, 8 insertions(+)
 
-diff --git a/dlls/ntdll/virtual.c b/dlls/ntdll/virtual.c
-index cfe30bbe710..6173846cfb4 100644
---- a/dlls/ntdll/virtual.c
-+++ b/dlls/ntdll/virtual.c
-@@ -366,6 +366,14 @@ static void free_ranges_remove_view( struct file_view *view )
+diff --git a/dlls/ntdll/unix/virtual.c b/dlls/ntdll/unix/virtual.c
+index 0346d0d9753..ab321a989dd 100644
+--- a/dlls/ntdll/unix/virtual.c
++++ b/dlls/ntdll/unix/virtual.c
+@@ -660,6 +660,14 @@ static void free_ranges_remove_view( struct file_view *view )
  }
  
  
  
diff --git a/patches/ntdll-Hide_Wine_Exports/0001-ntdll-Add-support-for-hiding-wine-version-informatio.patch b/patches/ntdll-Hide_Wine_Exports/0001-ntdll-Add-support-for-hiding-wine-version-informatio.patch
index f7f200757..91aec80f8 100644
--- a/patches/ntdll-Hide_Wine_Exports/0001-ntdll-Add-support-for-hiding-wine-version-informatio.patch
+++ b/patches/ntdll-Hide_Wine_Exports/0001-ntdll-Add-support-for-hiding-wine-version-informatio.patch
@@ -1,4 +1,4 @@
-From 6c463b0bd58fb0830271582e5dd916f936084daf Mon Sep 17 00:00:00 2001
+From 463baa9359f163b4e152f681a3703e602347ab04 Mon Sep 17 00:00:00 2001
 From: Sebastian Lackner <sebastian@fds-team.de>
 Date: Sat, 30 May 2015 02:23:15 +0200
 Subject: [PATCH] ntdll: Add support for hiding wine version information from
@@ -10,10 +10,10 @@ Subject: [PATCH] ntdll: Add support for hiding wine version information from
  2 files changed, 104 insertions(+), 1 deletion(-)
 
 diff --git a/dlls/ntdll/loader.c b/dlls/ntdll/loader.c
-index 926098ebf50a..4cf7fed9e1b2 100644
+index 71efed5fa32..ec9ddc73e9c 100644
 --- a/dlls/ntdll/loader.c
 +++ b/dlls/ntdll/loader.c
-@@ -78,6 +78,7 @@ const WCHAR system_dir[] = {'C',':','\\','w','i','n','d','o','w','s','\\',
+@@ -77,6 +77,7 @@ const WCHAR system_dir[] = {'C',':','\\','w','i','n','d','o','w','s','\\',
  const WCHAR syswow64_dir[] = {'C',':','\\','w','i','n','d','o','w','s','\\',
                                's','y','s','w','o','w','6','4','\\',0};
  
@@ -40,7 +40,7 @@ index 926098ebf50a..4cf7fed9e1b2 100644
  struct ldr_notification
  {
      struct list                    entry;
-@@ -1872,6 +1878,96 @@ NTSTATUS WINAPI LdrUnlockLoaderLock( ULONG flags, ULONG_PTR magic )
+@@ -1810,6 +1816,96 @@ NTSTATUS WINAPI LdrUnlockLoaderLock( ULONG flags, ULONG_PTR magic )
  }
  
  
@@ -137,7 +137,7 @@ index 926098ebf50a..4cf7fed9e1b2 100644
  /******************************************************************
   *		LdrGetProcedureAddress  (NTDLL.@)
   */
-@@ -1892,7 +1988,7 @@ NTSTATUS WINAPI LdrGetProcedureAddress(HMODULE module, const ANSI_STRING *name,
+@@ -1830,7 +1926,7 @@ NTSTATUS WINAPI LdrGetProcedureAddress(HMODULE module, const ANSI_STRING *name,
          LPCWSTR load_path = NtCurrentTeb()->Peb->ProcessParameters->DllPath.Buffer;
          void *proc = name ? find_named_export( module, exports, exp_size, name->Buffer, -1, load_path )
                            : find_ordinal_export( module, exports, exp_size, ord - exports->Base, load_path );
@@ -146,20 +146,20 @@ index 926098ebf50a..4cf7fed9e1b2 100644
          {
              *address = proc;
              ret = STATUS_SUCCESS;
-@@ -4739,6 +4835,8 @@ void __wine_process_init(void)
+@@ -4491,6 +4587,8 @@ void __wine_process_init(void)
          NtTerminateProcess( GetCurrentProcess(), status );
      }
  
 +    hidden_exports_init( wm->ldr.FullDllName.Buffer );
 +
-     virtual_set_large_address_space();
+     unix_funcs->virtual_set_large_address_space();
  
      /* elevate process if necessary */
 diff --git a/dlls/ntdll/ntdll_misc.h b/dlls/ntdll/ntdll_misc.h
-index 7d631cb33ddb..8256ec710a00 100644
+index dbd9a826429..b4666d82c8b 100644
 --- a/dlls/ntdll/ntdll_misc.h
 +++ b/dlls/ntdll/ntdll_misc.h
-@@ -347,6 +347,11 @@ void     WINAPI LdrInitializeThunk(CONTEXT*,void**,ULONG_PTR,ULONG_PTR);
+@@ -283,6 +283,11 @@ void     WINAPI LdrInitializeThunk(CONTEXT*,void**,ULONG_PTR,ULONG_PTR);
  #define InterlockedCompareExchange64(dest,xchg,cmp) RtlInterlockedCompareExchange64(dest,xchg,cmp)
  #endif
  
diff --git a/patches/ntdll-NtQueryVirtualMemory/0003-ntdll-Implement-NtQueryVirtualMemory-MemorySectionNa.patch b/patches/ntdll-NtQueryVirtualMemory/0003-ntdll-Implement-NtQueryVirtualMemory-MemorySectionNa.patch
index 503b5c5b4..17522de47 100644
--- a/patches/ntdll-NtQueryVirtualMemory/0003-ntdll-Implement-NtQueryVirtualMemory-MemorySectionNa.patch
+++ b/patches/ntdll-NtQueryVirtualMemory/0003-ntdll-Implement-NtQueryVirtualMemory-MemorySectionNa.patch
@@ -1,21 +1,22 @@
-From e718ef3521d76d455dbfd1088cc83e47121d987c Mon Sep 17 00:00:00 2001
+From fb9c617c12858107700c919aec3dfa5fbf0a65dc Mon Sep 17 00:00:00 2001
 From: Dmitry Timoshkov <dmitry@baikal.ru>
 Date: Sun, 28 May 2017 05:19:30 +0200
-Subject: ntdll: Implement NtQueryVirtualMemory(MemorySectionName). (v3)
+Subject: [PATCH] ntdll: Implement NtQueryVirtualMemory(MemorySectionName).
+ (v3)
 
 Contains several improvements by Sebastian Lackner <sebastian@fds-team.de>.
 ---
- dlls/ntdll/virtual.c          | 91 ++++++++++++++++++++++++++++++++++-
+ dlls/ntdll/unix/virtual.c     | 91 ++++++++++++++++++++++++++++++++++-
  dlls/psapi/tests/psapi_main.c |  8 +--
  server/mapping.c              | 29 +++++++++++
  server/protocol.def           |  9 ++++
  4 files changed, 129 insertions(+), 8 deletions(-)
 
-diff --git a/dlls/ntdll/virtual.c b/dlls/ntdll/virtual.c
-index 6ad2d21e0..f49127c3e 100644
---- a/dlls/ntdll/virtual.c
-+++ b/dlls/ntdll/virtual.c
-@@ -3192,6 +3192,93 @@ static NTSTATUS get_working_set_ex( HANDLE process, LPCVOID addr,
+diff --git a/dlls/ntdll/unix/virtual.c b/dlls/ntdll/unix/virtual.c
+index 0346d0d9753..06796f441ae 100644
+--- a/dlls/ntdll/unix/virtual.c
++++ b/dlls/ntdll/unix/virtual.c
+@@ -3695,6 +3695,93 @@ static NTSTATUS get_working_set_ex( HANDLE process, LPCVOID addr,
      return STATUS_SUCCESS;
  }
  
@@ -109,7 +110,7 @@ index 6ad2d21e0..f49127c3e 100644
  #define UNIMPLEMENTED_INFO_CLASS(c) \
      case c: \
          FIXME("(process=%p,addr=%p) Unimplemented information class: " #c "\n", process, addr); \
-@@ -3216,8 +3303,10 @@ NTSTATUS WINAPI NtQueryVirtualMemory( HANDLE process, LPCVOID addr,
+@@ -3719,8 +3806,10 @@ NTSTATUS WINAPI NtQueryVirtualMemory( HANDLE process, LPCVOID addr,
          case MemoryWorkingSetExInformation:
              return get_working_set_ex( process, addr, buffer, len, res_len );
  
@@ -122,10 +123,10 @@ index 6ad2d21e0..f49127c3e 100644
  
          default:
 diff --git a/dlls/psapi/tests/psapi_main.c b/dlls/psapi/tests/psapi_main.c
-index 0df247e9b..1cc0455aa 100644
+index da7524dd60a..bfe14231a9b 100644
 --- a/dlls/psapi/tests/psapi_main.c
 +++ b/dlls/psapi/tests/psapi_main.c
-@@ -375,14 +375,7 @@ static BOOL nt_get_mapped_file_name(HANDLE process, LPVOID addr, LPWSTR name, DW
+@@ -372,14 +372,7 @@ static BOOL nt_get_mapped_file_name(HANDLE process, LPVOID addr, LPWSTR name, DW
  
      ret_len = 0xdeadbeef;
      status = pNtQueryVirtualMemory(process, addr, MemorySectionName, buf, buf_len, &ret_len);
@@ -140,7 +141,7 @@ index 0df247e9b..1cc0455aa 100644
  
      section_name = (MEMORY_SECTION_NAME *)buf;
      ok(ret_len == section_name->SectionFileName.MaximumLength + sizeof(*section_name), "got %lu, %u\n",
-@@ -504,6 +497,7 @@ todo_wine {
+@@ -501,6 +494,7 @@ todo_wine {
      {
          ok(memcmp(map_nameW, nt_map_name, lstrlenW(map_nameW)) == 0, "map name does not start with a device name: %s\n", map_name);
          WideCharToMultiByte(CP_ACP, 0, map_nameW, -1, map_name, MAX_PATH, NULL, NULL);
@@ -149,10 +150,10 @@ index 0df247e9b..1cc0455aa 100644
      }
  
 diff --git a/server/mapping.c b/server/mapping.c
-index 6990a1913..ca28e8909 100644
+index 0941dd87c05..487cd2a6131 100644
 --- a/server/mapping.c
 +++ b/server/mapping.c
-@@ -1064,6 +1064,35 @@ DECL_HANDLER(unmap_view)
+@@ -1091,6 +1091,35 @@ DECL_HANDLER(unmap_view)
      if (view) free_memory_view( view );
  }
  
@@ -189,10 +190,10 @@ index 6990a1913..ca28e8909 100644
  DECL_HANDLER(get_mapping_committed_range)
  {
 diff --git a/server/protocol.def b/server/protocol.def
-index 6c44b2b43..e7753f8b7 100644
+index 632c996dc0e..223b45db1a8 100644
 --- a/server/protocol.def
 +++ b/server/protocol.def
-@@ -1838,6 +1838,15 @@ enum char_info_mode
+@@ -1849,6 +1849,15 @@ enum char_info_mode
  @END
  
  
 
diff --git a/patches/ntdll-NtQueryVirtualMemory/0008-ntdll-Resolve-drive-symlinks-before-returning-sectio.patch b/patches/ntdll-NtQueryVirtualMemory/0008-ntdll-Resolve-drive-symlinks-before-returning-sectio.patch
index 81e23dc88..0ef87c87a 100644
--- a/patches/ntdll-NtQueryVirtualMemory/0008-ntdll-Resolve-drive-symlinks-before-returning-sectio.patch
+++ b/patches/ntdll-NtQueryVirtualMemory/0008-ntdll-Resolve-drive-symlinks-before-returning-sectio.patch
@@ -6,15 +6,15 @@ Subject: [PATCH] ntdll: Resolve drive symlinks before returning section name.
 ---
  dlls/ntdll/directory.c        |  2 +-
  dlls/ntdll/ntdll_misc.h       |  1 +
- dlls/ntdll/virtual.c          | 37 +++++++++++++++++++++++++++++------
+ dlls/ntdll/unix/virtual.c     | 37 +++++++++++++++++++++++++++++------
  dlls/psapi/tests/psapi_main.c |  6 +-----
  4 files changed, 34 insertions(+), 12 deletions(-)
 
 diff --git a/dlls/ntdll/directory.c b/dlls/ntdll/directory.c
-index 7a9de26ccb0..1062e35e009 100644
+index 453568d641e..12da4316e88 100644
 --- a/dlls/ntdll/directory.c
 +++ b/dlls/ntdll/directory.c
-@@ -2806,7 +2806,7 @@ static NTSTATUS nt_to_unix_file_name_internal( const UNICODE_STRING *nameW, ANSI
+@@ -2798,7 +2798,7 @@ static NTSTATUS nt_to_unix_file_name_internal( const UNICODE_STRING *nameW, ANSI
  }
  
  /* read the contents of an NT symlink object */
@@ -24,10 +24,10 @@ index 7a9de26ccb0..1062e35e009 100644
      OBJECT_ATTRIBUTES attr;
      UNICODE_STRING targetW;
 diff --git a/dlls/ntdll/ntdll_misc.h b/dlls/ntdll/ntdll_misc.h
-index b6507599a92..b7822c54ad0 100644
+index e9a3230e814..750b01bd059 100644
 --- a/dlls/ntdll/ntdll_misc.h
 +++ b/dlls/ntdll/ntdll_misc.h
-@@ -182,6 +182,7 @@ extern NTSTATUS nt_to_unix_file_name_attr( const OBJECT_ATTRIBUTES *attr, ANSI_S
+@@ -175,6 +175,7 @@ extern NTSTATUS nt_to_unix_file_name_attr( const OBJECT_ATTRIBUTES *attr, ANSI_S
                                             UINT disposition ) DECLSPEC_HIDDEN;
  
  /* virtual memory */
@@ -35,11 +35,11 @@ index b6507599a92..b7822c54ad0 100644
  extern NTSTATUS virtual_map_section( HANDLE handle, PVOID *addr_ptr, unsigned short zero_bits_64, SIZE_T commit_size,
                                       const LARGE_INTEGER *offset_ptr, SIZE_T *size_ptr, ULONG alloc_type,
                                       ULONG protect, pe_image_info_t *image_info ) DECLSPEC_HIDDEN;
-diff --git a/dlls/ntdll/virtual.c b/dlls/ntdll/virtual.c
-index cc1d6e5d6f2..3d53b92cb8e 100644
---- a/dlls/ntdll/virtual.c
-+++ b/dlls/ntdll/virtual.c
-@@ -192,6 +192,8 @@ static BYTE **pages_vprot;
+diff --git a/dlls/ntdll/unix/virtual.c b/dlls/ntdll/unix/virtual.c
+index 97244822082..15b4697c441 100644
+--- a/dlls/ntdll/unix/virtual.c
++++ b/dlls/ntdll/unix/virtual.c
+@@ -194,6 +194,8 @@ static BYTE **pages_vprot;
  static BYTE *pages_vprot;
  #endif
  
@@ -48,7 +48,7 @@ index cc1d6e5d6f2..3d53b92cb8e 100644
  static struct file_view *view_block_start, *view_block_end, *next_free_view;
  #ifdef _WIN64
  static const size_t view_block_size = 0x200000;
-@@ -3713,12 +3715,15 @@ static NTSTATUS get_section_name( HANDLE process, LPCVOID addr,
+@@ -3836,12 +3838,15 @@ static NTSTATUS get_section_name( HANDLE process, LPCVOID addr,
                                    MEMORY_SECTION_NAME *info,
                                    SIZE_T len, SIZE_T *res_len )
  {
@@ -65,7 +65,7 @@ index cc1d6e5d6f2..3d53b92cb8e 100644
  
      if (!addr || !info || !res_len) return STATUS_INVALID_PARAMETER;
  
-@@ -3777,14 +3782,34 @@ static NTSTATUS get_section_name( HANDLE process, LPCVOID addr,
+@@ -3900,14 +3905,34 @@ static NTSTATUS get_section_name( HANDLE process, LPCVOID addr,
      }
  
  found:
@@ -106,10 +106,10 @@ index cc1d6e5d6f2..3d53b92cb8e 100644
      else
          status = (len < sizeof(MEMORY_SECTION_NAME)) ? STATUS_INFO_LENGTH_MISMATCH : STATUS_BUFFER_OVERFLOW;
 diff --git a/dlls/psapi/tests/psapi_main.c b/dlls/psapi/tests/psapi_main.c
-index 99e87db9543..3984805d2b9 100644
+index f6a7b69eca0..a8263a2f44b 100644
 --- a/dlls/psapi/tests/psapi_main.c
 +++ b/dlls/psapi/tests/psapi_main.c
-@@ -488,7 +488,6 @@ static void test_GetMappedFileName(void)
+@@ -476,7 +476,6 @@ static void test_GetMappedFileName(void)
      ret = GetMappedFileNameA(GetCurrentProcess(), base, map_name, sizeof(map_name));
      ok(ret, "GetMappedFileName error %d\n", GetLastError());
      ok(ret > strlen(device_name), "map_name should be longer than device_name\n");
@@ -117,7 +117,7 @@ index 99e87db9543..3984805d2b9 100644
      ok(memcmp(map_name, device_name, strlen(device_name)) == 0, "map name does not start with a device name: %s\n", map_name);
  
      SetLastError(0xdeadbeef);
-@@ -501,7 +500,6 @@ todo_wine {
+@@ -489,7 +488,6 @@ todo_wine {
      {
          ok(memcmp(map_nameW, nt_map_name, lstrlenW(map_nameW)) == 0, "map name does not start with a device name: %s\n", map_name);
          WideCharToMultiByte(CP_ACP, 0, map_nameW, -1, map_name, MAX_PATH, NULL, NULL);
@@ -125,7 +125,7 @@ index 99e87db9543..3984805d2b9 100644
          ok(memcmp(map_name, device_name, strlen(device_name)) == 0, "map name does not start with a device name: %s\n", map_name);
      }
  
-@@ -514,7 +512,6 @@ todo_wine
+@@ -502,7 +500,6 @@ todo_wine
      {
          ok(memcmp(map_nameW, nt_map_name, lstrlenW(map_nameW)) == 0, "map name does not start with a device name: %s\n", map_name);
          WideCharToMultiByte(CP_ACP, 0, map_nameW, -1, map_name, MAX_PATH, NULL, NULL);
@@ -133,7 +133,7 @@ index 99e87db9543..3984805d2b9 100644
          ok(memcmp(map_name, device_name, strlen(device_name)) == 0, "map name does not start with a device name: %s\n", map_name);
      }
  
-@@ -522,7 +519,6 @@ todo_wine
+@@ -510,7 +507,6 @@ todo_wine
      ret = GetMappedFileNameA(GetCurrentProcess(), base + 0x2000, map_name, sizeof(map_name));
      ok(ret, "GetMappedFileName error %d\n", GetLastError());
      ok(ret > strlen(device_name), "map_name should be longer than device_name\n");
@@ -141,7 +141,7 @@ index 99e87db9543..3984805d2b9 100644
      ok(memcmp(map_name, device_name, strlen(device_name)) == 0, "map name does not start with a device name: %s\n", map_name);
  
      SetLastError(0xdeadbeef);
-@@ -604,7 +600,7 @@ static void test_GetProcessImageFileName(void)
+@@ -592,7 +588,7 @@ static void test_GetProcessImageFileName(void)
      {
          /* Windows returns 2*strlen-1 */
          ok(ret >= strlen(szImgPath), "szImgPath=\"%s\" ret=%d\n", szImgPath, ret);
diff --git a/patches/ntdll-NtQueryVirtualMemory/definition b/patches/ntdll-NtQueryVirtualMemory/definition
index 068251748..b33d61eaa 100644
--- a/patches/ntdll-NtQueryVirtualMemory/definition
+++ b/patches/ntdll-NtQueryVirtualMemory/definition
@@ -1,3 +1,6 @@
 Fixes: [23999] Implement MemorySectionName class in NtQueryVirtualMemory
 Fixes: [27248] Implement K32GetMappedFileName
 Depends: ntdll-NtDevicePath
+Depends: ntdll-ForceBottomUpAlloc
+# Disable for now, until some other things are moved down to ntdll.so.
+Disabled: true
diff --git a/patches/ntdll-WRITECOPY/0001-ntdll-Trigger-write-watches-before-passing-userdata-.patch b/patches/ntdll-WRITECOPY/0001-ntdll-Trigger-write-watches-before-passing-userdata-.patch
index 1f72cb105..53b9152bc 100644
--- a/patches/ntdll-WRITECOPY/0001-ntdll-Trigger-write-watches-before-passing-userdata-.patch
+++ b/patches/ntdll-WRITECOPY/0001-ntdll-Trigger-write-watches-before-passing-userdata-.patch
@@ -6,8 +6,8 @@ Subject: [PATCH] ntdll: Trigger write watches before passing userdata pointer
 
 ---
  dlls/advapi32/tests/security.c | 1 -
- dlls/ntdll/server.c            | 9 +++++++++
- 2 files changed, 9 insertions(+), 1 deletion(-)
+ dlls/ntdll/unix/server.c       | 8 ++++++++
+ 2 files changed, 8 insertions(+), 1 deletion(-)
 
 diff --git a/dlls/advapi32/tests/security.c b/dlls/advapi32/tests/security.c
 index 825f8451904..b414401634a 100644
@@ -21,16 +21,18 @@ index 825f8451904..b414401634a 100644
      ok(Access == 0x1abe11ed && AccessStatus == 0x1abe11ed,
         "Access and/or AccessStatus were changed!\n");
  
-diff --git a/dlls/ntdll/server.c b/dlls/ntdll/server.c
-index ed4e3f25531..921dec86c82 100644
---- a/dlls/ntdll/server.c
-+++ b/dlls/ntdll/server.c
-@@ -166,6 +166,15 @@ static DECLSPEC_NORETURN void server_protocol_perror( const char *err )
+diff --git a/dlls/ntdll/unix/server.c b/dlls/ntdll/unix/server.c
+index 17b23e58d28..91155a1663d 100644
+--- a/dlls/ntdll/unix/server.c
++++ b/dlls/ntdll/unix/server.c
+@@ -304,9 +304,17 @@ unsigned int server_call_unlocked( void *req_ptr )
   */
  unsigned int CDECL wine_server_call( void *req_ptr )
  {
 +    struct __server_request_info * const req = req_ptr;
-+
+     sigset_t old_set;
+     unsigned int ret;
+ 
 +    /* trigger write watches, otherwise read() might return EFAULT */
 +    if (req->u.req.request_header.reply_size &&
 +        !virtual_check_buffer_for_write( req->reply_data, req->u.req.request_header.reply_size ))
@@ -38,9 +40,9 @@ index ed4e3f25531..921dec86c82 100644
 +        return STATUS_ACCESS_VIOLATION;
 +    }
 +
-     return unix_funcs->server_call( req_ptr );
- }
- 
+     pthread_sigmask( SIG_BLOCK, &server_block_set, &old_set );
+     ret = server_call_unlocked( req_ptr );
+     pthread_sigmask( SIG_SETMASK, &old_set, NULL );
 -- 
 2.26.2
 
diff --git a/patches/ntdll-WRITECOPY/0003-ntdll-Setup-a-temporary-signal-handler-during-proces.patch b/patches/ntdll-WRITECOPY/0003-ntdll-Setup-a-temporary-signal-handler-during-proces.patch
index c5f334858..c48114473 100644
--- a/patches/ntdll-WRITECOPY/0003-ntdll-Setup-a-temporary-signal-handler-during-proces.patch
+++ b/patches/ntdll-WRITECOPY/0003-ntdll-Setup-a-temporary-signal-handler-during-proces.patch
@@ -15,10 +15,10 @@ Subject: [PATCH] ntdll: Setup a temporary signal handler during process
  7 files changed, 79 insertions(+)
 
 diff --git a/dlls/ntdll/ntdll_misc.h b/dlls/ntdll/ntdll_misc.h
-index 427cdaad441..562f5ec8d4c 100644
+index e9a3230e814..04aee675e55 100644
 --- a/dlls/ntdll/ntdll_misc.h
 +++ b/dlls/ntdll/ntdll_misc.h
-@@ -80,6 +80,7 @@ extern LPCSTR debugstr_ObjectAttributes(const OBJECT_ATTRIBUTES *oa) DECLSPEC_HI
+@@ -78,6 +78,7 @@ extern LPCSTR debugstr_ObjectAttributes(const OBJECT_ATTRIBUTES *oa) DECLSPEC_HI
  extern SIZE_T signal_stack_size DECLSPEC_HIDDEN;
  extern SIZE_T signal_stack_mask DECLSPEC_HIDDEN;
  extern void signal_init_process(void) DECLSPEC_HIDDEN;
@@ -27,10 +27,10 @@ index 427cdaad441..562f5ec8d4c 100644
  extern void signal_start_process( LPTHREAD_START_ROUTINE entry, BOOL suspend ) DECLSPEC_HIDDEN;
  extern void version_init(void) DECLSPEC_HIDDEN;
 diff --git a/dlls/ntdll/signal_arm.c b/dlls/ntdll/signal_arm.c
-index e66cf922f91..dcfdeaa83ad 100644
+index b7e387babf1..bb329f888ce 100644
 --- a/dlls/ntdll/signal_arm.c
 +++ b/dlls/ntdll/signal_arm.c
-@@ -988,6 +988,12 @@ void signal_init_process(void)
+@@ -774,6 +774,12 @@ void signal_init_process(void)
      exit(1);
  }
  
@@ -44,10 +44,10 @@ index e66cf922f91..dcfdeaa83ad 100644
  /***********************************************************************
   *            RtlUnwind  (NTDLL.@)
 diff --git a/dlls/ntdll/signal_arm64.c b/dlls/ntdll/signal_arm64.c
-index c87f99f0c4c..fed76574dbc 100644
+index c2dd129a569..22d4983d5c6 100644
 --- a/dlls/ntdll/signal_arm64.c
 +++ b/dlls/ntdll/signal_arm64.c
-@@ -1303,6 +1303,12 @@ int CDECL __wine_set_signal_handler(unsigned int sig, wine_signal_handler wsh)
+@@ -1101,6 +1101,12 @@ int CDECL __wine_set_signal_handler(unsigned int sig, wine_signal_handler wsh)
      return 0;
  }
  
@@ -61,10 +61,10 @@ index c87f99f0c4c..fed76574dbc 100644
  /**********************************************************************
   *		signal_init_process
 diff --git a/dlls/ntdll/signal_i386.c b/dlls/ntdll/signal_i386.c
-index 2f2db70b57f..12771552a5d 100644
+index 78d03f669d7..e3dc2c0d1c8 100644
 --- a/dlls/ntdll/signal_i386.c
 +++ b/dlls/ntdll/signal_i386.c
-@@ -1988,6 +1988,31 @@ static BOOL handle_interrupt( unsigned int interrupt, ucontext_t *sigcontext, st
+@@ -1737,6 +1737,31 @@ static BOOL handle_interrupt( unsigned int interrupt, ucontext_t *sigcontext, st
  }
  
  
@@ -83,7 +83,7 @@ index 2f2db70b57f..12771552a5d 100644
 +    switch(get_trap_code(context))
 +    {
 +    case TRAP_x86_PAGEFLT:  /* Page fault */
-+        if (!virtual_handle_fault( siginfo->si_addr, (get_error_code(context) >> 1) & 0x09, TRUE ))
++        if (!unix_funcs->virtual_handle_fault( siginfo->si_addr, (get_error_code(context) >> 1) & 0x09, TRUE ))
 +            return;
 +        /* fall-through */
 +    default:
@@ -96,7 +96,7 @@ index 2f2db70b57f..12771552a5d 100644
  /**********************************************************************
   *		segv_handler
   *
-@@ -2315,6 +2340,34 @@ void signal_init_process(void)
+@@ -2064,6 +2089,34 @@ void signal_init_process(void)
      exit(1);
  }
  
@@ -132,10 +132,10 @@ index 2f2db70b57f..12771552a5d 100644
  /*******************************************************************
   *		RtlUnwind (NTDLL.@)
 diff --git a/dlls/ntdll/signal_powerpc.c b/dlls/ntdll/signal_powerpc.c
-index a23f6b6e4d5..c3b4b6ffd42 100644
+index 75b18e1e933..314a0677d92 100644
 --- a/dlls/ntdll/signal_powerpc.c
 +++ b/dlls/ntdll/signal_powerpc.c
-@@ -1009,6 +1009,12 @@ int CDECL __wine_set_signal_handler(unsigned int sig, wine_signal_handler wsh)
+@@ -638,6 +638,12 @@ int CDECL __wine_set_signal_handler(unsigned int sig, wine_signal_handler wsh)
      return 0;
  }
  
@@ -149,10 +149,10 @@ index a23f6b6e4d5..c3b4b6ffd42 100644
  /**********************************************************************
   *		signal_init_process
 diff --git a/dlls/ntdll/signal_x86_64.c b/dlls/ntdll/signal_x86_64.c
-index d42438f88af..b4c11ed66ed 100644
+index 7cefd1403f3..0eb58d3d149 100644
 --- a/dlls/ntdll/signal_x86_64.c
 +++ b/dlls/ntdll/signal_x86_64.c
-@@ -3141,6 +3141,12 @@ void signal_init_process(void)
+@@ -2850,6 +2850,12 @@ void signal_init_process(void)
      exit(1);
  }
  
@@ -166,7 +166,7 @@ index d42438f88af..b4c11ed66ed 100644
  static ULONG64 get_int_reg( CONTEXT *context, int reg )
  {
 diff --git a/dlls/ntdll/thread.c b/dlls/ntdll/thread.c
-index bb11521cf69..ff18b119232 100644
+index f9ea9203ed8..31213614911 100644
 --- a/dlls/ntdll/thread.c
 +++ b/dlls/ntdll/thread.c
 @@ -228,6 +228,7 @@ TEB *thread_init(void)
diff --git a/patches/ntdll-WRITECOPY/0004-ntdll-Properly-handle-PAGE_WRITECOPY-protection.-try.patch b/patches/ntdll-WRITECOPY/0004-ntdll-Properly-handle-PAGE_WRITECOPY-protection.-try.patch
index 4b3958120..6c4b17def 100644
--- a/patches/ntdll-WRITECOPY/0004-ntdll-Properly-handle-PAGE_WRITECOPY-protection.-try.patch
+++ b/patches/ntdll-WRITECOPY/0004-ntdll-Properly-handle-PAGE_WRITECOPY-protection.-try.patch
@@ -1,19 +1,19 @@
-From 8c8e2422bea9485bdcda98cea703983bb01f6e41 Mon Sep 17 00:00:00 2001
+From f5019b4f92b14ef22e7e96a38442f7f864488b10 Mon Sep 17 00:00:00 2001
 From: =?UTF-8?q?Michael=20M=C3=BCller?= <michael@fds-team.de>
 Date: Sat, 4 Oct 2014 03:22:09 +0200
 Subject: [PATCH] ntdll: Properly handle PAGE_WRITECOPY protection. (try 5)
 
 For now, only enable it when a special environment variable is set.
 ---
- dlls/ntdll/virtual.c | 46 +++++++++++++++++++++++++++++++++++++-------
+ dlls/ntdll/unix/virtual.c | 46 +++++++++++++++++++++++++++++++++------
  1 file changed, 39 insertions(+), 7 deletions(-)
 
-diff --git a/dlls/ntdll/virtual.c b/dlls/ntdll/virtual.c
-index 328bc40a92f..3533a087d88 100644
---- a/dlls/ntdll/virtual.c
-+++ b/dlls/ntdll/virtual.c
-@@ -321,6 +321,21 @@ static const char *VIRTUAL_GetProtStr( BYTE prot )
-     return buffer;
+diff --git a/dlls/ntdll/unix/virtual.c b/dlls/ntdll/unix/virtual.c
+index 0346d0d9753..5a8ba8bae2a 100644
+--- a/dlls/ntdll/unix/virtual.c
++++ b/dlls/ntdll/unix/virtual.c
+@@ -498,6 +498,21 @@ int CDECL mmap_enum_reserved_areas( int (CDECL *enum_func)(void *base, SIZE_T si
+     return ret;
  }
  
 +/* This might look like a hack, but it actually isn't - the 'experimental' version
@@ -33,8 +33,8 @@ index 328bc40a92f..3533a087d88 100644
 +}
  
  /***********************************************************************
-  *           VIRTUAL_GetUnixProt
-@@ -334,8 +349,19 @@ static int VIRTUAL_GetUnixProt( BYTE vprot )
+  *           free_ranges_lower_bound
+@@ -799,8 +814,19 @@ static int get_unix_prot( BYTE vprot )
      {
          if (vprot & VPROT_READ) prot |= PROT_READ;
          if (vprot & VPROT_WRITE) prot |= PROT_WRITE | PROT_READ;
@@ -55,7 +55,7 @@ index 328bc40a92f..3533a087d88 100644
          if (vprot & VPROT_WRITEWATCH) prot &= ~PROT_WRITE;
      }
      if (!prot) prot = PROT_NONE;
-@@ -1080,7 +1106,7 @@ static void update_write_watches( void *base, size_t size, size_t accessed_size
+@@ -1539,7 +1565,7 @@ static void update_write_watches( void *base, size_t size, size_t accessed_size
  {
      TRACE( "updating watch %p-%p-%p\n", base, (char *)base + accessed_size, (char *)base + size );
      /* clear write watch flag on accessed pages */
@@ -64,12 +64,12 @@ index 328bc40a92f..3533a087d88 100644
      /* restore page protections on the entire range */
      mprotect_range( base, size, 0, 0 );
  }
-@@ -2340,12 +2366,13 @@ NTSTATUS virtual_handle_fault( LPCVOID addr, DWORD err, BOOL on_signal_stack )
+@@ -2746,12 +2772,13 @@ NTSTATUS CDECL virtual_handle_fault( LPCVOID addr, DWORD err, BOOL on_signal_sta
              set_page_vprot_bits( page, page_size, 0, VPROT_WRITEWATCH );
              mprotect_range( page, page_size, 0, 0 );
          }
 -        /* ignore fault if page is writable now */
--        if (VIRTUAL_GetUnixProt( get_page_vprot( page )) & PROT_WRITE)
+-        if (get_unix_prot( get_page_vprot( page )) & PROT_WRITE)
 +        if (vprot & VPROT_WRITECOPY)
          {
 -            if ((vprot & VPROT_WRITEWATCH) || is_write_watch_range( page, page_size ))
@@ -78,11 +78,11 @@ index 328bc40a92f..3533a087d88 100644
 +            mprotect_range( page, page_size, 0, 0 );
          }
 +        /* ignore fault if page is writable now */
-+        if (VIRTUAL_GetUnixProt( get_page_vprot( page )) & PROT_WRITE) ret = STATUS_SUCCESS;
++        if (get_unix_prot( get_page_vprot( page ) ) & PROT_WRITE) ret = STATUS_SUCCESS;
      }
      server_leave_uninterrupted_section( &csVirtual, &sigset );
      return ret;
-@@ -2367,11 +2394,16 @@ static NTSTATUS check_write_access( void *base, size_t size, BOOL *has_write_wat
+@@ -2773,11 +2800,16 @@ static NTSTATUS check_write_access( void *base, size_t size, BOOL *has_write_wat
      {
          BYTE vprot = get_page_vprot( addr + i );
          if (vprot & VPROT_WRITEWATCH) *has_write_watch = TRUE;
@@ -91,7 +91,7 @@ index 328bc40a92f..3533a087d88 100644
 +            vprot = (vprot & ~VPROT_WRITECOPY) | VPROT_WRITE;
 +            *has_write_watch = TRUE;
 +        }
-         if (!(VIRTUAL_GetUnixProt( vprot & ~VPROT_WRITEWATCH ) & PROT_WRITE))
+         if (!(get_unix_prot( vprot & ~VPROT_WRITEWATCH ) & PROT_WRITE))
              return STATUS_INVALID_USER_BUFFER;
      }
      if (*has_write_watch)
diff --git a/patches/ntdll-WRITECOPY/0005-ntdll-Track-if-a-WRITECOPY-page-has-been-modified.patch b/patches/ntdll-WRITECOPY/0005-ntdll-Track-if-a-WRITECOPY-page-has-been-modified.patch
index 8022ad639..4e32ba6f8 100644
--- a/patches/ntdll-WRITECOPY/0005-ntdll-Track-if-a-WRITECOPY-page-has-been-modified.patch
+++ b/patches/ntdll-WRITECOPY/0005-ntdll-Track-if-a-WRITECOPY-page-has-been-modified.patch
@@ -8,14 +8,14 @@ read-write page.
 
 Signed-off-by: Andrew Wesie <awesie@gmail.com>
 ---
- dlls/ntdll/virtual.c | 25 +++++++++++++++++++------
+ dlls/ntdll/unix/virtual.c | 25 +++++++++++++++++++------
  1 file changed, 19 insertions(+), 6 deletions(-)
 
-diff --git a/dlls/ntdll/virtual.c b/dlls/ntdll/virtual.c
-index 3533a087d88..75219ae2376 100644
---- a/dlls/ntdll/virtual.c
-+++ b/dlls/ntdll/virtual.c
-@@ -85,6 +85,7 @@ struct file_view
+diff --git a/dlls/ntdll/unix/virtual.c b/dlls/ntdll/unix/virtual.c
+index 5a8ba8bae2a..c81104bd266 100644
+--- a/dlls/ntdll/unix/virtual.c
++++ b/dlls/ntdll/unix/virtual.c
+@@ -97,6 +97,7 @@ struct file_view
  #define VPROT_GUARD      0x10
  #define VPROT_COMMITTED  0x20
  #define VPROT_WRITEWATCH 0x40
@@ -23,7 +23,7 @@ index 3533a087d88..75219ae2376 100644
  /* per-mapping protection flags */
  #define VPROT_SYSTEM     0x0200  /* system view (underlying mmap not under our control) */
  
-@@ -353,7 +354,7 @@ static int VIRTUAL_GetUnixProt( BYTE vprot )
+@@ -818,7 +819,7 @@ static int get_unix_prot( BYTE vprot )
  #if defined(__i386__)
          if (vprot & VPROT_WRITECOPY)
          {
@@ -32,9 +32,9 @@ index 3533a087d88..75219ae2376 100644
                  prot = (prot & ~PROT_WRITE) | PROT_READ;
              else
                  prot |= PROT_WRITE | PROT_READ;
-@@ -925,7 +926,11 @@ static NTSTATUS create_view( struct file_view **view_ret, void *base, size_t siz
+@@ -1397,7 +1398,11 @@ static NTSTATUS create_view( struct file_view **view_ret, void *base, size_t siz
   */
- static DWORD VIRTUAL_GetWin32Prot( BYTE vprot, unsigned int map_prot )
+ static DWORD get_win32_prot( BYTE vprot, unsigned int map_prot )
  {
 -    DWORD ret = VIRTUAL_Win32Flags[vprot & 0x0f];
 +    DWORD ret;
@@ -45,7 +45,7 @@ index 3533a087d88..75219ae2376 100644
      if (vprot & VPROT_GUARD) ret |= PAGE_GUARD;
      if (map_prot & SEC_NOCACHE) ret |= PAGE_NOCACHE;
      return ret;
-@@ -1049,7 +1054,7 @@ static BOOL VIRTUAL_SetProt( struct file_view *view, /* [in] Pointer to view */
+@@ -1508,7 +1513,7 @@ static BOOL set_vprot( struct file_view *view, void *base, size_t size, BYTE vpr
      if (view->protect & VPROT_WRITEWATCH)
      {
          /* each page may need different protections depending on write watch flag */
@@ -54,7 +54,7 @@ index 3533a087d88..75219ae2376 100644
          mprotect_range( base, size, 0, 0 );
          return TRUE;
      }
-@@ -1065,10 +1070,18 @@ static BOOL VIRTUAL_SetProt( struct file_view *view, /* [in] Pointer to view */
+@@ -1524,10 +1529,18 @@ static BOOL set_vprot( struct file_view *view, void *base, size_t size, BYTE vpr
          return TRUE;
      }
  
@@ -74,7 +74,7 @@ index 3533a087d88..75219ae2376 100644
      return TRUE;
  }
  
-@@ -2368,7 +2381,7 @@ NTSTATUS virtual_handle_fault( LPCVOID addr, DWORD err, BOOL on_signal_stack )
+@@ -2774,7 +2787,7 @@ NTSTATUS CDECL virtual_handle_fault( LPCVOID addr, DWORD err, BOOL on_signal_sta
          }
          if (vprot & VPROT_WRITECOPY)
          {
@@ -83,7 +83,7 @@ index 3533a087d88..75219ae2376 100644
              mprotect_range( page, page_size, 0, 0 );
          }
          /* ignore fault if page is writable now */
-@@ -3272,7 +3285,7 @@ static NTSTATUS get_basic_memory_info( HANDLE process, LPCVOID addr,
+@@ -3660,7 +3673,7 @@ static NTSTATUS get_basic_memory_info( HANDLE process, LPCVOID addr,
          else if (view->protect & (SEC_FILE | SEC_RESERVE | SEC_COMMIT)) info->Type = MEM_MAPPED;
          else info->Type = MEM_PRIVATE;
          for (ptr = base; ptr < base + range_size; ptr += page_size)
diff --git a/patches/ntdll-WRITECOPY/0006-ntdll-Support-WRITECOPY-on-x64.patch b/patches/ntdll-WRITECOPY/0006-ntdll-Support-WRITECOPY-on-x64.patch
index 183324746..ad417ed94 100644
--- a/patches/ntdll-WRITECOPY/0006-ntdll-Support-WRITECOPY-on-x64.patch
+++ b/patches/ntdll-WRITECOPY/0006-ntdll-Support-WRITECOPY-on-x64.patch
@@ -6,14 +6,14 @@ Subject: [PATCH] ntdll: Support WRITECOPY on x64.
 Signed-off-by: Andrew Wesie <awesie@gmail.com>
 ---
  dlls/ntdll/signal_x86_64.c | 40 ++++++++++++++++++++++++++++++++++++++
- dlls/ntdll/virtual.c       |  2 +-
+ dlls/ntdll/unix/virtual.c  |  2 +-
  2 files changed, 41 insertions(+), 1 deletion(-)
 
 diff --git a/dlls/ntdll/signal_x86_64.c b/dlls/ntdll/signal_x86_64.c
-index 29829bfb1c6..89a8e36410d 100644
+index 0eb58d3d149..8fdb800984c 100644
 --- a/dlls/ntdll/signal_x86_64.c
 +++ b/dlls/ntdll/signal_x86_64.c
-@@ -2871,6 +2871,29 @@ static inline BOOL handle_interrupt( ucontext_t *sigcontext, struct stack_layout
+@@ -2575,6 +2575,29 @@ static inline BOOL handle_interrupt( ucontext_t *sigcontext, struct stack_layout
  }
  
  
@@ -30,7 +30,7 @@ index 29829bfb1c6..89a8e36410d 100644
 +    switch(TRAP_sig(ucontext))
 +    {
 +    case TRAP_x86_PAGEFLT:  /* Page fault */
-+        if (!virtual_handle_fault( siginfo->si_addr, (ERROR_sig(ucontext) >> 1) & 0x09, TRUE ))
++        if (!unix_funcs->virtual_handle_fault( siginfo->si_addr, (ERROR_sig(ucontext) >> 1) & 0x09, TRUE ))
 +            return;
 +        /* fall-through */
 +    default:
@@ -43,7 +43,7 @@ index 29829bfb1c6..89a8e36410d 100644
  /**********************************************************************
   *		segv_handler
   *
-@@ -3291,6 +3314,23 @@ void signal_init_process(void)
+@@ -2855,6 +2878,23 @@ void signal_init_process(void)
   */
  void signal_init_early(void)
  {
@@ -67,11 +67,11 @@ index 29829bfb1c6..89a8e36410d 100644
  }
  
  static ULONG64 get_int_reg( CONTEXT *context, int reg )
-diff --git a/dlls/ntdll/virtual.c b/dlls/ntdll/virtual.c
-index 75219ae2376..df77f55a9e7 100644
---- a/dlls/ntdll/virtual.c
-+++ b/dlls/ntdll/virtual.c
-@@ -351,7 +351,7 @@ static int VIRTUAL_GetUnixProt( BYTE vprot )
+diff --git a/dlls/ntdll/unix/virtual.c b/dlls/ntdll/unix/virtual.c
+index c81104bd266..1072907ffdd 100644
+--- a/dlls/ntdll/unix/virtual.c
++++ b/dlls/ntdll/unix/virtual.c
+@@ -816,7 +816,7 @@ static int get_unix_prot( BYTE vprot )
          if (vprot & VPROT_READ) prot |= PROT_READ;
          if (vprot & VPROT_WRITE) prot |= PROT_WRITE | PROT_READ;
          if (vprot & VPROT_EXEC) prot |= PROT_EXEC | PROT_READ;
diff --git a/patches/ntdll-WRITECOPY/0007-ntdll-Report-unmodified-WRITECOPY-pages-as-shared.patch b/patches/ntdll-WRITECOPY/0007-ntdll-Report-unmodified-WRITECOPY-pages-as-shared.patch
index fd45e5b51..5805bf6ba 100644
--- a/patches/ntdll-WRITECOPY/0007-ntdll-Report-unmodified-WRITECOPY-pages-as-shared.patch
+++ b/patches/ntdll-WRITECOPY/0007-ntdll-Report-unmodified-WRITECOPY-pages-as-shared.patch
@@ -9,14 +9,14 @@ match the behavior of Windows.
 Wine-Bug: https://bugs.winehq.org/show_bug.cgi?id=48665
 Signed-off-by: Andrew Wesie <awesie@gmail.com>
 ---
- dlls/ntdll/virtual.c | 4 +++-
+ dlls/ntdll/unix/virtual.c | 4 +++-
  1 file changed, 3 insertions(+), 1 deletion(-)
 
-diff --git a/dlls/ntdll/virtual.c b/dlls/ntdll/virtual.c
-index df77f55a9e7..b329a9024d8 100644
---- a/dlls/ntdll/virtual.c
-+++ b/dlls/ntdll/virtual.c
-@@ -1737,6 +1737,8 @@ static NTSTATUS map_image( HANDLE hmapping, ACCESS_MASK access, int fd, int top_
+diff --git a/dlls/ntdll/unix/virtual.c b/dlls/ntdll/unix/virtual.c
+index 1072907ffdd..9a576de4930 100644
+--- a/dlls/ntdll/unix/virtual.c
++++ b/dlls/ntdll/unix/virtual.c
+@@ -2188,6 +2188,8 @@ static NTSTATUS map_image( HANDLE hmapping, ACCESS_MASK access, int fd, int top_
                             ptr + sec->VirtualAddress + file_size,
                             ptr + sec->VirtualAddress + end );
              memset( ptr + sec->VirtualAddress + file_size, 0, end - file_size );
@@ -25,7 +25,7 @@ index df77f55a9e7..b329a9024d8 100644
          }
      }
  
-@@ -3336,7 +3338,7 @@ static NTSTATUS get_working_set_ex( HANDLE process, LPCVOID addr,
+@@ -3724,7 +3726,7 @@ static NTSTATUS get_working_set_ex( HANDLE process, LPCVOID addr,
                  (vprot & VPROT_COMMITTED))
          {
              p->VirtualAttributes.Valid = !(vprot & VPROT_GUARD) && (vprot & 0x0f) && (pagemap >> 63);
diff --git a/patches/ntdll-WRITECOPY/0008-ntdll-Fallback-to-copy-pages-for-WRITECOPY.patch b/patches/ntdll-WRITECOPY/0008-ntdll-Fallback-to-copy-pages-for-WRITECOPY.patch
index 384e6f8fa..d620b2be7 100644
--- a/patches/ntdll-WRITECOPY/0008-ntdll-Fallback-to-copy-pages-for-WRITECOPY.patch
+++ b/patches/ntdll-WRITECOPY/0008-ntdll-Fallback-to-copy-pages-for-WRITECOPY.patch
@@ -12,14 +12,14 @@ then copy the contents to the new page.
 
 Signed-off-by: Andrew Wesie <awesie@gmail.com>
 ---
- dlls/ntdll/virtual.c | 25 +++++++++++++++++++++----
+ dlls/ntdll/unix/virtual.c | 25 +++++++++++++++++++++----
  1 file changed, 21 insertions(+), 4 deletions(-)
 
-diff --git a/dlls/ntdll/virtual.c b/dlls/ntdll/virtual.c
-index b329a9024d8..e68ca274ca4 100644
---- a/dlls/ntdll/virtual.c
-+++ b/dlls/ntdll/virtual.c
-@@ -1070,8 +1070,9 @@ static BOOL VIRTUAL_SetProt( struct file_view *view, /* [in] Pointer to view */
+diff --git a/dlls/ntdll/unix/virtual.c b/dlls/ntdll/unix/virtual.c
+index 9a576de4930..e824b9ced25 100644
+--- a/dlls/ntdll/unix/virtual.c
++++ b/dlls/ntdll/unix/virtual.c
+@@ -1529,8 +1529,9 @@ static BOOL set_vprot( struct file_view *view, void *base, size_t size, BYTE vpr
          return TRUE;
      }
  
@@ -31,14 +31,14 @@ index b329a9024d8..e68ca274ca4 100644
          unix_prot |= PROT_WRITE;
  
      if (mprotect_exec( base, size, unix_prot )) /* FIXME: last error */
-@@ -2381,10 +2382,26 @@ NTSTATUS virtual_handle_fault( LPCVOID addr, DWORD err, BOOL on_signal_stack )
+@@ -2787,10 +2788,26 @@ NTSTATUS CDECL virtual_handle_fault( LPCVOID addr, DWORD err, BOOL on_signal_sta
              set_page_vprot_bits( page, page_size, 0, VPROT_WRITEWATCH );
              mprotect_range( page, page_size, 0, 0 );
          }
 -        if (vprot & VPROT_WRITECOPY)
 +        if ((vprot & VPROT_WRITECOPY) && (vprot & VPROT_COMMITTED))
          {
-+            struct file_view *view = VIRTUAL_FindView( page, 0 );
++            struct file_view *view = find_view( page, 0 );
 +
              set_page_vprot_bits( page, page_size, VPROT_WRITE | VPROT_WRITTEN, VPROT_WRITECOPY );
 -            mprotect_range( page, page_size, 0, 0 );
@@ -54,12 +54,12 @@ index b329a9024d8..e68ca274ca4 100644
 +
 +                /* original mapping is shared, replace with a private page */
 +                memcpy( temp_page, page, page_size );
-+                wine_anon_mmap( page, page_size, VIRTUAL_GetUnixProt(vprot | VPROT_WRITE | VPROT_WRITTEN), MAP_FIXED );
++                wine_anon_mmap( page, page_size, get_unix_prot( vprot | VPROT_WRITE | VPROT_WRITTEN ), MAP_FIXED );
 +                memcpy( page, temp_page, page_size );
 +            }
          }
          /* ignore fault if page is writable now */
-         if (VIRTUAL_GetUnixProt( get_page_vprot( page )) & PROT_WRITE) ret = STATUS_SUCCESS;
+         if (get_unix_prot( get_page_vprot( page ) ) & PROT_WRITE) ret = STATUS_SUCCESS;
 -- 
 2.26.2
 
diff --git a/patches/patchinstall.sh b/patches/patchinstall.sh
index 752ef3b8a..e98025998 100755
--- a/patches/patchinstall.sh
+++ b/patches/patchinstall.sh
@@ -187,7 +187,6 @@ patch_enable_all ()
 	enable_ntdll_NtDevicePath="$1"
 	enable_ntdll_NtQueryEaFile="$1"
 	enable_ntdll_NtQuerySection="$1"
-	enable_ntdll_NtQueryVirtualMemory="$1"
 	enable_ntdll_NtSetLdtEntries="$1"
 	enable_ntdll_Pipe_SpecialCharacters="$1"
 	enable_ntdll_ProcessQuotaLimits="$1"
@@ -662,9 +661,6 @@ patch_enable ()
 		ntdll-NtQuerySection)
 			enable_ntdll_NtQuerySection="$2"
 			;;
-		ntdll-NtQueryVirtualMemory)
-			enable_ntdll_NtQueryVirtualMemory="$2"
-			;;
 		ntdll-NtSetLdtEntries)
 			enable_ntdll_NtSetLdtEntries="$2"
 			;;
@@ -1687,13 +1683,6 @@ if test "$enable_ntdll_RtlCreateUserThread" -eq 1; then
 	enable_winebuild_Fake_Dlls=1
 fi
 
-if test "$enable_ntdll_NtQueryVirtualMemory" -eq 1; then
-	if test "$enable_ntdll_NtDevicePath" -gt 1; then
-		abort "Patchset ntdll-NtDevicePath disabled, but ntdll-NtQueryVirtualMemory depends on that."
-	fi
-	enable_ntdll_NtDevicePath=1
-fi
-
 if test "$enable_ntdll_NtQueryEaFile" -eq 1; then
 	if test "$enable_ntdll_Junction_Points" -gt 1; then
 		abort "Patchset ntdll-Junction_Points disabled, but ntdll-NtQueryEaFile depends on that."
@@ -3677,8 +3666,8 @@ fi
 # |
 # | Modified files:
 # |   *	dlls/advapi32/crypt.c, dlls/advapi32/tests/security.c, dlls/kernel32/tests/virtual.c, dlls/ntdll/ntdll_misc.h,
-# | 	dlls/ntdll/server.c, dlls/ntdll/signal_arm.c, dlls/ntdll/signal_arm64.c, dlls/ntdll/signal_i386.c,
-# | 	dlls/ntdll/signal_powerpc.c, dlls/ntdll/signal_x86_64.c, dlls/ntdll/thread.c, dlls/ntdll/virtual.c,
+# | 	dlls/ntdll/signal_arm.c, dlls/ntdll/signal_arm64.c, dlls/ntdll/signal_i386.c, dlls/ntdll/signal_powerpc.c,
+# | 	dlls/ntdll/signal_x86_64.c, dlls/ntdll/thread.c, dlls/ntdll/unix/server.c, dlls/ntdll/unix/virtual.c,
 # | 	dlls/psapi/tests/psapi_main.c
 # |
 if test "$enable_ntdll_WRITECOPY" -eq 1; then
@@ -3713,7 +3702,7 @@ fi
 # |   *	[#44650] Fix holes in ELF mappings
 # |
 # | Modified files:
-# |   *	dlls/ntdll/virtual.c, dlls/psapi/tests/psapi_main.c
+# |   *	dlls/ntdll/unix/virtual.c, dlls/psapi/tests/psapi_main.c
 # |
 if test "$enable_ntdll_Builtin_Prot" -eq 1; then
 	patch_apply ntdll-Builtin_Prot/0001-ntdll-Fix-holes-in-ELF-mappings.patch
@@ -3775,7 +3764,7 @@ fi
 # Patchset ntdll-Dealloc_Thread_Stack
 # |
 # | Modified files:
-# |   *	dlls/ntdll/ntdll_misc.h, dlls/ntdll/virtual.c
+# |   *	dlls/ntdll/ntdll_misc.h, dlls/ntdll/unix/unix_private.h, dlls/ntdll/unix/virtual.c
 # |
 if test "$enable_ntdll_Dealloc_Thread_Stack" -eq 1; then
 	patch_apply ntdll-Dealloc_Thread_Stack/0001-ntdll-Do-not-allow-to-allocate-thread-stack-for-curr.patch
@@ -3858,7 +3847,7 @@ fi
 # |   *	[#33162] Ensure NtProtectVirtualMemory and NtCreateSection are on separate pages
 # |
 # | Modified files:
-# |   *	dlls/ntdll/virtual.c
+# |   *	dlls/ntdll/unix/virtual.c
 # |
 if test "$enable_ntdll_Fix_Alignment" -eq 1; then
 	patch_apply ntdll-Fix_Alignment/0001-ntdll-Move-NtProtectVirtualMemory-and-NtCreateSectio.patch
@@ -3875,7 +3864,7 @@ fi
 # | 	44-bit user-mode VA limitation from Windows < 8.1)
 # |
 # | Modified files:
-# |   *	dlls/ntdll/virtual.c
+# |   *	dlls/ntdll/unix/virtual.c
 # |
 if test "$enable_ntdll_ForceBottomUpAlloc" -eq 1; then
 	patch_apply ntdll-ForceBottomUpAlloc/0001-ntdll-Stop-search-on-mmap-error-in-try_map_free_area.patch
@@ -4114,36 +4103,6 @@ if test "$enable_ntdll_NtQuerySection" -eq 1; then
 	) >> "$patchlist"
 fi
 
-# Patchset ntdll-NtQueryVirtualMemory
-# |
-# | This patchset has the following (direct or indirect) dependencies:
-# |   *	ntdll-Pipe_SpecialCharacters, ntdll-NtDevicePath
-# |
-# | This patchset fixes the following Wine bugs:
-# |   *	[#23999] Implement MemorySectionName class in NtQueryVirtualMemory
-# |   *	[#27248] Implement K32GetMappedFileName
-# |
-# | Modified files:
-# |   *	dlls/kernelbase/debug.c, dlls/ntdll/directory.c, dlls/ntdll/ntdll_misc.h, dlls/ntdll/tests/info.c, dlls/ntdll/virtual.c,
-# | 	dlls/psapi/tests/psapi_main.c, server/mapping.c, server/protocol.def
-# |
-if test "$enable_ntdll_NtQueryVirtualMemory" -eq 1; then
-	patch_apply ntdll-NtQueryVirtualMemory/0003-ntdll-Implement-NtQueryVirtualMemory-MemorySectionNa.patch
-	patch_apply ntdll-NtQueryVirtualMemory/0004-ntdll-tests-Add-tests-for-NtQueryVirtualMemory-Memor.patch
-	patch_apply ntdll-NtQueryVirtualMemory/0005-ntdll-tests-Add-test-to-ensure-section-name-is-full-.patch
-	patch_apply ntdll-NtQueryVirtualMemory/0006-ntdll-Allow-to-query-section-names-from-other-proces.patch
-	patch_apply ntdll-NtQueryVirtualMemory/0007-kernel32-Implement-K32GetMappedFileName.-v2.patch
-	patch_apply ntdll-NtQueryVirtualMemory/0008-ntdll-Resolve-drive-symlinks-before-returning-sectio.patch
-	(
-		printf '%s\n' '+    { "Dmitry Timoshkov", "ntdll: Implement NtQueryVirtualMemory(MemorySectionName).", 3 },';
-		printf '%s\n' '+    { "Dmitry Timoshkov", "ntdll/tests: Add tests for NtQueryVirtualMemory(MemorySectionName).", 1 },';
-		printf '%s\n' '+    { "Sebastian Lackner", "ntdll/tests: Add test to ensure section name is full path.", 1 },';
-		printf '%s\n' '+    { "Sebastian Lackner", "ntdll: Allow to query section names from other processes.", 2 },';
-		printf '%s\n' '+    { "Dmitry Timoshkov", "kernel32: Implement K32GetMappedFileName.", 2 },';
-		printf '%s\n' '+    { "Sebastian Lackner", "ntdll: Resolve drive symlinks before returning section name.", 1 },';
-	) >> "$patchlist"
-fi
-
 # Patchset ntdll-NtSetLdtEntries
 # |
 # | Modified files:
diff --git a/patches/winebuild-Fake_Dlls/0003-winebuild-Generate-syscall-thunks-for-ntdll-exports.patch b/patches/winebuild-Fake_Dlls/0003-winebuild-Generate-syscall-thunks-for-ntdll-exports.patch
index 8203ef163..91188a829 100644
--- a/patches/winebuild-Fake_Dlls/0003-winebuild-Generate-syscall-thunks-for-ntdll-exports.patch
+++ b/patches/winebuild-Fake_Dlls/0003-winebuild-Generate-syscall-thunks-for-ntdll-exports.patch
@@ -18,7 +18,7 @@ Based on a patch by Erich E. Hoover.
  10 files changed, 208 insertions(+), 27 deletions(-)
 
 diff --git a/dlls/ntdll/signal_i386.c b/dlls/ntdll/signal_i386.c
-index 5fd54071ffd..950408cbc38 100644
+index eb6c87bce4d..d3cbfe63f1c 100644
 --- a/dlls/ntdll/signal_i386.c
 +++ b/dlls/ntdll/signal_i386.c
 @@ -449,6 +449,8 @@ static ULONG first_ldt_entry = 32;
@@ -30,15 +30,15 @@ index 5fd54071ffd..950408cbc38 100644
  enum i386_trap_code
  {
      TRAP_x86_UNKNOWN    = -1,  /* Unknown fault (TRAP_sig not defined) */
-@@ -1487,7 +1489,7 @@ NTSTATUS CDECL DECLSPEC_HIDDEN __regs_NtGetContextThread( DWORD edi, DWORD esi,
-         {
-             context->Ebp    = ebp;
-             context->Esp    = (DWORD)&retaddr;
--            context->Eip    = *(&edi - 1);
-+            context->Eip    = (DWORD)__syscall_NtGetContextThread + 18;
-             context->SegCs  = get_cs();
-             context->SegSs  = get_ds();
-             context->EFlags = eflags;
+@@ -1275,7 +1277,7 @@ NTSTATUS CDECL DECLSPEC_HIDDEN __regs_NtGetContextThread( DWORD edi, DWORD esi,
+     {
+         context->Ebp    = ebp;
+         context->Esp    = (DWORD)&retaddr;
+-        context->Eip    = *(&edi - 1);
++        context->Eip    = (DWORD)__syscall_NtGetContextThread + 18;
+         context->EFlags = eflags;
+     }
+     return unix_funcs->NtGetContextThread( handle, context );
 diff --git a/dlls/ntdll/tests/exception.c b/dlls/ntdll/tests/exception.c
 index a5e6faa461a..51938bf84cc 100644
 --- a/dlls/ntdll/tests/exception.c
@@ -53,7 +53,7 @@ index a5e6faa461a..51938bf84cc 100644
      ok( context.SegCs == LOWORD(expect.SegCs), "wrong SegCs %08x/%08x\n", context.SegCs, expect.SegCs );
      ok( context.SegDs == LOWORD(expect.SegDs), "wrong SegDs %08x/%08x\n", context.SegDs, expect.SegDs );
 diff --git a/dlls/ntdll/thread.c b/dlls/ntdll/thread.c
-index bb11521cf69..edd6c4dfa99 100644
+index f9ea9203ed8..7e435c4ccb3 100644
 --- a/dlls/ntdll/thread.c
 +++ b/dlls/ntdll/thread.c
 @@ -212,6 +212,8 @@ void map_user_shared_data(void)
@@ -65,15 +65,15 @@ index bb11521cf69..edd6c4dfa99 100644
  /***********************************************************************
   *           thread_init
   *
-@@ -248,6 +250,7 @@ TEB *thread_init(void)
+@@ -246,6 +248,7 @@ TEB *thread_init(void)
+ 
+     teb = unix_funcs->virtual_alloc_first_teb();
      unix_funcs->init_threading( &nb_threads, &__wine_ldt_copy );
-     unix_funcs->alloc_thread( teb );
-     unix_funcs->init_thread( teb );
 +    teb->WOW32Reserved = __wine_syscall_dispatcher;
  
      peb = teb->Peb;
      peb->FastPebLock        = &peb_lock;
-@@ -493,6 +496,7 @@ NTSTATUS WINAPI RtlCreateUserThread( HANDLE process, SECURITY_DESCRIPTOR *descr,
+@@ -491,6 +494,7 @@ NTSTATUS WINAPI RtlCreateUserThread( HANDLE process, SECURITY_DESCRIPTOR *descr,
      teb->Tib.StackBase = stack.StackBase;
      teb->Tib.StackLimit = stack.StackLimit;
      teb->DeallocationStack = stack.DeallocationStack;
diff --git a/patches/winebuild-Fake_Dlls/0005-winebuild-Add-stub-functions-in-fake-dlls.patch b/patches/winebuild-Fake_Dlls/0005-winebuild-Add-stub-functions-in-fake-dlls.patch
index edbed0e5e..883ca5ee7 100644
--- a/patches/winebuild-Fake_Dlls/0005-winebuild-Add-stub-functions-in-fake-dlls.patch
+++ b/patches/winebuild-Fake_Dlls/0005-winebuild-Add-stub-functions-in-fake-dlls.patch
@@ -61,7 +61,7 @@ index 926fa913866..902907329c0 100644
      CloseHandle(map);
      CloseHandle(file);
 diff --git a/dlls/ntdll/thread.c b/dlls/ntdll/thread.c
-index edd6c4dfa99..678af513264 100644
+index 7e435c4ccb3..5148445ce3a 100644
 --- a/dlls/ntdll/thread.c
 +++ b/dlls/ntdll/thread.c
 @@ -214,6 +214,39 @@ void map_user_shared_data(void)
@@ -104,15 +104,15 @@ index edd6c4dfa99..678af513264 100644
  /***********************************************************************
   *           thread_init
   *
-@@ -251,6 +284,7 @@ TEB *thread_init(void)
-     unix_funcs->alloc_thread( teb );
-     unix_funcs->init_thread( teb );
+@@ -249,6 +282,7 @@ TEB *thread_init(void)
+     teb = unix_funcs->virtual_alloc_first_teb();
+     unix_funcs->init_threading( &nb_threads, &__wine_ldt_copy );
      teb->WOW32Reserved = __wine_syscall_dispatcher;
 +    teb->Spare2 = (ULONG_PTR)__wine_fakedll_dispatcher;
  
      peb = teb->Peb;
      peb->FastPebLock        = &peb_lock;
-@@ -497,6 +531,7 @@ NTSTATUS WINAPI RtlCreateUserThread( HANDLE process, SECURITY_DESCRIPTOR *descr,
+@@ -495,6 +529,7 @@ NTSTATUS WINAPI RtlCreateUserThread( HANDLE process, SECURITY_DESCRIPTOR *descr,
      teb->Tib.StackLimit = stack.StackLimit;
      teb->DeallocationStack = stack.DeallocationStack;
      teb->WOW32Reserved = __wine_syscall_dispatcher;
diff --git a/patches/winebuild-Fake_Dlls/0010-tools-winebuild-Add-syscall-thunks-for-64-bit.patch b/patches/winebuild-Fake_Dlls/0010-tools-winebuild-Add-syscall-thunks-for-64-bit.patch
index eac187915..2d38ff3c4 100644
--- a/patches/winebuild-Fake_Dlls/0010-tools-winebuild-Add-syscall-thunks-for-64-bit.patch
+++ b/patches/winebuild-Fake_Dlls/0010-tools-winebuild-Add-syscall-thunks-for-64-bit.patch
@@ -40,7 +40,7 @@ index 95939ba6bde..ae5462f6e55 100644
              todo_wine ok(0, "%s: Export is a stub-function, skipping\n", func_name);
              continue;
 diff --git a/dlls/ntdll/thread.c b/dlls/ntdll/thread.c
-index 678af513264..297893d8898 100644
+index 5148445ce3a..c9a2240a4da 100644
 --- a/dlls/ntdll/thread.c
 +++ b/dlls/ntdll/thread.c
 @@ -54,6 +54,8 @@ WINE_DEFAULT_DEBUG_CHANNEL(thread);
@@ -77,7 +77,7 @@ index 678af513264..297893d8898 100644
 +
      /* allocate and initialize the PEB and initial TEB */
  
-     teb = virtual_alloc_first_teb();
+     teb = unix_funcs->virtual_alloc_first_teb();
 diff --git a/libs/wine/loader.c b/libs/wine/loader.c
 index 4597a6cb324..3d0d75e9c6d 100644
 --- a/libs/wine/loader.c
diff --git a/patches/ws2_32-WSACleanup/0002-ws2_32-Invalidate-client-side-file-descriptor-cache-.patch b/patches/ws2_32-WSACleanup/0002-ws2_32-Invalidate-client-side-file-descriptor-cache-.patch
index 8d92e3765..95c2d9b8d 100644
--- a/patches/ws2_32-WSACleanup/0002-ws2_32-Invalidate-client-side-file-descriptor-cache-.patch
+++ b/patches/ws2_32-WSACleanup/0002-ws2_32-Invalidate-client-side-file-descriptor-cache-.patch
@@ -48,10 +48,10 @@ index c7788b99e2d..54291d0a909 100644
  /***********************************************************************
   *           server_init_process
 diff --git a/dlls/ntdll/unix/loader.c b/dlls/ntdll/unix/loader.c
-index aa020845bb9..0ef08edc474 100644
+index 0f342e8277e..4c7a5c488dc 100644
 --- a/dlls/ntdll/unix/loader.c
 +++ b/dlls/ntdll/unix/loader.c
-@@ -1014,6 +1014,7 @@ static struct unix_funcs unix_funcs =
+@@ -1045,6 +1045,7 @@ static struct unix_funcs unix_funcs =
      server_wait,
      server_queue_process_apc,
      server_send_fd,
@@ -60,7 +60,7 @@ index aa020845bb9..0ef08edc474 100644
      server_fd_to_handle,
      server_handle_to_fd,
 diff --git a/dlls/ntdll/unix/server.c b/dlls/ntdll/unix/server.c
-index 8889c5d4b12..929ff354d65 100644
+index 17b23e58d28..f7d172cf324 100644
 --- a/dlls/ntdll/unix/server.c
 +++ b/dlls/ntdll/unix/server.c
 @@ -983,6 +983,26 @@ static int remove_fd_from_cache( HANDLE handle )
@@ -91,10 +91,10 @@ index 8889c5d4b12..929ff354d65 100644
  /***********************************************************************
   *           server_get_unix_fd
 diff --git a/dlls/ntdll/unix/unix_private.h b/dlls/ntdll/unix/unix_private.h
-index 0694426dddb..5c13dce0b0a 100644
+index 8562efb7dd4..ee2bd47ad70 100644
 --- a/dlls/ntdll/unix/unix_private.h
 +++ b/dlls/ntdll/unix/unix_private.h
-@@ -68,6 +68,7 @@ extern unsigned int CDECL server_wait( const select_op_t *select_op, data_size_t
+@@ -90,6 +90,7 @@ extern unsigned int CDECL server_wait( const select_op_t *select_op, data_size_t
                                         const LARGE_INTEGER *timeout ) DECLSPEC_HIDDEN;
  extern unsigned int CDECL server_queue_process_apc( HANDLE process, const apc_call_t *call, apc_result_t *result ) DECLSPEC_HIDDEN;
  extern void CDECL server_send_fd( int fd ) DECLSPEC_HIDDEN;
@@ -103,19 +103,19 @@ index 0694426dddb..5c13dce0b0a 100644
                                       int *needs_close, enum server_fd_type *type,
                                       unsigned int *options ) DECLSPEC_HIDDEN;
 diff --git a/dlls/ntdll/unixlib.h b/dlls/ntdll/unixlib.h
-index 323141d3840..0189c247b7a 100644
+index fb755373f07..7df35f0eee1 100644
 --- a/dlls/ntdll/unixlib.h
 +++ b/dlls/ntdll/unixlib.h
-@@ -27,7 +27,7 @@
- struct ldt_copy;
+@@ -28,7 +28,7 @@ struct ldt_copy;
+ struct msghdr;
  
  /* increment this when you change the function table */
--#define NTDLL_UNIXLIB_VERSION 13
-+#define NTDLL_UNIXLIB_VERSION 14
+-#define NTDLL_UNIXLIB_VERSION 16
++#define NTDLL_UNIXLIB_VERSION 17
  
  struct unix_funcs
  {
-@@ -80,6 +80,7 @@ struct unix_funcs
+@@ -127,6 +127,7 @@ struct unix_funcs
                                          const LARGE_INTEGER *timeout );
      unsigned int  (CDECL *server_queue_process_apc)( HANDLE process, const apc_call_t *call, apc_result_t *result );
      void          (CDECL *server_send_fd)( int fd );


diff --git a/patches/ntdll-Syscall_Emulation/0001-ntdll-Support-x86_64-syscall-emulation.patch b/patches/ntdll-Syscall_Emulation/0001-ntdll-Support-x86_64-syscall-emulation.patch
index f38451b08..c94ae38cc 100644
--- a/patches/ntdll-Syscall_Emulation/0001-ntdll-Support-x86_64-syscall-emulation.patch
+++ b/patches/ntdll-Syscall_Emulation/0001-ntdll-Support-x86_64-syscall-emulation.patch
@@ -52,7 +52,16 @@ index d42438f88af..36bc2ef656a 100644
  #define NONAMELESSUNION
  #define NONAMELESSSTRUCT
  #include "ntstatus.h"
-@@ -3089,6 +3097,104 @@ static void usr1_handler( int signal, siginfo_t *siginfo, void *ucontext )
+@@ -77,6 +85,8 @@
+ WINE_DEFAULT_DEBUG_CHANNEL(seh);
+ WINE_DECLARE_DEBUG_CHANNEL(relay);
+ 
++extern void DECLSPEC_NORETURN __wine_syscall_dispatcher( void );
++
+ typedef struct _SCOPE_TABLE
+ {
+     ULONG Count;
+@@ -3113,6 +3123,104 @@ static void usr1_handler( int signal, siginfo_t *siginfo, void *ucontext )
      restore_context( &context, ucontext );
  }
  
@@ -157,7 +166,7 @@ index d42438f88af..36bc2ef656a 100644
  
  /***********************************************************************
   *           __wine_set_signal_handler   (NTDLL.@)
-@@ -3134,6 +3240,9 @@ void signal_init_process(void)
+@@ -3158,6 +3266,9 @@ void signal_init_process(void)
      sig_act.sa_sigaction = trap_handler;
      if (sigaction( SIGTRAP, &sig_act, NULL ) == -1) goto error;
  #endif
diff --git a/patches/ntdll-WRITECOPY/0006-ntdll-Support-WRITECOPY-on-x64.patch b/patches/ntdll-WRITECOPY/0006-ntdll-Support-WRITECOPY-on-x64.patch
index b22edcfd7..183324746 100644
--- a/patches/ntdll-WRITECOPY/0006-ntdll-Support-WRITECOPY-on-x64.patch
+++ b/patches/ntdll-WRITECOPY/0006-ntdll-Support-WRITECOPY-on-x64.patch
@@ -35,7 +35,7 @@ index 29829bfb1c6..89a8e36410d 100644
 +        /* fall-through */
 +    default:
 +        WINE_ERR( "Got unexpected trap %lld during process initialization\n", TRAP_sig(ucontext) );
-+        abort_thread(1);
++        unix_funcs->abort_thread(1);
 +        break;
 +    }
 +}

diff --git a/patches/ntdll-ApiSetMap/0001-ntdll-Add-dummy-apiset-to-PEB.patch b/patches/ntdll-ApiSetMap/0001-ntdll-Add-dummy-apiset-to-PEB.patch
index b4a9bca1f..3987c7cdf 100644
--- a/patches/ntdll-ApiSetMap/0001-ntdll-Add-dummy-apiset-to-PEB.patch
+++ b/patches/ntdll-ApiSetMap/0001-ntdll-Add-dummy-apiset-to-PEB.patch
@@ -12,19 +12,19 @@ Subject: [PATCH] ntdll: Add dummy apiset to PEB.
  create mode 100644 include/apiset.h
 
 diff --git a/dlls/ntdll/thread.c b/dlls/ntdll/thread.c
-index ca8b5e2bf8a..565dea14b39 100644
+index 21e8b0c08f8..24254d4b43c 100644
 --- a/dlls/ntdll/thread.c
 +++ b/dlls/ntdll/thread.c
-@@ -75,6 +75,7 @@ static PEB_LDR_DATA ldr;
+@@ -71,6 +71,7 @@ static PEB_LDR_DATA ldr;
  static RTL_BITMAP tls_bitmap;
  static RTL_BITMAP tls_expansion_bitmap;
  static RTL_BITMAP fls_bitmap;
 +static API_SET_NAMESPACE_ARRAY apiset_map;
  static int nb_threads = 1;
  
- static RTL_CRITICAL_SECTION peb_lock;
+ struct ldt_copy *__wine_ldt_copy = NULL;
 @@ -300,6 +301,7 @@ TEB *thread_init(void)
-     teb = virtual_alloc_first_teb();
+ 
      peb = teb->Peb;
      peb->FastPebLock        = &peb_lock;
 +    peb->ApiSetMap          = &apiset_map;

diff --git a/patches/ntdll-Fix_Alignment/0001-ntdll-Move-NtProtectVirtualMemory-and-NtCreateSectio.patch b/patches/ntdll-Fix_Alignment/0001-ntdll-Move-NtProtectVirtualMemory-and-NtCreateSectio.patch
index aa940f9de..270c82fdd 100644
--- a/patches/ntdll-Fix_Alignment/0001-ntdll-Move-NtProtectVirtualMemory-and-NtCreateSectio.patch
+++ b/patches/ntdll-Fix_Alignment/0001-ntdll-Move-NtProtectVirtualMemory-and-NtCreateSectio.patch
@@ -1,20 +1,20 @@
-From 89a4ee827b74d8e4d63ca3e1354d89d75cc0fc19 Mon Sep 17 00:00:00 2001
+From 554f37a5ee79939ba9368e9bd7ea408860a32803 Mon Sep 17 00:00:00 2001
 From: =?UTF-8?q?Michael=20M=C3=BCller?= <michael@fds-team.de>
 Date: Wed, 20 Aug 2014 19:21:18 +0200
-Subject: ntdll: Move NtProtectVirtualMemory and NtCreateSection to separate
- pages on x86. (try 2)
+Subject: [PATCH] ntdll: Move NtProtectVirtualMemory and NtCreateSection to
+ separate pages on x86. (try 2)
 
 ---
  dlls/ntdll/virtual.c | 8 ++++++++
  1 file changed, 8 insertions(+)
 
 diff --git a/dlls/ntdll/virtual.c b/dlls/ntdll/virtual.c
-index ce2469829b0..eb2dbe8a2cd 100644
+index cfe30bbe710..6173846cfb4 100644
 --- a/dlls/ntdll/virtual.c
 +++ b/dlls/ntdll/virtual.c
-@@ -168,6 +168,14 @@ static void *preload_reserve_end;
- static BOOL use_locks;
- static BOOL force_exec_prot;  /* whether to force PROT_EXEC on all PROT_READ mmaps */
+@@ -366,6 +366,14 @@ static void free_ranges_remove_view( struct file_view *view )
+ }
+ 
  
 +#if defined(__i386__)
 +NTSTATUS WINAPI NtProtectVirtualMemory( HANDLE process, PVOID *addr_ptr, SIZE_T *size_ptr,
 
diff --git a/patches/ntdll-NtQueryVirtualMemory/0008-ntdll-Resolve-drive-symlinks-before-returning-sectio.patch b/patches/ntdll-NtQueryVirtualMemory/0008-ntdll-Resolve-drive-symlinks-before-returning-sectio.patch
index 28506cf85..b125f578e 100644
--- a/patches/ntdll-NtQueryVirtualMemory/0008-ntdll-Resolve-drive-symlinks-before-returning-sectio.patch
+++ b/patches/ntdll-NtQueryVirtualMemory/0008-ntdll-Resolve-drive-symlinks-before-returning-sectio.patch
@@ -24,9 +24,9 @@ index eb7f3bc3718..0412824c811 100644
 --- a/dlls/ntdll/ntdll_misc.h
 +++ b/dlls/ntdll/ntdll_misc.h
 @@ -182,6 +182,7 @@ extern NTSTATUS nt_to_unix_file_name_attr( const OBJECT_ATTRIBUTES *attr, ANSI_S
+                                            UINT disposition ) DECLSPEC_HIDDEN;
+ 
  /* virtual memory */
- extern NTSTATUS virtual_alloc( PVOID *ret, unsigned short zero_bits_64, SIZE_T *size_ptr,
-                                ULONG type, ULONG protect ) DECLSPEC_HIDDEN;
 +extern NTSTATUS read_nt_symlink( HANDLE root, UNICODE_STRING *name, WCHAR *target, size_t length ) DECLSPEC_HIDDEN;
  extern NTSTATUS virtual_map_section( HANDLE handle, PVOID *addr_ptr, unsigned short zero_bits_64, SIZE_T commit_size,
                                       const LARGE_INTEGER *offset_ptr, SIZE_T *size_ptr, ULONG alloc_type,

diff --git a/patches/ntdll-NtSetLdtEntries/0001-ntdll-Implement-NtSetLdtEntries.patch b/patches/ntdll-NtSetLdtEntries/0001-ntdll-Implement-NtSetLdtEntries.patch
index 611b5ea6d..8b4edd8cf 100644
--- a/patches/ntdll-NtSetLdtEntries/0001-ntdll-Implement-NtSetLdtEntries.patch
+++ b/patches/ntdll-NtSetLdtEntries/0001-ntdll-Implement-NtSetLdtEntries.patch
@@ -119,11 +119,11 @@ index 2dd274e0c10..ae67a9aa0a0 100644
  #endif
     test_QueueUserWorkItem();
     test_RegisterWaitForSingleObject();
-diff --git a/dlls/ntdll/signal_i386.c b/dlls/ntdll/signal_i386.c
-index 441ef579609..eb28d668279 100644
---- a/dlls/ntdll/signal_i386.c
-+++ b/dlls/ntdll/signal_i386.c
-@@ -2533,7 +2533,7 @@ NTSTATUS get_thread_ldt_entry( HANDLE handle, void *data, ULONG len, ULONG *ret_
+diff --git a/dlls/ntdll/unix/signal_i386.c b/dlls/ntdll/unix/signal_i386.c
+index 320ffa68407..a52490a096b 100644
+--- a/dlls/ntdll/unix/signal_i386.c
++++ b/dlls/ntdll/unix/signal_i386.c
+@@ -480,7 +480,7 @@ NTSTATUS CDECL get_thread_ldt_entry( HANDLE handle, void *data, ULONG len, ULONG
                  if (reply->flags)
                      info->Entry = ldt_make_entry( (void *)reply->base, reply->limit, reply->flags );
                  else
diff --git a/patches/ntdll-NtSetLdtEntries/0002-libs-wine-Allow-to-modify-reserved-LDT-entries.patch b/patches/ntdll-NtSetLdtEntries/0002-libs-wine-Allow-to-modify-reserved-LDT-entries.patch
index 9a4adcb02..1b87d3de8 100644
--- a/patches/ntdll-NtSetLdtEntries/0002-libs-wine-Allow-to-modify-reserved-LDT-entries.patch
+++ b/patches/ntdll-NtSetLdtEntries/0002-libs-wine-Allow-to-modify-reserved-LDT-entries.patch
@@ -42,11 +42,11 @@ index ae67a9aa0a0..6149be8cf4a 100644
          ok(!memcmp(&ds_entry, &sel.entry, sizeof(ds_entry)), "entries do not match\n");
      }
  }
-diff --git a/dlls/ntdll/signal_i386.c b/dlls/ntdll/signal_i386.c
-index 98ce76c8e27..e31c3d6b0b8 100644
---- a/dlls/ntdll/signal_i386.c
-+++ b/dlls/ntdll/signal_i386.c
-@@ -2534,8 +2534,6 @@ NTSTATUS WINAPI NtSetLdtEntries( ULONG sel1, LDT_ENTRY entry1, ULONG sel2, LDT_E
+diff --git a/dlls/ntdll/unix/signal_i386.c b/dlls/ntdll/unix/signal_i386.c
+index a52490a096b..7b04be577ab 100644
+--- a/dlls/ntdll/unix/signal_i386.c
++++ b/dlls/ntdll/unix/signal_i386.c
+@@ -502,8 +502,6 @@ NTSTATUS WINAPI NtSetLdtEntries( ULONG sel1, LDT_ENTRY entry1, ULONG sel2, LDT_E
      sigset_t sigset;
  
      if (sel1 >> 16 || sel2 >> 16) return STATUS_INVALID_LDT_DESCRIPTOR;
diff --git a/patches/ntdll-Syscall_Emulation/0001-ntdll-Support-x86_64-syscall-emulation.patch b/patches/ntdll-Syscall_Emulation/0001-ntdll-Support-x86_64-syscall-emulation.patch
index dbb40f85a..f38451b08 100644
--- a/patches/ntdll-Syscall_Emulation/0001-ntdll-Support-x86_64-syscall-emulation.patch
+++ b/patches/ntdll-Syscall_Emulation/0001-ntdll-Support-x86_64-syscall-emulation.patch
@@ -52,7 +52,7 @@ index 26d688c3abe..87c5a99a65e 100644
  #define NONAMELESSUNION
  #define NONAMELESSSTRUCT
  #include "ntstatus.h"
-@@ -3096,6 +3104,38 @@ static void usr1_handler( int signal, siginfo_t *siginfo, void *ucontext )
+@@ -3089,6 +3097,104 @@ static void usr1_handler( int signal, siginfo_t *siginfo, void *ucontext )
      restore_context( &context, ucontext );
  }
  
@@ -88,13 +88,7 @@ index 26d688c3abe..87c5a99a65e 100644
 +    ctx->uc_mcontext.gregs[REG_RIP] = (ULONG64)__wine_syscall_dispatcher;
 +}
 +#endif
- 
- /***********************************************************************
-  *           __wine_set_signal_handler   (NTDLL.@)
-@@ -3266,6 +3306,72 @@ void signal_init_thread( TEB *teb )
- #endif
- }
- 
++
 +#ifdef HAVE_SECCOMP
 +static int sc_seccomp(unsigned int operation, unsigned int flags, void *args)
 +{
@@ -160,11 +154,10 @@ index 26d688c3abe..87c5a99a65e 100644
 +    WARN("Built without seccomp.\n");
 +#endif
 +}
-+
- /**********************************************************************
-  *		signal_init_process
-  */
-@@ -3298,6 +3404,9 @@ void signal_init_process(void)
+ 
+ /***********************************************************************
+  *           __wine_set_signal_handler   (NTDLL.@)
+@@ -3134,6 +3240,9 @@ void signal_init_process(void)
      sig_act.sa_sigaction = trap_handler;
      if (sigaction( SIGTRAP, &sig_act, NULL ) == -1) goto error;
  #endif
 
diff --git a/patches/ntdll-ThreadTime/0006-ntdll-Fill-process-virtual-memory-counters-in-NtQuer.patch b/patches/ntdll-ThreadTime/0006-ntdll-Fill-process-virtual-memory-counters-in-NtQuer.patch
index f74a81b37..4656891e3 100644
--- a/patches/ntdll-ThreadTime/0006-ntdll-Fill-process-virtual-memory-counters-in-NtQuer.patch
+++ b/patches/ntdll-ThreadTime/0006-ntdll-Fill-process-virtual-memory-counters-in-NtQuer.patch
@@ -13,10 +13,10 @@ FIXME: fill_VM_COUNTERS now uses a different method ... which one is better?
  4 files changed, 41 insertions(+), 1 deletion(-)
 
 diff --git a/dlls/ntdll/nt.c b/dlls/ntdll/nt.c
-index a21a8bcceee..608525347ca 100644
+index 7c2945f0a73..abb2d2176d6 100644
 --- a/dlls/ntdll/nt.c
 +++ b/dlls/ntdll/nt.c
-@@ -2703,8 +2703,11 @@ NTSTATUS WINAPI NtQuerySystemInformation(
+@@ -2686,8 +2686,11 @@ NTSTATUS WINAPI NtQuerySystemInformation(
                              /* spi->ti will be set later on */
  
                              if (reply->unix_pid != -1)
@@ -29,10 +29,10 @@ index a21a8bcceee..608525347ca 100644
                          }
                          len += procstructlen;
 diff --git a/dlls/ntdll/ntdll_misc.h b/dlls/ntdll/ntdll_misc.h
-index b4e3c7d5c83..15f72631f55 100644
+index e85f3a3b900..b45b9a02bb1 100644
 --- a/dlls/ntdll/ntdll_misc.h
 +++ b/dlls/ntdll/ntdll_misc.h
-@@ -297,6 +297,7 @@ void     WINAPI LdrInitializeThunk(CONTEXT*,void**,ULONG_PTR,ULONG_PTR);
+@@ -285,6 +285,7 @@ void     WINAPI LdrInitializeThunk(CONTEXT*,void**,ULONG_PTR,ULONG_PTR);
  /* process / thread time */
  extern BOOL read_process_time(int unix_pid, int unix_tid, unsigned long clk_tck,
                                LARGE_INTEGER *kernel, LARGE_INTEGER *user) DECLSPEC_HIDDEN;
@@ -41,10 +41,10 @@ index b4e3c7d5c83..15f72631f55 100644
  /* string functions */
  int    __cdecl NTDLL_tolower( int c );
 diff --git a/dlls/ntdll/process.c b/dlls/ntdll/process.c
-index e59c255e327..71233f92853 100644
+index c066610ebca..f2dddb18052 100644
 --- a/dlls/ntdll/process.c
 +++ b/dlls/ntdll/process.c
-@@ -186,7 +186,7 @@ static void fill_VM_COUNTERS(VM_COUNTERS* pvmi)
+@@ -192,7 +192,7 @@ static void fill_VM_COUNTERS(VM_COUNTERS* pvmi)
  
  static void fill_VM_COUNTERS(VM_COUNTERS* pvmi)
  {
@@ -54,11 +54,11 @@ index e59c255e327..71233f92853 100644
  
  #endif
 diff --git a/dlls/ntdll/thread.c b/dlls/ntdll/thread.c
-index a2a999f8996..f5f932ae703 100644
+index b7d4e399f62..21e8b0c08f8 100644
 --- a/dlls/ntdll/thread.c
 +++ b/dlls/ntdll/thread.c
-@@ -366,6 +366,42 @@ TEB *thread_init(void)
-     return teb;
+@@ -385,6 +385,42 @@ void WINAPI RtlExitUserThread( ULONG status )
+     for (;;) unix_funcs->exit_thread( status );
  }
  
 +BOOL read_process_memory_stats(int unix_pid, VM_COUNTERS *pvmi)
@@ -99,7 +99,7 @@ index a2a999f8996..f5f932ae703 100644
 +}
  
  /***********************************************************************
-  *           abort_thread
+  *           start_thread
 -- 
 2.26.2
 
diff --git a/patches/ntdll-Threading/0001-ntdll-Fix-race-condition-when-threads-are-killed-dur.patch b/patches/ntdll-Threading/0001-ntdll-Fix-race-condition-when-threads-are-killed-dur.patch
index e463ba9e7..9f370c21d 100644
--- a/patches/ntdll-Threading/0001-ntdll-Fix-race-condition-when-threads-are-killed-dur.patch
+++ b/patches/ntdll-Threading/0001-ntdll-Fix-race-condition-when-threads-are-killed-dur.patch
@@ -1,4 +1,4 @@
-From f8e12f51bebca8cda3be339bcc216ca8cc60a718 Mon Sep 17 00:00:00 2001
+From 5f34c6a4429025ee71616e677e0e59342bee17b0 Mon Sep 17 00:00:00 2001
 From: Sebastian Lackner <sebastian@fds-team.de>
 Date: Wed, 25 Feb 2015 22:45:42 +0100
 Subject: [PATCH] ntdll: Fix race-condition when threads are killed during
@@ -19,10 +19,10 @@ fix the most critical one (messed up refcounting of threads) for now.
  1 file changed, 7 insertions(+), 1 deletion(-)
 
 diff --git a/dlls/ntdll/thread.c b/dlls/ntdll/thread.c
-index b25f87e437..5fbd9e06c3 100644
+index bb11521cf69..fee26ccd21d 100644
 --- a/dlls/ntdll/thread.c
 +++ b/dlls/ntdll/thread.c
-@@ -336,6 +336,7 @@ void exit_thread( int status )
+@@ -298,6 +298,7 @@ TEB *thread_init(void)
  void WINAPI RtlExitUserThread( ULONG status )
  {
      static void *prev_teb;
@@ -30,7 +30,7 @@ index b25f87e437..5fbd9e06c3 100644
      TEB *teb;
  
      if (status)  /* send the exit code to the server (0 is already the default) */
-@@ -349,7 +350,7 @@ void WINAPI RtlExitUserThread( ULONG status )
+@@ -311,7 +312,7 @@ void WINAPI RtlExitUserThread( ULONG status )
          SERVER_END_REQ;
      }
  
@@ -38,8 +38,8 @@ index b25f87e437..5fbd9e06c3 100644
 +    if (InterlockedCompareExchange( &nb_threads, 0, 0 ) <= 0)
      {
          LdrShutdownProcess();
-         pthread_sigmask( SIG_BLOCK, &server_block_set, NULL );
-@@ -372,6 +373,11 @@ void WINAPI RtlExitUserThread( ULONG status )
+         unix_funcs->exit_process( status );
+@@ -333,6 +334,11 @@ void WINAPI RtlExitUserThread( ULONG status )
          }
      }
  
@@ -48,7 +48,7 @@ index b25f87e437..5fbd9e06c3 100644
 +    pthread_sigmask( SIG_BLOCK, &sigset, NULL );
 +    if (!InterlockedDecrement( &nb_threads )) _exit( status );
 +
-     signal_exit_thread( status );
+     for (;;) unix_funcs->exit_thread( status );
  }
  
 -- 
diff --git a/patches/ntdll-WRITECOPY/0003-ntdll-Setup-a-temporary-signal-handler-during-proces.patch b/patches/ntdll-WRITECOPY/0003-ntdll-Setup-a-temporary-signal-handler-during-proces.patch
index 27278da60..c5f334858 100644
--- a/patches/ntdll-WRITECOPY/0003-ntdll-Setup-a-temporary-signal-handler-during-proces.patch
+++ b/patches/ntdll-WRITECOPY/0003-ntdll-Setup-a-temporary-signal-handler-during-proces.patch
@@ -15,22 +15,22 @@ Subject: [PATCH] ntdll: Setup a temporary signal handler during process
  7 files changed, 79 insertions(+)
 
 diff --git a/dlls/ntdll/ntdll_misc.h b/dlls/ntdll/ntdll_misc.h
-index 58b688d06bd..f3ebfb72d32 100644
+index 427cdaad441..562f5ec8d4c 100644
 --- a/dlls/ntdll/ntdll_misc.h
 +++ b/dlls/ntdll/ntdll_misc.h
-@@ -84,6 +84,7 @@ extern NTSTATUS signal_alloc_thread( TEB *teb ) DECLSPEC_HIDDEN;
- extern void signal_free_thread( TEB *teb ) DECLSPEC_HIDDEN;
- extern void signal_init_thread( TEB *teb ) DECLSPEC_HIDDEN;
+@@ -80,6 +80,7 @@ extern LPCSTR debugstr_ObjectAttributes(const OBJECT_ATTRIBUTES *oa) DECLSPEC_HI
+ extern SIZE_T signal_stack_size DECLSPEC_HIDDEN;
+ extern SIZE_T signal_stack_mask DECLSPEC_HIDDEN;
  extern void signal_init_process(void) DECLSPEC_HIDDEN;
 +extern void signal_init_early(void) DECLSPEC_HIDDEN;
  extern void signal_start_thread( LPTHREAD_START_ROUTINE entry, void *arg, BOOL suspend ) DECLSPEC_HIDDEN;
  extern void signal_start_process( LPTHREAD_START_ROUTINE entry, BOOL suspend ) DECLSPEC_HIDDEN;
- extern void DECLSPEC_NORETURN signal_exit_thread( int status ) DECLSPEC_HIDDEN;
+ extern void version_init(void) DECLSPEC_HIDDEN;
 diff --git a/dlls/ntdll/signal_arm.c b/dlls/ntdll/signal_arm.c
-index 31280edce47..f903eb93434 100644
+index e66cf922f91..dcfdeaa83ad 100644
 --- a/dlls/ntdll/signal_arm.c
 +++ b/dlls/ntdll/signal_arm.c
-@@ -1031,6 +1031,12 @@ void signal_init_process(void)
+@@ -988,6 +988,12 @@ void signal_init_process(void)
      exit(1);
  }
  
@@ -44,11 +44,11 @@ index 31280edce47..f903eb93434 100644
  /***********************************************************************
   *            RtlUnwind  (NTDLL.@)
 diff --git a/dlls/ntdll/signal_arm64.c b/dlls/ntdll/signal_arm64.c
-index 9f84d3fbfd1..8ab83a1d142 100644
+index c87f99f0c4c..fed76574dbc 100644
 --- a/dlls/ntdll/signal_arm64.c
 +++ b/dlls/ntdll/signal_arm64.c
-@@ -1293,6 +1293,12 @@ void signal_init_thread( TEB *teb )
-     pthread_setspecific( teb_key, teb );
+@@ -1303,6 +1303,12 @@ int CDECL __wine_set_signal_handler(unsigned int sig, wine_signal_handler wsh)
+     return 0;
  }
  
 +/**********************************************************************
@@ -88,7 +88,7 @@ index 238d4eacf63..32c6eba0e51 100644
 +        /* fall-through */
 +    default:
 +        WINE_ERR( "Got unexpected trap %d during process initialization\n", get_trap_code(context) );
-+        abort_thread(1);
++        unix_funcs->abort_thread(1);
 +        break;
 +    }
 +}
@@ -132,11 +132,11 @@ index 238d4eacf63..32c6eba0e51 100644
  /*******************************************************************
   *		RtlUnwind (NTDLL.@)
 diff --git a/dlls/ntdll/signal_powerpc.c b/dlls/ntdll/signal_powerpc.c
-index 9df6eff31f4..e79fca3abce 100644
+index a23f6b6e4d5..c3b4b6ffd42 100644
 --- a/dlls/ntdll/signal_powerpc.c
 +++ b/dlls/ntdll/signal_powerpc.c
-@@ -1047,6 +1047,12 @@ void signal_init_thread( TEB *teb )
-     pthread_setspecific( teb_key, teb );
+@@ -1009,6 +1009,12 @@ int CDECL __wine_set_signal_handler(unsigned int sig, wine_signal_handler wsh)
+     return 0;
  }
  
 +/**********************************************************************

diff --git a/patches/winebuild-Fake_Dlls/0003-winebuild-Generate-syscall-thunks-for-ntdll-exports.patch b/patches/winebuild-Fake_Dlls/0003-winebuild-Generate-syscall-thunks-for-ntdll-exports.patch
index b7d57bffe..8203ef163 100644
--- a/patches/winebuild-Fake_Dlls/0003-winebuild-Generate-syscall-thunks-for-ntdll-exports.patch
+++ b/patches/winebuild-Fake_Dlls/0003-winebuild-Generate-syscall-thunks-for-ntdll-exports.patch
@@ -14,23 +15,22 @@ Based on a patch by Erich E. Hoover.
  tools/winebuild/spec16.c     |  22 +-------
  tools/winebuild/spec32.c     | 104 +++++++++++++++++++++++++++++++++++
  tools/winebuild/utils.c      |  21 +++++++
- 9 files changed, 207 insertions(+), 27 deletions(-)
+ 10 files changed, 208 insertions(+), 27 deletions(-)
 
 diff --git a/dlls/ntdll/signal_i386.c b/dlls/ntdll/signal_i386.c
-index 5353ab4df2ce..527ba01672e1 100644
+index 5fd54071ffd..950408cbc38 100644
 --- a/dlls/ntdll/signal_i386.c
 +++ b/dlls/ntdll/signal_i386.c
-@@ -476,6 +476,9 @@ static ULONG first_ldt_entry = 32;
+@@ -449,6 +449,8 @@ static ULONG first_ldt_entry = 32;
  
  static wine_signal_handler handlers[256];
  
-+extern void DECLSPEC_NORETURN __wine_syscall_dispatcher( void );
 +extern NTSTATUS WINAPI __syscall_NtGetContextThread( HANDLE handle, CONTEXT *context );
 +
  enum i386_trap_code
  {
      TRAP_x86_UNKNOWN    = -1,  /* Unknown fault (TRAP_sig not defined) */
-@@ -1514,7 +1517,7 @@ NTSTATUS CDECL DECLSPEC_HIDDEN __regs_NtGetContextThread( DWORD edi, DWORD esi,
+@@ -1487,7 +1489,7 @@ NTSTATUS CDECL DECLSPEC_HIDDEN __regs_NtGetContextThread( DWORD edi, DWORD esi,
          {
              context->Ebp    = ebp;
              context->Esp    = (DWORD)&retaddr;
@@ -39,17 +39,8 @@ index 5353ab4df2ce..527ba01672e1 100644
              context->SegCs  = get_cs();
              context->SegSs  = get_ds();
              context->EFlags = eflags;
-@@ -2561,6 +2564,8 @@ NTSTATUS signal_alloc_thread( TEB *teb )
-     }
-     else thread_data->fs = gdt_fs_sel;
- 
-+    teb->WOW32Reserved = __wine_syscall_dispatcher;
-+
-     return STATUS_SUCCESS;
- }
- 
 diff --git a/dlls/ntdll/tests/exception.c b/dlls/ntdll/tests/exception.c
-index a5e6faa461a3..51938bf84cc1 100644
+index a5e6faa461a..51938bf84cc 100644
 --- a/dlls/ntdll/tests/exception.c
 +++ b/dlls/ntdll/tests/exception.c
 @@ -1643,6 +1643,8 @@ static void test_thread_context(void)
@@ -61,8 +52,37 @@ index a5e6faa461a3..51938bf84cc1 100644
      /* segment registers clear the high word */
      ok( context.SegCs == LOWORD(expect.SegCs), "wrong SegCs %08x/%08x\n", context.SegCs, expect.SegCs );
      ok( context.SegDs == LOWORD(expect.SegDs), "wrong SegDs %08x/%08x\n", context.SegDs, expect.SegDs );
+diff --git a/dlls/ntdll/thread.c b/dlls/ntdll/thread.c
+index bb11521cf69..edd6c4dfa99 100644
+--- a/dlls/ntdll/thread.c
++++ b/dlls/ntdll/thread.c
+@@ -212,6 +212,8 @@ void map_user_shared_data(void)
+     NtClose( section );
+ }
+ 
++extern void DECLSPEC_NORETURN __wine_syscall_dispatcher( void );
++
+ /***********************************************************************
+  *           thread_init
+  *
+@@ -248,6 +250,7 @@ TEB *thread_init(void)
+     unix_funcs->init_threading( &nb_threads, &__wine_ldt_copy );
+     unix_funcs->alloc_thread( teb );
+     unix_funcs->init_thread( teb );
++    teb->WOW32Reserved = __wine_syscall_dispatcher;
+ 
+     peb = teb->Peb;
+     peb->FastPebLock        = &peb_lock;
+@@ -493,6 +496,7 @@ NTSTATUS WINAPI RtlCreateUserThread( HANDLE process, SECURITY_DESCRIPTOR *descr,
+     teb->Tib.StackBase = stack.StackBase;
+     teb->Tib.StackLimit = stack.StackLimit;
+     teb->DeallocationStack = stack.DeallocationStack;
++    teb->WOW32Reserved = __wine_syscall_dispatcher;
+ 
+     thread_data = (struct ntdll_thread_data *)&teb->GdiTebBatch;
+     thread_data->request_fd  = request_pipe[1];
 diff --git a/include/winternl.h b/include/winternl.h
-index 0f808d71dd33..d641ed1436ad 100644
+index 44a58cadc7a..065f3d24f52 100644
 --- a/include/winternl.h
 +++ b/include/winternl.h
 @@ -359,7 +359,7 @@ typedef struct _TEB

diff --git a/patches/winebuild-Fake_Dlls/0005-winebuild-Add-stub-functions-in-fake-dlls.patch b/patches/winebuild-Fake_Dlls/0005-winebuild-Add-stub-functions-in-fake-dlls.patch
index 1575836a6..edbed0e5e 100644
--- a/patches/winebuild-Fake_Dlls/0005-winebuild-Add-stub-functions-in-fake-dlls.patch
+++ b/patches/winebuild-Fake_Dlls/0005-winebuild-Add-stub-functions-in-fake-dlls.patch
@@ -60,15 +60,15 @@ index 4e7a15970cb..ec173c94a8e 100644
      UnmapViewOfFile(ptr);
      CloseHandle(map);
      CloseHandle(file);
-diff --git a/dlls/ntdll/signal_i386.c b/dlls/ntdll/signal_i386.c
-index 04fdaf564b3..1dcc54895dc 100644
---- a/dlls/ntdll/signal_i386.c
-+++ b/dlls/ntdll/signal_i386.c
-@@ -479,6 +479,39 @@ static wine_signal_handler handlers[256];
+diff --git a/dlls/ntdll/thread.c b/dlls/ntdll/thread.c
+index edd6c4dfa99..678af513264 100644
+--- a/dlls/ntdll/thread.c
++++ b/dlls/ntdll/thread.c
+@@ -214,6 +214,39 @@ void map_user_shared_data(void)
+ 
  extern void DECLSPEC_NORETURN __wine_syscall_dispatcher( void );
- extern NTSTATUS WINAPI __syscall_NtGetContextThread( HANDLE handle, CONTEXT *context );
  
-+static void* WINAPI __wine_fakedll_dispatcher( const char *module, ULONG ord )
++static void *WINAPI __wine_fakedll_dispatcher( const char *module, ULONG ord )
 +{
 +    UNICODE_STRING name;
 +    NTSTATUS status;
@@ -101,19 +101,27 @@ index 04fdaf564b3..1dcc54895dc 100644
 +    return proc;
 +}
 +
- enum i386_trap_code
- {
-     TRAP_x86_UNKNOWN    = -1,  /* Unknown fault (TRAP_sig not defined) */
-@@ -2565,6 +2598,7 @@ NTSTATUS signal_alloc_thread( TEB *teb )
-     else thread_data->fs = gdt_fs_sel;
+ /***********************************************************************
+  *           thread_init
+  *
+@@ -251,6 +284,7 @@ TEB *thread_init(void)
+     unix_funcs->alloc_thread( teb );
+     unix_funcs->init_thread( teb );
+     teb->WOW32Reserved = __wine_syscall_dispatcher;
++    teb->Spare2 = (ULONG_PTR)__wine_fakedll_dispatcher;
  
+     peb = teb->Peb;
+     peb->FastPebLock        = &peb_lock;
+@@ -497,6 +531,7 @@ NTSTATUS WINAPI RtlCreateUserThread( HANDLE process, SECURITY_DESCRIPTOR *descr,
+     teb->Tib.StackLimit = stack.StackLimit;
+     teb->DeallocationStack = stack.DeallocationStack;
      teb->WOW32Reserved = __wine_syscall_dispatcher;
-+    teb->Spare2 = __wine_fakedll_dispatcher;
++    teb->Spare2 = (ULONG_PTR)__wine_fakedll_dispatcher;
  
-     return STATUS_SUCCESS;
- }
+     thread_data = (struct ntdll_thread_data *)&teb->GdiTebBatch;
+     thread_data->request_fd  = request_pipe[1];
 diff --git a/include/winternl.h b/include/winternl.h
-index 26ee5b601fb..03f86dae253 100644
+index 065f3d24f52..199b8fc52f2 100644
 --- a/include/winternl.h
 +++ b/include/winternl.h
 @@ -398,7 +398,7 @@ typedef struct _TEB

diff --git a/patches/winebuild-Fake_Dlls/0010-tools-winebuild-Add-syscall-thunks-for-64-bit.patch b/patches/winebuild-Fake_Dlls/0010-tools-winebuild-Add-syscall-thunks-for-64-bit.patch
index 6ea842a8f..eac187915 100644
--- a/patches/winebuild-Fake_Dlls/0010-tools-winebuild-Add-syscall-thunks-for-64-bit.patch
+++ b/patches/winebuild-Fake_Dlls/0010-tools-winebuild-Add-syscall-thunks-for-64-bit.patch
@@ -40,31 +39,11 @@ index 1f525194ce7..21af7b4ce7a 100644
          {
              todo_wine ok(0, "%s: Export is a stub-function, skipping\n", func_name);
              continue;
-diff --git a/dlls/ntdll/signal_x86_64.c b/dlls/ntdll/signal_x86_64.c
-index 5defcd6a7af..c2936045c5d 100644
---- a/dlls/ntdll/signal_x86_64.c
-+++ b/dlls/ntdll/signal_x86_64.c
-@@ -354,6 +354,7 @@ static inline void set_sigcontext( const CONTEXT *context, ucontext_t *sigcontex
- #endif
- }
- 
-+extern void DECLSPEC_NORETURN __wine_syscall_dispatcher( void );
- 
- /***********************************************************************
-  * Definitions for Win32 unwind tables
-@@ -3142,6 +3143,7 @@ void signal_init_threading(void)
-  */
- NTSTATUS signal_alloc_thread( TEB *teb )
- {
-+    teb->WOW32Reserved = __wine_syscall_dispatcher;
-     return STATUS_SUCCESS;
- }
- 
 diff --git a/dlls/ntdll/thread.c b/dlls/ntdll/thread.c
-index e5ff24f34f1..ddaf41637d0 100644
+index 678af513264..297893d8898 100644
 --- a/dlls/ntdll/thread.c
 +++ b/dlls/ntdll/thread.c
-@@ -56,6 +56,8 @@ WINE_DEFAULT_DEBUG_CHANNEL(thread);
+@@ -54,6 +54,8 @@ WINE_DEFAULT_DEBUG_CHANNEL(thread);
  
  struct _KUSER_SHARED_DATA *user_shared_data = NULL;
  
  
diff --git a/patches/ws2_32-WSACleanup/0002-ws2_32-Invalidate-client-side-file-descriptor-cache-.patch b/patches/ws2_32-WSACleanup/0002-ws2_32-Invalidate-client-side-file-descriptor-cache-.patch
index 384fc90af..8d92e3765 100644
--- a/patches/ws2_32-WSACleanup/0002-ws2_32-Invalidate-client-side-file-descriptor-cache-.patch
+++ b/patches/ws2_32-WSACleanup/0002-ws2_32-Invalidate-client-side-file-descriptor-cache-.patch
@@ -29,10 +29,10 @@ index 42532bd9f1c..ba46f170670 100644
  @ cdecl wine_server_handle_to_fd(long long ptr ptr)
  @ cdecl wine_server_release_fd(long long)
 diff --git a/dlls/ntdll/server.c b/dlls/ntdll/server.c
-index ed4e3f25531..ae1e41a485e 100644
+index c7788b99e2d..54291d0a909 100644
 --- a/dlls/ntdll/server.c
 +++ b/dlls/ntdll/server.c
-@@ -687,6 +687,14 @@ void CDECL wine_server_release_fd( HANDLE handle, int unix_fd )
+@@ -239,6 +239,14 @@ void CDECL wine_server_release_fd( HANDLE handle, int unix_fd )
      unix_funcs->server_release_fd( handle, unix_fd );
  }
  
@@ -48,22 +48,22 @@ index ed4e3f25531..ae1e41a485e 100644
  /***********************************************************************
   *           server_init_process
 diff --git a/dlls/ntdll/unix/loader.c b/dlls/ntdll/unix/loader.c
-index 4a3f101d301..8b10964603e 100644
+index aa020845bb9..0ef08edc474 100644
 --- a/dlls/ntdll/unix/loader.c
 +++ b/dlls/ntdll/unix/loader.c
-@@ -1000,6 +1000,7 @@ static struct unix_funcs unix_funcs =
-     wine_server_call,
+@@ -1014,6 +1014,7 @@ static struct unix_funcs unix_funcs =
+     server_wait,
+     server_queue_process_apc,
      server_send_fd,
-     server_remove_fd_from_cache,
 +    server_remove_fds_from_cache_by_type,
      server_get_unix_fd,
      server_fd_to_handle,
      server_handle_to_fd,
 diff --git a/dlls/ntdll/unix/server.c b/dlls/ntdll/unix/server.c
-index 8dc3f33bc80..dd2cb6cf5e2 100644
+index 8889c5d4b12..929ff354d65 100644
 --- a/dlls/ntdll/unix/server.c
 +++ b/dlls/ntdll/unix/server.c
-@@ -559,6 +559,26 @@ int CDECL server_remove_fd_from_cache( HANDLE handle )
+@@ -983,6 +983,26 @@ static int remove_fd_from_cache( HANDLE handle )
      return fd;
  }
  
@@ -91,34 +91,34 @@ index 8dc3f33bc80..dd2cb6cf5e2 100644
  /***********************************************************************
   *           server_get_unix_fd
 diff --git a/dlls/ntdll/unix/unix_private.h b/dlls/ntdll/unix/unix_private.h
-index 2bf39f85371..32c03fd8983 100644
+index 0694426dddb..5c13dce0b0a 100644
 --- a/dlls/ntdll/unix/unix_private.h
 +++ b/dlls/ntdll/unix/unix_private.h
-@@ -63,6 +63,7 @@ extern void CDECL dbg_init(void) DECLSPEC_HIDDEN;
- extern unsigned int CDECL server_call_unlocked( void *req_ptr ) DECLSPEC_HIDDEN;
+@@ -68,6 +68,7 @@ extern unsigned int CDECL server_wait( const select_op_t *select_op, data_size_t
+                                        const LARGE_INTEGER *timeout ) DECLSPEC_HIDDEN;
+ extern unsigned int CDECL server_queue_process_apc( HANDLE process, const apc_call_t *call, apc_result_t *result ) DECLSPEC_HIDDEN;
  extern void CDECL server_send_fd( int fd ) DECLSPEC_HIDDEN;
- extern int CDECL server_remove_fd_from_cache( HANDLE handle ) DECLSPEC_HIDDEN;
 +extern void CDECL server_remove_fds_from_cache_by_type( enum server_fd_type type ) DECLSPEC_HIDDEN;
  extern int CDECL server_get_unix_fd( HANDLE handle, unsigned int wanted_access, int *unix_fd,
                                       int *needs_close, enum server_fd_type *type,
                                       unsigned int *options ) DECLSPEC_HIDDEN;
 diff --git a/dlls/ntdll/unixlib.h b/dlls/ntdll/unixlib.h
-index 142e8956e7e..452c725dfde 100644
+index 323141d3840..0189c247b7a 100644
 --- a/dlls/ntdll/unixlib.h
 +++ b/dlls/ntdll/unixlib.h
-@@ -25,7 +25,7 @@
- #include "wine/debug.h"
+@@ -27,7 +27,7 @@
+ struct ldt_copy;
  
  /* increment this when you change the function table */
--#define NTDLL_UNIXLIB_VERSION 10
-+#define NTDLL_UNIXLIB_VERSION 11
+-#define NTDLL_UNIXLIB_VERSION 13
++#define NTDLL_UNIXLIB_VERSION 14
  
  struct unix_funcs
  {
-@@ -55,6 +55,7 @@ struct unix_funcs
-     unsigned int  (CDECL *server_call)( void *req_ptr );
+@@ -80,6 +80,7 @@ struct unix_funcs
+                                         const LARGE_INTEGER *timeout );
+     unsigned int  (CDECL *server_queue_process_apc)( HANDLE process, const apc_call_t *call, apc_result_t *result );
      void          (CDECL *server_send_fd)( int fd );
-     int           (CDECL *server_remove_fd_from_cache)( HANDLE handle );
 +    void          (CDECL *server_remove_fds_from_cache_by_type)( enum server_fd_type type );
      int           (CDECL *server_get_unix_fd)( HANDLE handle, unsigned int wanted_access, int *unix_fd,
                                                 int *needs_close, enum server_fd_type *type, unsigned int *options );

diff --git a/patches/eventfd_synchronization/definition b/patches/eventfd_synchronization/definition
index 9598a4c55..e21e14584 100644
--- a/patches/eventfd_synchronization/definition
+++ b/patches/eventfd_synchronization/definition
@@ -9,4 +9,6 @@ Depends: server-Realtime_Priority
 Depends: advapi32-Token_Integrity_Level
 Depends: ntdll-Junction_Points
 Depends: kernel32-K32GetPerformanceInfo
-Depends: user32-rawinput-mouse
\ No newline at end of file
+Depends: user32-rawinput-mouse
+Depends: server-Desktop_Refcount
+Disabled: true
\ No newline at end of file
diff --git a/patches/ntdll-Junction_Points/0001-ntdll-Add-support-for-junction-point-creation.patch b/patches/ntdll-Junction_Points/0001-ntdll-Add-support-for-junction-point-creation.patch
index baa163978..bf05ff102 100644
--- a/patches/ntdll-Junction_Points/0001-ntdll-Add-support-for-junction-point-creation.patch
+++ b/patches/ntdll-Junction_Points/0001-ntdll-Add-support-for-junction-point-creation.patch
@@ -72,7 +72,7 @@ index 1adc1e094ec..3e10703c5da 100644
 +    NTSTATUS status;
 +    int i;
 +
-+    if ((status = server_get_unix_fd( handle, FILE_SPECIAL_ACCESS, &dest_fd, &needs_close, NULL, NULL )))
++    if ((status = unix_funcs->server_get_unix_fd( handle, FILE_SPECIAL_ACCESS, &dest_fd, &needs_close, NULL, NULL )))
 +        return status;
 +
 +    if ((status = server_get_unix_name( handle, &unix_src )))
 
diff --git a/patches/ntdll-Junction_Points/0002-ntdll-Add-support-for-reading-junction-points.patch b/patches/ntdll-Junction_Points/0002-ntdll-Add-support-for-reading-junction-points.patch
index d4eeecb36..f8b80c693 100644
--- a/patches/ntdll-Junction_Points/0002-ntdll-Add-support-for-reading-junction-points.patch
+++ b/patches/ntdll-Junction_Points/0002-ntdll-Add-support-for-reading-junction-points.patch
@@ -35,7 +35,7 @@ index 693caecffa..b9087cbf4d 100644
 +    char *p;
 +    int i;
 +
-+    if ((status = server_get_unix_fd( handle, FILE_ANY_ACCESS, &dest_fd, &needs_close, NULL, NULL )))
++    if ((status = unix_funcs->server_get_unix_fd( handle, FILE_ANY_ACCESS, &dest_fd, &needs_close, NULL, NULL )))
 +        return status;
 +
 +    if ((status = server_get_unix_name( handle, &unix_src )))
 
diff --git a/patches/ntdll-Junction_Points/0003-ntdll-Add-support-for-deleting-junction-points.patch b/patches/ntdll-Junction_Points/0003-ntdll-Add-support-for-deleting-junction-points.patch
index 311bf5921..0ec1c91ee 100644
--- a/patches/ntdll-Junction_Points/0003-ntdll-Add-support-for-deleting-junction-points.patch
+++ b/patches/ntdll-Junction_Points/0003-ntdll-Add-support-for-deleting-junction-points.patch
@@ -31,7 +31,7 @@ index b9087cbf4d..dbbb54768b 100644
 +    NTSTATUS status;
 +    struct stat st;
 +
-+    if ((status = server_get_unix_fd( handle, FILE_SPECIAL_ACCESS, &dest_fd, &needs_close, NULL, NULL )))
++    if ((status = unix_funcs->server_get_unix_fd( handle, FILE_SPECIAL_ACCESS, &dest_fd, &needs_close, NULL, NULL )))
 +        return status;
 +
 +    if ((status = server_get_unix_name( handle, &unix_name )))
 
diff --git a/patches/ntdll-Junction_Points/0007-ntdll-Add-support-for-absolute-symlink-creation.patch b/patches/ntdll-Junction_Points/0007-ntdll-Add-support-for-absolute-symlink-creation.patch
index 9df396a71..a0e626059 100644
--- a/patches/ntdll-Junction_Points/0007-ntdll-Add-support-for-absolute-symlink-creation.patch
+++ b/patches/ntdll-Junction_Points/0007-ntdll-Add-support-for-absolute-symlink-creation.patch
@@ -48,10 +48,10 @@ index dbbb54768b..62941774ec 100644
 +        return STATUS_NOT_IMPLEMENTED;
 +    }
 +
-     if ((status = server_get_unix_fd( handle, FILE_SPECIAL_ACCESS, &dest_fd, &needs_close, NULL, NULL )))
+     if ((status = unix_funcs->server_get_unix_fd( handle, FILE_SPECIAL_ACCESS, &dest_fd, &needs_close, NULL, NULL )))
          return status;
  
-@@ -1682,6 +1698,18 @@ NTSTATUS FILE_CreateSymlink(HANDLE handle, REPARSE_DATA_BUFFER *buffer)
+@@ -1706,6 +1722,18 @@ NTSTATUS FILE_CreateSymlink(HANDLE handle, REPARSE_DATA_BUFFER *buffer)
              strcat( magic_dest, "." );
          strcat( magic_dest, "/" );
      }
 
diff --git a/patches/ntdll-Junction_Points/0014-ntdll-Correctly-report-file-symbolic-links-as-files.patch b/patches/ntdll-Junction_Points/0014-ntdll-Correctly-report-file-symbolic-links-as-files.patch
index 97cce7c05..63549fa60 100644
--- a/patches/ntdll-Junction_Points/0014-ntdll-Correctly-report-file-symbolic-links-as-files.patch
+++ b/patches/ntdll-Junction_Points/0014-ntdll-Correctly-report-file-symbolic-links-as-files.patch
@@ -73,7 +73,7 @@ index 29a928153b9..4902dff190a 100644
 -    char *p;
      int i;
  
--    if ((status = server_get_unix_fd( handle, FILE_ANY_ACCESS, &dest_fd, &needs_close, NULL, NULL )))
+-    if ((status = unix_funcs->server_get_unix_fd( handle, FILE_ANY_ACCESS, &dest_fd, &needs_close, NULL, NULL )))
 -        return status;
 -
 -    if ((status = server_get_unix_name( handle, &unix_src )))
@@ -174,7 +174,7 @@ index 29a928153b9..4902dff190a 100644
 +    ULONG flags = 0;
 +    INT prefix_len;
 +
-+    if ((status = server_get_unix_fd( handle, FILE_ANY_ACCESS, &dest_fd, &needs_close, NULL, NULL )))
++    if ((status = unix_funcs->server_get_unix_fd( handle, FILE_ANY_ACCESS, &dest_fd, &needs_close, NULL, NULL )))
 +        return status;
 +
 +    if ((status = server_get_unix_name( handle, &unix_src )))
 
diff --git a/patches/ntdll-NtQueryEaFile/0001-ntdll-Improve-stub-of-NtQueryEaFile.patch b/patches/ntdll-NtQueryEaFile/0001-ntdll-Improve-stub-of-NtQueryEaFile.patch
index a50a4bec3..5c4d4fbfd 100644
--- a/patches/ntdll-NtQueryEaFile/0001-ntdll-Improve-stub-of-NtQueryEaFile.patch
+++ b/patches/ntdll-NtQueryEaFile/0001-ntdll-Improve-stub-of-NtQueryEaFile.patch
@@ -32,7 +32,7 @@ index 2269ae311a..bed55c6fe7 100644
              ea_list_len, ea_index, restart);
 -    return STATUS_ACCESS_DENIED;
 +
-+    if ((status = server_get_unix_fd( handle, 0, &fd, &needs_close, NULL, NULL )) != STATUS_SUCCESS)
++    if ((status = unix_funcs->server_get_unix_fd( handle, 0, &fd, &needs_close, NULL, NULL )) != STATUS_SUCCESS)
 +        return status;
 +
 +    if (buffer && length)
 
diff --git a/patches/ntdll-RtlCreateUserThread/0001-ntdll-Refactor-RtlCreateUserThread-into-NtCreateThre.patch b/patches/ntdll-RtlCreateUserThread/0001-ntdll-Refactor-RtlCreateUserThread-into-NtCreateThre.patch
index 1dee3e617..568cfa9a4 100644
--- a/patches/ntdll-RtlCreateUserThread/0001-ntdll-Refactor-RtlCreateUserThread-into-NtCreateThre.patch
+++ b/patches/ntdll-RtlCreateUserThread/0001-ntdll-Refactor-RtlCreateUserThread-into-NtCreateThre.patch
@@ -114,7 +114,7 @@ index ceadcff1b2..2c4a9c4949 100644
 -    }
 +    if ((status = alloc_object_attributes( thread_attr, &objattr, &len ))) return status;
  
-     if (server_pipe( request_pipe ) == -1)
+     if (unix_funcs->server_pipe( request_pipe ) == -1)
      {
 @@ -486,7 +492,7 @@ NTSTATUS WINAPI RtlCreateUserThread( HANDLE process, SECURITY_DESCRIPTOR *descr,
      SERVER_START_REQ( new_thread )

diff --git a/patches/ntdll-WRITECOPY/0001-ntdll-Trigger-write-watches-before-passing-userdata-.patch b/patches/ntdll-WRITECOPY/0001-ntdll-Trigger-write-watches-before-passing-userdata-.patch
index cb67b6c8d..1f72cb105 100644
--- a/patches/ntdll-WRITECOPY/0001-ntdll-Trigger-write-watches-before-passing-userdata-.patch
+++ b/patches/ntdll-WRITECOPY/0001-ntdll-Trigger-write-watches-before-passing-userdata-.patch
@@ -22,28 +22,25 @@ index 381062cceb1..e7c6ca63fe2 100644
         "Access and/or AccessStatus were changed!\n");
  
 diff --git a/dlls/ntdll/server.c b/dlls/ntdll/server.c
-index 046cf601ebf..3d88b47a744 100644
+index ed4e3f25531..921dec86c82 100644
 --- a/dlls/ntdll/server.c
 +++ b/dlls/ntdll/server.c
-@@ -406,9 +406,18 @@ unsigned int server_call_unlocked( void *req_ptr )
+@@ -166,6 +166,15 @@ static DECLSPEC_NORETURN void server_protocol_perror( const char *err )
   */
  unsigned int CDECL wine_server_call( void *req_ptr )
  {
 +    struct __server_request_info * const req = req_ptr;
-     sigset_t old_set;
-     unsigned int ret;
- 
++
 +    /* trigger write watches, otherwise read() might return EFAULT */
 +    if (req->u.req.request_header.reply_size &&
 +        !virtual_check_buffer_for_write( req->reply_data, req->u.req.request_header.reply_size ))
 +    {
-+        ret = STATUS_ACCESS_VIOLATION;
-+        return ret;
++        return STATUS_ACCESS_VIOLATION;
 +    }
 +
-     pthread_sigmask( SIG_BLOCK, &server_block_set, &old_set );
-     ret = server_call_unlocked( req_ptr );
-     pthread_sigmask( SIG_SETMASK, &old_set, NULL );
+     return unix_funcs->server_call( req_ptr );
+ }
+ 
 -- 
 2.26.2
 
diff --git a/patches/ntdll-ext4-case-folder/0002-ntdll-server-Mark-drive_c-as-case-insensitive-when-c.patch b/patches/ntdll-ext4-case-folder/0002-ntdll-server-Mark-drive_c-as-case-insensitive-when-c.patch
index 78dac2080..9711a7163 100644
--- a/patches/ntdll-ext4-case-folder/0002-ntdll-server-Mark-drive_c-as-case-insensitive-when-c.patch
+++ b/patches/ntdll-ext4-case-folder/0002-ntdll-server-Mark-drive_c-as-case-insensitive-when-c.patch
@@ -1,4 +1,4 @@
-From acdd5aaf5d4f618a96f21710a8ee2f44a994194c Mon Sep 17 00:00:00 2001
+From 627618459891aa36fc9a9ac0c04b7035d2272fb1 Mon Sep 17 00:00:00 2001
 From: =?UTF-8?q?Gabriel=20Iv=C4=83ncescu?= <gabrielopcode@gmail.com>
 Date: Fri, 24 May 2019 15:09:35 +0300
 Subject: [PATCH] ntdll/server: Mark drive_c as case-insensitive when created
@@ -9,14 +9,14 @@ Content-Transfer-Encoding: 8bit
 Wine-Bug: https://bugs.winehq.org/show_bug.cgi?id=47099
 Signed-off-by: Gabriel Ivăncescu <gabrielopcode@gmail.com>
 ---
- dlls/ntdll/server.c | 45 +++++++++++++++++++++++++++++++++++++++++++++
+ dlls/ntdll/unix/server.c | 45 ++++++++++++++++++++++++++++++++++++++++
  1 file changed, 45 insertions(+)
 
-diff --git a/dlls/ntdll/server.c b/dlls/ntdll/server.c
-index bc25e242a77..f2109dd1ef0 100644
---- a/dlls/ntdll/server.c
-+++ b/dlls/ntdll/server.c
-@@ -54,6 +54,12 @@
+diff --git a/dlls/ntdll/unix/server.c b/dlls/ntdll/unix/server.c
+index 8dc3f33bc80..0e6c9d90281 100644
+--- a/dlls/ntdll/unix/server.c
++++ b/dlls/ntdll/unix/server.c
+@@ -55,6 +55,12 @@
  #ifdef HAVE_SYS_MMAN_H
  #include <sys/mman.h>
  #endif
@@ -29,7 +29,7 @@ index bc25e242a77..f2109dd1ef0 100644
  #ifdef HAVE_SYS_PRCTL_H
  # include <sys/prctl.h>
  #endif
-@@ -87,6 +93,22 @@
+@@ -93,6 +99,22 @@
  
  WINE_DEFAULT_DEBUG_CHANNEL(server);
  
@@ -49,10 +49,10 @@ index bc25e242a77..f2109dd1ef0 100644
 +
 +#endif
 +
- /* Some versions of glibc don't define this */
- #ifndef SCM_RIGHTS
- #define SCM_RIGHTS 1
-@@ -1380,6 +1402,28 @@ void init_paths(void)
+ #ifndef MSG_CMSG_CLOEXEC
+ #define MSG_CMSG_CLOEXEC 0
+ #endif
+@@ -729,6 +751,28 @@ static const char *init_server_dir( dev_t dev, ino_t ino )
  }
  
  
@@ -81,7 +81,7 @@ index bc25e242a77..f2109dd1ef0 100644
  /***********************************************************************
   *           setup_config_dir
   *
-@@ -1416,6 +1460,7 @@ static int setup_config_dir(void)
+@@ -765,6 +809,7 @@ static int setup_config_dir(void)
      if (!mkdir( "dosdevices", 0777 ))
      {
          mkdir( "drive_c", 0777 );
diff --git a/patches/patchinstall.sh b/patches/patchinstall.sh
index 8fd37ebc5..e62f11999 100755
--- a/patches/patchinstall.sh
+++ b/patches/patchinstall.sh
@@ -133,7 +133,6 @@ patch_enable_all ()
 	enable_dxdiagn_Enumerate_DirectSound="$1"
 	enable_dxdiagn_GetChildContainer_Leaf_Nodes="$1"
 	enable_dxva2_Video_Decoder="$1"
-	enable_eventfd_synchronization="$1"
 	enable_explorer_Video_Registry_Key="$1"
 	enable_fonts_Missing_Fonts="$1"
 	enable_fsutil_Stub_Program="$1"
@@ -238,7 +237,6 @@ patch_enable_all ()
 	enable_server_PeekMessage="$1"
 	enable_server_Realtime_Priority="$1"
 	enable_server_Registry_Notifications="$1"
-	enable_server_Shared_Memory="$1"
 	enable_server_Signal_Thread="$1"
 	enable_server_Stored_ACLs="$1"
 	enable_setupapi_DiskSpaceList="$1"
@@ -502,9 +500,6 @@ patch_enable ()
 		dxva2-Video_Decoder)
 			enable_dxva2_Video_Decoder="$2"
 			;;
-		eventfd_synchronization)
-			enable_eventfd_synchronization="$2"
-			;;
 		explorer-Video_Registry_Key)
 			enable_explorer_Video_Registry_Key="$2"
 			;;
@@ -817,9 +812,6 @@ patch_enable ()
 		server-Registry_Notifications)
 			enable_server_Registry_Notifications="$2"
 			;;
-		server-Shared_Memory)
-			enable_server_Shared_Memory="$2"
-			;;
 		server-Signal_Thread)
 			enable_server_Signal_Thread="$2"
 			;;
@@ -1574,6 +1566,28 @@ if test "$enable_user32_rawinput_hid" -eq 1; then
 	enable_user32_rawinput_nolegacy=1
 fi
 
+if test "$enable_user32_rawinput_nolegacy" -eq 1; then
+	if test "$enable_server_Key_State" -gt 1; then
+		abort "Patchset server-Key_State disabled, but user32-rawinput-nolegacy depends on that."
+	fi
+	if test "$enable_user32_rawinput_mouse" -gt 1; then
+		abort "Patchset user32-rawinput-mouse disabled, but user32-rawinput-nolegacy depends on that."
+	fi
+	enable_server_Key_State=1
+	enable_user32_rawinput_mouse=1
+fi
+
+if test "$enable_user32_rawinput_mouse" -eq 1; then
+	if test "$enable_loader_KeyboardLayouts" -gt 1; then
+		abort "Patchset loader-KeyboardLayouts disabled, but user32-rawinput-mouse depends on that."
+	fi
+	if test "$enable_winex11_drv_mouse_coorrds" -gt 1; then
+		abort "Patchset winex11.drv-mouse-coorrds disabled, but user32-rawinput-mouse depends on that."
+	fi
+	enable_loader_KeyboardLayouts=1
+	enable_winex11_drv_mouse_coorrds=1
+fi
+
 if test "$enable_stdole32_tlb_SLTG_Typelib" -eq 1; then
 	if test "$enable_widl_SLTG_Typelib_Support" -gt 1; then
 		abort "Patchset widl-SLTG_Typelib_Support disabled, but stdole32.tlb-SLTG_Typelib depends on that."
@@ -1599,11 +1613,11 @@ if test "$enable_shell32_Progress_Dialog" -eq 1; then
 	enable_shell32_SHFileOperation_Move=1
 fi
 
-if test "$enable_server_Object_Types" -eq 1; then
-	if test "$enable_server_Shared_Memory" -gt 1; then
-		abort "Patchset server-Shared_Memory disabled, but server-Object_Types depends on that."
+if test "$enable_server_Realtime_Priority" -eq 1; then
+	if test "$enable_ntdll_ThreadTime" -gt 1; then
+		abort "Patchset ntdll-ThreadTime disabled, but server-Realtime_Priority depends on that."
 	fi
-	enable_server_Shared_Memory=1
+	enable_ntdll_ThreadTime=1
 fi
 
 if test "$enable_server_Inherited_ACLs" -eq 1; then
@@ -1625,13 +1639,9 @@ if test "$enable_server_Stored_ACLs" -eq 1; then
 fi
 
 if test "$enable_server_Desktop_Refcount" -eq 1; then
-	if test "$enable_eventfd_synchronization" -gt 1; then
-		abort "Patchset eventfd_synchronization disabled, but server-Desktop_Refcount depends on that."
-	fi
 	if test "$enable_ws2_32_WSACleanup" -gt 1; then
 		abort "Patchset ws2_32-WSACleanup disabled, but server-Desktop_Refcount depends on that."
 	fi
-	enable_eventfd_synchronization=1
 	enable_ws2_32_WSACleanup=1
 fi
 
@@ -1670,6 +1680,13 @@ if test "$enable_ntdll_Syscall_Emulation" -eq 1; then
 	enable_winebuild_Fake_Dlls=1
 fi
 
+if test "$enable_ntdll_RtlCreateUserThread" -eq 1; then
+	if test "$enable_winebuild_Fake_Dlls" -gt 1; then
+		abort "Patchset winebuild-Fake_Dlls disabled, but ntdll-RtlCreateUserThread depends on that."
+	fi
+	enable_winebuild_Fake_Dlls=1
+fi
+
 if test "$enable_ntdll_NtQueryVirtualMemory" -eq 1; then
 	if test "$enable_ntdll_NtDevicePath" -gt 1; then
 		abort "Patchset ntdll-NtDevicePath disabled, but ntdll-NtQueryVirtualMemory depends on that."
@@ -1758,108 +1775,6 @@ if test "$enable_server_File_Permissions" -eq 1; then
 	enable_ntdll_Junction_Points=1
 fi
 
-if test "$enable_eventfd_synchronization" -eq 1; then
-	if test "$enable_advapi32_Token_Integrity_Level" -gt 1; then
-		abort "Patchset advapi32-Token_Integrity_Level disabled, but eventfd_synchronization depends on that."
-	fi
-	if test "$enable_kernel32_K32GetPerformanceInfo" -gt 1; then
-		abort "Patchset kernel32-K32GetPerformanceInfo disabled, but eventfd_synchronization depends on that."
-	fi
-	if test "$enable_ntdll_Junction_Points" -gt 1; then
-		abort "Patchset ntdll-Junction_Points disabled, but eventfd_synchronization depends on that."
-	fi
-	if test "$enable_ntdll_RtlCreateUserThread" -gt 1; then
-		abort "Patchset ntdll-RtlCreateUserThread disabled, but eventfd_synchronization depends on that."
-	fi
-	if test "$enable_ntdll_SystemRoot_Symlink" -gt 1; then
-		abort "Patchset ntdll-SystemRoot_Symlink disabled, but eventfd_synchronization depends on that."
-	fi
-	if test "$enable_server_Realtime_Priority" -gt 1; then
-		abort "Patchset server-Realtime_Priority disabled, but eventfd_synchronization depends on that."
-	fi
-	if test "$enable_server_Shared_Memory" -gt 1; then
-		abort "Patchset server-Shared_Memory disabled, but eventfd_synchronization depends on that."
-	fi
-	if test "$enable_user32_rawinput_mouse" -gt 1; then
-		abort "Patchset user32-rawinput-mouse disabled, but eventfd_synchronization depends on that."
-	fi
-	if test "$enable_ws2_32_WSACleanup" -gt 1; then
-		abort "Patchset ws2_32-WSACleanup disabled, but eventfd_synchronization depends on that."
-	fi
-	enable_advapi32_Token_Integrity_Level=1
-	enable_kernel32_K32GetPerformanceInfo=1
-	enable_ntdll_Junction_Points=1
-	enable_ntdll_RtlCreateUserThread=1
-	enable_ntdll_SystemRoot_Symlink=1
-	enable_server_Realtime_Priority=1
-	enable_server_Shared_Memory=1
-	enable_user32_rawinput_mouse=1
-	enable_ws2_32_WSACleanup=1
-fi
-
-if test "$enable_server_Shared_Memory" -eq 1; then
-	if test "$enable_ntdll_Threading" -gt 1; then
-		abort "Patchset ntdll-Threading disabled, but server-Shared_Memory depends on that."
-	fi
-	if test "$enable_ntdll_ext4_case_folder" -gt 1; then
-		abort "Patchset ntdll-ext4-case-folder disabled, but server-Shared_Memory depends on that."
-	fi
-	if test "$enable_server_Key_State" -gt 1; then
-		abort "Patchset server-Key_State disabled, but server-Shared_Memory depends on that."
-	fi
-	if test "$enable_server_PeekMessage" -gt 1; then
-		abort "Patchset server-PeekMessage disabled, but server-Shared_Memory depends on that."
-	fi
-	if test "$enable_server_Signal_Thread" -gt 1; then
-		abort "Patchset server-Signal_Thread disabled, but server-Shared_Memory depends on that."
-	fi
-	if test "$enable_user32_rawinput_nolegacy" -gt 1; then
-		abort "Patchset user32-rawinput-nolegacy disabled, but server-Shared_Memory depends on that."
-	fi
-	enable_ntdll_Threading=1
-	enable_ntdll_ext4_case_folder=1
-	enable_server_Key_State=1
-	enable_server_PeekMessage=1
-	enable_server_Signal_Thread=1
-	enable_user32_rawinput_nolegacy=1
-fi
-
-if test "$enable_user32_rawinput_nolegacy" -eq 1; then
-	if test "$enable_server_Key_State" -gt 1; then
-		abort "Patchset server-Key_State disabled, but user32-rawinput-nolegacy depends on that."
-	fi
-	if test "$enable_user32_rawinput_mouse" -gt 1; then
-		abort "Patchset user32-rawinput-mouse disabled, but user32-rawinput-nolegacy depends on that."
-	fi
-	enable_server_Key_State=1
-	enable_user32_rawinput_mouse=1
-fi
-
-if test "$enable_user32_rawinput_mouse" -eq 1; then
-	if test "$enable_loader_KeyboardLayouts" -gt 1; then
-		abort "Patchset loader-KeyboardLayouts disabled, but user32-rawinput-mouse depends on that."
-	fi
-	if test "$enable_winex11_drv_mouse_coorrds" -gt 1; then
-		abort "Patchset winex11.drv-mouse-coorrds disabled, but user32-rawinput-mouse depends on that."
-	fi
-	enable_loader_KeyboardLayouts=1
-	enable_winex11_drv_mouse_coorrds=1
-fi
-
-if test "$enable_server_Realtime_Priority" -eq 1; then
-	if test "$enable_ntdll_ThreadTime" -gt 1; then
-		abort "Patchset ntdll-ThreadTime disabled, but server-Realtime_Priority depends on that."
-	fi
-	enable_ntdll_ThreadTime=1
-fi
-
-if test "$enable_ntdll_RtlCreateUserThread" -eq 1; then
-	if test "$enable_winebuild_Fake_Dlls" -gt 1; then
-		abort "Patchset winebuild-Fake_Dlls disabled, but ntdll-RtlCreateUserThread depends on that."
-	fi
-	enable_winebuild_Fake_Dlls=1
-fi
-
 if test "$enable_dxdiagn_GetChildContainer_Leaf_Nodes" -eq 1; then
 	if test "$enable_dxdiagn_Enumerate_DirectSound" -gt 1; then
 		abort "Patchset dxdiagn-Enumerate_DirectSound disabled, but dxdiagn-GetChildContainer_Leaf_Nodes depends on that."
@@ -3132,710 +3047,91 @@ if test "$enable_dxva2_Video_Decoder" -eq 1; then
 	) >> "$patchlist"
 fi
 
-# Patchset kernel32-K32GetPerformanceInfo
+# Patchset explorer-Video_Registry_Key
 # |
 # | Modified files:
-# |   *	dlls/kernelbase/debug.c, server/process.c, server/protocol.def
+# |   *	dlls/advapi32/tests/registry.c, programs/explorer/desktop.c
 # |
-if test "$enable_kernel32_K32GetPerformanceInfo" -eq 1; then
-	patch_apply kernel32-K32GetPerformanceInfo/0001-kernel32-Make-K32GetPerformanceInfo-faster.patch
+if test "$enable_explorer_Video_Registry_Key" -eq 1; then
+	patch_apply explorer-Video_Registry_Key/0001-explorer-Create-CurrentControlSet-Control-Video-regi.patch
 	(
-		printf '%s\n' '+    { "Michael Müller", "kernel32: Make K32GetPerformanceInfo faster.", 1 },';
+		printf '%s\n' '+    { "Michael Müller", "explorer: Create CurrentControlSet\\Control\\Video registry key as non-volatile.", 1 },';
 	) >> "$patchlist"
 fi
 
-# Patchset ntdll-Junction_Points
+# Patchset fonts-Missing_Fonts
 # |
 # | This patchset fixes the following Wine bugs:
-# |   *	[#12401] NET Framework 2.0, 3.0, 4.0 installers and other apps that make use of GAC API for managed assembly
-# | 	installation on NTFS filesystems need reparse point/junction API support
-# | 	(FSCTL_SET_REPARSE_POINT/FSCTL_GET_REPARSE_POINT)
-# |   *	[#44948] Multiple apps (Spine (Mod starter for Gothic), MS Office 365 installer) need CreateSymbolicLinkW implementation
+# |   *	[#32323] Implement an Arial replacement font
+# |   *	[#32342] Implement a Times New Roman replacement font
+# |   *	[#20456] Implement a Courier New replacement font
+# |   *	[#13829] Implement a Microsoft Yahei replacement font
 # |
 # | Modified files:
-# |   *	configure.ac, dlls/kernel32/path.c, dlls/ntdll/directory.c, dlls/ntdll/file.c, dlls/ntdll/tests/file.c,
-# | 	include/Makefile.in, include/ntifs.h, include/wine/port.h, include/winternl.h, libs/port/Makefile.in,
-# | 	libs/port/renameat2.c, server/fd.c
+# |   *	COPYING.arial, COPYING.cour, COPYING.msyh, COPYING.times, LICENSE, fonts/Makefile.in, fonts/arial.sfd, fonts/arial.ttf,
+# | 	fonts/cour.sfd, fonts/cour.ttf, fonts/msyh.sfd, fonts/msyh.ttf, fonts/times.sfd, fonts/times.ttf
 # |
-if test "$enable_ntdll_Junction_Points" -eq 1; then
-	patch_apply ntdll-Junction_Points/0001-ntdll-Add-support-for-junction-point-creation.patch
-	patch_apply ntdll-Junction_Points/0002-ntdll-Add-support-for-reading-junction-points.patch
-	patch_apply ntdll-Junction_Points/0003-ntdll-Add-support-for-deleting-junction-points.patch
-	patch_apply ntdll-Junction_Points/0004-ntdll-Add-a-test-for-junction-point-advertisement.patch
-	patch_apply ntdll-Junction_Points/0005-kernel32-ntdll-Add-support-for-deleting-junction-poi.patch
-	patch_apply ntdll-Junction_Points/0007-ntdll-Add-support-for-absolute-symlink-creation.patch
-	patch_apply ntdll-Junction_Points/0008-ntdll-Add-support-for-reading-absolute-symlinks.patch
-	patch_apply ntdll-Junction_Points/0009-ntdll-Add-support-for-deleting-symlinks.patch
-	patch_apply ntdll-Junction_Points/0010-ntdll-Add-support-for-relative-symlink-creation.patch
-	patch_apply ntdll-Junction_Points/0011-ntdll-Add-support-for-reading-relative-symlinks.patch
-	patch_apply ntdll-Junction_Points/0012-ntdll-Add-support-for-file-symlinks.patch
-	patch_apply ntdll-Junction_Points/0013-ntdll-Allow-creation-of-dangling-reparse-points-to-n.patch
-	patch_apply ntdll-Junction_Points/0014-ntdll-Correctly-report-file-symbolic-links-as-files.patch
-	patch_apply ntdll-Junction_Points/0015-kernel32-Set-error-code-when-attempting-to-delete-fi.patch
-	patch_apply ntdll-Junction_Points/0016-server-Properly-handle-file-symlink-deletion.patch
-	patch_apply ntdll-Junction_Points/0017-ntdll-Always-report-symbolic-links-as-containing-zer.patch
-	patch_apply ntdll-Junction_Points/0018-ntdll-Find-dangling-symlinks-quickly.patch
+if test "$enable_fonts_Missing_Fonts" -eq 1; then
+	patch_apply fonts-Missing_Fonts/0001-fonts-Add-Liberation-Sans-as-an-Arial-replacement.patch
+	patch_apply fonts-Missing_Fonts/0002-fonts-Add-Liberation-Serif-as-an-Times-New-Roman-rep.patch
+	patch_apply fonts-Missing_Fonts/0003-fonts-Add-Liberation-Mono-as-an-Courier-New-replacem.patch
+	patch_apply fonts-Missing_Fonts/0004-fonts-Add-WenQuanYi-Micro-Hei-as-a-Microsoft-Yahei-r.patch
+	patch_apply fonts-Missing_Fonts/0005-Add-licenses-for-fonts-as-separate-files.patch
 	(
-		printf '%s\n' '+    { "Erich E. Hoover", "ntdll: Add support for junction point creation.", 1 },';
-		printf '%s\n' '+    { "Erich E. Hoover", "ntdll: Add support for reading junction points.", 1 },';
-		printf '%s\n' '+    { "Erich E. Hoover", "ntdll: Add support for deleting junction points.", 1 },';
-		printf '%s\n' '+    { "Erich E. Hoover", "ntdll: Add a test for junction point advertisement.", 1 },';
-		printf '%s\n' '+    { "Erich E. Hoover", "kernel32,ntdll: Add support for deleting junction points with RemoveDirectory.", 1 },';
-		printf '%s\n' '+    { "Erich E. Hoover", "ntdll: Add support for absolute symlink creation.", 1 },';
-		printf '%s\n' '+    { "Erich E. Hoover", "ntdll: Add support for reading absolute symlinks.", 1 },';
-		printf '%s\n' '+    { "Erich E. Hoover", "ntdll: Add support for deleting symlinks.", 1 },';
-		printf '%s\n' '+    { "Erich E. Hoover", "ntdll: Add support for relative symlink creation.", 1 },';
-		printf '%s\n' '+    { "Erich E. Hoover", "ntdll: Add support for reading relative symlinks.", 1 },';
-		printf '%s\n' '+    { "Erich E. Hoover", "ntdll: Add support for file symlinks.", 1 },';
-		printf '%s\n' '+    { "Erich E. Hoover", "ntdll: Allow creation of dangling reparse points to non-existent paths.", 1 },';
-		printf '%s\n' '+    { "Erich E. Hoover", "ntdll: Correctly report file symbolic links as files.", 1 },';
-		printf '%s\n' '+    { "Erich E. Hoover", "kernel32: Set error code when attempting to delete file symlinks as directories.", 1 },';
-		printf '%s\n' '+    { "Erich E. Hoover", "server: Properly handle file symlink deletion.", 1 },';
-		printf '%s\n' '+    { "Erich E. Hoover", "ntdll: Always report symbolic links as containing zero bytes.", 1 },';
-		printf '%s\n' '+    { "Erich E. Hoover", "ntdll: Find dangling symlinks quickly.", 1 },';
+		printf '%s\n' '+    { "Torsten Kurbad", "fonts: Add Liberation Sans as an Arial replacement.", 2 },';
+		printf '%s\n' '+    { "Sebastian Lackner", "fonts: Add Liberation Serif as an Times New Roman replacement.", 1 },';
+		printf '%s\n' '+    { "Sebastian Lackner", "fonts: Add Liberation Mono as an Courier New replacement.", 1 },';
+		printf '%s\n' '+    { "Erich E. Hoover", "fonts: Add WenQuanYi Micro Hei as a Microsoft Yahei replacement.", 1 },';
+		printf '%s\n' '+    { "Michael Müller", "Add licenses for fonts as separate files.", 1 },';
 	) >> "$patchlist"
 fi
 
-# Patchset winebuild-Fake_Dlls
+# Patchset fsutil-Stub_Program
 # |
 # | This patchset fixes the following Wine bugs:
-# |   *	[#21232] Chromium-based browser engines (Chrome, Opera, Comodo Dragon, SRWare Iron) crash on startup unless '--no-
-# | 	sandbox' is used (native API sandboxing/hooking scheme incompatible with Wine)
-# |   *	[#42741] StarCraft I: 1.18 PTR fails to initialize ClientSdk.dll
-# |   *	[#45349] Multiple applications and games crash due to missing support for 64-bit syscall thunks (StreetFighter V)
-# |   *	[#45573] League of Legends 8.12+ fails to start a game (anticheat engine, hooking of syscall return instructions)
-# |   *	[#45650] chromium 32-bit sandbox expects different syscall thunks depending on Windows version
+# |   *	[#22749] Add stub for fsutil.exe hardlink command
 # |
 # | Modified files:
-# |   *	dlls/dbghelp/cpu_i386.c, dlls/kernel32/tests/loader.c, dlls/krnl386.exe16/kernel.c,
-# | 	dlls/krnl386.exe16/kernel16_private.h, dlls/krnl386.exe16/ne_module.c, dlls/krnl386.exe16/ne_segment.c,
-# | 	dlls/krnl386.exe16/task.c, dlls/krnl386.exe16/thunk.c, dlls/krnl386.exe16/wowthunk.c, dlls/ntdll/actctx.c,
-# | 	dlls/ntdll/directory.c, dlls/ntdll/loader.c, dlls/ntdll/locale.c, dlls/ntdll/ntdll_misc.h, dlls/ntdll/path.c,
-# | 	dlls/ntdll/process.c, dlls/ntdll/signal_i386.c, dlls/ntdll/signal_x86_64.c, dlls/ntdll/tests/exception.c,
-# | 	dlls/ntdll/thread.c, dlls/system.drv16/system.c, dlls/toolhelp.dll16/toolhelp.c, dlls/user.exe16/message.c,
-# | 	dlls/user.exe16/user.c, dlls/user.exe16/window.c, include/winternl.h, libs/wine/loader.c, tools/winebuild/build.h,
-# | 	tools/winebuild/import.c, tools/winebuild/parser.c, tools/winebuild/relay.c, tools/winebuild/res32.c,
-# | 	tools/winebuild/spec16.c, tools/winebuild/spec32.c, tools/winebuild/utils.c
+# |   *	programs/fsutil/Makefile.in, programs/fsutil/fsutil.rc, programs/fsutil/main.c, programs/fsutil/resources.h
 # |
-if test "$enable_winebuild_Fake_Dlls" -eq 1; then
-	patch_apply winebuild-Fake_Dlls/0001-kernel32-tests-Add-basic-tests-for-fake-dlls.patch
-	patch_apply winebuild-Fake_Dlls/0002-krnl386.exe16-Do-not-abuse-WOW32Reserved-field-for-1.patch
-	patch_apply winebuild-Fake_Dlls/0003-winebuild-Generate-syscall-thunks-for-ntdll-exports.patch
-	patch_apply winebuild-Fake_Dlls/0004-winebuild-Use-multipass-label-system-to-generate-fak.patch
-	patch_apply winebuild-Fake_Dlls/0005-winebuild-Add-stub-functions-in-fake-dlls.patch
-	patch_apply winebuild-Fake_Dlls/0006-winebuild-Add-syscall-thunks-in-fake-dlls.patch
-	patch_apply winebuild-Fake_Dlls/0007-winebuild-Fix-size-of-relocation-information-in-fake.patch
-	patch_apply winebuild-Fake_Dlls/0008-winebuild-Try-to-make-sure-RVA-matches-between-fake-.patch
-	patch_apply winebuild-Fake_Dlls/0009-libs-wine-Use-same-file-alignment-for-fake-and-built.patch
-	patch_apply winebuild-Fake_Dlls/0010-tools-winebuild-Add-syscall-thunks-for-64-bit.patch
-	patch_apply winebuild-Fake_Dlls/0011-ntdll-Call-NtOpenFile-through-syscall-thunk.patch
+if test "$enable_fsutil_Stub_Program" -eq 1; then
+	patch_apply fsutil-Stub_Program/0001-fsutil-Add-fsutil-program-with-support-for-creating-.patch
 	(
-		printf '%s\n' '+    { "Michael Müller", "kernel32/tests: Add basic tests for fake dlls.", 1 },';
-		printf '%s\n' '+    { "Sebastian Lackner", "krnl386.exe16: Do not abuse WOW32Reserved field for 16-bit stack address.", 1 },';
-		printf '%s\n' '+    { "Michael Müller", "winebuild: Generate syscall thunks for ntdll exports.", 1 },';
-		printf '%s\n' '+    { "Michael Müller", "winebuild: Use multipass label system to generate fake dlls.", 1 },';
-		printf '%s\n' '+    { "Michael Müller", "winebuild: Add stub functions in fake dlls.", 1 },';
-		printf '%s\n' '+    { "Michael Müller", "winebuild: Add syscall thunks in fake dlls.", 1 },';
-		printf '%s\n' '+    { "Michael Müller", "winebuild: Fix size of relocation information in fake dlls.", 1 },';
-		printf '%s\n' '+    { "Michael Müller", "winebuild: Try to make sure RVA matches between fake and builtin DLLs.", 1 },';
-		printf '%s\n' '+    { "Michael Müller", "libs/wine: Use same file alignment for fake and builtin DLLs.", 1 },';
-		printf '%s\n' '+    { "Michael Müller", "tools/winebuild: Add syscall thunks for 64 bit.", 1 },';
-		printf '%s\n' '+    { "Paul Gofman", "ntdll: Call NtOpenFile through syscall thunk.", 1 },';
+		printf '%s\n' '+    { "Michael Müller", "fsutil: Add fsutil program with support for creating hard links.", 1 },';
 	) >> "$patchlist"
 fi
 
-# Patchset ntdll-RtlCreateUserThread
-# |
-# | This patchset has the following (direct or indirect) dependencies:
-# |   *	winebuild-Fake_Dlls
-# |
-# | This patchset fixes the following Wine bugs:
-# |   *	[#45571] League of Legends 8.12+ fails to start a game (anticheat engine, hooking of NtCreateThread/Ex)
+# Patchset gdi32-Lazy_Font_Initialization
 # |
 # | Modified files:
-# |   *	dlls/ntdll/ntdll.spec, dlls/ntdll/thread.c, include/winternl.h
+# |   *	dlls/gdi32/dc.c, dlls/gdi32/freetype.c
 # |
-if test "$enable_ntdll_RtlCreateUserThread" -eq 1; then
-	patch_apply ntdll-RtlCreateUserThread/0001-ntdll-Refactor-RtlCreateUserThread-into-NtCreateThre.patch
+if test "$enable_gdi32_Lazy_Font_Initialization" -eq 1; then
+	patch_apply gdi32-Lazy_Font_Initialization/0001-gdi32-Perform-lazy-initialization-of-fonts-to-improv.patch
 	(
-		printf '%s\n' '+    { "Andrew Wesie", "ntdll: Refactor RtlCreateUserThread into NtCreateThreadEx.", 1 },';
+		printf '%s\n' '+    { "Sebastian Lackner", "gdi32: Perform lazy initialization of fonts to improve startup performance.", 1 },';
 	) >> "$patchlist"
 fi
 
-# Patchset ntdll-SystemRoot_Symlink
+# Patchset gdi32-rotation
+# |
+# | This patchset fixes the following Wine bugs:
+# |   *	[#34579] gdi32: fix for rotated Arc, ArcTo, Chord and Pie drawing problem
+# |   *	[#35331] gdi32: fix for rotated ellipse
 # |
 # | Modified files:
-# |   *	dlls/ntdll/om.c
+# |   *	dlls/gdi32/dibdrv/graphics.c, dlls/gdi32/gdi_private.h
 # |
-if test "$enable_ntdll_SystemRoot_Symlink" -eq 1; then
-	patch_apply ntdll-SystemRoot_Symlink/0001-ntdll-Add-special-handling-for-SystemRoot-to-satisfy.patch
+if test "$enable_gdi32_rotation" -eq 1; then
+	patch_apply gdi32-rotation/0001-gdi32-fix-for-rotated-Arc-ArcTo-Chord-and-Pie-drawin.patch
+	patch_apply gdi32-rotation/0002-gdi32-fix-for-rotated-ellipse.patch
 	(
-		printf '%s\n' '+    { "Sebastian Lackner", "ntdll: Add special handling for \\SystemRoot to satisfy MSYS2 case-insensitive system check.", 1 },';
+		printf '%s\n' '+    { "Daniel Wendt", "gdi32: Fix for rotated Arc, ArcTo, Chord and Pie drawing problem.", 1 },';
+		printf '%s\n' '+    { "Daniel Wendt", "gdi32: Fix for rotated ellipse.", 1 },';
 	) >> "$patchlist"
 fi
 
-# Patchset ntdll-ThreadTime
-# |
-# | This patchset fixes the following Wine bugs:
-# |   *	[#20230] Return correct values for GetThreadTimes function
-# |
-# | Modified files:
-# |   *	dlls/ntdll/nt.c, dlls/ntdll/ntdll_misc.h, dlls/ntdll/process.c, dlls/ntdll/thread.c, server/protocol.def,
-# | 	server/snapshot.c, server/thread.c, server/thread.h
-# |
-if test "$enable_ntdll_ThreadTime" -eq 1; then
-	patch_apply ntdll-ThreadTime/0001-ntdll-Return-correct-values-in-GetThreadTimes-for-al.patch
-	patch_apply ntdll-ThreadTime/0002-ntdll-Set-correct-thread-creation-time-for-SystemPro.patch
-	patch_apply ntdll-ThreadTime/0003-ntdll-Fill-process-kernel-and-user-time.patch
-	patch_apply ntdll-ThreadTime/0004-ntdll-Set-process-start-time.patch
-	patch_apply ntdll-ThreadTime/0005-ntdll-Fill-out-thread-times-in-process-enumeration.patch
-	patch_apply ntdll-ThreadTime/0006-ntdll-Fill-process-virtual-memory-counters-in-NtQuer.patch
-	(
-		printf '%s\n' '+    { "Sebastian Lackner", "ntdll: Return correct values in GetThreadTimes() for all threads.", 1 },';
-		printf '%s\n' '+    { "Michael Müller", "ntdll: Set correct thread creation time for SystemProcessInformation in NtQuerySystemInformation.", 1 },';
-		printf '%s\n' '+    { "Michael Müller", "ntdll: Fill process kernel and user time.", 1 },';
-		printf '%s\n' '+    { "Michael Müller", "ntdll: Set process start time.", 1 },';
-		printf '%s\n' '+    { "Michael Müller", "ntdll: Fill out thread times in process enumeration.", 1 },';
-		printf '%s\n' '+    { "Michael Müller", "ntdll: Fill process virtual memory counters in NtQuerySystemInformation.", 1 },';
-	) >> "$patchlist"
-fi
-
-# Patchset server-Realtime_Priority
-# |
-# | This patchset has the following (direct or indirect) dependencies:
-# |   *	ntdll-ThreadTime
-# |
-# | Modified files:
-# |   *	server/Makefile.in, server/main.c, server/scheduler.c, server/thread.c, server/thread.h
-# |
-if test "$enable_server_Realtime_Priority" -eq 1; then
-	patch_apply server-Realtime_Priority/0001-wineserver-Draft-to-implement-priority-levels-throug.patch
-	(
-		printf '%s\n' '+    { "Joakim Hernberg", "wineserver: Draft to implement priority levels through POSIX scheduling policies on linux.", 1 },';
-	) >> "$patchlist"
-fi
-
-# Patchset ntdll-Threading
-# |
-# | Modified files:
-# |   *	dlls/ntdll/thread.c
-# |
-if test "$enable_ntdll_Threading" -eq 1; then
-	patch_apply ntdll-Threading/0001-ntdll-Fix-race-condition-when-threads-are-killed-dur.patch
-	(
-		printf '%s\n' '+    { "Sebastian Lackner", "ntdll: Fix race-condition when threads are killed during shutdown.", 1 },';
-	) >> "$patchlist"
-fi
-
-# Patchset ntdll-ext4-case-folder
-# |
-# | This patchset fixes the following Wine bugs:
-# |   *	[#47099] Support for EXT4 case folding per directory.
-# |
-# | Modified files:
-# |   *	dlls/ntdll/server.c
-# |
-if test "$enable_ntdll_ext4_case_folder" -eq 1; then
-	patch_apply ntdll-ext4-case-folder/0002-ntdll-server-Mark-drive_c-as-case-insensitive-when-c.patch
-	(
-		printf '%s\n' '+    { "Gabriel Ivăncescu", "ntdll/server: Mark drive_c as case-insensitive when created.", 1 },';
-	) >> "$patchlist"
-fi
-
-# Patchset server-Key_State
-# |
-# | This patchset fixes the following Wine bugs:
-# |   *	[#31899] Implement locking and synchronization of key states
-# |   *	[#35907] Fix caps lock state issues with multiple processes
-# |
-# | Modified files:
-# |   *	server/queue.c
-# |
-if test "$enable_server_Key_State" -eq 1; then
-	patch_apply server-Key_State/0001-server-Introduce-a-helper-function-to-update-the-thr.patch
-	patch_apply server-Key_State/0002-server-Implement-locking-and-synchronization-of-keys.patch
-	(
-		printf '%s\n' '+    { "Sebastian Lackner", "server: Introduce a helper function to update the thread_input key state.", 1 },';
-		printf '%s\n' '+    { "Sebastian Lackner", "server: Implement locking and synchronization of keystate buffer.", 3 },';
-	) >> "$patchlist"
-fi
-
-# Patchset server-PeekMessage
-# |
-# | This patchset fixes the following Wine bugs:
-# |   *	[#28884] GetMessage should remove already seen messages with higher priority
-# |
-# | Modified files:
-# |   *	dlls/user32/tests/msg.c, server/queue.c
-# |
-if test "$enable_server_PeekMessage" -eq 1; then
-	patch_apply server-PeekMessage/0001-server-Fix-handling-of-GetMessage-after-previous-Pee.patch
-	(
-		printf '%s\n' '+    { "Sebastian Lackner", "server: Fix handling of GetMessage after previous PeekMessage call.", 3 },';
-	) >> "$patchlist"
-fi
-
-# Patchset server-Signal_Thread
-# |
-# | Modified files:
-# |   *	server/thread.c, server/thread.h
-# |
-if test "$enable_server_Signal_Thread" -eq 1; then
-	patch_apply server-Signal_Thread/0001-server-Do-not-signal-thread-until-it-is-really-gone.patch
-	(
-		printf '%s\n' '+    { "Sebastian Lackner", "server: Do not signal violently terminated threads until they are really gone.", 1 },';
-	) >> "$patchlist"
-fi
-
-# Patchset loader-KeyboardLayouts
-# |
-# | This patchset fixes the following Wine bugs:
-# |   *	[#47439] loader: Add Keyboard Layouts registry enteries.
-# |
-# | Modified files:
-# |   *	dlls/user32/driver.c, dlls/user32/tests/input.c, loader/wine.inf.in
-# |
-if test "$enable_loader_KeyboardLayouts" -eq 1; then
-	patch_apply loader-KeyboardLayouts/0001-loader-Add-Keyboard-Layouts-registry-enteries.patch
-	patch_apply loader-KeyboardLayouts/0002-user32-Improve-GetKeyboardLayoutList.patch
-	(
-		printf '%s\n' '+    { "Alistair Leslie-Hughes", "loader: Add Keyboard Layouts registry enteries.", 1 },';
-		printf '%s\n' '+    { "Alistair Leslie-Hughes", "user32: Improve GetKeyboardLayoutList.", 1 },';
-	) >> "$patchlist"
-fi
-
-# Patchset winex11.drv-mouse-coorrds
-# |
-# | This patchset fixes the following Wine bugs:
-# |   *	[#46309] winex11.drv: Use root-relative coordinates for events, if possible.
-# |
-# | Modified files:
-# |   *	dlls/winex11.drv/mouse.c
-# |
-if test "$enable_winex11_drv_mouse_coorrds" -eq 1; then
-	patch_apply winex11.drv-mouse-coorrds/0001-winex11.drv-mouse-Use-root-relative-coordinates-for-ev.patch
-	(
-		printf '%s\n' '+    { "Gabriel Ivăncescu", "winex11.drv/mouse: Use root-relative coordinates for events, if possible.", 1 },';
-	) >> "$patchlist"
-fi
-
-# Patchset user32-rawinput-mouse
-# |
-# | This patchset has the following (direct or indirect) dependencies:
-# |   *	loader-KeyboardLayouts, winex11.drv-mouse-coorrds
-# |
-# | This patchset fixes the following Wine bugs:
-# |   *	[#42631] Mouse drift, jump or don't react to small slow movements in Unity-engine games and Fallout 4 (partly fixed in
-# | 	Unity games, have walkaround in Fallout4 )
-# |   *	[#42675] Overwatch: Phantom mouse input / view pulled up to ceiling
-# |
-# | Modified files:
-# |   *	dlls/dinput/device_private.h, dlls/dinput/dinput_main.c, dlls/dinput/mouse.c, dlls/dinput8/tests/device.c,
-# | 	dlls/user32/input.c, dlls/user32/rawinput.c, dlls/user32/tests/input.c, dlls/user32/user32.spec,
-# | 	dlls/wineandroid.drv/keyboard.c, dlls/wineandroid.drv/window.c, dlls/winemac.drv/ime.c, dlls/winemac.drv/keyboard.c,
-# | 	dlls/winemac.drv/mouse.c, dlls/winex11.drv/event.c, dlls/winex11.drv/keyboard.c, dlls/winex11.drv/mouse.c,
-# | 	dlls/winex11.drv/x11drv.h, dlls/winex11.drv/x11drv_main.c, include/winuser.h, server/protocol.def, server/queue.c
-# |
-if test "$enable_user32_rawinput_mouse" -eq 1; then
-	patch_apply user32-rawinput-mouse/0001-user32-tests-Add-rawinput-test-for-ClipCursor-intera.patch
-	patch_apply user32-rawinput-mouse/0002-user32-tests-Add-rawinput-test-for-cross-thread-inte.patch
-	patch_apply user32-rawinput-mouse/0003-user32-tests-Add-rawinput-test-for-cross-process-int.patch
-	patch_apply user32-rawinput-mouse/0004-server-Add-send_hardware_message-flags-for-rawinput-.patch
-	patch_apply user32-rawinput-mouse/0005-server-Broadcast-rawinput-message-if-request-flag-is.patch
-	patch_apply user32-rawinput-mouse/0006-user32-Add-__wine_send_input-flags-to-hint-raw-input.patch
-	patch_apply user32-rawinput-mouse/0007-winex11.drv-Advertise-XInput2-version-2.1-support.patch
-	patch_apply user32-rawinput-mouse/0008-winex11.drv-Keep-track-of-pointer-and-device-button-.patch
-	patch_apply user32-rawinput-mouse/0009-winex11.drv-Listen-to-RawMotion-and-RawButton-events.patch
-	patch_apply user32-rawinput-mouse/0010-user32-Implement-GetRegisteredRawInputDevices.patch
-	patch_apply user32-rawinput-mouse/0011-dinput8-Add-support-for-dinput-devices-that-use-raw-.patch
-	patch_apply user32-rawinput-mouse/0012-dinput8-Use-raw-input-interface-for-dinput8-mouse-de.patch
-	patch_apply user32-rawinput-mouse/0013-dinput-Fix-rawinput-events-sequence-number.patch
-	(
-		printf '%s\n' '+    { "Rémi Bernon", "user32/tests: Add rawinput test for ClipCursor interactions.", 1 },';
-		printf '%s\n' '+    { "Rémi Bernon", "user32/tests: Add rawinput test for cross-thread interactions.", 1 },';
-		printf '%s\n' '+    { "Rémi Bernon", "user32/tests: Add rawinput test for cross-process interactions.", 1 },';
-		printf '%s\n' '+    { "Rémi Bernon", "server: Add send_hardware_message flags for rawinput translation.", 1 },';
-		printf '%s\n' '+    { "Rémi Bernon", "server: Broadcast rawinput message if request flag is SEND_HWMSG_RAWINPUT.", 1 },';
-		printf '%s\n' '+    { "Rémi Bernon", "user32: Add __wine_send_input flags to hint raw input translation.", 1 },';
-		printf '%s\n' '+    { "Rémi Bernon", "winex11.drv: Advertise XInput2 version 2.1 support.", 1 },';
-		printf '%s\n' '+    { "Rémi Bernon", "winex11.drv: Keep track of pointer and device button mappings.", 1 },';
-		printf '%s\n' '+    { "Rémi Bernon", "winex11.drv: Listen to RawMotion and RawButton* events in the desktop thread.", 1 },';
-		printf '%s\n' '+    { "Rémi Bernon", "user32: Implement GetRegisteredRawInputDevices.", 1 },';
-		printf '%s\n' '+    { "Rémi Bernon", "dinput8: Add support for dinput devices that use raw input interface.", 1 },';
-		printf '%s\n' '+    { "Rémi Bernon", "dinput8: Use raw input interface for dinput8 mouse device.", 1 },';
-		printf '%s\n' '+    { "Rémi Bernon", "dinput: Fix rawinput events sequence number.", 1 },';
-	) >> "$patchlist"
-fi
-
-# Patchset user32-rawinput-nolegacy
-# |
-# | This patchset has the following (direct or indirect) dependencies:
-# |   *	server-Key_State, loader-KeyboardLayouts, winex11.drv-mouse-coorrds, user32-rawinput-mouse
-# |
-# | Modified files:
-# |   *	dlls/dinput/dinput_main.c, dlls/dinput8/tests/device.c, dlls/user32/rawinput.c, server/queue.c
-# |
-if test "$enable_user32_rawinput_nolegacy" -eq 1; then
-	patch_apply user32-rawinput-nolegacy/0001-dinput8-tests-Add-test-for-DISCL_EXCLUSIVE-flag-inte.patch
-	patch_apply user32-rawinput-nolegacy/0002-user32-Add-support-for-RIDEV_NOLEGACY-flag-in-Regist.patch
-	patch_apply user32-rawinput-nolegacy/0003-dinput-Set-RIDEV_INPUTSINK-flag-only-when-DISCL_BACK.patch
-	patch_apply user32-rawinput-nolegacy/0004-dinput-Set-correct-rawinput-flags-for-DISCL_EXCLUSIV.patch
-	patch_apply user32-rawinput-nolegacy/0005-server-Update-desktop-cursor-pos-even-if-RIDEV_NOLEG.patch
-	patch_apply user32-rawinput-nolegacy/0006-server-Also-update-the-key-state-if-RIDEV_NOLEGACY-i.patch
-	(
-		printf '%s\n' '+    { "Rémi Bernon", "dinput8/tests: Add test for DISCL_EXCLUSIVE flag interaction with rawinput.", 1 },';
-		printf '%s\n' '+    { "Derek Lesho", "user32: Add support for RIDEV_NOLEGACY flag in RegisterRawInputDevices.", 1 },';
-		printf '%s\n' '+    { "Rémi Bernon", "dinput: Set RIDEV_INPUTSINK flag only when DISCL_BACKGROUND is requested.", 1 },';
-		printf '%s\n' '+    { "Rémi Bernon", "dinput: Set correct rawinput flags for DISCL_EXCLUSIVE.", 1 },';
-		printf '%s\n' '+    { "Rémi Bernon", "server: Update desktop cursor pos even if RIDEV_NOLEGACY flag is set.", 1 },';
-		printf '%s\n' '+    { "Rémi Bernon", "server: Also update the key state if RIDEV_NOLEGACY is used.", 1 },';
-	) >> "$patchlist"
-fi
-
-# Patchset server-Shared_Memory
-# |
-# | This patchset has the following (direct or indirect) dependencies:
-# |   *	ntdll-Threading, ntdll-ext4-case-folder, server-Key_State, server-PeekMessage, server-Signal_Thread, loader-
-# | 	KeyboardLayouts, winex11.drv-mouse-coorrds, user32-rawinput-mouse, user32-rawinput-nolegacy
-# |
-# | Modified files:
-# |   *	dlls/ntdll/ntdll_misc.h, dlls/ntdll/server.c, dlls/ntdll/thread.c, dlls/ntdll/virtual.c, dlls/user32/focus.c,
-# | 	dlls/user32/input.c, dlls/user32/message.c, dlls/user32/user_private.h, include/wine/server.h, include/winternl.h,
-# | 	server/fd.c, server/file.h, server/main.c, server/mapping.c, server/protocol.def, server/queue.c, server/thread.c,
-# | 	server/thread.h
-# |
-if test "$enable_server_Shared_Memory" -eq 1; then
-	patch_apply server-Shared_Memory/0001-ntdll-Implement-virtual_map_shared_memory.patch
-	patch_apply server-Shared_Memory/0002-server-Implement-support-for-global-and-local-shared.patch
-	patch_apply server-Shared_Memory/0003-user32-Get-rid-of-wineserver-call-for-GetInputState.patch
-	patch_apply server-Shared_Memory/0004-user32-Avoid-unnecessary-wineserver-calls-in-PeekMes.patch
-	patch_apply server-Shared_Memory/0005-user32-Get-rid-of-wineserver-call-for-GetLastInputIn.patch
-	patch_apply server-Shared_Memory/0006-ntdll-Only-enable-wineserver-shared-memory-communica.patch
-	patch_apply server-Shared_Memory/0007-server-Store-a-list-of-associated-queues-for-each-th.patch
-	patch_apply server-Shared_Memory/0008-user32-Get-rid-of-wineserver-call-for-GetActiveWindo.patch
-	(
-		printf '%s\n' '+    { "Sebastian Lackner", "ntdll: Implement virtual_map_shared_memory.", 1 },';
-		printf '%s\n' '+    { "Michael Müller", "server: Implement support for global and local shared memory blocks based on memfd.", 1 },';
-		printf '%s\n' '+    { "Sebastian Lackner", "user32: Get rid of wineserver call for GetInputState.", 1 },';
-		printf '%s\n' '+    { "Sebastian Lackner", "user32: Avoid unnecessary wineserver calls in PeekMessage/GetMessage.", 1 },';
-		printf '%s\n' '+    { "Michael Müller", "user32: Get rid of wineserver call for GetLastInputInfo.", 1 },';
-		printf '%s\n' '+    { "Sebastian Lackner", "ntdll: Only enable wineserver shared memory communication when a special environment variable is set.", 1 },';
-		printf '%s\n' '+    { "Sebastian Lackner", "server: Store a list of associated queues for each thread input.", 1 },';
-		printf '%s\n' '+    { "Sebastian Lackner", "user32: Get rid of wineserver call for GetActiveWindow, GetFocus, GetCapture.", 1 },';
-	) >> "$patchlist"
-fi
-
-# Patchset ws2_32-WSACleanup
-# |
-# | This patchset fixes the following Wine bugs:
-# |   *	[#18670] Properly close sockets when WSACleanup is called
-# |
-# | Modified files:
-# |   *	dlls/ntdll/ntdll.spec, dlls/ntdll/server.c, dlls/ws2_32/socket.c, dlls/ws2_32/tests/sock.c, include/wine/server.h,
-# | 	server/protocol.def, server/sock.c
-# |
-if test "$enable_ws2_32_WSACleanup" -eq 1; then
-	patch_apply ws2_32-WSACleanup/0001-ws2_32-Proper-WSACleanup-implementation-using-winese.patch
-	patch_apply ws2_32-WSACleanup/0002-ws2_32-Invalidate-client-side-file-descriptor-cache-.patch
-	(
-		printf '%s\n' '+    { "Matt Durgavich", "ws2_32: Proper WSACleanup implementation using wineserver function.", 2 },';
-		printf '%s\n' '+    { "Sebastian Lackner", "ws2_32: Invalidate client-side file descriptor cache in WSACleanup.", 1 },';
-	) >> "$patchlist"
-fi
-
-# Patchset eventfd_synchronization
-# |
-# | This patchset has the following (direct or indirect) dependencies:
-# |   *	Staging, advapi32-CreateRestrictedToken, advapi32-Token_Integrity_Level, kernel32-K32GetPerformanceInfo, ntdll-
-# | 	Junction_Points, winebuild-Fake_Dlls, ntdll-RtlCreateUserThread, ntdll-SystemRoot_Symlink, ntdll-ThreadTime, server-
-# | 	Realtime_Priority, ntdll-Threading, ntdll-ext4-case-folder, server-Key_State, server-PeekMessage, server-Signal_Thread,
-# | 	loader-KeyboardLayouts, winex11.drv-mouse-coorrds, user32-rawinput-mouse, user32-rawinput-nolegacy, server-
-# | 	Shared_Memory, ws2_32-WSACleanup
-# |
-# | This patchset fixes the following Wine bugs:
-# |   *	[#36692] Many multi-threaded applications have poor performance due to heavy use of synchronization primitives
-# |
-# | Modified files:
-# |   *	README.esync, configure.ac, dlls/kernel32/tests/sync.c, dlls/ntdll/Makefile.in, dlls/ntdll/critsection.c,
-# | 	dlls/ntdll/esync.c, dlls/ntdll/esync.h, dlls/ntdll/loader.c, dlls/ntdll/ntdll.spec, dlls/ntdll/ntdll_misc.h,
-# | 	dlls/ntdll/om.c, dlls/ntdll/server.c, dlls/ntdll/sync.c, dlls/ntdll/thread.c, dlls/rpcrt4/rpc_server.c,
-# | 	dlls/user32/hook.c, dlls/wineandroid.drv/window.c, dlls/winemac.drv/macdrv_main.c, dlls/winex11.drv/x11drv_main.c,
-# | 	server/Makefile.in, server/async.c, server/atom.c, server/change.c, server/clipboard.c, server/completion.c,
-# | 	server/console.c, server/debugger.c, server/device.c, server/directory.c, server/esync.c, server/esync.h,
-# | 	server/event.c, server/fd.c, server/file.c, server/file.h, server/handle.c, server/hook.c, server/mailslot.c,
-# | 	server/main.c, server/mapping.c, server/mutex.c, server/named_pipe.c, server/object.h, server/process.c,
-# | 	server/process.h, server/protocol.def, server/queue.c, server/registry.c, server/request.c, server/semaphore.c,
-# | 	server/serial.c, server/signal.c, server/snapshot.c, server/sock.c, server/symlink.c, server/thread.c, server/thread.h,
-# | 	server/timer.c, server/token.c, server/winstation.c
-# |
-if test "$enable_eventfd_synchronization" -eq 1; then
-	patch_apply eventfd_synchronization/0001-configure-Check-for-sys-eventfd.h-ppoll-and-shm_open.patch
-	patch_apply eventfd_synchronization/0002-server-Create-server-objects-for-eventfd-based-synch.patch
-	patch_apply eventfd_synchronization/0003-ntdll-Create-eventfd-based-objects-for-semaphores.patch
-	patch_apply eventfd_synchronization/0004-ntdll-Store-esync-objects-locally.patch
-	patch_apply eventfd_synchronization/0005-ntdll-Implement-NtReleaseSemaphore.patch
-	patch_apply eventfd_synchronization/0006-ntdll-Close-esync-objects.patch
-	patch_apply eventfd_synchronization/0007-ntdll-Implement-waiting-on-esync-objects.patch
-	patch_apply eventfd_synchronization/0008-ntdll-Create-esync-objects-for-events.patch
-	patch_apply eventfd_synchronization/0009-ntdll-Implement-NtSetEvent.patch
-	patch_apply eventfd_synchronization/0010-ntdll-Implement-NtResetEvent.patch
-	patch_apply eventfd_synchronization/0011-ntdll-Implement-NtPulseEvent.patch
-	patch_apply eventfd_synchronization/0012-ntdll-Implement-waiting-on-events.patch
-	patch_apply eventfd_synchronization/0013-server-Add-an-object-operation-to-grab-the-esync-fil.patch
-	patch_apply eventfd_synchronization/0014-server-Add-a-request-to-get-the-eventfd-file-descrip.patch
-	patch_apply eventfd_synchronization/0015-server-Create-eventfd-file-descriptors-for-process-o.patch
-	patch_apply eventfd_synchronization/0016-ntdll-server-Implement-waiting-on-server-bound-objec.patch
-	patch_apply eventfd_synchronization/0017-server-Create-eventfd-file-descriptors-for-event-obj.patch
-	patch_apply eventfd_synchronization/0018-server-Allow-re-setting-esync-events-on-the-server-s.patch
-	patch_apply eventfd_synchronization/0019-ntdll-Try-again-if-poll-returns-EINTR.patch
-	patch_apply eventfd_synchronization/0020-server-Create-eventfd-file-descriptors-for-thread-ob.patch
-	patch_apply eventfd_synchronization/0021-rpcrt4-Avoid-closing-the-server-thread-handle-while-.patch
-	patch_apply eventfd_synchronization/0022-server-Create-eventfd-file-descriptors-for-message-q.patch
-	patch_apply eventfd_synchronization/0023-ntdll-wineandroid.drv-winemac.drv-winex11.drv-Store-.patch
-	patch_apply eventfd_synchronization/0024-server-ntdll-Also-wait-on-the-queue-fd-when-waiting-.patch
-	patch_apply eventfd_synchronization/0025-server-Create-eventfd-descriptors-for-device-manager.patch
-	patch_apply eventfd_synchronization/0026-ntdll-Create-esync-objects-for-mutexes.patch
-	patch_apply eventfd_synchronization/0027-ntdll-Implement-NtReleaseMutant.patch
-	patch_apply eventfd_synchronization/0028-ntdll-Implement-waiting-on-mutexes.patch
-	patch_apply eventfd_synchronization/0029-ntdll-Implement-wait-all.patch
-	patch_apply eventfd_synchronization/0030-esync-Add-a-README.patch
-	patch_apply eventfd_synchronization/0031-ntdll-Implement-NtSignalAndWaitForSingleObject.patch
-	patch_apply eventfd_synchronization/0032-server-ntdll-Also-store-the-esync-type-in-the-server.patch
-	patch_apply eventfd_synchronization/0033-ntdll-server-Implement-NtOpenSemaphore.patch
-	patch_apply eventfd_synchronization/0034-ntdll-Implement-NtOpenEvent.patch
-	patch_apply eventfd_synchronization/0035-ntdll-Implement-NtOpenMutant.patch
-	patch_apply eventfd_synchronization/0036-ntdll-Record-the-current-count-of-a-semaphore-locall.patch
-	patch_apply eventfd_synchronization/0037-server-Implement-esync_map_access.patch
-	patch_apply eventfd_synchronization/0038-server-Alter-conditions-in-is_queue_hung.patch
-	patch_apply eventfd_synchronization/0039-ntdll-server-Allow-DuplicateHandle-to-succeed-by-imp.patch
-	patch_apply eventfd_synchronization/0040-server-Create-eventfd-descriptors-for-timers.patch
-	patch_apply eventfd_synchronization/0041-server-Allocate-shared-memory-segments-for-semaphore.patch
-	patch_apply eventfd_synchronization/0042-ntdll-Use-shared-memory-segments-to-store-semaphore-.patch
-	patch_apply eventfd_synchronization/0043-ntdll-Lock-creating-and-opening-objects-with-volatil.patch
-	patch_apply eventfd_synchronization/0044-server-ntdll-Pass-the-shared-memory-index-back-from-.patch
-	patch_apply eventfd_synchronization/0045-server-ntdll-Implement-alertable-waits.patch
-	patch_apply eventfd_synchronization/0046-esync-Update-README.patch
-	patch_apply eventfd_synchronization/0047-kernel32-tests-Mark-some-existing-tests-as-failing-u.patch
-	patch_apply eventfd_synchronization/0048-kernel32-tests-Add-some-semaphore-tests.patch
-	patch_apply eventfd_synchronization/0049-kernel32-tests-Add-some-event-tests.patch
-	patch_apply eventfd_synchronization/0050-kernel32-tests-Add-some-mutex-tests.patch
-	patch_apply eventfd_synchronization/0051-kernel32-tests-Add-some-tests-for-wait-timeouts.patch
-	patch_apply eventfd_synchronization/0052-ntdll-Go-through-the-server-if-necessary-when-perfor.patch
-	patch_apply eventfd_synchronization/0053-server-Create-eventfd-descriptors-for-console_input_.patch
-	patch_apply eventfd_synchronization/0054-server-Alter-conditions-in-is_queue_hung-again.patch
-	patch_apply eventfd_synchronization/0055-ntdll-Let-the-server-know-when-we-are-doing-a-messag.patch
-	patch_apply eventfd_synchronization/0056-ntdll-Avoid-server_select-when-waiting-for-critical-.patch
-	patch_apply eventfd_synchronization/0057-user32-Remove-hooks-that-time-out.patch
-	patch_apply eventfd_synchronization/0058-server-Don-t-check-for-a-hung-queue-when-sending-low.patch
-	patch_apply eventfd_synchronization/0059-kernel32-tests-Zigzag-test.patch
-	patch_apply eventfd_synchronization/0060-server-Try-to-remove-a-pre-xisting-shm-file.patch
-	patch_apply eventfd_synchronization/0061-ntdll-Implement-NtQuerySemaphore.patch
-	patch_apply eventfd_synchronization/0062-ntdll-Implement-NtQueryEvent.patch
-	patch_apply eventfd_synchronization/0063-ntdll-Implement-NtQueryMutant.patch
-	patch_apply eventfd_synchronization/0064-server-Create-eventfd-descriptors-for-pseudo-fd-obje.patch
-	patch_apply eventfd_synchronization/0065-ntdll-Cache-the-esync-struct-itself-instead-of-a-poi.patch
-	patch_apply eventfd_synchronization/0066-esync-Update-README.patch
-	patch_apply eventfd_synchronization/0067-esync-Add-note-about-file-limits-not-being-raised-wh.patch
-	patch_apply eventfd_synchronization/0068-ntdll-Ignore-pseudo-handles.patch
-	patch_apply eventfd_synchronization/0069-ntdll-Try-to-avoid-poll-for-uncontended-objects.patch
-	patch_apply eventfd_synchronization/0070-ntdll-Store-an-event-s-signaled-state-internally.patch
-	patch_apply eventfd_synchronization/0071-ntdll-Fix-growing-the-shm_addrs-array.patch
-	patch_apply eventfd_synchronization/0072-server-Update-the-shared-memory-state-when-re-settin.patch
-	patch_apply eventfd_synchronization/0073-ntdll-Fix-a-missing-break-statement.patch
-	patch_apply eventfd_synchronization/0074-ntdll-server-Abort-if-esync-is-enabled-for-the-serve.patch
-	patch_apply eventfd_synchronization/0075-esync-Update-README.patch
-	patch_apply eventfd_synchronization/0076-ntdll-Correctly-allocate-the-esync-handle-cache.patch
-	patch_apply eventfd_synchronization/0077-ntdll-server-Specify-EFD_SEMAPHORE-on-the-server-sid.patch
-	patch_apply eventfd_synchronization/0078-ntdll-server-Initialize-the-shared-memory-portion-on.patch
-	patch_apply eventfd_synchronization/0079-ntdll-server-Revert-to-old-implementation-of-hung-qu.patch
-	patch_apply eventfd_synchronization/0080-ntdll-Fix-a-couple-of-misplaced-global-variables.patch
-	patch_apply eventfd_synchronization/0081-ntdll-Yield-during-PulseEvent.patch
-	patch_apply eventfd_synchronization/0082-ntdll-server-Check-the-value-of-WINEESYNC-instead-of.patch
-	patch_apply eventfd_synchronization/0083-esync-Update-README.patch
-	patch_apply eventfd_synchronization/0084-server-Use-default_fd_get_esync_fd-for-directory-cha.patch
-	patch_apply eventfd_synchronization/0085-server-Only-signal-the-APC-fd-for-user-APCs.patch
-	patch_apply eventfd_synchronization/0086-ntdll-Check-the-APC-fd-first.patch
-	patch_apply eventfd_synchronization/0087-ntdll-esync-Lock-accessing-the-shm_addrs-array.patch
-	patch_apply eventfd_synchronization/0088-ntdll-Get-rid-of-the-per-event-spinlock-for-auto-res.patch
-	patch_apply eventfd_synchronization/0089-ntdll-server-Abandon-esync-mutexes-on-thread-exit.patch
-	(
-		printf '%s\n' '+    { "Zebediah Figura", "configure: Check for sys/eventfd.h, ppoll(), and shm_open().", 1 },';
-		printf '%s\n' '+    { "Zebediah Figura", "server: Create server objects for eventfd-based synchronization objects.", 1 },';
-		printf '%s\n' '+    { "Zebediah Figura", "ntdll: Create eventfd-based objects for semaphores.", 1 },';
-		printf '%s\n' '+    { "Zebediah Figura", "ntdll: Store esync objects locally.", 1 },';
-		printf '%s\n' '+    { "Zebediah Figura", "ntdll: Implement NtReleaseSemaphore().", 1 },';
-		printf '%s\n' '+    { "Zebediah Figura", "ntdll: Close esync objects.", 1 },';
-		printf '%s\n' '+    { "Zebediah Figura", "ntdll: Implement waiting on esync objects.", 1 },';
-		printf '%s\n' '+    { "Zebediah Figura", "ntdll: Create esync objects for events.", 1 },';
-		printf '%s\n' '+    { "Zebediah Figura", "ntdll: Implement NtSetEvent().", 1 },';
-		printf '%s\n' '+    { "Zebediah Figura", "ntdll: Implement NtResetEvent().", 1 },';
-		printf '%s\n' '+    { "Zebediah Figura", "ntdll: Implement NtPulseEvent().", 1 },';
-		printf '%s\n' '+    { "Zebediah Figura", "ntdll: Implement waiting on events.", 1 },';
-		printf '%s\n' '+    { "Zebediah Figura", "server: Add an object operation to grab the esync file descriptor.", 1 },';
-		printf '%s\n' '+    { "Zebediah Figura", "server: Add a request to get the eventfd file descriptor associated with a waitable handle.", 1 },';
-		printf '%s\n' '+    { "Zebediah Figura", "server: Create eventfd file descriptors for process objects.", 1 },';
-		printf '%s\n' '+    { "Zebediah Figura", "ntdll, server: Implement waiting on server-bound objects.", 1 },';
-		printf '%s\n' '+    { "Zebediah Figura", "server: Create eventfd file descriptors for event objects.", 1 },';
-		printf '%s\n' '+    { "Zebediah Figura", "server: Allow (re)setting esync events on the server side.", 1 },';
-		printf '%s\n' '+    { "Zebediah Figura", "ntdll: Try again if poll() returns EINTR.", 1 },';
-		printf '%s\n' '+    { "Zebediah Figura", "server: Create eventfd file descriptors for thread objects.", 1 },';
-		printf '%s\n' '+    { "Zebediah Figura", "rpcrt4: Avoid closing the server thread handle while it is being waited on.", 1 },';
-		printf '%s\n' '+    { "Zebediah Figura", "server: Create eventfd file descriptors for message queues.", 1 },';
-		printf '%s\n' '+    { "Zebediah Figura", "ntdll, wineandroid.drv, winemac.drv, winex11.drv: Store the thread'\''s queue fd in ntdll.", 1 },';
-		printf '%s\n' '+    { "Zebediah Figura", "server, ntdll: Also wait on the queue fd when waiting for driver events.", 1 },';
-		printf '%s\n' '+    { "Zebediah Figura", "server: Create eventfd descriptors for device manager objects.", 1 },';
-		printf '%s\n' '+    { "Zebediah Figura", "ntdll: Create esync objects for mutexes.", 1 },';
-		printf '%s\n' '+    { "Zebediah Figura", "ntdll: Implement NtReleaseMutant().", 1 },';
-		printf '%s\n' '+    { "Zebediah Figura", "ntdll: Implement waiting on mutexes.", 1 },';
-		printf '%s\n' '+    { "Zebediah Figura", "ntdll: Implement wait-all.", 1 },';
-		printf '%s\n' '+    { "Zebediah Figura", "esync: Add a README.", 1 },';
-		printf '%s\n' '+    { "Zebediah Figura", "ntdll: Implement NtSignalAndWaitForSingleObject().", 1 },';
-		printf '%s\n' '+    { "Zebediah Figura", "server, ntdll: Also store the esync type in the server.", 1 },';
-		printf '%s\n' '+    { "Zebediah Figura", "ntdll, server: Implement NtOpenSemaphore().", 1 },';
-		printf '%s\n' '+    { "Zebediah Figura", "ntdll: Implement NtOpenEvent().", 1 },';
-		printf '%s\n' '+    { "Zebediah Figura", "ntdll: Implement NtOpenMutant().", 1 },';
-		printf '%s\n' '+    { "Zebediah Figura", "ntdll: Record the current count of a semaphore locally.", 1 },';
-		printf '%s\n' '+    { "Zebediah Figura", "server: Implement esync_map_access().", 1 },';
-		printf '%s\n' '+    { "Zebediah Figura", "server: Alter conditions in is_queue_hung().", 1 },';
-		printf '%s\n' '+    { "Zebediah Figura", "ntdll, server: Allow DuplicateHandle() to succeed by implementing esync_get_esync_fd().", 1 },';
-		printf '%s\n' '+    { "Zebediah Figura", "server: Create eventfd descriptors for timers.", 1 },';
-		printf '%s\n' '+    { "Zebediah Figura", "server: Allocate shared memory segments for semaphores and mutexes.", 1 },';
-		printf '%s\n' '+    { "Zebediah Figura", "ntdll: Use shared memory segments to store semaphore and mutex state.", 1 },';
-		printf '%s\n' '+    { "Zebediah Figura", "ntdll: Lock creating and opening objects with volatile state.", 1 },';
-		printf '%s\n' '+    { "Zebediah Figura", "server, ntdll: Pass the shared memory index back from get_esync_fd.", 1 },';
-		printf '%s\n' '+    { "Zebediah Figura", "server, ntdll: Implement alertable waits.", 1 },';
-		printf '%s\n' '+    { "Zebediah Figura", "esync: Update README.", 1 },';
-		printf '%s\n' '+    { "Zebediah Figura", "kernel32/tests: Mark some existing tests as failing under esync.", 1 },';
-		printf '%s\n' '+    { "Zebediah Figura", "kernel32/tests: Add some semaphore tests.", 1 },';
-		printf '%s\n' '+    { "Zebediah Figura", "kernel32/tests: Add some event tests.", 1 },';
-		printf '%s\n' '+    { "Zebediah Figura", "kernel32/tests: Add some mutex tests.", 1 },';
-		printf '%s\n' '+    { "Zebediah Figura", "kernel32/tests: Add some tests for wait timeouts.", 1 },';
-		printf '%s\n' '+    { "Zebediah Figura", "ntdll: Go through the server if necessary when performing event/semaphore/mutex ops.", 1 },';
-		printf '%s\n' '+    { "Zebediah Figura", "server: Create eventfd descriptors for console_input_events objects.", 1 },';
-		printf '%s\n' '+    { "Zebediah Figura", "server: Alter conditions in is_queue_hung(), again.", 1 },';
-		printf '%s\n' '+    { "Zebediah Figura", "ntdll: Let the server know when we are doing a message wait.", 1 },';
-		printf '%s\n' '+    { "Zebediah Figura", "ntdll: Avoid server_select() when waiting for critical sections.", 1 },';
-		printf '%s\n' '+    { "Zebediah Figura", "user32: Remove hooks that time out.", 1 },';
-		printf '%s\n' '+    { "Zebediah Figura", "server: Don'\''t check for a hung queue when sending low-level hooks.", 1 },';
-		printf '%s\n' '+    { "Zebediah Figura", "kernel32/tests: Zigzag test.", 1 },';
-		printf '%s\n' '+    { "Zebediah Figura", "=?UTF-8?q?server:=20Try=20to=20remove=20a=20pre?= =?UTF-8?q?=C3=ABxisting=20shm=20file.?=.", 1 },';
-		printf '%s\n' '+    { "Zebediah Figura", "ntdll: Implement NtQuerySemaphore().", 1 },';
-		printf '%s\n' '+    { "Zebediah Figura", "ntdll: Implement NtQueryEvent().", 1 },';
-		printf '%s\n' '+    { "Zebediah Figura", "ntdll: Implement NtQueryMutant().", 1 },';
-		printf '%s\n' '+    { "Zebediah Figura", "server: Create eventfd descriptors for pseudo-fd objects and use them for named pipes.", 1 },';
-		printf '%s\n' '+    { "Zebediah Figura", "ntdll: Cache the esync struct itself instead of a pointer to it.", 1 },';
-		printf '%s\n' '+    { "Zebediah Figura", "esync: Update README.", 1 },';
-		printf '%s\n' '+    { "Mathieu Comandon", "esync: Add note about file limits not being raised when using systemd.", 1 },';
-		printf '%s\n' '+    { "Zebediah Figura", "ntdll: Ignore pseudo-handles.", 1 },';
-		printf '%s\n' '+    { "Zebediah Figura", "ntdll: Try to avoid poll() for uncontended objects.", 1 },';
-		printf '%s\n' '+    { "Zebediah Figura", "ntdll: Store an event'\''s signaled state internally.", 1 },';
-		printf '%s\n' '+    { "Zebediah Figura", "ntdll: Fix growing the shm_addrs array.", 1 },';
-		printf '%s\n' '+    { "Zebediah Figura", "server: Update the shared memory state when (re)setting an event.", 1 },';
-		printf '%s\n' '+    { "Zebediah Figura", "ntdll: Fix a missing break statement.", 1 },';
-		printf '%s\n' '+    { "Zebediah Figura", "ntdll, server: Abort if esync is enabled for the server but not the client, and vice versa.", 1 },';
-		printf '%s\n' '+    { "Zebediah Figura", "esync: Update README.", 1 },';
-		printf '%s\n' '+    { "Zebediah Figura", "ntdll: Correctly allocate the esync handle cache.", 1 },';
-		printf '%s\n' '+    { "Zebediah Figura", "ntdll, server: Specify EFD_SEMAPHORE on the server side.", 1 },';
-		printf '%s\n' '+    { "Zebediah Figura", "ntdll, server: Initialize the shared memory portion on the server side.", 1 },';
-		printf '%s\n' '+    { "Zebediah Figura", "ntdll, server: Revert to old implementation of hung queue detection.", 1 },';
-		printf '%s\n' '+    { "Zebediah Figura", "ntdll: Fix a couple of misplaced global variables.", 1 },';
-		printf '%s\n' '+    { "Zebediah Figura", "ntdll: Yield during PulseEvent().", 1 },';
-		printf '%s\n' '+    { "Zebediah Figura", "ntdll, server: Check the value of WINEESYNC instead of just the presence.", 1 },';
-		printf '%s\n' '+    { "Zebediah Figura", "esync: Update README.", 1 },';
-		printf '%s\n' '+    { "Zebediah Figura", "server: Create esync file descriptors for true file objects and use them for directory change notifications.", 1 },';
-		printf '%s\n' '+    { "Zebediah Figura", "server: Only signal the APC fd for user APCs.", 1 },';
-		printf '%s\n' '+    { "Zebediah Figura", "ntdll: Check the APC fd first.", 1 },';
-		printf '%s\n' '+    { "Zebediah Figura", "ntdll/esync: Lock accessing the shm_addrs array.", 1 },';
-		printf '%s\n' '+    { "Zebediah Figura", "ntdll: Get rid of the per-event spinlock for auto-reset events.", 1 },';
-		printf '%s\n' '+    { "Zebediah Figura", "ntdll, server: Abandon esync mutexes on thread exit.", 1 },';
-	) >> "$patchlist"
-fi
-
-# Patchset explorer-Video_Registry_Key
-# |
-# | Modified files:
-# |   *	dlls/advapi32/tests/registry.c, programs/explorer/desktop.c
-# |
-if test "$enable_explorer_Video_Registry_Key" -eq 1; then
-	patch_apply explorer-Video_Registry_Key/0001-explorer-Create-CurrentControlSet-Control-Video-regi.patch
-	(
-		printf '%s\n' '+    { "Michael Müller", "explorer: Create CurrentControlSet\\Control\\Video registry key as non-volatile.", 1 },';
-	) >> "$patchlist"
-fi
-
-# Patchset fonts-Missing_Fonts
-# |
-# | This patchset fixes the following Wine bugs:
-# |   *	[#32323] Implement an Arial replacement font
-# |   *	[#32342] Implement a Times New Roman replacement font
-# |   *	[#20456] Implement a Courier New replacement font
-# |   *	[#13829] Implement a Microsoft Yahei replacement font
-# |
-# | Modified files:
-# |   *	COPYING.arial, COPYING.cour, COPYING.msyh, COPYING.times, LICENSE, fonts/Makefile.in, fonts/arial.sfd, fonts/arial.ttf,
-# | 	fonts/cour.sfd, fonts/cour.ttf, fonts/msyh.sfd, fonts/msyh.ttf, fonts/times.sfd, fonts/times.ttf
-# |
-if test "$enable_fonts_Missing_Fonts" -eq 1; then
-	patch_apply fonts-Missing_Fonts/0001-fonts-Add-Liberation-Sans-as-an-Arial-replacement.patch
-	patch_apply fonts-Missing_Fonts/0002-fonts-Add-Liberation-Serif-as-an-Times-New-Roman-rep.patch
-	patch_apply fonts-Missing_Fonts/0003-fonts-Add-Liberation-Mono-as-an-Courier-New-replacem.patch
-	patch_apply fonts-Missing_Fonts/0004-fonts-Add-WenQuanYi-Micro-Hei-as-a-Microsoft-Yahei-r.patch
-	patch_apply fonts-Missing_Fonts/0005-Add-licenses-for-fonts-as-separate-files.patch
-	(
-		printf '%s\n' '+    { "Torsten Kurbad", "fonts: Add Liberation Sans as an Arial replacement.", 2 },';
-		printf '%s\n' '+    { "Sebastian Lackner", "fonts: Add Liberation Serif as an Times New Roman replacement.", 1 },';
-		printf '%s\n' '+    { "Sebastian Lackner", "fonts: Add Liberation Mono as an Courier New replacement.", 1 },';
-		printf '%s\n' '+    { "Erich E. Hoover", "fonts: Add WenQuanYi Micro Hei as a Microsoft Yahei replacement.", 1 },';
-		printf '%s\n' '+    { "Michael Müller", "Add licenses for fonts as separate files.", 1 },';
-	) >> "$patchlist"
-fi
-
-# Patchset fsutil-Stub_Program
-# |
-# | This patchset fixes the following Wine bugs:
-# |   *	[#22749] Add stub for fsutil.exe hardlink command
-# |
-# | Modified files:
-# |   *	programs/fsutil/Makefile.in, programs/fsutil/fsutil.rc, programs/fsutil/main.c, programs/fsutil/resources.h
-# |
-if test "$enable_fsutil_Stub_Program" -eq 1; then
-	patch_apply fsutil-Stub_Program/0001-fsutil-Add-fsutil-program-with-support-for-creating-.patch
-	(
-		printf '%s\n' '+    { "Michael Müller", "fsutil: Add fsutil program with support for creating hard links.", 1 },';
-	) >> "$patchlist"
-fi
-
-# Patchset gdi32-Lazy_Font_Initialization
-# |
-# | Modified files:
-# |   *	dlls/gdi32/dc.c, dlls/gdi32/freetype.c
-# |
-if test "$enable_gdi32_Lazy_Font_Initialization" -eq 1; then
-	patch_apply gdi32-Lazy_Font_Initialization/0001-gdi32-Perform-lazy-initialization-of-fonts-to-improv.patch
-	(
-		printf '%s\n' '+    { "Sebastian Lackner", "gdi32: Perform lazy initialization of fonts to improve startup performance.", 1 },';
-	) >> "$patchlist"
-fi
-
-# Patchset gdi32-rotation
-# |
-# | This patchset fixes the following Wine bugs:
-# |   *	[#34579] gdi32: fix for rotated Arc, ArcTo, Chord and Pie drawing problem
-# |   *	[#35331] gdi32: fix for rotated ellipse
-# |
-# | Modified files:
-# |   *	dlls/gdi32/dibdrv/graphics.c, dlls/gdi32/gdi_private.h
-# |
-if test "$enable_gdi32_rotation" -eq 1; then
-	patch_apply gdi32-rotation/0001-gdi32-fix-for-rotated-Arc-ArcTo-Chord-and-Pie-drawin.patch
-	patch_apply gdi32-rotation/0002-gdi32-fix-for-rotated-ellipse.patch
-	(
-		printf '%s\n' '+    { "Daniel Wendt", "gdi32: Fix for rotated Arc, ArcTo, Chord and Pie drawing problem.", 1 },';
-		printf '%s\n' '+    { "Daniel Wendt", "gdi32: Fix for rotated ellipse.", 1 },';
-	) >> "$patchlist"
-fi
-
-# Patchset gdiplus-Performance-Improvements
+# Patchset gdiplus-Performance-Improvements
 # |
 # | Modified files:
 # |   *	dlls/gdiplus/graphics.c
@@ -3926,6 +3222,58 @@ if test "$enable_iphlpapi_System_Ping" -eq 1; then
 	) >> "$patchlist"
 fi
 
+# Patchset ntdll-Junction_Points
+# |
+# | This patchset fixes the following Wine bugs:
+# |   *	[#12401] NET Framework 2.0, 3.0, 4.0 installers and other apps that make use of GAC API for managed assembly
+# | 	installation on NTFS filesystems need reparse point/junction API support
+# | 	(FSCTL_SET_REPARSE_POINT/FSCTL_GET_REPARSE_POINT)
+# |   *	[#44948] Multiple apps (Spine (Mod starter for Gothic), MS Office 365 installer) need CreateSymbolicLinkW implementation
+# |
+# | Modified files:
+# |   *	configure.ac, dlls/kernel32/path.c, dlls/ntdll/directory.c, dlls/ntdll/file.c, dlls/ntdll/tests/file.c,
+# | 	include/Makefile.in, include/ntifs.h, include/wine/port.h, include/winternl.h, libs/port/Makefile.in,
+# | 	libs/port/renameat2.c, server/fd.c
+# |
+if test "$enable_ntdll_Junction_Points" -eq 1; then
+	patch_apply ntdll-Junction_Points/0001-ntdll-Add-support-for-junction-point-creation.patch
+	patch_apply ntdll-Junction_Points/0002-ntdll-Add-support-for-reading-junction-points.patch
+	patch_apply ntdll-Junction_Points/0003-ntdll-Add-support-for-deleting-junction-points.patch
+	patch_apply ntdll-Junction_Points/0004-ntdll-Add-a-test-for-junction-point-advertisement.patch
+	patch_apply ntdll-Junction_Points/0005-kernel32-ntdll-Add-support-for-deleting-junction-poi.patch
+	patch_apply ntdll-Junction_Points/0007-ntdll-Add-support-for-absolute-symlink-creation.patch
+	patch_apply ntdll-Junction_Points/0008-ntdll-Add-support-for-reading-absolute-symlinks.patch
+	patch_apply ntdll-Junction_Points/0009-ntdll-Add-support-for-deleting-symlinks.patch
+	patch_apply ntdll-Junction_Points/0010-ntdll-Add-support-for-relative-symlink-creation.patch
+	patch_apply ntdll-Junction_Points/0011-ntdll-Add-support-for-reading-relative-symlinks.patch
+	patch_apply ntdll-Junction_Points/0012-ntdll-Add-support-for-file-symlinks.patch
+	patch_apply ntdll-Junction_Points/0013-ntdll-Allow-creation-of-dangling-reparse-points-to-n.patch
+	patch_apply ntdll-Junction_Points/0014-ntdll-Correctly-report-file-symbolic-links-as-files.patch
+	patch_apply ntdll-Junction_Points/0015-kernel32-Set-error-code-when-attempting-to-delete-fi.patch
+	patch_apply ntdll-Junction_Points/0016-server-Properly-handle-file-symlink-deletion.patch
+	patch_apply ntdll-Junction_Points/0017-ntdll-Always-report-symbolic-links-as-containing-zer.patch
+	patch_apply ntdll-Junction_Points/0018-ntdll-Find-dangling-symlinks-quickly.patch
+	(
+		printf '%s\n' '+    { "Erich E. Hoover", "ntdll: Add support for junction point creation.", 1 },';
+		printf '%s\n' '+    { "Erich E. Hoover", "ntdll: Add support for reading junction points.", 1 },';
+		printf '%s\n' '+    { "Erich E. Hoover", "ntdll: Add support for deleting junction points.", 1 },';
+		printf '%s\n' '+    { "Erich E. Hoover", "ntdll: Add a test for junction point advertisement.", 1 },';
+		printf '%s\n' '+    { "Erich E. Hoover", "kernel32,ntdll: Add support for deleting junction points with RemoveDirectory.", 1 },';
+		printf '%s\n' '+    { "Erich E. Hoover", "ntdll: Add support for absolute symlink creation.", 1 },';
+		printf '%s\n' '+    { "Erich E. Hoover", "ntdll: Add support for reading absolute symlinks.", 1 },';
+		printf '%s\n' '+    { "Erich E. Hoover", "ntdll: Add support for deleting symlinks.", 1 },';
+		printf '%s\n' '+    { "Erich E. Hoover", "ntdll: Add support for relative symlink creation.", 1 },';
+		printf '%s\n' '+    { "Erich E. Hoover", "ntdll: Add support for reading relative symlinks.", 1 },';
+		printf '%s\n' '+    { "Erich E. Hoover", "ntdll: Add support for file symlinks.", 1 },';
+		printf '%s\n' '+    { "Erich E. Hoover", "ntdll: Allow creation of dangling reparse points to non-existent paths.", 1 },';
+		printf '%s\n' '+    { "Erich E. Hoover", "ntdll: Correctly report file symbolic links as files.", 1 },';
+		printf '%s\n' '+    { "Erich E. Hoover", "kernel32: Set error code when attempting to delete file symlinks as directories.", 1 },';
+		printf '%s\n' '+    { "Erich E. Hoover", "server: Properly handle file symlink deletion.", 1 },';
+		printf '%s\n' '+    { "Erich E. Hoover", "ntdll: Always report symbolic links as containing zero bytes.", 1 },';
+		printf '%s\n' '+    { "Erich E. Hoover", "ntdll: Find dangling symlinks quickly.", 1 },';
+	) >> "$patchlist"
+fi
+
 # Patchset server-File_Permissions
 # |
 # | This patchset has the following (direct or indirect) dependencies:
@@ -4035,6 +3383,18 @@ if test "$enable_kernel32_Job_Tests" -eq 1; then
 	) >> "$patchlist"
 fi
 
+# Patchset kernel32-K32GetPerformanceInfo
+# |
+# | Modified files:
+# |   *	dlls/kernelbase/debug.c, server/process.c, server/protocol.def
+# |
+if test "$enable_kernel32_K32GetPerformanceInfo" -eq 1; then
+	patch_apply kernel32-K32GetPerformanceInfo/0001-kernel32-Make-K32GetPerformanceInfo-faster.patch
+	(
+		printf '%s\n' '+    { "Michael Müller", "kernel32: Make K32GetPerformanceInfo faster.", 1 },';
+	) >> "$patchlist"
+fi
+
 # Patchset kernel32-Processor_Group
 # |
 # | This patchset has the following (direct or indirect) dependencies:
@@ -4103,6 +3463,23 @@ if test "$enable_krnl386_exe16_Invalid_Console_Handles" -eq 1; then
 	) >> "$patchlist"
 fi
 
+# Patchset loader-KeyboardLayouts
+# |
+# | This patchset fixes the following Wine bugs:
+# |   *	[#47439] loader: Add Keyboard Layouts registry enteries.
+# |
+# | Modified files:
+# |   *	dlls/user32/driver.c, dlls/user32/tests/input.c, loader/wine.inf.in
+# |
+if test "$enable_loader_KeyboardLayouts" -eq 1; then
+	patch_apply loader-KeyboardLayouts/0001-loader-Add-Keyboard-Layouts-registry-enteries.patch
+	patch_apply loader-KeyboardLayouts/0002-user32-Improve-GetKeyboardLayoutList.patch
+	(
+		printf '%s\n' '+    { "Alistair Leslie-Hughes", "loader: Add Keyboard Layouts registry enteries.", 1 },';
+		printf '%s\n' '+    { "Alistair Leslie-Hughes", "user32: Improve GetKeyboardLayoutList.", 1 },';
+	) >> "$patchlist"
+fi
+
 # Patchset mmsystem.dll16-MIDIHDR_Refcount
 # |
 # | This patchset fixes the following Wine bugs:
@@ -4246,6 +3623,32 @@ if test "$enable_ntdll_Activation_Context" -eq 1; then
 	) >> "$patchlist"
 fi
 
+# Patchset ntdll-ThreadTime
+# |
+# | This patchset fixes the following Wine bugs:
+# |   *	[#20230] Return correct values for GetThreadTimes function
+# |
+# | Modified files:
+# |   *	dlls/ntdll/nt.c, dlls/ntdll/ntdll_misc.h, dlls/ntdll/process.c, dlls/ntdll/thread.c, server/protocol.def,
+# | 	server/snapshot.c, server/thread.c, server/thread.h
+# |
+if test "$enable_ntdll_ThreadTime" -eq 1; then
+	patch_apply ntdll-ThreadTime/0001-ntdll-Return-correct-values-in-GetThreadTimes-for-al.patch
+	patch_apply ntdll-ThreadTime/0002-ntdll-Set-correct-thread-creation-time-for-SystemPro.patch
+	patch_apply ntdll-ThreadTime/0003-ntdll-Fill-process-kernel-and-user-time.patch
+	patch_apply ntdll-ThreadTime/0004-ntdll-Set-process-start-time.patch
+	patch_apply ntdll-ThreadTime/0005-ntdll-Fill-out-thread-times-in-process-enumeration.patch
+	patch_apply ntdll-ThreadTime/0006-ntdll-Fill-process-virtual-memory-counters-in-NtQuer.patch
+	(
+		printf '%s\n' '+    { "Sebastian Lackner", "ntdll: Return correct values in GetThreadTimes() for all threads.", 1 },';
+		printf '%s\n' '+    { "Michael Müller", "ntdll: Set correct thread creation time for SystemProcessInformation in NtQuerySystemInformation.", 1 },';
+		printf '%s\n' '+    { "Michael Müller", "ntdll: Fill process kernel and user time.", 1 },';
+		printf '%s\n' '+    { "Michael Müller", "ntdll: Set process start time.", 1 },';
+		printf '%s\n' '+    { "Michael Müller", "ntdll: Fill out thread times in process enumeration.", 1 },';
+		printf '%s\n' '+    { "Michael Müller", "ntdll: Fill process virtual memory counters in NtQuerySystemInformation.", 1 },';
+	) >> "$patchlist"
+fi
+
 # Patchset ntdll-ApiSetMap
 # |
 # | This patchset has the following (direct or indirect) dependencies:
@@ -4573,12 +3976,60 @@ fi
 # Patchset ntdll-NtAccessCheck
 # |
 # | Modified files:
-# |   *	dlls/advapi32/tests/security.c, dlls/ntdll/sec.c
+# |   *	dlls/advapi32/tests/security.c, dlls/ntdll/sec.c
+# |
+if test "$enable_ntdll_NtAccessCheck" -eq 1; then
+	patch_apply ntdll-NtAccessCheck/0001-ntdll-Improve-invalid-paramater-handling-in-NtAccess.patch
+	(
+		printf '%s\n' '+    { "Qian Hong", "ntdll: Improve invalid paramater handling in NtAccessCheck.", 1 },';
+	) >> "$patchlist"
+fi
+
+# Patchset winebuild-Fake_Dlls
+# |
+# | This patchset fixes the following Wine bugs:
+# |   *	[#21232] Chromium-based browser engines (Chrome, Opera, Comodo Dragon, SRWare Iron) crash on startup unless '--no-
+# | 	sandbox' is used (native API sandboxing/hooking scheme incompatible with Wine)
+# |   *	[#42741] StarCraft I: 1.18 PTR fails to initialize ClientSdk.dll
+# |   *	[#45349] Multiple applications and games crash due to missing support for 64-bit syscall thunks (StreetFighter V)
+# |   *	[#45573] League of Legends 8.12+ fails to start a game (anticheat engine, hooking of syscall return instructions)
+# |   *	[#45650] chromium 32-bit sandbox expects different syscall thunks depending on Windows version
+# |
+# | Modified files:
+# |   *	dlls/dbghelp/cpu_i386.c, dlls/kernel32/tests/loader.c, dlls/krnl386.exe16/kernel.c,
+# | 	dlls/krnl386.exe16/kernel16_private.h, dlls/krnl386.exe16/ne_module.c, dlls/krnl386.exe16/ne_segment.c,
+# | 	dlls/krnl386.exe16/task.c, dlls/krnl386.exe16/thunk.c, dlls/krnl386.exe16/wowthunk.c, dlls/ntdll/actctx.c,
+# | 	dlls/ntdll/directory.c, dlls/ntdll/loader.c, dlls/ntdll/locale.c, dlls/ntdll/ntdll_misc.h, dlls/ntdll/path.c,
+# | 	dlls/ntdll/process.c, dlls/ntdll/signal_i386.c, dlls/ntdll/tests/exception.c, dlls/ntdll/thread.c,
+# | 	dlls/system.drv16/system.c, dlls/toolhelp.dll16/toolhelp.c, dlls/user.exe16/message.c, dlls/user.exe16/user.c,
+# | 	dlls/user.exe16/window.c, include/winternl.h, libs/wine/loader.c, server/mapping.c, tools/winebuild/build.h,
+# | 	tools/winebuild/import.c, tools/winebuild/parser.c, tools/winebuild/relay.c, tools/winebuild/res32.c,
+# | 	tools/winebuild/spec16.c, tools/winebuild/spec32.c, tools/winebuild/utils.c
 # |
-if test "$enable_ntdll_NtAccessCheck" -eq 1; then
-	patch_apply ntdll-NtAccessCheck/0001-ntdll-Improve-invalid-paramater-handling-in-NtAccess.patch
+if test "$enable_winebuild_Fake_Dlls" -eq 1; then
+	patch_apply winebuild-Fake_Dlls/0001-kernel32-tests-Add-basic-tests-for-fake-dlls.patch
+	patch_apply winebuild-Fake_Dlls/0002-krnl386.exe16-Do-not-abuse-WOW32Reserved-field-for-1.patch
+	patch_apply winebuild-Fake_Dlls/0003-winebuild-Generate-syscall-thunks-for-ntdll-exports.patch
+	patch_apply winebuild-Fake_Dlls/0004-winebuild-Use-multipass-label-system-to-generate-fak.patch
+	patch_apply winebuild-Fake_Dlls/0005-winebuild-Add-stub-functions-in-fake-dlls.patch
+	patch_apply winebuild-Fake_Dlls/0006-winebuild-Add-syscall-thunks-in-fake-dlls.patch
+	patch_apply winebuild-Fake_Dlls/0007-winebuild-Fix-size-of-relocation-information-in-fake.patch
+	patch_apply winebuild-Fake_Dlls/0008-winebuild-Try-to-make-sure-RVA-matches-between-fake-.patch
+	patch_apply winebuild-Fake_Dlls/0009-libs-wine-Use-same-file-alignment-for-fake-and-built.patch
+	patch_apply winebuild-Fake_Dlls/0010-tools-winebuild-Add-syscall-thunks-for-64-bit.patch
+	patch_apply winebuild-Fake_Dlls/0011-ntdll-Call-NtOpenFile-through-syscall-thunk.patch
 	(
-		printf '%s\n' '+    { "Qian Hong", "ntdll: Improve invalid paramater handling in NtAccessCheck.", 1 },';
+		printf '%s\n' '+    { "Michael Müller", "kernel32/tests: Add basic tests for fake dlls.", 1 },';
+		printf '%s\n' '+    { "Sebastian Lackner", "krnl386.exe16: Do not abuse WOW32Reserved field for 16-bit stack address.", 1 },';
+		printf '%s\n' '+    { "Michael Müller", "winebuild: Generate syscall thunks for ntdll exports.", 1 },';
+		printf '%s\n' '+    { "Michael Müller", "winebuild: Use multipass label system to generate fake dlls.", 1 },';
+		printf '%s\n' '+    { "Michael Müller", "winebuild: Add stub functions in fake dlls.", 1 },';
+		printf '%s\n' '+    { "Michael Müller", "winebuild: Add syscall thunks in fake dlls.", 1 },';
+		printf '%s\n' '+    { "Michael Müller", "winebuild: Fix size of relocation information in fake dlls.", 1 },';
+		printf '%s\n' '+    { "Michael Müller", "winebuild: Try to make sure RVA matches between fake and builtin DLLs.", 1 },';
+		printf '%s\n' '+    { "Michael Müller", "libs/wine: Use same file alignment for fake and builtin DLLs.", 1 },';
+		printf '%s\n' '+    { "Michael Müller", "tools/winebuild: Add syscall thunks for 64 bit.", 1 },';
+		printf '%s\n' '+    { "Paul Gofman", "ntdll: Call NtOpenFile through syscall thunk.", 1 },';
 	) >> "$patchlist"
 fi
 
@@ -4723,6 +4174,24 @@ if test "$enable_ntdll_ProcessQuotaLimits" -eq 1; then
 	) >> "$patchlist"
 fi
 
+# Patchset ntdll-RtlCreateUserThread
+# |
+# | This patchset has the following (direct or indirect) dependencies:
+# |   *	winebuild-Fake_Dlls
+# |
+# | This patchset fixes the following Wine bugs:
+# |   *	[#45571] League of Legends 8.12+ fails to start a game (anticheat engine, hooking of NtCreateThread/Ex)
+# |
+# | Modified files:
+# |   *	dlls/ntdll/ntdll.spec, dlls/ntdll/thread.c, include/winternl.h
+# |
+if test "$enable_ntdll_RtlCreateUserThread" -eq 1; then
+	patch_apply ntdll-RtlCreateUserThread/0001-ntdll-Refactor-RtlCreateUserThread-into-NtCreateThre.patch
+	(
+		printf '%s\n' '+    { "Andrew Wesie", "ntdll: Refactor RtlCreateUserThread into NtCreateThreadEx.", 1 },';
+	) >> "$patchlist"
+fi
+
 # Patchset ntdll-RtlQueryPackageIdentity
 # |
 # | Modified files:
@@ -4866,6 +4335,18 @@ if test "$enable_ntdll_SystemModuleInformation" -eq 1; then
 	) >> "$patchlist"
 fi
 
+# Patchset ntdll-SystemRoot_Symlink
+# |
+# | Modified files:
+# |   *	dlls/ntdll/om.c
+# |
+if test "$enable_ntdll_SystemRoot_Symlink" -eq 1; then
+	patch_apply ntdll-SystemRoot_Symlink/0001-ntdll-Add-special-handling-for-SystemRoot-to-satisfy.patch
+	(
+		printf '%s\n' '+    { "Sebastian Lackner", "ntdll: Add special handling for \\SystemRoot to satisfy MSYS2 case-insensitive system check.", 1 },';
+	) >> "$patchlist"
+fi
+
 # Patchset ntdll-ThreadHideFromDebugger
 # |
 # | This patchset fixes the following Wine bugs:
@@ -4881,6 +4362,18 @@ if test "$enable_ntdll_ThreadHideFromDebugger" -eq 1; then
 	) >> "$patchlist"
 fi
 
+# Patchset ntdll-Threading
+# |
+# | Modified files:
+# |   *	dlls/ntdll/thread.c
+# |
+if test "$enable_ntdll_Threading" -eq 1; then
+	patch_apply ntdll-Threading/0001-ntdll-Fix-race-condition-when-threads-are-killed-dur.patch
+	(
+		printf '%s\n' '+    { "Sebastian Lackner", "ntdll: Fix race-condition when threads are killed during shutdown.", 1 },';
+	) >> "$patchlist"
+fi
+
 # Patchset ntdll-Zero_mod_name
 # |
 # | Modified files:
@@ -4910,6 +4403,21 @@ if test "$enable_ntdll_aarch_TEB" -eq 1; then
 	) >> "$patchlist"
 fi
 
+# Patchset ntdll-ext4-case-folder
+# |
+# | This patchset fixes the following Wine bugs:
+# |   *	[#47099] Support for EXT4 case folding per directory.
+# |
+# | Modified files:
+# |   *	dlls/ntdll/unix/server.c
+# |
+if test "$enable_ntdll_ext4_case_folder" -eq 1; then
+	patch_apply ntdll-ext4-case-folder/0002-ntdll-server-Mark-drive_c-as-case-insensitive-when-c.patch
+	(
+		printf '%s\n' '+    { "Gabriel Ivăncescu", "ntdll/server: Mark drive_c as case-insensitive when created.", 1 },';
+	) >> "$patchlist"
+fi
+
 # Patchset ntdll-set_full_cpu_context
 # |
 # | Modified files:
@@ -5192,14 +4700,29 @@ if test "$enable_riched20_IText_Interface" -eq 1; then
 	) >> "$patchlist"
 fi
 
+# Patchset ws2_32-WSACleanup
+# |
+# | This patchset fixes the following Wine bugs:
+# |   *	[#18670] Properly close sockets when WSACleanup is called
+# |
+# | Modified files:
+# |   *	dlls/ntdll/ntdll.spec, dlls/ntdll/server.c, dlls/ntdll/unix/loader.c, dlls/ntdll/unix/server.c,
+# | 	dlls/ntdll/unix/unix_private.h, dlls/ntdll/unixlib.h, dlls/ws2_32/socket.c, dlls/ws2_32/tests/sock.c,
+# | 	include/wine/server.h, server/protocol.def, server/sock.c
+# |
+if test "$enable_ws2_32_WSACleanup" -eq 1; then
+	patch_apply ws2_32-WSACleanup/0001-ws2_32-Proper-WSACleanup-implementation-using-winese.patch
+	patch_apply ws2_32-WSACleanup/0002-ws2_32-Invalidate-client-side-file-descriptor-cache-.patch
+	(
+		printf '%s\n' '+    { "Matt Durgavich", "ws2_32: Proper WSACleanup implementation using wineserver function.", 2 },';
+		printf '%s\n' '+    { "Sebastian Lackner", "ws2_32: Invalidate client-side file descriptor cache in WSACleanup.", 1 },';
+	) >> "$patchlist"
+fi
+
 # Patchset server-Desktop_Refcount
 # |
 # | This patchset has the following (direct or indirect) dependencies:
-# |   *	Staging, advapi32-CreateRestrictedToken, advapi32-Token_Integrity_Level, kernel32-K32GetPerformanceInfo, ntdll-
-# | 	Junction_Points, winebuild-Fake_Dlls, ntdll-RtlCreateUserThread, ntdll-SystemRoot_Symlink, ntdll-ThreadTime, server-
-# | 	Realtime_Priority, ntdll-Threading, ntdll-ext4-case-folder, server-Key_State, server-PeekMessage, server-Signal_Thread,
-# | 	loader-KeyboardLayouts, winex11.drv-mouse-coorrds, user32-rawinput-mouse, user32-rawinput-nolegacy, server-
-# | 	Shared_Memory, ws2_32-WSACleanup, eventfd_synchronization
+# |   *	ws2_32-WSACleanup
 # |
 # | This patchset fixes the following Wine bugs:
 # |   *	[#46967] GOG Galaxy doesn't run in virtual desktop.
@@ -5207,11 +4730,10 @@ fi
 # | Modified files:
 # |   *	dlls/user32/tests/winstation.c, programs/explorer/desktop.c, server/async.c, server/atom.c, server/change.c,
 # | 	server/clipboard.c, server/completion.c, server/console.c, server/debugger.c, server/device.c, server/directory.c,
-# | 	server/esync.c, server/event.c, server/fd.c, server/file.c, server/handle.c, server/handle.h, server/hook.c,
-# | 	server/mailslot.c, server/mapping.c, server/mutex.c, server/named_pipe.c, server/object.c, server/object.h,
-# | 	server/process.c, server/queue.c, server/registry.c, server/request.c, server/semaphore.c, server/serial.c,
-# | 	server/signal.c, server/snapshot.c, server/sock.c, server/symlink.c, server/thread.c, server/timer.c, server/token.c,
-# | 	server/winstation.c
+# | 	server/event.c, server/fd.c, server/file.c, server/handle.c, server/handle.h, server/hook.c, server/mailslot.c,
+# | 	server/mapping.c, server/mutex.c, server/named_pipe.c, server/object.c, server/object.h, server/process.c,
+# | 	server/queue.c, server/registry.c, server/request.c, server/semaphore.c, server/serial.c, server/signal.c,
+# | 	server/snapshot.c, server/sock.c, server/symlink.c, server/thread.c, server/timer.c, server/token.c, server/winstation.c
 # |
 if test "$enable_server_Desktop_Refcount" -eq 1; then
 	patch_apply server-Desktop_Refcount/0001-server-Introduce-a-new-alloc_handle-object-callback..patch
@@ -5284,11 +4806,25 @@ if test "$enable_server_Inherited_ACLs" -eq 1; then
 	) >> "$patchlist"
 fi
 
-# Patchset server-Object_Types
+# Patchset server-Key_State
 # |
-# | This patchset has the following (direct or indirect) dependencies:
-# |   *	ntdll-Threading, ntdll-ext4-case-folder, server-Key_State, server-PeekMessage, server-Signal_Thread, loader-
-# | 	KeyboardLayouts, winex11.drv-mouse-coorrds, user32-rawinput-mouse, user32-rawinput-nolegacy, server-Shared_Memory
+# | This patchset fixes the following Wine bugs:
+# |   *	[#31899] Implement locking and synchronization of key states
+# |   *	[#35907] Fix caps lock state issues with multiple processes
+# |
+# | Modified files:
+# |   *	server/queue.c
+# |
+if test "$enable_server_Key_State" -eq 1; then
+	patch_apply server-Key_State/0001-server-Introduce-a-helper-function-to-update-the-thr.patch
+	patch_apply server-Key_State/0002-server-Implement-locking-and-synchronization-of-keys.patch
+	(
+		printf '%s\n' '+    { "Sebastian Lackner", "server: Introduce a helper function to update the thread_input key state.", 1 },';
+		printf '%s\n' '+    { "Sebastian Lackner", "server: Implement locking and synchronization of keystate buffer.", 3 },';
+	) >> "$patchlist"
+fi
+
+# Patchset server-Object_Types
 # |
 # | This patchset fixes the following Wine bugs:
 # |   *	[#44629] Process Hacker can't enumerate handles
@@ -5320,6 +4856,36 @@ if test "$enable_server_Object_Types" -eq 1; then
 	) >> "$patchlist"
 fi
 
+# Patchset server-PeekMessage
+# |
+# | This patchset fixes the following Wine bugs:
+# |   *	[#28884] GetMessage should remove already seen messages with higher priority
+# |
+# | Modified files:
+# |   *	dlls/user32/tests/msg.c, server/queue.c
+# |
+if test "$enable_server_PeekMessage" -eq 1; then
+	patch_apply server-PeekMessage/0001-server-Fix-handling-of-GetMessage-after-previous-Pee.patch
+	(
+		printf '%s\n' '+    { "Sebastian Lackner", "server: Fix handling of GetMessage after previous PeekMessage call.", 3 },';
+	) >> "$patchlist"
+fi
+
+# Patchset server-Realtime_Priority
+# |
+# | This patchset has the following (direct or indirect) dependencies:
+# |   *	ntdll-ThreadTime
+# |
+# | Modified files:
+# |   *	server/Makefile.in, server/main.c, server/scheduler.c, server/thread.c, server/thread.h
+# |
+if test "$enable_server_Realtime_Priority" -eq 1; then
+	patch_apply server-Realtime_Priority/0001-wineserver-Draft-to-implement-priority-levels-throug.patch
+	(
+		printf '%s\n' '+    { "Joakim Hernberg", "wineserver: Draft to implement priority levels through POSIX scheduling policies on linux.", 1 },';
+	) >> "$patchlist"
+fi
+
 # Patchset server-Registry_Notifications
 # |
 # | Modified files:
@@ -5334,6 +4900,18 @@ if test "$enable_server_Registry_Notifications" -eq 1; then
 	) >> "$patchlist"
 fi
 
+# Patchset server-Signal_Thread
+# |
+# | Modified files:
+# |   *	server/thread.c, server/thread.h
+# |
+if test "$enable_server_Signal_Thread" -eq 1; then
+	patch_apply server-Signal_Thread/0001-server-Do-not-signal-thread-until-it-is-really-gone.patch
+	(
+		printf '%s\n' '+    { "Sebastian Lackner", "server: Do not signal violently terminated threads until they are really gone.", 1 },';
+	) >> "$patchlist"
+fi
+
 # Patchset setupapi-DiskSpaceList
 # |
 # | Modified files:
@@ -6009,6 +5587,94 @@ if test "$enable_user32_msgbox_Support_WM_COPY_mesg" -eq 1; then
 	) >> "$patchlist"
 fi
 
+# Patchset winex11.drv-mouse-coorrds
+# |
+# | This patchset fixes the following Wine bugs:
+# |   *	[#46309] winex11.drv: Use root-relative coordinates for events, if possible.
+# |
+# | Modified files:
+# |   *	dlls/winex11.drv/mouse.c
+# |
+if test "$enable_winex11_drv_mouse_coorrds" -eq 1; then
+	patch_apply winex11.drv-mouse-coorrds/0001-winex11.drv-mouse-Use-root-relative-coordinates-for-ev.patch
+	(
+		printf '%s\n' '+    { "Gabriel Ivăncescu", "winex11.drv/mouse: Use root-relative coordinates for events, if possible.", 1 },';
+	) >> "$patchlist"
+fi
+
+# Patchset user32-rawinput-mouse
+# |
+# | This patchset has the following (direct or indirect) dependencies:
+# |   *	loader-KeyboardLayouts, winex11.drv-mouse-coorrds
+# |
+# | This patchset fixes the following Wine bugs:
+# |   *	[#42631] Mouse drift, jump or don't react to small slow movements in Unity-engine games and Fallout 4 (partly fixed in
+# | 	Unity games, have walkaround in Fallout4 )
+# |   *	[#42675] Overwatch: Phantom mouse input / view pulled up to ceiling
+# |
+# | Modified files:
+# |   *	dlls/dinput/device_private.h, dlls/dinput/dinput_main.c, dlls/dinput/mouse.c, dlls/dinput8/tests/device.c,
+# | 	dlls/user32/input.c, dlls/user32/rawinput.c, dlls/user32/tests/input.c, dlls/user32/user32.spec,
+# | 	dlls/wineandroid.drv/keyboard.c, dlls/wineandroid.drv/window.c, dlls/winemac.drv/ime.c, dlls/winemac.drv/keyboard.c,
+# | 	dlls/winemac.drv/mouse.c, dlls/winex11.drv/event.c, dlls/winex11.drv/keyboard.c, dlls/winex11.drv/mouse.c,
+# | 	dlls/winex11.drv/x11drv.h, dlls/winex11.drv/x11drv_main.c, include/winuser.h, server/protocol.def, server/queue.c
+# |
+if test "$enable_user32_rawinput_mouse" -eq 1; then
+	patch_apply user32-rawinput-mouse/0001-user32-tests-Add-rawinput-test-for-ClipCursor-intera.patch
+	patch_apply user32-rawinput-mouse/0002-user32-tests-Add-rawinput-test-for-cross-thread-inte.patch
+	patch_apply user32-rawinput-mouse/0003-user32-tests-Add-rawinput-test-for-cross-process-int.patch
+	patch_apply user32-rawinput-mouse/0004-server-Add-send_hardware_message-flags-for-rawinput-.patch
+	patch_apply user32-rawinput-mouse/0005-server-Broadcast-rawinput-message-if-request-flag-is.patch
+	patch_apply user32-rawinput-mouse/0006-user32-Add-__wine_send_input-flags-to-hint-raw-input.patch
+	patch_apply user32-rawinput-mouse/0007-winex11.drv-Advertise-XInput2-version-2.1-support.patch
+	patch_apply user32-rawinput-mouse/0008-winex11.drv-Keep-track-of-pointer-and-device-button-.patch
+	patch_apply user32-rawinput-mouse/0009-winex11.drv-Listen-to-RawMotion-and-RawButton-events.patch
+	patch_apply user32-rawinput-mouse/0010-user32-Implement-GetRegisteredRawInputDevices.patch
+	patch_apply user32-rawinput-mouse/0011-dinput8-Add-support-for-dinput-devices-that-use-raw-.patch
+	patch_apply user32-rawinput-mouse/0012-dinput8-Use-raw-input-interface-for-dinput8-mouse-de.patch
+	patch_apply user32-rawinput-mouse/0013-dinput-Fix-rawinput-events-sequence-number.patch
+	(
+		printf '%s\n' '+    { "Rémi Bernon", "user32/tests: Add rawinput test for ClipCursor interactions.", 1 },';
+		printf '%s\n' '+    { "Rémi Bernon", "user32/tests: Add rawinput test for cross-thread interactions.", 1 },';
+		printf '%s\n' '+    { "Rémi Bernon", "user32/tests: Add rawinput test for cross-process interactions.", 1 },';
+		printf '%s\n' '+    { "Rémi Bernon", "server: Add send_hardware_message flags for rawinput translation.", 1 },';
+		printf '%s\n' '+    { "Rémi Bernon", "server: Broadcast rawinput message if request flag is SEND_HWMSG_RAWINPUT.", 1 },';
+		printf '%s\n' '+    { "Rémi Bernon", "user32: Add __wine_send_input flags to hint raw input translation.", 1 },';
+		printf '%s\n' '+    { "Rémi Bernon", "winex11.drv: Advertise XInput2 version 2.1 support.", 1 },';
+		printf '%s\n' '+    { "Rémi Bernon", "winex11.drv: Keep track of pointer and device button mappings.", 1 },';
+		printf '%s\n' '+    { "Rémi Bernon", "winex11.drv: Listen to RawMotion and RawButton* events in the desktop thread.", 1 },';
+		printf '%s\n' '+    { "Rémi Bernon", "user32: Implement GetRegisteredRawInputDevices.", 1 },';
+		printf '%s\n' '+    { "Rémi Bernon", "dinput8: Add support for dinput devices that use raw input interface.", 1 },';
+		printf '%s\n' '+    { "Rémi Bernon", "dinput8: Use raw input interface for dinput8 mouse device.", 1 },';
+		printf '%s\n' '+    { "Rémi Bernon", "dinput: Fix rawinput events sequence number.", 1 },';
+	) >> "$patchlist"
+fi
+
+# Patchset user32-rawinput-nolegacy
+# |
+# | This patchset has the following (direct or indirect) dependencies:
+# |   *	server-Key_State, loader-KeyboardLayouts, winex11.drv-mouse-coorrds, user32-rawinput-mouse
+# |
+# | Modified files:
+# |   *	dlls/dinput/dinput_main.c, dlls/dinput8/tests/device.c, dlls/user32/rawinput.c, server/queue.c
+# |
+if test "$enable_user32_rawinput_nolegacy" -eq 1; then
+	patch_apply user32-rawinput-nolegacy/0001-dinput8-tests-Add-test-for-DISCL_EXCLUSIVE-flag-inte.patch
+	patch_apply user32-rawinput-nolegacy/0002-user32-Add-support-for-RIDEV_NOLEGACY-flag-in-Regist.patch
+	patch_apply user32-rawinput-nolegacy/0003-dinput-Set-RIDEV_INPUTSINK-flag-only-when-DISCL_BACK.patch
+	patch_apply user32-rawinput-nolegacy/0004-dinput-Set-correct-rawinput-flags-for-DISCL_EXCLUSIV.patch
+	patch_apply user32-rawinput-nolegacy/0005-server-Update-desktop-cursor-pos-even-if-RIDEV_NOLEG.patch
+	patch_apply user32-rawinput-nolegacy/0006-server-Also-update-the-key-state-if-RIDEV_NOLEGACY-i.patch
+	(
+		printf '%s\n' '+    { "Rémi Bernon", "dinput8/tests: Add test for DISCL_EXCLUSIVE flag interaction with rawinput.", 1 },';
+		printf '%s\n' '+    { "Derek Lesho", "user32: Add support for RIDEV_NOLEGACY flag in RegisterRawInputDevices.", 1 },';
+		printf '%s\n' '+    { "Rémi Bernon", "dinput: Set RIDEV_INPUTSINK flag only when DISCL_BACKGROUND is requested.", 1 },';
+		printf '%s\n' '+    { "Rémi Bernon", "dinput: Set correct rawinput flags for DISCL_EXCLUSIVE.", 1 },';
+		printf '%s\n' '+    { "Rémi Bernon", "server: Update desktop cursor pos even if RIDEV_NOLEGACY flag is set.", 1 },';
+		printf '%s\n' '+    { "Rémi Bernon", "server: Also update the key state if RIDEV_NOLEGACY is used.", 1 },';
+	) >> "$patchlist"
+fi
+
 # Patchset user32-rawinput-hid
 # |
 # | This patchset has the following (direct or indirect) dependencies:
@@ -6969,11 +6635,7 @@ fi
 # Patchset ws2_32-TransmitFile
 # |
 # | This patchset has the following (direct or indirect) dependencies:
-# |   *	Staging, advapi32-CreateRestrictedToken, advapi32-Token_Integrity_Level, kernel32-K32GetPerformanceInfo, ntdll-
-# | 	Junction_Points, winebuild-Fake_Dlls, ntdll-RtlCreateUserThread, ntdll-SystemRoot_Symlink, ntdll-ThreadTime, server-
-# | 	Realtime_Priority, ntdll-Threading, ntdll-ext4-case-folder, server-Key_State, server-PeekMessage, server-Signal_Thread,
-# | 	loader-KeyboardLayouts, winex11.drv-mouse-coorrds, user32-rawinput-mouse, user32-rawinput-nolegacy, server-
-# | 	Shared_Memory, ws2_32-WSACleanup, eventfd_synchronization, server-Desktop_Refcount
+# |   *	ws2_32-WSACleanup, server-Desktop_Refcount
 # |
 # | Modified files:
 # |   *	dlls/ws2_32/socket.c, dlls/ws2_32/tests/sock.c, include/winsock.h, server/protocol.def, server/sock.c
diff --git a/patches/server-Desktop_Refcount/0001-server-Introduce-a-new-alloc_handle-object-callback..patch b/patches/server-Desktop_Refcount/0001-server-Introduce-a-new-alloc_handle-object-callback..patch
index 69c400d52..645514f53 100644
--- a/patches/server-Desktop_Refcount/0001-server-Introduce-a-new-alloc_handle-object-callback..patch
+++ b/patches/server-Desktop_Refcount/0001-server-Introduce-a-new-alloc_handle-object-callback..patch
@@ -214,31 +213,19 @@ index 8083c686e11..a1e631d435f 100644
      no_close_handle,              /* close_handle */
      directory_destroy             /* destroy */
  };
-diff --git a/server/esync.c b/server/esync.c
-index 1b035bdb066..4563b97573a 100644
---- a/server/esync.c
-+++ b/server/esync.c
-@@ -140,6 +140,7 @@ const struct object_ops esync_ops =
-     default_unlink_name,       /* unlink_name */
-     no_open_file,              /* open_file */
-     no_kernel_obj_list,        /* get_kernel_obj_list */
-+    no_alloc_handle,           /* alloc_handle */
-     no_close_handle,           /* close_handle */
-     esync_destroy              /* destroy */
- };
 diff --git a/server/event.c b/server/event.c
-index 79287e7edc0..ad8fddbfade 100644
+index d339d85aa45..a78d73d9e78 100644
 --- a/server/event.c
 +++ b/server/event.c
-@@ -76,6 +76,7 @@ static const struct object_ops event_ops =
+@@ -71,6 +71,7 @@ static const struct object_ops event_ops =
      default_unlink_name,       /* unlink_name */
      no_open_file,              /* open_file */
      event_get_kernel_obj_list, /* get_kernel_obj_list */
 +    no_alloc_handle,           /* alloc_handle */
      no_close_handle,           /* close_handle */
-     event_destroy              /* destroy */
+     no_destroy                 /* destroy */
  };
-@@ -111,6 +112,7 @@ static const struct object_ops keyed_event_ops =
+@@ -105,6 +106,7 @@ static const struct object_ops keyed_event_ops =
      default_unlink_name,         /* unlink_name */
      no_open_file,                /* open_file */
      no_kernel_obj_list,          /* get_kernel_obj_list */
 
diff --git a/patches/server-Desktop_Refcount/definition b/patches/server-Desktop_Refcount/definition
index c56a7052a..413dc31ad 100644
--- a/patches/server-Desktop_Refcount/definition
+++ b/patches/server-Desktop_Refcount/definition
@@ -1,5 +1,4 @@
 Fixes: Fix possible leak of explorer.exe processes and implement proper desktop refcounting
 Fixes: Assign random name when trying to create Window Station without name
 Fixes: [46967] GOG Galaxy doesn't run in virtual desktop.
-Depends: eventfd_synchronization
 Depends: ws2_32-WSACleanup
diff --git a/patches/server-FileEndOfFileInformation/0001-ntdll-Set-EOF-on-file-which-has-a-memory-mapping-sho.patch b/patches/server-FileEndOfFileInformation/0001-ntdll-Set-EOF-on-file-which-has-a-memory-mapping-sho.patch
index a243e0342..229655b27 100644
--- a/patches/server-FileEndOfFileInformation/0001-ntdll-Set-EOF-on-file-which-has-a-memory-mapping-sho.patch
+++ b/patches/server-FileEndOfFileInformation/0001-ntdll-Set-EOF-on-file-which-has-a-memory-mapping-sho.patch
@@ -1,26 +1,27 @@
-From 3b5ea5ff15907d1d8f1902a08451b0a03eb11dc9 Mon Sep 17 00:00:00 2001
+From ed63a76dc481da8af510fb8f9ae6c399ca0ca0ac Mon Sep 17 00:00:00 2001
 From: Qian Hong <qhong@codeweavers.com>
 Date: Fri, 21 Aug 2015 21:58:51 +0800
-Subject: ntdll: Set EOF on file which has a memory mapping should fail.
+Subject: [PATCH] ntdll: Set EOF on file which has a memory mapping should
+ fail.
 
 ---
- dlls/ntdll/file.c   | 27 +++++++-------------------
- server/fd.c         | 55 +++++++++++++++++++++++++++++++++++++++++++++++++++++
- server/protocol.def |  7 +++++++
+ dlls/ntdll/file.c   | 27 ++++++----------------
+ server/fd.c         | 55 +++++++++++++++++++++++++++++++++++++++++++++
+ server/protocol.def |  7 ++++++
  3 files changed, 69 insertions(+), 20 deletions(-)
 
 diff --git a/dlls/ntdll/file.c b/dlls/ntdll/file.c
-index be6b591..8c9b076 100644
+index 013706889bb..a28ae265687 100644
 --- a/dlls/ntdll/file.c
 +++ b/dlls/ntdll/file.c
-@@ -2650,30 +2650,17 @@ NTSTATUS WINAPI NtSetInformationFile(HANDLE handle, PIO_STATUS_BLOCK io,
+@@ -2747,30 +2747,17 @@ NTSTATUS WINAPI NtSetInformationFile(HANDLE handle, PIO_STATUS_BLOCK io,
      case FileEndOfFileInformation:
          if (len >= sizeof(FILE_END_OF_FILE_INFORMATION))
          {
 -            struct stat st;
              const FILE_END_OF_FILE_INFORMATION *info = ptr;
  
--            if ((io->u.Status = server_get_unix_fd( handle, 0, &fd, &needs_close, NULL, NULL )))
+-            if ((io->u.Status = unix_funcs->server_get_unix_fd( handle, 0, &fd, &needs_close, NULL, NULL )))
 -                return io->u.Status;
 -
 -            /* first try normal truncate */
 
diff --git a/patches/server-Object_Types/0003-server-Register-types-during-startup.patch b/patches/server-Object_Types/0003-server-Register-types-during-startup.patch
index 1905f8f18..769f1f3c4 100644
--- a/patches/server-Object_Types/0003-server-Register-types-during-startup.patch
+++ b/patches/server-Object_Types/0003-server-Register-types-during-startup.patch
@@ -116,22 +116,22 @@ index 781e6f3141a..42350048877 100644
  }
  
 diff --git a/server/main.c b/server/main.c
-index 43297a3e93d..0a628c30e2d 100644
+index efb205f5292..fee10ea3d37 100644
 --- a/server/main.c
 +++ b/server/main.c
-@@ -146,6 +146,7 @@ int main( int argc, char *argv[] )
+@@ -145,6 +145,7 @@ int main( int argc, char *argv[] )
+     init_signals();
      init_directories();
      init_registry();
-     init_shared_memory();
 +    init_types();
      main_loop();
      return 0;
  }
 diff --git a/server/mapping.c b/server/mapping.c
-index 2a2803404cc..24ab0f63e48 100644
+index 0941dd87c05..88894661025 100644
 --- a/server/mapping.c
 +++ b/server/mapping.c
-@@ -979,8 +979,7 @@ static void mapping_dump( struct object *obj, int verbose )
+@@ -915,8 +915,7 @@ static void mapping_dump( struct object *obj, int verbose )
  
  static struct object_type *mapping_get_type( struct object *obj )
  {

diff --git a/patches/server-Object_Types/definition b/patches/server-Object_Types/definition
index 9f2708c1a..724bb014f 100644
--- a/patches/server-Object_Types/definition
+++ b/patches/server-Object_Types/definition
@@ -1,3 +1,3 @@
 Fixes: [44629] Process Hacker can't enumerate handles
 Fixes: [45374] Yet Another Process Monitor (.NET 2.0 app) reports System.AccessViolationException
-Depends: server-Shared_Memory
+#Depends: server-Shared_Memory
diff --git a/patches/server-Shared_Memory/definition b/patches/server-Shared_Memory/definition
index 644589e66..316338467 100644
--- a/patches/server-Shared_Memory/definition
+++ b/patches/server-Shared_Memory/definition
@@ -7,3 +7,5 @@ Depends: server-PeekMessage
 Depends: server-Signal_Thread
 Depends: user32-rawinput-nolegacy
 Depends: ntdll-ext4-case-folder
+# This is not worth rebasing right now.
+Disabled: true
diff --git a/patches/wineboot-DriveSerial/0001-wineboot-Assign-a-drive-serial-number-during-prefix-.patch b/patches/wineboot-DriveSerial/0001-wineboot-Assign-a-drive-serial-number-during-prefix-.patch
index 427455553..093120d00 100644
--- a/patches/wineboot-DriveSerial/0001-wineboot-Assign-a-drive-serial-number-during-prefix-.patch
+++ b/patches/wineboot-DriveSerial/0001-wineboot-Assign-a-drive-serial-number-during-prefix-.patch
@@ -57,14 +57,14 @@ index e1dbe6630..f8b0c4d74 100644
  /* create the volatile hardware registry keys */
  static void create_hardware_registry_keys(void)
  {
-@@ -1694,6 +1725,7 @@ int __cdecl main( int argc, char *argv[] )
- 
+@@ -1590,6 +1621,7 @@ int __cdecl main( int argc, char *argv[] )
      ResetEvent( event );  /* in case this is a restart */
  
+     create_user_shared_data();
 +    create_disk_serial_number();
      create_hardware_registry_keys();
      create_dynamic_registry_keys();
      create_environment_registry_keys();
 -- 
-2.25.0
+2.26.2
 
diff --git a/patches/ws2_32-WSACleanup/0002-ws2_32-Invalidate-client-side-file-descriptor-cache-.patch b/patches/ws2_32-WSACleanup/0002-ws2_32-Invalidate-client-side-file-descriptor-cache-.patch
index 7c65d3baa..384fc90af 100644
--- a/patches/ws2_32-WSACleanup/0002-ws2_32-Invalidate-client-side-file-descriptor-cache-.patch
+++ b/patches/ws2_32-WSACleanup/0002-ws2_32-Invalidate-client-side-file-descriptor-cache-.patch
@@ -24,19 +29,49 @@ index c3b6bf0..2b52562 100644
  @ cdecl wine_server_handle_to_fd(long long ptr ptr)
  @ cdecl wine_server_release_fd(long long)
 diff --git a/dlls/ntdll/server.c b/dlls/ntdll/server.c
-index 356d631..381d5aa 100644
+index ed4e3f25531..ae1e41a485e 100644
 --- a/dlls/ntdll/server.c
 +++ b/dlls/ntdll/server.c
-@@ -915,6 +915,30 @@ int server_remove_fd_from_cache( HANDLE handle )
+@@ -687,6 +687,14 @@ void CDECL wine_server_release_fd( HANDLE handle, int unix_fd )
+     unix_funcs->server_release_fd( handle, unix_fd );
+ }
  
- 
- /***********************************************************************
++ /***********************************************************************
 + *           wine_server_close_fds_by_type
-+ *
-+ * Needed for a proper implementation of WSACleanup.
 + */
 +void CDECL wine_server_close_fds_by_type( enum server_fd_type type )
 +{
++    unix_funcs->server_remove_fds_from_cache_by_type( type );
++}
++
+ 
+ /***********************************************************************
+  *           server_init_process
+diff --git a/dlls/ntdll/unix/loader.c b/dlls/ntdll/unix/loader.c
+index 4a3f101d301..8b10964603e 100644
+--- a/dlls/ntdll/unix/loader.c
++++ b/dlls/ntdll/unix/loader.c
+@@ -1000,6 +1000,7 @@ static struct unix_funcs unix_funcs =
+     wine_server_call,
+     server_send_fd,
+     server_remove_fd_from_cache,
++    server_remove_fds_from_cache_by_type,
+     server_get_unix_fd,
+     server_fd_to_handle,
+     server_handle_to_fd,
+diff --git a/dlls/ntdll/unix/server.c b/dlls/ntdll/unix/server.c
+index 8dc3f33bc80..dd2cb6cf5e2 100644
+--- a/dlls/ntdll/unix/server.c
++++ b/dlls/ntdll/unix/server.c
+@@ -559,6 +559,26 @@ int CDECL server_remove_fd_from_cache( HANDLE handle )
+     return fd;
+ }
+ 
++/***********************************************************************
++ *           server_remove_fds_from_cache_by_type
++ */
++void CDECL server_remove_fds_from_cache_by_type( enum server_fd_type type )
++{
 +    union fd_cache_entry cache;
 +    unsigned int entry, idx;
 +
@@ -52,17 +87,47 @@ index 356d631..381d5aa 100644
 +        }
 +    }
 +}
-+
-+
-+/***********************************************************************
+ 
+ /***********************************************************************
   *           server_get_unix_fd
-  *
-  * The returned unix_fd should be closed iff needs_close is non-zero.
+diff --git a/dlls/ntdll/unix/unix_private.h b/dlls/ntdll/unix/unix_private.h
+index 2bf39f85371..32c03fd8983 100644
+--- a/dlls/ntdll/unix/unix_private.h
++++ b/dlls/ntdll/unix/unix_private.h
+@@ -63,6 +63,7 @@ extern void CDECL dbg_init(void) DECLSPEC_HIDDEN;
+ extern unsigned int CDECL server_call_unlocked( void *req_ptr ) DECLSPEC_HIDDEN;
+ extern void CDECL server_send_fd( int fd ) DECLSPEC_HIDDEN;
+ extern int CDECL server_remove_fd_from_cache( HANDLE handle ) DECLSPEC_HIDDEN;
++extern void CDECL server_remove_fds_from_cache_by_type( enum server_fd_type type ) DECLSPEC_HIDDEN;
+ extern int CDECL server_get_unix_fd( HANDLE handle, unsigned int wanted_access, int *unix_fd,
+                                      int *needs_close, enum server_fd_type *type,
+                                      unsigned int *options ) DECLSPEC_HIDDEN;
+diff --git a/dlls/ntdll/unixlib.h b/dlls/ntdll/unixlib.h
+index 142e8956e7e..452c725dfde 100644
+--- a/dlls/ntdll/unixlib.h
++++ b/dlls/ntdll/unixlib.h
+@@ -25,7 +25,7 @@
+ #include "wine/debug.h"
+ 
+ /* increment this when you change the function table */
+-#define NTDLL_UNIXLIB_VERSION 10
++#define NTDLL_UNIXLIB_VERSION 11
+ 
+ struct unix_funcs
+ {
+@@ -55,6 +55,7 @@ struct unix_funcs
+     unsigned int  (CDECL *server_call)( void *req_ptr );
+     void          (CDECL *server_send_fd)( int fd );
+     int           (CDECL *server_remove_fd_from_cache)( HANDLE handle );
++    void          (CDECL *server_remove_fds_from_cache_by_type)( enum server_fd_type type );
+     int           (CDECL *server_get_unix_fd)( HANDLE handle, unsigned int wanted_access, int *unix_fd,
+                                                int *needs_close, enum server_fd_type *type, unsigned int *options );
+     NTSTATUS      (CDECL *server_fd_to_handle)( int fd, unsigned int access, unsigned int attributes,
 diff --git a/dlls/ws2_32/socket.c b/dlls/ws2_32/socket.c
-index ea45397..c50d2b6 100644
+index bbc44ca2c20..37d110d216f 100644
 --- a/dlls/ws2_32/socket.c
 +++ b/dlls/ws2_32/socket.c
-@@ -1495,6 +1495,7 @@ INT WINAPI WSACleanup(void)
+@@ -1729,6 +1729,7 @@ INT WINAPI WSACleanup(void)
  
      if (!--num_startup)
      {
 
diff --git a/patches/ntdll-NtQueryVirtualMemory/0008-ntdll-Resolve-drive-symlinks-before-returning-sectio.patch b/patches/ntdll-NtQueryVirtualMemory/0008-ntdll-Resolve-drive-symlinks-before-returning-sectio.patch
index b125f578e..81e23dc88 100644
--- a/patches/ntdll-NtQueryVirtualMemory/0008-ntdll-Resolve-drive-symlinks-before-returning-sectio.patch
+++ b/patches/ntdll-NtQueryVirtualMemory/0008-ntdll-Resolve-drive-symlinks-before-returning-sectio.patch
@@ -36,19 +36,19 @@ index 427cdaad441..f92adb0c0dc 100644
                                       const LARGE_INTEGER *offset_ptr, SIZE_T *size_ptr, ULONG alloc_type,
                                       ULONG protect, pe_image_info_t *image_info ) DECLSPEC_HIDDEN;
 diff --git a/dlls/ntdll/virtual.c b/dlls/ntdll/virtual.c
-index fb9a1a57729..89ed3bb3f0b 100644
+index cc1d6e5d6f2..3d53b92cb8e 100644
 --- a/dlls/ntdll/virtual.c
 +++ b/dlls/ntdll/virtual.c
-@@ -188,6 +188,8 @@ static BYTE **pages_vprot;
+@@ -192,6 +192,8 @@ static BYTE **pages_vprot;
  static BYTE *pages_vprot;
  #endif
  
 +#define MAX_DIR_ENTRY_LEN 255  /* max length of a directory entry in chars */
 +
  static struct file_view *view_block_start, *view_block_end, *next_free_view;
- static const size_t view_block_size = 0x100000;
- static void *preload_reserve_start;
-@@ -3471,12 +3473,15 @@ static NTSTATUS get_section_name( HANDLE process, LPCVOID addr,
+ #ifdef _WIN64
+ static const size_t view_block_size = 0x200000;
+@@ -3713,12 +3715,15 @@ static NTSTATUS get_section_name( HANDLE process, LPCVOID addr,
                                    MEMORY_SECTION_NAME *info,
                                    SIZE_T len, SIZE_T *res_len )
  {
