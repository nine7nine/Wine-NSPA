From 2ec8739c7440157e189b762b486433697fee06e3 Mon Sep 17 00:00:00 2001
From: Brendan Shanks <bshanks@codeweavers.com>
Date: Wed, 5 Aug 2020 14:26:23 -0700
Subject: [PATCH] HACK: ntdll: Support x86_64 syscall emulation for Red Dead
 Redemption 2.

---
 dlls/ntdll/unix/signal_x86_64.c | 125 +++++++++++++++++++++++++++++---
 1 file changed, 115 insertions(+), 10 deletions(-)

diff --git a/dlls/ntdll/unix/signal_x86_64.c b/dlls/ntdll/unix/signal_x86_64.c
index 33ad0489006..66fadacf920 100644
--- a/dlls/ntdll/unix/signal_x86_64.c
+++ b/dlls/ntdll/unix/signal_x86_64.c
@@ -2368,6 +2368,63 @@ static void sigsys_handler( int signal, siginfo_t *siginfo, void *sigcontext )

     ctx->uc_mcontext.gregs[REG_RIP] = *dispatcher_address;
 }
+
+unsigned int __wine_syscall_nr_NtClose;
+unsigned int __wine_syscall_nr_NtCreateFile;
+unsigned int __wine_syscall_nr_NtGetContextThread;
+unsigned int __wine_syscall_nr_NtQueryInformationProcess;
+unsigned int __wine_syscall_nr_NtQuerySystemInformation;
+unsigned int __wine_syscall_nr_NtQueryVirtualMemory;
+unsigned int __wine_syscall_nr_NtReadFile;
+unsigned int __wine_syscall_nr_NtWriteFile;
+
+static void sigsys_handler_rdr2( int signal, siginfo_t *siginfo, void *sigcontext )
+{
+    ULONG64 *dispatcher_address = (ULONG64 *)((char *)user_shared_data + page_size);
+    ucontext_t *ctx = sigcontext;
+    void ***rsp;
+
+    TRACE("SIGSYS, rax %#llx, rip %#llx.\n", ctx->uc_mcontext.gregs[REG_RAX],
+            ctx->uc_mcontext.gregs[REG_RIP]);
+
+    rsp = (void ***)&ctx->uc_mcontext.gregs[REG_RSP];
+    *rsp -= 1;
+    **rsp = (void *)(ctx->uc_mcontext.gregs[REG_RIP] + 0xb);
+
+    ctx->uc_mcontext.gregs[REG_RIP] = *dispatcher_address;
+
+    /* syscall numbers are for Windows 10 1809 (build 17763) */
+    switch (ctx->uc_mcontext.gregs[REG_RAX])
+    {
+        case 0x19:
+            ctx->uc_mcontext.gregs[REG_RAX] = __wine_syscall_nr_NtQueryInformationProcess;
+            break;
+        case 0x36:
+            ctx->uc_mcontext.gregs[REG_RAX] = __wine_syscall_nr_NtQuerySystemInformation;
+            break;
+        case 0xec:
+            ctx->uc_mcontext.gregs[REG_RAX] = __wine_syscall_nr_NtGetContextThread;
+            break;
+        case 0x55:
+            ctx->uc_mcontext.gregs[REG_RAX] = __wine_syscall_nr_NtCreateFile;
+            break;
+        case 0x08:
+            ctx->uc_mcontext.gregs[REG_RAX] = __wine_syscall_nr_NtWriteFile;
+            break;
+        case 0x06:
+            ctx->uc_mcontext.gregs[REG_RAX] = __wine_syscall_nr_NtReadFile;
+            break;
+        case 0x0f:
+            ctx->uc_mcontext.gregs[REG_RAX] = __wine_syscall_nr_NtClose;
+            break;
+        case 0x23:
+            ctx->uc_mcontext.gregs[REG_RAX] = __wine_syscall_nr_NtQueryVirtualMemory;
+            break;
+         default:
+            FIXME("Unhandled syscall %#llx.\n", ctx->uc_mcontext.gregs[REG_RAX]);
+            break;
+    }
+}
 #endif

 #ifdef HAVE_SECCOMP
@@ -2428,31 +2486,79 @@ static void install_bpf(struct sigaction *sig_act)
        BPF_STMT(BPF_RET | BPF_K, SECCOMP_RET_TRAP),
        BPF_STMT(BPF_RET | BPF_K, SECCOMP_RET_ALLOW),
     };
+    static struct sock_filter filter_rdr2[] =
+    {
+        /* Trap anything called from RDR2 or the launcher (0x140000000 - 0x150000000)*/
+        /* > 0x140000000 */
+        BPF_STMT(BPF_LD | BPF_W | BPF_ABS, offsetof(struct seccomp_data, instruction_pointer) + 0),
+        BPF_JUMP(BPF_JMP | BPF_JGE | BPF_K, 0x40000000 /*lsb*/, 0, 7),
+        BPF_STMT(BPF_LD | BPF_W | BPF_ABS, offsetof(struct seccomp_data, instruction_pointer) + 4),
+        BPF_JUMP(BPF_JMP | BPF_JEQ | BPF_K, 0x1 /*msb*/, 0, 5),
+
+        /* < 0x150000000 */
+        BPF_STMT(BPF_LD | BPF_W | BPF_ABS, offsetof(struct seccomp_data, instruction_pointer) + 0),
+        BPF_JUMP(BPF_JMP | BPF_JGT | BPF_K, 0x50000000 /*lsb*/, 3, 0),
+        BPF_STMT(BPF_LD | BPF_W | BPF_ABS, offsetof(struct seccomp_data, instruction_pointer) + 4),
+        BPF_JUMP(BPF_JMP | BPF_JEQ | BPF_K, 0x1 /*msb*/, 0, 1),
+        BPF_STMT(BPF_RET | BPF_K, SECCOMP_RET_TRAP),
+
+        /* Allow everything else */
+        BPF_STMT(BPF_RET | BPF_K, SECCOMP_RET_ALLOW),
+    };
     struct syscall_frame *frame = amd64_thread_data()->syscall_frame;
     struct sock_fprog prog;
+    BOOL rdr2 = FALSE;
     NTSTATUS status;

     sig_act->sa_sigaction = sigsys_handler;
+    memset(&prog, 0, sizeof(prog));
+
+    {
+        const char *sgi = getenv("SteamGameId");
+        if (sgi && (!strcmp(sgi, "1174180") || !strcmp(sgi, "1404210")))
+        {
+            /* Use specific filter and signal handler for Red Dead Redemption 2 */
+            prog.len = ARRAY_SIZE(filter_rdr2);
+            prog.filter = filter_rdr2;
+            sig_act->sa_sigaction = sigsys_handler_rdr2;
+            rdr2 = TRUE;
+        }
+    }
+
     sigaction(SIGSYS, sig_act, NULL);

     frame->syscall_flags = syscall_flags;
     frame->syscall_table = KeServiceDescriptorTable;

-    if ((status = syscall(0xffff)) == STATUS_INVALID_PARAMETER)
+    if (rdr2)
     {
-        TRACE("Seccomp filters already installed.\n");
-        return;
+        int ret;
+
+        if ((ret = prctl(PR_GET_SECCOMP, 0, NULL, 0, 0)))
+        {
+            if (ret == 2)
+                TRACE("Seccomp filters already installed.\n");
+            else
+                ERR("Seccomp filters cannot be installed, ret %d, error %s.\n", ret, strerror(errno));
+            return;
+        }
     }
-    if (status != -ENOSYS && (status != -1 || errno != ENOSYS))
+    else
     {
-        ERR("Unexpected status %#x, errno %d.\n", status, errno);
-        return;
+        if ((status = syscall(0xffff)) == STATUS_INVALID_PARAMETER)
+        {
+            TRACE("Seccomp filters already installed.\n");
+            return;
+        }
+        if (status != -ENOSYS && (status != -1 || errno != ENOSYS))
+        {
+            ERR("Unexpected status %#x, errno %d.\n", status, errno);
+            return;
+        }
+        prog.len = ARRAY_SIZE(filter);
+        prog.filter = filter;
     }

-    memset(&prog, 0, sizeof(prog));
-    prog.len = ARRAY_SIZE(filter);
-    prog.filter = filter;
-
     if (prctl(PR_SET_NO_NEW_PRIVS, 1, 0, 0, 0))
     {
         ERR("prctl(PR_SET_NO_NEW_PRIVS, ...): %s.\n", strerror(errno));
