From d152c0c2bbd0bcb42b45fcde8f0ce2f13ba90eec Mon Sep 17 00:00:00 2001
From: Derek Lesho <dlesho@codeweavers.com>
Date: Fri, 19 Mar 2021 16:54:03 -0400
Subject: [PATCH 47/88] winegstreamer: Implement ::ProcessMessage for decoder
 transform.

---
 dlls/winegstreamer/decode_transform.c | 96 ++++++++++++++++++++++++++-
 1 file changed, 94 insertions(+), 2 deletions(-)

diff --git a/dlls/winegstreamer/decode_transform.c b/dlls/winegstreamer/decode_transform.c
index c2b70c10f41..6f1363ff1f3 100644
--- a/dlls/winegstreamer/decode_transform.c
+++ b/dlls/winegstreamer/decode_transform.c
@@ -733,9 +733,101 @@ static struct pipeline_event get_pipeline_event(struct mf_decoder *decoder)
 
 static HRESULT WINAPI mf_decoder_ProcessMessage(IMFTransform *iface, MFT_MESSAGE_TYPE message, ULONG_PTR param)
 {
-    FIXME("%p, %u %lu.\n", iface, message, param);
+    struct mf_decoder *decoder = impl_mf_decoder_from_IMFTransform(iface);
+    HRESULT hr;
 
-    return E_NOTIMPL;
+    TRACE("%p, %x %lu.\n", decoder, message, param);
+
+    EnterCriticalSection(&decoder->cs);
+    if (!decoder->input_type || !decoder->output_type)
+    {
+        LeaveCriticalSection(&decoder->cs);
+        return MF_E_TRANSFORM_TYPE_NOT_SET;
+    }
+
+    hr = S_OK;
+
+    switch (message)
+    {
+        case MFT_MESSAGE_NOTIFY_BEGIN_STREAMING:
+        case MFT_MESSAGE_NOTIFY_START_OF_STREAM:
+            break;
+        case MFT_MESSAGE_NOTIFY_END_OF_STREAM:
+        {
+            if (param)
+            {
+                hr = MF_E_INVALIDSTREAMNUMBER;
+                break;
+            }
+            if (!decoder->wg_stream)
+            {
+                ERR("End-Of-Stream marked on a decoder MFT which hasn't finished initialization\n");
+                hr = E_FAIL;
+                break;
+            }
+
+            decoder->eos = TRUE;
+            break;
+        }
+        case MFT_MESSAGE_COMMAND_DRAIN:
+        {
+            struct pipeline_event pip_event;
+
+            if (!decoder->wg_stream)
+            {
+                ERR("Drain requested on a decoder MFT which hasn't finished initialization\n");
+                hr = E_FAIL;
+                break;
+            }
+
+            pip_event = get_pipeline_event(decoder);
+            assert(pip_event.type == PIPELINE_EVENT_READ_REQUEST);
+
+            wg_parser_push_data(decoder->wg_parser, WG_READ_EOS, NULL, 0);
+
+            EnterCriticalSection(&decoder->event_cs);
+            decoder->event.type = PIPELINE_EVENT_NONE;
+            LeaveCriticalSection(&decoder->event_cs);
+            WakeAllConditionVariable(&decoder->event_cv);
+
+            decoder->draining = TRUE;
+            decoder->offset_tracker = 0;
+            break;
+        }
+        case MFT_MESSAGE_COMMAND_FLUSH:
+        {
+            struct pipeline_event pip_event;
+
+            if (!decoder->wg_stream)
+            {
+                ERR("Flush requested on a decoder MFT which hasn't finished initialization\n");
+                hr = E_FAIL;
+                break;
+            }
+
+            pip_event = get_pipeline_event(decoder);
+            assert(pip_event.type == PIPELINE_EVENT_READ_REQUEST);
+
+            wg_parser_push_data(decoder->wg_parser, WG_READ_FLUSHING, NULL, 0);
+
+            EnterCriticalSection(&decoder->event_cs);
+            decoder->event.type = PIPELINE_EVENT_NONE;
+            LeaveCriticalSection(&decoder->event_cs);
+            WakeAllConditionVariable(&decoder->event_cv);
+
+            decoder->offset_tracker = 0;
+            break;
+        }
+        default:
+        {
+            ERR("Unhandled message type %x.\n", message);
+            hr = E_FAIL;
+            break;
+        }
+    }
+
+    LeaveCriticalSection(&decoder->cs);
+    return hr;
 }
 
 static HRESULT WINAPI mf_decoder_ProcessInput(IMFTransform *iface, DWORD id, IMFSample *sample, DWORD flags)
-- 
2.34.1

