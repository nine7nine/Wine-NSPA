From af85dd52165d0c5755a34c7df87cbc631c92efcc Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?R=C3=A9mi=20Bernon?= <rbernon@codeweavers.com>
Date: Thu, 10 Feb 2022 09:57:36 +0100
Subject: [PATCH 79/88] winegstreamer: Support dynamic wg_transform video
 format change.

For: Call of Duty III, Mortal Kombat 11, Shadow Warrior 2,
Yakuza 4 Remastered, Hard Reset Redux.

Wine-Bug: https://bugs.winehq.org/show_bug.cgi?id=45988
Wine-Bug: https://bugs.winehq.org/show_bug.cgi?id=47084
Wine-Bug: https://bugs.winehq.org/show_bug.cgi?id=49715
Wine-Bug: https://bugs.winehq.org/show_bug.cgi?id=52183
CW-Bug-Id: #16839
CW-Bug-Id: #18678
CW-Bug-Id: #19362
---
 dlls/winegstreamer/h264_decoder.c | 26 ++++++++++++-
 dlls/winegstreamer/unix_private.h |  2 +
 dlls/winegstreamer/unixlib.h      |  1 +
 dlls/winegstreamer/wg_parser.c    |  4 +-
 dlls/winegstreamer/wg_transform.c | 61 ++++++++++++++++++++++++++++++-
 5 files changed, 89 insertions(+), 5 deletions(-)

diff --git a/dlls/winegstreamer/h264_decoder.c b/dlls/winegstreamer/h264_decoder.c
index 69e747f1dc0..219790128da 100644
--- a/dlls/winegstreamer/h264_decoder.c
+++ b/dlls/winegstreamer/h264_decoder.c
@@ -51,6 +51,7 @@ struct h264_decoder
     IMFMediaType *output_type;
 
     struct wg_transform *wg_transform;
+    struct wg_format wg_format;
 };
 
 static struct h264_decoder *impl_from_IMFTransform(IMFTransform *iface)
@@ -378,7 +379,7 @@ static HRESULT WINAPI h264_decoder_GetOutputAvailableType(IMFTransform *iface, D
     if (FAILED(hr = IMFMediaType_SetGUID(media_type, &MF_MT_SUBTYPE, output_type)))
         goto done;
 
-    hr = fill_output_media_type(media_type, NULL);
+    hr = fill_output_media_type(media_type, decoder->output_type);
 
 done:
     if (SUCCEEDED(hr))
@@ -427,6 +428,7 @@ static HRESULT WINAPI h264_decoder_SetOutputType(IMFTransform *iface, DWORD id,
 {
     struct h264_decoder *decoder = impl_from_IMFTransform(iface);
     GUID major, subtype;
+    BOOL identical;
     HRESULT hr;
     ULONG i;
 
@@ -449,7 +451,13 @@ static HRESULT WINAPI h264_decoder_SetOutputType(IMFTransform *iface, DWORD id,
         return MF_E_INVALIDMEDIATYPE;
 
     if (decoder->output_type)
+    {
+        if (SUCCEEDED(hr = IMFMediaType_Compare(decoder->output_type, (IMFAttributes *)type,
+                MF_ATTRIBUTES_MATCH_THEIR_ITEMS, &identical)) && identical)
+            return S_OK;
         IMFMediaType_Release(decoder->output_type);
+    }
+
     IMFMediaType_AddRef((decoder->output_type = type));
 
     if (FAILED(hr = try_create_wg_transform(decoder)))
@@ -543,6 +551,7 @@ static HRESULT WINAPI h264_decoder_ProcessOutput(IMFTransform *iface, DWORD flag
     struct wg_sample wg_sample = {0};
     IMFMediaBuffer *media_buffer;
     MFT_OUTPUT_STREAM_INFO info;
+    IMFMediaType *media_type;
     DWORD buffer_size;
     HRESULT hr;
 
@@ -575,6 +584,7 @@ static HRESULT WINAPI h264_decoder_ProcessOutput(IMFTransform *iface, DWORD flag
         goto done;
     wg_sample.size = buffer_size;
 
+    wg_sample.format = &decoder->wg_format;
     if (wg_sample.size < info.cbSize)
         hr = MF_E_BUFFERTOOSMALL;
     else if (SUCCEEDED(hr = wg_transform_read_data(decoder->wg_transform, &wg_sample)))
@@ -585,6 +595,20 @@ static HRESULT WINAPI h264_decoder_ProcessOutput(IMFTransform *iface, DWORD flag
             IMFSample_SetSampleDuration(samples[0].pSample, wg_sample.duration);
         hr = IMFMediaBuffer_SetCurrentLength(media_buffer, wg_sample.size);
     }
+    else if (hr == MF_E_TRANSFORM_STREAM_CHANGE)
+    {
+        media_type = mf_media_type_from_wg_format(&decoder->wg_format);
+        IMFMediaType_SetUINT32(media_type, &MF_MT_SAMPLE_SIZE, wg_sample.size);
+        IMFMediaType_DeleteItem(media_type, &MF_MT_FRAME_RATE);
+        IMFMediaType_DeleteItem(decoder->output_type, &MF_MT_DEFAULT_STRIDE);
+        fill_output_media_type(media_type, decoder->output_type);
+
+        IMFMediaType_Release(decoder->output_type);
+        decoder->output_type = media_type;
+
+        samples[0].dwStatus |= MFT_OUTPUT_DATA_BUFFER_FORMAT_CHANGE;
+        *status |= MFT_OUTPUT_DATA_BUFFER_FORMAT_CHANGE;
+    }
 
     IMFMediaBuffer_Unlock(media_buffer);
 
diff --git a/dlls/winegstreamer/unix_private.h b/dlls/winegstreamer/unix_private.h
index 1b055436ba5..88566ab1db5 100644
--- a/dlls/winegstreamer/unix_private.h
+++ b/dlls/winegstreamer/unix_private.h
@@ -26,6 +26,8 @@
 extern bool init_gstreamer(void) DECLSPEC_HIDDEN;
 extern GstElement *create_element(const char *name, const char *plugin_set) DECLSPEC_HIDDEN;
 extern GstCaps *wg_format_to_caps(const struct wg_format *format) DECLSPEC_HIDDEN;
+extern void wg_format_from_caps(struct wg_format *format, const GstCaps *caps) DECLSPEC_HIDDEN;
+extern bool wg_format_compare(const struct wg_format *a, const struct wg_format *b) DECLSPEC_HIDDEN;
 
 extern NTSTATUS wg_transform_create(void *args) DECLSPEC_HIDDEN;
 extern NTSTATUS wg_transform_destroy(void *args) DECLSPEC_HIDDEN;
diff --git a/dlls/winegstreamer/unixlib.h b/dlls/winegstreamer/unixlib.h
index 543e92e6c0d..1beeed8f1a2 100644
--- a/dlls/winegstreamer/unixlib.h
+++ b/dlls/winegstreamer/unixlib.h
@@ -340,6 +340,7 @@ struct wg_sample
     UINT32 size;
     /* pts and duration are in 100-nanosecond units. */
     ULONGLONG pts, duration;
+    struct wg_format *format;
 };
 
 struct wg_transform_read_data_params
diff --git a/dlls/winegstreamer/wg_parser.c b/dlls/winegstreamer/wg_parser.c
index 3217c78e864..8e64735bd64 100644
--- a/dlls/winegstreamer/wg_parser.c
+++ b/dlls/winegstreamer/wg_parser.c
@@ -311,7 +311,7 @@ static void wg_format_from_caps_video_cinepak(struct wg_format *format, const Gs
     format->u.video.fps_d = fps_d;
 }
 
-static void wg_format_from_caps(struct wg_format *format, const GstCaps *caps)
+void wg_format_from_caps(struct wg_format *format, const GstCaps *caps)
 {
     const GstStructure *structure = gst_caps_get_structure(caps, 0);
     const char *name = gst_structure_get_name(structure);
@@ -556,7 +556,7 @@ GstCaps *wg_format_to_caps(const struct wg_format *format)
     return NULL;
 }
 
-static bool wg_format_compare(const struct wg_format *a, const struct wg_format *b)
+bool wg_format_compare(const struct wg_format *a, const struct wg_format *b)
 {
     if (a->major_type != b->major_type)
         return false;
diff --git a/dlls/winegstreamer/wg_transform.c b/dlls/winegstreamer/wg_transform.c
index 93e777ba39a..df37b4e8543 100644
--- a/dlls/winegstreamer/wg_transform.c
+++ b/dlls/winegstreamer/wg_transform.c
@@ -56,6 +56,7 @@ struct wg_transform
     GstPad *their_sink, *their_src;
     pthread_mutex_t mutex;
     struct list samples;
+    GstCaps *sink_caps;
 };
 
 static GstCaps *wg_format_to_caps_xwma(const struct wg_encoded_format *format)
@@ -184,7 +185,7 @@ static GstFlowReturn transform_sink_chain_cb(GstPad *pad, GstObject *parent, Gst
     else
     {
         pthread_mutex_lock(&transform->mutex);
-        if (!(sample->sample = gst_sample_new(buffer, NULL, NULL, NULL)))
+        if (!(sample->sample = gst_sample_new(buffer, transform->sink_caps, NULL, NULL)))
             GST_ERROR("Failed to allocate transform sample");
         list_add_tail(&transform->samples, &sample->entry);
         pthread_mutex_unlock(&transform->mutex);
@@ -194,6 +195,38 @@ static GstFlowReturn transform_sink_chain_cb(GstPad *pad, GstObject *parent, Gst
     return GST_FLOW_OK;
 }
 
+static gboolean transform_sink_event_cb(GstPad *pad, GstObject *parent, GstEvent *event)
+{
+    struct wg_transform *transform = gst_pad_get_element_private(pad);
+
+    GST_INFO("transform %p, type \"%s\".", transform, GST_EVENT_TYPE_NAME(event));
+
+    switch (event->type)
+    {
+    case GST_EVENT_CAPS:
+    {
+        GstCaps *caps;
+        gchar *str;
+
+        gst_event_parse_caps(event, &caps);
+        str = gst_caps_to_string(caps);
+        GST_WARNING("Got caps \"%s\".", str);
+        g_free(str);
+
+        pthread_mutex_lock(&transform->mutex);
+        gst_caps_unref(transform->sink_caps);
+        transform->sink_caps = gst_caps_ref(caps);
+        pthread_mutex_unlock(&transform->mutex);
+        break;
+    }
+    default:
+        GST_WARNING("Ignoring \"%s\" event.", GST_EVENT_TYPE_NAME(event));
+    }
+
+    gst_event_unref(event);
+    return TRUE;
+}
+
 NTSTATUS wg_transform_destroy(void *args)
 {
     struct wg_transform *transform = args;
@@ -311,7 +344,7 @@ NTSTATUS wg_transform_create(void *args)
     GstPadTemplate *template;
     const gchar *media_type;
     GstSegment *segment;
-    int ret;
+    int i, ret;
 
     if (!init_gstreamer())
         return E_FAIL;
@@ -329,6 +362,7 @@ NTSTATUS wg_transform_create(void *args)
     raw_caps = gst_caps_new_empty_simple(media_type);
     assert(raw_caps);
 
+    transform->sink_caps = gst_caps_copy(sink_caps);
     transform->container = gst_bin_new("wg_transform");
     assert(transform->container);
 
@@ -347,6 +381,12 @@ NTSTATUS wg_transform_create(void *args)
             goto failed;
         break;
     case WG_MAJOR_TYPE_VIDEO:
+        if (!(element = create_element("videoconvert", "base")) ||
+                !transform_append_element(transform, element, &first, &last))
+            goto failed;
+        for (i = 0; i < gst_caps_get_size(sink_caps); ++i)
+            gst_structure_remove_fields(gst_caps_get_structure(sink_caps, i),
+                    "width", "height", NULL);
         break;
     default:
         assert(0);
@@ -377,6 +417,7 @@ NTSTATUS wg_transform_create(void *args)
     assert(transform->my_sink);
 
     gst_pad_set_element_private(transform->my_sink, transform);
+    gst_pad_set_event_function(transform->my_sink, transform_sink_event_cb);
     gst_pad_set_chain_function(transform->my_sink, transform_sink_chain_cb);
 
     if ((ret = gst_pad_link(transform->my_src, transform->their_sink)) < 0)
@@ -469,9 +510,11 @@ NTSTATUS wg_transform_read_data(void *args)
     struct wg_transform *transform = params->transform;
     struct wg_sample *read_sample = params->sample;
     struct wg_transform_sample *transform_sample;
+    struct wg_format buffer_format;
     GstBuffer *buffer;
     struct list *head;
     GstMapInfo info;
+    GstCaps *caps;
 
     pthread_mutex_lock(&transform->mutex);
     if (!(head = list_head(&transform->samples)))
@@ -483,6 +526,20 @@ NTSTATUS wg_transform_read_data(void *args)
     transform_sample = LIST_ENTRY(head, struct wg_transform_sample, entry);
     buffer = gst_sample_get_buffer(transform_sample->sample);
 
+    if (read_sample->format)
+    {
+        if (!(caps = gst_sample_get_caps(transform_sample->sample)))
+            caps = transform->sink_caps;
+        wg_format_from_caps(&buffer_format, caps);
+        if (!wg_format_compare(read_sample->format, &buffer_format))
+        {
+            *read_sample->format = buffer_format;
+            read_sample->size = gst_buffer_get_size(buffer);
+            pthread_mutex_unlock(&transform->mutex);
+            return MF_E_TRANSFORM_STREAM_CHANGE;
+        }
+    }
+
     gst_buffer_map(buffer, &info, GST_MAP_READ);
     if (read_sample->size > info.size)
         read_sample->size = info.size;
-- 
2.34.1

