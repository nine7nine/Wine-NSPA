From d7ab3624b79a19a5957bb4ffdcb0d258616aba17 Mon Sep 17 00:00:00 2001
From: Paul Gofman <pgofman@codeweavers.com>
Date: Mon, 23 Jan 2023 21:23:28 -0600
Subject: [PATCH] esync, fsync: Support wait on completion ports.

CW-Bug-Id: #21831
---
 server/completion.c | 75 +++++++++++++++++++++++++++++++++++++++++----
 1 file changed, 69 insertions(+), 6 deletions(-)

diff --git a/server/completion.c b/server/completion.c
index cbafe811796..f6aa06720bf 100644
--- a/server/completion.c
+++ b/server/completion.c
@@ -30,7 +30,7 @@
 
 #include <stdarg.h>
 #include <stdio.h>
-
+#include <unistd.h>
 #include "ntstatus.h"
 #define WIN32_NO_STATUS
 #include "windef.h"
@@ -40,7 +40,8 @@
 #include "file.h"
 #include "handle.h"
 #include "request.h"
-
+#include "esync.h"
+#include "fsync.h"
 
 static const WCHAR completion_name[] = {'I','o','C','o','m','p','l','e','t','i','o','n'};
 
@@ -64,6 +65,8 @@ struct completion_wait
     struct completion *completion;
     struct list        queue;
     unsigned int       depth;
+    int                esync_fd;
+    unsigned int       fsync_idx;
 };
 
 struct completion
@@ -75,6 +78,8 @@ struct completion
 static void completion_wait_dump( struct object*, int );
 static int completion_wait_signaled( struct object *obj, struct wait_queue_entry *entry );
 static void completion_wait_satisfied( struct object *obj, struct wait_queue_entry *entry );
+static int completion_wait_get_esync_fd( struct object *obj, enum esync_type *type );
+static unsigned int completion_wait_get_fsync_idx( struct object *obj, enum fsync_type *type );
 static void completion_wait_destroy( struct object * );
 
 static const struct object_ops completion_wait_ops =
@@ -85,8 +90,8 @@ static const struct object_ops completion_wait_ops =
     add_queue,                      /* add_queue */
     remove_queue,                   /* remove_queue */
     completion_wait_signaled,       /* signaled */
-    NULL,                           /* get_esync_fd */
-    NULL,                           /* get_fsync_idx */
+    completion_wait_get_esync_fd,   /* get_esync_fd */
+    completion_wait_get_fsync_idx,  /* get_fsync_idx */
     completion_wait_satisfied,      /* satisfied */
     no_signal,                      /* signal */
     no_get_fd,                      /* get_fd */
@@ -106,6 +111,8 @@ static const struct object_ops completion_wait_ops =
 static void completion_dump( struct object*, int );
 static int completion_add_queue( struct object *obj, struct wait_queue_entry *entry );
 static void completion_remove_queue( struct object *obj, struct wait_queue_entry *entry );
+static int completion_get_esync_fd( struct object *obj, enum esync_type *type );
+static unsigned int completion_get_fsync_idx( struct object *obj, enum fsync_type *type );
 static void completion_destroy( struct object * );
 
 static const struct object_ops completion_ops =
@@ -116,8 +123,8 @@ static const struct object_ops completion_ops =
     completion_add_queue,      /* add_queue */
     completion_remove_queue,   /* remove_queue */
     NULL,                      /* signaled */
-    NULL,                      /* get_esync_fd */
-    NULL,                      /* get_fsync_idx */
+    completion_get_esync_fd,   /* get_esync_fd */
+    completion_get_fsync_idx,  /* get_fsync_idx */
     no_satisfied,              /* satisfied */
     no_signal,                 /* signal */
     no_get_fd,                 /* get_fd */
@@ -152,6 +159,11 @@ static void completion_wait_destroy( struct object *obj)
     {
         free( tmp );
     }
+
+    if (do_esync())
+        close( wait->esync_fd );
+
+    if (wait->fsync_idx) fsync_free_shm_idx( wait->fsync_idx );
 }
 
 static void completion_wait_dump( struct object *obj, int verbose )
@@ -170,6 +182,23 @@ static int completion_wait_signaled( struct object *obj, struct wait_queue_entry
     return !wait->completion || !list_empty( &wait->queue );
 }
 
+static int completion_wait_get_esync_fd( struct object *obj, enum esync_type *type )
+{
+    struct completion_wait *wait = (struct completion_wait *)obj;
+
+    *type = ESYNC_MANUAL_SERVER;
+    return wait->esync_fd;
+}
+
+static unsigned int completion_wait_get_fsync_idx( struct object *obj, enum fsync_type *type )
+{
+    struct completion_wait *wait = (struct completion_wait *)obj;
+
+    assert( obj->ops == &completion_wait_ops );
+    *type = FSYNC_MANUAL_SERVER;
+    return wait->fsync_idx;
+}
+
 static void completion_wait_satisfied( struct object *obj, struct wait_queue_entry *entry )
 {
     struct completion_wait *wait = (struct completion_wait *)obj;
@@ -209,6 +238,22 @@ static void completion_remove_queue( struct object *obj, struct wait_queue_entry
     completion->wait->obj.ops->remove_queue( &completion->wait->obj, entry );
 }
 
+static int completion_get_esync_fd( struct object *obj, enum esync_type *type )
+{
+    struct completion *completion = (struct completion *)obj;
+
+    assert( obj->ops == &completion_ops );
+    return completion->wait->obj.ops->get_esync_fd( &completion->wait->obj, type );
+}
+
+static unsigned int completion_get_fsync_idx( struct object *obj, enum fsync_type *type )
+{
+    struct completion *completion = (struct completion *)obj;
+
+    assert( obj->ops == &completion_ops );
+    return completion->wait->obj.ops->get_fsync_idx( &completion->wait->obj, type );
+}
+
 static void completion_destroy( struct object *obj )
 {
     struct completion *completion = (struct completion *)obj;
@@ -237,6 +282,14 @@ static struct completion *create_completion( struct object *root, const struct u
     completion->wait->completion = completion;
     list_init( &completion->wait->queue );
     completion->wait->depth = 0;
+    completion->wait->fsync_idx = 0;
+
+    if (do_fsync())
+        completion->wait->fsync_idx = fsync_alloc_shm( 0, 0 );
+
+    if (do_esync())
+        completion->wait->esync_fd = esync_create_fd( 0, 0 );
+
     return completion;
 }
 
@@ -260,6 +313,7 @@ void add_completion( struct completion *completion, apc_param_t ckey, apc_param_
 
     list_add_tail( &completion->wait->queue, &msg->queue_entry );
     completion->wait->depth++;
+
     wake_up( &completion->wait->obj, 1 );
 }
 
@@ -344,6 +398,15 @@ DECL_HANDLER(remove_completion)
         reply->status = msg->status;
         reply->information = msg->information;
         free( msg );
+
+        if (!completion_wait_signaled( &wait->obj, NULL ))
+        {
+            if (do_fsync())
+                fsync_clear( &wait->obj );
+
+            if (do_esync())
+                esync_clear( wait->esync_fd );
+        }
     }
 
     release_object( wait );

From eda4a353cc63cc3caf35c93c1fed9c7d145fa6e4 Mon Sep 17 00:00:00 2001
From: Paul Gofman <pgofman@codeweavers.com>
Date: Tue, 24 Jan 2023 10:28:46 -0600
Subject: [PATCH] fixup! esync, fsync: Support wait on completion ports.

---
 server/completion.c | 13 ++++++++++++-
 1 file changed, 12 insertions(+), 1 deletion(-)

diff --git a/server/completion.c b/server/completion.c
index f6aa06720bf..3ed7b2ff2a3 100644
--- a/server/completion.c
+++ b/server/completion.c
@@ -387,7 +387,18 @@ DECL_HANDLER(remove_completion)
 
     entry = list_head( &wait->queue );
     if (!entry)
-        set_error( STATUS_PENDING );
+    {
+        if (wait->completion)
+        {
+            if (do_fsync() || do_esync())
+            {
+                /* completion_wait_satisfied is not called, so lock completion here. */
+                current->locked_completion = grab_object( wait );
+            }
+            set_error( STATUS_PENDING );
+        }
+        else set_error( STATUS_ABANDONED_WAIT_0 );
+    }
     else
     {
         list_remove( entry );

