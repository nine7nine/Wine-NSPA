From 9b0b37954a057df41de2662b2a953b559f5c0ee3 Mon Sep 17 00:00:00 2001
From: Torge Matthies <tmatthies@codeweavers.com>
Date: Wed, 7 Sep 2022 16:10:53 +0200
Subject: [PATCH 1/5] ntdll: Implement NtFlushProcessWriteBuffers.

Based on a patch by Jinoh Kang from February 2022 [1]. The following
description is copied from said patch:

NtFlushProcessWriteBuffers is the NT equivalent of Linux membarrier()
system call.  The .NET Framework garbage collector uses it to
synchronize with other threads, and thus is required to avoid silent
memory corruption.

[1] https://www.winehq.org/mailman3/hyperkitty/list/wine-devel@winehq.org/message/F33GVEUQ4MXD6IXOEG56DNVVXC2D4AM2/
---
 dlls/ntdll/unix/server.c  |   6 ++
 dlls/ntdll/unix/virtual.c |  27 ++++++++-
 server/protocol.def       |  19 ++++++-
 server/thread.h           |   1 +
 5 files changed, 165 insertions(+), 4 deletions(-)

diff --git a/dlls/ntdll/unix/server.c b/dlls/ntdll/unix/server.c
index 77e8d5c7566..51a83f472e1 100644
--- a/dlls/ntdll/unix/server.c
+++ b/dlls/ntdll/unix/server.c
@@ -574,6 +574,12 @@ static void invoke_system_apc( const apc_call_t *call, apc_result_t *result, BOO
         if (!self) NtClose( wine_server_ptr_handle(call->dup_handle.dst_process) );
         break;
     }
+    case APC_MEMORY_BARRIER:
+    {
+        MemoryBarrier();
+        result->type = call->type;
+        break;
+    }
     default:
         server_protocol_error( "get_apc_request: bad type %d\n", call->type );
         break;
diff --git a/dlls/ntdll/unix/virtual.c b/dlls/ntdll/unix/virtual.c
index 96a5e095d16..0d2ce328371 100644
--- a/dlls/ntdll/unix/virtual.c
+++ b/dlls/ntdll/unix/virtual.c
@@ -5020,8 +5020,31 @@ NTSTATUS WINAPI NtFlushInstructionCache( HANDLE handle, const void *addr, SIZE_T
  */
 void WINAPI NtFlushProcessWriteBuffers(void)
 {
-    static int once = 0;
-    if (!once++) FIXME( "stub\n" );
+    static pthread_mutex_t apc_memorybarrier_mutex = PTHREAD_MUTEX_INITIALIZER;
+    NTSTATUS status;
+
+    pthread_mutex_lock( &apc_memorybarrier_mutex );
+
+    do
+    {
+        SERVER_START_REQ( flush_process_write_buffers )
+        {
+            status = wine_server_call( req );
+        }
+        SERVER_END_REQ;
+    }
+    while (status);
+
+    do
+    {
+        select_op_t select_op;
+        select_op.membarrier.op = SELECT_MEMBARRIER;
+        status = server_select( &select_op, sizeof(select_op.membarrier), SELECT_INTERRUPTIBLE,
+                                TIMEOUT_INFINITE, NULL, NULL );
+    }
+    while (status);
+
+    pthread_mutex_unlock( &apc_memorybarrier_mutex );
 }
 
 
diff --git a/server/protocol.def b/server/protocol.def
index d828d41d1f7..eb062d3c7a3 100644
--- a/server/protocol.def
+++ b/server/protocol.def
@@ -462,7 +462,8 @@ enum select_op
     SELECT_WAIT_ALL,
     SELECT_SIGNAL_AND_WAIT,
     SELECT_KEYED_EVENT_WAIT,
-    SELECT_KEYED_EVENT_RELEASE
+    SELECT_KEYED_EVENT_RELEASE,
+    SELECT_MEMBARRIER
 };
 
 typedef union
@@ -485,6 +486,10 @@ typedef union
         obj_handle_t    handle;
         client_ptr_t    key;
     } keyed_event;
+    struct
+    {
+        enum select_op  op;      /* SELECT_MEMBARRIER */
+    } membarrier;
 } select_op_t;
 
 enum apc_type
@@ -502,7 +507,8 @@ enum apc_type
     APC_MAP_VIEW,
     APC_UNMAP_VIEW,
     APC_CREATE_THREAD,
-    APC_DUP_HANDLE
+    APC_DUP_HANDLE,
+    APC_MEMORY_BARRIER
 };
 
 typedef struct
@@ -611,6 +617,10 @@ typedef union
         unsigned int     attributes;   /* object attributes */
         unsigned int     options;      /* duplicate options */
     } dup_handle;
+    struct
+    {
+        enum apc_type    type;      /* APC_MEMORY_BARRIER */
+    } memory_barrier;
 } apc_call_t;
 
 typedef union
@@ -1610,6 +1620,11 @@ enum server_fd_type
 @END
 
 
+/* Issue a memory barrier on other threads in the same process */
+@REQ(flush_process_write_buffers)
+@END
+
+
 struct thread_info
 {
     timeout_t       start_time;
diff --git a/server/thread.h b/server/thread.h
index 8dcf966a90a..c9040704700 100644
--- a/server/thread.h
+++ b/server/thread.h
@@ -98,6 +98,7 @@ struct thread
     struct list            kernel_object; /* list of kernel object pointers */
     data_size_t            desc_len;      /* thread description length in bytes */
     WCHAR                 *desc;          /* thread description string */
+    int                    mb_apcs_pending; /* number of APCs left for the current memory barrier */
     struct timeout_user   *exit_poll;     /* poll if the thread/process has exited already */
     struct object         *queue_shared_mapping; /* thread queue shared memory mapping */
     volatile struct queue_shared_memory *queue_shared;  /* thread queue shared memory ptr */

-- 
GitLab


From 1c2c89b95206e6fec4d85bae849467fecf72a386 Mon Sep 17 00:00:00 2001
From: Torge Matthies <tmatthies@codeweavers.com>
Date: Wed, 7 Sep 2022 16:10:53 +0200
Subject: [PATCH 2/5] ntdll: Make server_select a memory barrier.

---
 dlls/ntdll/unix/server.c | 3 +++
 2 files changed, 4 insertions(+), 1 deletion(-)

diff --git a/dlls/ntdll/unix/server.c b/dlls/ntdll/unix/server.c
index 51a83f472e1..362c7793cbc 100644
--- a/dlls/ntdll/unix/server.c
+++ b/dlls/ntdll/unix/server.c
@@ -602,6 +602,9 @@ unsigned int server_select( const select_op_t *select_op, data_size_t size, UINT
     sigset_t old_set;
     int signaled;
 
+    /* ensure writes so far are visible to other threads */
+    MemoryBarrier();
+
     memset( &result, 0, sizeof(result) );
 
     do


From bdafce376cd69e42a106c56a08d1decf6889b173 Mon Sep 17 00:00:00 2001
From: Torge Matthies <tmatthies@codeweavers.com>
Date: Wed, 7 Sep 2022 16:10:53 +0200
Subject: [PATCH 3/5] ntdll: Add MADV_DONTNEED-based fast path for
 NtFlushProcessWriteBuffers.

Credits to Avi Kivity (scylladb) and Aliaksei Kandratsenka (gperftools) for this trick, see [1].

[1] https://github.com/scylladb/seastar/commit/77a58e4dc020233f66fccb8d9e8f7a8b7f9210c4
---
 dlls/ntdll/unix/virtual.c | 54 ++++++++++++++++++++++++++++++++++++---
 1 file changed, 50 insertions(+), 4 deletions(-)

diff --git a/dlls/ntdll/unix/virtual.c b/dlls/ntdll/unix/virtual.c
index 0d2ce328371..0f473dc0476 100644
--- a/dlls/ntdll/unix/virtual.c
+++ b/dlls/ntdll/unix/virtual.c
@@ -214,6 +214,11 @@ struct range_entry
 static struct range_entry *free_ranges;
 static struct range_entry *free_ranges_end;
 
+#if defined(__linux__) && (defined(__i386__) || defined(__x86_64__))
+static void *dontneed_page;
+static pthread_mutex_t dontneed_page_mutex = PTHREAD_MUTEX_INITIALIZER;
+#endif
+
 
 static inline BOOL is_beyond_limit( const void *addr, size_t size, const void *limit )
 {
@@ -5015,10 +5020,40 @@ NTSTATUS WINAPI NtFlushInstructionCache( HANDLE handle, const void *addr, SIZE_T
 }
 
 
-/**********************************************************************
- *           NtFlushProcessWriteBuffers  (NTDLL.@)
- */
-void WINAPI NtFlushProcessWriteBuffers(void)
+#if defined(__linux__) && (defined(__i386__) || defined(__x86_64__))
+static int try_madvise( void )
+{
+    int ret = 0;
+    char *mem;
+
+    pthread_mutex_lock(&dontneed_page_mutex);
+    /* Credits to Avi Kivity (scylladb) and Aliaksei Kandratsenka (gperftools) for this trick,
+     * see https://github.com/scylladb/seastar/commit/77a58e4dc020233f66fccb8d9e8f7a8b7f9210c4 */
+    mem = dontneed_page;
+    if (!mem)
+    {
+        mem = anon_mmap_alloc( page_size, PROT_READ | PROT_WRITE );
+        if (mem == MAP_FAILED)
+            goto failed;
+        if (mlock( mem, page_size ))
+        {
+            munmap( mem, page_size );
+            goto failed;
+        }
+        dontneed_page = mem;
+    }
+    *mem = 3;
+    ret = !madvise( mem, page_size, MADV_DONTNEED );
+failed:
+    pthread_mutex_unlock(&dontneed_page_mutex);
+    return ret;
+}
+#else
+static int try_madvise( void ) { return 0; }
+#endif
+
+
+static void do_apc_memorybarrier( void )
 {
     static pthread_mutex_t apc_memorybarrier_mutex = PTHREAD_MUTEX_INITIALIZER;
     NTSTATUS status;
@@ -5048,6 +5083,17 @@ void WINAPI NtFlushProcessWriteBuffers(void)
 }
 
 
+/**********************************************************************
+ *           NtFlushProcessWriteBuffers  (NTDLL.@)
+ */
+void WINAPI NtFlushProcessWriteBuffers(void)
+{
+    if (try_madvise())
+        return;
+    do_apc_memorybarrier();
+}
+
+
 /**********************************************************************
  *           NtCreatePagingFile  (NTDLL.@)
  */
-- 
GitLab


From ceee6622d2ca31187c1d9d29dc1f591f7be8f734 Mon Sep 17 00:00:00 2001
From: Torge Matthies <tmatthies@codeweavers.com>
Date: Wed, 7 Sep 2022 16:10:53 +0200
Subject: [PATCH 4/5] ntdll: Add sys_membarrier-based fast path to
 NtFlushProcessWriteBuffers.

Uses the MEMBARRIER_CMD_PRIVATE_EXPEDITED membarrier command introduced in Linux 4.14.
---
 dlls/ntdll/unix/virtual.c | 49 ++++++++++++++++++++++++++++++++++++++-
 1 file changed, 48 insertions(+), 1 deletion(-)

diff --git a/dlls/ntdll/unix/virtual.c b/dlls/ntdll/unix/virtual.c
index 0f473dc0476..67d78fc3185 100644
--- a/dlls/ntdll/unix/virtual.c
+++ b/dlls/ntdll/unix/virtual.c
@@ -39,6 +39,9 @@
 #ifdef HAVE_SYS_SYSINFO_H
 # include <sys/sysinfo.h>
 #endif
+#ifdef HAVE_SYS_SYSCALL_H
+# include <sys/syscall.h>
+#endif
 #ifdef HAVE_SYS_SYSCTL_H
 # include <sys/sysctl.h>
 #endif
@@ -214,10 +217,16 @@ struct range_entry
 static struct range_entry *free_ranges;
 static struct range_entry *free_ranges_end;
 
-#if defined(__linux__) && (defined(__i386__) || defined(__x86_64__))
+#ifdef __linux__
+#ifdef __NR_membarrier
+static BOOL membarrier_exp_available;
+static pthread_once_t membarrier_init_once = PTHREAD_ONCE_INIT;
+#endif
+#if defined(__i386__) || defined(__x86_64__)
 static void *dontneed_page;
 static pthread_mutex_t dontneed_page_mutex = PTHREAD_MUTEX_INITIALIZER;
 #endif
+#endif
 
 
 static inline BOOL is_beyond_limit( const void *addr, size_t size, const void *limit )
@@ -5020,6 +5029,42 @@ NTSTATUS WINAPI NtFlushInstructionCache( HANDLE handle, const void *addr, SIZE_T
 }
 
 
+#if defined(__linux__) && defined(__NR_membarrier)
+#define MEMBARRIER_CMD_QUERY                        0x00
+#define MEMBARRIER_CMD_PRIVATE_EXPEDITED            0x08
+#define MEMBARRIER_CMD_REGISTER_PRIVATE_EXPEDITED   0x10
+
+
+static int membarrier( int cmd, unsigned int flags, int cpu_id )
+{
+    return syscall( __NR_membarrier, cmd, flags, cpu_id );
+}
+
+
+static void membarrier_init( void )
+{
+    static const int exp_required_cmds =
+        MEMBARRIER_CMD_PRIVATE_EXPEDITED | MEMBARRIER_CMD_REGISTER_PRIVATE_EXPEDITED;
+    int available_cmds = membarrier( MEMBARRIER_CMD_QUERY, 0, 0 );
+    if (available_cmds == -1)
+        return;
+    if ((available_cmds & exp_required_cmds) == exp_required_cmds)
+        membarrier_exp_available = !membarrier( MEMBARRIER_CMD_REGISTER_PRIVATE_EXPEDITED, 0, 0 );
+}
+
+
+static int try_exp_membarrier( void )
+{
+    pthread_once(&membarrier_init_once, membarrier_init);
+    if (!membarrier_exp_available)
+        return 0;
+    return !membarrier( MEMBARRIER_CMD_PRIVATE_EXPEDITED, 0, 0 );
+}
+#else
+static int try_exp_membarrier( void ) { return 0; }
+#endif
+
+
 #if defined(__linux__) && (defined(__i386__) || defined(__x86_64__))
 static int try_madvise( void )
 {
@@ -5088,6 +5133,8 @@ static void do_apc_memorybarrier( void )
  */
 void WINAPI NtFlushProcessWriteBuffers(void)
 {
+    if (try_exp_membarrier())
+        return;
     if (try_madvise())
         return;
     do_apc_memorybarrier();
-- 
GitLab

--- a/server/thread.c		2022-09-21 16:50:24.835209391 -0500
+++ b/server/thread.c	2022-09-21 16:51:47.623252239 -0500
@@ -258,6 +258,41 @@ static const struct object_ops context_o
     no_destroy                  /* destroy */
 };
 
+/* process-wide memory barriers */
+
+struct memory_barrier
+{
+    struct object   obj;      /* object header */
+};
+
+static void dump_memory_barrier( struct object *obj, int verbose );
+static int memory_barrier_signaled( struct object *obj, struct wait_queue_entry *entry );
+
+static const struct object_ops memory_barrier_ops =
+{
+    sizeof(struct memory_barrier),      /* size */
+    &no_type,                           /* type */
+    dump_memory_barrier,                /* dump */
+    add_queue,                          /* add_queue */
+    remove_queue,                       /* remove_queue */
+    memory_barrier_signaled,            /* signaled */
+    no_satisfied,                       /* satisfied */
+    no_signal,                          /* signal */
+    no_get_fd,                          /* get_fd */
+    default_map_access,                 /* map_access */
+    default_get_sd,                     /* get_sd */
+    default_set_sd,                     /* set_sd */
+    no_get_full_name,                   /* get_full_name */
+    no_lookup_name,                     /* lookup_name */
+    no_link_name,                       /* link_name */
+    NULL,                               /* unlink_name */
+    no_open_file,                       /* open_file */
+    no_kernel_obj_list,                 /* get_kernel_obj_list */
+    no_close_handle,                    /* close_handle */
+    no_destroy                          /* destroy */
+};
+
+struct memory_barrier *memory_barrier_obj;
 
 /* thread operations */
 
@@ -361,6 +396,7 @@ static inline void init_thread_structure
     thread->token           = NULL;
     thread->desc            = NULL;
     thread->desc_len        = 0;
+    thread->mb_apcs_pending = 0;
     thread->exit_poll       = NULL;
     thread->queue_shared_mapping = NULL;
     thread->queue_shared         = NULL;
@@ -475,6 +511,11 @@ struct thread *create_thread( int fd, st
     struct thread *thread;
     int request_pipe[2];
 
+    if (memory_barrier_obj)
+        grab_object( &memory_barrier_obj->obj );
+    else if (!(memory_barrier_obj = alloc_object( &memory_barrier_ops )))
+        return NULL;
+
     if (fd == -1)
     {
         if (pipe( request_pipe ) == -1)
@@ -641,12 +682,14 @@ static void cleanup_thread( struct threa
     thread->desktop = 0;
     thread->desc = NULL;
     thread->desc_len = 0;
+    thread->mb_apcs_pending = 0;
 }
 
 /* destroy a thread when its refcount is 0 */
 static void destroy_thread( struct object *obj )
 {
     struct thread *thread = (struct thread *)obj;
+    struct memory_barrier *mb = memory_barrier_obj;
     assert( obj->ops == &thread_ops );
 
     list_remove( &thread->entry );
@@ -655,6 +698,9 @@ static void destroy_thread( struct objec
     if (thread->exit_poll) remove_timeout_user( thread->exit_poll );
     if (thread->id) free_ptid( thread->id );
     if (thread->token) release_object( thread->token );
+    if (mb->obj.refcount == 1)
+        memory_barrier_obj = NULL;
+    release_object( &mb->obj );
 
     if (do_esync())
         close( thread->esync_fd );
@@ -750,6 +796,18 @@ static struct thread_apc *create_apc( st
     return apc;
 }
 
+static void dump_memory_barrier( struct object *obj, int verbose )
+{
+    assert( obj->ops == &memory_barrier_ops );
+    fprintf( stderr, "Memory barrier\n" );
+}
+
+static int memory_barrier_signaled( struct object *obj, struct wait_queue_entry *entry )
+{
+    struct thread *thread = entry->wait->thread;
+    return !thread->mb_apcs_pending;
+}
+
 /* get a thread pointer from a thread id (and increment the refcount) */
 struct thread *get_thread_from_id( thread_id_t id )
 {
@@ -1492,6 +1550,13 @@ static int select_on( const select_op_t
         current->wait->key = select_op->keyed_event.key;
         break;
 
+    case SELECT_MEMBARRIER:
+        object = &memory_barrier_obj->obj;
+        if (!object) return 1;
+        ret = wait_on( select_op, 1, &object, flags, when );
+        if (!ret) return 1;
+        break;
+
     default:
         set_error( STATUS_INVALID_PARAMETER );
         return 1;
@@ -1643,6 +1708,16 @@ int thread_queue_apc( struct process *pr
     return ret;
 }
 
+static void finish_membarrier_apc( struct thread_apc *apc )
+{
+    struct thread *thread = (struct thread *)apc->owner;
+
+    assert( thread );
+    assert( thread->mb_apcs_pending > 0 );
+    if (--thread->mb_apcs_pending)
+        wake_up( &memory_barrier_obj->obj, 1 );
+}
+
 /* cancel the async procedure call owned by a specific object */
 void thread_cancel_apc( struct thread *thread, struct object *owner, enum apc_type type )
 {
@@ -1654,6 +1729,8 @@ void thread_cancel_apc( struct thread *t
         if (apc->owner != owner) continue;
         list_remove( &apc->entry );
         apc->executed = 1;
+        if (apc->call.type == APC_MEMORY_BARRIER)
+            finish_membarrier_apc( apc );
         wake_up( &apc->obj, 0 );
         release_object( apc );
         return;
@@ -1691,6 +1768,8 @@ static void clear_apc_queue( struct list
         struct thread_apc *apc = LIST_ENTRY( ptr, struct thread_apc, entry );
         list_remove( &apc->entry );
         apc->executed = 1;
+        if (apc->call.type == APC_MEMORY_BARRIER)
+            finish_membarrier_apc( apc );
         wake_up( &apc->obj, 0 );
         release_object( apc );
     }
@@ -2169,6 +2248,8 @@ DECL_HANDLER(select)
             apc->result.create_thread.handle = handle;
             clear_error();  /* ignore errors from the above calls */
         }
+        if (apc->call.type == APC_MEMORY_BARRIER)   /* wake up caller if membarriers done */
+            finish_membarrier_apc( apc );
         wake_up( &apc->obj, 0 );
         close_handle( current->process, req->prev_apc );
         release_object( apc );
@@ -2190,6 +2271,8 @@ DECL_HANDLER(select)
         else
         {
             apc->executed = 1;
+            if (apc->call.type == APC_MEMORY_BARRIER)
+                finish_membarrier_apc( apc );
             wake_up( &apc->obj, 0 );
         }
         release_object( apc );
@@ -2531,3 +2614,36 @@ DECL_HANDLER(get_next_thread)
     set_error( STATUS_NO_MORE_ENTRIES );
     release_object( process );
 }
+
+DECL_HANDLER(flush_process_write_buffers)
+{
+    struct process *process = current->process;
+    struct thread *thread;
+    apc_call_t call;
+
+    assert( memory_barrier_obj );
+
+    memset( &call, 0, sizeof(call) );
+    call.memory_barrier.type = APC_MEMORY_BARRIER;
+
+    LIST_FOR_EACH_ENTRY( thread, &process->thread_list, struct thread, proc_entry )
+    {
+        struct thread_apc *apc;
+        int success;
+
+        if (thread == current || thread->state == TERMINATED || thread->wait) continue;
+
+        if (!(apc = create_apc( &current->obj, &call ))) break;
+
+        if ((success = queue_apc( NULL, thread, apc, 0 )))
+            thread->mb_apcs_pending++;
+
+        release_object( apc );
+
+        if (!success)
+        {
+            set_error( STATUS_UNSUCCESSFUL );
+            break;
+        }
+    }
+}

