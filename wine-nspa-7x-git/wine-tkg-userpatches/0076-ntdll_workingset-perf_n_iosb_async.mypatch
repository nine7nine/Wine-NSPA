From 28f9a7afca4a77a9bcd9d4c1808f91f6643b2558 Mon Sep 17 00:00:00 2001
From: Zebediah Figura <zfigura@codeweavers.com>
Date: Fri, 16 Sep 2022 12:51:22 -0500
Subject: [PATCH 1/5] ws2_32/tests: Add more tests for iosb contents while a
 recv is pending.

---
 dlls/ws2_32/tests/afd.c  | 7 ++++---
 dlls/ws2_32/tests/sock.c | 4 ++++
 2 files changed, 8 insertions(+), 3 deletions(-)

diff --git a/dlls/ws2_32/tests/afd.c b/dlls/ws2_32/tests/afd.c
index 21e7a50aef3..3215ddaef62 100644
--- a/dlls/ws2_32/tests/afd.c
+++ b/dlls/ws2_32/tests/afd.c
@@ -1466,13 +1466,14 @@ static void test_recv(void)
             IOCTL_AFD_RECV, &params, sizeof(params) - 1, NULL, 0);
     ok(ret == STATUS_INVALID_PARAMETER, "got %#x\n", ret);
 
-    memset(&io, 0, sizeof(io));
+    io.Status = 0xdeadbeef;
+    io.Information = 0xdeadbeef;
     memset(buffer, 0xcc, sizeof(buffer));
     ret = NtDeviceIoControlFile((HANDLE)client, event, NULL, NULL, &io,
             IOCTL_AFD_RECV, &params, sizeof(params), NULL, 0);
     ok(ret == STATUS_PENDING, "got %#x\n", ret);
-    ok(!io.Status, "got status %#lx\n", io.Status);
-    ok(!io.Information, "got information %#Ix\n", io.Information);
+    ok(io.Status == 0xdeadbeef, "got status %#lx\n", io.Status);
+    ok(io.Information == 0xdeadbeef, "got information %#Ix\n", io.Information);
 
     /* These structures need not remain valid. */
     memset(&params, 0xcc, sizeof(params));
diff --git a/dlls/ws2_32/tests/sock.c b/dlls/ws2_32/tests/sock.c
index 3e6faaffa4c..ad7b67d2a43 100644
--- a/dlls/ws2_32/tests/sock.c
+++ b/dlls/ws2_32/tests/sock.c
@@ -12159,11 +12159,15 @@ static void test_nonblocking_async_recv(void)
 
     memset(buffer, 0, sizeof(buffer));
     WSASetLastError(0xdeadbeef);
+    overlapped.Internal = 0xdeadbeef;
+    overlapped.InternalHigh = 0xdeadbeef;
     ret = WSARecv(client, &wsabuf, 1, NULL, &flags, &overlapped, NULL);
     ok(ret == -1, "got %d\n", ret);
     ok(WSAGetLastError() == ERROR_IO_PENDING, "got error %u\n", WSAGetLastError());
     ret = WaitForSingleObject((HANDLE)client, 0);
     ok(ret == WAIT_TIMEOUT, "expected timeout\n");
+    ok(overlapped.Internal == STATUS_PENDING, "got status %#lx\n", (NTSTATUS)overlapped.Internal);
+    ok(overlapped.InternalHigh == 0xdeadbeef, "got size %Iu\n", overlapped.InternalHigh);
 
     ret = send(server, "data", 4, 0);
     ok(ret == 4, "got %d\n", ret);
-- 
GitLab


From bd08ac51063ea551f111fb6b1ac2a0907362c337 Mon Sep 17 00:00:00 2001
From: Zebediah Figura <zfigura@codeweavers.com>
Date: Fri, 16 Sep 2022 12:55:18 -0500
Subject: [PATCH 2/5] ntdll: The async handle passed to
 set_async_direct_result() cannot be NULL.

---
 dlls/ntdll/unix/sync.c         | 9 +++++----
 dlls/ntdll/unix/unix_private.h | 2 +-
 2 files changed, 6 insertions(+), 5 deletions(-)

diff --git a/dlls/ntdll/unix/sync.c b/dlls/ntdll/unix/sync.c
index 1194ee514b5..821a1f08311 100644
--- a/dlls/ntdll/unix/sync.c
+++ b/dlls/ntdll/unix/sync.c
@@ -2533,21 +2533,22 @@ NTSTATUS WINAPI NtWaitForAlertByThreadId( const void *address, const LARGE_INTEG
 /* Notify direct completion of async and close the wait handle if it is no longer needed.
  * This function is a no-op (returns status as-is) if the supplied handle is NULL.
  */
-void set_async_direct_result( HANDLE *optional_handle, NTSTATUS status, ULONG_PTR information, BOOL mark_pending )
+void set_async_direct_result( HANDLE *async_handle, NTSTATUS status, ULONG_PTR information, BOOL mark_pending )
 {
     NTSTATUS ret;
 
-    if (!*optional_handle) return;
+    /* if we got STATUS_ALERTED, we must have a valid async handle */
+    assert( *async_handle );
 
     SERVER_START_REQ( set_async_direct_result )
     {
-        req->handle       = wine_server_obj_handle( *optional_handle );
+        req->handle       = wine_server_obj_handle( *async_handle );
         req->status       = status;
         req->information  = information;
         req->mark_pending = mark_pending;
         ret = wine_server_call( req );
         if (ret == STATUS_SUCCESS)
-            *optional_handle = wine_server_ptr_handle( reply->handle );
+            *async_handle = wine_server_ptr_handle( reply->handle );
     }
     SERVER_END_REQ;
 
diff --git a/dlls/ntdll/unix/unix_private.h b/dlls/ntdll/unix/unix_private.h
index 47f0f9c56a9..73b9ed76de0 100644
--- a/dlls/ntdll/unix/unix_private.h
+++ b/dlls/ntdll/unix/unix_private.h
@@ -278,7 +278,7 @@ extern NTSTATUS get_device_info( int fd, struct _FILE_FS_DEVICE_INFORMATION *inf
 extern void init_files(void) DECLSPEC_HIDDEN;
 extern void init_cpu_info(void) DECLSPEC_HIDDEN;
 extern void add_completion( HANDLE handle, ULONG_PTR value, NTSTATUS status, ULONG info, BOOL async ) DECLSPEC_HIDDEN;
-extern void set_async_direct_result( HANDLE *optional_handle, NTSTATUS status, ULONG_PTR information, BOOL mark_pending );
+extern void set_async_direct_result( HANDLE *async_handle, NTSTATUS status, ULONG_PTR information, BOOL mark_pending ) DECLSPEC_HIDDEN;
 
 extern void dbg_init(void) DECLSPEC_HIDDEN;
 
-- 
GitLab


From 66b1c4bf9ec46c61200f4a18c7d40921ec1494b4 Mon Sep 17 00:00:00 2001
From: Zebediah Figura <zfigura@codeweavers.com>
Date: Thu, 15 Sep 2022 23:29:27 -0500
Subject: [PATCH 3/5] ntdll: Fill the IOSB in sock_recv() only inside the "if
 (alerted)" block.

We can only get a successful status that way. This avoids an uninitialized variable warning with gcc 12.2.
---
 dlls/ntdll/unix/socket.c | 14 ++++++++------
 1 file changed, 8 insertions(+), 6 deletions(-)

diff --git a/dlls/ntdll/unix/socket.c b/dlls/ntdll/unix/socket.c
index f8ed9f6f854..8ff58f7566e 100644
--- a/dlls/ntdll/unix/socket.c
+++ b/dlls/ntdll/unix/socket.c
@@ -23,6 +23,7 @@
 #endif
 
 #include "config.h"
+#include <assert.h>
 #include <errno.h>
 #include <sys/types.h>
 #include <sys/socket.h>
@@ -879,24 +880,25 @@ static NTSTATUS sock_recv( HANDLE handle, HANDLE event, PIO_APC_ROUTINE apc, voi
     }
     SERVER_END_REQ;
 
+    /* the server currently will never succeed immediately */
+    assert(status == STATUS_ALERTED || status == STATUS_PENDING || NT_ERROR(status));
+
     alerted = status == STATUS_ALERTED;
     if (alerted)
     {
         status = try_recv( fd, async, &information );
         if (status == STATUS_DEVICE_NOT_READY && (force_async || !nonblocking))
             status = STATUS_PENDING;
-    }
-
-    if (status != STATUS_PENDING)
-    {
-        if (!NT_ERROR(status) || (wait_handle && !alerted))
+        if (!NT_ERROR(status) && status != STATUS_PENDING)
         {
             io->Status = status;
             io->Information = information;
         }
-        release_fileio( &async->io );
     }
 
+    if (status != STATUS_PENDING)
+        release_fileio( &async->io );
+
     if (alerted) set_async_direct_result( &wait_handle, status, information, FALSE );
     if (wait_handle) status = wait_async( wait_handle, options & FILE_SYNCHRONOUS_IO_ALERT );
     return status;
-- 
GitLab


From 5affeb54e59cbb2199ccee511e1fc629c4c6d7d9 Mon Sep 17 00:00:00 2001
From: Zebediah Figura <zfigura@codeweavers.com>
Date: Thu, 15 Sep 2022 23:32:25 -0500
Subject: [PATCH 4/5] ntdll: Fill the IOSB in sock_send() only inside the "if
 (alerted)" block.

We can only get a successful status that way. This matches sock_recv().
---
 dlls/ntdll/unix/socket.c | 13 +++++++------
 1 file changed, 7 insertions(+), 6 deletions(-)

diff --git a/dlls/ntdll/unix/socket.c b/dlls/ntdll/unix/socket.c
index 8ff58f7566e..cbd9d4f56a6 100644
--- a/dlls/ntdll/unix/socket.c
+++ b/dlls/ntdll/unix/socket.c
@@ -1116,6 +1116,9 @@ static NTSTATUS sock_send( HANDLE handle, HANDLE event, PIO_APC_ROUTINE apc, voi
     }
     SERVER_END_REQ;
 
+    /* the server currently will never succeed immediately */
+    assert(status == STATUS_ALERTED || status == STATUS_PENDING || NT_ERROR(status));
+
     if (!NT_ERROR(status) && is_icmp_over_dgram( fd ))
         sock_save_icmp_id( async );
 
@@ -1132,19 +1135,17 @@ static NTSTATUS sock_send( HANDLE handle, HANDLE event, PIO_APC_ROUTINE apc, voi
          * and returns EWOULDBLOCK, but we have no way of doing that. */
         if (status == STATUS_DEVICE_NOT_READY && async->sent_len)
             status = STATUS_SUCCESS;
-    }
 
-    if (status != STATUS_PENDING)
-    {
         information = async->sent_len;
-        if (!NT_ERROR(status) || (wait_handle && !alerted))
+        if (!NT_ERROR(status) && status != STATUS_PENDING)
         {
             io->Status = status;
             io->Information = information;
         }
-        release_fileio( &async->io );
     }
-    else information = 0;
+
+    if (status != STATUS_PENDING)
+        release_fileio( &async->io );
 
     if (alerted) set_async_direct_result( &wait_handle, status, information, FALSE );
     if (wait_handle) status = wait_async( wait_handle, options & FILE_SYNCHRONOUS_IO_ALERT );
-- 
GitLab


From 60fb4476fa00fd4b5379f7d21eb3a0937b39702b Mon Sep 17 00:00:00 2001
From: Zebediah Figura <zfigura@codeweavers.com>
Date: Thu, 15 Sep 2022 23:33:31 -0500
Subject: [PATCH 5/5] ntdll: Fill the IOSB in sock_transmit() only inside the
 "if (alerted)" block.

We can only get a successful status that way. This matches sock_recv().
---
 dlls/ntdll/unix/socket.c | 13 +++++++------
 1 file changed, 7 insertions(+), 6 deletions(-)

diff --git a/dlls/ntdll/unix/socket.c b/dlls/ntdll/unix/socket.c
index cbd9d4f56a6..c5e8d64f232 100644
--- a/dlls/ntdll/unix/socket.c
+++ b/dlls/ntdll/unix/socket.c
@@ -1388,25 +1388,26 @@ static NTSTATUS sock_transmit( HANDLE handle, HANDLE event, PIO_APC_ROUTINE apc,
     }
     SERVER_END_REQ;
 
+    /* the server currently will never succeed immediately */
+    assert(status == STATUS_ALERTED || status == STATUS_PENDING || NT_ERROR(status));
+
     alerted = status == STATUS_ALERTED;
     if (alerted)
     {
         status = try_transmit( fd, file_fd, async );
         if (status == STATUS_DEVICE_NOT_READY)
             status = STATUS_PENDING;
-    }
 
-    if (status != STATUS_PENDING)
-    {
         information = async->head_cursor + async->file_cursor + async->tail_cursor;
-        if (!NT_ERROR(status) || wait_handle)
+        if (!NT_ERROR(status) && status != STATUS_PENDING)
         {
             io->Status = status;
             io->Information = information;
         }
-        release_fileio( &async->io );
     }
-    else information = 0;
+
+    if (status != STATUS_PENDING)
+        release_fileio( &async->io );
 
     if (alerted)
     {
-- 
GitLab


From 0d23940618fd9ca0de3b97870c16ced932e2918d Mon Sep 17 00:00:00 2001
From: Witold Baryluk <witold.baryluk@gmail.com>
Date: Thu, 15 Sep 2022 17:16:14 +0000
Subject: [PATCH 1/4] ntdll: Speed up
 NtQueryVirtualMemory(MemoryWorkingSetExInformation) by conditional page check

Legends game periodically (every 30 seconds) calls this function
with up to 22k virtual addresses. All but 1 of them is valid. Due to
amount of queries addresses, and cost of seek+read, this causes this
function to take up to about 50ms. So framerate drops from ~150 FPS to
20FPS for about a second.

As far as I can see, returning 0 entries from this function, still makes
Apex Legend work.

But keep code correct, and optimise it by only performing pagemap read
when the address is valid.

This change get_working_set_ex reduces peek wall clock runtime from 57ms
to 0.29ms.

Tested on Linux, but similar change done for the BSD part.

Signed-off-by: Witold Baryluk <witold.baryluk@gmail.com>
---
 dlls/ntdll/unix/virtual.c | 25 +++++++++++++------------
 1 file changed, 13 insertions(+), 12 deletions(-)

diff --git a/dlls/ntdll/unix/virtual.c b/dlls/ntdll/unix/virtual.c
index e0aa410373e..bf9af40ffe6 100644
--- a/dlls/ntdll/unix/virtual.c
+++ b/dlls/ntdll/unix/virtual.c
@@ -4237,16 +4237,17 @@ static NTSTATUS get_working_set_ex( HANDLE process, LPCVOID addr,
              BYTE vprot;
              struct file_view *view;
 
-             for (i = 0; i < vmentry_count && entry == NULL; i++)
-             {
-                 if (vmentries[i].kve_start <= (ULONG_PTR)p->VirtualAddress && (ULONG_PTR)p->VirtualAddress <= vmentries[i].kve_end)
-                     entry = &vmentries[i];
-             }
              memset( &p->VirtualAttributes, 0, sizeof(p->VirtualAttributes) );
              if ((view = find_view( p->VirtualAddress, 0 )) &&
                  get_committed_size( view, p->VirtualAddress, &vprot, VPROT_COMMITTED ) &&
                  (vprot & VPROT_COMMITTED))
              {
+                 for (i = 0; i < vmentry_count && entry == NULL; i++)
+                 {
+                     if (vmentries[i].kve_start <= (ULONG_PTR)p->VirtualAddress && (ULONG_PTR)p->VirtualAddress <= vmentries[i].kve_end)
+                         entry = &vmentries[i];
+                 }
+
                  p->VirtualAttributes.Valid = !(vprot & VPROT_GUARD) && (vprot & 0x0f) && entry && entry->kve_type != KVME_TYPE_SWAP;
                  p->VirtualAttributes.Shared = !is_view_valloc( view );
                  if (p->VirtualAttributes.Shared && p->VirtualAttributes.Valid)
@@ -4281,17 +4282,17 @@ static NTSTATUS get_working_set_ex( HANDLE process, LPCVOID addr,
 
         memset( &p->VirtualAttributes, 0, sizeof(p->VirtualAttributes) );
 
-        /* If we don't have pagemap information, default to invalid. */
-        if (!f || fseek( f, ((UINT_PTR)p->VirtualAddress >> 12) * sizeof(pagemap), SEEK_SET ) == -1 ||
-                fread( &pagemap, sizeof(pagemap), 1, f ) != 1)
-        {
-            pagemap = 0;
-        }
-
         if ((view = find_view( p->VirtualAddress, 0 )) &&
             get_committed_size( view, p->VirtualAddress, &vprot, VPROT_COMMITTED ) &&
             (vprot & VPROT_COMMITTED))
         {
+            if (!f || fseek( f, ((UINT_PTR)p->VirtualAddress >> 12) * sizeof(pagemap), SEEK_SET ) == -1 ||
+                    fread( &pagemap, sizeof(pagemap), 1, f ) != 1)
+            {
+                /* If we don't have pagemap information, default to invalid. */
+                pagemap = 0;
+            }
+
             p->VirtualAttributes.Valid = !(vprot & VPROT_GUARD) && (vprot & 0x0f) && (pagemap >> 63);
             p->VirtualAttributes.Shared = !is_view_valloc( view ) && ((pagemap >> 61) & 1);
             if (p->VirtualAttributes.Shared && p->VirtualAttributes.Valid)
-- 
GitLab


From 198b4d89c78d194ac9b713c3be5350c048ad04b7 Mon Sep 17 00:00:00 2001
From: Witold Baryluk <witold.baryluk@gmail.com>
Date: Thu, 15 Sep 2022 17:19:38 +0000
Subject: [PATCH 2/4] ntdll: Do not use hardcoded page shift in
 NtQueryVirtualMemory(MemoryWorkingSetExInformation)

---
 dlls/ntdll/unix/virtual.c | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

diff --git a/dlls/ntdll/unix/virtual.c b/dlls/ntdll/unix/virtual.c
index bf9af40ffe6..5c7370b6d94 100644
--- a/dlls/ntdll/unix/virtual.c
+++ b/dlls/ntdll/unix/virtual.c
@@ -4286,7 +4286,7 @@ static NTSTATUS get_working_set_ex( HANDLE process, LPCVOID addr,
             get_committed_size( view, p->VirtualAddress, &vprot, VPROT_COMMITTED ) &&
             (vprot & VPROT_COMMITTED))
         {
-            if (!f || fseek( f, ((UINT_PTR)p->VirtualAddress >> 12) * sizeof(pagemap), SEEK_SET ) == -1 ||
+            if (!f || fseek( f, ((UINT_PTR)p->VirtualAddress >> page_shift) * sizeof(pagemap), SEEK_SET ) == -1 ||
                     fread( &pagemap, sizeof(pagemap), 1, f ) != 1)
             {
                 /* If we don't have pagemap information, default to invalid. */
-- 
GitLab


From 47f155ee2ec1da7a7f62ad1ca0c3397f614c0315 Mon Sep 17 00:00:00 2001
From: Witold Baryluk <witold.baryluk@gmail.com>
Date: Thu, 15 Sep 2022 17:21:36 +0000
Subject: [PATCH 3/4] ntdll: Use pread in
 NtQueryVirtualMemory(MemoryWorkingSetExInformation)

1 syscall instead of 2 syscalls. Faster and simpler code.
---
 dlls/ntdll/unix/virtual.c | 14 +++++++-------
 1 file changed, 7 insertions(+), 7 deletions(-)

diff --git a/dlls/ntdll/unix/virtual.c b/dlls/ntdll/unix/virtual.c
index 5c7370b6d94..58afc87375c 100644
--- a/dlls/ntdll/unix/virtual.c
+++ b/dlls/ntdll/unix/virtual.c
@@ -4203,7 +4203,7 @@ static NTSTATUS get_working_set_ex( HANDLE process, LPCVOID addr,
                                     MEMORY_WORKING_SET_EX_INFORMATION *info,
                                     SIZE_T len, SIZE_T *res_len )
 {
-    FILE *f = NULL;
+    int pagemap_fd;
     MEMORY_WORKING_SET_EX_INFORMATION *p;
     sigset_t sigset;
 
@@ -4266,8 +4266,8 @@ static NTSTATUS get_working_set_ex( HANDLE process, LPCVOID addr,
             procstat_close( pstat );
     }
 #else
-    f = fopen( "/proc/self/pagemap", "rb" );
-    if (!f)
+    pagemap_fd = open( "/proc/self/pagemap", O_RDONLY, 0 );
+    if (pagemap_fd == -1)
     {
         static int once;
         if (!once++) WARN( "unable to open /proc/self/pagemap\n" );
@@ -4286,8 +4286,8 @@ static NTSTATUS get_working_set_ex( HANDLE process, LPCVOID addr,
             get_committed_size( view, p->VirtualAddress, &vprot, VPROT_COMMITTED ) &&
             (vprot & VPROT_COMMITTED))
         {
-            if (!f || fseek( f, ((UINT_PTR)p->VirtualAddress >> page_shift) * sizeof(pagemap), SEEK_SET ) == -1 ||
-                    fread( &pagemap, sizeof(pagemap), 1, f ) != 1)
+            if (pagemap_fd == -1 ||
+                pread( pagemap_fd, &pagemap, sizeof(pagemap), ((UINT_PTR)p->VirtualAddress >> page_shift) * sizeof(pagemap) ) != sizeof(pagemap))
             {
                 /* If we don't have pagemap information, default to invalid. */
                 pagemap = 0;
@@ -4304,8 +4304,8 @@ static NTSTATUS get_working_set_ex( HANDLE process, LPCVOID addr,
     server_leave_uninterrupted_section( &virtual_mutex, &sigset );
 #endif
 
-    if (f)
-        fclose( f );
+    if (pagemap_fd != -1)
+        close( pagemap_fd );
     if (res_len)
         *res_len = (UINT_PTR)p - (UINT_PTR)info;
     return STATUS_SUCCESS;
-- 
GitLab


From 846f58cf58009404318a8415e798aa553540f1ad Mon Sep 17 00:00:00 2001
From: Witold Baryluk <witold.baryluk@gmail.com>
Date: Thu, 15 Sep 2022 17:32:35 +0000
Subject: [PATCH 4/4] ntdll: Keep pagemap file open after first use of
 NtQueryVirtualMemory(MemoryWorkingSetExInformation)

---
 dlls/ntdll/unix/virtual.c | 15 +++++++--------
 1 file changed, 7 insertions(+), 8 deletions(-)

diff --git a/dlls/ntdll/unix/virtual.c b/dlls/ntdll/unix/virtual.c
index 58afc87375c..e73d9ed8b0a 100644
--- a/dlls/ntdll/unix/virtual.c
+++ b/dlls/ntdll/unix/virtual.c
@@ -4203,7 +4203,9 @@ static NTSTATUS get_working_set_ex( HANDLE process, LPCVOID addr,
                                     MEMORY_WORKING_SET_EX_INFORMATION *info,
                                     SIZE_T len, SIZE_T *res_len )
 {
-    int pagemap_fd;
+#if !defined(HAVE_LIBPROCSTAT)
+    static int pagemap_fd = -2;
+#endif
     MEMORY_WORKING_SET_EX_INFORMATION *p;
     sigset_t sigset;
 
@@ -4266,14 +4268,13 @@ static NTSTATUS get_working_set_ex( HANDLE process, LPCVOID addr,
             procstat_close( pstat );
     }
 #else
-    pagemap_fd = open( "/proc/self/pagemap", O_RDONLY, 0 );
-    if (pagemap_fd == -1)
+    server_enter_uninterrupted_section( &virtual_mutex, &sigset );
+    if (pagemap_fd == -2)
     {
-        static int once;
-        if (!once++) WARN( "unable to open /proc/self/pagemap\n" );
+        pagemap_fd = open( "/proc/self/pagemap", O_RDONLY, 0 );
+        if (pagemap_fd == -1) WARN( "unable to open /proc/self/pagemap\n" );
     }
 
-    server_enter_uninterrupted_section( &virtual_mutex, &sigset );
     for (p = info; (UINT_PTR)(p + 1) <= (UINT_PTR)info + len; p++)
     {
         BYTE vprot;
@@ -4304,8 +4305,6 @@ static NTSTATUS get_working_set_ex( HANDLE process, LPCVOID addr,
     server_leave_uninterrupted_section( &virtual_mutex, &sigset );
 #endif
 
-    if (pagemap_fd != -1)
-        close( pagemap_fd );
     if (res_len)
         *res_len = (UINT_PTR)p - (UINT_PTR)info;
     return STATUS_SUCCESS;
-- 
GitLab

