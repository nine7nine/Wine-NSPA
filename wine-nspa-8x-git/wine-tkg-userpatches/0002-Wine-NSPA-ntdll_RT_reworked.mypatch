// Fix validPIDThread VS. validIDXThread
//
// A certain thread was being set a SCHED_FIFO, but NOT being set
// with the proper thread priorities. This is now fixed.
//
// Minor cleanups and warnings to fix. Then squash into main RT
// patchwork

--- a/dlls/ntdll/unix/thread.c	2024-07-29 20:50:06.158910762 -0500
+++ b/dlls/ntdll/unix/thread.c	2024-07-29 20:49:49.108803384 -0500
@ -79,58 +79,33 @@ WINE_DECLARE_DEBUG_CHANNEL(threadname);
 #define NSPA_RT_SYNC 1
 #if NSPA_RT_SYNC
 
-// We set most threads' RT priority from within Ntdll.
-static int thread_kapc_priority = -1;
-static int thread_p_priority = -1;
-
 /* Gets the priority value from an environment variable */
 static int get_priority(const char *variable, int min, int max) {
     const char *env = getenv(variable);
-    if (!env) return -1;
+    if (!env) {
+        printf("Environment variable %s not set\n", variable);
+        return -1;
+    }
 
     int val = atoi(env);
+    printf("Environment variable %s set to %d\n", variable, val);
     return (val >= min && val <= max) ? val : -1;
 }
 
-static int priority;
-static int fpriority;
-
 /* Sets the real-time priority for most unix-side threads */
-int ntdll_set_sync_realtime(pthread_t pthread_id, int ntdll_rt_policy, int thread_kapc_priority) {
-    const char *policyStr = getenv("NTDLL_RT_POLICY");
-    int min = sched_get_priority_min(SCHED_FIFO);
-    int max = sched_get_priority_max(SCHED_FIFO);
-
-    // Determine the scheduling policy
-    if (policyStr) {
-        if (strcmp(policyStr, "RR") == 0) ntdll_rt_policy = SCHED_RR;
-        else if (strcmp(policyStr, "FF") == 0) ntdll_rt_policy = SCHED_FIFO;
-        else if (strcmp(policyStr, "TS") == 0) ntdll_rt_policy = SCHED_OTHER;    
-    }
-
-    // Get the real-time priority
-    if ((thread_p_priority = get_priority("NTDLL_RT_PRIO", min, max - 1)) != -1) {
-        struct sched_param param;
-        param.sched_priority = thread_p_priority;
-        return pthread_setschedparam(pthread_id, ntdll_rt_policy | SCHED_RESET_ON_FORK, &param);
-    }
-    return -1; 
+int ntdll_set_sync_realtime(pthread_t pthread_id, int ntdll_rt_policy, int priority) {
+    struct sched_param param;
+    param.sched_priority = priority;
+    printf("Setting real-time priority for pthread_id %lu to %d with policy %d\n", pthread_id, param.sched_priority, ntdll_rt_policy);
+    return pthread_setschedparam(pthread_id, ntdll_rt_policy | SCHED_RESET_ON_FORK, &param);
 }
 
 /* Sets the real-time priority for fsync threads */
 int ntdll_set_fsync_realtime(pthread_t pthread_id, int fifo, int fpriority) {
-    int min = sched_get_priority_min(SCHED_FIFO);
-    int max = sched_get_priority_max(SCHED_FIFO);
-    fifo = SCHED_FIFO;
-
-    // Get the fsync priority
-    if ((thread_kapc_priority = get_priority("WINE_RT_PRIO", min, max - 1)) != -1) {
-        // thread_kapc_priority -= 2;
-        struct sched_param param;
-        param.sched_priority = thread_kapc_priority;
-        return pthread_setschedparam(pthread_id, fifo | SCHED_RESET_ON_FORK, &param);
-    }
-    return -1;
+    struct sched_param param;
+    param.sched_priority = fpriority;
+    printf("Setting fsync priority for pthread_id %lu to %d with policy %d\n", pthread_id, param.sched_priority, fifo);
+    return pthread_setschedparam(pthread_id, fifo | SCHED_RESET_ON_FORK, &param);
 }
 #endif
 
@@ -1364,8 +1339,10 @@ NTSTATUS WINAPI NtCreateThreadEx( HANDLE
     // needed for setting RT for threads
     struct sched_param parm;
     int ntdll_rt_policy = 0;
-    pthread_attr_setschedpolicy (&pthread_attr, ntdll_rt_policy);
-    pthread_attr_setschedparam (&pthread_attr, &parm);
+    // pthread_attr_t pthread_attr;
+    pthread_attr_init(&pthread_attr);
+    pthread_attr_setschedpolicy(&pthread_attr, ntdll_rt_policy);
+    pthread_attr_setschedparam(&pthread_attr, &parm);
 #endif
     DWORD tid = 0;
     int request_pipe[2];
@@ -1490,36 +1467,45 @@ done:
     // Catch all Synchronization Threads;
     pthread_t validPIDThread = thread_data->pthread_id;
     pthread_t validIDXThread = thread_data->fsync_apc_idx;
-                                
+
     if (validIDXThread || validPIDThread == 0) {
         for (int i = 0; i < 100; ++i) {
             validIDXThread = thread_data->fsync_apc_idx;
             validPIDThread = thread_data->pthread_id;
-                               
+
             if (validIDXThread || validPIDThread == 0)
                 usleep(300);
         }
     }
-    
+
     if (validPIDThread != 0 && validIDXThread == 0) {
         // Fail on / filter out unsupported threads;
-        if (handle == GetCurrentThread() && (validPIDThread != thread_data->pthread_id)) { 
+        if (handle == GetCurrentThread() && (validPIDThread != thread_data->pthread_id)) {
             return status;
         }
 
         // Set RT for most unix-side threads
         pthread_attr_setinheritsched(&pthread_attr, PTHREAD_EXPLICIT_SCHED);
-        ntdll_set_sync_realtime(validPIDThread, ntdll_rt_policy | SCHED_RESET_ON_FORK, priority);
+        int min = sched_get_priority_min(SCHED_FIFO);
+        int max = sched_get_priority_max(SCHED_FIFO);
+        int priority;
+        if ((priority = get_priority("NTDLL_RT_PRIO", min, max - 1)) != -1) {
+            ntdll_set_sync_realtime(validPIDThread, ntdll_rt_policy, priority);
+        }
     } else if (validIDXThread != 0 && validPIDThread == 0) {
         // Fail on / filter out unsupported threads;
-        if (handle == GetCurrentThread() && (validIDXThread != thread_data->fsync_apc_idx)) { 
+        if (handle == GetCurrentThread() && (validIDXThread != thread_data->fsync_apc_idx)) {
             return status;
         }
 
         // Set RT for fsync threads
         pthread_attr_setinheritsched(&pthread_attr, PTHREAD_EXPLICIT_SCHED);
-        // Hardcoded to SCHED_FIFO (=> WINE_RT_PRIO priority)
-        ntdll_set_fsync_realtime(validIDXThread, SCHED_FIFO | SCHED_RESET_ON_FORK, fpriority);
+        int min = sched_get_priority_min(SCHED_FIFO);
+        int max = sched_get_priority_max(SCHED_FIFO);
+        int fpriority;
+        if ((fpriority = get_priority("WINE_RT_PRIO", min, max - 1)) != -1) {
+            ntdll_set_fsync_realtime(validIDXThread, SCHED_FIFO, fpriority);
+        }
     }
 #endif
     return STATUS_SUCCESS;

