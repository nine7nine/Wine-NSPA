From d658f3e6d8d379d428f60d3f7156f2a09e76db18 Mon Sep 17 00:00:00 2001
From: Torge Matthies <openglfreak@googlemail.com>
Date: Mon, 8 Aug 2022 20:19:28 +0200
Subject: [PATCH 4/8] HACK: ntdll,server: Spin instead of wait for futex

---
 dlls/ntdll/unix/server.c | 3 ++-
 server/thread.c          | 2 +-
 2 files changed, 3 insertions(+), 2 deletions(-)

diff --git a/dlls/ntdll/unix/server.c b/dlls/ntdll/unix/server.c
index 11111111111..11111111111 100644
--- a/dlls/ntdll/unix/server.c
+++ b/dlls/ntdll/unix/server.c
@@ -247,7 +247,8 @@ static inline unsigned int wait_reply_shm( struct __server_request_info *req )
     {
         if (val == -1)
             abort_thread(0);
-        syscall( __NR_futex, &request_shm->futex, FUTEX_WAIT, val, NULL, NULL, 0 );
+        //syscall( __NR_futex, &request_shm->futex, FUTEX_WAIT, val, NULL, NULL, 0 );
+        YieldProcessor();
     }
 
     memcpy( &req->u.reply, (void*)&request_shm->u.reply, sizeof(req->u.reply) );
diff --git a/server/thread.c b/server/thread.c
index 11111111111..11111111111 100644
--- a/server/thread.c
+++ b/server/thread.c
@@ -511,7 +511,7 @@ static void *request_shm_thread(void *param)
         if (val != 1 && val != -1)
             fatal_protocol_error( thread, "unknown futex state %d\n", val );
         pthread_mutex_unlock( &global_lock );
-        syscall( __NR_futex, &request_shm->futex, FUTEX_WAKE, 1, NULL, NULL, 0 );
+        //syscall( __NR_futex, &request_shm->futex, FUTEX_WAKE, 1, NULL, NULL, 0 );
         if (poll_generation != generation)
             force_exit_poll();
     }
-- 
0.0.0

From 481c3131ad21fc62f45dc4b7c421926805d95285 Mon Sep 17 00:00:00 2001
From: Torge Matthies <openglfreak@googlemail.com>
Date: Mon, 15 Aug 2022 21:03:25 +0200
Subject: [PATCH 5/8] HACK: server: Do not use an atomic instruction to reset
 futex.

---
 server/thread.c | 7 +++++--
 1 file changed, 5 insertions(+), 2 deletions(-)

diff --git a/server/thread.c b/server/thread.c
index 11111111111..11111111111 100644
--- a/server/thread.c
+++ b/server/thread.c
@@ -507,8 +507,11 @@ static void *request_shm_thread(void *param)
         request_shm = thread->request_shm;
         if (!request_shm_fd || !request_shm)
             goto done_locked;
-        val = __sync_val_compare_and_swap( &request_shm->futex, 1, 0 );
-        if (val != 1 && val != -1)
+        __sync_synchronize();
+        val = request_shm->futex;
+        if (val == 1)
+            request_shm->futex = 0;
+        else if (val != -1)
             fatal_protocol_error( thread, "unknown futex state %d\n", val );
         pthread_mutex_unlock( &global_lock );
         //syscall( __NR_futex, &request_shm->futex, FUTEX_WAKE, 1, NULL, NULL, 0 );
-- 
0.0.0

From b7a8b42e4aa284288672c04ade38e5c50f918b52 Mon Sep 17 00:00:00 2001
From: Torge Matthies <openglfreak@googlemail.com>
Date: Mon, 15 Aug 2022 21:04:27 +0200
Subject: [PATCH 6/8] HACK: server: Spin on the request futex for a little bit
 after completing a request.

---
 server/thread.c | 9 ++++++++-
 1 file changed, 8 insertions(+), 1 deletion(-)

diff --git a/server/thread.c b/server/thread.c
index 11111111111..11111111111 100644
--- a/server/thread.c
+++ b/server/thread.c
@@ -24,6 +24,7 @@
 #include <errno.h>
 #include <fcntl.h>
 #include <pthread.h>
+#include <sched.h>
 #include <signal.h>
 #include <stdarg.h>
 #include <stdio.h>
@@ -409,14 +410,20 @@ static void *request_shm_thread(void *pa
     for (;;)
     {
         int val;
-
+        int spincount = 2000;
+ 
+        if ((val = request_shm->futex) != 1)
+            sched_yield();
         while ((val = request_shm->futex) != 1)
         {
            if (val == -1)
                 goto done;
             else if (val != 0)
                 fatal_protocol_error( thread, "unknown futex state %d\n", val );
-            syscall( __NR_futex, &request_shm->futex, FUTEX_WAIT, val, NULL, NULL, 0 );
+            if (spincount == 0)
+                syscall( __NR_futex, &request_shm->futex, FUTEX_WAIT, val, NULL, NULL, 0 );
+            else
+                --spincount;
         }
 
         pthread_mutex_lock( &global_lock );
-- 
0.0.0

From 40145ff85b39d69a0a53a8534e2431d75b51a765 Mon Sep 17 00:00:00 2001
From: Torge Matthies <openglfreak@googlemail.com>
Date: Sat, 24 Jun 2023 16:34:51 +0200
Subject: [PATCH 8/8] HACK: ntdll: Track spin timeout counts and stop spinning
 after a certain number of timeouts.

---
 dlls/ntdll/unix/server.c | 27 +++++++++++++++++++++++++--
 server/thread.c          |  2 +-
 2 files changed, 26 insertions(+), 3 deletions(-)

diff --git a/dlls/ntdll/unix/server.c b/dlls/ntdll/unix/server.c
index 11111111111..11111111111 100644
--- a/dlls/ntdll/unix/server.c
+++ b/dlls/ntdll/unix/server.c
@@ -231,6 +231,9 @@ static unsigned int send_request_shm( const struct __server_request_info *req )
 
 static void read_reply_data( void *buffer, size_t size );
 
+unsigned int request_spin_timeout_count[REQ_NB_REQUESTS];
+unsigned int request_spin_success_count[REQ_NB_REQUESTS];
+
 /***********************************************************************
  *           wait_reply_shm
  *
@@ -241,16 +244,36 @@ static inline unsigned int wait_reply_shm( struct __server_request_info *req )
     volatile struct request_shm *request_shm = ntdll_get_thread_data()->request_shm;
     char *data_ptr = (char*)(request_shm + 1) + req->u.req.request_header.request_size;
     unsigned int copy_limit = (char*)request_shm + REQUEST_SHM_SIZE - data_ptr;
+    enum request req_nr = req->u.req.request_header.req;
+    unsigned int spincount = 8000;
     int val;
 
-    while ((val = request_shm->futex) != 0)
+    if ((request_spin_timeout_count[req_nr] * 64) > request_spin_success_count[req_nr] + 2048)
+        goto no_spin;
+
+    while (spincount > 0 && (val = request_shm->futex) != 0)
     {
         if (val == -1)
             abort_thread(0);
-        //syscall( __NR_futex, &request_shm->futex, FUTEX_WAIT, val, NULL, NULL, 0 );
+        spincount--;
         YieldProcessor();
     }
 
+    if (spincount)
+        InterlockedIncrement( &request_spin_success_count[req_nr] );
+    else
+    {
+        InterlockedIncrement( &request_spin_timeout_count[req_nr] );
+
+    no_spin:;
+        while ((val = request_shm->futex) != 0)
+        {
+            if (val == -1)
+                abort_thread(0);
+            syscall( __NR_futex, &request_shm->futex, FUTEX_WAIT, val, NULL, NULL, 0 );
+        }
+    }
+
     memcpy( &req->u.reply, (void*)&request_shm->u.reply, sizeof(req->u.reply) );
     if (req->u.reply.reply_header.reply_size)
     {

From dfd4f6e375524b320e7bbb892b42bc22ab5fac0a Mon Sep 17 00:00:00 2001
From: Torge Matthies <openglfreak@googlemail.com>
Date: Thu, 3 Aug 2023 22:10:18 +0200
Subject: [PATCH 9/9] HACK: ntdll: Use mwaitx if available.

---
 dlls/ntdll/unix/server.c | 88 ++++++++++++++++++++++++++++++++++++++++
 1 file changed, 88 insertions(+)

diff --git a/dlls/ntdll/unix/server.c b/dlls/ntdll/unix/server.c
index 11111111111..11111111111 100644
--- a/dlls/ntdll/unix/server.c
+++ b/dlls/ntdll/unix/server.c
@@ -229,6 +229,84 @@ static unsigned int send_request_shm( const struct __server_request_info *req )
 }
 
 
+#if defined(__x86_64__) || defined(__i386__)
+
+#if __GNUC__ > 8 || (__GNUC__ == 8 && __GNUC_MINOR__ >= 3)
+#define __asm_inline__ __inline__
+#else
+#define __asm_inline__
+#endif
+
+static inline int mwaitx_supported(void)
+{
+    static int supported;
+    if (!supported)
+    {
+        unsigned int eax, ecx;
+        __asm__ __volatile__ (
+            "cpuid"
+            : "=a" (eax), "=c" (ecx)
+            : "a" (0x80000001U)
+            : "ebx", "edx"
+        );
+        if (ecx & (1U << 29))
+            supported = 3;
+        else
+            supported = 2;
+    }
+    return supported & 1;
+}
+
+#define DEFINE_MWAITX(name, type) \
+    void name(type *addr, type value, unsigned int timeout) \
+    { \
+        if (*addr != value) \
+            return; \
+        __asm__ __asm_inline__ __volatile__ ( \
+            ".byte 0x0f,0x01,0xfa" /* monitorx */ \
+            : "+m" (*(volatile type*)addr) \
+            : "a" (addr), "c" (0x0U), "d" (0x0U) \
+        ); \
+        if (__builtin_expect(*addr != value, 0)) \
+            return; \
+        if (__builtin_constant_p(timeout) && timeout == 0) \
+        { \
+            __asm__ __volatile__ ( \
+                ".byte 0x0f,0x01,0xfb" /* mwaitx */ \
+                : "+m" (*(volatile type*)addr) \
+                : "a" (0xF0U), "c" (0x0U) \
+            ); \
+        } \
+        else \
+        { \
+            __asm__ __volatile__ ( \
+                ".byte 0x0f,0x01,0xfb" /* mwaitx */ \
+                : "+m" (*(volatile type*)addr) \
+                : "a" (0xF0U), "b" (timeout), "c" (0x2U) \
+            ); \
+        } \
+    }
+
+#else
+
+#define mwaitx_supported() 0
+
+#define DEFINE_MWAITX(name, type) \
+    static inline void name(type *addr, type value, unsigned int timeout) {}
+
+#endif
+
+static inline DEFINE_MWAITX(mwaitxc, unsigned char)
+static inline DEFINE_MWAITX(mwaitxs, unsigned short)
+static inline DEFINE_MWAITX(mwaitx, unsigned int)
+static inline DEFINE_MWAITX(mwaitxl, unsigned long long)
+static inline DEFINE_MWAITX(mwaitxll, unsigned long long)
+#define mwaitx8(a,v) mwaitxc(a,v)
+#define mwaitx16(a,v) mwaitxs(a,v)
+#define mwaitx32(a,v) mwaitx(a,v)
+#define mwaitx64(a,v) mwaitxll(a,v)
+
+
 static void read_reply_data( void *buffer, size_t size );
 
 unsigned int request_spin_timeout_count[REQ_NB_REQUESTS];
@@ -251,6 +329,16 @@ static inline unsigned int wait_reply_shm( struct __server_request_info *req )
     if ((request_spin_timeout_count[req_nr] * 64) > request_spin_success_count[req_nr] + 2048)
         goto no_spin;
 
+    if (mwaitx_supported())
+    {
+        if ((val = request_shm->futex) != 0)
+            mwaitx(&request_shm->futex, val, 10000U);
+        if (request_shm->futex != 0)
+            spincount = 400;
+        else
+            spincount = 1;
+    }
+
     while (spincount > 0 && (val = request_shm->futex) != 0)
     {
         if (val == -1)
-- 
0.0.0
