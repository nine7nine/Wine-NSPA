// get rid of the recursive locking && add the needed deps for the 
// (below) deadlock fix in win32u. Critical fixes.

From ec700bb712c0bf3b051333754c8faf0f9b4de1ad Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?R=C3=A9mi=20Bernon?= <rbernon@codeweavers.com>
Date: Mon, 4 Mar 2024 17:10:08 +0100
Subject: [PATCH] win32u: Flush window surface when it is fully unlocked.

---
 dlls/win32u/dibdrv/dc.c | 34 ++++++++++++++++++++++------------
 1 file changed, 22 insertions(+), 12 deletions(-)

diff --git a/dlls/win32u/dibdrv/dc.c b/dlls/win32u/dibdrv/dc.c
index 38039e7d6ae8..e1b2f66cb25d 100644
--- a/dlls/win32u/dibdrv/dc.c
+++ b/dlls/win32u/dibdrv/dc.c
@@ -734,6 +734,7 @@ struct windrv_physdev
     struct gdi_physdev     dev;
     struct dibdrv_physdev *dibdrv;
     struct window_surface *surface;
+    UINT lock_count;
 };
 
 static const struct gdi_dc_funcs window_driver;
@@ -743,25 +744,34 @@ static inline struct windrv_physdev *get_windrv_physdev( PHYSDEV dev )
     return (struct windrv_physdev *)dev;
 }
 
+/* gdi_lock should not be locked */
 static inline void lock_surface( struct windrv_physdev *dev )
 {
-    /* gdi_lock should not be locked */
-    dev->surface->funcs->lock( dev->surface );
-    if (IsRectEmpty( dev->dibdrv->bounds ) || dev->surface->draw_start_ticks == 0)
-        dev->surface->draw_start_ticks = NtGetTickCount();
+    struct window_surface *surface = dev->surface;
+
+    surface->funcs->lock( surface );
+    if (!dev->lock_count++)
+    {
+        if (IsRectEmpty( dev->dibdrv->bounds ) || !surface->draw_start_ticks)
+            surface->draw_start_ticks = NtGetTickCount();
+    }
 }
 
 static inline void unlock_surface( struct windrv_physdev *dev )
 {
-    BOOL should_flush = NtGetTickCount() - dev->surface->draw_start_ticks > FLUSH_PERIOD;
-    dev->surface->funcs->unlock( dev->surface );
-    if (should_flush) dev->surface->funcs->flush( dev->surface );
+    struct window_surface *surface = dev->surface;
+
+    surface->funcs->unlock( surface );
+    if (!--dev->lock_count)
+    {
+        DWORD ticks = NtGetTickCount() - surface->draw_start_ticks;
+        if (ticks > FLUSH_PERIOD) surface->funcs->flush( dev->surface );
+    }
 }
 
-static void unlock_bits_surface( struct gdi_image_bits *bits )
+static void unlock_windrv_bits( struct gdi_image_bits *bits )
 {
-    struct window_surface *surface = bits->param;
-    surface->funcs->unlock( surface );
+    unlock_surface( bits->param );
 }
 
 void dibdrv_set_window_surface( DC *dc, struct window_surface *surface )
@@ -964,8 +974,8 @@ static DWORD windrv_GetImage( PHYSDEV dev, BITMAPINFO *info,
     {
         /* use the freeing callback to unlock the surface */
         assert( !bits->free );
-        bits->free = unlock_bits_surface;
-        bits->param = physdev->surface;
+        bits->free = unlock_windrv_bits;
+        bits->param = physdev;
     }
     else unlock_surface( physdev );
     return ret;

From 0d2fa879d735cd39e72c15014686001c13a089b8 Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?R=C3=A9mi=20Bernon?= <rbernon@codeweavers.com>
Date: Thu, 11 Apr 2024 16:58:49 +0200
Subject: [PATCH] win32u: Remove surface recursive locking requirement.

---
 dlls/win32u/dce.c       | 36 +++++++++++++++++++++++-------------
 dlls/win32u/dibdrv/dc.c |  4 ++--
 2 files changed, 25 insertions(+), 15 deletions(-)

diff --git a/dlls/win32u/dce.c b/dlls/win32u/dce.c
index 5c4f691b460e..d304074c4277 100644
--- a/dlls/win32u/dce.c
+++ b/dlls/win32u/dce.c
@@ -1140,7 +1140,7 @@ static BOOL send_erase( HWND hwnd, UINT flags, HRGN client_rgn,
  * Copy bits from a window surface; helper for move_window_bits and move_window_bits_parent.
  */
 static void copy_bits_from_surface( HWND hwnd, struct window_surface *surface,
-                                    const RECT *dst, const RECT *src )
+                                    const RECT *dst, const RECT *src, BOOL same )
 {
     char buffer[FIELD_OFFSET( BITMAPINFO, bmiColors[256] )];
     BITMAPINFO *info = (BITMAPINFO *)buffer;
@@ -1149,13 +1149,23 @@ static void copy_bits_from_surface( HWND hwnd, struct window_surface *surface,
     HRGN rgn = get_update_region( hwnd, &flags, NULL );
     HDC hdc = NtUserGetDCEx( hwnd, rgn, DCX_CACHE | DCX_WINDOW | DCX_EXCLUDERGN );
 
-    bits = surface->funcs->get_info( surface, info );
-    surface->funcs->lock( surface );
-    NtGdiSetDIBitsToDeviceInternal( hdc, dst->left, dst->top, dst->right - dst->left, dst->bottom - dst->top,
-                                    src->left - surface->rect.left, surface->rect.bottom - src->bottom,
-                                    0, surface->rect.bottom - surface->rect.top,
-                                    bits, info, DIB_RGB_COLORS, 0, 0, FALSE, NULL );
-    surface->funcs->unlock( surface );
+    if (same)
+    {
+        RECT rect = *src;
+        NtGdiStretchBlt( hdc, dst->left, dst->top, dst->right - dst->left, dst->bottom - dst->top,
+                         hdc, rect.left, rect.top, rect.right - rect.left, rect.bottom - rect.top, SRCCOPY, 0 );
+    }
+    else
+    {
+        bits = surface->funcs->get_info( surface, info );
+        surface->funcs->lock( surface );
+        NtGdiSetDIBitsToDeviceInternal( hdc, dst->left, dst->top, dst->right - dst->left, dst->bottom - dst->top,
+                                        src->left - surface->rect.left, surface->rect.bottom - src->bottom,
+                                        0, surface->rect.bottom - surface->rect.top,
+                                        bits, info, DIB_RGB_COLORS, 0, 0, FALSE, NULL );
+        surface->funcs->unlock( surface );
+    }
+
     NtUserReleaseDC( hwnd, hdc );
 }
 
@@ -1177,9 +1187,10 @@ void move_window_bits( HWND hwnd, struct window_surface *old_surface,
         src.top - old_visible_rect->top != dst.top - visible_rect->top)
     {
         TRACE( "copying %s -> %s\n", wine_dbgstr_rect( &src ), wine_dbgstr_rect( &dst ));
-        OffsetRect( &src, -old_visible_rect->left, -old_visible_rect->top );
+        if (new_surface != old_surface) OffsetRect( &src, -old_visible_rect->left, -old_visible_rect->top );
+        else OffsetRect( &src, -window_rect->left, -window_rect->top );
         OffsetRect( &dst, -window_rect->left, -window_rect->top );
-        copy_bits_from_surface( hwnd, old_surface, &dst, &src );
+        copy_bits_from_surface( hwnd, old_surface, &dst, &src, new_surface == old_surface );
     }
 }
 
@@ -1208,13 +1219,12 @@ void move_window_bits_parent( HWND hwnd, HWND parent, const RECT *window_rect, c
 
     TRACE( "copying %s -> %s\n", wine_dbgstr_rect( &src ), wine_dbgstr_rect( &dst ));
     map_window_points( NtUserGetAncestor( hwnd, GA_PARENT ), parent, (POINT *)&src, 2, get_thread_dpi() );
-    OffsetRect( &src, win->client_rect.left - win->visible_rect.left,
-                win->client_rect.top - win->visible_rect.top );
+    OffsetRect( &src, -window_rect->left, -window_rect->top );
     OffsetRect( &dst, -window_rect->left, -window_rect->top );
     window_surface_add_ref( surface );
     release_win_ptr( win );
 
-    copy_bits_from_surface( hwnd, surface, &dst, &src );
+    copy_bits_from_surface( hwnd, surface, &dst, &src, TRUE );
     window_surface_release( surface );
 }
 
diff --git a/dlls/win32u/dibdrv/dc.c b/dlls/win32u/dibdrv/dc.c
index e1b2f66cb25d..48cbe51d7080 100644
--- a/dlls/win32u/dibdrv/dc.c
+++ b/dlls/win32u/dibdrv/dc.c
@@ -749,9 +749,9 @@ static inline void lock_surface( struct windrv_physdev *dev )
 {
     struct window_surface *surface = dev->surface;
 
-    surface->funcs->lock( surface );
     if (!dev->lock_count++)
     {
+        surface->funcs->lock( surface );
         if (IsRectEmpty( dev->dibdrv->bounds ) || !surface->draw_start_ticks)
             surface->draw_start_ticks = NtGetTickCount();
     }
@@ -761,10 +761,10 @@ static inline void unlock_surface( struct windrv_physdev *dev )
 {
     struct window_surface *surface = dev->surface;
 
-    surface->funcs->unlock( surface );
     if (!--dev->lock_count)
     {
         DWORD ticks = NtGetTickCount() - surface->draw_start_ticks;
+        surface->funcs->unlock( surface );
         if (ticks > FLUSH_PERIOD) surface->funcs->flush( dev->surface );
     }
 }

// backported deadlock fix but using the old locking in Wine-8.19, avoiding
// a much larger patchset with other dependencies, pulled in beyond the few
// patches above...

From 1770f48d0fdcd8db3e46fc9913297ed679dff958 Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?R=C3=A9mi=20Bernon?= <rbernon@codeweavers.com>
Date: Mon, 17 Jun 2024 15:38:28 +0200
Subject: [PATCH] win32u: Fix a deadlock when locking the same surface on
 different DCs.

Wine-Bug: https://bugs.winehq.org/show_bug.cgi?id=56771
---
 dlls/win32u/dibdrv/dc.c | 32 ++++++++++++++++++++++++++------
 1 file changed, 26 insertions(+), 6 deletions(-)

diff --git a/dlls/win32u/dibdrv/dc.c b/dlls/win32u/dibdrv/dc.c
index 48320f5b676..ea7512b01ca 100644
--- a/dlls/win32u/dibdrv/dc.c
+++ b/dlls/win32u/dibdrv/dc.c
@@ -765,6 +765,26 @@ static inline void unlock_surface( struct windrv_physdev *dev )
     }
 }
 
+static inline void lock_surfaces(struct windrv_physdev *dst_dev, struct windrv_physdev *src_dev)
+{
+    lock_surface(dst_dev);
+    if (src_dev && !src_dev->lock_count++ && dst_dev->surface != src_dev->surface)
+    {
+        struct window_surface *surface = src_dev->surface;
+        surface->funcs->lock(surface);
+    }
+}
+
+static inline void unlock_surfaces(struct windrv_physdev *dst_dev, struct windrv_physdev *src_dev)
+{
+    if (src_dev && !--src_dev->lock_count && dst_dev->surface != src_dev->surface)
+    {
+        struct window_surface *surface = src_dev->surface;
+        surface->funcs->unlock(surface);
+    }
+    unlock_surface(dst_dev);
+}
+
 static void unlock_windrv_bits( struct gdi_image_bits *bits )
 {
     unlock_surface( bits->param );
@@ -806,13 +820,16 @@ void dibdrv_set_window_surface( DC *dc, struct window_surface *surface )
 static BOOL windrv_AlphaBlend( PHYSDEV dst_dev, struct bitblt_coords *dst,
                                PHYSDEV src_dev, struct bitblt_coords *src, BLENDFUNCTION func )
 {
-    struct windrv_physdev *physdev = get_windrv_physdev( dst_dev );
+    struct windrv_physdev *dst_physdev = get_windrv_physdev( dst_dev ), *src_physdev;
     BOOL ret;
 
-    lock_surface( physdev );
+    if (src_dev->funcs == &window_driver) src_physdev = get_windrv_physdev( src_dev );
+    else src_physdev = NULL;
+
+    lock_surfaces( dst_physdev, src_physdev );
     dst_dev = GET_NEXT_PHYSDEV( dst_dev, pAlphaBlend );
     ret = dst_dev->funcs->pAlphaBlend( dst_dev, dst, src_dev, src, func );
-    unlock_surface( physdev );
+    unlock_surfaces( dst_physdev, src_physdev );
     return ret;
 }
 
@@ -1148,13 +1165,16 @@ static COLORREF windrv_SetPixel( PHYSDEV dev, int x, int y, COLORREF color )
 static BOOL windrv_StretchBlt( PHYSDEV dst_dev, struct bitblt_coords *dst,
                                PHYSDEV src_dev, struct bitblt_coords *src, DWORD rop )
 {
-    struct windrv_physdev *physdev = get_windrv_physdev( dst_dev );
+    struct windrv_physdev *dst_physdev = get_windrv_physdev( dst_dev ), *src_physdev;
     BOOL ret;
 
-    lock_surface( physdev );
+    if (src_dev->funcs == &window_driver) src_physdev = get_windrv_physdev( src_dev );
+    else src_physdev = NULL;
+
+    lock_surfaces( dst_physdev, src_physdev );
     dst_dev = GET_NEXT_PHYSDEV( dst_dev, pStretchBlt );
     ret = dst_dev->funcs->pStretchBlt( dst_dev, dst, src_dev, src, rop );
-    unlock_surface( physdev );
+    unlock_surfaces( dst_physdev, src_physdev );
     return ret;
 }
 
-- 
GitLab
