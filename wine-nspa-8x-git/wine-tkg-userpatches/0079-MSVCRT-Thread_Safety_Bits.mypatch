// MSVCRT: Thread Safety for FILE locking.
//
// Fixes nastiness / xruns when loading or changing presets in some
// VSTs and DAWS, along with other ops that hit this path.

--- a/dlls/msvcrt/file.c	2024-07-17 10:47:59.072402102 -0500
+++ b/dlls/msvcrt/file.c	2024-07-17 10:47:11.042591224 -0500
@@ -785,11 +785,13 @@ void msvcrt_init_io(void)
   memset(MSVCRT__iob, 0, 3 * sizeof(file_crit));
   for (i = 0; i < 3; i++)
   {
-    /* FILE structs for stdin/out/err are static and never deleted */
-    MSVCRT__iob[i]._file = get_ioinfo_nolock(i)->handle == MSVCRT_NO_CONSOLE ?
-        MSVCRT_NO_CONSOLE_FD : i;
-    MSVCRT__iob[i]._tmpfname = NULL;
-    MSVCRT__iob[i]._flag = (i == 0) ? _IOREAD : _IOWRT;
+      /* FILE structs for stdin/out/err are static and never deleted */
+      file_crit* f = (file_crit*)&MSVCRT__iob[i];
+      f->file._file = get_ioinfo_nolock(i)->handle == MSVCRT_NO_CONSOLE ?
+          MSVCRT_NO_CONSOLE_FD : i;
+      f->file._tmpfname = NULL;
+      f->file._flag = (i == 0) ? _IOREAD : _IOWRT;
+      InitializeCriticalSection(&f->crit);
   }
   MSVCRT_stream_idx = 3;
 }
 

// MSVCRT: Optimize Locks Slightly && Improve Thread Safety.

--- a/dlls/msvcrt/lock.c	2024-07-18 15:24:26.848134249 -0500
+++ b/dlls/msvcrt/lock.c	2024-07-18 16:54:53.949898184 -0500
@@ -18,6 +18,7 @@
 
 #include <stdarg.h>
 #include <stdbool.h>
+#include <stdatomic.h>
 
 #include "wine/debug.h"
 #include "windef.h"
@@ -31,29 +32,29 @@ WINE_DEFAULT_DEBUG_CHANNEL(msvcrt);
 
 typedef struct
 {
-  BOOL             bInit;
+  atomic_bool      bInit;
   CRITICAL_SECTION crit;
 } LOCKTABLEENTRY;
 
 static LOCKTABLEENTRY lock_table[ _TOTAL_LOCKS ];
 
-static inline void msvcrt_mlock_set_entry_initialized( int locknum, BOOL initialized )
+static inline void msvcrt_mlock_set_entry_initialized( int locknum, bool initialized )
 {
-  lock_table[ locknum ].bInit = initialized;
+  atomic_store(&lock_table[ locknum ].bInit, initialized);
 }
 
 static inline void msvcrt_initialize_mlock( int locknum )
 {
   InitializeCriticalSection( &(lock_table[ locknum ].crit) );
   lock_table[ locknum ].crit.DebugInfo->Spare[0] = (DWORD_PTR)(__FILE__ ": LOCKTABLEENTRY.crit");
-  msvcrt_mlock_set_entry_initialized( locknum, TRUE );
+  msvcrt_mlock_set_entry_initialized( locknum, TRUE );
 }
 
 static inline void msvcrt_uninitialize_mlock( int locknum )
 {
   lock_table[ locknum ].crit.DebugInfo->Spare[0] = 0;
-  DeleteCriticalSection( &(lock_table[ locknum ].crit) );
-  msvcrt_mlock_set_entry_initialized( locknum, FALSE );
+  DeleteCriticalSection( &(lock_table[ locknum ].crit) );
+  msvcrt_mlock_set_entry_initialized( locknum, FALSE );
 }
 
 /**********************************************************************
@@ -70,9 +71,9 @@ void msvcrt_init_mt_locks(void)
   TRACE( "initializing mtlocks\n" );
 
   /* Initialize the table */
-  for( i=0; i < _TOTAL_LOCKS; i++ )
+  for ( i = 0; i < _TOTAL_LOCKS; i++ )
   {
-    msvcrt_mlock_set_entry_initialized( i, FALSE );
+    msvcrt_mlock_set_entry_initialized( i, FALSE );
   }
 
   /* Initialize our lock table lock */
@@ -86,14 +87,14 @@ void CDECL _lock( int locknum )
 {
   TRACE( "(%d)\n", locknum );
 
-  /* If the lock doesn't exist yet, create it */
-  if( lock_table[ locknum ].bInit == FALSE )
+  /* Double-checked locking to minimize locking overhead */
+  if (!atomic_load( &lock_table[ locknum ].bInit))
   {
     /* Lock while we're changing the lock table */
     _lock( _LOCKTAB_LOCK );
 
     /* Check again if we've got a bit of a race on lock creation */
-    if( lock_table[ locknum ].bInit == FALSE )
+    if (!atomic_load( &lock_table[ locknum ].bInit))
     {
       TRACE( ": creating lock #%d\n", locknum );
       msvcrt_initialize_mlock( locknum );
@@ -123,19 +123,21 @@ static LONG shared_ptr_lock;
 
 void __cdecl _Lock_shared_ptr_spin_lock(void)
 {
-    LONG l = 0;
+  LONG l = 0;
 
-    while(InterlockedCompareExchange(&shared_ptr_lock, 1, 0) != 0) {
-        if(l++ == 1000) {
-            Sleep(0);
-            l = 0;
-        }
+  while(InterlockedCompareExchange(&shared_ptr_lock, 1, 0) != 0)
+  {
+    if (l++ == 1000)
+    {
+      Sleep(0);
+      l = 0;
     }
+  }
 }
 
 void __cdecl _Unlock_shared_ptr_spin_lock(void)
 {
-    shared_ptr_lock = 0;
+    shared_ptr_lock = 0;
 }
 #endif
 
@@ -153,11 +155,11 @@ void msvcrt_free_locks(void)
   TRACE( ": uninitializing all mtlocks\n" );
 
   /* Uninitialize the table */
-  for( i=0; i < _TOTAL_LOCKS; i++ )
+  for ( i = 0; i < _TOTAL_LOCKS; i++ )
   {
-    if( lock_table[ i ].bInit )
+    if ( atomic_load( &lock_table[i].bInit ) )
     {
-      msvcrt_uninitialize_mlock( i );
+      msvcrt_uninitialize_mlock(i);
     }
   }
 }
