// MSVCRT: Thread Safety for FILE locking.
//
// Fixes nastiness / xruns when loading or changing presets in some
// VSTs and DAWS, along with other ops that hit this path.

--- a/dlls/msvcrt/file.c	2024-07-17 10:47:59.072402102 -0500
+++ b/dlls/msvcrt/file.c	2024-07-17 10:47:11.042591224 -0500
@@ -273,6 +273,7 @@ static const ULONGLONG WCCOM = TOUL('c')
  * protects fd critical sections creation code.
  */
 static CRITICAL_SECTION MSVCRT_file_cs;
+CRITICAL_SECTION fd_cs[3];
 static CRITICAL_SECTION_DEBUG MSVCRT_file_cs_debug =
 {
     0, 0, &MSVCRT_file_cs,
@@ -690,108 +691,90 @@ BOOL msvcrt_create_io_inherit_block(WORD
  */
 void msvcrt_init_io(void)
 {
-  STARTUPINFOA  si;
-  int           i;
-  ioinfo        *fdinfo;
-
-  GetStartupInfoA(&si);
-  if (si.cbReserved2 >= sizeof(unsigned int) && si.lpReserved2 != NULL)
-  {
-    BYTE*       wxflag_ptr;
-    HANDLE*     handle_ptr;
-    unsigned int count;
-
-    count = *(unsigned*)si.lpReserved2;
-    wxflag_ptr = si.lpReserved2 + sizeof(unsigned);
-    handle_ptr = (HANDLE*)(wxflag_ptr + count);
-
-    count = min(count, (si.cbReserved2 - sizeof(unsigned)) / (sizeof(HANDLE) + 1));
-    count = min(count, MSVCRT_MAX_FILES);
-    for (i = 0; i < count; i++)
+    // Initialize file descriptor critical sections
+    for (int i = 0; i < 3; i++)
     {
-      if ((*wxflag_ptr & WX_OPEN) && GetFileType(*handle_ptr) != FILE_TYPE_UNKNOWN)
-      {
-        fdinfo = get_ioinfo_alloc_fd(i);
-        if(fdinfo != &MSVCRT___badioinfo)
-            msvcrt_set_fd(fdinfo, *handle_ptr, *wxflag_ptr);
-        release_ioinfo(fdinfo);
-      }
-
-      wxflag_ptr++; handle_ptr++;
+        InitializeCriticalSection(&fd_cs[i]);
     }
-  }
 
-  fdinfo = get_ioinfo_alloc_fd(STDIN_FILENO);
-  if (!(fdinfo->wxflag & WX_OPEN) || fdinfo->handle == INVALID_HANDLE_VALUE) {
-    HANDLE h = GetStdHandle(STD_INPUT_HANDLE);
-    DWORD flags = WX_OPEN | WX_TEXT;
-    DWORD type = GetFileType(h);
+    STARTUPINFOA si;
+    int i;
+    ioinfo *fdinfo;
 
-    if (type == FILE_TYPE_UNKNOWN) {
-        h = MSVCRT_NO_CONSOLE;
-        flags |= WX_TTY;
-    } else if ((type & 0xf) == FILE_TYPE_CHAR) {
-        flags |= WX_TTY;
-    } else if ((type & 0xf) == FILE_TYPE_PIPE) {
-        flags |= WX_PIPE;
+    GetStartupInfoA(&si);
+    if (si.cbReserved2 >= sizeof(unsigned int) && si.lpReserved2 != NULL)
+    {
+        BYTE* wxflag_ptr;
+        HANDLE* handle_ptr;
+        unsigned int count;
+
+        count = *(unsigned*)si.lpReserved2;
+        wxflag_ptr = si.lpReserved2 + sizeof(unsigned);
+        handle_ptr = (HANDLE*)(wxflag_ptr + count);
+
+        count = min(count, (si.cbReserved2 - sizeof(unsigned)) / (sizeof(HANDLE) + 1));
+        count = min(count, MSVCRT_MAX_FILES);
+        for (i = 0; i < count; i++)
+        {
+            if ((*wxflag_ptr & WX_OPEN) && GetFileType(*handle_ptr) != FILE_TYPE_UNKNOWN)
+            {
+                EnterCriticalSection(&fd_cs[i]); // Protect each file descriptor initialization
+                fdinfo = get_ioinfo_alloc_fd(i);
+                if (fdinfo != &MSVCRT___badioinfo)
+                    msvcrt_set_fd(fdinfo, *handle_ptr, *wxflag_ptr);
+                release_ioinfo(fdinfo);
+                LeaveCriticalSection(&fd_cs[i]);
+            }
+            wxflag_ptr++; handle_ptr++;
+        }
     }
 
-    msvcrt_set_fd(fdinfo, h, flags);
-  }
-  release_ioinfo(fdinfo);
+    // Initialize file descriptors with separate critical sections
+    for (i = 0; i < 3; i++)
+    {
+        EnterCriticalSection(&fd_cs[i]);
 
-  fdinfo = get_ioinfo_alloc_fd(STDOUT_FILENO);
-  if (!(fdinfo->wxflag & WX_OPEN) || fdinfo->handle == INVALID_HANDLE_VALUE) {
-    HANDLE h = GetStdHandle(STD_OUTPUT_HANDLE);
-    DWORD flags = WX_OPEN | WX_TEXT;
-    DWORD type = GetFileType(h);
-
-    if (type == FILE_TYPE_UNKNOWN) {
-        h = MSVCRT_NO_CONSOLE;
-        flags |= WX_TTY;
-    } else if ((type & 0xf) == FILE_TYPE_CHAR) {
-        flags |= WX_TTY;
-    } else if ((type & 0xf) == FILE_TYPE_PIPE) {
-        flags |= WX_PIPE;
+        fdinfo = get_ioinfo_alloc_fd(i);
+        if (!(fdinfo->wxflag & WX_OPEN) || fdinfo->handle == INVALID_HANDLE_VALUE) {
+            HANDLE h = GetStdHandle(STD_INPUT_HANDLE + i); // Adjust handle type for each fd
+            DWORD flags = WX_OPEN | WX_TEXT;
+            DWORD type = GetFileType(h);
+
+            if (type == FILE_TYPE_UNKNOWN) {
+                h = MSVCRT_NO_CONSOLE;
+                flags |= WX_TTY;
+            } else if ((type & 0xf) == FILE_TYPE_CHAR) {
+                flags |= WX_TTY;
+            } else if ((type & 0xf) == FILE_TYPE_PIPE) {
+                flags |= WX_PIPE;
+            }
+
+            msvcrt_set_fd(fdinfo, h, flags);
+        }
+        release_ioinfo(fdinfo);
+        LeaveCriticalSection(&fd_cs[i]);
     }
 
-    msvcrt_set_fd(fdinfo, h, flags);
-  }
-  release_ioinfo(fdinfo);
+    TRACE(":handles (%p)(%p)(%p)\n", get_ioinfo_nolock(STDIN_FILENO)->handle,
+          get_ioinfo_nolock(STDOUT_FILENO)->handle,
+          get_ioinfo_nolock(STDERR_FILENO)->handle);
 
-  fdinfo = get_ioinfo_alloc_fd(STDERR_FILENO);
-  if (!(fdinfo->wxflag & WX_OPEN) || fdinfo->handle == INVALID_HANDLE_VALUE) {
-    HANDLE h = GetStdHandle(STD_ERROR_HANDLE);
-    DWORD flags = WX_OPEN | WX_TEXT;
-    DWORD type = GetFileType(h);
-
-    if (type == FILE_TYPE_UNKNOWN) {
-        h = MSVCRT_NO_CONSOLE;
-        flags |= WX_TTY;
-    } else if ((type & 0xf) == FILE_TYPE_CHAR) {
-        flags |= WX_TTY;
-    } else if ((type & 0xf) == FILE_TYPE_PIPE) {
-        flags |= WX_PIPE;
-    }
+    // Initialize FILE structs for stdin, stdout, and stderr
+    memset(MSVCRT__iob, 0, 3 * sizeof(FILE));
+    for (i = 0; i < 3; i++)
+    {
+          EnterCriticalSection(&fd_cs[i]);
 
-    msvcrt_set_fd(fdinfo, h, flags);
-  }
-  release_ioinfo(fdinfo);
+          /* FILE structs for stdin/out/err are static and never deleted */
+          MSVCRT__iob[i]._file = get_ioinfo_nolock(i)->handle == MSVCRT_NO_CONSOLE ?
+              MSVCRT_NO_CONSOLE_FD : i;
+          MSVCRT__iob[i]._tmpfname = NULL;
+          MSVCRT__iob[i]._flag = (i == 0) ? _IOREAD : _IOWRT;
 
-  TRACE(":handles (%p)(%p)(%p)\n", get_ioinfo_nolock(STDIN_FILENO)->handle,
-        get_ioinfo_nolock(STDOUT_FILENO)->handle,
-        get_ioinfo_nolock(STDERR_FILENO)->handle);
-
-  memset(MSVCRT__iob,0,3*sizeof(FILE));
-  for (i = 0; i < 3; i++)
-  {
-    /* FILE structs for stdin/out/err are static and never deleted */
-    MSVCRT__iob[i]._file = get_ioinfo_nolock(i)->handle == MSVCRT_NO_CONSOLE ?
-        MSVCRT_NO_CONSOLE_FD : i;
-    MSVCRT__iob[i]._tmpfname = NULL;
-    MSVCRT__iob[i]._flag = (i == 0) ? _IOREAD : _IOWRT;
-  }
-  MSVCRT_stream_idx = 3;
+          LeaveCriticalSection(&fd_cs[i]);
+    }
+
+    MSVCRT_stream_idx = 3;
 }
 
 /* INTERNAL: Flush stdio file buffer */

// MSVCRT: Optimize Locks Slightly && Improve Thread Safety.

--- a/dlls/msvcrt/lock.c	2024-07-18 15:24:26.848134249 -0500
+++ b/dlls/msvcrt/lock.c	2024-07-18 16:54:53.949898184 -0500
@@ -18,6 +18,7 @@
 
 #include <stdarg.h>
 #include <stdbool.h>
+#include <stdatomic.h>
 
 #include "wine/debug.h"
 #include "windef.h"
@@ -31,29 +32,29 @@ WINE_DEFAULT_DEBUG_CHANNEL(msvcrt);
 
 typedef struct
 {
-  BOOL             bInit;
+  atomic_bool      bInit;
   CRITICAL_SECTION crit;
 } LOCKTABLEENTRY;
 
 static LOCKTABLEENTRY lock_table[ _TOTAL_LOCKS ];
 
-static inline void msvcrt_mlock_set_entry_initialized( int locknum, BOOL initialized )
+static inline void msvcrt_mlock_set_entry_initialized( int locknum, bool initialized )
 {
-  lock_table[ locknum ].bInit = initialized;
+  atomic_store(&lock_table[ locknum ].bInit, initialized);
 }
 
 static inline void msvcrt_initialize_mlock( int locknum )
 {
   InitializeCriticalSection( &(lock_table[ locknum ].crit) );
   lock_table[ locknum ].crit.DebugInfo->Spare[0] = (DWORD_PTR)(__FILE__ ": LOCKTABLEENTRY.crit");
-  msvcrt_mlock_set_entry_initialized( locknum, TRUE );
+  msvcrt_mlock_set_entry_initialized( locknum, TRUE );
 }
 
 static inline void msvcrt_uninitialize_mlock( int locknum )
 {
   lock_table[ locknum ].crit.DebugInfo->Spare[0] = 0;
-  DeleteCriticalSection( &(lock_table[ locknum ].crit) );
-  msvcrt_mlock_set_entry_initialized( locknum, FALSE );
+  DeleteCriticalSection( &(lock_table[ locknum ].crit) );
+  msvcrt_mlock_set_entry_initialized( locknum, FALSE );
 }
 
 /**********************************************************************
@@ -70,9 +71,9 @@ void msvcrt_init_mt_locks(void)
   TRACE( "initializing mtlocks\n" );
 
   /* Initialize the table */
-  for( i=0; i < _TOTAL_LOCKS; i++ )
+  for ( i = 0; i < _TOTAL_LOCKS; i++ )
   {
-    msvcrt_mlock_set_entry_initialized( i, FALSE );
+    msvcrt_mlock_set_entry_initialized( i, FALSE );
   }
 
   /* Initialize our lock table lock */
@@ -86,14 +87,14 @@ void CDECL _lock( int locknum )
 {
   TRACE( "(%d)\n", locknum );
 
-  /* If the lock doesn't exist yet, create it */
-  if( lock_table[ locknum ].bInit == FALSE )
+  /* Double-checked locking to minimize locking overhead */
+  if (!atomic_load( &lock_table[ locknum ].bInit))
   {
     /* Lock while we're changing the lock table */
     _lock( _LOCKTAB_LOCK );
 
     /* Check again if we've got a bit of a race on lock creation */
-    if( lock_table[ locknum ].bInit == FALSE )
+    if (!atomic_load( &lock_table[ locknum ].bInit))
     {
       TRACE( ": creating lock #%d\n", locknum );
       msvcrt_initialize_mlock( locknum );
@@ -123,19 +123,21 @@ static LONG shared_ptr_lock;
 
 void __cdecl _Lock_shared_ptr_spin_lock(void)
 {
-    LONG l = 0;
+  LONG l = 0;
 
-    while(InterlockedCompareExchange(&shared_ptr_lock, 1, 0) != 0) {
-        if(l++ == 1000) {
-            Sleep(0);
-            l = 0;
-        }
+  while(InterlockedCompareExchange(&shared_ptr_lock, 1, 0) != 0)
+  {
+    if (l++ == 1000)
+    {
+      Sleep(0);
+      l = 0;
     }
+  }
 }
 
 void __cdecl _Unlock_shared_ptr_spin_lock(void)
 {
-    shared_ptr_lock = 0;
+    shared_ptr_lock = 0;
 }
 #endif
 
@@ -153,11 +155,11 @@ void msvcrt_free_locks(void)
   TRACE( ": uninitializing all mtlocks\n" );
 
   /* Uninitialize the table */
-  for( i=0; i < _TOTAL_LOCKS; i++ )
+  for ( i = 0; i < _TOTAL_LOCKS; i++ )
   {
-    if( lock_table[ i ].bInit )
+    if ( atomic_load( &lock_table[i].bInit ) )
     {
-      msvcrt_uninitialize_mlock( i );
+      msvcrt_uninitialize_mlock(i);
     }
   }
 }
