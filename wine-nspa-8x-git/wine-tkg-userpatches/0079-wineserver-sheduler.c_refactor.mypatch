--- a/server/scheduler.c	2024-07-13 20:19:10.075660960 -0500
+++ b/server/scheduler.c	2024-07-13 20:18:58.848561541 -0500
@@ -3,7 +3,7 @@
  *
  * Copyright (C) 2015 Joakim Hernberg
  * Copyright (C) 2015 Sebastian Lackner
- * Copyright (C) 2023 Jordan Johnston
+ * Copyright (C) 2024 Jordan Johnston
  *
  * This library is free software; you can redistribute it and/or
  * modify it under the terms of the GNU Lesser General Public
@@ -57,92 +57,79 @@ static int wine_rt_policy = -1;
 /* gets the priority value from an environment variable */
 static int get_priority( const char *variable, int min, int max )
 {
-    const char *env;
-    int val;
-
-    env = getenv( variable );
+    const char *env = getenv( variable );
     if (!env) return -1;
 
-    val = atoi( env );
+    int val = atoi(env);
     if (val >= min && val <= max) return val;
-    fprintf( stderr, "wineserver: %s should be between %d and %d\n", variable, min, max );
+    
+    fprintf(stderr, "wineserver: %s should be between %d and %d\n", variable, min, max);
     return -1;
 }
 
+/* retrieves the scheduler policy from an environment variable */
+static int get_scheduler_policy( const char *variable )
+{
+    const char *policyStr = getenv( variable );
+    if (policyStr)
+    {
+        if (strcmp(policyStr, "RR") == 0) return SCHED_RR;
+        if (strcmp(policyStr, "FF") == 0) return SCHED_FIFO;
+        if (strcmp(policyStr, "TS") == 0) return SCHED_OTHER;
+    }
+    return -1; // Default policy
+}
+
 /* initializes the scheduler */
 void init_scheduler( void )
 {
     pthread_attr_t pthread_attr;
-    struct sched_param param;
-    // Get Wineserver RT policy
-    const char *policyStr = getenv("SRV_RT_POLICY");
-
-    // Set RT Priority min, max.
-    int min, max, priority;
-    min = sched_get_priority_min( SCHED_FIFO );
-    max = sched_get_priority_max( SCHED_FIFO );
-    if (min == -1 || max == -1)
-        return;
- 
-    // Set RT policy.
-    if (policyStr) {
-        if (strcmp(policyStr, "RR")==0)
-            srv_rt_policy = SCHED_RR;
-        if (strcmp(policyStr, "FF")==0)
-            srv_rt_policy = SCHED_FIFO;
-        else if (strcmp(policyStr, "TS")==0)
-            srv_rt_policy = SCHED_OTHER;
-    } 
-    
+    struct sched_param param = {0};
+    int min = sched_get_priority_min(SCHED_FIFO);
+    int max = sched_get_priority_max(SCHED_FIFO);
+    if (min == -1 || max == -1) return;
+
+    srv_rt_policy = get_scheduler_policy("SRV_RT_POLICY");
+    if (srv_rt_policy == -1) srv_rt_policy = SCHED_OTHER; // Default policy if not set
+
     /* change the wineserver nice priority */
     setpriority( PRIO_PROCESS, getpid(), -20 );
 
     /* change the wineserver priority */
-    if ((priority = get_priority( "WINE_RT_PRIO", min, max -1)) != -1)
+    int priority = get_priority( "WINE_RT_PRIO", min, max - 1 );
+    if (priority != -1)
     {
-        // use pthread functionsm, instead of sched_setcheduler()
-        
-        memset( &param, 0, sizeof(param) );
-        param.sched_priority = priority -1;
-    
-        pthread_attr_init( &pthread_attr );
-        pthread_attr_setschedpolicy (&pthread_attr, srv_rt_policy);
-        pthread_attr_setschedparam (&pthread_attr, &param);
-        pthread_attr_setinheritsched (&pthread_attr, PTHREAD_EXPLICIT_SCHED);
-        pthread_attr_setscope( &pthread_attr, PTHREAD_SCOPE_SYSTEM ); 
-        
-        pthread_setschedparam (pthread_self(), srv_rt_policy|SCHED_RESET_ON_FORK, &param);
-    }    
+        param.sched_priority = priority - 1;
+
+        pthread_attr_init(&pthread_attr);
+        pthread_attr_setschedpolicy(&pthread_attr, srv_rt_policy);
+        pthread_attr_setschedparam(&pthread_attr, &param);
+        pthread_attr_setinheritsched(&pthread_attr, PTHREAD_EXPLICIT_SCHED);
+        pthread_attr_setscope(&pthread_attr, PTHREAD_SCOPE_SYSTEM);
+
+        pthread_setschedparam(pthread_self(), srv_rt_policy | SCHED_RESET_ON_FORK, &param);
+    }
 
     /* determine base priority which will be used for all threads */
-    if ((priority = get_priority( "WINE_RT_PRIO", min, max )) != -1)
+    priority = get_priority( "WINE_RT_PRIO", min, max );
+    if (priority != -1)
     {
-        thread_base_priority = priority -1;
-
-        if (debug_level) fprintf( stderr, "wineserver: initialized max user thread priority to %d\n",
-                                  thread_base_priority );
+        thread_base_priority = priority - 1;
+        if (debug_level)
+            fprintf(stderr, "wineserver: initialized max user thread priority to %d\n", thread_base_priority);
     }
 }
 
 /* sets the scheduler priority of a windows thread */
 void set_scheduler_priority( struct thread *thread )
 {
-    const char *policyStr = getenv("WINE_RT_POLICY");
-    struct sched_param param;
+    if (thread_base_priority == -1 || thread->unix_tid == -1 || thread->fsync_idx == -1) return;
+
+    wine_rt_policy = get_scheduler_policy( "WINE_RT_POLICY" );
+    if (wine_rt_policy == -1) wine_rt_policy = SCHED_OTHER; // Default policy if not set
 
-    if (policyStr) {
-        if (strcmp(policyStr, "RR")==0)
-            wine_rt_policy = SCHED_RR;
-        else if (strcmp(policyStr, "FF")==0)
-            wine_rt_policy = SCHED_FIFO;
-    } 
-
-    if (thread_base_priority == -1) return;
-    if (thread->unix_tid == -1) return;
-    if (thread->fsync_idx == -1) return;
- 
-    memset( &param, 0, sizeof(param) );
-    // Hardcoded to SCHED_FIFO just for TIME_CRITICAL threads.
+    struct sched_param param = {0};
+    
     if (thread->priority >= THREAD_PRIORITY_TIME_CRITICAL && PROCESS_PRIOCLASS_REALTIME)
     {
         wine_rt_policy = SCHED_FIFO;
@@ -150,7 +137,6 @@ void set_scheduler_priority( struct thre
     }
     else if (thread->priority >= THREAD_PRIORITY_HIGHEST && PROCESS_PRIOCLASS_REALTIME)
     {
-        //wine_rt_policy = SCHED_FIFO;
         param.sched_priority = thread_base_priority -4;
     }
     else if (thread->priority >= THREAD_PRIORITY_ABOVE_NORMAL && PROCESS_PRIOCLASS_REALTIME)
@@ -164,42 +150,34 @@ void set_scheduler_priority( struct thre
     else if (thread->priority >= THREAD_PRIORITY_BELOW_NORMAL && PROCESS_PRIOCLASS_REALTIME)
     {
         param.sched_priority = thread_base_priority -10;
-    } 
+    }
     else if (thread->priority >= THREAD_PRIORITY_LOWEST && PROCESS_PRIOCLASS_REALTIME)
     {
         param.sched_priority = thread_base_priority -12;
-    }   
-    else if (thread->priority >= THREAD_PRIORITY_IDLE && PROCESS_PRIOCLASS_REALTIME)
-    {
-        wine_rt_policy = SCHED_OTHER;
     }
-    else
+    else if (thread->priority >= THREAD_PRIORITY_IDLE && PROCESS_PRIOCLASS_REALTIME)
     {
         wine_rt_policy = SCHED_OTHER;
     }
 
-    if (sched_setscheduler(thread->unix_tid, wine_rt_policy|SCHED_RESET_ON_FORK, &param) == -1 &&
-        sched_setscheduler(thread->unix_tid, wine_rt_policy|SCHED_RESET_ON_FORK, &param) == -1)
+    if (sched_setscheduler(thread->unix_tid, wine_rt_policy | SCHED_RESET_ON_FORK, &param) == -1)
     {
         static int once;
         if (debug_level || !once++)
-            fprintf( stderr, "%04x: failed to change priority to %d/%d\n",
-                     thread->id, wine_rt_policy, param.sched_priority );
+            fprintf(stderr, "%04x: failed to change priority to %d/%d\n", thread->id, wine_rt_policy, param.sched_priority);
         return;
     }
-    // we care about the fsync_idx threads, if they come up.
-    if (sched_setscheduler(thread->fsync_idx, wine_rt_policy|SCHED_RESET_ON_FORK, &param) == -1 &&
-        sched_setscheduler(thread->fsync_idx, wine_rt_policy|SCHED_RESET_ON_FORK, &param) == -1)
+
+    if (sched_setscheduler(thread->fsync_idx, wine_rt_policy | SCHED_RESET_ON_FORK, &param) == -1)
     {
         static int once;
         if (debug_level || !once++)
-            fprintf( stderr, "%04x: failed to change priority to %d/%d\n",
-                     thread->id, wine_rt_policy, param.sched_priority );
+            fprintf(stderr, "%04x: failed to change priority to %d/%d\n", thread->id, wine_rt_policy, param.sched_priority);
         return;
     }
 
-    if (debug_level) fprintf( stderr, "%04x: changed priority to %d/%d\n",
-                              thread->id, wine_rt_policy, param.sched_priority );
+    if (debug_level)
+        fprintf(stderr, "%04x: changed priority to %d/%d\n", thread->id, wine_rt_policy, param.sched_priority);
 }
 
 #else
