From 310668d72ed26864842ef1c5b00315e11816fa1a Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?R=C3=A9mi=20Bernon?= <rbernon@codeweavers.com>
Date: Thu, 24 Dec 2020 16:11:56 +0100
Subject: [PATCH 4/5] ntdll: Track active keyed events on the client side.

---
 dlls/ntdll/unix/sync.c | 70 +++++++++++++++++++++++++++++++++++++++---
 1 file changed, 66 insertions(+), 4 deletions(-)

diff --git a/dlls/ntdll/unix/sync.c b/dlls/ntdll/unix/sync.c
index 11111111111..11111111111 100644
--- a/dlls/ntdll/unix/sync.c
+++ b/dlls/ntdll/unix/sync.c
@@ -79,6 +79,58 @@ WINE_DEFAULT_DEBUG_CHANNEL(sync);
 
 HANDLE keyed_event = 0;
 
+static pthread_mutex_t keyed_mutex = PTHREAD_MUTEX_INITIALIZER;
+
+struct keyed_entry
+{
+    client_ptr_t key;
+    LONG         ref;
+    HANDLE       handle;
+    BOOLEAN      alertable;
+};
+
+static struct keyed_entry keyed_entries[256];
+static size_t nb_keyed_entries;
+
+static inline struct keyed_entry *keyed_entry_acquire( HANDLE handle, client_ptr_t key, BOOLEAN alertable )
+{
+    struct keyed_entry *entry;
+    DWORD i;
+
+    mutex_lock( &keyed_mutex );
+    for (i = 0; i < nb_keyed_entries; ++i)
+    {
+        if (!keyed_entries[i].ref) continue;
+        if (keyed_entries[i].key == key) break;
+    }
+    if (i == nb_keyed_entries) for (i = 0; i <= nb_keyed_entries; ++i)
+    {
+        if (!keyed_entries[i].ref) break;
+    }
+    assert(i < ARRAY_SIZE(keyed_entries));
+    if (i == nb_keyed_entries) nb_keyed_entries++;
+
+    entry = keyed_entries + i;
+    if (!entry->ref++)
+    {
+        entry->key = key;
+        entry->handle = handle;
+        entry->alertable = alertable;
+    }
+
+    if (entry->handle != handle) WARN("inconsistent keyed event handle %p, previously %p\n", handle, entry->handle);
+    if (entry->alertable != alertable) WARN("inconsistent keyed event alertable %d, previously %d\n", alertable, entry->alertable);
+    mutex_unlock( &keyed_mutex );
+    return entry;
+}
+
+static inline void keyed_entry_release( struct keyed_entry *entry )
+{
+    mutex_lock( &keyed_mutex );
+    if (!--entry->ref) while (nb_keyed_entries && !keyed_entries[nb_keyed_entries - 1].ref) nb_keyed_entries--;
+    mutex_unlock( &keyed_mutex );
+}
+
 static const char *debugstr_timeout( const LARGE_INTEGER *timeout )
 {
     if (!timeout) return "(infinite)";
@@ -3073,16 +3125,21 @@ NTSTATUS WINAPI NtOpenKeyedEvent( HANDLE *handle, ACCESS_MASK access, const OBJE
 NTSTATUS WINAPI NtWaitForKeyedEvent( HANDLE handle, const void *key,
                                      BOOLEAN alertable, const LARGE_INTEGER *timeout )
 {
+    struct keyed_entry *entry;
     select_op_t select_op;
     UINT flags = SELECT_INTERRUPTIBLE;
+    NTSTATUS status;
 
-    if (!handle) handle = keyed_event;
     if ((ULONG_PTR)key & 1) return STATUS_INVALID_PARAMETER_1;
+    entry = keyed_entry_acquire( handle, wine_server_client_ptr( key ), alertable );
+    if (!handle) handle = keyed_event;
     if (alertable) flags |= SELECT_ALERTABLE;
     select_op.keyed_event.op     = SELECT_KEYED_EVENT_WAIT;
     select_op.keyed_event.handle = wine_server_obj_handle( handle );
     select_op.keyed_event.key    = wine_server_client_ptr( key );
-    return server_wait( &select_op, sizeof(select_op.keyed_event), flags, timeout );
+    status = server_wait( &select_op, sizeof(select_op.keyed_event), flags, timeout );
+    keyed_entry_release( entry );
+    return status;
 }
 
 
@@ -3092,16 +3149,21 @@ NTSTATUS WINAPI NtWaitForKeyedEvent( HANDLE handle, const void *key,
 NTSTATUS WINAPI NtReleaseKeyedEvent( HANDLE handle, const void *key,
                                      BOOLEAN alertable, const LARGE_INTEGER *timeout )
 {
+    struct keyed_entry *entry;
     select_op_t select_op;
     UINT flags = SELECT_INTERRUPTIBLE;
+    NTSTATUS status;
 
-    if (!handle) handle = keyed_event;
     if ((ULONG_PTR)key & 1) return STATUS_INVALID_PARAMETER_1;
+    entry = keyed_entry_acquire( handle, wine_server_client_ptr( key ), alertable );
+    if (!handle) handle = keyed_event;
     if (alertable) flags |= SELECT_ALERTABLE;
     select_op.keyed_event.op     = SELECT_KEYED_EVENT_RELEASE;
     select_op.keyed_event.handle = wine_server_obj_handle( handle );
     select_op.keyed_event.key    = wine_server_client_ptr( key );
-    return server_wait( &select_op, sizeof(select_op.keyed_event), flags, timeout );
+    status = server_wait( &select_op, sizeof(select_op.keyed_event), flags, timeout );
+    keyed_entry_release( entry );
+    return status;
 }
 
 
-- 
0.0.0

From 138338e0e03bb5781ef54e0fdf481dad1654581f Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?R=C3=A9mi=20Bernon?= <rbernon@codeweavers.com>
Date: Thu, 24 Dec 2020 16:41:43 +0100
Subject: [PATCH 5/5] ntdll: Implement client-side keyed events on top of
 futexes.

Because RtlWaitOnAddress needs a special treatment, and already has
a fast path, we only enable this keyed event fast path when keyed
event handle is 0.
---
 dlls/ntdll/unix/sync.c | 164 ++++++++++++++++++++++++++++++++++++++---
 1 file changed, 152 insertions(+), 12 deletions(-)

diff --git a/dlls/ntdll/unix/sync.c b/dlls/ntdll/unix/sync.c
index 11111111111..11111111111 100644
--- a/dlls/ntdll/unix/sync.c
+++ b/dlls/ntdll/unix/sync.c
@@ -168,6 +168,8 @@ static inline ULONGLONG monotonic_counter(void)
 
 #define FUTEX_WAIT 0
 #define FUTEX_WAKE 1
+#define FUTEX_WAIT_BITSET 9
+#define FUTEX_WAKE_BITSET 10
 
 static int futex_private = 128;
 
@@ -192,6 +194,21 @@ static inline int futex_wake( const LONG *addr, int val )
     return syscall( __NR_futex, addr, FUTEX_WAKE | futex_private, val, NULL, 0, 0 );
 }
 
+static inline int futex_wait_abs( const int *addr, int val, struct timespec *timeout )
+{
+    return syscall( __NR_futex, addr, FUTEX_WAIT_BITSET | futex_private, val, timeout, 0, 0xffffffff );
+}
+
+static inline int futex_wait_bitset( const int *addr, int val, struct timespec *timeout, int mask )
+{
+    return syscall( __NR_futex, addr, FUTEX_WAIT_BITSET | futex_private, val, timeout, 0, mask );
+}
+
+static inline int futex_wake_bitset( const int *addr, int val, int mask )
+{
+    return syscall( __NR_futex, addr, FUTEX_WAKE_BITSET | futex_private, val, NULL, 0, mask );
+}
+
 static inline int use_futexes(void)
 {
     static LONG supported = -1;
@@ -3119,6 +3136,9 @@ NTSTATUS WINAPI NtOpenKeyedEvent( HANDLE *handle, ACCESS_MASK access, const OBJE
     return ret;
 }
 
+static inline NTSTATUS fast_wait_for_keyed_event( struct keyed_entry *entry, const LARGE_INTEGER *timeout );
+static inline NTSTATUS fast_release_keyed_event( struct keyed_entry *entry, const LARGE_INTEGER *timeout );
+
 /******************************************************************************
  *              NtWaitForKeyedEvent (NTDLL.@)
  */
@@ -3132,12 +3152,15 @@ NTSTATUS WINAPI NtWaitForKeyedEvent( HANDLE handle, const void *key,
 
     if ((ULONG_PTR)key & 1) return STATUS_INVALID_PARAMETER_1;
     entry = keyed_entry_acquire( handle, wine_server_client_ptr( key ), alertable );
-    if (!handle) handle = keyed_event;
-    if (alertable) flags |= SELECT_ALERTABLE;
-    select_op.keyed_event.op     = SELECT_KEYED_EVENT_WAIT;
-    select_op.keyed_event.handle = wine_server_obj_handle( handle );
-    select_op.keyed_event.key    = wine_server_client_ptr( key );
-    status = server_wait( &select_op, sizeof(select_op.keyed_event), flags, timeout );
+    if ((status = fast_wait_for_keyed_event( entry, timeout )) == STATUS_NOT_IMPLEMENTED)
+    {
+        if (!handle) handle = keyed_event;
+        if (alertable) flags |= SELECT_ALERTABLE;
+        select_op.keyed_event.op     = SELECT_KEYED_EVENT_WAIT;
+        select_op.keyed_event.handle = wine_server_obj_handle( handle );
+        select_op.keyed_event.key    = wine_server_client_ptr( key );
+        status = server_wait( &select_op, sizeof(select_op.keyed_event), flags, timeout );
+    }
     keyed_entry_release( entry );
     return status;
 }
@@ -3156,12 +3179,15 @@ NTSTATUS WINAPI NtReleaseKeyedEvent( HANDLE handle, const void *key,
 
     if ((ULONG_PTR)key & 1) return STATUS_INVALID_PARAMETER_1;
     entry = keyed_entry_acquire( handle, wine_server_client_ptr( key ), alertable );
-    if (!handle) handle = keyed_event;
-    if (alertable) flags |= SELECT_ALERTABLE;
-    select_op.keyed_event.op     = SELECT_KEYED_EVENT_RELEASE;
-    select_op.keyed_event.handle = wine_server_obj_handle( handle );
-    select_op.keyed_event.key    = wine_server_client_ptr( key );
-    status = server_wait( &select_op, sizeof(select_op.keyed_event), flags, timeout );
+    if ((status = fast_release_keyed_event( entry, timeout )) == STATUS_NOT_IMPLEMENTED)
+    {
+        if (!handle) handle = keyed_event;
+        if (alertable) flags |= SELECT_ALERTABLE;
+        select_op.keyed_event.op     = SELECT_KEYED_EVENT_RELEASE;
+        select_op.keyed_event.handle = wine_server_obj_handle( handle );
+        select_op.keyed_event.key    = wine_server_client_ptr( key );
+        status = server_wait( &select_op, sizeof(select_op.keyed_event), flags, timeout );
+    }
     keyed_entry_release( entry );
     return status;
 }
@@ -4013,3 +4039,117 @@ NTSTATUS WINAPI NtRollbackTransaction( HANDLE transaction, BOOLEAN wait )
 
     return STATUS_ACCESS_VIOLATION;
 }
+
+#ifdef __linux__
+
+struct fast_keyed_entry
+{
+    int wait_cs; /* 0: unlocked, 1: locked, 2: contested */
+    int wake_cs; /* 0: unlocked, 1: locked, 2: contested */
+    int signal; /* 0: not signaled, 1: signaled, 2: acked */
+};
+
+static struct fast_keyed_entry fast_keyed_table[256];
+
+static int futex_cs_enter( int *futex, struct timespec *timespec )
+{
+    NTSTATUS status = STATUS_SUCCESS;
+    int ret;
+    if (InterlockedCompareExchange( futex, 1, 0 ) == 0) return STATUS_SUCCESS;
+    do
+    {
+        if (*futex != 2 && InterlockedCompareExchange( futex, 2, 1 ) == 0) continue;
+        if (!(ret = futex_wait_abs( futex, 2, timespec ))) continue;
+        else if (ret == -1 && errno == ETIMEDOUT) status = STATUS_TIMEOUT;
+        else if (ret == -1 && errno != EAGAIN) ERR("futex_wait_abs unexpectedly failed, errno: %d\n", errno);
+    }
+    while (!status && InterlockedCompareExchange( futex, 2, 0 ) != 0);
+    return status;
+}
+
+static void futex_cs_leave( int *futex )
+{
+    if (InterlockedExchange( futex, 0 ) == 2) futex_wake( futex, 1 );
+}
+
+static struct timespec *nt_timeout_to_timespec( struct timespec *timespec, const LARGE_INTEGER *timeout )
+{
+    LARGE_INTEGER diff;
+    struct timespec now;
+    if (!timeout) return NULL;
+
+    if (timeout->QuadPart > 0)
+    {
+        NtQuerySystemTime( &diff );
+        diff.QuadPart -= timeout->QuadPart;
+    }
+    else diff = *timeout;
+
+    clock_gettime(CLOCK_MONOTONIC, &now);
+    timespec->tv_sec  = now.tv_sec + (now.tv_nsec / 100 - diff.QuadPart) / TICKSPERSEC;
+    timespec->tv_nsec = (now.tv_nsec / 100 - diff.QuadPart) % TICKSPERSEC * 100;
+    return timespec;
+}
+
+static inline NTSTATUS fast_wait_for_keyed_event( struct keyed_entry *entry, const LARGE_INTEGER *timeout )
+{
+    struct fast_keyed_entry *fast = &fast_keyed_table[entry - keyed_entries];
+    struct timespec time, *timespec = nt_timeout_to_timespec( &time, timeout );
+    NTSTATUS status = STATUS_SUCCESS;
+    int ret;
+
+    if (!use_futexes() || entry->handle || entry->alertable) return STATUS_NOT_IMPLEMENTED;
+
+    if ((status = futex_cs_enter( &fast->wait_cs, timespec ))) return status;
+    /* wait for signal, and ack it */
+    while (!status && InterlockedCompareExchange( &fast->signal, 2, 1 ) != 1)
+    {
+        if (!(ret = futex_wait_abs( &fast->signal, 0, timespec ))) continue;
+        else if (ret == -1 && errno == ETIMEDOUT) status = STATUS_TIMEOUT;
+        else if (ret == -1 && errno != EAGAIN) ERR("futex_wait_abs unexpectedly failed, errno: %d\n", errno);
+    }
+    /* if we acked, wake the signaler */
+    if (!status) futex_wake( &fast->signal, 1 );
+    futex_cs_leave( &fast->wait_cs );
+    return status;
+}
+
+static inline NTSTATUS fast_release_keyed_event( struct keyed_entry *entry, const LARGE_INTEGER *timeout )
+{
+    struct fast_keyed_entry *fast = &fast_keyed_table[entry - keyed_entries];
+    struct timespec time, *timespec = nt_timeout_to_timespec( &time, timeout );
+    NTSTATUS status = STATUS_SUCCESS;
+    int ret;
+
+    if (!use_futexes() || entry->handle || entry->alertable) return STATUS_NOT_IMPLEMENTED;
+
+    if ((status = futex_cs_enter( &fast->wake_cs, timespec ))) return status;
+    /* signal and wake waiter */
+    InterlockedExchange( &fast->signal, 1 );
+    futex_wake( &fast->signal, 1 );
+    /* wait for ack, and reset */
+    while (!status && InterlockedCompareExchange( &fast->signal, 0, 2 ) == 1)
+    {
+        if (!(ret = futex_wait_abs( &fast->signal, 1, timespec ))) continue;
+        else if (ret == -1 && errno == ETIMEDOUT) status = STATUS_TIMEOUT;
+        else if (ret == -1 && errno != EAGAIN) ERR("futex_wait_abs unexpectedly failed, errno: %d\n", errno);
+    }
+    /* if we timedout, reset and check ack */
+    if (status == STATUS_TIMEOUT && InterlockedExchange( &fast->signal, 0 ) == 2) status = STATUS_SUCCESS;
+    futex_cs_leave( &fast->wake_cs );
+    return status;
+}
+
+#else
+
+static inline NTSTATUS fast_wait_for_keyed_event( struct keyed_entry *entry, const LARGE_INTEGER *timeout )
+{
+    return STATUS_NOT_IMPLEMENTED;
+}
+
+static inline NTSTATUS fast_release_keyed_event( struct keyed_entry *entry, const LARGE_INTEGER *timeout )
+{
+    return STATUS_NOT_IMPLEMENTED;
+}
+
+#endif
-- 
0.0.0



