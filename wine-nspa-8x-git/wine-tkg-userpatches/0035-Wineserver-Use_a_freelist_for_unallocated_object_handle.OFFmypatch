From a63d414ec6c8a4c873243f541b12914955003af3 Mon Sep 17 00:00:00 2001
From: Zebediah Figura <zfigura@codeweavers.com>
Date: Wed, 26 Jan 2022 15:24:18 -0600
Subject: [PATCH] server: Use a free list for unallocated object handles.

The Legend of Heroes: Trails of Cold Steel III suffers from an application bug,
where it tries to wait on a handle after closing it. Because of the usage
patterns of the game and the way Wine allocates handles, the handle is usually
reused by a separate object, which is effectively never signaled, resulting in a
hang.

This patch changes our handle allocation strategy to resemble Windows, and in
the process makes the race much less likely, although still theoretically
possible.

Wine-Bug: https://bugs.winehq.org/show_bug.cgi?id=52461
Signed-off-by: Zebediah Figura <zfigura@codeweavers.com>
---
 server/handle.c | 133 +++++++++++++++++++++++++-----------------------
 1 file changed, 69 insertions(+), 64 deletions(-)

diff --git a/server/handle.c b/server/handle.c
index 11111111111..11111111111 100644
--- a/server/handle.c
+++ b/server/handle.c
@@ -41,8 +41,13 @@
 
 struct handle_entry
 {
-    struct object *ptr;       /* object */
-    unsigned int   access;    /* access rights */
+    union
+    {
+        struct object       *ptr;       /* object */
+        struct handle_entry *next;      /* next free entry */
+    } u;
+    unsigned int             access;    /* access rights */
+    int                      used;      /* is the entry currently in use? */
 };
 
 struct handle_table
@@ -51,8 +56,8 @@ struct handle_table
     struct process      *process;     /* process owning this table */
     int                  count;       /* number of allocated entries */
     int                  last;        /* last used entry */
-    int                  free;        /* first entry that may be free */
     struct handle_entry *entries;     /* handle entries */
+    struct handle_entry *freelist;    /* head of free list */
 };
 
 static struct handle_table *global_table;
@@ -160,11 +165,11 @@ static void handle_table_dump( struct object *obj, int verbose )
     entry = table->entries;
     for (i = 0; i <= table->last; i++, entry++)
     {
-        if (!entry->ptr) continue;
+        if (!entry->used) continue;
         fprintf( stderr, "    %04x: %p %08x ",
-                 index_to_handle(i), entry->ptr, entry->access );
-        dump_object_name( entry->ptr );
-        entry->ptr->ops->dump( entry->ptr, 0 );
+                 index_to_handle(i), entry->u.ptr, entry->access );
+        dump_object_name( entry->u.ptr );
+        entry->u.ptr->ops->dump( entry->u.ptr, 0 );
     }
 }
 
@@ -179,12 +184,14 @@ static void handle_table_destroy( struct object *obj )
 
     for (i = 0, entry = table->entries; i <= table->last; i++, entry++)
     {
-        struct object *obj = entry->ptr;
-        entry->ptr = NULL;
-        if (obj)
+        if (entry->used)
         {
+            struct object *obj = entry->u.ptr;
             if (table->process)
                 obj->ops->close_handle( obj, table->process, index_to_handle(i) );
+            entry->used = 0;
+            entry->u.next = table->freelist;
+            table->freelist = entry;
             release_object_from_handle( obj );
         }
     }
@@ -211,7 +218,7 @@ struct handle_table *alloc_handle_table( struct process *process, int count )
     table->process = process;
     table->count   = count;
     table->last    = -1;
-    table->free    = 0;
+    table->freelist = NULL;
     if ((table->entries = mem_alloc( count * sizeof(*table->entries) ))) return table;
     release_object( table );
     return NULL;
@@ -237,21 +244,23 @@ static int grow_handle_table( struct handle_table *table )
 /* allocate the first free entry in the handle table */
 static obj_handle_t alloc_entry( struct handle_table *table, void *obj, unsigned int access )
 {
-    struct handle_entry *entry = table->entries + table->free;
-    int i;
+    struct handle_entry *entry;
 
-    for (i = table->free; i <= table->last; i++, entry++) if (!entry->ptr) goto found;
-    if (i >= table->count)
+    if (table->freelist)
+    {
+        entry = table->freelist;
+        table->freelist = entry->u.next;
+    }
+    else
     {
-        if (!grow_handle_table( table )) return 0;
-        entry = table->entries + i;  /* the entries may have moved */
+        if (table->last + 1 >= table->count && !grow_handle_table( table )) return 0;
+        entry = &table->entries[++table->last];
     }
-    table->last = i;
- found:
-    table->free = i + 1;
-    entry->ptr    = grab_object_for_handle( obj );
+
+    entry->used   = 1;
+    entry->u.ptr  = grab_object_for_handle( obj );
     entry->access = access;
-    return index_to_handle(i);
+    return index_to_handle( entry - table->entries );
 }
 
 /* allocate a handle for an object, incrementing its refcount */
@@ -330,31 +339,10 @@ static struct handle_entry *get_handle( struct process *process, obj_handle_t ha
     if (index < 0) return NULL;
     if (index > table->last) return NULL;
     entry = table->entries + index;
-    if (!entry->ptr) return NULL;
+    if (!entry->used) return NULL;
     return entry;
 }
 
-/* attempt to shrink a table */
-static void shrink_handle_table( struct handle_table *table )
-{
-    struct handle_entry *entry = table->entries + table->last;
-    struct handle_entry *new_entries;
-    int count = table->count;
-
-    while (table->last >= 0)
-    {
-        if (entry->ptr) break;
-        table->last--;
-        entry--;
-    }
-    if (table->last >= count / 4) return;  /* no need to shrink */
-    if (count < MIN_HANDLE_ENTRIES * 2) return;  /* too small to shrink */
-    count /= 2;
-    if (!(new_entries = realloc( table->entries, count * sizeof(*new_entries) ))) return;
-    table->count   = count;
-    table->entries = new_entries;
-}
-
 static void inherit_handle( struct process *parent, const obj_handle_t handle, struct handle_table *table )
 {
     struct handle_entry *dst, *src;
@@ -365,8 +353,9 @@ static void inherit_handle( struct process *parent, const obj_handle_t handle, s
     src = get_handle( parent, handle );
     if (!src || !(src->access & RESERVED_INHERIT)) return;
     index = handle_to_index( handle );
-    if (dst[index].ptr) return;
-    grab_object_for_handle( src->ptr );
+    if (dst[index].used) return;
+
+    grab_object_for_handle( src->u.ptr );
     dst[index] = *src;
     table->last = max( table->last, index );
 }
@@ -400,6 +389,18 @@ struct handle_table *copy_handle_table( struct process *process, struct process
         {
             inherit_handle( parent, std_handles[i], table );
         }
+
+        /* iterate in reverse so that low values are allocated first */
+        for (i = table->last; i >= 0; --i)
+        {
+            struct handle_entry *entry = &table->entries[i];
+
+            if (!entry->used)
+            {
+                entry->u.next = table->freelist;
+                table->freelist = entry;
+            }
+        }
     }
     else
     {
@@ -409,14 +410,16 @@ struct handle_table *copy_handle_table( struct process *process, struct process
             memcpy( ptr, parent_table->entries, (table->last + 1) * sizeof(struct handle_entry) );
             for (i = 0; i <= table->last; i++, ptr++)
             {
-                if (!ptr->ptr) continue;
-                if (ptr->access & RESERVED_INHERIT) grab_object_for_handle( ptr->ptr );
-                else ptr->ptr = NULL; /* don't inherit this entry */
+                if (ptr->used && (ptr->access & RESERVED_INHERIT)) grab_object_for_handle( ptr->u.ptr );
+                else
+                {
+                    ptr->used = 0;
+                    ptr->u.next = table->freelist;
+                    table->freelist = ptr;
+                }
             }
         }
     }
-    /* attempt to shrink the table */
-    shrink_handle_table( table );
     return table;
 }
 
@@ -429,12 +432,14 @@ unsigned int close_handle( struct process *process, obj_handle_t handle )
 
     if (!(entry = get_handle( process, handle ))) return STATUS_INVALID_HANDLE;
     if (entry->access & RESERVED_CLOSE_PROTECT) return STATUS_HANDLE_NOT_CLOSABLE;
-    obj = entry->ptr;
+    obj = entry->u.ptr;
     if (!obj->ops->close_handle( obj, process, handle )) return STATUS_HANDLE_NOT_CLOSABLE;
-    entry->ptr = NULL;
+
     table = handle_is_global(handle) ? global_table : process->handles;
-    if (entry < table->entries + table->free) table->free = entry - table->entries;
-    if (entry == table->entries + table->last) shrink_handle_table( table );
+    entry->used = 0;
+    entry->u.next = table->freelist;
+    table->freelist = entry;
+
     release_object_from_handle( obj );
     return STATUS_SUCCESS;
 }
@@ -474,7 +479,7 @@ struct object *get_handle_obj( struct process *process, obj_handle_t handle,
             set_error( STATUS_INVALID_HANDLE );
             return NULL;
         }
-        obj = entry->ptr;
+        obj = entry->u.ptr;
         if (ops && (obj->ops != ops))
         {
             set_error( STATUS_OBJECT_TYPE_MISMATCH );  /* not the right type */
@@ -527,8 +532,8 @@ obj_handle_t find_inherited_handle( struct process *process, const struct object
 
     for (i = 0, ptr = table->entries; i <= table->last; i++, ptr++)
     {
-        if (!ptr->ptr) continue;
-        if (ptr->ptr->ops != ops) continue;
+        if (!ptr->used) continue;
+        if (ptr->u.ptr->ops != ops) continue;
         if (ptr->access & RESERVED_INHERIT) return index_to_handle(i);
     }
     return 0;
@@ -831,7 +836,7 @@ static int count_handles( struct process *process, void *user )
         return 0;
 
     for (i = 0, entry = table->entries; i <= table->last; i++, entry++)
-        if (entry->ptr)
+        if (entry->used)
             (*count)++;
 
     return 0;
@@ -903,7 +908,7 @@ static void enum_handle_ex_64( struct process *process, unsigned int i, struct s
     handle->handle_value                = index_to_handle(i);
     handle->granted_access              = entry->access & ~RESERVED_ALL;
     handle->creator_back_trace_index    = 0;
-    handle->object_type_index           = entry->ptr->ops->type->index;
+    handle->object_type_index           = entry->u.ptr->ops->type->index;
     handle->handle_attributes           = 0;
     handle->reserved                    = 0;
     if (entry->access & RESERVED_INHERIT) handle->handle_attributes |= OBJ_INHERIT;
@@ -918,7 +923,7 @@ static void enum_handle_ex_32( struct process *process, unsigned int i, struct s
     handle->handle_value                = index_to_handle(i);
     handle->granted_access              = entry->access & ~RESERVED_ALL;
     handle->creator_back_trace_index    = 0;
-    handle->object_type_index           = entry->ptr->ops->type->index;
+    handle->object_type_index           = entry->u.ptr->ops->type->index;
     handle->handle_attributes           = 0;
     handle->reserved                    = 0;
     if (entry->access & RESERVED_INHERIT) handle->handle_attributes |= OBJ_INHERIT;
@@ -929,7 +934,7 @@ static void enum_handle_64( struct process *process, unsigned int i, struct syst
                             struct handle_entry *entry )
 {
     handle->owner_pid       = process->id;
-    handle->object_type     = entry->ptr->ops->type->index;
+    handle->object_type     = entry->u.ptr->ops->type->index;
     handle->handle_flags    = 0;
     handle->handle_value    = index_to_handle(i);
     handle->object_pointer  = 0; /* FIXME: Fill out object_pointer */
@@ -942,7 +947,7 @@ static void enum_handle_32( struct process *process, unsigned int i, struct syst
                             struct handle_entry *entry )
 {
     handle->owner_pid       = process->id;
-    handle->object_type     = entry->ptr->ops->type->index;
+    handle->object_type     = entry->u.ptr->ops->type->index;
     handle->handle_flags    = 0;
     handle->handle_value    = index_to_handle(i);
     handle->object_pointer  = 0; /* FIXME: Fill out object_pointer */
@@ -963,7 +968,7 @@ static int enum_handles( struct process *process, void *user )
 
     for (i = 0, entry = table->entries; i <= table->last; i++, entry++)
     {
-        if (!entry->ptr) continue;
+        if (!entry->used) continue;
         assert( info->count );
         if (info->ex)
         {
-- 
2.37.1


