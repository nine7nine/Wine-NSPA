// MfPlat: Add Thread Safety

--- a/dlls/mfplat/main.c	2024-07-17 14:34:10.391653774 -0500
+++ b/dlls/mfplat/main.c	2024-07-17 14:33:57.106587824 -0500
@@ -8353,6 +8353,21 @@ struct async_create_file_result
 
 static struct list async_create_file_results = LIST_INIT(async_create_file_results);
 static CRITICAL_SECTION async_create_file_cs = { NULL, -1, 0, 0, 0, 0 };
+static BOOL async_create_file_cs_initialized = FALSE;
+
+void initialize_async_create_file_cs(void) {
+    if (!async_create_file_cs_initialized) {
+        InitializeCriticalSection(&async_create_file_cs);
+        async_create_file_cs_initialized = TRUE;
+    }
+}
+
+void cleanup_async_create_file_cs(void) {
+    if (async_create_file_cs_initialized) {
+        DeleteCriticalSection(&async_create_file_cs);
+        async_create_file_cs_initialized = FALSE;
+    }
+}
 
 static struct async_create_file *impl_from_create_file_IRtwqAsyncCallback(IRtwqAsyncCallback *iface)
 {
@@ -8404,8 +8419,9 @@ static HRESULT WINAPI async_create_file_
     return E_NOTIMPL;
 }
 
-static HRESULT WINAPI async_create_file_callback_Invoke(IRtwqAsyncCallback *iface, IRtwqAsyncResult *result)
-{
+static HRESULT WINAPI async_create_file_callback_Invoke(IRtwqAsyncCallback *iface, IRtwqAsyncResult *result) {
+    initialize_async_create_file_cs();
+
     struct async_create_file *async = impl_from_create_file_IRtwqAsyncCallback(iface);
     IRtwqAsyncResult *caller;
     IMFByteStream *stream;
@@ -8414,13 +8430,11 @@ static HRESULT WINAPI async_create_file_
     caller = (IRtwqAsyncResult *)IRtwqAsyncResult_GetStateNoAddRef(result);
 
     hr = MFCreateFile(async->access_mode, async->open_mode, async->flags, async->path, &stream);
-    if (SUCCEEDED(hr))
-    {
+    if (SUCCEEDED(hr)) {
         struct async_create_file_result *result_item;
 
         result_item = malloc(sizeof(*result_item));
-        if (result_item)
-        {
+        if (result_item) {
             result_item->result = caller;
             IRtwqAsyncResult_AddRef(caller);
             result_item->stream = stream;
@@ -8432,9 +8446,9 @@ static HRESULT WINAPI async_create_file_
         }
 
         IMFByteStream_Release(stream);
-    }
-    else
+    } else {
         IRtwqAsyncResult_SetStatus(caller, hr);
+    }
 
     RtwqInvokeCallback(caller);
 
@@ -8509,8 +8523,9 @@ failed:
     return hr;
 }
 
-static HRESULT async_create_file_pull_result(IUnknown *unk, IMFByteStream **stream)
-{
+static HRESULT async_create_file_pull_result(IUnknown *unk, IMFByteStream **stream) {
+    initialize_async_create_file_cs();
+
     struct async_create_file_result *item;
     HRESULT hr = MF_E_UNEXPECTED;
     IRtwqAsyncResult *result;
@@ -8522,10 +8537,8 @@ static HRESULT async_create_file_pull_re
 
     EnterCriticalSection(&async_create_file_cs);
 
-    LIST_FOR_EACH_ENTRY(item, &async_create_file_results, struct async_create_file_result, entry)
-    {
-        if (result == item->result)
-        {
+    LIST_FOR_EACH_ENTRY(item, &async_create_file_results, struct async_create_file_result, entry) {
+        if (result == item->result) {
             *stream = item->stream;
             IRtwqAsyncResult_Release(item->result);
             list_remove(&item->entry);
@@ -8536,8 +8549,9 @@ static HRESULT async_create_file_pull_re
 
     LeaveCriticalSection(&async_create_file_cs);
 
-    if (*stream)
+    if (*stream) {
         hr = IRtwqAsyncResult_GetStatus(result);
+    }
 
     IRtwqAsyncResult_Release(result);
 
