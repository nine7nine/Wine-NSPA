From 6f1ed05bad82944a843e45dd0680ea7804de634a Mon Sep 17 00:00:00 2001
From: Jacek Caban <jacek@codeweavers.com>
Date: Wed, 1 Nov 2023 23:57:30 +0100
Subject: [PATCH] configure: Disable -Wmicrosoft-enum-forward-reference
 warnings.

---
 configure    | 33 +++++++++++++++++++++++++++++++++
 configure.ac |  1 +
 2 files changed, 34 insertions(+)

diff --git a/configure b/configure
index 9a98c212059..646f44ede24 100755
--- a/configure
+++ b/configure
@@ -11003,6 +11003,39 @@ printf "%s\n" "$ac_res" >&6; }
 if eval test \"x\$"$as_ac_var"\" = x"yes"
 then :
   as_fn_append ${wine_arch}_EXTRACFLAGS " -Wno-pragma-pack"
+fi }
+    { as_ac_var=`printf "%s\n" "ac_cv_${wine_arch}_cflags_-Wmicrosoft-enum-forward-reference" | $as_tr_sh`
+{ printf "%s\n" "$as_me:${as_lineno-$LINENO}: checking whether $CC supports -Wmicrosoft-enum-forward-reference" >&5
+printf %s "checking whether $CC supports -Wmicrosoft-enum-forward-reference... " >&6; }
+if eval test \${$as_ac_var+y}
+then :
+  printf %s "(cached) " >&6
+else $as_nop
+  ac_wine_try_cflags_saved=$CFLAGS
+ac_wine_try_cflags_saved_exeext=$ac_exeext
+CFLAGS="$CFLAGS -nostdlib -nodefaultlibs -Wmicrosoft-enum-forward-reference"
+ac_exeext=".exe"
+cat confdefs.h - <<_ACEOF >conftest.$ac_ext
+/* end confdefs.h.  */
+int __cdecl mainCRTStartup(void) { return 0; }
+_ACEOF
+if ac_fn_c_try_link "$LINENO"
+then :
+  eval "$as_ac_var=yes"
+else $as_nop
+  eval "$as_ac_var=no"
+fi
+rm -f core conftest.err conftest.$ac_objext conftest.beam \
+    conftest$ac_exeext conftest.$ac_ext
+CFLAGS=$ac_wine_try_cflags_saved
+ac_exeext=$ac_wine_try_cflags_saved_exeext
+fi
+eval ac_res=\$$as_ac_var
+	       { printf "%s\n" "$as_me:${as_lineno-$LINENO}: result: $ac_res" >&5
+printf "%s\n" "$ac_res" >&6; }
+if eval test \"x\$"$as_ac_var"\" = x"yes"
+then :
+  as_fn_append ${wine_arch}_EXTRACFLAGS " -Wno-microsoft-enum-forward-reference"
 fi }
     { as_ac_var=`printf "%s\n" "ac_cv_${wine_arch}_cflags_-Wshift-overflow=2" | $as_tr_sh`
 { printf "%s\n" "$as_me:${as_lineno-$LINENO}: checking whether $CC supports -Wshift-overflow=2" >&5
diff --git a/configure.ac b/configure.ac
index 3b6a590a6cd..fd1a58b9170 100644
--- a/configure.ac
+++ b/configure.ac
@@ -960,6 +960,7 @@ This is an error since --enable-archs=$wine_arch was requested.])])
     WINE_TRY_PE_CFLAGS([-Winit-self])
     WINE_TRY_PE_CFLAGS([-Wpacked-not-aligned],[AS_VAR_APPEND(${wine_arch}_EXTRACFLAGS,[" -Wno-packed-not-aligned"])])
     WINE_TRY_PE_CFLAGS([-Wpragma-pack],[AS_VAR_APPEND(${wine_arch}_EXTRACFLAGS,[" -Wno-pragma-pack"])])
+    WINE_TRY_PE_CFLAGS([-Wmicrosoft-enum-forward-reference],[AS_VAR_APPEND(${wine_arch}_EXTRACFLAGS,[" -Wno-microsoft-enum-forward-reference"])])
     WINE_TRY_PE_CFLAGS([-Wshift-overflow=2])
     WINE_TRY_PE_CFLAGS([-Wstrict-prototypes])
     WINE_TRY_PE_CFLAGS([-Wtype-limits])
-- 
GitLab

From fce3311843928d879e13aa14a06d3bbf0c89b9c5 Mon Sep 17 00:00:00 2001
From: Bartosz Kosiorek <gang65@poczta.onet.pl>
Date: Mon, 30 Oct 2023 20:20:12 +0100
Subject: [PATCH 1/6] msvcrt: Add _mbsdec_l implementation.

---
 dlls/msvcr100/msvcr100.spec |  2 +-
 dlls/msvcr110/msvcr110.spec |  2 +-
 dlls/msvcr120/msvcr120.spec |  2 +-
 dlls/msvcr80/msvcr80.spec   |  2 +-
 dlls/msvcr90/msvcr90.spec   |  2 +-
 dlls/msvcrt/mbcs.c          | 47 ++++++++++++++++++++++++++-----------
 dlls/msvcrt/msvcrt.spec     |  2 +-
 dlls/ucrtbase/ucrtbase.spec |  4 ++--
 8 files changed, 41 insertions(+), 22 deletions(-)

diff --git a/dlls/msvcr100/msvcr100.spec b/dlls/msvcr100/msvcr100.spec
index 37aee60487d..4f6e01ca065 100644
--- a/dlls/msvcr100/msvcr100.spec
+++ b/dlls/msvcr100/msvcr100.spec
@@ -1110,7 +1110,7 @@
 @ cdecl _mbscspn(str str)
 @ cdecl _mbscspn_l(str str ptr)
 @ cdecl _mbsdec(ptr ptr)
-@ stub _mbsdec_l
+@ cdecl _mbsdec_l(ptr ptr ptr)
 @ cdecl _mbsicmp(str str)
 @ cdecl _mbsicmp_l(str str ptr)
 @ cdecl _mbsicoll(str str)
diff --git a/dlls/msvcr110/msvcr110.spec b/dlls/msvcr110/msvcr110.spec
index d1fc7c2de55..51a68603d4f 100644
--- a/dlls/msvcr110/msvcr110.spec
+++ b/dlls/msvcr110/msvcr110.spec
@@ -1467,7 +1467,7 @@
 @ cdecl _mbscspn(str str)
 @ cdecl _mbscspn_l(str str ptr)
 @ cdecl _mbsdec(ptr ptr)
-@ stub _mbsdec_l
+@ cdecl _mbsdec_l(ptr ptr ptr)
 @ cdecl _mbsicmp(str str)
 @ cdecl _mbsicmp_l(str str ptr)
 @ cdecl _mbsicoll(str str)
diff --git a/dlls/msvcr120/msvcr120.spec b/dlls/msvcr120/msvcr120.spec
index 9576cd52edb..b004a9c51d4 100644
--- a/dlls/msvcr120/msvcr120.spec
+++ b/dlls/msvcr120/msvcr120.spec
@@ -1478,7 +1478,7 @@
 @ cdecl _mbscspn(str str)
 @ cdecl _mbscspn_l(str str ptr)
 @ cdecl _mbsdec(ptr ptr)
-@ stub _mbsdec_l
+@ cdecl _mbsdec_l(ptr ptr ptr)
 @ cdecl _mbsicmp(str str)
 @ cdecl _mbsicmp_l(str str ptr)
 @ cdecl _mbsicoll(str str)
diff --git a/dlls/msvcr80/msvcr80.spec b/dlls/msvcr80/msvcr80.spec
index 6c3c87ada0f..bca11a6c9c3 100644
--- a/dlls/msvcr80/msvcr80.spec
+++ b/dlls/msvcr80/msvcr80.spec
@@ -782,7 +782,7 @@
 @ cdecl _mbscspn(str str)
 @ cdecl _mbscspn_l(str str ptr)
 @ cdecl _mbsdec(ptr ptr)
-@ stub _mbsdec_l
+@ cdecl _mbsdec_l(ptr ptr ptr)
 @ cdecl _mbsicmp(str str)
 @ cdecl _mbsicmp_l(str str ptr)
 @ cdecl _mbsicoll(str str)
diff --git a/dlls/msvcr90/msvcr90.spec b/dlls/msvcr90/msvcr90.spec
index efaef544b7d..0ead41a4f8d 100644
--- a/dlls/msvcr90/msvcr90.spec
+++ b/dlls/msvcr90/msvcr90.spec
@@ -760,7 +760,7 @@
 @ cdecl _mbscspn(str str)
 @ cdecl _mbscspn_l(str str ptr)
 @ cdecl _mbsdec(ptr ptr)
-@ stub _mbsdec_l
+@ cdecl _mbsdec_l(ptr ptr ptr)
 @ cdecl _mbsicmp(str str)
 @ cdecl _mbsicmp_l(str str ptr)
 @ cdecl _mbsicoll(str str)
diff --git a/dlls/msvcrt/mbcs.c b/dlls/msvcrt/mbcs.c
index c8390288d4a..4143fff50dc 100644
--- a/dlls/msvcrt/mbcs.c
+++ b/dlls/msvcrt/mbcs.c
@@ -669,20 +669,6 @@ unsigned int CDECL _mbcjmstojis(unsigned int c)
     return _mbcjmstojis_l(c, NULL);
 }
 
-/*********************************************************************
- *		_mbsdec(MSVCRT.@)
- */
-unsigned char* CDECL _mbsdec(const unsigned char* start, const unsigned char* cur)
-{
-  if(start >= cur)
-    return NULL;
-
-  if(get_mbcinfo()->ismbcodepage)
-    return (unsigned char *)(_ismbstrail(start,cur-1) ? cur - 2 : cur -1);
-
-  return (unsigned char *)cur - 1; /* ASCII CP or SB char */
-}
-
 /*********************************************************************
  *		_mbclen_l(MSVCRT.@)
  */
@@ -1970,6 +1956,39 @@ int CDECL _ismbstrail(const unsigned char* start, const unsigned char* str)
   return _ismbstrail_l(start, str, NULL);
 }
 
+/*********************************************************************
+ *		_mbsdec_l(MSVCRT.@)
+ */
+unsigned char* CDECL _mbsdec_l(const unsigned char *start,
+        const unsigned char *cur, _locale_t locale)
+{
+    pthreadmbcinfo mbcinfo;
+
+    if (!MSVCRT_CHECK_PMT(start && cur))
+        return NULL;
+    if (start >= cur)
+        return NULL;
+
+    if (!locale)
+        mbcinfo = get_mbcinfo();
+    else
+        mbcinfo = locale->mbcinfo;
+
+    if (mbcinfo->ismbcodepage)
+        return (unsigned char *)(_ismbstrail_l(start, cur - 1, locale) ? cur - 2 : cur - 1);
+
+    return (unsigned char *)cur - 1; /* ASCII CP or SB char */
+}
+
+/*********************************************************************
+ *		_mbsdec(MSVCRT.@)
+ */
+unsigned char* CDECL _mbsdec(const unsigned char *start, const unsigned char *cur)
+{
+    return _mbsdec_l(start, cur, NULL);
+}
+
+
 /*********************************************************************
  *		_mbbtype_l(MSVCRT.@)
  */
diff --git a/dlls/msvcrt/msvcrt.spec b/dlls/msvcrt/msvcrt.spec
index 8515f13263f..a0dbc5f8fe4 100644
--- a/dlls/msvcrt/msvcrt.spec
+++ b/dlls/msvcrt/msvcrt.spec
@@ -729,7 +729,7 @@
 @ cdecl _mbscspn(str str)
 @ cdecl _mbscspn_l(str str ptr)
 @ cdecl _mbsdec(ptr ptr)
-# stub _mbsdec_l(ptr ptr ptr)
+@ cdecl _mbsdec_l(ptr ptr ptr)
 @ cdecl _mbsdup(str) _strdup
 # stub _strdup_dbg(str long str long)
 @ cdecl _mbsicmp(str str)
diff --git a/dlls/ucrtbase/ucrtbase.spec b/dlls/ucrtbase/ucrtbase.spec
index bb505b42afb..ec580948af7 100644
--- a/dlls/ucrtbase/ucrtbase.spec
+++ b/dlls/ucrtbase/ucrtbase.spec
@@ -625,7 +625,7 @@
 @ cdecl _mbscspn(str str)
 @ cdecl _mbscspn_l(str str ptr)
 @ cdecl _mbsdec(ptr ptr)
-@ stub _mbsdec_l
+@ cdecl _mbsdec_l(ptr ptr ptr)
 @ cdecl _mbsdup(str) _strdup
 @ cdecl _mbsicmp(str str)
 @ cdecl _mbsicmp_l(str str ptr)
@@ -1195,7 +1195,7 @@
 @ cdecl _o__mbscspn(str str) _mbscspn
 @ cdecl _o__mbscspn_l(str str ptr) _mbscspn_l
 @ cdecl _o__mbsdec(ptr ptr) _mbsdec
-@ stub _o__mbsdec_l
+@ cdecl _o__mbsdec_l(ptr ptr ptr) _mbsdec_l
 @ cdecl _o__mbsicmp(str str) _mbsicmp
 @ cdecl _o__mbsicmp_l(str str ptr) _mbsicmp_l
 @ cdecl _o__mbsicoll(str str) _mbsicoll
-- 
GitLab


From 3c9419622a89e2bdba5e770266d987573380119c Mon Sep 17 00:00:00 2001
From: Bartosz Kosiorek <gang65@poczta.onet.pl>
Date: Mon, 30 Oct 2023 20:21:13 +0100
Subject: [PATCH 2/6] msvcrt: Add _mbslwr_l implementation.

---
 dlls/msvcr100/msvcr100.spec |  2 +-
 dlls/msvcr110/msvcr110.spec |  2 +-
 dlls/msvcr120/msvcr120.spec |  2 +-
 dlls/msvcr80/msvcr80.spec   |  2 +-
 dlls/msvcr90/msvcr90.spec   |  2 +-
 dlls/msvcrt/mbcs.c          | 60 ++++++++++++++++++++++++-------------
 dlls/msvcrt/msvcrt.spec     |  2 +-
 dlls/ucrtbase/ucrtbase.spec |  4 +--
 8 files changed, 48 insertions(+), 28 deletions(-)

diff --git a/dlls/msvcr100/msvcr100.spec b/dlls/msvcr100/msvcr100.spec
index 4f6e01ca065..bb85301bce6 100644
--- a/dlls/msvcr100/msvcr100.spec
+++ b/dlls/msvcr100/msvcr100.spec
@@ -1120,7 +1120,7 @@
 @ cdecl _mbslen(str)
 @ cdecl _mbslen_l(str ptr)
 @ cdecl _mbslwr(str)
-@ stub _mbslwr_l
+@ cdecl _mbslwr_l(str ptr)
 @ cdecl _mbslwr_s(str long)
 @ cdecl _mbslwr_s_l(str long ptr)
 @ cdecl _mbsnbcat(str str long)
diff --git a/dlls/msvcr110/msvcr110.spec b/dlls/msvcr110/msvcr110.spec
index 51a68603d4f..29a16dbdc40 100644
--- a/dlls/msvcr110/msvcr110.spec
+++ b/dlls/msvcr110/msvcr110.spec
@@ -1477,7 +1477,7 @@
 @ cdecl _mbslen(str)
 @ cdecl _mbslen_l(str ptr)
 @ cdecl _mbslwr(str)
-@ stub _mbslwr_l
+@ cdecl _mbslwr_l(str ptr)
 @ cdecl _mbslwr_s(str long)
 @ cdecl _mbslwr_s_l(str long ptr)
 @ cdecl _mbsnbcat(str str long)
diff --git a/dlls/msvcr120/msvcr120.spec b/dlls/msvcr120/msvcr120.spec
index b004a9c51d4..97331627485 100644
--- a/dlls/msvcr120/msvcr120.spec
+++ b/dlls/msvcr120/msvcr120.spec
@@ -1488,7 +1488,7 @@
 @ cdecl _mbslen(str)
 @ cdecl _mbslen_l(str ptr)
 @ cdecl _mbslwr(str)
-@ stub _mbslwr_l
+@ cdecl _mbslwr_l(str ptr)
 @ cdecl _mbslwr_s(str long)
 @ cdecl _mbslwr_s_l(str long ptr)
 @ cdecl _mbsnbcat(str str long)
diff --git a/dlls/msvcr80/msvcr80.spec b/dlls/msvcr80/msvcr80.spec
index bca11a6c9c3..55f058965d5 100644
--- a/dlls/msvcr80/msvcr80.spec
+++ b/dlls/msvcr80/msvcr80.spec
@@ -792,7 +792,7 @@
 @ cdecl _mbslen(str)
 @ cdecl _mbslen_l(str ptr)
 @ cdecl _mbslwr(str)
-@ stub _mbslwr_l
+@ cdecl _mbslwr_l(str ptr)
 @ cdecl _mbslwr_s(str long)
 @ cdecl _mbslwr_s_l(str long ptr)
 @ cdecl _mbsnbcat(str str long)
diff --git a/dlls/msvcr90/msvcr90.spec b/dlls/msvcr90/msvcr90.spec
index 0ead41a4f8d..cdd0117aeb4 100644
--- a/dlls/msvcr90/msvcr90.spec
+++ b/dlls/msvcr90/msvcr90.spec
@@ -770,7 +770,7 @@
 @ cdecl _mbslen(str)
 @ cdecl _mbslen_l(str ptr)
 @ cdecl _mbslwr(str)
-@ stub _mbslwr_l
+@ cdecl _mbslwr_l(str ptr)
 @ cdecl _mbslwr_s(str long)
 @ cdecl _mbslwr_s_l(str long ptr)
 @ cdecl _mbsnbcat(str str long)
diff --git a/dlls/msvcrt/mbcs.c b/dlls/msvcrt/mbcs.c
index 4143fff50dc..24e34b96317 100644
--- a/dlls/msvcrt/mbcs.c
+++ b/dlls/msvcrt/mbcs.c
@@ -2271,30 +2271,50 @@ unsigned char* CDECL _mbsncat(unsigned char* dst, const unsigned char* src, size
 
 
 /*********************************************************************
- *              _mbslwr(MSVCRT.@)
+ *              _mbslwr_l(MSVCRT.@)
  */
-unsigned char* CDECL _mbslwr(unsigned char* s)
+unsigned char* CDECL _mbslwr_l(unsigned char *s, _locale_t locale)
 {
-  unsigned char *ret = s;
-  if (!s)
-    return NULL;
-  if (get_mbcinfo()->ismbcodepage)
-  {
-    unsigned int c;
-    while (*s)
+    pthreadmbcinfo mbcinfo;
+    unsigned char *ret = s;
+
+    if (!s)
+        return NULL;
+
+    if (locale)
+        mbcinfo = locale->mbcinfo;
+    else
+        mbcinfo = get_mbcinfo();
+
+    if (mbcinfo->ismbcodepage)
     {
-      c = _mbctolower(_mbsnextc(s));
-      /* Note that I assume that the size of the character is unchanged */
-      if (c > 255)
-      {
-          *s++=(c>>8);
-          c=c & 0xff;
-      }
-      *s++=c;
+        unsigned int c;
+
+        while (*s)
+        {
+            c = _mbctolower_l(_mbsnextc_l(s, locale), locale);
+            /* Note that I assume that the size of the character is unchanged */
+            if (c > 255)
+            {
+                *s++ = (c >> 8);
+                c = c & 0xff;
+            }
+            *s++ = c;
+        }
     }
-  }
-  else for ( ; *s; s++) *s = _tolower_l(*s, NULL);
-  return ret;
+    else
+    {
+        for ( ; *s; s++) *s = _tolower_l(*s, locale);
+    }
+    return ret;
+}
+
+/*********************************************************************
+ *              _mbslwr(MSVCRT.@)
+ */
+unsigned char* CDECL _mbslwr(unsigned char *s)
+{
+    return _mbslwr_l(s, NULL);
 }
 
 /*********************************************************************
diff --git a/dlls/msvcrt/msvcrt.spec b/dlls/msvcrt/msvcrt.spec
index a0dbc5f8fe4..bce48873271 100644
--- a/dlls/msvcrt/msvcrt.spec
+++ b/dlls/msvcrt/msvcrt.spec
@@ -741,7 +741,7 @@
 @ cdecl _mbslen(str)
 @ cdecl _mbslen_l(str ptr)
 @ cdecl _mbslwr(str)
-# stub _mbslwr_l(str ptr)
+@ cdecl _mbslwr_l(str ptr)
 @ cdecl _mbslwr_s(str long)
 @ cdecl _mbslwr_s_l(str long ptr)
 @ cdecl _mbsnbcat(str str long)
diff --git a/dlls/ucrtbase/ucrtbase.spec b/dlls/ucrtbase/ucrtbase.spec
index ec580948af7..28805ceb98f 100644
--- a/dlls/ucrtbase/ucrtbase.spec
+++ b/dlls/ucrtbase/ucrtbase.spec
@@ -636,7 +636,7 @@
 @ cdecl _mbslen(str)
 @ cdecl _mbslen_l(str ptr)
 @ cdecl _mbslwr(str)
-@ stub _mbslwr_l
+@ cdecl _mbslwr_l(str ptr)
 @ cdecl _mbslwr_s(str long)
 @ cdecl _mbslwr_s_l(str long ptr)
 @ cdecl _mbsnbcat(str str long)
@@ -1205,7 +1205,7 @@
 @ cdecl _o__mbslen(str) _mbslen
 @ cdecl _o__mbslen_l(str ptr) _mbslen_l
 @ cdecl _o__mbslwr(str) _mbslwr
-@ stub _o__mbslwr_l
+@ cdecl _o__mbslwr_l(str ptr) _mbslwr_l
 @ cdecl _o__mbslwr_s(str long) _mbslwr_s
 @ cdecl _o__mbslwr_s_l(str long ptr) _mbslwr_s_l
 @ cdecl _o__mbsnbcat(str str long) _mbsnbcat
-- 
GitLab


From 2853352cc869e5be6bbf2a88b11032f917225e27 Mon Sep 17 00:00:00 2001
From: Bartosz Kosiorek <gang65@poczta.onet.pl>
Date: Mon, 30 Oct 2023 20:21:27 +0100
Subject: [PATCH 3/6] msvcrt: Add _mbsrchr_l implementation.

---
 dlls/msvcr100/msvcr100.spec |  2 +-
 dlls/msvcr110/msvcr110.spec |  2 +-
 dlls/msvcr120/msvcr120.spec |  2 +-
 dlls/msvcr80/msvcr80.spec   |  2 +-
 dlls/msvcr90/msvcr90.spec   |  2 +-
 dlls/msvcrt/mbcs.c          | 50 +++++++++++++++++++++++++------------
 dlls/msvcrt/msvcrt.spec     |  2 +-
 dlls/ucrtbase/ucrtbase.spec |  4 +--
 8 files changed, 42 insertions(+), 24 deletions(-)

diff --git a/dlls/msvcr100/msvcr100.spec b/dlls/msvcr100/msvcr100.spec
index bb85301bce6..a39b15c6707 100644
--- a/dlls/msvcr100/msvcr100.spec
+++ b/dlls/msvcr100/msvcr100.spec
@@ -1176,7 +1176,7 @@
 @ cdecl _mbspbrk(str str)
 @ stub _mbspbrk_l
 @ cdecl _mbsrchr(str long)
-@ stub _mbsrchr_l
+@ cdecl _mbsrchr_l(str long ptr)
 @ cdecl _mbsrev(str)
 @ stub _mbsrev_l
 @ cdecl _mbsset(ptr long)
diff --git a/dlls/msvcr110/msvcr110.spec b/dlls/msvcr110/msvcr110.spec
index 29a16dbdc40..a48d98455ce 100644
--- a/dlls/msvcr110/msvcr110.spec
+++ b/dlls/msvcr110/msvcr110.spec
@@ -1533,7 +1533,7 @@
 @ cdecl _mbspbrk(str str)
 @ stub _mbspbrk_l
 @ cdecl _mbsrchr(str long)
-@ stub _mbsrchr_l
+@ cdecl _mbsrchr_l(str long ptr)
 @ cdecl _mbsrev(str)
 @ stub _mbsrev_l
 @ cdecl _mbsset(ptr long)
diff --git a/dlls/msvcr120/msvcr120.spec b/dlls/msvcr120/msvcr120.spec
index 97331627485..b23663783a7 100644
--- a/dlls/msvcr120/msvcr120.spec
+++ b/dlls/msvcr120/msvcr120.spec
@@ -1544,7 +1544,7 @@
 @ cdecl _mbspbrk(str str)
 @ stub _mbspbrk_l
 @ cdecl _mbsrchr(str long)
-@ stub _mbsrchr_l
+@ cdecl _mbsrchr_l(str long ptr)
 @ cdecl _mbsrev(str)
 @ stub _mbsrev_l
 @ cdecl _mbsset(ptr long)
diff --git a/dlls/msvcr80/msvcr80.spec b/dlls/msvcr80/msvcr80.spec
index 55f058965d5..ec570c8ab1f 100644
--- a/dlls/msvcr80/msvcr80.spec
+++ b/dlls/msvcr80/msvcr80.spec
@@ -848,7 +848,7 @@
 @ cdecl _mbspbrk(str str)
 @ stub _mbspbrk_l
 @ cdecl _mbsrchr(str long)
-@ stub _mbsrchr_l
+@ cdecl _mbsrchr_l(str long ptr)
 @ cdecl _mbsrev(str)
 @ stub _mbsrev_l
 @ cdecl _mbsset(ptr long)
diff --git a/dlls/msvcr90/msvcr90.spec b/dlls/msvcr90/msvcr90.spec
index cdd0117aeb4..b7d60374372 100644
--- a/dlls/msvcr90/msvcr90.spec
+++ b/dlls/msvcr90/msvcr90.spec
@@ -826,7 +826,7 @@
 @ cdecl _mbspbrk(str str)
 @ stub _mbspbrk_l
 @ cdecl _mbsrchr(str long)
-@ stub _mbsrchr_l
+@ cdecl _mbsrchr_l(str long ptr)
 @ cdecl _mbsrev(str)
 @ stub _mbsrev_l
 @ cdecl _mbsset(ptr long)
diff --git a/dlls/msvcrt/mbcs.c b/dlls/msvcrt/mbcs.c
index 24e34b96317..06f84d1db4a 100644
--- a/dlls/msvcrt/mbcs.c
+++ b/dlls/msvcrt/mbcs.c
@@ -1441,27 +1441,45 @@ unsigned char* CDECL _mbschr(const unsigned char* s, unsigned int x)
   return _mbschr_l(s, x, NULL);
 }
 
+/*********************************************************************
+ *		_mbsrchr_l(MSVCRT.@)
+ */
+unsigned char* CDECL _mbsrchr_l(const unsigned char *s, unsigned int x, _locale_t locale)
+{
+    pthreadmbcinfo mbcinfo;
+
+    if (!MSVCRT_CHECK_PMT(s))
+        return NULL;
+
+    if (locale)
+        mbcinfo = locale->mbcinfo;
+    else
+        mbcinfo = get_mbcinfo();
+
+    if (mbcinfo->ismbcodepage)
+    {
+        unsigned char *match = NULL;
+        unsigned int c;
+
+        while (1)
+        {
+            c = _mbsnextc_l(s, locale);
+            if (c == x)
+                match = (unsigned char *)s;
+            if (!c)
+                return match;
+            s += (c > 255) ? 2 : 1;
+        }
+    }
+    return u_strrchr(s, x);
+}
+
 /*********************************************************************
  *		_mbsrchr(MSVCRT.@)
  */
 unsigned char* CDECL _mbsrchr(const unsigned char* s, unsigned int x)
 {
-  if(get_mbcinfo()->ismbcodepage)
-  {
-    unsigned int c;
-    unsigned char* match=NULL;
-    if(!s)
-      return NULL;
-    while (1) {
-      c = _mbsnextc(s);
-      if (c == x)
-        match=(unsigned char*)s;
-      if (!c)
-        return match;
-      s +=(c > 255) ? 2 : 1;
-    }
-  }
-  return u_strrchr(s, x);
+    return _mbsrchr_l(s, x, NULL);
 }
 
 /*********************************************************************
diff --git a/dlls/msvcrt/msvcrt.spec b/dlls/msvcrt/msvcrt.spec
index bce48873271..fae66edf6a4 100644
--- a/dlls/msvcrt/msvcrt.spec
+++ b/dlls/msvcrt/msvcrt.spec
@@ -797,7 +797,7 @@
 @ cdecl _mbspbrk(str str)
 # stub _mbspbrk_l(str str ptr)
 @ cdecl _mbsrchr(str long)
-# stub _mbsrchr_l(str long ptr)
+@ cdecl _mbsrchr_l(str long ptr)
 @ cdecl _mbsrev(str)
 # stub _mbsrev_l(str ptr)
 @ cdecl _mbsset(ptr long)
diff --git a/dlls/ucrtbase/ucrtbase.spec b/dlls/ucrtbase/ucrtbase.spec
index 28805ceb98f..5b4c2beb491 100644
--- a/dlls/ucrtbase/ucrtbase.spec
+++ b/dlls/ucrtbase/ucrtbase.spec
@@ -692,7 +692,7 @@
 @ cdecl _mbspbrk(str str)
 @ stub _mbspbrk_l
 @ cdecl _mbsrchr(str long)
-@ stub _mbsrchr_l
+@ cdecl _mbsrchr_l(str long ptr)
 @ cdecl _mbsrev(str)
 @ stub _mbsrev_l
 @ cdecl _mbsset(ptr long)
@@ -1261,7 +1261,7 @@
 @ cdecl _o__mbspbrk(str str) _mbspbrk
 @ stub _o__mbspbrk_l
 @ cdecl _o__mbsrchr(str long) _mbsrchr
-@ stub _o__mbsrchr_l
+@ cdecl _o__mbsrchr_l(str long ptr) _mbsrchr_l
 @ cdecl _o__mbsrev(str) _mbsrev
 @ stub _o__mbsrev_l
 @ cdecl _o__mbsset(ptr long) _mbsset
-- 
GitLab


From 07404c0b6cf4cad44aff15847bca5042b0a02d3c Mon Sep 17 00:00:00 2001
From: Bartosz Kosiorek <gang65@poczta.onet.pl>
Date: Mon, 30 Oct 2023 20:22:03 +0100
Subject: [PATCH 4/6] msvcrt: Add _cprintf_l implementation.

---
 dlls/msvcr100/msvcr100.spec |  2 +-
 dlls/msvcr110/msvcr110.spec |  2 +-
 dlls/msvcr120/msvcr120.spec |  2 +-
 dlls/msvcr80/msvcr80.spec   |  2 +-
 dlls/msvcr90/msvcr90.spec   |  2 +-
 dlls/msvcrt/console.c       | 17 +++++++++++++++++
 dlls/msvcrt/msvcrt.spec     |  2 +-
 7 files changed, 23 insertions(+), 6 deletions(-)

diff --git a/dlls/msvcr100/msvcr100.spec b/dlls/msvcr100/msvcr100.spec
index a39b15c6707..b0a4cffc9d6 100644
--- a/dlls/msvcr100/msvcr100.spec
+++ b/dlls/msvcr100/msvcr100.spec
@@ -736,7 +736,7 @@
 @ cdecl _copysign(double double) copysign
 @ cdecl -arch=!i386 _copysignf(float float) copysignf
 @ varargs _cprintf(str)
-@ stub _cprintf_l
+@ varargs _cprintf_l(str ptr)
 @ stub _cprintf_p
 @ stub _cprintf_p_l
 @ stub _cprintf_s
diff --git a/dlls/msvcr110/msvcr110.spec b/dlls/msvcr110/msvcr110.spec
index a48d98455ce..660986a92f7 100644
--- a/dlls/msvcr110/msvcr110.spec
+++ b/dlls/msvcr110/msvcr110.spec
@@ -1084,7 +1084,7 @@
 @ cdecl _copysign(double double) copysign
 @ cdecl -arch=!i386 _copysignf(float float) copysignf
 @ varargs _cprintf(str)
-@ stub _cprintf_l
+@ varargs _cprintf_l(str ptr)
 @ stub _cprintf_p
 @ stub _cprintf_p_l
 @ stub _cprintf_s
diff --git a/dlls/msvcr120/msvcr120.spec b/dlls/msvcr120/msvcr120.spec
index b23663783a7..16bc8495882 100644
--- a/dlls/msvcr120/msvcr120.spec
+++ b/dlls/msvcr120/msvcr120.spec
@@ -1076,7 +1076,7 @@
 @ cdecl _copysign(double double) copysign
 @ cdecl _copysignf(float float) copysignf
 @ varargs _cprintf(str)
-@ stub _cprintf_l
+@ varargs _cprintf_l(str ptr)
 @ stub _cprintf_p
 @ stub _cprintf_p_l
 @ stub _cprintf_s
diff --git a/dlls/msvcr80/msvcr80.spec b/dlls/msvcr80/msvcr80.spec
index ec570c8ab1f..9035a39c1e7 100644
--- a/dlls/msvcr80/msvcr80.spec
+++ b/dlls/msvcr80/msvcr80.spec
@@ -400,7 +400,7 @@
 @ cdecl _copysign(double double) copysign
 @ cdecl -arch=!i386 _copysignf(float float) copysignf
 @ varargs _cprintf(str)
-@ stub _cprintf_l
+@ varargs _cprintf_l(str ptr)
 @ stub _cprintf_p
 @ stub _cprintf_p_l
 @ stub _cprintf_s
diff --git a/dlls/msvcr90/msvcr90.spec b/dlls/msvcr90/msvcr90.spec
index b7d60374372..fdf5e56b5f0 100644
--- a/dlls/msvcr90/msvcr90.spec
+++ b/dlls/msvcr90/msvcr90.spec
@@ -383,7 +383,7 @@
 @ cdecl _copysign(double double) copysign
 @ cdecl -arch=!i386 _copysignf(float float) copysignf
 @ varargs _cprintf(str)
-@ stub _cprintf_l
+@ varargs _cprintf_l(str ptr)
 @ stub _cprintf_p
 @ stub _cprintf_p_l
 @ stub _cprintf_s
diff --git a/dlls/msvcrt/console.c b/dlls/msvcrt/console.c
index 2c92f0b3811..99cf35872aa 100644
--- a/dlls/msvcrt/console.c
+++ b/dlls/msvcrt/console.c
@@ -540,6 +540,23 @@ int CDECL _vcprintf(const char* format, va_list valist)
     return pf_printf_a(puts_clbk_console_a, NULL, format, NULL, 0, arg_clbk_valist, NULL, &valist);
 }
 
+#if _MSVCR_VER<=120
+/*********************************************************************
+ *		_cprintf_l (MSVCRT.@)
+ */
+int WINAPIV _cprintf_l(const char* format, _locale_t locale, ...)
+{
+    int retval;
+    va_list valist;
+
+    va_start(valist, locale);
+    retval = _vcprintf_l(format, locale, valist);
+    va_end(valist);
+
+    return retval;
+}
+#endif
+
 /*********************************************************************
  *		_cprintf (MSVCRT.@)
  */
diff --git a/dlls/msvcrt/msvcrt.spec b/dlls/msvcrt/msvcrt.spec
index fae66edf6a4..6891c5e84ed 100644
--- a/dlls/msvcrt/msvcrt.spec
+++ b/dlls/msvcrt/msvcrt.spec
@@ -370,7 +370,7 @@
 @ cdecl _copysign(double double) copysign
 @ cdecl -arch=!i386 _copysignf(float float) copysignf
 @ varargs _cprintf(str)
-# stub _cprintf_l(str ptr)
+@ varargs _cprintf_l(str ptr)
 # stub _cprintf_p(str)
 # stub _cprintf_p_l(str ptr)
 # stub _cprintf_s(str)
-- 
GitLab


From 37ecbf6d97f1bd528019d83c89401d9cd9f6897c Mon Sep 17 00:00:00 2001
From: Bartosz Kosiorek <gang65@poczta.onet.pl>
Date: Mon, 30 Oct 2023 20:26:47 +0100
Subject: [PATCH 5/6] msvcrt: Add _cwprintf_l implementation.

---
 dlls/msvcr100/msvcr100.spec |  2 +-
 dlls/msvcr110/msvcr110.spec |  2 +-
 dlls/msvcr120/msvcr120.spec |  2 +-
 dlls/msvcr80/msvcr80.spec   |  2 +-
 dlls/msvcr90/msvcr90.spec   |  2 +-
 dlls/msvcrt/console.c       | 17 +++++++++++++++++
 dlls/msvcrt/msvcrt.spec     |  2 +-
 7 files changed, 23 insertions(+), 6 deletions(-)

diff --git a/dlls/msvcr100/msvcr100.spec b/dlls/msvcr100/msvcr100.spec
index b0a4cffc9d6..f33973f856d 100644
--- a/dlls/msvcr100/msvcr100.spec
+++ b/dlls/msvcr100/msvcr100.spec
@@ -757,7 +757,7 @@
 @ cdecl _ctime64_s(str long ptr)
 @ cdecl _cwait(ptr long long)
 @ varargs _cwprintf(wstr)
-@ stub _cwprintf_l
+@ varargs _cwprintf_l(wstr ptr)
 @ stub _cwprintf_p
 @ stub _cwprintf_p_l
 @ stub _cwprintf_s
diff --git a/dlls/msvcr110/msvcr110.spec b/dlls/msvcr110/msvcr110.spec
index 660986a92f7..418387e1d29 100644
--- a/dlls/msvcr110/msvcr110.spec
+++ b/dlls/msvcr110/msvcr110.spec
@@ -1105,7 +1105,7 @@
 @ cdecl _ctime64_s(str long ptr)
 @ cdecl _cwait(ptr long long)
 @ varargs _cwprintf(wstr)
-@ stub _cwprintf_l
+@ varargs _cwprintf_l(wstr ptr)
 @ stub _cwprintf_p
 @ stub _cwprintf_p_l
 @ stub _cwprintf_s
diff --git a/dlls/msvcr120/msvcr120.spec b/dlls/msvcr120/msvcr120.spec
index 16bc8495882..786f4b18caf 100644
--- a/dlls/msvcr120/msvcr120.spec
+++ b/dlls/msvcr120/msvcr120.spec
@@ -1097,7 +1097,7 @@
 @ cdecl _ctime64_s(str long ptr)
 @ cdecl _cwait(ptr long long)
 @ varargs _cwprintf(wstr)
-@ stub _cwprintf_l
+@ varargs _cwprintf_l(wstr ptr)
 @ stub _cwprintf_p
 @ stub _cwprintf_p_l
 @ stub _cwprintf_s
diff --git a/dlls/msvcr80/msvcr80.spec b/dlls/msvcr80/msvcr80.spec
index 9035a39c1e7..cbd720580ac 100644
--- a/dlls/msvcr80/msvcr80.spec
+++ b/dlls/msvcr80/msvcr80.spec
@@ -421,7 +421,7 @@
 @ cdecl _ctime64_s(str long ptr)
 @ cdecl _cwait(ptr long long)
 @ varargs _cwprintf(wstr)
-@ stub _cwprintf_l
+@ varargs _cwprintf_l(wstr ptr)
 @ stub _cwprintf_p
 @ stub _cwprintf_p_l
 @ stub _cwprintf_s
diff --git a/dlls/msvcr90/msvcr90.spec b/dlls/msvcr90/msvcr90.spec
index fdf5e56b5f0..6bdbe9ee0e9 100644
--- a/dlls/msvcr90/msvcr90.spec
+++ b/dlls/msvcr90/msvcr90.spec
@@ -404,7 +404,7 @@
 @ cdecl _ctime64_s(str long ptr)
 @ cdecl _cwait(ptr long long)
 @ varargs _cwprintf(wstr)
-@ stub _cwprintf_l
+@ varargs _cwprintf_l(wstr ptr)
 @ stub _cwprintf_p
 @ stub _cwprintf_p_l
 @ stub _cwprintf_s
diff --git a/dlls/msvcrt/console.c b/dlls/msvcrt/console.c
index 99cf35872aa..6fedb8f434f 100644
--- a/dlls/msvcrt/console.c
+++ b/dlls/msvcrt/console.c
@@ -572,6 +572,7 @@ int WINAPIV _cprintf(const char* format, ...)
   return retval;
 }
 
+#if _MSVCR_VER<=120
 /*********************************************************************
  *		_vcwprintf_l (MSVCRT.@)
  */
@@ -588,6 +589,21 @@ int CDECL _vcwprintf(const wchar_t* format, va_list valist)
     return pf_printf_w(puts_clbk_console_w, NULL, format, NULL, 0, arg_clbk_valist, NULL, &valist);
 }
 
+/*********************************************************************
+ *		_cwprintf_l (MSVCRT.@)
+ */
+int WINAPIV _cwprintf_l(const wchar_t* format, _locale_t locale, ...)
+{
+    int retval;
+    va_list valist;
+
+    va_start(valist, locale);
+    retval = _vcwprintf_l(format, locale, valist);
+    va_end(valist);
+
+    return retval;
+}
+
 /*********************************************************************
  *		_cwprintf (MSVCRT.@)
  */
@@ -602,6 +618,7 @@ int WINAPIV _cwprintf(const wchar_t* format, ...)
 
   return retval;
 }
+#endif
 
 #if _MSVCR_VER>=140
 
diff --git a/dlls/msvcrt/msvcrt.spec b/dlls/msvcrt/msvcrt.spec
index 6891c5e84ed..a77ed171fb1 100644
--- a/dlls/msvcrt/msvcrt.spec
+++ b/dlls/msvcrt/msvcrt.spec
@@ -393,7 +393,7 @@
 @ extern _ctype MSVCRT__ctype
 @ cdecl _cwait(ptr long long)
 @ varargs _cwprintf(wstr)
-# stub _cwprintf_l(wstr ptr)
+@ varargs _cwprintf_l(wstr ptr)
 # stub _cwprintf_p(wstr)
 # stub _cwprintf_p_l(wstr ptr)
 # stub _cwprintf_s(wstr)
-- 
GitLab


From 557a760e7fbba2212ee2e38f4332564a97444dad Mon Sep 17 00:00:00 2001
From: Bartosz Kosiorek <gang65@poczta.onet.pl>
Date: Mon, 30 Oct 2023 20:29:51 +0100
Subject: [PATCH 6/6] msvcrt: Add _mbsnbcat_l implementation.

---
 dlls/msvcr100/msvcr100.spec |  2 +-
 dlls/msvcr110/msvcr110.spec |  2 +-
 dlls/msvcr120/msvcr120.spec |  2 +-
 dlls/msvcr80/msvcr80.spec   |  2 +-
 dlls/msvcr90/msvcr90.spec   |  2 +-
 dlls/msvcrt/mbcs.c          | 52 +++++++++++++++++++++++++++----------
 dlls/msvcrt/msvcrt.spec     |  2 +-
 dlls/ucrtbase/ucrtbase.spec |  4 +--
 8 files changed, 46 insertions(+), 22 deletions(-)

diff --git a/dlls/msvcr100/msvcr100.spec b/dlls/msvcr100/msvcr100.spec
index f33973f856d..9659cd1f3a2 100644
--- a/dlls/msvcr100/msvcr100.spec
+++ b/dlls/msvcr100/msvcr100.spec
@@ -1124,7 +1124,7 @@
 @ cdecl _mbslwr_s(str long)
 @ cdecl _mbslwr_s_l(str long ptr)
 @ cdecl _mbsnbcat(str str long)
-@ stub _mbsnbcat_l
+@ cdecl _mbsnbcat_l(str str long ptr)
 @ cdecl _mbsnbcat_s(str long ptr long)
 @ stub _mbsnbcat_s_l
 @ cdecl _mbsnbcmp(str str long)
diff --git a/dlls/msvcr110/msvcr110.spec b/dlls/msvcr110/msvcr110.spec
index 418387e1d29..4bab0eddc99 100644
--- a/dlls/msvcr110/msvcr110.spec
+++ b/dlls/msvcr110/msvcr110.spec
@@ -1481,7 +1481,7 @@
 @ cdecl _mbslwr_s(str long)
 @ cdecl _mbslwr_s_l(str long ptr)
 @ cdecl _mbsnbcat(str str long)
-@ stub _mbsnbcat_l
+@ cdecl _mbsnbcat_l(str str long ptr)
 @ cdecl _mbsnbcat_s(str long ptr long)
 @ stub _mbsnbcat_s_l
 @ cdecl _mbsnbcmp(str str long)
diff --git a/dlls/msvcr120/msvcr120.spec b/dlls/msvcr120/msvcr120.spec
index 786f4b18caf..e0d87f7f7f1 100644
--- a/dlls/msvcr120/msvcr120.spec
+++ b/dlls/msvcr120/msvcr120.spec
@@ -1492,7 +1492,7 @@
 @ cdecl _mbslwr_s(str long)
 @ cdecl _mbslwr_s_l(str long ptr)
 @ cdecl _mbsnbcat(str str long)
-@ stub _mbsnbcat_l
+@ cdecl _mbsnbcat_l(str str long ptr)
 @ cdecl _mbsnbcat_s(str long ptr long)
 @ stub _mbsnbcat_s_l
 @ cdecl _mbsnbcmp(str str long)
diff --git a/dlls/msvcr80/msvcr80.spec b/dlls/msvcr80/msvcr80.spec
index cbd720580ac..5cc72177a33 100644
--- a/dlls/msvcr80/msvcr80.spec
+++ b/dlls/msvcr80/msvcr80.spec
@@ -796,7 +796,7 @@
 @ cdecl _mbslwr_s(str long)
 @ cdecl _mbslwr_s_l(str long ptr)
 @ cdecl _mbsnbcat(str str long)
-@ stub _mbsnbcat_l
+@ cdecl _mbsnbcat_l(str str long ptr)
 @ cdecl _mbsnbcat_s(str long ptr long)
 @ stub _mbsnbcat_s_l
 @ cdecl _mbsnbcmp(str str long)
diff --git a/dlls/msvcr90/msvcr90.spec b/dlls/msvcr90/msvcr90.spec
index 6bdbe9ee0e9..556ba1fa1a7 100644
--- a/dlls/msvcr90/msvcr90.spec
+++ b/dlls/msvcr90/msvcr90.spec
@@ -774,7 +774,7 @@
 @ cdecl _mbslwr_s(str long)
 @ cdecl _mbslwr_s_l(str long ptr)
 @ cdecl _mbsnbcat(str str long)
-@ stub _mbsnbcat_l
+@ cdecl _mbsnbcat_l(str str long ptr)
 @ cdecl _mbsnbcat_s(str long ptr long)
 @ stub _mbsnbcat_s_l
 @ cdecl _mbsnbcmp(str str long)
diff --git a/dlls/msvcrt/mbcs.c b/dlls/msvcrt/mbcs.c
index 06f84d1db4a..23d0bbbaeb8 100644
--- a/dlls/msvcrt/mbcs.c
+++ b/dlls/msvcrt/mbcs.c
@@ -2187,24 +2187,40 @@ size_t CDECL _mbsnbcnt(const unsigned char* str, size_t len)
 }
 
 /*********************************************************************
- *		_mbsnbcat(MSVCRT.@)
+ *		_mbsnbcat_l(MSVCRT.@)
  */
-unsigned char* CDECL _mbsnbcat(unsigned char* dst, const unsigned char* src, size_t len)
+unsigned char* CDECL _mbsnbcat_l(unsigned char *dst, const unsigned char *src, size_t len, _locale_t locale)
 {
-    if(get_mbcinfo()->ismbcodepage)
+    pthreadmbcinfo mbcinfo;
+
+    if (!MSVCRT_CHECK_PMT(dst && src))
+        return NULL;
+
+    if (locale)
+        mbcinfo = locale->mbcinfo;
+    else
+        mbcinfo = get_mbcinfo();
+
+    if (mbcinfo->ismbcodepage)
     {
         unsigned char *res = dst;
-        while (*dst) {
-	    if (_ismbblead(*dst++)) {
-		if (*dst) {
-		    dst++;
-		} else {
-		    /* as per msdn overwrite the lead byte in front of '\0' */
-		    dst--;
-		    break;
-		}
-	    }
-	}
+
+        while (*dst)
+        {
+            if (_ismbblead_l(*dst++, locale))
+            {
+                if (*dst)
+                {
+                    dst++;
+                }
+                else
+                {
+                    /* as per msdn overwrite the lead byte in front of '\0' */
+                    dst--;
+                    break;
+                }
+            }
+        }
         while (*src && len--) *dst++ = *src++;
         *dst = '\0';
         return res;
@@ -2212,6 +2228,14 @@ unsigned char* CDECL _mbsnbcat(unsigned char* dst, const unsigned char* src, siz
     return u_strncat(dst, src, len); /* ASCII CP */
 }
 
+/*********************************************************************
+ *		_mbsnbcat(MSVCRT.@)
+ */
+unsigned char* CDECL _mbsnbcat(unsigned char *dst, const unsigned char *src, size_t len)
+{
+    return _mbsnbcat_l(dst, src, len, NULL);
+}
+
 int CDECL _mbsnbcat_s(unsigned char *dst, size_t size, const unsigned char *src, size_t len)
 {
     unsigned char *ptr = dst;
diff --git a/dlls/msvcrt/msvcrt.spec b/dlls/msvcrt/msvcrt.spec
index a77ed171fb1..e5e938959b8 100644
--- a/dlls/msvcrt/msvcrt.spec
+++ b/dlls/msvcrt/msvcrt.spec
@@ -745,7 +745,7 @@
 @ cdecl _mbslwr_s(str long)
 @ cdecl _mbslwr_s_l(str long ptr)
 @ cdecl _mbsnbcat(str str long)
-# stub _mbsnbcat_l(str str long ptr)
+@ cdecl _mbsnbcat_l(str str long ptr)
 @ cdecl _mbsnbcat_s(str long ptr long)
 # stub _mbsnbcat_s_l(str long ptr long ptr)
 @ cdecl _mbsnbcmp(str str long)
diff --git a/dlls/ucrtbase/ucrtbase.spec b/dlls/ucrtbase/ucrtbase.spec
index 5b4c2beb491..4f54e1641fc 100644
--- a/dlls/ucrtbase/ucrtbase.spec
+++ b/dlls/ucrtbase/ucrtbase.spec
@@ -640,7 +640,7 @@
 @ cdecl _mbslwr_s(str long)
 @ cdecl _mbslwr_s_l(str long ptr)
 @ cdecl _mbsnbcat(str str long)
-@ stub _mbsnbcat_l
+@ cdecl _mbsnbcat_l(str str long ptr)
 @ cdecl _mbsnbcat_s(str long ptr long)
 @ stub _mbsnbcat_s_l
 @ cdecl _mbsnbcmp(str str long)
@@ -1209,7 +1209,7 @@
 @ cdecl _o__mbslwr_s(str long) _mbslwr_s
 @ cdecl _o__mbslwr_s_l(str long ptr) _mbslwr_s_l
 @ cdecl _o__mbsnbcat(str str long) _mbsnbcat
-@ stub _o__mbsnbcat_l
+@ cdecl _o__mbsnbcat_l(str str long ptr) _mbsnbcat_l
 @ cdecl _o__mbsnbcat_s(str long ptr long) _mbsnbcat_s
 @ stub _o__mbsnbcat_s_l
 @ cdecl _o__mbsnbcmp(str str long) _mbsnbcmp
-- 
GitLab

From 8e56d0feb5f08fef1df8810a79d4da0a63373974 Mon Sep 17 00:00:00 2001
From: Fabian Maurer <dark.shadow4@web.de>
Date: Thu, 2 Nov 2023 02:43:31 +0100
Subject: [PATCH] msvcrt: Fsetpos resets EOF flag.

Wine-Bug: https://bugs.winehq.org/show_bug.cgi?id=55856
---
 dlls/msvcrt/file.c       | 14 +------------
 dlls/msvcrt/tests/file.c | 45 +++++++++++++++++++++++++++++++++++++++-
 2 files changed, 45 insertions(+), 14 deletions(-)

diff --git a/dlls/msvcrt/file.c b/dlls/msvcrt/file.c
index 7cccf96b1c7..3c1d9572585 100644
--- a/dlls/msvcrt/file.c
+++ b/dlls/msvcrt/file.c
@@ -4682,19 +4682,7 @@ errno_t CDECL freopen_s(FILE** pFile,
  */
 int CDECL fsetpos(FILE* file, fpos_t *pos)
 {
-  int ret;
-
-  _lock_file(file);
-  msvcrt_flush_buffer(file);
-
-  /* Reset direction of i/o */
-  if(file->_flag & _IORW) {
-        file->_flag &= ~(_IOREAD|_IOWRT);
-  }
-
-  ret = (_lseeki64(file->_file,*pos,SEEK_SET) == -1) ? -1 : 0;
-  _unlock_file(file);
-  return ret;
+    return _fseeki64(file,*pos,SEEK_SET);
 }
 
 /*********************************************************************
diff --git a/dlls/msvcrt/tests/file.c b/dlls/msvcrt/tests/file.c
index 71b3e1399f8..75d30648230 100644
--- a/dlls/msvcrt/tests/file.c
+++ b/dlls/msvcrt/tests/file.c
@@ -226,7 +226,50 @@ static void test_fileops( void )
     ok(fread(buffer, sizeof(buffer), 1, file) == 0, "fread test failed\n");
     /* feof should be set now */
     ok(feof(file), "feof after fread failed\n");
-    fclose (file);
+    clearerr(file);
+    ok(!feof(file), "feof after clearerr failed\n");
+    fclose(file);
+
+    file = fopen("fdopen.tst", "rb");
+    ok( file != NULL, "fopen failed\n");
+    /* sizeof(buffer) > content of file */
+    ok(fread(buffer, sizeof(buffer), 1, file) == 0, "fread test failed\n");
+    /* feof should be set now */
+    ok(feof(file), "feof after fread failed\n");
+    rewind(file);
+    ok(!feof(file), "feof after rewind failed\n");
+    fclose(file);
+
+    file = fopen("fdopen.tst", "rb");
+    ok( file != NULL, "fopen failed\n");
+    /* sizeof(buffer) > content of file */
+    ok(fread(buffer, sizeof(buffer), 1, file) == 0, "fread test failed\n");
+    /* feof should be set now */
+    ok(feof(file), "feof after fread failed\n");
+    fseek(file, 0, SEEK_SET);
+    ok(!feof(file), "feof after fseek failed\n");
+    fclose(file);
+
+    file = fopen("fdopen.tst", "rb");
+    ok( file != NULL, "fopen failed\n");
+    /* sizeof(buffer) > content of file */
+    ok(fread(buffer, sizeof(buffer), 1, file) == 0, "fread test failed\n");
+    /* feof should be set now */
+    ok(feof(file), "feof after fread failed\n");
+    fgetpos(file, &pos);
+    fsetpos(file, &pos);
+    ok(!feof(file), "feof after fsetpos failed\n");
+    fclose(file);
+
+    file = fopen("fdopen.tst", "rb");
+    ok( file != NULL, "fopen failed\n");
+    /* sizeof(buffer) > content of file */
+    ok(fread(buffer, sizeof(buffer), 1, file) == 0, "fread test failed\n");
+    /* feof should be set now */
+    ok(feof(file), "feof after fread failed\n");
+    fsetpos(file, &pos);
+    ok(!feof(file), "feof after fsetpos failed\n");
+    fclose(file);
 
     unlink ("fdopen.tst");
 }
-- 
GitLab

From c59a856cc03e4e03fe734282da34652d7e1a4c56 Mon Sep 17 00:00:00 2001
From: Bartosz Kosiorek <gang65@poczta.onet.pl>
Date: Thu, 2 Nov 2023 18:35:20 +0100
Subject: [PATCH 1/8] msvcrt: Add _mbsbtype_l implementation.

---
 dlls/msvcr100/msvcr100.spec |  2 +-
 dlls/msvcr110/msvcr110.spec |  2 +-
 dlls/msvcr120/msvcr120.spec |  2 +-
 dlls/msvcr80/msvcr80.spec   |  2 +-
 dlls/msvcr90/msvcr90.spec   |  2 +-
 dlls/msvcrt/mbcs.c          | 65 ++++++++++++++++++++++++-------------
 dlls/msvcrt/msvcrt.spec     |  2 +-
 dlls/msvcrt/tests/string.c  |  1 +
 dlls/ucrtbase/ucrtbase.spec |  4 +--
 9 files changed, 52 insertions(+), 30 deletions(-)

diff --git a/dlls/msvcr100/msvcr100.spec b/dlls/msvcr100/msvcr100.spec
index 9659cd1f3a2..5996051d5ed 100644
--- a/dlls/msvcr100/msvcr100.spec
+++ b/dlls/msvcr100/msvcr100.spec
@@ -1096,7 +1096,7 @@
 @ extern _mbctype MSVCRT_mbctype
 @ stub _mblen_l
 @ cdecl _mbsbtype(str long)
-@ stub _mbsbtype_l
+@ cdecl _mbsbtype_l(str long ptr)
 @ cdecl _mbscat_s(ptr long str)
 @ cdecl _mbscat_s_l(ptr long str ptr)
 @ cdecl _mbschr(str long)
diff --git a/dlls/msvcr110/msvcr110.spec b/dlls/msvcr110/msvcr110.spec
index 4bab0eddc99..1dacd170343 100644
--- a/dlls/msvcr110/msvcr110.spec
+++ b/dlls/msvcr110/msvcr110.spec
@@ -1453,7 +1453,7 @@
 @ extern _mbctype MSVCRT_mbctype
 @ stub _mblen_l
 @ cdecl _mbsbtype(str long)
-@ stub _mbsbtype_l
+@ cdecl _mbsbtype_l(str long ptr)
 @ cdecl _mbscat_s(ptr long str)
 @ cdecl _mbscat_s_l(ptr long str ptr)
 @ cdecl _mbschr(str long)
diff --git a/dlls/msvcr120/msvcr120.spec b/dlls/msvcr120/msvcr120.spec
index e0d87f7f7f1..b0e7c83101c 100644
--- a/dlls/msvcr120/msvcr120.spec
+++ b/dlls/msvcr120/msvcr120.spec
@@ -1464,7 +1464,7 @@
 @ extern _mbctype MSVCRT_mbctype
 @ stub _mblen_l
 @ cdecl _mbsbtype(str long)
-@ stub _mbsbtype_l
+@ cdecl _mbsbtype_l(str long ptr)
 @ cdecl _mbscat_s(ptr long str)
 @ cdecl _mbscat_s_l(ptr long str ptr)
 @ cdecl _mbschr(str long)
diff --git a/dlls/msvcr80/msvcr80.spec b/dlls/msvcr80/msvcr80.spec
index 5cc72177a33..68660cd6e87 100644
--- a/dlls/msvcr80/msvcr80.spec
+++ b/dlls/msvcr80/msvcr80.spec
@@ -768,7 +768,7 @@
 @ extern _mbctype MSVCRT_mbctype
 @ stub _mblen_l
 @ cdecl _mbsbtype(str long)
-@ stub _mbsbtype_l
+@ cdecl _mbsbtype_l(str long ptr)
 @ cdecl _mbscat_s(ptr long str)
 @ cdecl _mbscat_s_l(ptr long str ptr)
 @ cdecl _mbschr(str long)
diff --git a/dlls/msvcr90/msvcr90.spec b/dlls/msvcr90/msvcr90.spec
index 556ba1fa1a7..5f38afdbdfc 100644
--- a/dlls/msvcr90/msvcr90.spec
+++ b/dlls/msvcr90/msvcr90.spec
@@ -746,7 +746,7 @@
 @ extern _mbctype MSVCRT_mbctype
 @ stub _mblen_l
 @ cdecl _mbsbtype(str long)
-@ stub _mbsbtype_l
+@ cdecl _mbsbtype_l(str long ptr)
 @ cdecl _mbscat_s(ptr long str)
 @ cdecl _mbscat_s_l(ptr long str ptr)
 @ cdecl _mbschr(str long)
diff --git a/dlls/msvcrt/mbcs.c b/dlls/msvcrt/mbcs.c
index 23d0bbbaeb8..abb5f574ba1 100644
--- a/dlls/msvcrt/mbcs.c
+++ b/dlls/msvcrt/mbcs.c
@@ -2028,34 +2028,55 @@ int CDECL _mbbtype(unsigned char c, int type)
 }
 
 /*********************************************************************
- *		_mbsbtype (MSVCRT.@)
+ *		_mbsbtype_l (MSVCRT.@)
  */
-int CDECL _mbsbtype(const unsigned char *str, size_t count)
+int CDECL _mbsbtype_l(const unsigned char *str, size_t count, _locale_t locale)
 {
-  int lead = 0;
-  const unsigned char *end = str + count;
+    int lead = 0;
+    pthreadmbcinfo mbcinfo;
+    const unsigned char *end = str + count;
 
-  /* Lead bytes can also be trail bytes so we need to analyse the string.
-   * Also we must return _MBC_ILLEGAL for chars past the end of the string
-   */
-  while (str < end) /* Note: we skip the last byte - will check after the loop */
-  {
-    if (!*str)
-      return _MBC_ILLEGAL;
-    lead = get_mbcinfo()->ismbcodepage && !lead && _ismbblead(*str);
-    str++;
-  }
+    if (!MSVCRT_CHECK_PMT(str))
+        return _MBC_ILLEGAL;
 
-  if (lead)
-    if (_ismbbtrail(*str))
-      return _MBC_TRAIL;
+    if (locale)
+        mbcinfo = locale->mbcinfo;
     else
-      return _MBC_ILLEGAL;
-  else
-    if (_ismbblead(*str))
-      return _MBC_LEAD;
+        mbcinfo = get_mbcinfo();
+
+    /* Lead bytes can also be trail bytes so we need to analyse the string.
+    * Also we must return _MBC_ILLEGAL for chars past the end of the string
+    */
+    while (str < end) /* Note: we skip the last byte - will check after the loop */
+    {
+        if (!*str)
+            return _MBC_ILLEGAL;
+        lead = mbcinfo->ismbcodepage && !lead && _ismbblead_l(*str, locale);
+        str++;
+    }
+
+    if (lead)
+    {
+        if (_ismbbtrail_l(*str, locale))
+            return _MBC_TRAIL;
+        else
+            return _MBC_ILLEGAL;
+    }
     else
-      return _MBC_SINGLE;
+    {
+        if (_ismbblead_l(*str, locale))
+            return _MBC_LEAD;
+        else
+            return _MBC_SINGLE;
+    }
+}
+
+/*********************************************************************
+ *		_mbsbtype (MSVCRT.@)
+ */
+int CDECL _mbsbtype(const unsigned char *str, size_t count)
+{
+    return _mbsbtype_l(str, count, NULL);
 }
 
 /*********************************************************************
diff --git a/dlls/msvcrt/msvcrt.spec b/dlls/msvcrt/msvcrt.spec
index e5e938959b8..7d7c81f72dd 100644
--- a/dlls/msvcrt/msvcrt.spec
+++ b/dlls/msvcrt/msvcrt.spec
@@ -713,7 +713,7 @@
 @ extern _mbctype MSVCRT_mbctype
 # stub _mblen_l(str long ptr)
 @ cdecl _mbsbtype(str long)
-# stub _mbsbtype_l(str long ptr)
+@ cdecl _mbsbtype_l(str long ptr)
 @ cdecl _mbscat(str str)
 @ cdecl _mbscat_s(ptr long str)
 @ cdecl _mbscat_s_l(ptr long str ptr)
diff --git a/dlls/msvcrt/tests/string.c b/dlls/msvcrt/tests/string.c
index cdc19736832..2e95653c475 100644
--- a/dlls/msvcrt/tests/string.c
+++ b/dlls/msvcrt/tests/string.c
@@ -335,6 +335,7 @@ static void test_mbcp(void)
     expect_eq(_ismbstrail(mbsonlylead, &mbsonlylead[5]), FALSE, int, "%d");
 
     /* _mbsbtype */
+    expect_eq(_mbsbtype(NULL, 0), _MBC_ILLEGAL, int, "%d");
     expect_eq(_mbsbtype(mbstring, 0), _MBC_LEAD, int, "%d");
     expect_eq(_mbsbtype(mbstring, 1), _MBC_TRAIL, int, "%d");
     expect_eq(_mbsbtype(mbstring, 2), _MBC_LEAD, int, "%d");
diff --git a/dlls/ucrtbase/ucrtbase.spec b/dlls/ucrtbase/ucrtbase.spec
index 33c66e2f0b3..995237dcc5c 100644
--- a/dlls/ucrtbase/ucrtbase.spec
+++ b/dlls/ucrtbase/ucrtbase.spec
@@ -611,7 +611,7 @@
 @ cdecl _mbctoupper_l(long ptr)
 @ stub _mblen_l
 @ cdecl _mbsbtype(str long)
-@ stub _mbsbtype_l
+@ cdecl _mbsbtype_l(str long ptr)
 @ cdecl _mbscat_s(ptr long str)
 @ cdecl _mbscat_s_l(ptr long str ptr)
 @ cdecl _mbschr(str long)
@@ -1181,7 +1181,7 @@
 @ cdecl _o__mbctoupper_l(long ptr) _mbctoupper_l
 @ stub _o__mblen_l
 @ cdecl _o__mbsbtype(str long) _mbsbtype
-@ stub _o__mbsbtype_l
+@ cdecl _o__mbsbtype_l(str long ptr) _mbsbtype_l
 @ cdecl _o__mbscat_s(ptr long str) _mbscat_s
 @ cdecl _o__mbscat_s_l(ptr long str ptr) _mbscat_s_l
 @ cdecl _o__mbschr(str long) _mbschr
-- 
GitLab


From 2b7dcfb44d6bd889ff1cc362efa0f6226dd54649 Mon Sep 17 00:00:00 2001
From: Bartosz Kosiorek <gang65@poczta.onet.pl>
Date: Thu, 2 Nov 2023 18:35:22 +0100
Subject: [PATCH 2/8] msvcrt: Fix _mbslwr_s_l implementation.

---
 dlls/msvcrt/mbcs.c | 8 +++++++-
 1 file changed, 7 insertions(+), 1 deletion(-)

diff --git a/dlls/msvcrt/mbcs.c b/dlls/msvcrt/mbcs.c
index abb5f574ba1..8cf7b3f8ec3 100644
--- a/dlls/msvcrt/mbcs.c
+++ b/dlls/msvcrt/mbcs.c
@@ -2386,13 +2386,19 @@ unsigned char* CDECL _mbslwr(unsigned char *s)
 int CDECL _mbslwr_s_l(unsigned char* s, size_t len, _locale_t locale)
 {
   unsigned char *p = s;
+  pthreadmbcinfo mbcinfo;
 
   if (!s && !len)
     return 0;
   if (!MSVCRT_CHECK_PMT(s && len))
     return EINVAL;
 
-  if (get_mbcinfo()->ismbcodepage)
+  if (locale)
+    mbcinfo = locale->mbcinfo;
+  else
+    mbcinfo = get_mbcinfo();
+
+  if (mbcinfo->ismbcodepage)
   {
     unsigned int c;
     for ( ; *s && len > 0; len--)
-- 
GitLab


From 5556eba0e3cd0d20189892a2d7431fd85abfe553 Mon Sep 17 00:00:00 2001
From: Bartosz Kosiorek <gang65@poczta.onet.pl>
Date: Thu, 2 Nov 2023 18:35:25 +0100
Subject: [PATCH 3/8] msvcrt: Add _mbsupr_l implementation.

---
 dlls/msvcr100/msvcr100.spec |  2 +-
 dlls/msvcr110/msvcr110.spec |  2 +-
 dlls/msvcr120/msvcr120.spec |  2 +-
 dlls/msvcr80/msvcr80.spec   |  2 +-
 dlls/msvcr90/msvcr90.spec   |  2 +-
 dlls/msvcrt/mbcs.c          | 57 ++++++++++++++++++++++++-------------
 dlls/msvcrt/msvcrt.spec     |  2 +-
 dlls/ucrtbase/ucrtbase.spec |  4 +--
 8 files changed, 45 insertions(+), 28 deletions(-)

diff --git a/dlls/msvcr100/msvcr100.spec b/dlls/msvcr100/msvcr100.spec
index 5996051d5ed..97f179bc977 100644
--- a/dlls/msvcr100/msvcr100.spec
+++ b/dlls/msvcr100/msvcr100.spec
@@ -1200,7 +1200,7 @@
 @ stub _mbstrnlen
 @ stub _mbstrnlen_l
 @ cdecl _mbsupr(str)
-@ stub _mbsupr_l
+@ cdecl _mbsupr_l(str ptr)
 @ cdecl _mbsupr_s(str long)
 @ cdecl _mbsupr_s_l(str long ptr)
 @ cdecl _mbtowc_l(ptr str long ptr)
diff --git a/dlls/msvcr110/msvcr110.spec b/dlls/msvcr110/msvcr110.spec
index 1dacd170343..10b922c4a68 100644
--- a/dlls/msvcr110/msvcr110.spec
+++ b/dlls/msvcr110/msvcr110.spec
@@ -1557,7 +1557,7 @@
 @ stub _mbstrnlen
 @ stub _mbstrnlen_l
 @ cdecl _mbsupr(str)
-@ stub _mbsupr_l
+@ cdecl _mbsupr_l(str ptr)
 @ cdecl _mbsupr_s(str long)
 @ cdecl _mbsupr_s_l(str long ptr)
 @ cdecl _mbtowc_l(ptr str long ptr)
diff --git a/dlls/msvcr120/msvcr120.spec b/dlls/msvcr120/msvcr120.spec
index b0e7c83101c..15b25cbd094 100644
--- a/dlls/msvcr120/msvcr120.spec
+++ b/dlls/msvcr120/msvcr120.spec
@@ -1568,7 +1568,7 @@
 @ stub _mbstrnlen
 @ stub _mbstrnlen_l
 @ cdecl _mbsupr(str)
-@ stub _mbsupr_l
+@ cdecl _mbsupr_l(str ptr)
 @ cdecl _mbsupr_s(str long)
 @ cdecl _mbsupr_s_l(str long ptr)
 @ cdecl _mbtowc_l(ptr str long ptr)
diff --git a/dlls/msvcr80/msvcr80.spec b/dlls/msvcr80/msvcr80.spec
index 68660cd6e87..43c59ab7cfc 100644
--- a/dlls/msvcr80/msvcr80.spec
+++ b/dlls/msvcr80/msvcr80.spec
@@ -872,7 +872,7 @@
 @ stub _mbstrnlen
 @ stub _mbstrnlen_l
 @ cdecl _mbsupr(str)
-@ stub _mbsupr_l
+@ cdecl _mbsupr_l(str ptr)
 @ cdecl _mbsupr_s(str long)
 @ cdecl _mbsupr_s_l(str long ptr)
 @ cdecl _mbtowc_l(ptr str long ptr)
diff --git a/dlls/msvcr90/msvcr90.spec b/dlls/msvcr90/msvcr90.spec
index 5f38afdbdfc..d590ffda47f 100644
--- a/dlls/msvcr90/msvcr90.spec
+++ b/dlls/msvcr90/msvcr90.spec
@@ -850,7 +850,7 @@
 @ stub _mbstrnlen
 @ stub _mbstrnlen_l
 @ cdecl _mbsupr(str)
-@ stub _mbsupr_l
+@ cdecl _mbsupr_l(str ptr)
 @ cdecl _mbsupr_s(str long)
 @ cdecl _mbsupr_s_l(str long ptr)
 @ cdecl _mbtowc_l(ptr str long ptr)
diff --git a/dlls/msvcrt/mbcs.c b/dlls/msvcrt/mbcs.c
index 8cf7b3f8ec3..8c9d30c42fa 100644
--- a/dlls/msvcrt/mbcs.c
+++ b/dlls/msvcrt/mbcs.c
@@ -2437,30 +2437,47 @@ int CDECL _mbslwr_s(unsigned char* str, size_t len)
 }
 
 /*********************************************************************
- *              _mbsupr(MSVCRT.@)
+ *              _mbsupr_l(MSVCRT.@)
  */
-unsigned char* CDECL _mbsupr(unsigned char* s)
+unsigned char* CDECL _mbsupr_l(unsigned char* s, _locale_t locale)
 {
-  unsigned char *ret = s;
-  if (!s)
-    return NULL;
-  if (get_mbcinfo()->ismbcodepage)
-  {
-    unsigned int c;
-    while (*s)
+    unsigned char *ret = s;
+    pthreadmbcinfo mbcinfo;
+
+    if (!MSVCRT_CHECK_PMT(s))
+        return NULL;
+
+    if (locale)
+        mbcinfo = locale->mbcinfo;
+    else
+        mbcinfo = get_mbcinfo();
+
+    if (mbcinfo->ismbcodepage)
     {
-      c = _mbctoupper(_mbsnextc(s));
-      /* Note that I assume that the size of the character is unchanged */
-      if (c > 255)
-      {
-          *s++=(c>>8);
-          c=c & 0xff;
-      }
-      *s++=c;
+        unsigned int c;
+        while (*s)
+        {
+            c = _mbctoupper_l(_mbsnextc_l(s, locale), locale);
+            /* Note that I assume that the size of the character is unchanged */
+            if (c > 255)
+            {
+                *s++ = (c >> 8);
+                c = c & 0xff;
+            }
+            *s++ = c;
+        }
     }
-  }
-  else for ( ; *s; s++) *s = _toupper_l(*s, NULL);
-  return ret;
+    else
+        for ( ; *s; s++) *s = _toupper_l(*s, locale);
+    return ret;
+}
+
+/*********************************************************************
+ *              _mbsupr(MSVCRT.@)
+ */
+unsigned char* CDECL _mbsupr(unsigned char* s)
+{
+   return _mbsupr_l(s, NULL);
 }
 
 /*********************************************************************
diff --git a/dlls/msvcrt/msvcrt.spec b/dlls/msvcrt/msvcrt.spec
index 7d7c81f72dd..ac180d8d718 100644
--- a/dlls/msvcrt/msvcrt.spec
+++ b/dlls/msvcrt/msvcrt.spec
@@ -821,7 +821,7 @@
 # stub _mbstrnlen(str long)
 # stub _mbstrnlen_l(str long ptr)
 @ cdecl _mbsupr(str)
-# stub _mbsupr_l(str ptr)
+@ cdecl _mbsupr_l(str ptr)
 @ cdecl _mbsupr_s(str long)
 @ cdecl _mbsupr_s_l(str long ptr)
 @ cdecl _mbtowc_l(ptr str long ptr)
diff --git a/dlls/ucrtbase/ucrtbase.spec b/dlls/ucrtbase/ucrtbase.spec
index 995237dcc5c..dba8a6ed056 100644
--- a/dlls/ucrtbase/ucrtbase.spec
+++ b/dlls/ucrtbase/ucrtbase.spec
@@ -716,7 +716,7 @@
 @ stub _mbstrnlen
 @ stub _mbstrnlen_l
 @ cdecl _mbsupr(str)
-@ stub _mbsupr_l
+@ cdecl _mbsupr_l(str ptr)
 @ cdecl _mbsupr_s(str long)
 @ cdecl _mbsupr_s_l(str long ptr)
 @ cdecl _mbtowc_l(ptr str long ptr)
@@ -1285,7 +1285,7 @@
 @ stub _o__mbstrnlen
 @ stub _o__mbstrnlen_l
 @ cdecl _o__mbsupr(str) _mbsupr
-@ stub _o__mbsupr_l
+@ cdecl _o__mbsupr_l(str ptr) _mbsupr_l
 @ cdecl _o__mbsupr_s(str long) _mbsupr_s
 @ cdecl _o__mbsupr_s_l(str long ptr) _mbsupr_s_l
 @ cdecl _o__mbtowc_l(ptr str long ptr) _mbtowc_l
-- 
GitLab


From 544007be158580b84093f31d2199e7c426f04f4e Mon Sep 17 00:00:00 2001
From: Bartosz Kosiorek <gang65@poczta.onet.pl>
Date: Thu, 2 Nov 2023 19:25:47 +0100
Subject: [PATCH 4/8] msvcrt: Add _mbsnbcmp_l implementation.

---
 dlls/msvcr100/msvcr100.spec |  2 +-
 dlls/msvcr110/msvcr110.spec |  2 +-
 dlls/msvcr120/msvcr120.spec |  2 +-
 dlls/msvcr80/msvcr80.spec   |  2 +-
 dlls/msvcr90/msvcr90.spec   |  2 +-
 dlls/msvcrt/mbcs.c          | 89 ++++++++++++++++++++++---------------
 dlls/msvcrt/msvcrt.spec     |  2 +-
 dlls/ucrtbase/ucrtbase.spec |  4 +-
 8 files changed, 62 insertions(+), 43 deletions(-)

diff --git a/dlls/msvcr100/msvcr100.spec b/dlls/msvcr100/msvcr100.spec
index 97f179bc977..d7b343ca150 100644
--- a/dlls/msvcr100/msvcr100.spec
+++ b/dlls/msvcr100/msvcr100.spec
@@ -1128,7 +1128,7 @@
 @ cdecl _mbsnbcat_s(str long ptr long)
 @ stub _mbsnbcat_s_l
 @ cdecl _mbsnbcmp(str str long)
-@ stub _mbsnbcmp_l
+@ cdecl _mbsnbcmp_l(str str long ptr)
 @ cdecl _mbsnbcnt(ptr long)
 @ stub _mbsnbcnt_l
 @ cdecl _mbsnbcoll(str str long)
diff --git a/dlls/msvcr110/msvcr110.spec b/dlls/msvcr110/msvcr110.spec
index 10b922c4a68..37acb768277 100644
--- a/dlls/msvcr110/msvcr110.spec
+++ b/dlls/msvcr110/msvcr110.spec
@@ -1485,7 +1485,7 @@
 @ cdecl _mbsnbcat_s(str long ptr long)
 @ stub _mbsnbcat_s_l
 @ cdecl _mbsnbcmp(str str long)
-@ stub _mbsnbcmp_l
+@ cdecl _mbsnbcmp_l(str str long ptr)
 @ cdecl _mbsnbcnt(ptr long)
 @ stub _mbsnbcnt_l
 @ cdecl _mbsnbcoll(str str long)
diff --git a/dlls/msvcr120/msvcr120.spec b/dlls/msvcr120/msvcr120.spec
index 15b25cbd094..2799d6b2130 100644
--- a/dlls/msvcr120/msvcr120.spec
+++ b/dlls/msvcr120/msvcr120.spec
@@ -1496,7 +1496,7 @@
 @ cdecl _mbsnbcat_s(str long ptr long)
 @ stub _mbsnbcat_s_l
 @ cdecl _mbsnbcmp(str str long)
-@ stub _mbsnbcmp_l
+@ cdecl _mbsnbcmp_l(str str long ptr)
 @ cdecl _mbsnbcnt(ptr long)
 @ stub _mbsnbcnt_l
 @ cdecl _mbsnbcoll(str str long)
diff --git a/dlls/msvcr80/msvcr80.spec b/dlls/msvcr80/msvcr80.spec
index 43c59ab7cfc..88057cbb4b9 100644
--- a/dlls/msvcr80/msvcr80.spec
+++ b/dlls/msvcr80/msvcr80.spec
@@ -800,7 +800,7 @@
 @ cdecl _mbsnbcat_s(str long ptr long)
 @ stub _mbsnbcat_s_l
 @ cdecl _mbsnbcmp(str str long)
-@ stub _mbsnbcmp_l
+@ cdecl _mbsnbcmp_l(str str long ptr)
 @ cdecl _mbsnbcnt(ptr long)
 @ stub _mbsnbcnt_l
 @ cdecl _mbsnbcoll(str str long)
diff --git a/dlls/msvcr90/msvcr90.spec b/dlls/msvcr90/msvcr90.spec
index d590ffda47f..02b73e23e7a 100644
--- a/dlls/msvcr90/msvcr90.spec
+++ b/dlls/msvcr90/msvcr90.spec
@@ -778,7 +778,7 @@
 @ cdecl _mbsnbcat_s(str long ptr long)
 @ stub _mbsnbcat_s_l
 @ cdecl _mbsnbcmp(str str long)
-@ stub _mbsnbcmp_l
+@ cdecl _mbsnbcmp_l(str str long ptr)
 @ cdecl _mbsnbcnt(ptr long)
 @ stub _mbsnbcnt_l
 @ cdecl _mbsnbcoll(str str long)
diff --git a/dlls/msvcrt/mbcs.c b/dlls/msvcrt/mbcs.c
index 8c9d30c42fa..e588c05d18b 100644
--- a/dlls/msvcrt/mbcs.c
+++ b/dlls/msvcrt/mbcs.c
@@ -1213,45 +1213,64 @@ int CDECL _mbsncmp(const unsigned char* str, const unsigned char* cmp, size_t le
 }
 
 /*********************************************************************
- *              _mbsnbcmp(MSVCRT.@)
+ *              _mbsnbcmp_l(MSVCRT.@)
  */
-int CDECL _mbsnbcmp(const unsigned char* str, const unsigned char* cmp, size_t len)
+int CDECL _mbsnbcmp_l(const unsigned char* str, const unsigned char* cmp, size_t len, _locale_t locale)
 {
-  if (!len)
-    return 0;
-  if(get_mbcinfo()->ismbcodepage)
-  {
-    unsigned int strc, cmpc;
-    while (len)
+    pthreadmbcinfo mbcinfo;
+
+    if (!len)
+        return 0;
+
+    if (!MSVCRT_CHECK_PMT(str && cmp))
+        return _NLSCMPERROR;
+
+    if (locale)
+        mbcinfo = locale->mbcinfo;
+    else
+        mbcinfo = get_mbcinfo();
+
+    if (mbcinfo->ismbcodepage)
     {
-      int clen;
-      if(!*str)
-        return *cmp ? -1 : 0;
-      if(!*cmp)
-        return 1;
-      if (_ismbblead(*str))
-      {
-        strc=(len>=2)?_mbsnextc(str):0;
-        clen=2;
-      }
-      else
-      {
-        strc=*str;
-        clen=1;
-      }
-      if (_ismbblead(*cmp))
-        cmpc=(len>=2)?_mbsnextc(cmp):0;
-      else
-        cmpc=*cmp;
-      if(strc != cmpc)
-        return strc < cmpc ? -1 : 1;
-      len -= clen;
-      str += clen;
-      cmp += clen;
+        unsigned int strc, cmpc;
+        while (len)
+        {
+            int clen;
+            if (!*str)
+                return *cmp ? -1 : 0;
+            if (!*cmp)
+                return 1;
+            if (_ismbblead_l(*str, locale))
+            {
+                strc = (len >= 2) ? _mbsnextc_l(str, locale) : 0;
+                clen = 2;
+            }
+            else
+            {
+                strc = *str;
+                clen = 1;
+            }
+            if (_ismbblead_l(*cmp, locale))
+                cmpc = (len >= 2) ? _mbsnextc_l(cmp, locale) : 0;
+            else
+                cmpc = *cmp;
+            if(strc != cmpc)
+                return strc < cmpc ? -1 : 1;
+            len -= clen;
+            str += clen;
+            cmp += clen;
+        }
+        return 0; /* Matched len chars */
     }
-    return 0; /* Matched len chars */
-  }
-  return u_strncmp(str,cmp,len);
+    return u_strncmp(str, cmp, len);
+}
+
+/*********************************************************************
+ *              _mbsnbcmp(MSVCRT.@)
+ */
+int CDECL _mbsnbcmp(const unsigned char* str, const unsigned char* cmp, size_t len)
+{
+    return _mbsnbcmp_l(str, cmp, len, NULL);
 }
 
 /*********************************************************************
diff --git a/dlls/msvcrt/msvcrt.spec b/dlls/msvcrt/msvcrt.spec
index ac180d8d718..def70e6bd52 100644
--- a/dlls/msvcrt/msvcrt.spec
+++ b/dlls/msvcrt/msvcrt.spec
@@ -749,7 +749,7 @@
 @ cdecl _mbsnbcat_s(str long ptr long)
 # stub _mbsnbcat_s_l(str long ptr long ptr)
 @ cdecl _mbsnbcmp(str str long)
-# stub _mbsnbcmp_l(str str long ptr)
+@ cdecl _mbsnbcmp_l(str str long ptr)
 @ cdecl _mbsnbcnt(ptr long)
 # stub _mbsnbcnt_l(ptr long ptr)
 @ cdecl _mbsnbcoll(str str long)
diff --git a/dlls/ucrtbase/ucrtbase.spec b/dlls/ucrtbase/ucrtbase.spec
index dba8a6ed056..60d00a6e438 100644
--- a/dlls/ucrtbase/ucrtbase.spec
+++ b/dlls/ucrtbase/ucrtbase.spec
@@ -644,7 +644,7 @@
 @ cdecl _mbsnbcat_s(str long ptr long)
 @ stub _mbsnbcat_s_l
 @ cdecl _mbsnbcmp(str str long)
-@ stub _mbsnbcmp_l
+@ cdecl _mbsnbcmp_l(str str long ptr)
 @ cdecl _mbsnbcnt(ptr long)
 @ stub _mbsnbcnt_l
 @ cdecl _mbsnbcoll(str str long)
@@ -1213,7 +1213,7 @@
 @ cdecl _o__mbsnbcat_s(str long ptr long) _mbsnbcat_s
 @ stub _o__mbsnbcat_s_l
 @ cdecl _o__mbsnbcmp(str str long) _mbsnbcmp
-@ stub _o__mbsnbcmp_l
+@ cdecl _o_mbsnbcmp_l(str str long ptr) _mbsnbcmp_l
 @ cdecl _o__mbsnbcnt(ptr long) _mbsnbcnt
 @ stub _o__mbsnbcnt_l
 @ cdecl _o__mbsnbcoll(str str long) _mbsnbcoll
-- 
GitLab


From 2a89257b2a186b3904a4004efb92a82a321b537d Mon Sep 17 00:00:00 2001
From: Bartosz Kosiorek <gang65@poczta.onet.pl>
Date: Thu, 2 Nov 2023 19:34:31 +0100
Subject: [PATCH 5/8] msvcrt: Add _mbsnbcnt_l implementation.

---
 dlls/msvcr100/msvcr100.spec |  2 +-
 dlls/msvcr110/msvcr110.spec |  2 +-
 dlls/msvcr120/msvcr120.spec |  2 +-
 dlls/msvcr80/msvcr80.spec   |  2 +-
 dlls/msvcr90/msvcr90.spec   |  2 +-
 dlls/msvcrt/mbcs.c          | 46 ++++++++++++++++++++++++++-----------
 dlls/msvcrt/msvcrt.spec     |  2 +-
 dlls/ucrtbase/ucrtbase.spec |  4 ++--
 8 files changed, 41 insertions(+), 21 deletions(-)

diff --git a/dlls/msvcr100/msvcr100.spec b/dlls/msvcr100/msvcr100.spec
index d7b343ca150..75b782ea8e3 100644
--- a/dlls/msvcr100/msvcr100.spec
+++ b/dlls/msvcr100/msvcr100.spec
@@ -1130,7 +1130,7 @@
 @ cdecl _mbsnbcmp(str str long)
 @ cdecl _mbsnbcmp_l(str str long ptr)
 @ cdecl _mbsnbcnt(ptr long)
-@ stub _mbsnbcnt_l
+@ cdecl _mbsnbcnt_l(ptr long ptr)
 @ cdecl _mbsnbcoll(str str long)
 @ cdecl _mbsnbcoll_l(str str long ptr)
 @ cdecl _mbsnbcpy(ptr str long)
diff --git a/dlls/msvcr110/msvcr110.spec b/dlls/msvcr110/msvcr110.spec
index 37acb768277..80132da3c6d 100644
--- a/dlls/msvcr110/msvcr110.spec
+++ b/dlls/msvcr110/msvcr110.spec
@@ -1487,7 +1487,7 @@
 @ cdecl _mbsnbcmp(str str long)
 @ cdecl _mbsnbcmp_l(str str long ptr)
 @ cdecl _mbsnbcnt(ptr long)
-@ stub _mbsnbcnt_l
+@ cdecl _mbsnbcnt_l(ptr long ptr)
 @ cdecl _mbsnbcoll(str str long)
 @ cdecl _mbsnbcoll_l(str str long ptr)
 @ cdecl _mbsnbcpy(ptr str long)
diff --git a/dlls/msvcr120/msvcr120.spec b/dlls/msvcr120/msvcr120.spec
index 2799d6b2130..44baaaedb60 100644
--- a/dlls/msvcr120/msvcr120.spec
+++ b/dlls/msvcr120/msvcr120.spec
@@ -1498,7 +1498,7 @@
 @ cdecl _mbsnbcmp(str str long)
 @ cdecl _mbsnbcmp_l(str str long ptr)
 @ cdecl _mbsnbcnt(ptr long)
-@ stub _mbsnbcnt_l
+@ cdecl _mbsnbcnt_l(ptr long ptr)
 @ cdecl _mbsnbcoll(str str long)
 @ cdecl _mbsnbcoll_l(str str long ptr)
 @ cdecl _mbsnbcpy(ptr str long)
diff --git a/dlls/msvcr80/msvcr80.spec b/dlls/msvcr80/msvcr80.spec
index 88057cbb4b9..f0e5e709bba 100644
--- a/dlls/msvcr80/msvcr80.spec
+++ b/dlls/msvcr80/msvcr80.spec
@@ -802,7 +802,7 @@
 @ cdecl _mbsnbcmp(str str long)
 @ cdecl _mbsnbcmp_l(str str long ptr)
 @ cdecl _mbsnbcnt(ptr long)
-@ stub _mbsnbcnt_l
+@ cdecl _mbsnbcnt_l(ptr long ptr)
 @ cdecl _mbsnbcoll(str str long)
 @ cdecl _mbsnbcoll_l(str str long ptr)
 @ cdecl _mbsnbcpy(ptr str long)
diff --git a/dlls/msvcr90/msvcr90.spec b/dlls/msvcr90/msvcr90.spec
index 02b73e23e7a..cdb867d1234 100644
--- a/dlls/msvcr90/msvcr90.spec
+++ b/dlls/msvcr90/msvcr90.spec
@@ -780,7 +780,7 @@
 @ cdecl _mbsnbcmp(str str long)
 @ cdecl _mbsnbcmp_l(str str long ptr)
 @ cdecl _mbsnbcnt(ptr long)
-@ stub _mbsnbcnt_l
+@ cdecl _mbsnbcnt_l(ptr long ptr)
 @ cdecl _mbsnbcoll(str str long)
 @ cdecl _mbsnbcoll_l(str str long ptr)
 @ cdecl _mbsnbcpy(ptr str long)
diff --git a/dlls/msvcrt/mbcs.c b/dlls/msvcrt/mbcs.c
index e588c05d18b..c42badd9e8c 100644
--- a/dlls/msvcrt/mbcs.c
+++ b/dlls/msvcrt/mbcs.c
@@ -2206,24 +2206,44 @@ size_t CDECL _mbsnccnt(const unsigned char* str, size_t len)
 }
 
 /*********************************************************************
- *		_mbsnbcnt(MSVCRT.@)
+ *		_mbsnbcnt_l(MSVCRT.@)
  * 'b' is for byte count.
  */
-size_t CDECL _mbsnbcnt(const unsigned char* str, size_t len)
+size_t CDECL _mbsnbcnt_l(const unsigned char* str, size_t len, _locale_t locale)
 {
-  size_t ret;
-  if(get_mbcinfo()->ismbcodepage)
-  {
-    const unsigned char* xstr = str;
-    while(*xstr && len-- > 0)
+    size_t ret;
+    pthreadmbcinfo mbcinfo;
+
+    if (!len)
+        return 0;
+    if (!MSVCRT_CHECK_PMT(str))
+        return 0;
+
+    if (locale)
+        mbcinfo = locale->mbcinfo;
+    else
+        mbcinfo = get_mbcinfo();
+    if (mbcinfo->ismbcodepage)
     {
-      if (_ismbblead(*xstr++))
-        xstr++;
+        const unsigned char* xstr = str;
+        while (*xstr && len-- > 0)
+        {
+            if (_ismbblead_l(*xstr++, locale))
+                xstr++;
+        }
+        return xstr - str;
     }
-    return xstr-str;
-  }
-  ret=u_strlen(str);
-  return min(ret, len); /* ASCII CP */
+    ret = u_strlen(str);
+    return min(ret, len); /* ASCII CP */
+}
+
+/*********************************************************************
+ *		_mbsnbcnt(MSVCRT.@)
+ * 'b' is for byte count.
+ */
+size_t CDECL _mbsnbcnt(const unsigned char* str, size_t len)
+{
+    return _mbsnbcnt_l(str, len, NULL);
 }
 
 /*********************************************************************
diff --git a/dlls/msvcrt/msvcrt.spec b/dlls/msvcrt/msvcrt.spec
index def70e6bd52..9f98662b65a 100644
--- a/dlls/msvcrt/msvcrt.spec
+++ b/dlls/msvcrt/msvcrt.spec
@@ -751,7 +751,7 @@
 @ cdecl _mbsnbcmp(str str long)
 @ cdecl _mbsnbcmp_l(str str long ptr)
 @ cdecl _mbsnbcnt(ptr long)
-# stub _mbsnbcnt_l(ptr long ptr)
+@ cdecl _mbsnbcnt_l(ptr long ptr)
 @ cdecl _mbsnbcoll(str str long)
 @ cdecl _mbsnbcoll_l(str str long ptr)
 @ cdecl _mbsnbcpy(ptr str long)
diff --git a/dlls/ucrtbase/ucrtbase.spec b/dlls/ucrtbase/ucrtbase.spec
index 60d00a6e438..569a5d42725 100644
--- a/dlls/ucrtbase/ucrtbase.spec
+++ b/dlls/ucrtbase/ucrtbase.spec
@@ -646,7 +646,7 @@
 @ cdecl _mbsnbcmp(str str long)
 @ cdecl _mbsnbcmp_l(str str long ptr)
 @ cdecl _mbsnbcnt(ptr long)
-@ stub _mbsnbcnt_l
+@ cdecl _mbsnbcnt_l(ptr long ptr)
 @ cdecl _mbsnbcoll(str str long)
 @ cdecl _mbsnbcoll_l(str str long ptr)
 @ cdecl _mbsnbcpy(ptr str long)
@@ -1215,7 +1215,7 @@
 @ cdecl _o__mbsnbcmp(str str long) _mbsnbcmp
 @ cdecl _o_mbsnbcmp_l(str str long ptr) _mbsnbcmp_l
 @ cdecl _o__mbsnbcnt(ptr long) _mbsnbcnt
-@ stub _o__mbsnbcnt_l
+@ cdecl _o__mbsnbcnt_l(ptr long ptr) _mbsnbcnt_l
 @ cdecl _o__mbsnbcoll(str str long) _mbsnbcoll
 @ cdecl _o__mbsnbcoll_l(str str long ptr) _mbsnbcoll_l
 @ cdecl _o__mbsnbcpy(ptr str long) _mbsnbcpy
-- 
GitLab


From 5098bab5bd3176812400110fd5d7423263e231d5 Mon Sep 17 00:00:00 2001
From: Bartosz Kosiorek <gang65@poczta.onet.pl>
Date: Thu, 2 Nov 2023 19:53:55 +0100
Subject: [PATCH 6/8] msvcrt: Add _mbsncpy_l implementation.

---
 dlls/msvcr100/msvcr100.spec |  2 +-
 dlls/msvcr110/msvcr110.spec |  2 +-
 dlls/msvcr120/msvcr120.spec |  2 +-
 dlls/msvcr80/msvcr80.spec   |  2 +-
 dlls/msvcr90/msvcr90.spec   |  2 +-
 dlls/msvcrt/mbcs.c          | 79 +++++++++++++++++++++++--------------
 dlls/msvcrt/msvcrt.spec     |  2 +-
 dlls/msvcrt/tests/string.c  | 48 ++++++++++++++++++++++
 dlls/ucrtbase/ucrtbase.spec |  4 +-
 9 files changed, 105 insertions(+), 38 deletions(-)

diff --git a/dlls/msvcr100/msvcr100.spec b/dlls/msvcr100/msvcr100.spec
index 75b782ea8e3..68b8b2f713d 100644
--- a/dlls/msvcr100/msvcr100.spec
+++ b/dlls/msvcr100/msvcr100.spec
@@ -1156,7 +1156,7 @@
 @ stub _mbsncoll(str str long)
 @ stub _mbsncoll_l
 @ cdecl _mbsncpy(ptr str long)
-@ stub _mbsncpy_l
+@ cdecl _mbsncpy_l(ptr str long ptr)
 @ stub _mbsncpy_s
 @ stub _mbsncpy_s_l
 @ cdecl _mbsnextc(str)
diff --git a/dlls/msvcr110/msvcr110.spec b/dlls/msvcr110/msvcr110.spec
index 80132da3c6d..456821a0b2c 100644
--- a/dlls/msvcr110/msvcr110.spec
+++ b/dlls/msvcr110/msvcr110.spec
@@ -1513,7 +1513,7 @@
 @ stub _mbsncoll(str str long)
 @ stub _mbsncoll_l
 @ cdecl _mbsncpy(ptr str long)
-@ stub _mbsncpy_l
+@ cdecl _mbsncpy_l(ptr str long ptr)
 @ stub _mbsncpy_s
 @ stub _mbsncpy_s_l
 @ cdecl _mbsnextc(str)
diff --git a/dlls/msvcr120/msvcr120.spec b/dlls/msvcr120/msvcr120.spec
index 44baaaedb60..d8963036835 100644
--- a/dlls/msvcr120/msvcr120.spec
+++ b/dlls/msvcr120/msvcr120.spec
@@ -1524,7 +1524,7 @@
 @ stub _mbsncoll(str str long)
 @ stub _mbsncoll_l
 @ cdecl _mbsncpy(ptr str long)
-@ stub _mbsncpy_l
+@ cdecl _mbsncpy_l(ptr str long ptr)
 @ stub _mbsncpy_s
 @ stub _mbsncpy_s_l
 @ cdecl _mbsnextc(str)
diff --git a/dlls/msvcr80/msvcr80.spec b/dlls/msvcr80/msvcr80.spec
index f0e5e709bba..2482c2cb340 100644
--- a/dlls/msvcr80/msvcr80.spec
+++ b/dlls/msvcr80/msvcr80.spec
@@ -828,7 +828,7 @@
 @ stub _mbsncoll(str str long)
 @ stub _mbsncoll_l
 @ cdecl _mbsncpy(ptr str long)
-@ stub _mbsncpy_l
+@ cdecl _mbsncpy_l(ptr str long ptr)
 @ stub _mbsncpy_s
 @ stub _mbsncpy_s_l
 @ cdecl _mbsnextc(str)
diff --git a/dlls/msvcr90/msvcr90.spec b/dlls/msvcr90/msvcr90.spec
index cdb867d1234..7fa54577b02 100644
--- a/dlls/msvcr90/msvcr90.spec
+++ b/dlls/msvcr90/msvcr90.spec
@@ -806,7 +806,7 @@
 @ stub _mbsncoll(str str long)
 @ stub _mbsncoll_l
 @ cdecl _mbsncpy(ptr str long)
-@ stub _mbsncpy_l
+@ cdecl _mbsncpy_l(ptr str long ptr)
 @ stub _mbsncpy_s
 @ stub _mbsncpy_s_l
 @ cdecl _mbsnextc(str)
diff --git a/dlls/msvcrt/mbcs.c b/dlls/msvcrt/mbcs.c
index c42badd9e8c..c805ef524cb 100644
--- a/dlls/msvcrt/mbcs.c
+++ b/dlls/msvcrt/mbcs.c
@@ -839,47 +839,66 @@ int CDECL _mbccpy_s(unsigned char* dest, size_t maxsize,
     return _mbccpy_s_l(dest, maxsize, copied, src, NULL);
 }
 
+
 /*********************************************************************
- *		_mbsncpy(MSVCRT.@)
+ *		_mbsncpy_l(MSVCRT.@)
  * REMARKS
  *  The parameter n is the number or characters to copy, not the size of
- *  the buffer. Use _mbsnbcpy for a function analogical to strncpy
+ *  the buffer. Use _mbsnbcpy_l for a function analogical to strncpy
  */
-unsigned char* CDECL _mbsncpy(unsigned char* dst, const unsigned char* src, size_t n)
+unsigned char* CDECL _mbsncpy_l(unsigned char* dst, const unsigned char* src, size_t n, _locale_t locale)
 {
-  unsigned char* ret = dst;
-  if(!n)
-    return dst;
-  if (get_mbcinfo()->ismbcodepage)
-  {
-    while (*src && n)
+    unsigned char* ret = dst;
+    pthreadmbcinfo mbcinfo;
+
+    if (!n)
+        return dst;
+    if (!MSVCRT_CHECK_PMT(dst && src))
+        return NULL;
+    if (locale)
+        mbcinfo = locale->mbcinfo;
+    else
+        mbcinfo = get_mbcinfo();
+
+    if (mbcinfo->ismbcodepage)
     {
-      n--;
-      if (_ismbblead(*src))
-      {
-        if (!*(src+1))
+        while (*src && n)
         {
-            *dst++ = 0;
-            *dst++ = 0;
-            break;
+            n--;
+            if (_ismbblead_l(*src, locale))
+            {
+                if (!*(src + 1))
+                {
+                    *dst++ = 0;
+                    *dst++ = 0;
+                    break;
+                }
+                *dst++ = *src++;
+            }
+            *dst++ = *src++;
         }
-
-        *dst++ = *src++;
-      }
-
-      *dst++ = *src++;
     }
-  }
-  else
-  {
-    while (n)
+    else
     {
-        n--;
-        if (!(*dst++ = *src++)) break;
+        while (n)
+        {
+            n--;
+            if (!(*dst++ = *src++)) break;
+        }
     }
-  }
-  while (n--) *dst++ = 0;
-  return ret;
+    while (n--) *dst++ = 0;
+    return ret;
+}
+
+/*********************************************************************
+ *		_mbsncpy(MSVCRT.@)
+ * REMARKS
+ *  The parameter n is the number or characters to copy, not the size of
+ *  the buffer. Use _mbsnbcpy for a function analogical to strncpy
+ */
+unsigned char* CDECL _mbsncpy(unsigned char* dst, const unsigned char* src, size_t n)
+{
+    return _mbsncpy_l(dst, src, n, NULL);
 }
 
 /*********************************************************************
diff --git a/dlls/msvcrt/msvcrt.spec b/dlls/msvcrt/msvcrt.spec
index 9f98662b65a..b603f71a6bd 100644
--- a/dlls/msvcrt/msvcrt.spec
+++ b/dlls/msvcrt/msvcrt.spec
@@ -777,7 +777,7 @@
 @ stub _mbsncoll(str str long)
 # stub _mbsncoll_l(str str long ptr)
 @ cdecl _mbsncpy(ptr str long)
-# stub _mbsncpy_l(ptr str long ptr)
+@ cdecl _mbsncpy_l(ptr str long ptr)
 # stub _mbsncpy_s(ptr long str long)
 # stub _mbsncpy_s_l(ptr long str long ptr)
 @ cdecl _mbsnextc(str)
diff --git a/dlls/msvcrt/tests/string.c b/dlls/msvcrt/tests/string.c
index 2e95653c475..b63df4b846d 100644
--- a/dlls/msvcrt/tests/string.c
+++ b/dlls/msvcrt/tests/string.c
@@ -264,6 +264,7 @@ static void test_mbcp(void)
     unsigned char *mbstring2 = (unsigned char *)"\xb0\xb1\xb2\xb3Q\xb4\xb5"; /* correct string */
     unsigned char *mbsonlylead = (unsigned char *)"\xb0\0\xb1\xb2 \xb3";
     unsigned char buf[16];
+    unsigned char *ret;
     int step;
     CPINFO cp_info;
 
@@ -462,6 +463,53 @@ static void test_mbcp(void)
         expect_bin(buf, "\x00\xff", 2);
     }
 
+    errno = 0xdeadbeef;
+    ret = _mbsncpy(NULL, mbstring, 1);
+    ok(ret == NULL, "_mbsncpy returned %p, expected NULL\n", ret);
+    ok(errno == EINVAL, "_mbsncpy returned %d\n", errno);
+
+    memset(buf, 0xff, sizeof(buf));
+    errno = 0xdeadbeef;
+    ret = _mbsncpy(buf, NULL, 1);
+    ok(ret == NULL, "_mbsncpy returned %p, expected NULL\n", ret);
+    ok(errno == EINVAL, "_mbsncpy returned %d\n", errno);
+    expect_bin(buf, "\xff\xff\xff", 3);
+
+    errno = 0xdeadbeef;
+    ret = _mbsncpy(NULL, mbstring, 0);
+    ok(ret == NULL, "_mbsncpy returned %p, expected NULL\n", ret);
+    ok(errno == 0xdeadbeef, "_mbsncpy should not change errno\n");
+
+    memset(buf, 0xff, sizeof(buf));
+    errno = 0xdeadbeef;
+    ret = _mbsncpy(buf, NULL, 0);
+    ok(ret == buf, "_mbsncpy returned %p, expected %sp\n", ret, buf);
+    ok(errno == 0xdeadbeef, "_mbsncpy should not change errno\n");
+
+    memset(buf, 0xff, sizeof(buf));
+    errno = 0xdeadbeef;
+    ret = _mbsncpy(NULL, mbstring, 1);
+    ok(ret == NULL, "_mbsncpy returned %p, expected NULL\n", ret);
+    ok(errno == EINVAL, "_mbsncpy returned %d\n", errno);
+
+    memset(buf, 0xff, sizeof(buf));
+    errno = 0xdeadbeef;
+    ret = _mbsncpy(buf, NULL, 1);
+    ok(ret == NULL, "_mbsncpy returned %p, expected NULL\n", ret);
+    ok(errno == EINVAL, "_mbsncpy returned %d\n", errno);
+
+    memset(buf, 0xff, sizeof(buf));
+    ret = _mbsncpy(NULL, mbstring, 0);
+    ok(ret == NULL, "_mbsncpy returned %p, expected %p\n", ret, buf);
+
+    memset(buf, 0xff, sizeof(buf));
+    ret = _mbsncpy(buf, NULL, 0);
+    ok(ret == buf, "_mbsncpy returned %p, expected %sp\n", ret, buf);
+
+    memset(buf, 0xff, sizeof(buf));
+    ret = _mbsncpy(buf, mbstring, 0);
+    ok(ret == buf, "_mbsncpy returned %p, expected %p\n", ret, buf);
+
     memset(buf, 0xff, sizeof(buf));
     _mbsncpy(buf, mbstring, 1);
     expect_bin(buf, "\xb0\xb1\xff", 3);
diff --git a/dlls/ucrtbase/ucrtbase.spec b/dlls/ucrtbase/ucrtbase.spec
index 569a5d42725..c5127f5059f 100644
--- a/dlls/ucrtbase/ucrtbase.spec
+++ b/dlls/ucrtbase/ucrtbase.spec
@@ -672,7 +672,7 @@
 @ stub _mbsncoll(str str long)
 @ stub _mbsncoll_l
 @ cdecl _mbsncpy(ptr str long)
-@ stub _mbsncpy_l
+@ cdecl _mbsncpy_l(ptr str long ptr)
 @ stub _mbsncpy_s
 @ stub _mbsncpy_s_l
 @ cdecl _mbsnextc(str)
@@ -1241,7 +1241,7 @@
 @ stub _o__mbsncoll
 @ stub _o__mbsncoll_l
 @ cdecl _o__mbsncpy(ptr str long) _mbsncpy
-@ stub _o__mbsncpy_l
+@ cdecl _o__mbsncpy_l(ptr str long ptr) _mbsncpy_l
 @ stub _o__mbsncpy_s
 @ stub _o__mbsncpy_s_l
 @ cdecl _o__mbsnextc(str) _mbsnextc
-- 
GitLab


From 49d3236da96b97c023f4ee168b93825927342a32 Mon Sep 17 00:00:00 2001
From: Bartosz Kosiorek <gang65@poczta.onet.pl>
Date: Thu, 2 Nov 2023 20:08:32 +0100
Subject: [PATCH 7/8] msvcrt: Add _mbsnicmp_l implementation.

---
 dlls/msvcr100/msvcr100.spec |  2 +-
 dlls/msvcr110/msvcr110.spec |  2 +-
 dlls/msvcr120/msvcr120.spec |  2 +-
 dlls/msvcr80/msvcr80.spec   |  2 +-
 dlls/msvcr90/msvcr90.spec   |  2 +-
 dlls/msvcrt/mbcs.c          | 59 +++++++++++++++++++++++++------------
 dlls/msvcrt/msvcrt.spec     |  2 +-
 dlls/ucrtbase/ucrtbase.spec |  4 +--
 8 files changed, 48 insertions(+), 27 deletions(-)

diff --git a/dlls/msvcr100/msvcr100.spec b/dlls/msvcr100/msvcr100.spec
index 68b8b2f713d..36452977926 100644
--- a/dlls/msvcr100/msvcr100.spec
+++ b/dlls/msvcr100/msvcr100.spec
@@ -1162,7 +1162,7 @@
 @ cdecl _mbsnextc(str)
 @ cdecl _mbsnextc_l(str ptr)
 @ cdecl _mbsnicmp(str str long)
-@ stub _mbsnicmp_l
+@ cdecl _mbsnicmp_l(str str long ptr)
 @ stub _mbsnicoll(str str long)
 @ stub _mbsnicoll_l
 @ cdecl _mbsninc(str long)
diff --git a/dlls/msvcr110/msvcr110.spec b/dlls/msvcr110/msvcr110.spec
index 456821a0b2c..b057d5b85ad 100644
--- a/dlls/msvcr110/msvcr110.spec
+++ b/dlls/msvcr110/msvcr110.spec
@@ -1519,7 +1519,7 @@
 @ cdecl _mbsnextc(str)
 @ cdecl _mbsnextc_l(str ptr)
 @ cdecl _mbsnicmp(str str long)
-@ stub _mbsnicmp_l
+@ cdecl _mbsnicmp_l(str str long ptr)
 @ stub _mbsnicoll(str str long)
 @ stub _mbsnicoll_l
 @ cdecl _mbsninc(str long)
diff --git a/dlls/msvcr120/msvcr120.spec b/dlls/msvcr120/msvcr120.spec
index d8963036835..5f24c3f7971 100644
--- a/dlls/msvcr120/msvcr120.spec
+++ b/dlls/msvcr120/msvcr120.spec
@@ -1530,7 +1530,7 @@
 @ cdecl _mbsnextc(str)
 @ cdecl _mbsnextc_l(str ptr)
 @ cdecl _mbsnicmp(str str long)
-@ stub _mbsnicmp_l
+@ cdecl _mbsnicmp_l(str str long ptr)
 @ stub _mbsnicoll(str str long)
 @ stub _mbsnicoll_l
 @ cdecl _mbsninc(str long)
diff --git a/dlls/msvcr80/msvcr80.spec b/dlls/msvcr80/msvcr80.spec
index 2482c2cb340..42e215d7f79 100644
--- a/dlls/msvcr80/msvcr80.spec
+++ b/dlls/msvcr80/msvcr80.spec
@@ -834,7 +834,7 @@
 @ cdecl _mbsnextc(str)
 @ cdecl _mbsnextc_l(str ptr)
 @ cdecl _mbsnicmp(str str long)
-@ stub _mbsnicmp_l
+@ cdecl _mbsnicmp_l(str str long ptr)
 @ stub _mbsnicoll(str str long)
 @ stub _mbsnicoll_l
 @ cdecl _mbsninc(str long)
diff --git a/dlls/msvcr90/msvcr90.spec b/dlls/msvcr90/msvcr90.spec
index 7fa54577b02..be847415309 100644
--- a/dlls/msvcr90/msvcr90.spec
+++ b/dlls/msvcr90/msvcr90.spec
@@ -812,7 +812,7 @@
 @ cdecl _mbsnextc(str)
 @ cdecl _mbsnextc_l(str ptr)
 @ cdecl _mbsnicmp(str str long)
-@ stub _mbsnicmp_l
+@ cdecl _mbsnicmp_l(str str long ptr)
 @ stub _mbsnicoll(str str long)
 @ stub _mbsnicoll_l
 @ cdecl _mbsninc(str long)
diff --git a/dlls/msvcrt/mbcs.c b/dlls/msvcrt/mbcs.c
index c805ef524cb..01d290b2647 100644
--- a/dlls/msvcrt/mbcs.c
+++ b/dlls/msvcrt/mbcs.c
@@ -1297,28 +1297,49 @@ int CDECL _mbsnbcmp(const unsigned char* str, const unsigned char* cmp, size_t l
  *
  * Compare two multibyte strings case insensitively to 'len' characters.
  */
-int CDECL _mbsnicmp(const unsigned char* str, const unsigned char* cmp, size_t len)
+int CDECL _mbsnicmp_l(const unsigned char* str, const unsigned char* cmp, size_t len, _locale_t locale)
 {
-  /* FIXME: No tolower() for mb strings yet */
-  if(get_mbcinfo()->ismbcodepage)
-  {
-    unsigned int strc, cmpc;
-    while(len--)
+    pthreadmbcinfo mbcinfo;
+
+    if (!len)
+        return 0;
+    if (!MSVCRT_CHECK_PMT(str && cmp))
+        return _NLSCMPERROR;
+
+    if (locale)
+        mbcinfo = locale->mbcinfo;
+    else
+        mbcinfo = get_mbcinfo();
+    /* FIXME: No tolower() for mb strings yet */
+    if (mbcinfo->ismbcodepage)
     {
-      if(!*str)
-        return *cmp ? -1 : 0;
-      if(!*cmp)
-        return 1;
-      strc = _mbctolower(_mbsnextc(str));
-      cmpc = _mbctolower(_mbsnextc(cmp));
-      if(strc != cmpc)
-        return strc < cmpc ? -1 : 1;
-      str +=(strc > 255) ? 2 : 1;
-      cmp +=(strc > 255) ? 2 : 1; /* Equal, use same increment */
+        unsigned int strc, cmpc;
+        while (len--)
+        {
+            if (!*str)
+                return *cmp ? -1 : 0;
+            if (!*cmp)
+                return 1;
+            strc = _mbctolower_l(_mbsnextc_l(str, locale), locale);
+            cmpc = _mbctolower_l(_mbsnextc_l(cmp, locale), locale);
+            if (strc != cmpc)
+                return strc < cmpc ? -1 : 1;
+            str += (strc > 255) ? 2 : 1;
+            cmp += (strc > 255) ? 2 : 1; /* Equal, use same increment */
+        }
+        return 0; /* Matched len chars */
     }
-    return 0; /* Matched len chars */
-  }
-  return u_strncasecmp(str, cmp, len); /* ASCII CP */
+    return u_strncasecmp(str, cmp, len); /* ASCII CP */
+}
+
+/*********************************************************************
+ *		_mbsnicmp(MSVCRT.@)
+ *
+ * Compare two multibyte strings case insensitively to 'len' characters.
+ */
+int CDECL _mbsnicmp(const unsigned char* str, const unsigned char* cmp, size_t len)
+{
+  return _mbsnicmp_l(str, cmp, len,  NULL);
 }
 
 /*********************************************************************
diff --git a/dlls/msvcrt/msvcrt.spec b/dlls/msvcrt/msvcrt.spec
index b603f71a6bd..a997a4e61d5 100644
--- a/dlls/msvcrt/msvcrt.spec
+++ b/dlls/msvcrt/msvcrt.spec
@@ -783,7 +783,7 @@
 @ cdecl _mbsnextc(str)
 @ cdecl _mbsnextc_l(str ptr)
 @ cdecl _mbsnicmp(str str long)
-# stub _mbsnicmp_l(str str long ptr)
+@ cdecl _mbsnicmp_l(str str long ptr)
 @ stub _mbsnicoll(str str long)
 # stub _mbsnicoll_l(str str long ptr)
 @ cdecl _mbsninc(str long)
diff --git a/dlls/ucrtbase/ucrtbase.spec b/dlls/ucrtbase/ucrtbase.spec
index c5127f5059f..f0b078e09e7 100644
--- a/dlls/ucrtbase/ucrtbase.spec
+++ b/dlls/ucrtbase/ucrtbase.spec
@@ -678,7 +678,7 @@
 @ cdecl _mbsnextc(str)
 @ cdecl _mbsnextc_l(str ptr)
 @ cdecl _mbsnicmp(str str long)
-@ stub _mbsnicmp_l
+@ cdecl _mbsnicmp_l(str str long ptr)
 @ stub _mbsnicoll(str str long)
 @ stub _mbsnicoll_l
 @ cdecl _mbsninc(str long)
@@ -1247,7 +1247,7 @@
 @ cdecl _o__mbsnextc(str) _mbsnextc
 @ cdecl _o__mbsnextc_l(str ptr) _mbsnextc_l
 @ cdecl _o__mbsnicmp(str str long) _mbsnicmp
-@ stub _o__mbsnicmp_l
+@ cdecl _o__mbsnicmp_l(str str long ptr) _mbsnicmp_l
 @ stub _o__mbsnicoll
 @ stub _o__mbsnicoll_l
 @ cdecl _o__mbsninc(str long) _mbsninc
-- 
GitLab


From 2af3f3204dd7feb28e3704be0af77535c2fc0946 Mon Sep 17 00:00:00 2001
From: Bartosz Kosiorek <gang65@poczta.onet.pl>
Date: Thu, 2 Nov 2023 22:48:27 +0100
Subject: [PATCH 8/8] msvcrt: Fix _strnicmp and _strnicmp_l implementation.

---
 dlls/msvcrt/string.c         | 14 +++++++++-----
 dlls/ucrtbase/tests/string.c | 24 +++++++++++++++++++++---
 2 files changed, 30 insertions(+), 8 deletions(-)

diff --git a/dlls/msvcrt/string.c b/dlls/msvcrt/string.c
index d58a21406b1..ad57ecc8cda 100644
--- a/dlls/msvcrt/string.c
+++ b/dlls/msvcrt/string.c
@@ -3313,11 +3313,15 @@ int __cdecl _strnicmp_l(const char *s1, const char *s2,
     pthreadlocinfo locinfo;
     int c1, c2;
 
-    if(s1==NULL || s2==NULL)
-        return _NLSCMPERROR;
-
     if(!count)
         return 0;
+#if _MSVCR_VER>=80
+    if(!MSVCRT_CHECK_PMT(s1 && s2 && count <= INT_MAX))
+#else
+    /* Old versions of msvcrt.dll didn't have count <= INT_MAX check */
+    if(!MSVCRT_CHECK_PMT(s1 && s2))
+#endif /* _MSVCR_VER>=140 */
+        return _NLSCMPERROR;
 
     if(!locale)
         locinfo = get_locinfo();
@@ -3349,7 +3353,7 @@ int __cdecl _strnicmp_l(const char *s1, const char *s2,
  */
 int __cdecl _stricmp_l(const char *s1, const char *s2, _locale_t locale)
 {
-    return _strnicmp_l(s1, s2, -1, locale);
+    return _strnicmp_l(s1, s2, INT_MAX, locale);
 }
 
 /*********************************************************************
@@ -3365,7 +3369,7 @@ int __cdecl _strnicmp(const char *s1, const char *s2, size_t count)
  */
 int __cdecl _stricmp(const char *s1, const char *s2)
 {
-    return _strnicmp_l(s1, s2, -1, NULL);
+    return _strnicmp_l(s1, s2, INT_MAX, NULL);
 }
 
 /*********************************************************************
diff --git a/dlls/ucrtbase/tests/string.c b/dlls/ucrtbase/tests/string.c
index 2c6a02da7ae..6dcd15fb5b9 100644
--- a/dlls/ucrtbase/tests/string.c
+++ b/dlls/ucrtbase/tests/string.c
@@ -480,15 +480,33 @@ static void test__strnicmp(void)
     static const char str2[] = "test";
     int ret;
 
+    SET_EXPECT(invalid_parameter_handler);
+    errno = 0xdeadbeef;
+    ret = _strnicmp(str1, NULL, 2);
+    CHECK_CALLED(invalid_parameter_handler);
+    ok(ret == _NLSCMPERROR, "got %d.\n", ret);
+    ok(errno == EINVAL, "Unexpected errno %d.\n", errno);
+
     SET_EXPECT(invalid_parameter_handler);
     errno = 0xdeadbeef;
     ret = _strnicmp(str1, str2, -1);
-    todo_wine CHECK_CALLED(invalid_parameter_handler);
-    todo_wine ok(ret == _NLSCMPERROR, "got %d.\n", ret);
-    todo_wine ok(errno == EINVAL, "Unexpected errno %d.\n", errno);
+    CHECK_CALLED(invalid_parameter_handler);
+    ok(ret == _NLSCMPERROR, "got %d.\n", ret);
+    ok(errno == EINVAL, "Unexpected errno %d.\n", errno);
+
+    ret = _strnicmp(str1, str2, 0);
+    ok(!ret, "got %d.\n", ret);
 
     ret = _strnicmp(str1, str2, 0x7fffffff);
     ok(!ret, "got %d.\n", ret);
+
+    /* If numbers of characters to compare is too big return error */
+    SET_EXPECT(invalid_parameter_handler);
+    errno = 0xdeadbeef;
+    ret = _strnicmp(str1, str2, 0x80000000);
+    CHECK_CALLED(invalid_parameter_handler);
+    ok(ret == _NLSCMPERROR, "got %d.\n", ret);
+    ok(errno == EINVAL, "Unexpected errno %d.\n", errno);
 }
 
 static void test_wcsnicmp(void)
-- 
GitLab

From a6ed3d554ef90f6cf82db3cb7e14a4dec4d1fac8 Mon Sep 17 00:00:00 2001
From: Bartosz Kosiorek <gang65@poczta.onet.pl>
Date: Mon, 6 Nov 2023 20:04:55 +0100
Subject: [PATCH 1/7] msvcrt: Add _mbsnbcat_s_l implementation.

---
 dlls/msvcr100/msvcr100.spec |  2 +-
 dlls/msvcr110/msvcr110.spec |  2 +-
 dlls/msvcr120/msvcr120.spec |  2 +-
 dlls/msvcr80/msvcr80.spec   |  2 +-
 dlls/msvcr90/msvcr90.spec   |  2 +-
 dlls/msvcrt/mbcs.c          | 27 +++++++++++++++++++++------
 dlls/msvcrt/msvcrt.spec     |  2 +-
 dlls/ucrtbase/ucrtbase.spec |  4 ++--
 8 files changed, 29 insertions(+), 14 deletions(-)

diff --git a/dlls/msvcr100/msvcr100.spec b/dlls/msvcr100/msvcr100.spec
index 36452977926..0f57555e454 100644
--- a/dlls/msvcr100/msvcr100.spec
+++ b/dlls/msvcr100/msvcr100.spec
@@ -1126,7 +1126,7 @@
 @ cdecl _mbsnbcat(str str long)
 @ cdecl _mbsnbcat_l(str str long ptr)
 @ cdecl _mbsnbcat_s(str long ptr long)
-@ stub _mbsnbcat_s_l
+@ cdecl _mbsnbcat_s_l(str long ptr long ptr)
 @ cdecl _mbsnbcmp(str str long)
 @ cdecl _mbsnbcmp_l(str str long ptr)
 @ cdecl _mbsnbcnt(ptr long)
diff --git a/dlls/msvcr110/msvcr110.spec b/dlls/msvcr110/msvcr110.spec
index b057d5b85ad..072cef0f0c9 100644
--- a/dlls/msvcr110/msvcr110.spec
+++ b/dlls/msvcr110/msvcr110.spec
@@ -1483,7 +1483,7 @@
 @ cdecl _mbsnbcat(str str long)
 @ cdecl _mbsnbcat_l(str str long ptr)
 @ cdecl _mbsnbcat_s(str long ptr long)
-@ stub _mbsnbcat_s_l
+@ cdecl _mbsnbcat_s_l(str long ptr long ptr)
 @ cdecl _mbsnbcmp(str str long)
 @ cdecl _mbsnbcmp_l(str str long ptr)
 @ cdecl _mbsnbcnt(ptr long)
diff --git a/dlls/msvcr120/msvcr120.spec b/dlls/msvcr120/msvcr120.spec
index 5f24c3f7971..55a0a4b1d2d 100644
--- a/dlls/msvcr120/msvcr120.spec
+++ b/dlls/msvcr120/msvcr120.spec
@@ -1494,7 +1494,7 @@
 @ cdecl _mbsnbcat(str str long)
 @ cdecl _mbsnbcat_l(str str long ptr)
 @ cdecl _mbsnbcat_s(str long ptr long)
-@ stub _mbsnbcat_s_l
+@ cdecl _mbsnbcat_s_l(str long ptr long ptr)
 @ cdecl _mbsnbcmp(str str long)
 @ cdecl _mbsnbcmp_l(str str long ptr)
 @ cdecl _mbsnbcnt(ptr long)
diff --git a/dlls/msvcr80/msvcr80.spec b/dlls/msvcr80/msvcr80.spec
index 42e215d7f79..38d157f8a9a 100644
--- a/dlls/msvcr80/msvcr80.spec
+++ b/dlls/msvcr80/msvcr80.spec
@@ -798,7 +798,7 @@
 @ cdecl _mbsnbcat(str str long)
 @ cdecl _mbsnbcat_l(str str long ptr)
 @ cdecl _mbsnbcat_s(str long ptr long)
-@ stub _mbsnbcat_s_l
+@ cdecl _mbsnbcat_s_l(str long ptr long ptr)
 @ cdecl _mbsnbcmp(str str long)
 @ cdecl _mbsnbcmp_l(str str long ptr)
 @ cdecl _mbsnbcnt(ptr long)
diff --git a/dlls/msvcr90/msvcr90.spec b/dlls/msvcr90/msvcr90.spec
index be847415309..58cb3ef2e92 100644
--- a/dlls/msvcr90/msvcr90.spec
+++ b/dlls/msvcr90/msvcr90.spec
@@ -776,7 +776,7 @@
 @ cdecl _mbsnbcat(str str long)
 @ cdecl _mbsnbcat_l(str str long ptr)
 @ cdecl _mbsnbcat_s(str long ptr long)
-@ stub _mbsnbcat_s_l
+@ cdecl _mbsnbcat_s_l(str long ptr long ptr)
 @ cdecl _mbsnbcmp(str str long)
 @ cdecl _mbsnbcmp_l(str str long ptr)
 @ cdecl _mbsnbcnt(ptr long)
diff --git a/dlls/msvcrt/mbcs.c b/dlls/msvcrt/mbcs.c
index 01d290b2647..245dc843ba2 100644
--- a/dlls/msvcrt/mbcs.c
+++ b/dlls/msvcrt/mbcs.c
@@ -2336,20 +2336,22 @@ unsigned char* CDECL _mbsnbcat(unsigned char *dst, const unsigned char *src, siz
     return _mbsnbcat_l(dst, src, len, NULL);
 }
 
-int CDECL _mbsnbcat_s(unsigned char *dst, size_t size, const unsigned char *src, size_t len)
+/*********************************************************************
+ *		_mbsnbcat_s_l(MSVCRT.@)
+ */
+int CDECL _mbsnbcat_s_l(unsigned char *dst, size_t size, const unsigned char *src, size_t len, _locale_t locale)
 {
     unsigned char *ptr = dst;
     size_t i;
+    pthreadmbcinfo mbcinfo;
 
-    if (!dst && !size && !src && !len)
+    if (!dst && !size && !len)
         return 0;
 
-    if (!dst || !size || !src)
+    if (!MSVCRT_CHECK_PMT(dst && size && src))
     {
         if (dst && size)
             *dst = '\0';
-
-        *_errno() = EINVAL;
         return EINVAL;
     }
 
@@ -2364,9 +2366,14 @@ int CDECL _mbsnbcat_s(unsigned char *dst, size_t size, const unsigned char *src,
         return EINVAL;
     }
 
+    if (locale)
+        mbcinfo = locale->mbcinfo;
+    else
+        mbcinfo = get_mbcinfo();
+
     /* If necessary, check that the character preceding the null terminator is
      * a lead byte and move the pointer back by one for later overwrite. */
-    if (ptr != dst && get_mbcinfo()->ismbcodepage && _ismbblead(*(ptr - 1)))
+    if (ptr != dst && mbcinfo->ismbcodepage && _ismbblead_l(*(ptr - 1), locale))
         size++, ptr--;
 
     for (i = 0; *src && i < len; i++)
@@ -2386,6 +2393,14 @@ int CDECL _mbsnbcat_s(unsigned char *dst, size_t size, const unsigned char *src,
     return 0;
 }
 
+/*********************************************************************
+ *		_mbsnbcat_s(MSVCRT.@)
+ */
+int CDECL _mbsnbcat_s(unsigned char *dst, size_t size, const unsigned char *src, size_t len)
+{
+    return _mbsnbcat_s_l(dst, size, src, len, NULL);
+}
+
 /*********************************************************************
  *		_mbsncat(MSVCRT.@)
  */
diff --git a/dlls/msvcrt/msvcrt.spec b/dlls/msvcrt/msvcrt.spec
index a997a4e61d5..738279a2cd3 100644
--- a/dlls/msvcrt/msvcrt.spec
+++ b/dlls/msvcrt/msvcrt.spec
@@ -747,7 +747,7 @@
 @ cdecl _mbsnbcat(str str long)
 @ cdecl _mbsnbcat_l(str str long ptr)
 @ cdecl _mbsnbcat_s(str long ptr long)
-# stub _mbsnbcat_s_l(str long ptr long ptr)
+@ cdecl _mbsnbcat_s_l(str long ptr long ptr)
 @ cdecl _mbsnbcmp(str str long)
 @ cdecl _mbsnbcmp_l(str str long ptr)
 @ cdecl _mbsnbcnt(ptr long)
diff --git a/dlls/ucrtbase/ucrtbase.spec b/dlls/ucrtbase/ucrtbase.spec
index f0b078e09e7..46cea0359b4 100644
--- a/dlls/ucrtbase/ucrtbase.spec
+++ b/dlls/ucrtbase/ucrtbase.spec
@@ -642,7 +642,7 @@
 @ cdecl _mbsnbcat(str str long)
 @ cdecl _mbsnbcat_l(str str long ptr)
 @ cdecl _mbsnbcat_s(str long ptr long)
-@ stub _mbsnbcat_s_l
+@ cdecl _mbsnbcat_s_l(str long ptr long ptr)
 @ cdecl _mbsnbcmp(str str long)
 @ cdecl _mbsnbcmp_l(str str long ptr)
 @ cdecl _mbsnbcnt(ptr long)
@@ -1211,7 +1211,7 @@
 @ cdecl _o__mbsnbcat(str str long) _mbsnbcat
 @ cdecl _o__mbsnbcat_l(str str long ptr) _mbsnbcat_l
 @ cdecl _o__mbsnbcat_s(str long ptr long) _mbsnbcat_s
-@ stub _o__mbsnbcat_s_l
+@ cdecl _o__mbsnbcat_s_l(str long ptr long ptr) _mbsnbcat_s_l
 @ cdecl _o__mbsnbcmp(str str long) _mbsnbcmp
 @ cdecl _o_mbsnbcmp_l(str str long ptr) _mbsnbcmp_l
 @ cdecl _o__mbsnbcnt(ptr long) _mbsnbcnt
-- 
GitLab


From bf9ac906e5041d7ab766f63858b04f719f832a5d Mon Sep 17 00:00:00 2001
From: Bartosz Kosiorek <gang65@poczta.onet.pl>
Date: Mon, 6 Nov 2023 20:15:48 +0100
Subject: [PATCH 2/7] msvcrt: Add _mbsnbcpy_l implementation.

---
 dlls/msvcr100/msvcr100.spec |  2 +-
 dlls/msvcr110/msvcr110.spec |  2 +-
 dlls/msvcr120/msvcr120.spec |  2 +-
 dlls/msvcr80/msvcr80.spec   |  2 +-
 dlls/msvcr90/msvcr90.spec   |  2 +-
 dlls/msvcrt/mbcs.c          | 67 ++++++++++++++++++++++++-------------
 dlls/msvcrt/msvcrt.spec     |  2 +-
 dlls/ucrtbase/ucrtbase.spec |  4 +--
 8 files changed, 51 insertions(+), 32 deletions(-)

diff --git a/dlls/msvcr100/msvcr100.spec b/dlls/msvcr100/msvcr100.spec
index 0f57555e454..884289175c0 100644
--- a/dlls/msvcr100/msvcr100.spec
+++ b/dlls/msvcr100/msvcr100.spec
@@ -1134,7 +1134,7 @@
 @ cdecl _mbsnbcoll(str str long)
 @ cdecl _mbsnbcoll_l(str str long ptr)
 @ cdecl _mbsnbcpy(ptr str long)
-@ stub _mbsnbcpy_l
+@ cdecl _mbsnbcpy_l(ptr str long ptr)
 @ cdecl _mbsnbcpy_s(ptr long str long)
 @ cdecl _mbsnbcpy_s_l(ptr long str long ptr)
 @ cdecl _mbsnbicmp(str str long)
diff --git a/dlls/msvcr110/msvcr110.spec b/dlls/msvcr110/msvcr110.spec
index 072cef0f0c9..89bb35c7dba 100644
--- a/dlls/msvcr110/msvcr110.spec
+++ b/dlls/msvcr110/msvcr110.spec
@@ -1491,7 +1491,7 @@
 @ cdecl _mbsnbcoll(str str long)
 @ cdecl _mbsnbcoll_l(str str long ptr)
 @ cdecl _mbsnbcpy(ptr str long)
-@ stub _mbsnbcpy_l
+@ cdecl _mbsnbcpy_l(ptr str long ptr)
 @ cdecl _mbsnbcpy_s(ptr long str long)
 @ cdecl _mbsnbcpy_s_l(ptr long str long ptr)
 @ cdecl _mbsnbicmp(str str long)
diff --git a/dlls/msvcr120/msvcr120.spec b/dlls/msvcr120/msvcr120.spec
index 55a0a4b1d2d..1be83715d23 100644
--- a/dlls/msvcr120/msvcr120.spec
+++ b/dlls/msvcr120/msvcr120.spec
@@ -1502,7 +1502,7 @@
 @ cdecl _mbsnbcoll(str str long)
 @ cdecl _mbsnbcoll_l(str str long ptr)
 @ cdecl _mbsnbcpy(ptr str long)
-@ stub _mbsnbcpy_l
+@ cdecl _mbsnbcpy_l(ptr str long ptr)
 @ cdecl _mbsnbcpy_s(ptr long str long)
 @ cdecl _mbsnbcpy_s_l(ptr long str long ptr)
 @ cdecl _mbsnbicmp(str str long)
diff --git a/dlls/msvcr80/msvcr80.spec b/dlls/msvcr80/msvcr80.spec
index 38d157f8a9a..78172dbc104 100644
--- a/dlls/msvcr80/msvcr80.spec
+++ b/dlls/msvcr80/msvcr80.spec
@@ -806,7 +806,7 @@
 @ cdecl _mbsnbcoll(str str long)
 @ cdecl _mbsnbcoll_l(str str long ptr)
 @ cdecl _mbsnbcpy(ptr str long)
-@ stub _mbsnbcpy_l
+@ cdecl _mbsnbcpy_l(ptr str long ptr)
 @ cdecl _mbsnbcpy_s(ptr long str long)
 @ cdecl _mbsnbcpy_s_l(ptr long str long ptr)
 @ cdecl _mbsnbicmp(str str long)
diff --git a/dlls/msvcr90/msvcr90.spec b/dlls/msvcr90/msvcr90.spec
index 58cb3ef2e92..c1736877ff5 100644
--- a/dlls/msvcr90/msvcr90.spec
+++ b/dlls/msvcr90/msvcr90.spec
@@ -784,7 +784,7 @@
 @ cdecl _mbsnbcoll(str str long)
 @ cdecl _mbsnbcoll_l(str str long ptr)
 @ cdecl _mbsnbcpy(ptr str long)
-@ stub _mbsnbcpy_l
+@ cdecl _mbsnbcpy_l(ptr str long ptr)
 @ cdecl _mbsnbcpy_s(ptr long str long)
 @ cdecl _mbsnbcpy_s_l(ptr long str long ptr)
 @ cdecl _mbsnbicmp(str str long)
diff --git a/dlls/msvcrt/mbcs.c b/dlls/msvcrt/mbcs.c
index 245dc843ba2..38ace70cd7e 100644
--- a/dlls/msvcrt/mbcs.c
+++ b/dlls/msvcrt/mbcs.c
@@ -993,39 +993,58 @@ int CDECL _mbscpy_s(unsigned char *dst, size_t size, const unsigned char *src)
 }
 
 /*********************************************************************
- *              _mbsnbcpy(MSVCRT.@)
+ *              _mbsnbcpy_l(MSVCRT.@)
  * REMARKS
  *  Like strncpy this function doesn't enforce the string to be
  *  NUL-terminated
  */
-unsigned char* CDECL _mbsnbcpy(unsigned char* dst, const unsigned char* src, size_t n)
+unsigned char* CDECL _mbsnbcpy_l(unsigned char* dst, const unsigned char* src, size_t n, _locale_t locale)
 {
-  unsigned char* ret = dst;
-  if(!n)
-    return dst;
-  if(get_mbcinfo()->ismbcodepage)
-  {
-    BOOL is_lead = FALSE;
-    while (*src && n)
+    unsigned char* ret = dst;
+    pthreadmbcinfo mbcinfo;
+
+    if (!n)
+        return dst;
+    if (!MSVCRT_CHECK_PMT(dst && src))
+        return NULL;
+    if (locale)
+        mbcinfo = locale->mbcinfo;
+    else
+        mbcinfo = get_mbcinfo();
+    if (mbcinfo->ismbcodepage)
     {
-      is_lead = (!is_lead && _ismbblead(*src));
-      n--;
-      *dst++ = *src++;
-    }
+        BOOL is_lead = FALSE;
+        while (*src && n)
+        {
+            is_lead = (!is_lead && _ismbblead_l(*src, locale));
+            n--;
+            *dst++ = *src++;
+        }
 
-    if (is_lead) /* if string ends with a lead, remove it */
-	*(dst - 1) = 0;
-  }
-  else
-  {
-    while (n)
+        if (is_lead) /* if string ends with a lead, remove it */
+            *(dst - 1) = 0;
+    }
+    else
     {
-        n--;
-        if (!(*dst++ = *src++)) break;
+        while (n)
+        {
+            n--;
+            if (!(*dst++ = *src++)) break;
+        }
     }
-  }
-  while (n--) *dst++ = 0;
-  return ret;
+    while (n--) *dst++ = 0;
+    return ret;
+}
+
+/*********************************************************************
+ *              _mbsnbcpy(MSVCRT.@)
+ * REMARKS
+ *  Like strncpy this function doesn't enforce the string to be
+ *  NUL-terminated
+ */
+unsigned char* CDECL _mbsnbcpy(unsigned char* dst, const unsigned char* src, size_t n)
+{
+    return _mbsnbcpy_l(dst, src, n, NULL);
 }
 
 /*********************************************************************
diff --git a/dlls/msvcrt/msvcrt.spec b/dlls/msvcrt/msvcrt.spec
index 738279a2cd3..998bd7268ca 100644
--- a/dlls/msvcrt/msvcrt.spec
+++ b/dlls/msvcrt/msvcrt.spec
@@ -755,7 +755,7 @@
 @ cdecl _mbsnbcoll(str str long)
 @ cdecl _mbsnbcoll_l(str str long ptr)
 @ cdecl _mbsnbcpy(ptr str long)
-# stub _mbsnbcpy_l(ptr str long ptr)
+@ cdecl _mbsnbcpy_l(ptr str long ptr)
 @ cdecl _mbsnbcpy_s(ptr long str long)
 @ cdecl _mbsnbcpy_s_l(ptr long str long ptr)
 @ cdecl _mbsnbicmp(str str long)
diff --git a/dlls/ucrtbase/ucrtbase.spec b/dlls/ucrtbase/ucrtbase.spec
index 46cea0359b4..25c3e5ac766 100644
--- a/dlls/ucrtbase/ucrtbase.spec
+++ b/dlls/ucrtbase/ucrtbase.spec
@@ -650,7 +650,7 @@
 @ cdecl _mbsnbcoll(str str long)
 @ cdecl _mbsnbcoll_l(str str long ptr)
 @ cdecl _mbsnbcpy(ptr str long)
-@ stub _mbsnbcpy_l
+@ cdecl _mbsnbcpy_l(ptr str long ptr)
 @ cdecl _mbsnbcpy_s(ptr long str long)
 @ cdecl _mbsnbcpy_s_l(ptr long str long ptr)
 @ cdecl _mbsnbicmp(str str long)
@@ -1219,7 +1219,7 @@
 @ cdecl _o__mbsnbcoll(str str long) _mbsnbcoll
 @ cdecl _o__mbsnbcoll_l(str str long ptr) _mbsnbcoll_l
 @ cdecl _o__mbsnbcpy(ptr str long) _mbsnbcpy
-@ stub _o__mbsnbcpy_l
+@ cdecl _o__mbsnbcpy_l(ptr str long ptr) _mbsnbcpy_l
 @ cdecl _o__mbsnbcpy_s(ptr long str long) _mbsnbcpy_s
 @ cdecl _o__mbsnbcpy_s_l(ptr long str long ptr) _mbsnbcpy_s_l
 @ cdecl _o__mbsnbicmp(str str long) _mbsnbicmp
-- 
GitLab


From 62ba4a826102aed2f513ed7e0f812a44a4d62dd7 Mon Sep 17 00:00:00 2001
From: Bartosz Kosiorek <gang65@poczta.onet.pl>
Date: Mon, 6 Nov 2023 20:22:53 +0100
Subject: [PATCH 3/7] msvcrt: Add _mbsnbicmp_l implementation.

---
 dlls/msvcr100/msvcr100.spec |  2 +-
 dlls/msvcr110/msvcr110.spec |  2 +-
 dlls/msvcr120/msvcr120.spec |  2 +-
 dlls/msvcr80/msvcr80.spec   |  2 +-
 dlls/msvcr90/msvcr90.spec   |  2 +-
 dlls/msvcrt/mbcs.c          | 93 ++++++++++++++++++++++---------------
 dlls/msvcrt/msvcrt.spec     |  2 +-
 dlls/ucrtbase/ucrtbase.spec |  4 +-
 8 files changed, 64 insertions(+), 45 deletions(-)

diff --git a/dlls/msvcr100/msvcr100.spec b/dlls/msvcr100/msvcr100.spec
index 884289175c0..2e607207780 100644
--- a/dlls/msvcr100/msvcr100.spec
+++ b/dlls/msvcr100/msvcr100.spec
@@ -1138,7 +1138,7 @@
 @ cdecl _mbsnbcpy_s(ptr long str long)
 @ cdecl _mbsnbcpy_s_l(ptr long str long ptr)
 @ cdecl _mbsnbicmp(str str long)
-@ stub _mbsnbicmp_l
+@ cdecl _mbsnbicmp_l(str str long ptr)
 @ cdecl _mbsnbicoll(str str long)
 @ cdecl _mbsnbicoll_l(str str long ptr)
 @ cdecl _mbsnbset(ptr long long)
diff --git a/dlls/msvcr110/msvcr110.spec b/dlls/msvcr110/msvcr110.spec
index 89bb35c7dba..4c552a2a80f 100644
--- a/dlls/msvcr110/msvcr110.spec
+++ b/dlls/msvcr110/msvcr110.spec
@@ -1495,7 +1495,7 @@
 @ cdecl _mbsnbcpy_s(ptr long str long)
 @ cdecl _mbsnbcpy_s_l(ptr long str long ptr)
 @ cdecl _mbsnbicmp(str str long)
-@ stub _mbsnbicmp_l
+@ cdecl _mbsnbicmp_l(str str long ptr)
 @ cdecl _mbsnbicoll(str str long)
 @ cdecl _mbsnbicoll_l(str str long ptr)
 @ cdecl _mbsnbset(ptr long long)
diff --git a/dlls/msvcr120/msvcr120.spec b/dlls/msvcr120/msvcr120.spec
index 1be83715d23..d60c97a53fc 100644
--- a/dlls/msvcr120/msvcr120.spec
+++ b/dlls/msvcr120/msvcr120.spec
@@ -1506,7 +1506,7 @@
 @ cdecl _mbsnbcpy_s(ptr long str long)
 @ cdecl _mbsnbcpy_s_l(ptr long str long ptr)
 @ cdecl _mbsnbicmp(str str long)
-@ stub _mbsnbicmp_l
+@ cdecl _mbsnbicmp_l(str str long ptr)
 @ cdecl _mbsnbicoll(str str long)
 @ cdecl _mbsnbicoll_l(str str long ptr)
 @ cdecl _mbsnbset(ptr long long)
diff --git a/dlls/msvcr80/msvcr80.spec b/dlls/msvcr80/msvcr80.spec
index 78172dbc104..d718ec58cb4 100644
--- a/dlls/msvcr80/msvcr80.spec
+++ b/dlls/msvcr80/msvcr80.spec
@@ -810,7 +810,7 @@
 @ cdecl _mbsnbcpy_s(ptr long str long)
 @ cdecl _mbsnbcpy_s_l(ptr long str long ptr)
 @ cdecl _mbsnbicmp(str str long)
-@ stub _mbsnbicmp_l
+@ cdecl _mbsnbicmp_l(str str long ptr)
 @ cdecl _mbsnbicoll(str str long)
 @ cdecl _mbsnbicoll_l(str str long ptr)
 @ cdecl _mbsnbset(ptr long long)
diff --git a/dlls/msvcr90/msvcr90.spec b/dlls/msvcr90/msvcr90.spec
index c1736877ff5..d3b51e6cdac 100644
--- a/dlls/msvcr90/msvcr90.spec
+++ b/dlls/msvcr90/msvcr90.spec
@@ -788,7 +788,7 @@
 @ cdecl _mbsnbcpy_s(ptr long str long)
 @ cdecl _mbsnbcpy_s_l(ptr long str long ptr)
 @ cdecl _mbsnbicmp(str str long)
-@ stub _mbsnbicmp_l
+@ cdecl _mbsnbicmp_l(str str long ptr)
 @ cdecl _mbsnbicoll(str str long)
 @ cdecl _mbsnbicoll_l(str str long ptr)
 @ cdecl _mbsnbset(ptr long long)
diff --git a/dlls/msvcrt/mbcs.c b/dlls/msvcrt/mbcs.c
index 38ace70cd7e..e75a02e0193 100644
--- a/dlls/msvcrt/mbcs.c
+++ b/dlls/msvcrt/mbcs.c
@@ -1362,47 +1362,66 @@ int CDECL _mbsnicmp(const unsigned char* str, const unsigned char* cmp, size_t l
 }
 
 /*********************************************************************
- *              _mbsnbicmp(MSVCRT.@)
+ *              _mbsnbicmp_l(MSVCRT.@)
  */
-int CDECL _mbsnbicmp(const unsigned char* str, const unsigned char* cmp, size_t len)
+int CDECL _mbsnbicmp_l(const unsigned char* str, const unsigned char* cmp, size_t len, _locale_t locale)
 {
-  if (!len)
-    return 0;
-  if(get_mbcinfo()->ismbcodepage)
-  {
-    unsigned int strc, cmpc;
-    while (len)
+
+    pthreadmbcinfo mbcinfo;
+
+    if (!len)
+        return 0;
+    if (!MSVCRT_CHECK_PMT(str && cmp))
+        return _NLSCMPERROR;
+
+    if (locale)
+        mbcinfo = locale->mbcinfo;
+    else
+        mbcinfo = get_mbcinfo();
+
+    if (mbcinfo->ismbcodepage)
     {
-      int clen;
-      if(!*str)
-        return *cmp ? -1 : 0;
-      if(!*cmp)
-        return 1;
-      if (_ismbblead(*str))
-      {
-        strc=(len>=2)?_mbsnextc(str):0;
-        clen=2;
-      }
-      else
-      {
-        strc=*str;
-        clen=1;
-      }
-      if (_ismbblead(*cmp))
-        cmpc=(len>=2)?_mbsnextc(cmp):0;
-      else
-        cmpc=*cmp;
-      strc = _mbctolower(strc);
-      cmpc = _mbctolower(cmpc);
-      if(strc != cmpc)
-        return strc < cmpc ? -1 : 1;
-      len -= clen;
-      str += clen;
-      cmp += clen;
+        unsigned int strc, cmpc;
+        while (len)
+        {
+            int clen;
+            if (!*str)
+                return *cmp ? -1 : 0;
+            if (!*cmp)
+                return 1;
+            if (_ismbblead_l(*str, locale))
+            {
+                strc = (len >= 2) ? _mbsnextc_l(str, locale) : 0;
+                clen = 2;
+            }
+            else
+            {
+                strc = *str;
+                clen = 1;
+            }
+            if (_ismbblead_l(*cmp, locale))
+                cmpc = (len >= 2) ? _mbsnextc_l(cmp, locale) : 0;
+            else
+                cmpc = *cmp;
+            strc = _mbctolower_l(strc, locale);
+            cmpc = _mbctolower_l(cmpc, locale);
+            if (strc != cmpc)
+                return strc < cmpc ? -1 : 1;
+            len -= clen;
+            str += clen;
+            cmp += clen;
+        }
+        return 0; /* Matched len bytes */
     }
-    return 0; /* Matched len bytes */
-  }
-  return u_strncasecmp(str,cmp,len);
+    return u_strncasecmp(str, cmp, len);
+}
+
+/*********************************************************************
+ *              _mbsnbicmp(MSVCRT.@)
+ */
+int CDECL _mbsnbicmp(const unsigned char* str, const unsigned char* cmp, size_t len)
+{
+    return _mbsnbicmp_l(str, cmp, len, NULL);
 }
 
 /*********************************************************************
diff --git a/dlls/msvcrt/msvcrt.spec b/dlls/msvcrt/msvcrt.spec
index 998bd7268ca..e62e221b2b3 100644
--- a/dlls/msvcrt/msvcrt.spec
+++ b/dlls/msvcrt/msvcrt.spec
@@ -759,7 +759,7 @@
 @ cdecl _mbsnbcpy_s(ptr long str long)
 @ cdecl _mbsnbcpy_s_l(ptr long str long ptr)
 @ cdecl _mbsnbicmp(str str long)
-# stub _mbsnbicmp_l(str str long ptr)
+@ cdecl _mbsnbicmp_l(str str long ptr)
 @ cdecl _mbsnbicoll(str str long)
 @ cdecl _mbsnbicoll_l(str str long ptr)
 @ cdecl _mbsnbset(ptr long long)
diff --git a/dlls/ucrtbase/ucrtbase.spec b/dlls/ucrtbase/ucrtbase.spec
index 25c3e5ac766..1ed734b76d8 100644
--- a/dlls/ucrtbase/ucrtbase.spec
+++ b/dlls/ucrtbase/ucrtbase.spec
@@ -654,7 +654,7 @@
 @ cdecl _mbsnbcpy_s(ptr long str long)
 @ cdecl _mbsnbcpy_s_l(ptr long str long ptr)
 @ cdecl _mbsnbicmp(str str long)
-@ stub _mbsnbicmp_l
+@ cdecl _mbsnbicmp_l(str str long ptr)
 @ cdecl _mbsnbicoll(str str long)
 @ cdecl _mbsnbicoll_l(str str long ptr)
 @ cdecl _mbsnbset(ptr long long)
@@ -1223,7 +1223,7 @@
 @ cdecl _o__mbsnbcpy_s(ptr long str long) _mbsnbcpy_s
 @ cdecl _o__mbsnbcpy_s_l(ptr long str long ptr) _mbsnbcpy_s_l
 @ cdecl _o__mbsnbicmp(str str long) _mbsnbicmp
-@ stub _o__mbsnbicmp_l
+@ cdecl _o__mbsnbicmp_l(str str long ptr) _mbsnbicmp_l
 @ cdecl _o__mbsnbicoll(str str long) _mbsnbicoll
 @ cdecl _o__mbsnbicoll_l(str str long ptr) _mbsnbicoll_l
 @ cdecl _o__mbsnbset(ptr long long) _mbsnbset
-- 
GitLab


From 12a00363f68fd12f3a1319eba7ccbce95df4e275 Mon Sep 17 00:00:00 2001
From: Bartosz Kosiorek <gang65@poczta.onet.pl>
Date: Mon, 6 Nov 2023 20:35:53 +0100
Subject: [PATCH 4/7] msvcrt: Add _mbsnbset_l implementation.

---
 dlls/msvcr100/msvcr100.spec |  2 +-
 dlls/msvcr110/msvcr110.spec |  2 +-
 dlls/msvcr120/msvcr120.spec |  2 +-
 dlls/msvcr80/msvcr80.spec   |  2 +-
 dlls/msvcr90/msvcr90.spec   |  2 +-
 dlls/msvcrt/mbcs.c          | 45 +++++++++++++++++++++++++------------
 dlls/msvcrt/msvcrt.spec     |  2 +-
 dlls/ucrtbase/ucrtbase.spec |  4 ++--
 8 files changed, 39 insertions(+), 22 deletions(-)

diff --git a/dlls/msvcr100/msvcr100.spec b/dlls/msvcr100/msvcr100.spec
index 2e607207780..121ff766807 100644
--- a/dlls/msvcr100/msvcr100.spec
+++ b/dlls/msvcr100/msvcr100.spec
@@ -1142,7 +1142,7 @@
 @ cdecl _mbsnbicoll(str str long)
 @ cdecl _mbsnbicoll_l(str str long ptr)
 @ cdecl _mbsnbset(ptr long long)
-@ stub _mbsnbset_l
+@ cdecl _mbsnbset_l(str long long ptr)
 @ stub _mbsnbset_s
 @ stub _mbsnbset_s_l
 @ cdecl _mbsncat(str str long)
diff --git a/dlls/msvcr110/msvcr110.spec b/dlls/msvcr110/msvcr110.spec
index 4c552a2a80f..b14ed43cb3b 100644
--- a/dlls/msvcr110/msvcr110.spec
+++ b/dlls/msvcr110/msvcr110.spec
@@ -1499,7 +1499,7 @@
 @ cdecl _mbsnbicoll(str str long)
 @ cdecl _mbsnbicoll_l(str str long ptr)
 @ cdecl _mbsnbset(ptr long long)
-@ stub _mbsnbset_l
+@ cdecl _mbsnbset_l(str long long ptr)
 @ stub _mbsnbset_s
 @ stub _mbsnbset_s_l
 @ cdecl _mbsncat(str str long)
diff --git a/dlls/msvcr120/msvcr120.spec b/dlls/msvcr120/msvcr120.spec
index d60c97a53fc..0aa7cafb660 100644
--- a/dlls/msvcr120/msvcr120.spec
+++ b/dlls/msvcr120/msvcr120.spec
@@ -1510,7 +1510,7 @@
 @ cdecl _mbsnbicoll(str str long)
 @ cdecl _mbsnbicoll_l(str str long ptr)
 @ cdecl _mbsnbset(ptr long long)
-@ stub _mbsnbset_l
+@ cdecl _mbsnbset_l(str long long ptr)
 @ stub _mbsnbset_s
 @ stub _mbsnbset_s_l
 @ cdecl _mbsncat(str str long)
diff --git a/dlls/msvcr80/msvcr80.spec b/dlls/msvcr80/msvcr80.spec
index d718ec58cb4..52a9fbce0dc 100644
--- a/dlls/msvcr80/msvcr80.spec
+++ b/dlls/msvcr80/msvcr80.spec
@@ -814,7 +814,7 @@
 @ cdecl _mbsnbicoll(str str long)
 @ cdecl _mbsnbicoll_l(str str long ptr)
 @ cdecl _mbsnbset(ptr long long)
-@ stub _mbsnbset_l
+@ cdecl _mbsnbset_l(str long long ptr)
 @ stub _mbsnbset_s
 @ stub _mbsnbset_s_l
 @ cdecl _mbsncat(str str long)
diff --git a/dlls/msvcr90/msvcr90.spec b/dlls/msvcr90/msvcr90.spec
index d3b51e6cdac..78521a857ae 100644
--- a/dlls/msvcr90/msvcr90.spec
+++ b/dlls/msvcr90/msvcr90.spec
@@ -792,7 +792,7 @@
 @ cdecl _mbsnbicoll(str str long)
 @ cdecl _mbsnbicoll_l(str str long ptr)
 @ cdecl _mbsnbset(ptr long long)
-@ stub _mbsnbset_l
+@ cdecl _mbsnbset_l(str long long ptr)
 @ stub _mbsnbset_s
 @ stub _mbsnbset_s_l
 @ cdecl _mbsncat(str str long)
diff --git a/dlls/msvcrt/mbcs.c b/dlls/msvcrt/mbcs.c
index e75a02e0193..2d492197452 100644
--- a/dlls/msvcrt/mbcs.c
+++ b/dlls/msvcrt/mbcs.c
@@ -2200,35 +2200,52 @@ unsigned char* CDECL _mbsset(unsigned char* str, unsigned int c)
 }
 
 /*********************************************************************
- *		_mbsnbset(MSVCRT.@)
+ *		_mbsnbset_l(MSVCRT.@)
  */
-unsigned char* CDECL _mbsnbset(unsigned char *str, unsigned int c, size_t len)
+unsigned char* CDECL _mbsnbset_l(unsigned char *str, unsigned int c, size_t len, _locale_t locale)
 {
     unsigned char *ret = str;
+    pthreadmbcinfo mbcinfo;
 
-    if(!len)
-	return ret;
+    if (!len)
+        return ret;
+    if (!MSVCRT_CHECK_PMT(str))
+        return NULL;
+
+    if (locale)
+        mbcinfo = locale->mbcinfo;
+    else
+        mbcinfo = get_mbcinfo();
 
-    if(!get_mbcinfo()->ismbcodepage || c < 256)
-	return u__strnset(str, c, len); /* ASCII CP or SB char */
+    if (!mbcinfo->ismbcodepage || c < 256)
+        return u__strnset(str, c, len); /* ASCII CP or SB char */
 
     c &= 0xffff; /* Strip high bits */
 
-    while(str[0] && str[1] && (len > 1))
+    while (str[0] && str[1] && (len > 1))
     {
-	*str++ = c >> 8;
-	len--;
-	*str++ = c & 0xff;
-	len--;
+        *str++ = c >> 8;
+        len--;
+        *str++ = c & 0xff;
+        len--;
     }
-    if(len && str[0]) {
-	/* as per msdn pad with a blank character */
-	str[0] = ' ';
+    if (len && str[0])
+    {
+        /* as per msdn pad with a blank character */
+        str[0] = ' ';
     }
 
     return ret;
 }
 
+/*********************************************************************
+ *		_mbsnbset(MSVCRT.@)
+ */
+unsigned char* CDECL _mbsnbset(unsigned char *str, unsigned int c, size_t len)
+{
+    return _mbsnbset_l(str, c, len, NULL);
+}
+
 /*********************************************************************
  *		_mbsnset(MSVCRT.@)
  */
diff --git a/dlls/msvcrt/msvcrt.spec b/dlls/msvcrt/msvcrt.spec
index e62e221b2b3..de58dd39a93 100644
--- a/dlls/msvcrt/msvcrt.spec
+++ b/dlls/msvcrt/msvcrt.spec
@@ -763,7 +763,7 @@
 @ cdecl _mbsnbicoll(str str long)
 @ cdecl _mbsnbicoll_l(str str long ptr)
 @ cdecl _mbsnbset(ptr long long)
-# stub _mbsnbset_l(str long long ptr)
+@ cdecl _mbsnbset_l(str long long ptr)
 # stub _mbsnbset_s(ptr long long long)
 # stub _mbsnbset_s_l(ptr long long long ptr)
 @ cdecl _mbsncat(str str long)
diff --git a/dlls/ucrtbase/ucrtbase.spec b/dlls/ucrtbase/ucrtbase.spec
index 1ed734b76d8..a18f5d6e397 100644
--- a/dlls/ucrtbase/ucrtbase.spec
+++ b/dlls/ucrtbase/ucrtbase.spec
@@ -658,7 +658,7 @@
 @ cdecl _mbsnbicoll(str str long)
 @ cdecl _mbsnbicoll_l(str str long ptr)
 @ cdecl _mbsnbset(ptr long long)
-@ stub _mbsnbset_l
+@ cdecl _mbsnbset_l(str long long ptr)
 @ stub _mbsnbset_s
 @ stub _mbsnbset_s_l
 @ cdecl _mbsncat(str str long)
@@ -1227,7 +1227,7 @@
 @ cdecl _o__mbsnbicoll(str str long) _mbsnbicoll
 @ cdecl _o__mbsnbicoll_l(str str long ptr) _mbsnbicoll_l
 @ cdecl _o__mbsnbset(ptr long long) _mbsnbset
-@ stub _o__mbsnbset_l
+@ cdecl _o__mbsnbset_l(str long long ptr) _mbsnbset_l
 @ stub _o__mbsnbset_s
 @ stub _o__mbsnbset_s_l
 @ cdecl _o__mbsncat(str str long) _mbsncat
-- 
GitLab


From a67a08895f7ae6e44543bfa4a05b10df7c253f08 Mon Sep 17 00:00:00 2001
From: Bartosz Kosiorek <gang65@poczta.onet.pl>
Date: Mon, 6 Nov 2023 20:47:19 +0100
Subject: [PATCH 5/7] msvcrt: Add _mbsncat_l implementation.

---
 dlls/msvcr100/msvcr100.spec |  2 +-
 dlls/msvcr110/msvcr110.spec |  2 +-
 dlls/msvcr120/msvcr120.spec |  2 +-
 dlls/msvcr80/msvcr80.spec   |  2 +-
 dlls/msvcr90/msvcr90.spec   |  2 +-
 dlls/msvcrt/mbcs.c          | 56 +++++++++++++++++++++++++------------
 dlls/msvcrt/msvcrt.spec     |  2 +-
 dlls/ucrtbase/ucrtbase.spec |  4 +--
 8 files changed, 46 insertions(+), 26 deletions(-)

diff --git a/dlls/msvcr100/msvcr100.spec b/dlls/msvcr100/msvcr100.spec
index 121ff766807..565689ac6ab 100644
--- a/dlls/msvcr100/msvcr100.spec
+++ b/dlls/msvcr100/msvcr100.spec
@@ -1146,7 +1146,7 @@
 @ stub _mbsnbset_s
 @ stub _mbsnbset_s_l
 @ cdecl _mbsncat(str str long)
-@ stub _mbsncat_l
+@ cdecl _mbsncat_l(str str long ptr)
 @ stub _mbsncat_s
 @ stub _mbsncat_s_l
 @ cdecl _mbsnccnt(str long)
diff --git a/dlls/msvcr110/msvcr110.spec b/dlls/msvcr110/msvcr110.spec
index b14ed43cb3b..bc143f34505 100644
--- a/dlls/msvcr110/msvcr110.spec
+++ b/dlls/msvcr110/msvcr110.spec
@@ -1503,7 +1503,7 @@
 @ stub _mbsnbset_s
 @ stub _mbsnbset_s_l
 @ cdecl _mbsncat(str str long)
-@ stub _mbsncat_l
+@ cdecl _mbsncat_l(str str long ptr)
 @ stub _mbsncat_s
 @ stub _mbsncat_s_l
 @ cdecl _mbsnccnt(str long)
diff --git a/dlls/msvcr120/msvcr120.spec b/dlls/msvcr120/msvcr120.spec
index 0aa7cafb660..cd76f568557 100644
--- a/dlls/msvcr120/msvcr120.spec
+++ b/dlls/msvcr120/msvcr120.spec
@@ -1514,7 +1514,7 @@
 @ stub _mbsnbset_s
 @ stub _mbsnbset_s_l
 @ cdecl _mbsncat(str str long)
-@ stub _mbsncat_l
+@ cdecl _mbsncat_l(str str long ptr)
 @ stub _mbsncat_s
 @ stub _mbsncat_s_l
 @ cdecl _mbsnccnt(str long)
diff --git a/dlls/msvcr80/msvcr80.spec b/dlls/msvcr80/msvcr80.spec
index 52a9fbce0dc..5bc963edf57 100644
--- a/dlls/msvcr80/msvcr80.spec
+++ b/dlls/msvcr80/msvcr80.spec
@@ -818,7 +818,7 @@
 @ stub _mbsnbset_s
 @ stub _mbsnbset_s_l
 @ cdecl _mbsncat(str str long)
-@ stub _mbsncat_l
+@ cdecl _mbsncat_l(str str long ptr)
 @ stub _mbsncat_s
 @ stub _mbsncat_s_l
 @ cdecl _mbsnccnt(str long)
diff --git a/dlls/msvcr90/msvcr90.spec b/dlls/msvcr90/msvcr90.spec
index 78521a857ae..a7f47e568c7 100644
--- a/dlls/msvcr90/msvcr90.spec
+++ b/dlls/msvcr90/msvcr90.spec
@@ -796,7 +796,7 @@
 @ stub _mbsnbset_s
 @ stub _mbsnbset_s_l
 @ cdecl _mbsncat(str str long)
-@ stub _mbsncat_l
+@ cdecl _mbsncat_l(str str long ptr)
 @ stub _mbsncat_s
 @ stub _mbsncat_s_l
 @ cdecl _mbsnccnt(str long)
diff --git a/dlls/msvcrt/mbcs.c b/dlls/msvcrt/mbcs.c
index 2d492197452..77ced6e8a3e 100644
--- a/dlls/msvcrt/mbcs.c
+++ b/dlls/msvcrt/mbcs.c
@@ -2457,30 +2457,50 @@ int CDECL _mbsnbcat_s(unsigned char *dst, size_t size, const unsigned char *src,
 }
 
 /*********************************************************************
- *		_mbsncat(MSVCRT.@)
+ *		_mbsncat_l(MSVCRT.@)
  */
-unsigned char* CDECL _mbsncat(unsigned char* dst, const unsigned char* src, size_t len)
+unsigned char* CDECL _mbsncat_l(unsigned char* dst, const unsigned char* src, size_t len, _locale_t locale)
 {
-  if(get_mbcinfo()->ismbcodepage)
-  {
-    unsigned char *res = dst;
-    while (*dst)
-    {
-      if (_ismbblead(*dst++))
-        dst++;
-    }
-    while (*src && len--)
+    pthreadmbcinfo mbcinfo;
+
+    if (!len)
+        return dst;
+
+    if (!MSVCRT_CHECK_PMT(dst && src))
+        return NULL;
+
+    if (locale)
+        mbcinfo = locale->mbcinfo;
+    else
+        mbcinfo = get_mbcinfo();
+
+    if (mbcinfo->ismbcodepage)
     {
-      *dst++ = *src;
-      if(_ismbblead(*src++))
-        *dst++ = *src++;
+        unsigned char *res = dst;
+        while (*dst)
+        {
+            if (_ismbblead_l(*dst++, locale))
+                dst++;
+        }
+        while (*src && len--)
+        {
+            *dst++ = *src;
+            if (_ismbblead_l(*src++, locale))
+                *dst++ = *src++;
+        }
+        *dst = '\0';
+        return res;
     }
-    *dst = '\0';
-    return res;
-  }
-  return u_strncat(dst, src, len); /* ASCII CP */
+    return u_strncat(dst, src, len); /* ASCII CP */
 }
 
+/*********************************************************************
+ *		_mbsncat(MSVCRT.@)
+ */
+unsigned char* CDECL _mbsncat(unsigned char* dst, const unsigned char* src, size_t len)
+{
+    return _mbsncat_l(dst, src, len, NULL);
+}
 
 /*********************************************************************
  *              _mbslwr_l(MSVCRT.@)
diff --git a/dlls/msvcrt/msvcrt.spec b/dlls/msvcrt/msvcrt.spec
index de58dd39a93..ff6f14b884f 100644
--- a/dlls/msvcrt/msvcrt.spec
+++ b/dlls/msvcrt/msvcrt.spec
@@ -767,7 +767,7 @@
 # stub _mbsnbset_s(ptr long long long)
 # stub _mbsnbset_s_l(ptr long long long ptr)
 @ cdecl _mbsncat(str str long)
-# stub _mbsncat_l(str str long ptr)
+@ cdecl _mbsncat_l(str str long ptr)
 # stub _mbsncat_s(str long str long)
 # stub _mbsncat_s_l(str long str long ptr)
 @ cdecl _mbsnccnt(str long)
diff --git a/dlls/ucrtbase/ucrtbase.spec b/dlls/ucrtbase/ucrtbase.spec
index a18f5d6e397..91c54e1a31c 100644
--- a/dlls/ucrtbase/ucrtbase.spec
+++ b/dlls/ucrtbase/ucrtbase.spec
@@ -662,7 +662,7 @@
 @ stub _mbsnbset_s
 @ stub _mbsnbset_s_l
 @ cdecl _mbsncat(str str long)
-@ stub _mbsncat_l
+@ cdecl _mbsncat_l(str str long ptr)
 @ stub _mbsncat_s
 @ stub _mbsncat_s_l
 @ cdecl _mbsnccnt(str long)
@@ -1231,7 +1231,7 @@
 @ stub _o__mbsnbset_s
 @ stub _o__mbsnbset_s_l
 @ cdecl _o__mbsncat(str str long) _mbsncat
-@ stub _o__mbsncat_l
+@ cdecl _o__mbsncat_l(str str long ptr) _mbsncat_l
 @ stub _o__mbsncat_s
 @ stub _o__mbsncat_s_l
 @ cdecl _o__mbsnccnt(str long) _mbsnccnt
-- 
GitLab


From fa2248ccf9be79b331c4b241362967d8b430da0d Mon Sep 17 00:00:00 2001
From: Bartosz Kosiorek <gang65@poczta.onet.pl>
Date: Mon, 6 Nov 2023 20:54:32 +0100
Subject: [PATCH 6/7] msvcrt: Add _mbsnccnt_l implementation.

---
 dlls/msvcr100/msvcr100.spec |  2 +-
 dlls/msvcr110/msvcr110.spec |  2 +-
 dlls/msvcr120/msvcr120.spec |  2 +-
 dlls/msvcr80/msvcr80.spec   |  2 +-
 dlls/msvcr90/msvcr90.spec   |  2 +-
 dlls/msvcrt/mbcs.c          | 61 +++++++++++++++++++++++++------------
 dlls/msvcrt/msvcrt.spec     |  2 +-
 dlls/ucrtbase/ucrtbase.spec |  4 +--
 8 files changed, 49 insertions(+), 28 deletions(-)

diff --git a/dlls/msvcr100/msvcr100.spec b/dlls/msvcr100/msvcr100.spec
index 565689ac6ab..4f84a92d712 100644
--- a/dlls/msvcr100/msvcr100.spec
+++ b/dlls/msvcr100/msvcr100.spec
@@ -1150,7 +1150,7 @@
 @ stub _mbsncat_s
 @ stub _mbsncat_s_l
 @ cdecl _mbsnccnt(str long)
-@ stub _mbsnccnt_l
+@ cdecl _mbsnccnt_l(str long ptr)
 @ cdecl _mbsncmp(str str long)
 @ stub _mbsncmp_l
 @ stub _mbsncoll(str str long)
diff --git a/dlls/msvcr110/msvcr110.spec b/dlls/msvcr110/msvcr110.spec
index bc143f34505..c65a154c77d 100644
--- a/dlls/msvcr110/msvcr110.spec
+++ b/dlls/msvcr110/msvcr110.spec
@@ -1507,7 +1507,7 @@
 @ stub _mbsncat_s
 @ stub _mbsncat_s_l
 @ cdecl _mbsnccnt(str long)
-@ stub _mbsnccnt_l
+@ cdecl _mbsnccnt_l(str long ptr)
 @ cdecl _mbsncmp(str str long)
 @ stub _mbsncmp_l
 @ stub _mbsncoll(str str long)
diff --git a/dlls/msvcr120/msvcr120.spec b/dlls/msvcr120/msvcr120.spec
index cd76f568557..19814e9dc6b 100644
--- a/dlls/msvcr120/msvcr120.spec
+++ b/dlls/msvcr120/msvcr120.spec
@@ -1518,7 +1518,7 @@
 @ stub _mbsncat_s
 @ stub _mbsncat_s_l
 @ cdecl _mbsnccnt(str long)
-@ stub _mbsnccnt_l
+@ cdecl _mbsnccnt_l(str long ptr)
 @ cdecl _mbsncmp(str str long)
 @ stub _mbsncmp_l
 @ stub _mbsncoll(str str long)
diff --git a/dlls/msvcr80/msvcr80.spec b/dlls/msvcr80/msvcr80.spec
index 5bc963edf57..be691c2a4e9 100644
--- a/dlls/msvcr80/msvcr80.spec
+++ b/dlls/msvcr80/msvcr80.spec
@@ -822,7 +822,7 @@
 @ stub _mbsncat_s
 @ stub _mbsncat_s_l
 @ cdecl _mbsnccnt(str long)
-@ stub _mbsnccnt_l
+@ cdecl _mbsnccnt_l(str long ptr)
 @ cdecl _mbsncmp(str str long)
 @ stub _mbsncmp_l
 @ stub _mbsncoll(str str long)
diff --git a/dlls/msvcr90/msvcr90.spec b/dlls/msvcr90/msvcr90.spec
index a7f47e568c7..ba0ff67b362 100644
--- a/dlls/msvcr90/msvcr90.spec
+++ b/dlls/msvcr90/msvcr90.spec
@@ -800,7 +800,7 @@
 @ stub _mbsncat_s
 @ stub _mbsncat_s_l
 @ cdecl _mbsnccnt(str long)
-@ stub _mbsnccnt_l
+@ cdecl _mbsnccnt_l(str long ptr)
 @ cdecl _mbsncmp(str str long)
 @ stub _mbsncmp_l
 @ stub _mbsncoll(str str long)
diff --git a/dlls/msvcrt/mbcs.c b/dlls/msvcrt/mbcs.c
index 77ced6e8a3e..f8b0d238f4f 100644
--- a/dlls/msvcrt/mbcs.c
+++ b/dlls/msvcrt/mbcs.c
@@ -2273,31 +2273,52 @@ unsigned char* CDECL _mbsnset(unsigned char* str, unsigned int c, size_t len)
 }
 
 /*********************************************************************
- *		_mbsnccnt(MSVCRT.@)
+ *		_mbsnccnt_l(MSVCRT.@)
  * 'c' is for 'character'.
  */
-size_t CDECL _mbsnccnt(const unsigned char* str, size_t len)
+size_t CDECL _mbsnccnt_l(const unsigned char* str, size_t len, _locale_t locale)
 {
-  size_t ret;
-  if(get_mbcinfo()->ismbcodepage)
-  {
-    ret=0;
-    while(*str && len-- > 0)
+    size_t ret;
+    pthreadmbcinfo mbcinfo;
+
+    if (!len)
+        return 0;
+    if (!MSVCRT_CHECK_PMT(str))
+        return 0;
+
+    if (locale)
+        mbcinfo = locale->mbcinfo;
+    else
+        mbcinfo = get_mbcinfo();
+
+    if (mbcinfo->ismbcodepage)
     {
-      if(_ismbblead(*str))
-      {
-        if (!len)
-          break;
-        len--;
-        str++;
-      }
-      str++;
-      ret++;
+        ret = 0;
+        while (*str && len-- > 0)
+        {
+            if (_ismbblead_l(*str, locale))
+            {
+                if (!len)
+                    break;
+                len--;
+                str++;
+            }
+            str++;
+            ret++;
+        }
+        return ret;
     }
-    return ret;
-  }
-  ret=u_strlen(str);
-  return min(ret, len); /* ASCII CP */
+    ret = u_strlen(str);
+    return min(ret, len); /* ASCII CP */
+}
+
+/*********************************************************************
+ *		_mbsnccnt(MSVCRT.@)
+ * 'c' is for 'character'.
+ */
+size_t CDECL _mbsnccnt(const unsigned char* str, size_t len)
+{
+    return _mbsnccnt_l(str, len, NULL);
 }
 
 /*********************************************************************
diff --git a/dlls/msvcrt/msvcrt.spec b/dlls/msvcrt/msvcrt.spec
index ff6f14b884f..f316e4f3885 100644
--- a/dlls/msvcrt/msvcrt.spec
+++ b/dlls/msvcrt/msvcrt.spec
@@ -771,7 +771,7 @@
 # stub _mbsncat_s(str long str long)
 # stub _mbsncat_s_l(str long str long ptr)
 @ cdecl _mbsnccnt(str long)
-# stub _mbsnccnt_l(str long ptr)
+@ cdecl _mbsnccnt_l(str long ptr)
 @ cdecl _mbsncmp(str str long)
 # stub _mbsncmp_l(str str long ptr)
 @ stub _mbsncoll(str str long)
diff --git a/dlls/ucrtbase/ucrtbase.spec b/dlls/ucrtbase/ucrtbase.spec
index 91c54e1a31c..45a92bdf94f 100644
--- a/dlls/ucrtbase/ucrtbase.spec
+++ b/dlls/ucrtbase/ucrtbase.spec
@@ -666,7 +666,7 @@
 @ stub _mbsncat_s
 @ stub _mbsncat_s_l
 @ cdecl _mbsnccnt(str long)
-@ stub _mbsnccnt_l
+@ cdecl _mbsnccnt_l(str long ptr)
 @ cdecl _mbsncmp(str str long)
 @ stub _mbsncmp_l
 @ stub _mbsncoll(str str long)
@@ -1235,7 +1235,7 @@
 @ stub _o__mbsncat_s
 @ stub _o__mbsncat_s_l
 @ cdecl _o__mbsnccnt(str long) _mbsnccnt
-@ stub _o__mbsnccnt_l
+@ cdecl _o__mbsnccnt_l(str long ptr) _mbsnccnt_l
 @ cdecl _o__mbsncmp(str str long) _mbsncmp
 @ stub _o__mbsncmp_l
 @ stub _o__mbsncoll
-- 
GitLab


From b0c31c0983c4b992f5df6e0a4745d266f12e2f75 Mon Sep 17 00:00:00 2001
From: Bartosz Kosiorek <gang65@poczta.onet.pl>
Date: Mon, 6 Nov 2023 21:01:07 +0100
Subject: [PATCH 7/7] msvcrt: Add _mbsnset_l implementation.

---
 dlls/msvcr100/msvcr100.spec |  2 +-
 dlls/msvcr110/msvcr110.spec |  2 +-
 dlls/msvcr120/msvcr120.spec |  2 +-
 dlls/msvcr80/msvcr80.spec   |  2 +-
 dlls/msvcr90/msvcr90.spec   |  2 +-
 dlls/msvcrt/mbcs.c          | 46 +++++++++++++++++++++++++------------
 dlls/msvcrt/msvcrt.spec     |  2 +-
 dlls/ucrtbase/ucrtbase.spec |  4 ++--
 8 files changed, 39 insertions(+), 23 deletions(-)

diff --git a/dlls/msvcr100/msvcr100.spec b/dlls/msvcr100/msvcr100.spec
index 4f84a92d712..88558752607 100644
--- a/dlls/msvcr100/msvcr100.spec
+++ b/dlls/msvcr100/msvcr100.spec
@@ -1170,7 +1170,7 @@
 @ cdecl _mbsnlen(str long)
 @ cdecl _mbsnlen_l(str long ptr)
 @ cdecl _mbsnset(ptr long long)
-@ stub _mbsnset_l
+@ cdecl _mbsnset_l(ptr long long ptr)
 @ stub _mbsnset_s
 @ stub _mbsnset_s_l
 @ cdecl _mbspbrk(str str)
diff --git a/dlls/msvcr110/msvcr110.spec b/dlls/msvcr110/msvcr110.spec
index c65a154c77d..1937ffc9efb 100644
--- a/dlls/msvcr110/msvcr110.spec
+++ b/dlls/msvcr110/msvcr110.spec
@@ -1527,7 +1527,7 @@
 @ cdecl _mbsnlen(str long)
 @ cdecl _mbsnlen_l(str long ptr)
 @ cdecl _mbsnset(ptr long long)
-@ stub _mbsnset_l
+@ cdecl _mbsnset_l(ptr long long ptr)
 @ stub _mbsnset_s
 @ stub _mbsnset_s_l
 @ cdecl _mbspbrk(str str)
diff --git a/dlls/msvcr120/msvcr120.spec b/dlls/msvcr120/msvcr120.spec
index 19814e9dc6b..462a42b719b 100644
--- a/dlls/msvcr120/msvcr120.spec
+++ b/dlls/msvcr120/msvcr120.spec
@@ -1538,7 +1538,7 @@
 @ cdecl _mbsnlen(str long)
 @ cdecl _mbsnlen_l(str long ptr)
 @ cdecl _mbsnset(ptr long long)
-@ stub _mbsnset_l
+@ cdecl _mbsnset_l(ptr long long ptr)
 @ stub _mbsnset_s
 @ stub _mbsnset_s_l
 @ cdecl _mbspbrk(str str)
diff --git a/dlls/msvcr80/msvcr80.spec b/dlls/msvcr80/msvcr80.spec
index be691c2a4e9..822a43d5765 100644
--- a/dlls/msvcr80/msvcr80.spec
+++ b/dlls/msvcr80/msvcr80.spec
@@ -842,7 +842,7 @@
 @ cdecl _mbsnlen(str long)
 @ cdecl _mbsnlen_l(str long ptr)
 @ cdecl _mbsnset(ptr long long)
-@ stub _mbsnset_l
+@ cdecl _mbsnset_l(ptr long long ptr)
 @ stub _mbsnset_s
 @ stub _mbsnset_s_l
 @ cdecl _mbspbrk(str str)
diff --git a/dlls/msvcr90/msvcr90.spec b/dlls/msvcr90/msvcr90.spec
index ba0ff67b362..32075829392 100644
--- a/dlls/msvcr90/msvcr90.spec
+++ b/dlls/msvcr90/msvcr90.spec
@@ -820,7 +820,7 @@
 @ cdecl _mbsnlen(str long)
 @ cdecl _mbsnlen_l(str long ptr)
 @ cdecl _mbsnset(ptr long long)
-@ stub _mbsnset_l
+@ cdecl _mbsnset_l(ptr long long ptr)
 @ stub _mbsnset_s
 @ stub _mbsnset_s_l
 @ cdecl _mbspbrk(str str)
diff --git a/dlls/msvcrt/mbcs.c b/dlls/msvcrt/mbcs.c
index f8b0d238f4f..52b882a2fba 100644
--- a/dlls/msvcrt/mbcs.c
+++ b/dlls/msvcrt/mbcs.c
@@ -2249,27 +2249,43 @@ unsigned char* CDECL _mbsnbset(unsigned char *str, unsigned int c, size_t len)
 /*********************************************************************
  *		_mbsnset(MSVCRT.@)
  */
-unsigned char* CDECL _mbsnset(unsigned char* str, unsigned int c, size_t len)
+unsigned char* CDECL _mbsnset_l(unsigned char* str, unsigned int c, size_t len, _locale_t locale)
 {
-  unsigned char *ret = str;
+    unsigned char *ret = str;
+    pthreadmbcinfo mbcinfo;
 
-  if(!len)
-    return ret;
+    if (!len)
+        return ret;
+    if (!MSVCRT_CHECK_PMT(str))
+        return NULL;
 
-  if(!get_mbcinfo()->ismbcodepage || c < 256)
-    return u__strnset(str, c, len); /* ASCII CP or SB char */
+    if (locale)
+        mbcinfo = locale->mbcinfo;
+    else
+        mbcinfo = get_mbcinfo();
 
-  c &= 0xffff; /* Strip high bits */
+    if (!mbcinfo->ismbcodepage || c < 256)
+        return u__strnset(str, c, len); /* ASCII CP or SB char */
 
-  while(str[0] && str[1] && len--)
-  {
-    *str++ = c >> 8;
-    *str++ = c & 0xff;
-  }
-  if(len && str[0])
-    str[0] = '\0'; /* FIXME: OK to shorten? */
+    c &= 0xffff; /* Strip high bits */
 
-  return ret;
+    while (str[0] && str[1] && len--)
+    {
+        *str++ = c >> 8;
+        *str++ = c & 0xff;
+    }
+    if (len && str[0])
+        str[0] = '\0'; /* FIXME: OK to shorten? */
+
+    return ret;
+}
+
+/*********************************************************************
+ *		_mbsnset(MSVCRT.@)
+ */
+unsigned char* CDECL _mbsnset(unsigned char* str, unsigned int c, size_t len)
+{
+    return _mbsnset_l(str, c, len, NULL);
 }
 
 /*********************************************************************
diff --git a/dlls/msvcrt/msvcrt.spec b/dlls/msvcrt/msvcrt.spec
index f316e4f3885..430e0f9d5af 100644
--- a/dlls/msvcrt/msvcrt.spec
+++ b/dlls/msvcrt/msvcrt.spec
@@ -791,7 +791,7 @@
 @ cdecl _mbsnlen(str long)
 @ cdecl _mbsnlen_l(str long ptr)
 @ cdecl _mbsnset(ptr long long)
-# stub _mbsnset_l(ptr long long ptr)
+@ cdecl _mbsnset_l(ptr long long ptr)
 # stub _mbsnset_s(ptr long long long)
 # stub _mbsnset_s_l(ptr long long long ptr)
 @ cdecl _mbspbrk(str str)
diff --git a/dlls/ucrtbase/ucrtbase.spec b/dlls/ucrtbase/ucrtbase.spec
index 45a92bdf94f..75f21a447c7 100644
--- a/dlls/ucrtbase/ucrtbase.spec
+++ b/dlls/ucrtbase/ucrtbase.spec
@@ -686,7 +686,7 @@
 @ cdecl _mbsnlen(str long)
 @ cdecl _mbsnlen_l(str long ptr)
 @ cdecl _mbsnset(ptr long long)
-@ stub _mbsnset_l
+@ cdecl _mbsnset_l(ptr long long ptr)
 @ stub _mbsnset_s
 @ stub _mbsnset_s_l
 @ cdecl _mbspbrk(str str)
@@ -1255,7 +1255,7 @@
 @ cdecl _o__mbsnlen(str long) _mbsnlen
 @ cdecl _o__mbsnlen_l(str long ptr) _mbsnlen_l
 @ cdecl _o__mbsnset(ptr long long) _mbsnset
-@ stub _o__mbsnset_l
+@ cdecl _o__mbsnset_l(ptr long long ptr) _mbsnset_l
 @ stub _o__mbsnset_s
 @ stub _o__mbsnset_s_l
 @ cdecl _o__mbspbrk(str str) _mbspbrk
-- 
GitLab

From 2e02cee9c43c9a2e44547a926443ecf0e7bf88bb Mon Sep 17 00:00:00 2001
From: Jacek Caban <jacek@codeweavers.com>
Date: Wed, 8 Nov 2023 19:45:56 +0100
Subject: [PATCH 1/2] msvcrt/tests: Don't define structs types inside other
 struct declaration.

Fixes -Wincompatible-pointer-types clang warnings.
---
 dlls/msvcrt/tests/cpp.c | 49 ++++++++++++++++++++++-------------------
 1 file changed, 26 insertions(+), 23 deletions(-)

diff --git a/dlls/msvcrt/tests/cpp.c b/dlls/msvcrt/tests/cpp.c
index e5fa652ede2..2dec315ba68 100644
--- a/dlls/msvcrt/tests/cpp.c
+++ b/dlls/msvcrt/tests/cpp.c
@@ -891,33 +891,36 @@ static void test_rtti(void)
       DEFINE_RTTI_REF(void, object_locator);
   } *obj_locator;
 
+  struct _rtti_base_descriptor
+  {
+    DEFINE_RTTI_REF(type_info, type_descriptor);
+    int num_base_classes;
+    struct {
+      int this_offset;
+      int vbase_descr;
+      int vbase_offset;
+    } this_ptr_offsets;
+    unsigned int attributes;
+  };
+
+  struct _rtti_base_array {
+    DEFINE_RTTI_REF(struct _rtti_base_descriptor, bases[4]);
+  };
+
+  struct _rtti_object_hierarchy {
+    unsigned int signature;
+    unsigned int attributes;
+    int array_len;
+    DEFINE_RTTI_REF(struct _rtti_base_array, base_classes);
+  };
+
   struct rtti_data
   {
     type_info type_info[4];
 
-    struct _rtti_base_descriptor
-    {
-      DEFINE_RTTI_REF(type_info, type_descriptor);
-      int num_base_classes;
-      struct {
-        int this_offset;
-        int vbase_descr;
-        int vbase_offset;
-      } this_ptr_offsets;
-      unsigned int attributes;
-    } base_descriptor[4];
-
-    struct _rtti_base_array {
-      DEFINE_RTTI_REF(struct _rtti_base_descriptor, bases[4]);
-    } base_array;
-
-    struct _rtti_object_hierarchy {
-      unsigned int signature;
-      unsigned int attributes;
-      int array_len;
-      DEFINE_RTTI_REF(struct _rtti_base_array, base_classes);
-    } object_hierarchy;
-
+    struct _rtti_base_descriptor base_descriptor[4];
+    struct _rtti_base_array base_array;
+    struct _rtti_object_hierarchy  object_hierarchy;
     struct _object_locator object_locator;
   } simple_class_rtti = {
     { {NULL, NULL, "simple_class"} },
-- 
GitLab


From 38d1002cec5319c890501c95abd66a41d5d82955 Mon Sep 17 00:00:00 2001
From: Jacek Caban <jacek@codeweavers.com>
Date: Thu, 9 Nov 2023 10:09:20 +0100
Subject: [PATCH 2/2] msvcp60: Use char type for FROZEN macro.

Fixes clang warning:
string.c:370:25: warning: implicit conversion from 'int' to 'char' changes value from 255 to -1 [-Wconstant-conversion]
---
 dlls/msvcp60/string.c | 17 +++++++++--------
 1 file changed, 9 insertions(+), 8 deletions(-)

diff --git a/dlls/msvcp60/string.c b/dlls/msvcp60/string.c
index 45b7a57f961..253b13b7dbe 100644
--- a/dlls/msvcp60/string.c
+++ b/dlls/msvcp60/string.c
@@ -27,7 +27,8 @@
 #include "wine/debug.h"
 WINE_DEFAULT_DEBUG_CHANNEL(msvcp);
 
-#define FROZEN 255
+#define FROZEN '\xff'
+#define FROZENW L'\xff'
 
 /* _String_iterator<char> and _String_const_iterator<char> class */
 typedef struct {
@@ -282,7 +283,7 @@ void __thiscall basic_string_char__Tidy(basic_string_char *this, bool built)
     TRACE("(%p %d)\n", this, built);
 
     if(!built || !this->ptr);
-    else if(!this->ptr[-1] || (unsigned char)this->ptr[-1]==FROZEN)
+    else if(!this->ptr[-1] || this->ptr[-1]==FROZEN)
         MSVCP_allocator_char_deallocate(NULL, this->ptr-1, this->res+2);
     else
         this->ptr[-1]--;
@@ -301,7 +302,7 @@ bool __thiscall basic_string_char__Grow(basic_string_char *this, size_t new_size
         else if(this->ptr)
             basic_string_char__Eos(this, 0);
     } else if(this->res<new_size || trim ||
-            (this->ptr && this->ptr[-1] && (unsigned char)this->ptr[-1]!=FROZEN)) {
+            (this->ptr && this->ptr[-1] && this->ptr[-1]!=FROZEN)) {
         size_t new_res = new_size, len = this->size;
         char *ptr;
 
@@ -346,7 +347,7 @@ void __thiscall basic_string_char__Split(basic_string_char *this)
 
     TRACE("(%p)\n", this);
 
-    if(!this->ptr || !this->ptr[-1] || (unsigned char)this->ptr[-1]==FROZEN)
+    if(!this->ptr || !this->ptr[-1] || this->ptr[-1]==FROZEN)
         return;
 
     ptr = this->ptr;
@@ -1814,7 +1815,7 @@ void __thiscall basic_string_wchar__Tidy(basic_string_wchar *this, bool built)
     TRACE("(%p %d)\n", this, built);
 
     if(!built || !this->ptr);
-    else if(!this->ptr[-1] || (unsigned short)this->ptr[-1]==FROZEN)
+    else if(!this->ptr[-1] || this->ptr[-1]==FROZENW)
         MSVCP_allocator_wchar_deallocate(NULL, this->ptr-1, this->res+2);
     else
         this->ptr[-1]--;
@@ -1833,7 +1834,7 @@ bool __thiscall basic_string_wchar__Grow(basic_string_wchar *this, size_t new_si
         else if(this->ptr)
             basic_string_wchar__Eos(this, 0);
     } else if(this->res<new_size || trim ||
-            (this->ptr && this->ptr[-1] && (unsigned short)this->ptr[-1]!=FROZEN)) {
+            (this->ptr && this->ptr[-1] && this->ptr[-1]!=FROZENW)) {
         size_t new_res = new_size, len = this->size;
         wchar_t *ptr;
 
@@ -1878,7 +1879,7 @@ void __thiscall basic_string_wchar__Split(basic_string_wchar *this)
 
     TRACE("(%p)\n", this);
 
-    if(!this->ptr || !this->ptr[-1] || (unsigned short)this->ptr[-1]==FROZEN)
+    if(!this->ptr || !this->ptr[-1] || this->ptr[-1]==FROZENW)
         return;
 
     ptr = this->ptr;
@@ -1899,7 +1900,7 @@ void __thiscall basic_string_wchar__Freeze(basic_string_wchar *this)
     TRACE("(%p)\n", this);
     basic_string_wchar__Split(this);
     if(this->ptr)
-        this->ptr[-1] = FROZEN;
+        this->ptr[-1] = FROZENW;
 }
 
 /* ?_Copy@?$basic_string@GU?$char_traits@G@std@@V?$allocator@G@2@@std@@AAEXI@Z */
-- 
GitLab

From ec4a5f63e14f97eaa4ef67881ab41093feebec97 Mon Sep 17 00:00:00 2001
From: Bartosz Kosiorek <gang65@poczta.onet.pl>
Date: Tue, 7 Nov 2023 23:06:17 +0100
Subject: [PATCH 1/7] msvcrt: Add _mbspbrk_l implementation.

---
 dlls/msvcr100/msvcr100.spec |  2 +-
 dlls/msvcr110/msvcr110.spec |  2 +-
 dlls/msvcr120/msvcr120.spec |  2 +-
 dlls/msvcr80/msvcr80.spec   |  2 +-
 dlls/msvcr90/msvcr90.spec   |  2 +-
 dlls/msvcrt/mbcs.c          | 39 ++++++++++++++++++++++++++++++-------
 dlls/msvcrt/msvcrt.spec     |  2 +-
 dlls/ucrtbase/ucrtbase.spec |  4 ++--
 8 files changed, 40 insertions(+), 15 deletions(-)

diff --git a/dlls/msvcr100/msvcr100.spec b/dlls/msvcr100/msvcr100.spec
index 88558752607..5796f353d9c 100644
--- a/dlls/msvcr100/msvcr100.spec
+++ b/dlls/msvcr100/msvcr100.spec
@@ -1174,7 +1174,7 @@
 @ stub _mbsnset_s
 @ stub _mbsnset_s_l
 @ cdecl _mbspbrk(str str)
-@ stub _mbspbrk_l
+@ cdecl _mbspbrk_l(str str ptr)
 @ cdecl _mbsrchr(str long)
 @ cdecl _mbsrchr_l(str long ptr)
 @ cdecl _mbsrev(str)
diff --git a/dlls/msvcr110/msvcr110.spec b/dlls/msvcr110/msvcr110.spec
index 1937ffc9efb..cd54513a59e 100644
--- a/dlls/msvcr110/msvcr110.spec
+++ b/dlls/msvcr110/msvcr110.spec
@@ -1531,7 +1531,7 @@
 @ stub _mbsnset_s
 @ stub _mbsnset_s_l
 @ cdecl _mbspbrk(str str)
-@ stub _mbspbrk_l
+@ cdecl _mbspbrk_l(str str ptr)
 @ cdecl _mbsrchr(str long)
 @ cdecl _mbsrchr_l(str long ptr)
 @ cdecl _mbsrev(str)
diff --git a/dlls/msvcr120/msvcr120.spec b/dlls/msvcr120/msvcr120.spec
index 462a42b719b..1bb81f3f257 100644
--- a/dlls/msvcr120/msvcr120.spec
+++ b/dlls/msvcr120/msvcr120.spec
@@ -1542,7 +1542,7 @@
 @ stub _mbsnset_s
 @ stub _mbsnset_s_l
 @ cdecl _mbspbrk(str str)
-@ stub _mbspbrk_l
+@ cdecl _mbspbrk_l(str str ptr)
 @ cdecl _mbsrchr(str long)
 @ cdecl _mbsrchr_l(str long ptr)
 @ cdecl _mbsrev(str)
diff --git a/dlls/msvcr80/msvcr80.spec b/dlls/msvcr80/msvcr80.spec
index 822a43d5765..9dbe665cd02 100644
--- a/dlls/msvcr80/msvcr80.spec
+++ b/dlls/msvcr80/msvcr80.spec
@@ -846,7 +846,7 @@
 @ stub _mbsnset_s
 @ stub _mbsnset_s_l
 @ cdecl _mbspbrk(str str)
-@ stub _mbspbrk_l
+@ cdecl _mbspbrk_l(str str ptr)
 @ cdecl _mbsrchr(str long)
 @ cdecl _mbsrchr_l(str long ptr)
 @ cdecl _mbsrev(str)
diff --git a/dlls/msvcr90/msvcr90.spec b/dlls/msvcr90/msvcr90.spec
index 32075829392..391be34a624 100644
--- a/dlls/msvcr90/msvcr90.spec
+++ b/dlls/msvcr90/msvcr90.spec
@@ -824,7 +824,7 @@
 @ stub _mbsnset_s
 @ stub _mbsnset_s_l
 @ cdecl _mbspbrk(str str)
-@ stub _mbspbrk_l
+@ cdecl _mbspbrk_l(str str ptr)
 @ cdecl _mbsrchr(str long)
 @ cdecl _mbsrchr_l(str long ptr)
 @ cdecl _mbsrev(str)
diff --git a/dlls/msvcrt/mbcs.c b/dlls/msvcrt/mbcs.c
index 52b882a2fba..ba9e034cd0d 100644
--- a/dlls/msvcrt/mbcs.c
+++ b/dlls/msvcrt/mbcs.c
@@ -150,6 +150,11 @@ static inline unsigned char *u_strchr( const unsigned char *s, unsigned char x )
   return (unsigned char*) strchr( (const char*)s, x );
 }
 
+static inline unsigned char* u_strpbrk(const unsigned char *str, const unsigned char *accept)
+{
+  return (unsigned char*)strpbrk((const char*)str, (const char*)accept);
+}
+
 static inline unsigned char *u_strrchr( const unsigned char *s, unsigned char x )
 {
   return (unsigned char*) strrchr( (const char*)s, x );
@@ -2871,25 +2876,45 @@ unsigned char* CDECL _mbsrev(unsigned char* str)
 }
 
 /*********************************************************************
- *		_mbspbrk (MSVCRT.@)
+ *		_mbspbrk_l (MSVCRT.@)
  */
-unsigned char* CDECL _mbspbrk(const unsigned char* str, const unsigned char* accept)
+unsigned char* CDECL _mbspbrk_l(const unsigned char *str,
+        const unsigned char *accept, _locale_t locale)
 {
     const unsigned char* p;
+    pthreadmbcinfo mbcinfo;
+
+    if (locale)
+        mbcinfo = locale->mbcinfo;
+    else
+        mbcinfo = get_mbcinfo();
+
+    if (!mbcinfo->ismbcodepage)
+        return u_strpbrk(str, accept);
 
-    while(*str)
+    if (!MSVCRT_CHECK_PMT(str && accept))
+        return NULL;
+
+    while (*str)
     {
-        for(p = accept; *p; p += (_ismbblead(*p)?2:1) )
+        for (p = accept; *p; p += (_ismbblead_l(*p, locale) ? 2 : 1))
         {
             if (*p == *str)
-                if( !_ismbblead(*p) || ( *(p+1) == *(str+1) ) )
-                     return (unsigned char*)str;
+                if (!_ismbblead_l(*p, locale) || p[1] == str[1])
+                    return (unsigned char*)str;
         }
-        str += (_ismbblead(*str)?2:1);
+        str += (_ismbblead_l(*str, locale) ? 2 : 1);
     }
     return NULL;
 }
 
+/*********************************************************************
+ *		_mbspbrk (MSVCRT.@)
+ */
+unsigned char* CDECL _mbspbrk(const unsigned char *str, const unsigned char *accept)
+{
+    return _mbspbrk_l(str, accept, NULL);
+}
 
 /*
  * Functions depending on locale codepage
diff --git a/dlls/msvcrt/msvcrt.spec b/dlls/msvcrt/msvcrt.spec
index 430e0f9d5af..a40321b747a 100644
--- a/dlls/msvcrt/msvcrt.spec
+++ b/dlls/msvcrt/msvcrt.spec
@@ -795,7 +795,7 @@
 # stub _mbsnset_s(ptr long long long)
 # stub _mbsnset_s_l(ptr long long long ptr)
 @ cdecl _mbspbrk(str str)
-# stub _mbspbrk_l(str str ptr)
+@ cdecl _mbspbrk_l(str str ptr)
 @ cdecl _mbsrchr(str long)
 @ cdecl _mbsrchr_l(str long ptr)
 @ cdecl _mbsrev(str)
diff --git a/dlls/ucrtbase/ucrtbase.spec b/dlls/ucrtbase/ucrtbase.spec
index 75f21a447c7..8b0420987de 100644
--- a/dlls/ucrtbase/ucrtbase.spec
+++ b/dlls/ucrtbase/ucrtbase.spec
@@ -690,7 +690,7 @@
 @ stub _mbsnset_s
 @ stub _mbsnset_s_l
 @ cdecl _mbspbrk(str str)
-@ stub _mbspbrk_l
+@ cdecl _mbspbrk_l(str str ptr)
 @ cdecl _mbsrchr(str long)
 @ cdecl _mbsrchr_l(str long ptr)
 @ cdecl _mbsrev(str)
@@ -1259,7 +1259,7 @@
 @ stub _o__mbsnset_s
 @ stub _o__mbsnset_s_l
 @ cdecl _o__mbspbrk(str str) _mbspbrk
-@ stub _o__mbspbrk_l
+@ cdecl _o__mbspbrk_l(str str ptr) _mbspbrk_l
 @ cdecl _o__mbsrchr(str long) _mbsrchr
 @ cdecl _o__mbsrchr_l(str long ptr) _mbsrchr_l
 @ cdecl _o__mbsrev(str) _mbsrev
-- 
GitLab


From f82871e76838b3d73eb34d6ef4d732e17a043af5 Mon Sep 17 00:00:00 2001
From: Bartosz Kosiorek <gang65@poczta.onet.pl>
Date: Tue, 7 Nov 2023 23:06:26 +0100
Subject: [PATCH 2/7] msvcrt: Add __iswcsym implementation.

---
 dlls/msvcr100/msvcr100.spec         | 2 +-
 dlls/msvcr110/msvcr110.spec         | 2 +-
 dlls/msvcr120/msvcr120.spec         | 2 +-
 dlls/msvcr120_app/msvcr120_app.spec | 2 +-
 dlls/msvcr80/msvcr80.spec           | 2 +-
 dlls/msvcr90/msvcr90.spec           | 2 +-
 dlls/msvcrt/ctype.c                 | 8 ++++++++
 dlls/ucrtbase/ucrtbase.spec         | 2 +-
 8 files changed, 15 insertions(+), 7 deletions(-)

diff --git a/dlls/msvcr100/msvcr100.spec b/dlls/msvcr100/msvcr100.spec
index 5796f353d9c..6e0148d1b6b 100644
--- a/dlls/msvcr100/msvcr100.spec
+++ b/dlls/msvcr100/msvcr100.spec
@@ -598,7 +598,7 @@
 @ cdecl __isascii(long)
 @ cdecl __iscsym(long)
 @ cdecl __iscsymf(long)
-@ stub __iswcsym
+@ cdecl __iswcsym(long)
 @ stub __iswcsymf
 # extern __lconv
 @ cdecl __lconv_init()
diff --git a/dlls/msvcr110/msvcr110.spec b/dlls/msvcr110/msvcr110.spec
index cd54513a59e..c92c984748f 100644
--- a/dlls/msvcr110/msvcr110.spec
+++ b/dlls/msvcr110/msvcr110.spec
@@ -946,7 +946,7 @@
 @ cdecl __isascii(long)
 @ cdecl __iscsym(long)
 @ cdecl __iscsymf(long)
-@ stub __iswcsym
+@ cdecl __iswcsym(long)
 @ stub __iswcsymf
 @ stdcall -arch=arm __jump_unwind(ptr ptr) ntdll.__jump_unwind
 # extern __lconv
diff --git a/dlls/msvcr120/msvcr120.spec b/dlls/msvcr120/msvcr120.spec
index 1bb81f3f257..5c525f8d1af 100644
--- a/dlls/msvcr120/msvcr120.spec
+++ b/dlls/msvcr120/msvcr120.spec
@@ -937,7 +937,7 @@
 @ cdecl __isascii(long)
 @ cdecl __iscsym(long)
 @ cdecl __iscsymf(long)
-@ stub __iswcsym
+@ cdecl __iswcsym(long)
 @ stub __iswcsymf
 @ stdcall -arch=arm __jump_unwind(ptr ptr) ntdll.__jump_unwind
 # extern __lconv
diff --git a/dlls/msvcr120_app/msvcr120_app.spec b/dlls/msvcr120_app/msvcr120_app.spec
index 591a25f3cce..1b11b90da92 100644
--- a/dlls/msvcr120_app/msvcr120_app.spec
+++ b/dlls/msvcr120_app/msvcr120_app.spec
@@ -914,7 +914,7 @@
 @ cdecl __isascii(long) msvcr120.__isascii
 @ cdecl __iscsym(long) msvcr120.__iscsym
 @ cdecl __iscsymf(long) msvcr120.__iscsymf
-@ stub __iswcsym
+@ cdecl __iswcsym(long) msvcr120.__iswcsym
 @ stub __iswcsymf
 @ stdcall -arch=arm __jump_unwind(ptr ptr) msvcr120.__jump_unwind
 # extern __lconv
diff --git a/dlls/msvcr80/msvcr80.spec b/dlls/msvcr80/msvcr80.spec
index 9dbe665cd02..22fdab9bacd 100644
--- a/dlls/msvcr80/msvcr80.spec
+++ b/dlls/msvcr80/msvcr80.spec
@@ -237,7 +237,7 @@
 @ cdecl __isascii(long)
 @ cdecl __iscsym(long)
 @ cdecl __iscsymf(long)
-@ stub __iswcsym
+@ cdecl __iswcsym(long)
 @ stub __iswcsymf
 # extern __lc_clike
 @ extern __lc_codepage MSVCRT___lc_codepage
diff --git a/dlls/msvcr90/msvcr90.spec b/dlls/msvcr90/msvcr90.spec
index 391be34a624..67f6cc77c46 100644
--- a/dlls/msvcr90/msvcr90.spec
+++ b/dlls/msvcr90/msvcr90.spec
@@ -226,7 +226,7 @@
 @ cdecl __isascii(long)
 @ cdecl __iscsym(long)
 @ cdecl __iscsymf(long)
-@ stub __iswcsym
+@ cdecl __iswcsym(long)
 @ stub __iswcsymf
 # extern __lc_clike
 @ extern __lc_codepage MSVCRT___lc_codepage
diff --git a/dlls/msvcrt/ctype.c b/dlls/msvcrt/ctype.c
index 5a7d3450eda..7e12841c91f 100644
--- a/dlls/msvcrt/ctype.c
+++ b/dlls/msvcrt/ctype.c
@@ -452,6 +452,14 @@ int CDECL __iscsymf(int c)
   return (c < 127 && (isalpha(c) || c == '_'));
 }
 
+/*********************************************************************
+ *		__iswcsym (MSVCRT.@)
+ */
+int CDECL __iswcsym(wint_t c)
+{
+  return (iswalnum(c) || c == '_');
+}
+
 /*********************************************************************
  *		_toupper_l (MSVCRT.@)
  */
diff --git a/dlls/ucrtbase/ucrtbase.spec b/dlls/ucrtbase/ucrtbase.spec
index 8b0420987de..f010f3eee37 100644
--- a/dlls/ucrtbase/ucrtbase.spec
+++ b/dlls/ucrtbase/ucrtbase.spec
@@ -99,7 +99,7 @@
 @ cdecl __isascii(long)
 @ cdecl __iscsym(long)
 @ cdecl __iscsymf(long)
-@ stub __iswcsym
+@ cdecl __iswcsym(long)
 @ stub __iswcsymf
 @ stdcall -arch=arm __jump_unwind(ptr ptr) ntdll.__jump_unwind
 @ cdecl -arch=i386 -norelay __libm_sse2_acos()
-- 
GitLab


From 8f30305049ded06fc89f61a93dd442c8e1024881 Mon Sep 17 00:00:00 2001
From: Bartosz Kosiorek <gang65@poczta.onet.pl>
Date: Tue, 7 Nov 2023 23:06:28 +0100
Subject: [PATCH 3/7] msvcrt: Add __iswcsymf implementation.

---
 dlls/msvcr100/msvcr100.spec         | 2 +-
 dlls/msvcr110/msvcr110.spec         | 2 +-
 dlls/msvcr120/msvcr120.spec         | 2 +-
 dlls/msvcr120_app/msvcr120_app.spec | 2 +-
 dlls/msvcr80/msvcr80.spec           | 2 +-
 dlls/msvcr90/msvcr90.spec           | 2 +-
 dlls/msvcrt/ctype.c                 | 8 ++++++++
 dlls/ucrtbase/ucrtbase.spec         | 2 +-
 8 files changed, 15 insertions(+), 7 deletions(-)

diff --git a/dlls/msvcr100/msvcr100.spec b/dlls/msvcr100/msvcr100.spec
index 6e0148d1b6b..de6265dbeff 100644
--- a/dlls/msvcr100/msvcr100.spec
+++ b/dlls/msvcr100/msvcr100.spec
@@ -599,7 +599,7 @@
 @ cdecl __iscsym(long)
 @ cdecl __iscsymf(long)
 @ cdecl __iswcsym(long)
-@ stub __iswcsymf
+@ cdecl __iswcsymf(long)
 # extern __lconv
 @ cdecl __lconv_init()
 @ cdecl -arch=i386 -norelay __libm_sse2_acos()
diff --git a/dlls/msvcr110/msvcr110.spec b/dlls/msvcr110/msvcr110.spec
index c92c984748f..8db709f894f 100644
--- a/dlls/msvcr110/msvcr110.spec
+++ b/dlls/msvcr110/msvcr110.spec
@@ -947,7 +947,7 @@
 @ cdecl __iscsym(long)
 @ cdecl __iscsymf(long)
 @ cdecl __iswcsym(long)
-@ stub __iswcsymf
+@ cdecl __iswcsymf(long)
 @ stdcall -arch=arm __jump_unwind(ptr ptr) ntdll.__jump_unwind
 # extern __lconv
 @ cdecl __lconv_init()
diff --git a/dlls/msvcr120/msvcr120.spec b/dlls/msvcr120/msvcr120.spec
index 5c525f8d1af..6aae69fdea4 100644
--- a/dlls/msvcr120/msvcr120.spec
+++ b/dlls/msvcr120/msvcr120.spec
@@ -938,7 +938,7 @@
 @ cdecl __iscsym(long)
 @ cdecl __iscsymf(long)
 @ cdecl __iswcsym(long)
-@ stub __iswcsymf
+@ cdecl __iswcsymf(long)
 @ stdcall -arch=arm __jump_unwind(ptr ptr) ntdll.__jump_unwind
 # extern __lconv
 @ cdecl __lconv_init()
diff --git a/dlls/msvcr120_app/msvcr120_app.spec b/dlls/msvcr120_app/msvcr120_app.spec
index 1b11b90da92..2b2949cdc66 100644
--- a/dlls/msvcr120_app/msvcr120_app.spec
+++ b/dlls/msvcr120_app/msvcr120_app.spec
@@ -915,7 +915,7 @@
 @ cdecl __iscsym(long) msvcr120.__iscsym
 @ cdecl __iscsymf(long) msvcr120.__iscsymf
 @ cdecl __iswcsym(long) msvcr120.__iswcsym
-@ stub __iswcsymf
+@ cdecl __iswcsymf(long) msvcr120.__iswcsymf
 @ stdcall -arch=arm __jump_unwind(ptr ptr) msvcr120.__jump_unwind
 # extern __lconv
 @ cdecl __lconv_init() msvcr120.__lconv_init
diff --git a/dlls/msvcr80/msvcr80.spec b/dlls/msvcr80/msvcr80.spec
index 22fdab9bacd..509343870a4 100644
--- a/dlls/msvcr80/msvcr80.spec
+++ b/dlls/msvcr80/msvcr80.spec
@@ -238,7 +238,7 @@
 @ cdecl __iscsym(long)
 @ cdecl __iscsymf(long)
 @ cdecl __iswcsym(long)
-@ stub __iswcsymf
+@ cdecl __iswcsymf(long)
 # extern __lc_clike
 @ extern __lc_codepage MSVCRT___lc_codepage
 @ extern __lc_collate_cp MSVCRT___lc_collate_cp
diff --git a/dlls/msvcr90/msvcr90.spec b/dlls/msvcr90/msvcr90.spec
index 67f6cc77c46..119aa34c55f 100644
--- a/dlls/msvcr90/msvcr90.spec
+++ b/dlls/msvcr90/msvcr90.spec
@@ -227,7 +227,7 @@
 @ cdecl __iscsym(long)
 @ cdecl __iscsymf(long)
 @ cdecl __iswcsym(long)
-@ stub __iswcsymf
+@ cdecl __iswcsymf(long)
 # extern __lc_clike
 @ extern __lc_codepage MSVCRT___lc_codepage
 @ extern __lc_collate_cp MSVCRT___lc_collate_cp
diff --git a/dlls/msvcrt/ctype.c b/dlls/msvcrt/ctype.c
index 7e12841c91f..a1805324c1f 100644
--- a/dlls/msvcrt/ctype.c
+++ b/dlls/msvcrt/ctype.c
@@ -460,6 +460,14 @@ int CDECL __iswcsym(wint_t c)
   return (iswalnum(c) || c == '_');
 }
 
+/*********************************************************************
+ *		__iswcsymf (MSVCRT.@)
+ */
+int CDECL __iswcsymf(wint_t c)
+{
+  return (iswalpha(c) || c == '_');
+}
+
 /*********************************************************************
  *		_toupper_l (MSVCRT.@)
  */
diff --git a/dlls/ucrtbase/ucrtbase.spec b/dlls/ucrtbase/ucrtbase.spec
index f010f3eee37..7e02dd203c6 100644
--- a/dlls/ucrtbase/ucrtbase.spec
+++ b/dlls/ucrtbase/ucrtbase.spec
@@ -100,7 +100,7 @@
 @ cdecl __iscsym(long)
 @ cdecl __iscsymf(long)
 @ cdecl __iswcsym(long)
-@ stub __iswcsymf
+@ cdecl __iswcsymf(long)
 @ stdcall -arch=arm __jump_unwind(ptr ptr) ntdll.__jump_unwind
 @ cdecl -arch=i386 -norelay __libm_sse2_acos()
 @ cdecl -arch=i386 -norelay __libm_sse2_acosf()
-- 
GitLab


From f73d74c6dfe57008972192772837f8bb6b744d3b Mon Sep 17 00:00:00 2001
From: Bartosz Kosiorek <gang65@poczta.onet.pl>
Date: Tue, 7 Nov 2023 23:06:28 +0100
Subject: [PATCH 4/7] msvcrt: Add _mbsncmp_l implementation.

---
 dlls/msvcr100/msvcr100.spec |  2 +-
 dlls/msvcr110/msvcr110.spec |  2 +-
 dlls/msvcr120/msvcr120.spec |  2 +-
 dlls/msvcr80/msvcr80.spec   |  2 +-
 dlls/msvcr90/msvcr90.spec   |  2 +-
 dlls/msvcrt/mbcs.c          | 63 ++++++++++++++++++++++++-------------
 dlls/msvcrt/msvcrt.spec     |  2 +-
 dlls/ucrtbase/ucrtbase.spec |  4 +--
 8 files changed, 49 insertions(+), 30 deletions(-)

diff --git a/dlls/msvcr100/msvcr100.spec b/dlls/msvcr100/msvcr100.spec
index de6265dbeff..3c901f0345b 100644
--- a/dlls/msvcr100/msvcr100.spec
+++ b/dlls/msvcr100/msvcr100.spec
@@ -1152,7 +1152,7 @@
 @ cdecl _mbsnccnt(str long)
 @ cdecl _mbsnccnt_l(str long ptr)
 @ cdecl _mbsncmp(str str long)
-@ stub _mbsncmp_l
+@ cdecl _mbsncmp_l(str str long ptr)
 @ stub _mbsncoll(str str long)
 @ stub _mbsncoll_l
 @ cdecl _mbsncpy(ptr str long)
diff --git a/dlls/msvcr110/msvcr110.spec b/dlls/msvcr110/msvcr110.spec
index 8db709f894f..b633d20e713 100644
--- a/dlls/msvcr110/msvcr110.spec
+++ b/dlls/msvcr110/msvcr110.spec
@@ -1509,7 +1509,7 @@
 @ cdecl _mbsnccnt(str long)
 @ cdecl _mbsnccnt_l(str long ptr)
 @ cdecl _mbsncmp(str str long)
-@ stub _mbsncmp_l
+@ cdecl _mbsncmp_l(str str long ptr)
 @ stub _mbsncoll(str str long)
 @ stub _mbsncoll_l
 @ cdecl _mbsncpy(ptr str long)
diff --git a/dlls/msvcr120/msvcr120.spec b/dlls/msvcr120/msvcr120.spec
index 6aae69fdea4..a5fdb346323 100644
--- a/dlls/msvcr120/msvcr120.spec
+++ b/dlls/msvcr120/msvcr120.spec
@@ -1520,7 +1520,7 @@
 @ cdecl _mbsnccnt(str long)
 @ cdecl _mbsnccnt_l(str long ptr)
 @ cdecl _mbsncmp(str str long)
-@ stub _mbsncmp_l
+@ cdecl _mbsncmp_l(str str long ptr)
 @ stub _mbsncoll(str str long)
 @ stub _mbsncoll_l
 @ cdecl _mbsncpy(ptr str long)
diff --git a/dlls/msvcr80/msvcr80.spec b/dlls/msvcr80/msvcr80.spec
index 509343870a4..d842d4362f1 100644
--- a/dlls/msvcr80/msvcr80.spec
+++ b/dlls/msvcr80/msvcr80.spec
@@ -824,7 +824,7 @@
 @ cdecl _mbsnccnt(str long)
 @ cdecl _mbsnccnt_l(str long ptr)
 @ cdecl _mbsncmp(str str long)
-@ stub _mbsncmp_l
+@ cdecl _mbsncmp_l(str str long ptr)
 @ stub _mbsncoll(str str long)
 @ stub _mbsncoll_l
 @ cdecl _mbsncpy(ptr str long)
diff --git a/dlls/msvcr90/msvcr90.spec b/dlls/msvcr90/msvcr90.spec
index 119aa34c55f..2334b07957a 100644
--- a/dlls/msvcr90/msvcr90.spec
+++ b/dlls/msvcr90/msvcr90.spec
@@ -802,7 +802,7 @@
 @ cdecl _mbsnccnt(str long)
 @ cdecl _mbsnccnt_l(str long ptr)
 @ cdecl _mbsncmp(str str long)
-@ stub _mbsncmp_l
+@ cdecl _mbsncmp_l(str str long ptr)
 @ stub _mbsncoll(str str long)
 @ stub _mbsncoll_l
 @ cdecl _mbsncpy(ptr str long)
diff --git a/dlls/msvcrt/mbcs.c b/dlls/msvcrt/mbcs.c
index ba9e034cd0d..cb48fac6fb6 100644
--- a/dlls/msvcrt/mbcs.c
+++ b/dlls/msvcrt/mbcs.c
@@ -1225,34 +1225,53 @@ int CDECL _mbsicmp(const unsigned char* str, const unsigned char* cmp)
 }
 
 /*********************************************************************
- *		_mbsncmp(MSVCRT.@)
+ *		_mbsncmp_l(MSVCRT.@)
  */
-int CDECL _mbsncmp(const unsigned char* str, const unsigned char* cmp, size_t len)
+int CDECL _mbsncmp_l(const unsigned char* str, const unsigned char* cmp,
+        size_t len, _locale_t locale)
 {
-  if(!len)
-    return 0;
-
-  if(get_mbcinfo()->ismbcodepage)
-  {
+    pthreadmbcinfo mbcinfo;
     unsigned int strc, cmpc;
-    while(len--)
+
+    if (!len)
+        return 0;
+
+    if (locale)
+        mbcinfo = locale->mbcinfo;
+    else
+        mbcinfo = get_mbcinfo();
+
+    if (!mbcinfo->ismbcodepage)
+        return u_strncmp(str, cmp, len); /* ASCII CP */
+
+    if (!MSVCRT_CHECK_PMT(str && cmp))
+        return _NLSCMPERROR;
+
+    while (len--)
     {
-      int inc;
-      if(!*str)
-        return *cmp ? -1 : 0;
-      if(!*cmp)
-        return 1;
-      strc = _mbsnextc(str);
-      cmpc = _mbsnextc(cmp);
-      if(strc != cmpc)
-        return strc < cmpc ? -1 : 1;
-      inc=(strc > 255) ? 2 : 1; /* Equal, use same increment */
-      str += inc;
-      cmp += inc;
+        int inc;
+
+        if (!*str)
+            return *cmp ? -1 : 0;
+        if (!*cmp)
+            return 1;
+        strc = _mbsnextc_l(str, locale);
+        cmpc = _mbsnextc_l(cmp, locale);
+        if (strc != cmpc)
+            return strc < cmpc ? -1 : 1;
+        inc = (strc > 255) ? 2 : 1; /* Equal, use same increment */
+        str += inc;
+        cmp += inc;
     }
     return 0; /* Matched len chars */
-  }
-  return u_strncmp(str, cmp, len); /* ASCII CP */
+}
+
+/*********************************************************************
+ *		_mbsncmp(MSVCRT.@)
+ */
+int CDECL _mbsncmp(const unsigned char* str, const unsigned char* cmp, size_t len)
+{
+    return _mbsncmp_l(str, cmp, len, NULL);
 }
 
 /*********************************************************************
diff --git a/dlls/msvcrt/msvcrt.spec b/dlls/msvcrt/msvcrt.spec
index a40321b747a..b9947d4e885 100644
--- a/dlls/msvcrt/msvcrt.spec
+++ b/dlls/msvcrt/msvcrt.spec
@@ -773,7 +773,7 @@
 @ cdecl _mbsnccnt(str long)
 @ cdecl _mbsnccnt_l(str long ptr)
 @ cdecl _mbsncmp(str str long)
-# stub _mbsncmp_l(str str long ptr)
+@ cdecl _mbsncmp_l(str str long ptr)
 @ stub _mbsncoll(str str long)
 # stub _mbsncoll_l(str str long ptr)
 @ cdecl _mbsncpy(ptr str long)
diff --git a/dlls/ucrtbase/ucrtbase.spec b/dlls/ucrtbase/ucrtbase.spec
index 7e02dd203c6..e0174dd897c 100644
--- a/dlls/ucrtbase/ucrtbase.spec
+++ b/dlls/ucrtbase/ucrtbase.spec
@@ -668,7 +668,7 @@
 @ cdecl _mbsnccnt(str long)
 @ cdecl _mbsnccnt_l(str long ptr)
 @ cdecl _mbsncmp(str str long)
-@ stub _mbsncmp_l
+@ cdecl _mbsncmp_l(str str long ptr)
 @ stub _mbsncoll(str str long)
 @ stub _mbsncoll_l
 @ cdecl _mbsncpy(ptr str long)
@@ -1237,7 +1237,7 @@
 @ cdecl _o__mbsnccnt(str long) _mbsnccnt
 @ cdecl _o__mbsnccnt_l(str long ptr) _mbsnccnt_l
 @ cdecl _o__mbsncmp(str str long) _mbsncmp
-@ stub _o__mbsncmp_l
+@ cdecl _o__mbsncmp_l(str str long ptr) _mbsncmp_l
 @ stub _o__mbsncoll
 @ stub _o__mbsncoll_l
 @ cdecl _o__mbsncpy(ptr str long) _mbsncpy
-- 
GitLab


From 08c603a417ed99d0f089680beb3b3531bd65587b Mon Sep 17 00:00:00 2001
From: Bartosz Kosiorek <gang65@poczta.onet.pl>
Date: Tue, 7 Nov 2023 23:06:29 +0100
Subject: [PATCH 5/7] msvcrt: Add _mbsrev_l implementation.

---
 dlls/msvcr100/msvcr100.spec |  2 +-
 dlls/msvcr110/msvcr110.spec |  2 +-
 dlls/msvcr120/msvcr120.spec |  2 +-
 dlls/msvcr80/msvcr80.spec   |  2 +-
 dlls/msvcr90/msvcr90.spec   |  2 +-
 dlls/msvcrt/mbcs.c          | 64 ++++++++++++++++++++++++++-----------
 dlls/msvcrt/msvcrt.spec     |  2 +-
 dlls/ucrtbase/ucrtbase.spec |  4 +--
 8 files changed, 53 insertions(+), 27 deletions(-)

diff --git a/dlls/msvcr100/msvcr100.spec b/dlls/msvcr100/msvcr100.spec
index 3c901f0345b..30fbd397131 100644
--- a/dlls/msvcr100/msvcr100.spec
+++ b/dlls/msvcr100/msvcr100.spec
@@ -1178,7 +1178,7 @@
 @ cdecl _mbsrchr(str long)
 @ cdecl _mbsrchr_l(str long ptr)
 @ cdecl _mbsrev(str)
-@ stub _mbsrev_l
+@ cdecl _mbsrev_l(str ptr)
 @ cdecl _mbsset(ptr long)
 @ stub _mbsset_l
 @ stub _mbsset_s
diff --git a/dlls/msvcr110/msvcr110.spec b/dlls/msvcr110/msvcr110.spec
index b633d20e713..aaff43ea736 100644
--- a/dlls/msvcr110/msvcr110.spec
+++ b/dlls/msvcr110/msvcr110.spec
@@ -1535,7 +1535,7 @@
 @ cdecl _mbsrchr(str long)
 @ cdecl _mbsrchr_l(str long ptr)
 @ cdecl _mbsrev(str)
-@ stub _mbsrev_l
+@ cdecl _mbsrev_l(str ptr)
 @ cdecl _mbsset(ptr long)
 @ stub _mbsset_l
 @ stub _mbsset_s
diff --git a/dlls/msvcr120/msvcr120.spec b/dlls/msvcr120/msvcr120.spec
index a5fdb346323..df0ea4c24da 100644
--- a/dlls/msvcr120/msvcr120.spec
+++ b/dlls/msvcr120/msvcr120.spec
@@ -1546,7 +1546,7 @@
 @ cdecl _mbsrchr(str long)
 @ cdecl _mbsrchr_l(str long ptr)
 @ cdecl _mbsrev(str)
-@ stub _mbsrev_l
+@ cdecl _mbsrev_l(str ptr)
 @ cdecl _mbsset(ptr long)
 @ stub _mbsset_l
 @ stub _mbsset_s
diff --git a/dlls/msvcr80/msvcr80.spec b/dlls/msvcr80/msvcr80.spec
index d842d4362f1..687a73b5d8a 100644
--- a/dlls/msvcr80/msvcr80.spec
+++ b/dlls/msvcr80/msvcr80.spec
@@ -850,7 +850,7 @@
 @ cdecl _mbsrchr(str long)
 @ cdecl _mbsrchr_l(str long ptr)
 @ cdecl _mbsrev(str)
-@ stub _mbsrev_l
+@ cdecl _mbsrev_l(str ptr)
 @ cdecl _mbsset(ptr long)
 @ stub _mbsset_l
 @ stub _mbsset_s
diff --git a/dlls/msvcr90/msvcr90.spec b/dlls/msvcr90/msvcr90.spec
index 2334b07957a..38ffcc7ca22 100644
--- a/dlls/msvcr90/msvcr90.spec
+++ b/dlls/msvcr90/msvcr90.spec
@@ -828,7 +828,7 @@
 @ cdecl _mbsrchr(str long)
 @ cdecl _mbsrchr_l(str long ptr)
 @ cdecl _mbsrev(str)
-@ stub _mbsrev_l
+@ cdecl _mbsrev_l(str ptr)
 @ cdecl _mbsset(ptr long)
 @ stub _mbsset_l
 @ stub _mbsset_s
diff --git a/dlls/msvcrt/mbcs.c b/dlls/msvcrt/mbcs.c
index cb48fac6fb6..e1aa5ab2d6f 100644
--- a/dlls/msvcrt/mbcs.c
+++ b/dlls/msvcrt/mbcs.c
@@ -160,6 +160,11 @@ static inline unsigned char *u_strrchr( const unsigned char *s, unsigned char x
   return (unsigned char*) strrchr( (const char*)s, x );
 }
 
+static inline unsigned char* u__strrev(unsigned char *str)
+{
+  return (unsigned char*)_strrev((char *)str);
+}
+
 static inline unsigned char *u__strset( unsigned char *s, unsigned char c )
 {
   return (unsigned char*) _strset( (char*)s, c);
@@ -2848,52 +2853,73 @@ size_t CDECL _mbscspn(const unsigned char* str, const unsigned char* cmp)
 }
 
 /*********************************************************************
- *              _mbsrev (MSVCRT.@)
+ *              _mbsrev_l (MSVCRT.@)
  */
-unsigned char* CDECL _mbsrev(unsigned char* str)
+unsigned char* CDECL _mbsrev_l(unsigned char* str, _locale_t locale)
 {
-    int i, len = _mbslen(str);
-    unsigned char *p, *temp=malloc(len*2);
+    int i, len;
+    unsigned char *p, *temp;
+    pthreadmbcinfo mbcinfo;
+
+    if (!MSVCRT_CHECK_PMT(str))
+        return NULL;
+
+    if (locale)
+        mbcinfo = locale->mbcinfo;
+    else
+        mbcinfo = get_mbcinfo();
+
+    if (!mbcinfo->ismbcodepage)
+        return u__strrev(str);
 
-    if(!temp)
+    len = _mbslen_l(str, locale);
+    temp = malloc(len * 2);
+    if (!temp)
         return str;
 
     /* unpack multibyte string to temp buffer */
-    p=str;
-    for(i=0; i<len; i++)
+    p = str;
+    for (i = 0; i < len; i++)
     {
-        if (_ismbblead(*p))
+        if (_ismbblead_l(*p, locale))
         {
-            temp[i*2]=*p++;
-            temp[i*2+1]=*p++;
+            temp[i * 2] = *p++;
+            temp[i * 2 + 1] = *p++;
         }
         else
         {
-            temp[i*2]=*p++;
-            temp[i*2+1]=0;
+            temp[i * 2] = *p++;
+            temp[i * 2 + 1] = 0;
         }
     }
 
     /* repack it in the reverse order */
-    p=str;
-    for(i=len-1; i>=0; i--)
+    p = str;
+    for (i = len - 1; i >= 0; i--)
     {
-        if(_ismbblead(temp[i*2]))
+        if (_ismbblead_l(temp[i * 2], locale))
         {
-            *p++=temp[i*2];
-            *p++=temp[i*2+1];
+            *p++ = temp[i * 2];
+            *p++ = temp[i * 2 + 1];
         }
         else
         {
-            *p++=temp[i*2];
+            *p++ = temp[i * 2];
         }
     }
 
     free(temp);
-
     return str;
 }
 
+/*********************************************************************
+ *              _mbsrev (MSVCRT.@)
+ */
+unsigned char* CDECL _mbsrev(unsigned char* str)
+{
+    return _mbsrev_l(str, NULL);
+}
+
 /*********************************************************************
  *		_mbspbrk_l (MSVCRT.@)
  */
diff --git a/dlls/msvcrt/msvcrt.spec b/dlls/msvcrt/msvcrt.spec
index b9947d4e885..a52016e6298 100644
--- a/dlls/msvcrt/msvcrt.spec
+++ b/dlls/msvcrt/msvcrt.spec
@@ -799,7 +799,7 @@
 @ cdecl _mbsrchr(str long)
 @ cdecl _mbsrchr_l(str long ptr)
 @ cdecl _mbsrev(str)
-# stub _mbsrev_l(str ptr)
+@ cdecl _mbsrev_l(str ptr)
 @ cdecl _mbsset(ptr long)
 # stub _mbsset_l(ptr long ptr)
 # stub _mbsset_s(ptr long long)
diff --git a/dlls/ucrtbase/ucrtbase.spec b/dlls/ucrtbase/ucrtbase.spec
index e0174dd897c..1f99c65ef05 100644
--- a/dlls/ucrtbase/ucrtbase.spec
+++ b/dlls/ucrtbase/ucrtbase.spec
@@ -694,7 +694,7 @@
 @ cdecl _mbsrchr(str long)
 @ cdecl _mbsrchr_l(str long ptr)
 @ cdecl _mbsrev(str)
-@ stub _mbsrev_l
+@ cdecl _mbsrev_l(str ptr)
 @ cdecl _mbsset(ptr long)
 @ stub _mbsset_l
 @ stub _mbsset_s
@@ -1263,7 +1263,7 @@
 @ cdecl _o__mbsrchr(str long) _mbsrchr
 @ cdecl _o__mbsrchr_l(str long ptr) _mbsrchr_l
 @ cdecl _o__mbsrev(str) _mbsrev
-@ stub _o__mbsrev_l
+@ cdecl _o__mbsrev_l(str ptr) _mbsrev_l
 @ cdecl _o__mbsset(ptr long) _mbsset
 @ stub _o__mbsset_l
 @ stub _o__mbsset_s
-- 
GitLab


From 8bb0692ff607fb4f57b392984131b19d8f1fb820 Mon Sep 17 00:00:00 2001
From: Bartosz Kosiorek <gang65@poczta.onet.pl>
Date: Tue, 7 Nov 2023 23:06:30 +0100
Subject: [PATCH 6/7] msvcrt: Add _mbsset_l implementation.

---
 dlls/msvcr100/msvcr100.spec |  2 +-
 dlls/msvcr110/msvcr110.spec |  2 +-
 dlls/msvcr120/msvcr120.spec |  2 +-
 dlls/msvcr80/msvcr80.spec   |  2 +-
 dlls/msvcr90/msvcr90.spec   |  2 +-
 dlls/msvcrt/mbcs.c          | 46 ++++++++++++++++++++++++++-----------
 dlls/msvcrt/msvcrt.spec     |  2 +-
 dlls/ucrtbase/ucrtbase.spec |  4 ++--
 8 files changed, 40 insertions(+), 22 deletions(-)

diff --git a/dlls/msvcr100/msvcr100.spec b/dlls/msvcr100/msvcr100.spec
index 30fbd397131..307d00e11e5 100644
--- a/dlls/msvcr100/msvcr100.spec
+++ b/dlls/msvcr100/msvcr100.spec
@@ -1180,7 +1180,7 @@
 @ cdecl _mbsrev(str)
 @ cdecl _mbsrev_l(str ptr)
 @ cdecl _mbsset(ptr long)
-@ stub _mbsset_l
+@ cdecl _mbsset_l(ptr long ptr)
 @ stub _mbsset_s
 @ stub _mbsset_s_l
 @ cdecl _mbsspn(str str)
diff --git a/dlls/msvcr110/msvcr110.spec b/dlls/msvcr110/msvcr110.spec
index aaff43ea736..baf10ae48a4 100644
--- a/dlls/msvcr110/msvcr110.spec
+++ b/dlls/msvcr110/msvcr110.spec
@@ -1537,7 +1537,7 @@
 @ cdecl _mbsrev(str)
 @ cdecl _mbsrev_l(str ptr)
 @ cdecl _mbsset(ptr long)
-@ stub _mbsset_l
+@ cdecl _mbsset_l(ptr long ptr)
 @ stub _mbsset_s
 @ stub _mbsset_s_l
 @ cdecl _mbsspn(str str)
diff --git a/dlls/msvcr120/msvcr120.spec b/dlls/msvcr120/msvcr120.spec
index df0ea4c24da..8fa160170d5 100644
--- a/dlls/msvcr120/msvcr120.spec
+++ b/dlls/msvcr120/msvcr120.spec
@@ -1548,7 +1548,7 @@
 @ cdecl _mbsrev(str)
 @ cdecl _mbsrev_l(str ptr)
 @ cdecl _mbsset(ptr long)
-@ stub _mbsset_l
+@ cdecl _mbsset_l(ptr long ptr)
 @ stub _mbsset_s
 @ stub _mbsset_s_l
 @ cdecl _mbsspn(str str)
diff --git a/dlls/msvcr80/msvcr80.spec b/dlls/msvcr80/msvcr80.spec
index 687a73b5d8a..9f92ba36a9f 100644
--- a/dlls/msvcr80/msvcr80.spec
+++ b/dlls/msvcr80/msvcr80.spec
@@ -852,7 +852,7 @@
 @ cdecl _mbsrev(str)
 @ cdecl _mbsrev_l(str ptr)
 @ cdecl _mbsset(ptr long)
-@ stub _mbsset_l
+@ cdecl _mbsset_l(ptr long ptr)
 @ stub _mbsset_s
 @ stub _mbsset_s_l
 @ cdecl _mbsspn(str str)
diff --git a/dlls/msvcr90/msvcr90.spec b/dlls/msvcr90/msvcr90.spec
index 38ffcc7ca22..8d647d6e907 100644
--- a/dlls/msvcr90/msvcr90.spec
+++ b/dlls/msvcr90/msvcr90.spec
@@ -830,7 +830,7 @@
 @ cdecl _mbsrev(str)
 @ cdecl _mbsrev_l(str ptr)
 @ cdecl _mbsset(ptr long)
-@ stub _mbsset_l
+@ cdecl _mbsset_l(ptr long ptr)
 @ stub _mbsset_s
 @ stub _mbsset_s_l
 @ cdecl _mbsspn(str str)
diff --git a/dlls/msvcrt/mbcs.c b/dlls/msvcrt/mbcs.c
index e1aa5ab2d6f..cc006765662 100644
--- a/dlls/msvcrt/mbcs.c
+++ b/dlls/msvcrt/mbcs.c
@@ -2205,27 +2205,45 @@ int CDECL _mbsbtype(const unsigned char *str, size_t count)
     return _mbsbtype_l(str, count, NULL);
 }
 
+
 /*********************************************************************
- *		_mbsset(MSVCRT.@)
+ *		_mbsset_l(MSVCRT.@)
  */
-unsigned char* CDECL _mbsset(unsigned char* str, unsigned int c)
+unsigned char* CDECL _mbsset_l(unsigned char* str, unsigned int c, _locale_t locale)
 {
-  unsigned char* ret = str;
+    unsigned char* ret = str;
+    pthreadmbcinfo mbcinfo;
 
-  if(!get_mbcinfo()->ismbcodepage || c < 256)
-    return u__strset(str, c); /* ASCII CP or SB char */
+    if (!MSVCRT_CHECK_PMT(str))
+        return NULL;
 
-  c &= 0xffff; /* Strip high bits */
+    if (locale)
+        mbcinfo = locale->mbcinfo;
+    else
+        mbcinfo = get_mbcinfo();
 
-  while(str[0] && str[1])
-  {
-    *str++ = c >> 8;
-    *str++ = c & 0xff;
-  }
-  if(str[0])
-    str[0] = '\0'; /* FIXME: OK to shorten? */
+    if (!mbcinfo->ismbcodepage || c < 256)
+        return u__strset(str, c); /* ASCII CP or SB char */
+
+    c &= 0xffff; /* Strip high bits */
 
-  return ret;
+    while (str[0] && str[1])
+    {
+        *str++ = c >> 8;
+        *str++ = c & 0xff;
+    }
+    if (str[0])
+        str[0] = '\0'; /* FIXME: OK to shorten? */
+
+    return ret;
+}
+
+/*********************************************************************
+ *		_mbsset(MSVCRT.@)
+ */
+unsigned char* CDECL _mbsset(unsigned char* str, unsigned int c)
+{
+    return _mbsset_l(str, c, NULL);
 }
 
 /*********************************************************************
diff --git a/dlls/msvcrt/msvcrt.spec b/dlls/msvcrt/msvcrt.spec
index a52016e6298..11b65d869dc 100644
--- a/dlls/msvcrt/msvcrt.spec
+++ b/dlls/msvcrt/msvcrt.spec
@@ -801,7 +801,7 @@
 @ cdecl _mbsrev(str)
 @ cdecl _mbsrev_l(str ptr)
 @ cdecl _mbsset(ptr long)
-# stub _mbsset_l(ptr long ptr)
+@ cdecl _mbsset_l(ptr long ptr)
 # stub _mbsset_s(ptr long long)
 # stub _mbsset_s_l(ptr long long ptr)
 @ cdecl _mbsspn(str str)
diff --git a/dlls/ucrtbase/ucrtbase.spec b/dlls/ucrtbase/ucrtbase.spec
index 1f99c65ef05..4bb7f4148c7 100644
--- a/dlls/ucrtbase/ucrtbase.spec
+++ b/dlls/ucrtbase/ucrtbase.spec
@@ -696,7 +696,7 @@
 @ cdecl _mbsrev(str)
 @ cdecl _mbsrev_l(str ptr)
 @ cdecl _mbsset(ptr long)
-@ stub _mbsset_l
+@ cdecl _mbsset_l(ptr long ptr)
 @ stub _mbsset_s
 @ stub _mbsset_s_l
 @ cdecl _mbsspn(str str)
@@ -1265,7 +1265,7 @@
 @ cdecl _o__mbsrev(str) _mbsrev
 @ cdecl _o__mbsrev_l(str ptr) _mbsrev_l
 @ cdecl _o__mbsset(ptr long) _mbsset
-@ stub _o__mbsset_l
+@ cdecl _o__mbsset_l(ptr long ptr) _mbsset_l
 @ stub _o__mbsset_s
 @ stub _o__mbsset_s_l
 @ cdecl _o__mbsspn(str str) _mbsspn
-- 
GitLab


From 707198babe16d7a87090027810c4c506d05af5d5 Mon Sep 17 00:00:00 2001
From: Bartosz Kosiorek <gang65@poczta.onet.pl>
Date: Tue, 7 Nov 2023 23:06:30 +0100
Subject: [PATCH 7/7] msvcrt: Add _mblen_l implementation.

---
 dlls/msvcr100/msvcr100.spec         |  2 +-
 dlls/msvcr110/msvcr110.spec         |  2 +-
 dlls/msvcr120/msvcr120.spec         |  2 +-
 dlls/msvcr120_app/msvcr120_app.spec |  2 +-
 dlls/msvcr80/msvcr80.spec           |  2 +-
 dlls/msvcr90/msvcr90.spec           |  2 +-
 dlls/msvcrt/mbcs.c                  | 31 ++++++++++++++++++++---------
 dlls/msvcrt/msvcrt.spec             |  2 +-
 dlls/ucrtbase/ucrtbase.spec         |  4 ++--
 9 files changed, 31 insertions(+), 18 deletions(-)

diff --git a/dlls/msvcr100/msvcr100.spec b/dlls/msvcr100/msvcr100.spec
index 307d00e11e5..f4baf442b53 100644
--- a/dlls/msvcr100/msvcr100.spec
+++ b/dlls/msvcr100/msvcr100.spec
@@ -1094,7 +1094,7 @@
 @ cdecl _mbctoupper(long)
 @ cdecl _mbctoupper_l(long ptr)
 @ extern _mbctype MSVCRT_mbctype
-@ stub _mblen_l
+@ cdecl _mblen_l(str long ptr)
 @ cdecl _mbsbtype(str long)
 @ cdecl _mbsbtype_l(str long ptr)
 @ cdecl _mbscat_s(ptr long str)
diff --git a/dlls/msvcr110/msvcr110.spec b/dlls/msvcr110/msvcr110.spec
index baf10ae48a4..e9bdf422024 100644
--- a/dlls/msvcr110/msvcr110.spec
+++ b/dlls/msvcr110/msvcr110.spec
@@ -1451,7 +1451,7 @@
 @ cdecl _mbctoupper(long)
 @ cdecl _mbctoupper_l(long ptr)
 @ extern _mbctype MSVCRT_mbctype
-@ stub _mblen_l
+@ cdecl _mblen_l(str long ptr)
 @ cdecl _mbsbtype(str long)
 @ cdecl _mbsbtype_l(str long ptr)
 @ cdecl _mbscat_s(ptr long str)
diff --git a/dlls/msvcr120/msvcr120.spec b/dlls/msvcr120/msvcr120.spec
index 8fa160170d5..13dacc15744 100644
--- a/dlls/msvcr120/msvcr120.spec
+++ b/dlls/msvcr120/msvcr120.spec
@@ -1462,7 +1462,7 @@
 @ cdecl _mbctoupper(long)
 @ cdecl _mbctoupper_l(long ptr)
 @ extern _mbctype MSVCRT_mbctype
-@ stub _mblen_l
+@ cdecl _mblen_l(str long ptr)
 @ cdecl _mbsbtype(str long)
 @ cdecl _mbsbtype_l(str long ptr)
 @ cdecl _mbscat_s(ptr long str)
diff --git a/dlls/msvcr120_app/msvcr120_app.spec b/dlls/msvcr120_app/msvcr120_app.spec
index 2b2949cdc66..561c3774260 100644
--- a/dlls/msvcr120_app/msvcr120_app.spec
+++ b/dlls/msvcr120_app/msvcr120_app.spec
@@ -1302,7 +1302,7 @@
 @ cdecl _malloc_crt(long) msvcr120._malloc_crt
 # extern _mbcasemap
 @ extern _mbctype msvcr120._mbctype
-@ stub _mblen_l
+@ cdecl _mblen_l(str long ptr) msvcr120._mblen_l
 @ cdecl _mbstowcs_l(ptr str long ptr) msvcr120._mbstowcs_l
 @ cdecl _mbstowcs_s_l(ptr ptr long str long ptr) msvcr120._mbstowcs_s_l
 @ cdecl _mbstrlen(str) msvcr120._mbstrlen
diff --git a/dlls/msvcr80/msvcr80.spec b/dlls/msvcr80/msvcr80.spec
index 9f92ba36a9f..91781c9c9e4 100644
--- a/dlls/msvcr80/msvcr80.spec
+++ b/dlls/msvcr80/msvcr80.spec
@@ -766,7 +766,7 @@
 @ cdecl _mbctoupper(long)
 @ cdecl _mbctoupper_l(long ptr)
 @ extern _mbctype MSVCRT_mbctype
-@ stub _mblen_l
+@ cdecl _mblen_l(str long ptr)
 @ cdecl _mbsbtype(str long)
 @ cdecl _mbsbtype_l(str long ptr)
 @ cdecl _mbscat_s(ptr long str)
diff --git a/dlls/msvcr90/msvcr90.spec b/dlls/msvcr90/msvcr90.spec
index 8d647d6e907..2af41f8aea2 100644
--- a/dlls/msvcr90/msvcr90.spec
+++ b/dlls/msvcr90/msvcr90.spec
@@ -744,7 +744,7 @@
 @ cdecl _mbctoupper(long)
 @ cdecl _mbctoupper_l(long ptr)
 @ extern _mbctype MSVCRT_mbctype
-@ stub _mblen_l
+@ cdecl _mblen_l(str long ptr)
 @ cdecl _mbsbtype(str long)
 @ cdecl _mbsbtype_l(str long ptr)
 @ cdecl _mbscat_s(ptr long str)
diff --git a/dlls/msvcrt/mbcs.c b/dlls/msvcrt/mbcs.c
index cc006765662..9b52170d4e9 100644
--- a/dlls/msvcrt/mbcs.c
+++ b/dlls/msvcrt/mbcs.c
@@ -2984,21 +2984,34 @@ unsigned char* CDECL _mbspbrk(const unsigned char *str, const unsigned char *acc
  */
 
 /*********************************************************************
- *		mblen(MSVCRT.@)
+ *		_mblen_l(MSVCRT.@)
  * REMARKS
  *  Unlike most of the multibyte string functions this function uses
  *  the locale codepage, not the codepage set by _setmbcp
  */
-int CDECL mblen(const char* str, size_t size)
+int CDECL _mblen_l(const char* str, size_t size, _locale_t locale)
 {
-  if (str && *str && size)
-  {
-    if(get_locinfo()->mb_cur_max == 1)
-      return 1; /* ASCII CP */
+    pthreadlocinfo locinfo;
 
-    return !isleadbyte((unsigned char)*str) ? 1 : (size>1 ? 2 : -1);
-  }
-  return 0;
+    if (!str || !*str || !size)
+        return 0;
+
+    if (locale)
+        locinfo = locale->locinfo;
+    else
+        locinfo = get_locinfo();
+
+    if (locinfo->mb_cur_max == 1)
+        return 1; /* ASCII CP */
+    return !_isleadbyte_l((unsigned char)*str, locale) ? 1 : (size > 1 ? 2 : -1);
+}
+
+/*********************************************************************
+ *		mblen(MSVCRT.@)
+ */
+int CDECL mblen(const char* str, size_t size)
+{
+    return _mblen_l(str, size, NULL);
 }
 
 /*********************************************************************
diff --git a/dlls/msvcrt/msvcrt.spec b/dlls/msvcrt/msvcrt.spec
index 11b65d869dc..f54a437692f 100644
--- a/dlls/msvcrt/msvcrt.spec
+++ b/dlls/msvcrt/msvcrt.spec
@@ -711,7 +711,7 @@
 @ cdecl _mbctoupper(long)
 @ cdecl _mbctoupper_l(long ptr)
 @ extern _mbctype MSVCRT_mbctype
-# stub _mblen_l(str long ptr)
+@ cdecl _mblen_l(str long ptr)
 @ cdecl _mbsbtype(str long)
 @ cdecl _mbsbtype_l(str long ptr)
 @ cdecl _mbscat(str str)
diff --git a/dlls/ucrtbase/ucrtbase.spec b/dlls/ucrtbase/ucrtbase.spec
index 4bb7f4148c7..7cf9b01aa4f 100644
--- a/dlls/ucrtbase/ucrtbase.spec
+++ b/dlls/ucrtbase/ucrtbase.spec
@@ -609,7 +609,7 @@
 @ cdecl _mbctombb_l(long ptr)
 @ cdecl _mbctoupper(long)
 @ cdecl _mbctoupper_l(long ptr)
-@ stub _mblen_l
+@ cdecl _mblen_l(str long ptr)
 @ cdecl _mbsbtype(str long)
 @ cdecl _mbsbtype_l(str long ptr)
 @ cdecl _mbscat_s(ptr long str)
@@ -1179,7 +1179,7 @@
 @ cdecl _o__mbctombb_l(long ptr) _mbctombb_l
 @ cdecl _o__mbctoupper(long) _mbctoupper
 @ cdecl _o__mbctoupper_l(long ptr) _mbctoupper_l
-@ stub _o__mblen_l
+@ cdecl _o__mblen_l(str long ptr) _mblen_l
 @ cdecl _o__mbsbtype(str long) _mbsbtype
 @ cdecl _o__mbsbtype_l(str long ptr) _mbsbtype_l
 @ cdecl _o__mbscat_s(ptr long str) _mbscat_s
-- 
GitLab

From b6d4be61eb1fc9f3f654dcc6e613d6cd7d1dd1b9 Mon Sep 17 00:00:00 2001
From: Eric Pouech <epouech@codeweavers.com>
Date: Fri, 10 Nov 2023 09:13:28 +0100
Subject: [PATCH 1/6] msvcrt/tests: Improve environment tests (initial
 conditions).

Signed-off-by: Eric Pouech <epouech@codeweavers.com>
---
 dlls/msvcrt/tests/environ.c | 150 ++++++++++++++++++++----------------
 1 file changed, 82 insertions(+), 68 deletions(-)

diff --git a/dlls/msvcrt/tests/environ.c b/dlls/msvcrt/tests/environ.c
index 22f697a12ea..74add49e010 100644
--- a/dlls/msvcrt/tests/environ.c
+++ b/dlls/msvcrt/tests/environ.c
@@ -46,6 +46,8 @@ static const char *a_very_long_env_string =
 
 static char ***(__cdecl *p__p__environ)(void);
 static WCHAR ***(__cdecl *p__p__wenviron)(void);
+static char ***(__cdecl *p__p___initenv)(void);
+static wchar_t ***(__cdecl *p__p___winitenv)(void);
 static void (__cdecl *p_get_environ)(char ***);
 static void (__cdecl *p_get_wenviron)(WCHAR ***);
 static errno_t (__cdecl *p_putenv_s)(const char*, const char*);
@@ -61,6 +63,8 @@ static void init(void)
 
     p__p__environ = (void *)GetProcAddress(hmod, "__p__environ");
     p__p__wenviron = (void *)GetProcAddress(hmod, "__p__wenviron");
+    p__p___initenv = (void *)GetProcAddress(hmod, "__p___initenv");
+    p__p___winitenv = (void *)GetProcAddress(hmod, "__p___winitenv");
     p_environ = (void *)GetProcAddress(hmod, "_environ");
     p_wenviron = (void *)GetProcAddress(hmod, "_wenviron");
     p_get_environ = (void *)GetProcAddress(hmod, "_get_environ");
@@ -79,21 +83,32 @@ static void test_system(void)
     ok(ret == 0, "Expected system to return 0, got %d\n", ret);
 }
 
+static wchar_t *env_get_valueW( wchar_t **envp, const wchar_t *var )
+{
+    unsigned i;
+    size_t len = wcslen( var );
+
+    if (!envp) return NULL;
+    for (i = 0; envp[i] != NULL; i++)
+    {
+        wchar_t *ptr;
+
+        if (!(ptr = wcschr( envp[i], L'=' ))) continue;
+
+        if (ptr - envp[i] == len && !memcmp( envp[i], var, len * sizeof(wchar_t) ))
+            return ptr + 1;
+    }
+    return NULL;
+}
+
 static void test__environ(void)
 {
     int argc;
-    char **argv, **envp = NULL;
-    int i, mode = 0;
+    char **argv, **envp = NULL, **initenv = NULL;
+    int mode = 0;
 
     ok( p_environ != NULL, "Expected the pointer to _environ to be non-NULL\n" );
-    if (p_environ)
-        ok( *p_environ != NULL, "Expected _environ to be initialized on startup\n" );
-
-    if (!p_environ || !*p_environ)
-    {
-        skip( "_environ pointers are not valid\n" );
-        return;
-    }
+    ok( *p_environ != NULL, "Expected _environ to be initialized on startup\n" );
 
     if (sizeof(void*) != sizeof(int))
         ok( !p__p__environ, "__p__environ() should be 32-bit only\n");
@@ -110,32 +125,38 @@ static void test__environ(void)
     else
         win_skip( "_get_environ() is not available\n" );
 
+    if (p__p___initenv)
+    {
+        initenv = *p__p___initenv();
+
+        todo_wine
+        ok( initenv == *p_environ,
+            "Expected _environ to be equal to initial env\n" );
+    }
+    else
+        skip( "__p___initenv() is not available\n" );
+
     /* Note that msvcrt from Windows versions older than Vista
      * expects the mode pointer parameter to be valid.*/
     __getmainargs(&argc, &argv, &envp, 0, &mode);
 
-    ok( envp != NULL, "Expected initial environment block pointer to be non-NULL\n" );
-    if (!envp)
-    {
-        skip( "Initial environment block pointer is not valid\n" );
-        return;
-    }
+    ok( envp != NULL,
+        "Expected initial environment block pointer to be non-NULL\n" );
+    todo_wine
+    ok( envp == *p_environ,
+        "Expected initial environment to be equal to _environ\n" );
 
-    for (i = 0; ; i++)
+    ok( _putenv("cat=dog") == 0, "failed setting cat=dog\n" );
+    if (p__p___initenv)
     {
-        if ((*p_environ)[i])
-        {
-            ok( envp[i] != NULL, "Expected environment block pointer element to be non-NULL\n" );
-            ok( !strcmp((*p_environ)[i], envp[i]),
-                "Expected _environ and environment block pointer strings (%s vs. %s) to match\n",
-                (*p_environ)[i], envp[i] );
-        }
-        else
-        {
-            ok( !envp[i], "Expected environment block pointer element to be NULL, got %p\n", envp[i] );
-            break;
-        }
+        char **retptr = *p__p___initenv();
+
+        ok( retptr != *p_environ,
+            "Expected _environ[] not to be equal to initial env\n" );
+        ok( retptr == initenv,
+            "Unexpected modification of initial env\n" );
     }
+    ok( _putenv("cat=") == 0, "failed setting cat=\n" );
 }
 
 static void test__wenviron(void)
@@ -143,36 +164,38 @@ static void test__wenviron(void)
     int argc;
     char **argv, **envp = NULL;
     WCHAR **wargv, **wenvp = NULL;
-    int i, mode = 0;
+    int mode = 0;
 
     ok( p_wenviron != NULL, "Expected the pointer to _wenviron to be non-NULL\n" );
-    if (p_wenviron)
-        ok( *p_wenviron == NULL, "Expected _wenviron to be NULL, got %p\n", *p_wenviron );
-    else
-    {
-        win_skip( "Pointer to _wenviron is not valid\n" );
-        return;
-    }
+    ok( !*p_wenviron, "Expected _wenviron[] to be NULL, got %p\n", *p_wenviron );
 
     if (sizeof(void*) != sizeof(int))
         ok( !p__p__wenviron, "__p__wenviron() should be 32-bit only\n");
     else
-        ok( *p__p__wenviron() == NULL, "Expected _wenviron pointers to be NULL\n" );
+        ok( !*p__p__wenviron(), "Expected _wenviron to be NULL, got %p\n", *p_wenviron );
 
     if (p_get_wenviron)
     {
         WCHAR **retptr;
         p_get_wenviron(&retptr);
-        ok( retptr == NULL,
-            "Expected _wenviron pointers to be NULL\n" );
+        ok( retptr == *p_wenviron, "Expected _wenviron pointers to be NULL\n" );
     }
     else
         win_skip( "_get_wenviron() is not available\n" );
 
+    if (p__p___winitenv)
+    {
+        wchar_t ***retptr = p__p___winitenv();
+        todo_wine
+        ok( !*retptr, "Expected initial env to be NULL\n" );
+    }
+    else
+        skip( "__p___winitenv() is not available\n" );
+
     /* __getmainargs doesn't initialize _wenviron. */
     __getmainargs(&argc, &argv, &envp, 0, &mode);
 
-    ok( *p_wenviron == NULL, "Expected _wenviron to be NULL, got %p\n", *p_wenviron);
+    ok( !*p_wenviron, "Expected _wenviron to be NULL\n");
     ok( envp != NULL, "Expected initial environment block pointer to be non-NULL\n" );
     if (!envp)
     {
@@ -182,24 +205,33 @@ static void test__wenviron(void)
 
     /* Neither does calling the non-Unicode environment manipulation functions. */
     ok( _putenv("cat=dog") == 0, "failed setting cat=dog\n" );
-    ok( *p_wenviron == NULL, "Expected _wenviron to be NULL, got %p\n", *p_wenviron);
-    ok( _putenv("cat=") == 0, "failed deleting cat\n" );
+    ok( !*p_wenviron, "Expected _wenviron to be NULL\n" );
 
     /* _wenviron isn't initialized until __wgetmainargs is called or
      * one of the Unicode environment manipulation functions is called. */
-    ok( _wputenv(L"cat=dog") == 0, "failed setting cat=dog\n" );
+    ok( _wputenv(L"cat=dog2") == 0, "failed setting cat=dog2\n" );
     ok( *p_wenviron != NULL, "Expected _wenviron to be non-NULL\n" );
-    ok( _wputenv(L"cat=") == 0, "failed deleting cat\n" );
 
     __wgetmainargs(&argc, &wargv, &wenvp, 0, &mode);
-
-    ok( *p_wenviron != NULL, "Expected _wenviron to be non-NULL\n" );
     ok( wenvp != NULL, "Expected initial environment block pointer to be non-NULL\n" );
-    if (!wenvp)
+    todo_wine
+    ok( wenvp == *p_wenviron, "Expected initial environment to be _wenviron[]\n" );
+
+    if (p__p___winitenv)
     {
-        skip( "Initial environment block pointer is not valid\n" );
-        return;
+        wchar_t ***retptr = p__p___winitenv();
+        wchar_t *value;
+
+        ok( *retptr != NULL, "Expected *__p___winitenv() to be NULL\n" );
+        ok( *retptr != *p_wenviron,
+            "Expected _wenviron to be different from __p___winitenv() %p %p\n", *retptr, *p_wenviron );
+        /* test that w-initial env is derived from current _environ[] and not from ansi initial env */
+        value = env_get_valueW( *retptr, L"cat" );
+        todo_wine
+        ok( value && !wcscmp( value, L"dog" ),
+                "Expecting initial env to be derived from current env (got %ls)\n", value );
     }
+    _putenv("cat=");
 
     /* Examine the returned pointer from __p__wenviron(),
      * if available, after _wenviron is initialized. */
@@ -216,22 +248,6 @@ static void test__wenviron(void)
         ok( retptr == *p_wenviron,
             "Expected _wenviron pointers to be identical\n" );
     }
-
-    for (i = 0; ; i++)
-    {
-        if ((*p_wenviron)[i])
-        {
-            ok( wenvp[i] != NULL, "Expected environment block pointer element to be non-NULL\n" );
-            ok( !wcscmp((*p_wenviron)[i], wenvp[i]),
-                "Expected _wenviron and environment block pointer strings (%s vs. %s) to match\n",
-                wine_dbgstr_w((*p_wenviron)[i]), wine_dbgstr_w(wenvp[i]) );
-        }
-        else
-        {
-            ok( !wenvp[i], "Expected environment block pointer element to be NULL, got %p\n", wenvp[i] );
-            break;
-        }
-    }
 }
 
 static void test_environment_manipulation(void)
@@ -312,8 +328,6 @@ START_TEST(environ)
 {
     init();
 
-    /* The environ tests should always be run first, as they assume
-     * that the process has not manipulated the environment. */
     test__environ();
     test__wenviron();
     test_environment_manipulation();
-- 
GitLab


From 8b50afed2701a3555aff786ad127bdc7dba6b7c2 Mon Sep 17 00:00:00 2001
From: Eric Pouech <epouech@codeweavers.com>
Date: Fri, 10 Nov 2023 09:13:28 +0100
Subject: [PATCH 2/6] msvcrt/tests: Add tests about allocation of environment
 entries.

Signed-off-by: Eric Pouech <epouech@codeweavers.com>
---
 dlls/msvcrt/tests/environ.c | 44 +++++++++++++++++++++++++++++++++++++
 1 file changed, 44 insertions(+)

diff --git a/dlls/msvcrt/tests/environ.c b/dlls/msvcrt/tests/environ.c
index 74add49e010..eeee2c8f77d 100644
--- a/dlls/msvcrt/tests/environ.c
+++ b/dlls/msvcrt/tests/environ.c
@@ -83,6 +83,15 @@ static void test_system(void)
     ok(ret == 0, "Expected system to return 0, got %d\n", ret);
 }
 
+static unsigned env_get_entry_countA( char **env )
+{
+    unsigned count;
+
+    if (!env) return 0;
+    for (count = 0; env[count] != NULL; count++) {}
+    return count;
+}
+
 static wchar_t *env_get_valueW( wchar_t **envp, const wchar_t *var )
 {
     unsigned i;
@@ -255,6 +264,9 @@ static void test_environment_manipulation(void)
     char buf[256];
     errno_t ret;
     size_t len;
+    unsigned count;
+    char* first;
+    char* second;
 
     ok( _putenv("cat=") == 0, "_putenv failed on deletion of nonexistent environment variable\n" );
     ok( _putenv("cat=dog") == 0, "failed setting cat=dog\n" );
@@ -322,6 +334,38 @@ static void test_environment_manipulation(void)
         ok( !buf[0], "buf = %s\n", buf);
         ok( errno == 0xdeadbeef, "errno = %d\n", errno);
     }
+
+    /* test stability of _environ[] pointers */
+    ok( _putenv( "__winetest_cat=" ) == 0, "Couldn't reset env var\n" );
+    ok( _putenv( "__winetest_dog=" ) == 0, "Couldn't reset env var\n" );
+    count = env_get_entry_countA( *p_environ );
+    ok( _putenv( "__winetest_cat=mew") == 0, "Couldn't set env var\n" );
+    ok( !strcmp( (*p_environ)[count], "__winetest_cat=mew"), "Unexpected env var value\n" );
+    first = (*p_environ)[count];
+    ok( getenv("__winetest_cat") == strchr( (*p_environ)[count], '=') + 1, "Expected getenv() to return pointer inside _environ[] entry\n" );
+    ok( _putenv( "__winetest_dog=bark" ) == 0, "Couldn't set env var\n" );
+    ok( !strcmp( (*p_environ)[count + 1], "__winetest_dog=bark" ), "Unexpected env var value\n" );
+    ok( getenv( "__winetest_dog" ) == strchr( (*p_environ)[count + 1], '=' ) + 1, "Expected getenv() to return pointer inside _environ[] entry\n" );
+    todo_wine
+    ok( first == (*p_environ)[count], "Expected stability of _environ[count] pointer\n" );
+    second = (*p_environ)[count + 1];
+    ok( count + 2 == env_get_entry_countA( *p_environ ), "Unexpected count\n" );
+
+    ok( _putenv( "__winetest_cat=purr" ) == 0, "Couldn't set env var\n" );
+    ok( !strcmp( (*p_environ)[count], "__winetest_cat=purr" ), "Unexpected env var value\n" );
+    ok( getenv( "__winetest_cat" ) == strchr( (*p_environ)[count], '=' ) + 1, "Expected getenv() to return pointer inside _environ[] entry\n" );
+    todo_wine
+    ok( second == (*p_environ)[count + 1], "Expected stability of _environ[count] pointer\n" );
+    ok( !strcmp( (*p_environ)[count + 1], "__winetest_dog=bark" ), "Couldn't get env var value\n" );
+    ok( getenv( "__winetest_dog" ) == strchr( (*p_environ)[count + 1], '=' ) + 1, "Expected getenv() to return pointer inside _environ[] entry\n" );
+    ok( count + 2 == env_get_entry_countA( *p_environ ), "Unexpected count\n" );
+    ok( _putenv( "__winetest_cat=" ) == 0, "Couldn't reset env vat\n" );
+    todo_wine
+    ok( second == (*p_environ)[count], "Expected _environ[count] to be second\n" );
+    ok( !strcmp( (*p_environ)[count], "__winetest_dog=bark" ), "Unexpected env var value\n" );
+    ok( count + 1 == env_get_entry_countA( *p_environ ), "Unexpected count\n" );
+    ok( _putenv( "__winetest_dog=" ) == 0, "Couldn't reset env var\n" );
+    ok( count == env_get_entry_countA( *p_environ ), "Unexpected count\n" );
 }
 
 START_TEST(environ)
-- 
GitLab


From a5d7cc47edb6c76be9ba1c6f94c5c1ef8b1076f8 Mon Sep 17 00:00:00 2001
From: Eric Pouech <epouech@codeweavers.com>
Date: Fri, 10 Nov 2023 09:13:28 +0100
Subject: [PATCH 3/6] msvcrt/tests: Add tests about intricating kernel32 and
 msvcrt env calls.

Signed-off-by: Eric Pouech <epouech@codeweavers.com>
---
 dlls/msvcrt/tests/environ.c | 9 +++++++++
 1 file changed, 9 insertions(+)

diff --git a/dlls/msvcrt/tests/environ.c b/dlls/msvcrt/tests/environ.c
index eeee2c8f77d..15e75a2caaf 100644
--- a/dlls/msvcrt/tests/environ.c
+++ b/dlls/msvcrt/tests/environ.c
@@ -366,6 +366,15 @@ static void test_environment_manipulation(void)
     ok( count + 1 == env_get_entry_countA( *p_environ ), "Unexpected count\n" );
     ok( _putenv( "__winetest_dog=" ) == 0, "Couldn't reset env var\n" );
     ok( count == env_get_entry_countA( *p_environ ), "Unexpected count\n" );
+
+    /* in putenv, only changed variable is updated (no other reload of kernel info is done) */
+    ret = SetEnvironmentVariableA( "__winetest_cat", "meow" );
+    ok( ret, "SetEnvironmentVariableA failed: %lu\n", GetLastError() );
+    ok( _putenv( "__winetest_dog=bark" ) == 0, "Couldn't set env var\n" );
+    todo_wine
+    ok( getenv( "__winetest_cat" ) == NULL, "msvcrt env cache shouldn't have been updated\n" );
+    ok( _putenv( "__winetest_cat=" ) == 0, "Couldn't reset env var\n" );
+    ok( _putenv( "__winetest_dog=" ) == 0, "Couldn't reset env var\n" );
 }
 
 START_TEST(environ)
-- 
GitLab


From 740e5ac781b4ab405a8ae2f76392a298d7ba0dfe Mon Sep 17 00:00:00 2001
From: Eric Pouech <epouech@codeweavers.com>
Date: Fri, 10 Nov 2023 09:13:28 +0100
Subject: [PATCH 4/6] msvcrt/tests: Test adding Unicode env variables.

Signed-off-by: Eric Pouech <epouech@codeweavers.com>
---
 dlls/msvcrt/tests/environ.c | 18 ++++++++++++++++++
 1 file changed, 18 insertions(+)

diff --git a/dlls/msvcrt/tests/environ.c b/dlls/msvcrt/tests/environ.c
index 15e75a2caaf..a3d3156c01a 100644
--- a/dlls/msvcrt/tests/environ.c
+++ b/dlls/msvcrt/tests/environ.c
@@ -22,6 +22,7 @@
 #include <errno.h>
 #include <stdlib.h>
 #include <process.h>
+#include <winnls.h>
 
 static const char *a_very_long_env_string =
  "LIBRARY_PATH="
@@ -375,6 +376,23 @@ static void test_environment_manipulation(void)
     ok( getenv( "__winetest_cat" ) == NULL, "msvcrt env cache shouldn't have been updated\n" );
     ok( _putenv( "__winetest_cat=" ) == 0, "Couldn't reset env var\n" );
     ok( _putenv( "__winetest_dog=" ) == 0, "Couldn't reset env var\n" );
+
+    /* test setting unicode bits */
+    count = env_get_entry_countA( *p_environ );
+    ret = WideCharToMultiByte( CP_ACP, 0, L"\u263a", -1, buf, ARRAY_SIZE(buf), 0, 0 );
+    ok( ret, "WideCharToMultiByte failed: %lu\n", GetLastError() );
+    ok( _wputenv( L"__winetest_cat=\u263a" ) == 0, "Couldn't set env var\n" );
+    ok( _wgetenv( L"__winetest_cat" ) && !wcscmp( _wgetenv( L"__winetest_cat" ), L"\u263a" ), "Couldn't retrieve env var\n" );
+    ok( getenv( "__winetest_cat" ) && !strcmp( getenv( "__winetest_cat" ), buf ), "Couldn't retrieve env var\n" );
+    ok( _wputenv( L"__winetest_cat=" ) == 0, "Couldn't reset env var\n" );
+
+    ret = WideCharToMultiByte( CP_ACP, 0, L"__winetest_\u263a", -1, buf, ARRAY_SIZE(buf), 0, 0 );
+    ok( ret, "WideCharToMultiByte failed: %lu\n", GetLastError() );
+    ok( _wputenv( L"__winetest_\u263a=bark" ) == 0, "Couldn't set env var\n" );
+    ok( _wgetenv( L"__winetest_\u263a" ) && !wcscmp( _wgetenv( L"__winetest_\u263a" ), L"bark"), "Couldn't retrieve env var\n" );
+    ok( getenv( buf ) && !strcmp( getenv( buf ), "bark"), "Couldn't retrieve env var %s\n", wine_dbgstr_a(buf) );
+    ok( _wputenv( L"__winetest_\u263a=" ) == 0, "Couldn't reset env var\n" );
+    ok( count == env_get_entry_countA( *p_environ ), "Unexpected modification of _environ[]\n" );
 }
 
 START_TEST(environ)
-- 
GitLab


From bba9e5aea17d32c6b39b35788fde3a4f24d4b107 Mon Sep 17 00:00:00 2001
From: Eric Pouech <epouech@codeweavers.com>
Date: Fri, 10 Nov 2023 09:13:28 +0100
Subject: [PATCH 5/6] msvcrt: Use msvcrt heap for allocating envionment data.

Signed-off-by: Eric Pouech <epouech@codeweavers.com>
---
 dlls/msvcrt/data.c | 15 +++------------
 1 file changed, 3 insertions(+), 12 deletions(-)

diff --git a/dlls/msvcrt/data.c b/dlls/msvcrt/data.c
index d1f514fd460..6312c1e0e32 100644
--- a/dlls/msvcrt/data.c
+++ b/dlls/msvcrt/data.c
@@ -81,10 +81,7 @@ char ** msvcrt_SnapshotOfEnvironmentA(char **blk)
     if (*ptr != '=') count++;
     len += strlen(ptr) + 1;
   }
-  if (blk)
-      blk = HeapReAlloc( GetProcessHeap(), 0, blk, count* sizeof(char*) + len );
-  else
-    blk = HeapAlloc(GetProcessHeap(), 0, count* sizeof(char*) + len );
+  blk = realloc(blk, count * sizeof(char*) + len);
 
   if (blk)
     {
@@ -115,10 +112,8 @@ wchar_t ** msvcrt_SnapshotOfEnvironmentW(wchar_t **wblk)
     if (*wptr != '=') count++;
     len += wcslen(wptr) + 1;
   }
-  if (wblk)
-      wblk = HeapReAlloc( GetProcessHeap(), 0, wblk, count* sizeof(wchar_t*) + len * sizeof(wchar_t));
-  else
-    wblk = HeapAlloc(GetProcessHeap(), 0, count* sizeof(wchar_t*) + len * sizeof(wchar_t));
+  wblk = realloc(wblk, count * sizeof(wchar_t*) + len * sizeof(wchar_t));
+
   if (wblk)
     {
       if (count)
@@ -466,10 +461,6 @@ void msvcrt_free_args(void)
 {
   /* FIXME: more things to free */
   HeapFree(GetProcessHeap(), 0, MSVCRT___argv);
-  HeapFree(GetProcessHeap(), 0, MSVCRT___initenv);
-  HeapFree(GetProcessHeap(), 0, MSVCRT___winitenv);
-  HeapFree(GetProcessHeap(), 0, MSVCRT__environ);
-  HeapFree(GetProcessHeap(), 0, MSVCRT__wenviron);
   HeapFree(GetProcessHeap(), 0, MSVCRT__pgmptr);
   HeapFree(GetProcessHeap(), 0, MSVCRT__wpgmptr);
   HeapFree(GetProcessHeap(), 0, wargv_expand);
-- 
GitLab


From 988884a4f1d689879ab03936b3160dbfed892d82 Mon Sep 17 00:00:00 2001
From: Eric Pouech <epouech@codeweavers.com>
Date: Fri, 10 Nov 2023 09:13:28 +0100
Subject: [PATCH 6/6] msvcrt: Fix getmainargs() family to return correct
 environment block.

Signed-off-by: Eric Pouech <epouech@codeweavers.com>
---
 dlls/msvcrt/data.c          | 4 ++--
 dlls/msvcrt/tests/environ.c | 2 --
 2 files changed, 2 insertions(+), 4 deletions(-)

diff --git a/dlls/msvcrt/data.c b/dlls/msvcrt/data.c
index 6312c1e0e32..8a8552a151e 100644
--- a/dlls/msvcrt/data.c
+++ b/dlls/msvcrt/data.c
@@ -559,7 +559,7 @@ int CDECL __wgetmainargs(int *argc, wchar_t** *wargv, wchar_t** *wenvp,
         MSVCRT__wenviron = msvcrt_SnapshotOfEnvironmentW(NULL);
     *argc = MSVCRT___argc;
     *wargv = MSVCRT___wargv;
-    *wenvp = MSVCRT___winitenv;
+    *wenvp = MSVCRT__wenviron;
     if (new_mode)
         _set_new_mode( *new_mode );
     return 0;
@@ -593,7 +593,7 @@ int CDECL __getmainargs(int *argc, char** *argv, char** *envp,
 
     *argc = MSVCRT___argc;
     *argv = MSVCRT___argv;
-    *envp = MSVCRT___initenv;
+    *envp = MSVCRT__environ;
 
     if (new_mode)
         _set_new_mode( *new_mode );
diff --git a/dlls/msvcrt/tests/environ.c b/dlls/msvcrt/tests/environ.c
index a3d3156c01a..f14764ea5a0 100644
--- a/dlls/msvcrt/tests/environ.c
+++ b/dlls/msvcrt/tests/environ.c
@@ -152,7 +152,6 @@ static void test__environ(void)
 
     ok( envp != NULL,
         "Expected initial environment block pointer to be non-NULL\n" );
-    todo_wine
     ok( envp == *p_environ,
         "Expected initial environment to be equal to _environ\n" );
 
@@ -224,7 +223,6 @@ static void test__wenviron(void)
 
     __wgetmainargs(&argc, &wargv, &wenvp, 0, &mode);
     ok( wenvp != NULL, "Expected initial environment block pointer to be non-NULL\n" );
-    todo_wine
     ok( wenvp == *p_wenviron, "Expected initial environment to be _wenviron[]\n" );
 
     if (p__p___winitenv)
-- 
GitLab

From 49547f8bb90644bb8c41ca71c30bf9227df4e36e Mon Sep 17 00:00:00 2001
From: Jactry Zeng <jzeng@codeweavers.com>
Date: Wed, 15 Nov 2023 08:00:56 +0100
Subject: [PATCH] msvcp140: Add codecvt<char32> class stub.

Wine-Bug: https://bugs.winehq.org/show_bug.cgi?id=47609
---
 dlls/msvcp140/msvcp140.spec   | 108 +++++++-------
 dlls/msvcp90/locale.c         | 255 ++++++++++++++++++++++++++++++++++
 dlls/msvcp90/msvcp90.h        |  14 ++
 dlls/msvcp_win/msvcp_win.spec | 108 +++++++-------
 4 files changed, 377 insertions(+), 108 deletions(-)

diff --git a/dlls/msvcp140/msvcp140.spec b/dlls/msvcp140/msvcp140.spec
index a1a33787f31..e3d01a9326f 100644
--- a/dlls/msvcp140/msvcp140.spec
+++ b/dlls/msvcp140/msvcp140.spec
@@ -181,15 +181,15 @@
 @ stub -arch=win64 ??0?$codecvt@_SDU_Mbstatet@@@std@@QEAA@AEBV_Locinfo@1@KW4_Codecvt_mode@1@_K@Z
 @ stub -arch=win64 ??0?$codecvt@_SDU_Mbstatet@@@std@@QEAA@AEBV_Locinfo@1@_K@Z
 @ stub -arch=win64 ??0?$codecvt@_SDU_Mbstatet@@@std@@QEAA@_K@Z
-@ stub -arch=arm ??0?$codecvt@_UDU_Mbstatet@@@std@@QAA@ABV_Locinfo@1@I@Z
-@ stub -arch=arm ??0?$codecvt@_UDU_Mbstatet@@@std@@QAA@ABV_Locinfo@1@KW4_Codecvt_mode@1@I@Z
-@ stub -arch=arm ??0?$codecvt@_UDU_Mbstatet@@@std@@QAA@I@Z
-@ stub -arch=i386 ??0?$codecvt@_UDU_Mbstatet@@@std@@QAE@ABV_Locinfo@1@I@Z
-@ stub -arch=i386 ??0?$codecvt@_UDU_Mbstatet@@@std@@QAE@ABV_Locinfo@1@KW4_Codecvt_mode@1@I@Z
-@ stub -arch=i386 ??0?$codecvt@_UDU_Mbstatet@@@std@@QAE@I@Z
-@ stub -arch=win64 ??0?$codecvt@_UDU_Mbstatet@@@std@@QEAA@AEBV_Locinfo@1@KW4_Codecvt_mode@1@_K@Z
-@ stub -arch=win64 ??0?$codecvt@_UDU_Mbstatet@@@std@@QEAA@AEBV_Locinfo@1@_K@Z
-@ stub -arch=win64 ??0?$codecvt@_UDU_Mbstatet@@@std@@QEAA@_K@Z
+@ cdecl -arch=arm ??0?$codecvt@_UDU_Mbstatet@@@std@@QAA@ABV_Locinfo@1@I@Z(ptr ptr long) codecvt_char32_ctor_locinfo
+@ cdecl -arch=arm ??0?$codecvt@_UDU_Mbstatet@@@std@@QAA@ABV_Locinfo@1@KW4_Codecvt_mode@1@I@Z(ptr long long long) codecvt_char32_ctor_mode
+@ cdecl -arch=arm ??0?$codecvt@_UDU_Mbstatet@@@std@@QAA@I@Z(ptr long) codecvt_char32_ctor_refs
+@ thiscall -arch=i386 ??0?$codecvt@_UDU_Mbstatet@@@std@@QAE@ABV_Locinfo@1@I@Z(ptr ptr long) codecvt_char32_ctor_locinfo
+@ thiscall -arch=i386 ??0?$codecvt@_UDU_Mbstatet@@@std@@QAE@ABV_Locinfo@1@KW4_Codecvt_mode@1@I@Z(ptr long long long) codecvt_char32_ctor_mode
+@ thiscall -arch=i386 ??0?$codecvt@_UDU_Mbstatet@@@std@@QAE@I@Z(ptr long) codecvt_char32_ctor_refs
+@ cdecl -arch=win64 ??0?$codecvt@_UDU_Mbstatet@@@std@@QEAA@AEBV_Locinfo@1@KW4_Codecvt_mode@1@_K@Z(ptr long long long) codecvt_char32_ctor_mode
+@ cdecl -arch=win64 ??0?$codecvt@_UDU_Mbstatet@@@std@@QEAA@AEBV_Locinfo@1@_K@Z(ptr ptr long) codecvt_char32_ctor_locinfo
+@ cdecl -arch=win64 ??0?$codecvt@_UDU_Mbstatet@@@std@@QEAA@_K@Z(ptr long) codecvt_char32_ctor_refs
 @ cdecl -arch=arm ??0?$codecvt@_WDU_Mbstatet@@@std@@QAA@ABV_Locinfo@1@I@Z(ptr ptr long) codecvt_wchar_ctor_locinfo
 @ cdecl -arch=arm ??0?$codecvt@_WDU_Mbstatet@@@std@@QAA@I@Z(ptr long) codecvt_wchar_ctor_refs
 @ thiscall -arch=i386 ??0?$codecvt@_WDU_Mbstatet@@@std@@QAE@ABV_Locinfo@1@I@Z(ptr ptr long) codecvt_wchar_ctor_locinfo
@@ -427,9 +427,9 @@
 @ stub -arch=arm ??1?$codecvt@_SDU_Mbstatet@@@std@@MAA@XZ
 @ stub -arch=i386 ??1?$codecvt@_SDU_Mbstatet@@@std@@MAE@XZ
 @ stub -arch=win64 ??1?$codecvt@_SDU_Mbstatet@@@std@@MEAA@XZ
-@ stub -arch=arm ??1?$codecvt@_UDU_Mbstatet@@@std@@MAA@XZ
-@ stub -arch=i386 ??1?$codecvt@_UDU_Mbstatet@@@std@@MAE@XZ
-@ stub -arch=win64 ??1?$codecvt@_UDU_Mbstatet@@@std@@MEAA@XZ
+@ cdecl -arch=arm ??1?$codecvt@_UDU_Mbstatet@@@std@@MAA@XZ(ptr) codecvt_char32_dtor
+@ thiscall -arch=i386 ??1?$codecvt@_UDU_Mbstatet@@@std@@MAE@XZ(ptr) codecvt_char32_dtor
+@ cdecl -arch=win64 ??1?$codecvt@_UDU_Mbstatet@@@std@@MEAA@XZ(ptr) codecvt_char32_dtor
 @ cdecl -arch=arm ??1?$codecvt@_WDU_Mbstatet@@@std@@MAA@XZ(ptr) codecvt_wchar_dtor
 @ thiscall -arch=i386 ??1?$codecvt@_WDU_Mbstatet@@@std@@MAE@XZ(ptr) codecvt_wchar_dtor
 @ cdecl -arch=win64 ??1?$codecvt@_WDU_Mbstatet@@@std@@MEAA@XZ(ptr) codecvt_wchar_dtor
@@ -937,7 +937,7 @@
 @ extern ??_7?$codecvt@DDU_Mbstatet@@@std@@6B@ codecvt_char_vtable
 @ extern ??_7?$codecvt@GDU_Mbstatet@@@std@@6B@ codecvt_short_vtable
 # extern ??_7?$codecvt@_SDU_Mbstatet@@@std@@6B@
-# extern ??_7?$codecvt@_UDU_Mbstatet@@@std@@6B@
+@ extern ??_7?$codecvt@_UDU_Mbstatet@@@std@@6B@ codecvt_char32_vtable
 @ extern ??_7?$codecvt@_WDU_Mbstatet@@@std@@6B@ codecvt_wchar_vtable
 @ extern ??_7?$ctype@D@std@@6B@ ctype_char_vtable
 @ extern ??_7?$ctype@G@std@@6B@ ctype_short_vtable
@@ -1009,9 +1009,9 @@
 @ stub -arch=arm ??_F?$codecvt@_SDU_Mbstatet@@@std@@QAAXXZ
 @ stub -arch=i386 ??_F?$codecvt@_SDU_Mbstatet@@@std@@QAEXXZ
 @ stub -arch=win64 ??_F?$codecvt@_SDU_Mbstatet@@@std@@QEAAXXZ
-@ stub -arch=arm ??_F?$codecvt@_UDU_Mbstatet@@@std@@QAAXXZ
-@ stub -arch=i386 ??_F?$codecvt@_UDU_Mbstatet@@@std@@QAEXXZ
-@ stub -arch=win64 ??_F?$codecvt@_UDU_Mbstatet@@@std@@QEAAXXZ
+@ cdecl -arch=arm ??_F?$codecvt@_UDU_Mbstatet@@@std@@QAAXXZ(ptr) codecvt_char32_ctor
+@ thiscall -arch=i386 ??_F?$codecvt@_UDU_Mbstatet@@@std@@QAEXXZ(ptr) codecvt_char32_ctor
+@ cdecl -arch=win64 ??_F?$codecvt@_UDU_Mbstatet@@@std@@QEAAXXZ(ptr) codecvt_char32_ctor
 @ cdecl -arch=arm ??_F?$codecvt@_WDU_Mbstatet@@@std@@QAAXXZ(ptr) codecvt_wchar_ctor
 @ thiscall -arch=i386 ??_F?$codecvt@_WDU_Mbstatet@@@std@@QAEXXZ(ptr) codecvt_wchar_ctor
 @ cdecl -arch=win64 ??_F?$codecvt@_WDU_Mbstatet@@@std@@QEAAXXZ(ptr) codecvt_wchar_ctor
@@ -1175,8 +1175,8 @@
 @ cdecl -arch=win64 ?_Getcat@?$codecvt@GDU_Mbstatet@@@std@@SA_KPEAPEBVfacet@locale@2@PEBV42@@Z(ptr ptr) codecvt_short__Getcat
 @ stub -arch=win32 ?_Getcat@?$codecvt@_SDU_Mbstatet@@@std@@SAIPAPBVfacet@locale@2@PBV42@@Z
 @ stub -arch=win64 ?_Getcat@?$codecvt@_SDU_Mbstatet@@@std@@SA_KPEAPEBVfacet@locale@2@PEBV42@@Z
-@ stub -arch=win32 ?_Getcat@?$codecvt@_UDU_Mbstatet@@@std@@SAIPAPBVfacet@locale@2@PBV42@@Z
-@ stub -arch=win64 ?_Getcat@?$codecvt@_UDU_Mbstatet@@@std@@SA_KPEAPEBVfacet@locale@2@PEBV42@@Z
+@ cdecl -arch=win32 ?_Getcat@?$codecvt@_UDU_Mbstatet@@@std@@SAIPAPBVfacet@locale@2@PBV42@@Z(ptr ptr) codecvt_char32__Getcat
+@ cdecl -arch=win64 ?_Getcat@?$codecvt@_UDU_Mbstatet@@@std@@SA_KPEAPEBVfacet@locale@2@PEBV42@@Z(ptr ptr) codecvt_char32__Getcat
 @ cdecl -arch=win32 ?_Getcat@?$codecvt@_WDU_Mbstatet@@@std@@SAIPAPBVfacet@locale@2@PBV42@@Z(ptr ptr) codecvt_wchar__Getcat
 @ cdecl -arch=win64 ?_Getcat@?$codecvt@_WDU_Mbstatet@@@std@@SA_KPEAPEBVfacet@locale@2@PEBV42@@Z(ptr ptr) codecvt_wchar__Getcat
 @ cdecl -arch=win32 ?_Getcat@?$ctype@D@std@@SAIPAPBVfacet@locale@2@PBV42@@Z(ptr ptr) ctype_char__Getcat
@@ -1356,9 +1356,9 @@
 @ stub -arch=arm ?_Init@?$codecvt@_SDU_Mbstatet@@@std@@IAAXABV_Locinfo@2@@Z
 @ stub -arch=i386 ?_Init@?$codecvt@_SDU_Mbstatet@@@std@@IAEXABV_Locinfo@2@@Z
 @ stub -arch=win64 ?_Init@?$codecvt@_SDU_Mbstatet@@@std@@IEAAXAEBV_Locinfo@2@@Z
-@ stub -arch=arm ?_Init@?$codecvt@_UDU_Mbstatet@@@std@@IAAXABV_Locinfo@2@@Z
-@ stub -arch=i386 ?_Init@?$codecvt@_UDU_Mbstatet@@@std@@IAEXABV_Locinfo@2@@Z
-@ stub -arch=win64 ?_Init@?$codecvt@_UDU_Mbstatet@@@std@@IEAAXAEBV_Locinfo@2@@Z
+@ cdecl -arch=arm ?_Init@?$codecvt@_UDU_Mbstatet@@@std@@IAAXABV_Locinfo@2@@Z(ptr ptr) codecvt_char32__Init
+@ thiscall -arch=i386 ?_Init@?$codecvt@_UDU_Mbstatet@@@std@@IAEXABV_Locinfo@2@@Z(ptr ptr) codecvt_char32__Init
+@ cdecl -arch=win64 ?_Init@?$codecvt@_UDU_Mbstatet@@@std@@IEAAXAEBV_Locinfo@2@@Z(ptr ptr) codecvt_char32__Init
 @ cdecl -arch=arm ?_Init@?$codecvt@_WDU_Mbstatet@@@std@@IAAXABV_Locinfo@2@@Z(ptr ptr) codecvt_wchar__Init
 @ thiscall -arch=i386 ?_Init@?$codecvt@_WDU_Mbstatet@@@std@@IAEXABV_Locinfo@2@@Z(ptr ptr) codecvt_wchar__Init
 @ cdecl -arch=win64 ?_Init@?$codecvt@_WDU_Mbstatet@@@std@@IEAAXAEBV_Locinfo@2@@Z(ptr ptr) codecvt_wchar__Init
@@ -1789,9 +1789,9 @@
 @ stub -arch=arm ?do_always_noconv@?$codecvt@_SDU_Mbstatet@@@std@@MBA_NXZ
 @ stub -arch=i386 ?do_always_noconv@?$codecvt@_SDU_Mbstatet@@@std@@MBE_NXZ
 @ stub -arch=win64 ?do_always_noconv@?$codecvt@_SDU_Mbstatet@@@std@@MEBA_NXZ
-@ stub -arch=arm ?do_always_noconv@?$codecvt@_UDU_Mbstatet@@@std@@MBA_NXZ
-@ stub -arch=i386 ?do_always_noconv@?$codecvt@_UDU_Mbstatet@@@std@@MBE_NXZ
-@ stub -arch=win64 ?do_always_noconv@?$codecvt@_UDU_Mbstatet@@@std@@MEBA_NXZ
+@ cdecl -arch=arm ?do_always_noconv@?$codecvt@_UDU_Mbstatet@@@std@@MBA_NXZ(ptr) codecvt_char32_do_always_noconv
+@ thiscall -arch=i386 ?do_always_noconv@?$codecvt@_UDU_Mbstatet@@@std@@MBE_NXZ(ptr) codecvt_char32_do_always_noconv
+@ cdecl -arch=win64 ?do_always_noconv@?$codecvt@_UDU_Mbstatet@@@std@@MEBA_NXZ(ptr) codecvt_char32_do_always_noconv
 @ cdecl -arch=arm ?do_always_noconv@?$codecvt@_WDU_Mbstatet@@@std@@MBA_NXZ(ptr) codecvt_wchar_do_always_noconv
 @ thiscall -arch=i386 ?do_always_noconv@?$codecvt@_WDU_Mbstatet@@@std@@MBE_NXZ(ptr) codecvt_wchar_do_always_noconv
 @ cdecl -arch=win64 ?do_always_noconv@?$codecvt@_WDU_Mbstatet@@@std@@MEBA_NXZ(ptr) codecvt_wchar_do_always_noconv
@@ -1813,9 +1813,9 @@
 @ stub -arch=arm ?do_encoding@?$codecvt@_SDU_Mbstatet@@@std@@MBAHXZ
 @ stub -arch=i386 ?do_encoding@?$codecvt@_SDU_Mbstatet@@@std@@MBEHXZ
 @ stub -arch=win64 ?do_encoding@?$codecvt@_SDU_Mbstatet@@@std@@MEBAHXZ
-@ stub -arch=arm ?do_encoding@?$codecvt@_UDU_Mbstatet@@@std@@MBAHXZ
-@ stub -arch=i386 ?do_encoding@?$codecvt@_UDU_Mbstatet@@@std@@MBEHXZ
-@ stub -arch=win64 ?do_encoding@?$codecvt@_UDU_Mbstatet@@@std@@MEBAHXZ
+@ cdecl -arch=arm ?do_encoding@?$codecvt@_UDU_Mbstatet@@@std@@MBAHXZ(ptr) codecvt_char32_do_encoding
+@ thiscall -arch=i386 ?do_encoding@?$codecvt@_UDU_Mbstatet@@@std@@MBEHXZ(ptr) codecvt_char32_do_encoding
+@ cdecl -arch=win64 ?do_encoding@?$codecvt@_UDU_Mbstatet@@@std@@MEBAHXZ(ptr) codecvt_char32_do_encoding
 @ cdecl -arch=arm ?do_encoding@?$codecvt@_WDU_Mbstatet@@@std@@MBAHXZ(ptr) codecvt_wchar_do_encoding
 @ thiscall -arch=i386 ?do_encoding@?$codecvt@_WDU_Mbstatet@@@std@@MBEHXZ(ptr) codecvt_wchar_do_encoding
 @ cdecl -arch=win64 ?do_encoding@?$codecvt@_WDU_Mbstatet@@@std@@MEBAHXZ(ptr) codecvt_wchar_do_encoding
@@ -1984,9 +1984,9 @@
 @ stub -arch=arm ?do_in@?$codecvt@_SDU_Mbstatet@@@std@@MBAHAAU_Mbstatet@@PBD1AAPBDPA_S3AAPA_S@Z
 @ stub -arch=i386 ?do_in@?$codecvt@_SDU_Mbstatet@@@std@@MBEHAAU_Mbstatet@@PBD1AAPBDPA_S3AAPA_S@Z
 @ stub -arch=win64 ?do_in@?$codecvt@_SDU_Mbstatet@@@std@@MEBAHAEAU_Mbstatet@@PEBD1AEAPEBDPEA_S3AEAPEA_S@Z
-@ stub -arch=arm ?do_in@?$codecvt@_UDU_Mbstatet@@@std@@MBAHAAU_Mbstatet@@PBD1AAPBDPA_U3AAPA_U@Z
-@ stub -arch=i386 ?do_in@?$codecvt@_UDU_Mbstatet@@@std@@MBEHAAU_Mbstatet@@PBD1AAPBDPA_U3AAPA_U@Z
-@ stub -arch=win64 ?do_in@?$codecvt@_UDU_Mbstatet@@@std@@MEBAHAEAU_Mbstatet@@PEBD1AEAPEBDPEA_U3AEAPEA_U@Z
+@ cdecl -arch=arm ?do_in@?$codecvt@_UDU_Mbstatet@@@std@@MBAHAAU_Mbstatet@@PBD1AAPBDPA_U3AAPA_U@Z(ptr ptr str str ptr ptr ptr ptr) codecvt_char32_do_in
+@ thiscall -arch=i386 ?do_in@?$codecvt@_UDU_Mbstatet@@@std@@MBEHAAU_Mbstatet@@PBD1AAPBDPA_U3AAPA_U@Z(ptr ptr str str ptr ptr ptr ptr) codecvt_char32_do_in
+@ cdecl -arch=win64 ?do_in@?$codecvt@_UDU_Mbstatet@@@std@@MEBAHAEAU_Mbstatet@@PEBD1AEAPEBDPEA_U3AEAPEA_U@Z(ptr ptr str str ptr ptr ptr ptr) codecvt_char32_do_in
 @ cdecl -arch=arm ?do_in@?$codecvt@_WDU_Mbstatet@@@std@@MBAHAAU_Mbstatet@@PBD1AAPBDPA_W3AAPA_W@Z(ptr ptr str str ptr ptr ptr ptr) codecvt_wchar_do_in
 @ thiscall -arch=i386 ?do_in@?$codecvt@_WDU_Mbstatet@@@std@@MBEHAAU_Mbstatet@@PBD1AAPBDPA_W3AAPA_W@Z(ptr ptr str str ptr ptr ptr ptr) codecvt_wchar_do_in
 @ cdecl -arch=win64 ?do_in@?$codecvt@_WDU_Mbstatet@@@std@@MEBAHAEAU_Mbstatet@@PEBD1AEAPEBDPEA_W3AEAPEA_W@Z(ptr ptr str str ptr ptr ptr ptr) codecvt_wchar_do_in
@@ -2011,9 +2011,9 @@
 @ stub -arch=arm ?do_length@?$codecvt@_SDU_Mbstatet@@@std@@MBAHAAU_Mbstatet@@PBD1I@Z
 @ stub -arch=i386 ?do_length@?$codecvt@_SDU_Mbstatet@@@std@@MBEHAAU_Mbstatet@@PBD1I@Z
 @ stub -arch=win64 ?do_length@?$codecvt@_SDU_Mbstatet@@@std@@MEBAHAEAU_Mbstatet@@PEBD1_K@Z
-@ stub -arch=arm ?do_length@?$codecvt@_UDU_Mbstatet@@@std@@MBAHAAU_Mbstatet@@PBD1I@Z
-@ stub -arch=i386 ?do_length@?$codecvt@_UDU_Mbstatet@@@std@@MBEHAAU_Mbstatet@@PBD1I@Z
-@ stub -arch=win64 ?do_length@?$codecvt@_UDU_Mbstatet@@@std@@MEBAHAEAU_Mbstatet@@PEBD1_K@Z
+@ cdecl -arch=arm ?do_length@?$codecvt@_UDU_Mbstatet@@@std@@MBAHAAU_Mbstatet@@PBD1I@Z(ptr ptr str str long) codecvt_char32_do_length
+@ thiscall -arch=i386 ?do_length@?$codecvt@_UDU_Mbstatet@@@std@@MBEHAAU_Mbstatet@@PBD1I@Z(ptr ptr str str long) codecvt_char32_do_length
+@ cdecl -arch=win64 ?do_length@?$codecvt@_UDU_Mbstatet@@@std@@MEBAHAEAU_Mbstatet@@PEBD1_K@Z(ptr ptr str str long) codecvt_char32_do_length
 @ cdecl -arch=arm ?do_length@?$codecvt@_WDU_Mbstatet@@@std@@MBAHAAU_Mbstatet@@PBD1I@Z(ptr ptr str str long) codecvt_wchar_do_length
 @ thiscall -arch=i386 ?do_length@?$codecvt@_WDU_Mbstatet@@@std@@MBEHAAU_Mbstatet@@PBD1I@Z(ptr ptr str str long) codecvt_wchar_do_length
 @ cdecl -arch=win64 ?do_length@?$codecvt@_WDU_Mbstatet@@@std@@MEBAHAEAU_Mbstatet@@PEBD1_K@Z(ptr ptr str str long) codecvt_wchar_do_length
@@ -2023,9 +2023,9 @@
 @ stub -arch=arm ?do_max_length@?$codecvt@_SDU_Mbstatet@@@std@@MBAHXZ
 @ stub -arch=i386 ?do_max_length@?$codecvt@_SDU_Mbstatet@@@std@@MBEHXZ
 @ stub -arch=win64 ?do_max_length@?$codecvt@_SDU_Mbstatet@@@std@@MEBAHXZ
-@ stub -arch=arm ?do_max_length@?$codecvt@_UDU_Mbstatet@@@std@@MBAHXZ
-@ stub -arch=i386 ?do_max_length@?$codecvt@_UDU_Mbstatet@@@std@@MBEHXZ
-@ stub -arch=win64 ?do_max_length@?$codecvt@_UDU_Mbstatet@@@std@@MEBAHXZ
+@ cdecl -arch=arm ?do_max_length@?$codecvt@_UDU_Mbstatet@@@std@@MBAHXZ(ptr) codecvt_char32_do_max_length
+@ thiscall -arch=i386 ?do_max_length@?$codecvt@_UDU_Mbstatet@@@std@@MBEHXZ(ptr) codecvt_char32_do_max_length
+@ cdecl -arch=win64 ?do_max_length@?$codecvt@_UDU_Mbstatet@@@std@@MEBAHXZ(ptr) codecvt_char32_do_max_length
 @ cdecl -arch=arm ?do_max_length@?$codecvt@_WDU_Mbstatet@@@std@@MBAHXZ(ptr) codecvt_wchar_do_max_length
 @ thiscall -arch=i386 ?do_max_length@?$codecvt@_WDU_Mbstatet@@@std@@MBEHXZ(ptr) codecvt_wchar_do_max_length
 @ cdecl -arch=win64 ?do_max_length@?$codecvt@_WDU_Mbstatet@@@std@@MEBAHXZ(ptr) codecvt_wchar_do_max_length
@@ -2059,9 +2059,9 @@
 @ stub -arch=arm ?do_out@?$codecvt@_SDU_Mbstatet@@@std@@MBAHAAU_Mbstatet@@PB_S1AAPB_SPAD3AAPAD@Z
 @ stub -arch=i386 ?do_out@?$codecvt@_SDU_Mbstatet@@@std@@MBEHAAU_Mbstatet@@PB_S1AAPB_SPAD3AAPAD@Z
 @ stub -arch=win64 ?do_out@?$codecvt@_SDU_Mbstatet@@@std@@MEBAHAEAU_Mbstatet@@PEB_S1AEAPEB_SPEAD3AEAPEAD@Z
-@ stub -arch=arm ?do_out@?$codecvt@_UDU_Mbstatet@@@std@@MBAHAAU_Mbstatet@@PB_U1AAPB_UPAD3AAPAD@Z
-@ stub -arch=i386 ?do_out@?$codecvt@_UDU_Mbstatet@@@std@@MBEHAAU_Mbstatet@@PB_U1AAPB_UPAD3AAPAD@Z
-@ stub -arch=win64 ?do_out@?$codecvt@_UDU_Mbstatet@@@std@@MEBAHAEAU_Mbstatet@@PEB_U1AEAPEB_UPEAD3AEAPEAD@Z
+@ cdecl -arch=arm ?do_out@?$codecvt@_UDU_Mbstatet@@@std@@MBAHAAU_Mbstatet@@PB_U1AAPB_UPAD3AAPAD@Z(ptr ptr ptr ptr ptr ptr ptr ptr) codecvt_char32_do_out
+@ thiscall -arch=i386 ?do_out@?$codecvt@_UDU_Mbstatet@@@std@@MBEHAAU_Mbstatet@@PB_U1AAPB_UPAD3AAPAD@Z(ptr ptr ptr ptr ptr ptr ptr ptr) codecvt_char32_do_out
+@ cdecl -arch=win64 ?do_out@?$codecvt@_UDU_Mbstatet@@@std@@MEBAHAEAU_Mbstatet@@PEB_U1AEAPEB_UPEAD3AEAPEAD@Z(ptr ptr ptr ptr ptr ptr ptr ptr) codecvt_char32_do_out
 @ cdecl -arch=arm ?do_out@?$codecvt@_WDU_Mbstatet@@@std@@MBAHAAU_Mbstatet@@PB_W1AAPB_WPAD3AAPAD@Z(ptr ptr wstr wstr ptr ptr ptr ptr) codecvt_wchar_do_out
 @ thiscall -arch=i386 ?do_out@?$codecvt@_WDU_Mbstatet@@@std@@MBEHAAU_Mbstatet@@PB_W1AAPB_WPAD3AAPAD@Z(ptr ptr wstr wstr ptr ptr ptr ptr) codecvt_wchar_do_out
 @ cdecl -arch=win64 ?do_out@?$codecvt@_WDU_Mbstatet@@@std@@MEBAHAEAU_Mbstatet@@PEB_W1AEAPEB_WPEAD3AEAPEAD@Z(ptr ptr wstr wstr ptr ptr ptr ptr) codecvt_wchar_do_out
@@ -2203,9 +2203,9 @@
 @ stub -arch=arm ?do_unshift@?$codecvt@_SDU_Mbstatet@@@std@@MBAHAAU_Mbstatet@@PAD1AAPAD@Z
 @ stub -arch=i386 ?do_unshift@?$codecvt@_SDU_Mbstatet@@@std@@MBEHAAU_Mbstatet@@PAD1AAPAD@Z
 @ stub -arch=win64 ?do_unshift@?$codecvt@_SDU_Mbstatet@@@std@@MEBAHAEAU_Mbstatet@@PEAD1AEAPEAD@Z
-@ stub -arch=arm ?do_unshift@?$codecvt@_UDU_Mbstatet@@@std@@MBAHAAU_Mbstatet@@PAD1AAPAD@Z
-@ stub -arch=i386 ?do_unshift@?$codecvt@_UDU_Mbstatet@@@std@@MBEHAAU_Mbstatet@@PAD1AAPAD@Z
-@ stub -arch=win64 ?do_unshift@?$codecvt@_UDU_Mbstatet@@@std@@MEBAHAEAU_Mbstatet@@PEAD1AEAPEAD@Z
+@ cdecl -arch=arm ?do_unshift@?$codecvt@_UDU_Mbstatet@@@std@@MBAHAAU_Mbstatet@@PAD1AAPAD@Z(ptr ptr ptr ptr ptr) codecvt_char32_do_unshift
+@ thiscall -arch=i386 ?do_unshift@?$codecvt@_UDU_Mbstatet@@@std@@MBEHAAU_Mbstatet@@PAD1AAPAD@Z(ptr ptr ptr ptr ptr) codecvt_char32_do_unshift
+@ cdecl -arch=win64 ?do_unshift@?$codecvt@_UDU_Mbstatet@@@std@@MEBAHAEAU_Mbstatet@@PEAD1AEAPEAD@Z(ptr ptr ptr ptr ptr) codecvt_char32_do_unshift
 @ cdecl -arch=arm ?do_unshift@?$codecvt@_WDU_Mbstatet@@@std@@MBAHAAU_Mbstatet@@PAD1AAPAD@Z(ptr ptr ptr ptr ptr) codecvt_wchar_do_unshift
 @ thiscall -arch=i386 ?do_unshift@?$codecvt@_WDU_Mbstatet@@@std@@MBEHAAU_Mbstatet@@PAD1AAPAD@Z(ptr ptr ptr ptr ptr) codecvt_wchar_do_unshift
 @ cdecl -arch=win64 ?do_unshift@?$codecvt@_WDU_Mbstatet@@@std@@MEBAHAEAU_Mbstatet@@PEAD1AEAPEAD@Z(ptr ptr ptr ptr ptr) codecvt_wchar_do_unshift
@@ -2672,9 +2672,9 @@
 @ stub -arch=arm ?in@?$codecvt@_SDU_Mbstatet@@@std@@QBAHAAU_Mbstatet@@PBD1AAPBDPA_S3AAPA_S@Z
 @ stub -arch=i386 ?in@?$codecvt@_SDU_Mbstatet@@@std@@QBEHAAU_Mbstatet@@PBD1AAPBDPA_S3AAPA_S@Z
 @ stub -arch=win64 ?in@?$codecvt@_SDU_Mbstatet@@@std@@QEBAHAEAU_Mbstatet@@PEBD1AEAPEBDPEA_S3AEAPEA_S@Z
-@ stub -arch=arm ?in@?$codecvt@_UDU_Mbstatet@@@std@@QBAHAAU_Mbstatet@@PBD1AAPBDPA_U3AAPA_U@Z
-@ stub -arch=i386 ?in@?$codecvt@_UDU_Mbstatet@@@std@@QBEHAAU_Mbstatet@@PBD1AAPBDPA_U3AAPA_U@Z
-@ stub -arch=win64 ?in@?$codecvt@_UDU_Mbstatet@@@std@@QEBAHAEAU_Mbstatet@@PEBD1AEAPEBDPEA_U3AEAPEA_U@Z
+@ cdecl -arch=arm ?in@?$codecvt@_UDU_Mbstatet@@@std@@QBAHAAU_Mbstatet@@PBD1AAPBDPA_U3AAPA_U@Z(ptr ptr str str ptr ptr ptr ptr) codecvt_char32_in
+@ thiscall -arch=i386 ?in@?$codecvt@_UDU_Mbstatet@@@std@@QBEHAAU_Mbstatet@@PBD1AAPBDPA_U3AAPA_U@Z(ptr ptr str str ptr ptr ptr ptr) codecvt_char32_in
+@ cdecl -arch=win64 ?in@?$codecvt@_UDU_Mbstatet@@@std@@QEBAHAEAU_Mbstatet@@PEBD1AEAPEBDPEA_U3AEAPEA_U@Z(ptr ptr str str ptr ptr ptr ptr) codecvt_char32_in
 @ cdecl -arch=arm ?in@?$codecvt@_WDU_Mbstatet@@@std@@QBAHAAU_Mbstatet@@PBD1AAPBDPA_W3AAPA_W@Z(ptr ptr str str ptr ptr ptr ptr) codecvt_wchar_in
 @ thiscall -arch=i386 ?in@?$codecvt@_WDU_Mbstatet@@@std@@QBEHAAU_Mbstatet@@PBD1AAPBDPA_W3AAPA_W@Z(ptr ptr str str ptr ptr ptr ptr) codecvt_wchar_in
 @ cdecl -arch=win64 ?in@?$codecvt@_WDU_Mbstatet@@@std@@QEBAHAEAU_Mbstatet@@PEBD1AEAPEBDPEA_W3AEAPEA_W@Z(ptr ptr str str ptr ptr ptr ptr) codecvt_wchar_in
@@ -2750,9 +2750,9 @@
 @ stub -arch=arm ?length@?$codecvt@_SDU_Mbstatet@@@std@@QBAHAAU_Mbstatet@@PBD1I@Z
 @ stub -arch=i386 ?length@?$codecvt@_SDU_Mbstatet@@@std@@QBEHAAU_Mbstatet@@PBD1I@Z
 @ stub -arch=win64 ?length@?$codecvt@_SDU_Mbstatet@@@std@@QEBAHAEAU_Mbstatet@@PEBD1_K@Z
-@ stub -arch=arm ?length@?$codecvt@_UDU_Mbstatet@@@std@@QBAHAAU_Mbstatet@@PBD1I@Z
-@ stub -arch=i386 ?length@?$codecvt@_UDU_Mbstatet@@@std@@QBEHAAU_Mbstatet@@PBD1I@Z
-@ stub -arch=win64 ?length@?$codecvt@_UDU_Mbstatet@@@std@@QEBAHAEAU_Mbstatet@@PEBD1_K@Z
+@ cdecl -arch=arm ?length@?$codecvt@_UDU_Mbstatet@@@std@@QBAHAAU_Mbstatet@@PBD1I@Z(ptr ptr str str long) codecvt_char32_length
+@ thiscall -arch=i386 ?length@?$codecvt@_UDU_Mbstatet@@@std@@QBEHAAU_Mbstatet@@PBD1I@Z(ptr ptr str str long) codecvt_char32_length
+@ cdecl -arch=win64 ?length@?$codecvt@_UDU_Mbstatet@@@std@@QEBAHAEAU_Mbstatet@@PEBD1_K@Z(ptr ptr str str long) codecvt_char32_length
 @ cdecl -arch=arm ?length@?$codecvt@_WDU_Mbstatet@@@std@@QBAHAAU_Mbstatet@@PBD1I@Z(ptr ptr str str long) codecvt_wchar_length
 @ thiscall -arch=i386 ?length@?$codecvt@_WDU_Mbstatet@@@std@@QBEHAAU_Mbstatet@@PBD1I@Z(ptr ptr str str long) codecvt_wchar_length
 @ cdecl -arch=win64 ?length@?$codecvt@_WDU_Mbstatet@@@std@@QEBAHAEAU_Mbstatet@@PEBD1_K@Z(ptr ptr str str long) codecvt_wchar_length
@@ -2831,9 +2831,9 @@
 @ stub -arch=arm ?out@?$codecvt@_SDU_Mbstatet@@@std@@QBAHAAU_Mbstatet@@PB_S1AAPB_SPAD3AAPAD@Z
 @ stub -arch=i386 ?out@?$codecvt@_SDU_Mbstatet@@@std@@QBEHAAU_Mbstatet@@PB_S1AAPB_SPAD3AAPAD@Z
 @ stub -arch=win64 ?out@?$codecvt@_SDU_Mbstatet@@@std@@QEBAHAEAU_Mbstatet@@PEB_S1AEAPEB_SPEAD3AEAPEAD@Z
-@ stub -arch=arm ?out@?$codecvt@_UDU_Mbstatet@@@std@@QBAHAAU_Mbstatet@@PB_U1AAPB_UPAD3AAPAD@Z
-@ stub -arch=i386 ?out@?$codecvt@_UDU_Mbstatet@@@std@@QBEHAAU_Mbstatet@@PB_U1AAPB_UPAD3AAPAD@Z
-@ stub -arch=win64 ?out@?$codecvt@_UDU_Mbstatet@@@std@@QEBAHAEAU_Mbstatet@@PEB_U1AEAPEB_UPEAD3AEAPEAD@Z
+@ cdecl -arch=arm ?out@?$codecvt@_UDU_Mbstatet@@@std@@QBAHAAU_Mbstatet@@PB_U1AAPB_UPAD3AAPAD@Z(ptr ptr ptr ptr ptr ptr ptr ptr) codecvt_char32_out
+@ thiscall -arch=i386 ?out@?$codecvt@_UDU_Mbstatet@@@std@@QBEHAAU_Mbstatet@@PB_U1AAPB_UPAD3AAPAD@Z(ptr ptr ptr ptr ptr ptr ptr ptr) codecvt_char32_out
+@ cdecl -arch=win64 ?out@?$codecvt@_UDU_Mbstatet@@@std@@QEBAHAEAU_Mbstatet@@PEB_U1AEAPEB_UPEAD3AEAPEAD@Z(ptr ptr ptr ptr ptr ptr ptr ptr) codecvt_char32_out
 @ cdecl -arch=arm ?out@?$codecvt@_WDU_Mbstatet@@@std@@QBAHAAU_Mbstatet@@PB_W1AAPB_WPAD3AAPAD@Z(ptr ptr wstr wstr ptr ptr ptr ptr) codecvt_wchar_out
 @ thiscall -arch=i386 ?out@?$codecvt@_WDU_Mbstatet@@@std@@QBEHAAU_Mbstatet@@PB_W1AAPB_WPAD3AAPAD@Z(ptr ptr wstr wstr ptr ptr ptr ptr) codecvt_wchar_out
 @ cdecl -arch=win64 ?out@?$codecvt@_WDU_Mbstatet@@@std@@QEBAHAEAU_Mbstatet@@PEB_W1AEAPEB_WPEAD3AEAPEAD@Z(ptr ptr wstr wstr ptr ptr ptr ptr) codecvt_wchar_out
@@ -3544,9 +3544,9 @@
 @ stub -arch=arm ?unshift@?$codecvt@_SDU_Mbstatet@@@std@@QBAHAAU_Mbstatet@@PAD1AAPAD@Z
 @ stub -arch=i386 ?unshift@?$codecvt@_SDU_Mbstatet@@@std@@QBEHAAU_Mbstatet@@PAD1AAPAD@Z
 @ stub -arch=win64 ?unshift@?$codecvt@_SDU_Mbstatet@@@std@@QEBAHAEAU_Mbstatet@@PEAD1AEAPEAD@Z
-@ stub -arch=arm ?unshift@?$codecvt@_UDU_Mbstatet@@@std@@QBAHAAU_Mbstatet@@PAD1AAPAD@Z
-@ stub -arch=i386 ?unshift@?$codecvt@_UDU_Mbstatet@@@std@@QBEHAAU_Mbstatet@@PAD1AAPAD@Z
-@ stub -arch=win64 ?unshift@?$codecvt@_UDU_Mbstatet@@@std@@QEBAHAEAU_Mbstatet@@PEAD1AEAPEAD@Z
+@ cdecl -arch=arm ?unshift@?$codecvt@_UDU_Mbstatet@@@std@@QBAHAAU_Mbstatet@@PAD1AAPAD@Z(ptr ptr ptr ptr ptr) codecvt_char32_unshift
+@ thiscall -arch=i386 ?unshift@?$codecvt@_UDU_Mbstatet@@@std@@QBEHAAU_Mbstatet@@PAD1AAPAD@Z(ptr ptr ptr ptr ptr) codecvt_char32_unshift
+@ cdecl -arch=win64 ?unshift@?$codecvt@_UDU_Mbstatet@@@std@@QEBAHAEAU_Mbstatet@@PEAD1AEAPEAD@Z(ptr ptr ptr ptr ptr) codecvt_char32_unshift
 @ cdecl -arch=arm ?unshift@?$codecvt@_WDU_Mbstatet@@@std@@QBAHAAU_Mbstatet@@PAD1AAPAD@Z(ptr ptr ptr ptr ptr) codecvt_wchar_unshift
 @ thiscall -arch=i386 ?unshift@?$codecvt@_WDU_Mbstatet@@@std@@QBEHAAU_Mbstatet@@PAD1AAPAD@Z(ptr ptr ptr ptr ptr) codecvt_wchar_unshift
 @ cdecl -arch=win64 ?unshift@?$codecvt@_WDU_Mbstatet@@@std@@QEBAHAEAU_Mbstatet@@PEAD1AEAPEAD@Z(ptr ptr ptr ptr ptr) codecvt_wchar_unshift
diff --git a/dlls/msvcp90/locale.c b/dlls/msvcp90/locale.c
index 6f2288bce1c..3e5d5ad25ae 100644
--- a/dlls/msvcp90/locale.c
+++ b/dlls/msvcp90/locale.c
@@ -27,6 +27,7 @@
 #include "stdio.h"
 #include "wchar.h"
 #include "wctype.h"
+#include "uchar.h"
 #include "time.h"
 #include "windef.h"
 #include "winbase.h"
@@ -3994,6 +3995,243 @@ int __thiscall codecvt_wchar_length(const codecvt_wchar *this, const _Mbstatet *
     return call_codecvt_wchar_do_length(this, state, from, from_end, max);
 }
 
+#if _MSVCP_VER >= 140
+
+/* ??_7?$codecvt@_UDU_Mbstatet@@@std@@6B@ */
+extern const vtable_ptr codecvt_char32_vtable;
+
+/* ?_Init@?$codecvt@_UDU_Mbstatet@@@std@@IAAXABV_Locinfo@2@@Z */
+/* ?_Init@?$codecvt@_UDU_Mbstatet@@@std@@IAEXABV_Locinfo@2@@Z */
+/* ?_Init@?$codecvt@_UDU_Mbstatet@@@std@@IEAAXAEBV_Locinfo@2@@Z */
+DEFINE_THISCALL_WRAPPER(codecvt_char32__Init, 8)
+void __thiscall codecvt_char32__Init(codecvt_char32 *this, const _Locinfo *locinfo)
+{
+    FIXME("(%p %p) stub\n", this, locinfo);
+}
+
+/* ??0?$codecvt@_UDU_Mbstatet@@@std@@QAA@ABV_Locinfo@1@I@Z */
+/* ??0?$codecvt@_UDU_Mbstatet@@@std@@QAE@ABV_Locinfo@1@I@Z */
+/* ??0?$codecvt@_UDU_Mbstatet@@@std@@QEAA@AEBV_Locinfo@1@_K@Z */
+DEFINE_THISCALL_WRAPPER(codecvt_char32_ctor_locinfo, 12)
+codecvt_char32* __thiscall codecvt_char32_ctor_locinfo(codecvt_char32 *this, const _Locinfo *locinfo, size_t refs)
+{
+    FIXME("(%p %p %Iu) stub\n", this, locinfo, refs);
+    return NULL;
+}
+
+/* ??0?$codecvt@_UDU_Mbstatet@@@std@@QAA@I@Z */
+/* ??0?$codecvt@_UDU_Mbstatet@@@std@@QAE@I@Z */
+/* ??0?$codecvt@_UDU_Mbstatet@@@std@@QEAA@_K@Z */
+DEFINE_THISCALL_WRAPPER(codecvt_char32_ctor_refs, 8)
+codecvt_char* __thiscall codecvt_char32_ctor_refs(codecvt_char32 *this, size_t refs)
+{
+    FIXME("(%p %Iu) stub\n", this, refs);
+    return NULL;
+}
+
+/* ??0?$codecvt@_UDU_Mbstatet@@@std@@QAA@ABV_Locinfo@1@KW4_Codecvt_mode@1@I@Z */
+/* ??0?$codecvt@_UDU_Mbstatet@@@std@@QAE@ABV_Locinfo@1@KW4_Codecvt_mode@1@I@Z */
+/* ??0?$codecvt@_UDU_Mbstatet@@@std@@QEAA@AEBV_Locinfo@1@KW4_Codecvt_mode@1@_K@Z */
+DEFINE_THISCALL_WRAPPER(codecvt_char32_ctor_mode, 16)
+codecvt_char32* __thiscall codecvt_char32_ctor_mode(codecvt_char32 *this, ULONG max_code,
+        codecvt_convert_mode mode, size_t refs)
+{
+    FIXME("(%p %ld %d %Iu) stub\n", this, max_code, mode, refs);
+    return NULL;
+}
+
+/* ??_F?$codecvt@_UDU_Mbstatet@@@std@@QAAXXZ */
+/* ??_F?$codecvt@_UDU_Mbstatet@@@std@@QAEXXZ */
+/* ??_F?$codecvt@_UDU_Mbstatet@@@std@@QEAAXXZ */
+DEFINE_THISCALL_WRAPPER(codecvt_char32_ctor, 4)
+codecvt_char* __thiscall codecvt_char32_ctor(codecvt_char32 *this)
+{
+    FIXME("(%p) stub\n", this);
+    return NULL;
+}
+
+/* ??1?$codecvt@_UDU_Mbstatet@@@std@@MAA@XZ */
+/* ??1?$codecvt@_UDU_Mbstatet@@@std@@MAE@XZ */
+/* ??1?$codecvt@_UDU_Mbstatet@@@std@@MEAA@XZ */
+DEFINE_THISCALL_WRAPPER(codecvt_char32_dtor, 4)
+void __thiscall codecvt_char32_dtor(codecvt_char32 *this)
+{
+    FIXME("(%p) stub\n", this);
+}
+
+DEFINE_THISCALL_WRAPPER(codecvt_char32_vector_dtor, 8)
+codecvt_char32* __thiscall codecvt_char32_vector_dtor(codecvt_char32 *this, unsigned int flags)
+{
+    TRACE("(%p %x)\n", this, flags);
+    if(flags & 2) {
+        /* we have an array, with the number of elements stored before the first object */
+        INT_PTR i, *ptr = (INT_PTR *)this-1;
+
+        for(i=*ptr-1; i>=0; i--)
+            codecvt_char32_dtor(this+i);
+        operator_delete(ptr);
+    } else {
+        codecvt_char32_dtor(this);
+        if(flags & 1)
+            operator_delete(this);
+    }
+
+    return this;
+}
+
+/* ?_Getcat@?$codecvt@_UDU_Mbstatet@@@std@@SAIPAPBVfacet@locale@2@PBV42@@Z */
+/* ?_Getcat@?$codecvt@_UDU_Mbstatet@@@std@@SA_KPEAPEBVfacet@locale@2@PEBV42@@Z */
+size_t __cdecl codecvt_char32__Getcat(const locale_facet **facet, const locale *loc)
+{
+    FIXME("(%p %p) stub\n", facet, loc);
+    return 0;
+}
+
+/* ?do_always_noconv@?$codecvt@_UDU_Mbstatet@@@std@@MBA_NXZ */
+/* ?do_always_noconv@?$codecvt@_UDU_Mbstatet@@@std@@MBE_NXZ */
+/* ?do_always_noconv@?$codecvt@_UDU_Mbstatet@@@std@@MEBA_NXZ */
+DEFINE_THISCALL_WRAPPER(codecvt_char32_do_always_noconv, 4)
+bool __thiscall codecvt_char32_do_always_noconv(const codecvt_char32 *this)
+{
+    FIXME("(%p) stub\n", this);
+    return 0;
+}
+
+/* ?do_encoding@?$codecvt@_UDU_Mbstatet@@@std@@MBAHXZ */
+/* ?do_encoding@?$codecvt@_UDU_Mbstatet@@@std@@MBEHXZ */
+/* ?do_encoding@?$codecvt@_UDU_Mbstatet@@@std@@MEBAHXZ */
+DEFINE_THISCALL_WRAPPER(codecvt_char32_do_encoding, 4)
+int __thiscall codecvt_char32_do_encoding(const codecvt_char32 *this)
+{
+    FIXME("(%p) stub\n", this);
+    return 0;
+}
+
+/* ?do_in@?$codecvt@_UDU_Mbstatet@@@std@@MBEHAAU_Mbstatet@@PBD1AAPBDPA_U3AAPA_U@Z */
+/* ?do_in@?$codecvt@_UDU_Mbstatet@@@std@@MBEHAAU_Mbstatet@@PBD1AAPBDPA_U3AAPA_U@Z */
+/* ?do_in@?$codecvt@_UDU_Mbstatet@@@std@@MEBAHAEAU_Mbstatet@@PEBD1AEAPEBDPEA_U3AEAPEA_U@Z */
+#define call_codecvt_char32_do_in(this, state, from, from_end, from_next, to, to_end, to_next) \
+    CALL_VTBL_FUNC(this, 24, int, \
+            (const codecvt_char32*, _Mbstatet*, const char*, const char*, const char**, \
+                    char32_t*, char32_t*, char32_t**), \
+            (this, state, from, from_end, from_next, to, to_end, to_next))
+DEFINE_THISCALL_WRAPPER(codecvt_char32_do_in, 32)
+int __thiscall codecvt_char32_do_in(const codecvt_char32 *this, _Mbstatet *state,
+        const char *from, const char *from_end, const char **from_next,
+        char32_t *to, char32_t *to_end, char32_t **to_next)
+{
+    FIXME("(%p %p %p %p %p %p %p %p) stub\n", this, state, from,
+            from_end, from_next, to, to_end, to_next);
+    return 0;
+}
+
+/* ?in@?$codecvt@_UDU_Mbstatet@@@std@@QBAHAAU_Mbstatet@@PBD1AAPBDPA_U3AAPA_U@Z */
+/* ?in@?$codecvt@_UDU_Mbstatet@@@std@@QBEHAAU_Mbstatet@@PBD1AAPBDPA_U3AAPA_U@Z */
+/* ?in@?$codecvt@_UDU_Mbstatet@@@std@@QEBAHAEAU_Mbstatet@@PEBD1AEAPEBDPEA_U3AEAPEA_U@Z */
+DEFINE_THISCALL_WRAPPER(codecvt_char32_in, 32)
+int __thiscall codecvt_char32_in(const codecvt_char32 *this, _Mbstatet *state,
+        const char *from, const char *from_end, const char **from_next,
+        char32_t *to, char32_t *to_end, char32_t **to_next)
+{
+    TRACE("(%p %p %p %p %p %p %p %p)\n", this, state, from, from_end,
+            from_next, to, to_end, to_next);
+    return call_codecvt_char32_do_in(this, state, from, from_end, from_next,
+            to, to_end, to_next);
+}
+
+/* ?do_length@?$codecvt@_UDU_Mbstatet@@@std@@MBAHAAU_Mbstatet@@PBD1I@Z */
+/* ?do_length@?$codecvt@_UDU_Mbstatet@@@std@@MBEHAAU_Mbstatet@@PBD1I@Z */
+/* ?do_length@?$codecvt@_UDU_Mbstatet@@@std@@MEBAHAEAU_Mbstatet@@PEBD1_K@Z */
+#define call_codecvt_char32_do_length(this, state, from, from_end, max) CALL_VTBL_FUNC(this, 36, \
+        int, (const codecvt_char32*, const _Mbstatet*, const char*, const char*, size_t), \
+        (this, state, from, from_end, max))
+DEFINE_THISCALL_WRAPPER(codecvt_char32_do_length, 20)
+int __thiscall codecvt_char32_do_length(const codecvt_char32 *this, const _Mbstatet *state,
+        const char *from, const char *from_end, size_t max)
+{
+    FIXME("(%p %p %p %p %Iu) stub\n", this, state, from, from_end, max);
+    return 0;
+}
+
+
+/* ?length@?$codecvt@_UDU_Mbstatet@@@std@@QBAHAAU_Mbstatet@@PBD1I@Z */
+/* ?length@?$codecvt@_UDU_Mbstatet@@@std@@QBEHAAU_Mbstatet@@PBD1I@Z */
+/* ?length@?$codecvt@_UDU_Mbstatet@@@std@@QEBAHAEAU_Mbstatet@@PEBD1_K@Z */
+DEFINE_THISCALL_WRAPPER(codecvt_char32_length, 20)
+int __thiscall codecvt_char32_length(const codecvt_char32 *this, const _Mbstatet *state,
+        const char *from, const char *from_end, size_t max)
+{
+    TRACE("(%p %p %p %p %Iu)\n", this, state, from, from_end, max);
+    return call_codecvt_char32_do_length(this, state, from, from_end, max);
+}
+
+/* ?do_max_length@?$codecvt@_UDU_Mbstatet@@@std@@MBAHXZ */
+/* ?do_max_length@?$codecvt@_UDU_Mbstatet@@@std@@MBEHXZ */
+/* ?do_max_length@?$codecvt@_UDU_Mbstatet@@@std@@MEBAHXZ */
+DEFINE_THISCALL_WRAPPER(codecvt_char32_do_max_length, 4)
+int __thiscall codecvt_char32_do_max_length(const codecvt_char32 *this)
+{
+    FIXME("(%p) stub\n", this);
+    return 0;
+}
+
+/* ?do_out@?$codecvt@_UDU_Mbstatet@@@std@@MBAHAAU_Mbstatet@@PB_U1AAPB_UPAD3AAPAD@Z */
+/* ?do_out@?$codecvt@_UDU_Mbstatet@@@std@@MBEHAAU_Mbstatet@@PB_U1AAPB_UPAD3AAPAD@Z */
+/* ?do_out@?$codecvt@_UDU_Mbstatet@@@std@@MEBAHAEAU_Mbstatet@@PEB_U1AEAPEB_UPEAD3AEAPEAD@Z */
+#define call_codecvt_char32_do_out(this, state, from, from_end, from_next, to, to_end, to_next) \
+    CALL_VTBL_FUNC(this, 28, int, \
+            (const codecvt_char32*, _Mbstatet*, const char32_t*, const char32_t*, const char32_t**, \
+                    char*, char*, char**), \
+            (this, state, from, from_end, from_next, to, to_end, to_next))
+DEFINE_THISCALL_WRAPPER(codecvt_char32_do_out, 32)
+int __thiscall codecvt_char32_do_out(const codecvt_char32 *this, _Mbstatet *state,
+        const char32_t *from, const char32_t *from_end, const char32_t **from_next,
+        char *to, char *to_end, char **to_next)
+{
+    FIXME("(%p %p %p %p %p %p %p %p) stub\n", this, state, from,
+            from_end, from_next, to, to_end, to_next);
+    return 0;
+}
+
+/* ?out@?$codecvt@_UDU_Mbstatet@@@std@@QBAHAAU_Mbstatet@@PB_U1AAPB_UPAD3AAPAD@Z */
+/* ?out@?$codecvt@_UDU_Mbstatet@@@std@@QBEHAAU_Mbstatet@@PB_U1AAPB_UPAD3AAPAD@Z */
+/* ?out@?$codecvt@_UDU_Mbstatet@@@std@@QEBAHAEAU_Mbstatet@@PEB_U1AEAPEB_UPEAD3AEAPEAD@Z */
+DEFINE_THISCALL_WRAPPER(codecvt_char32_out, 32)
+int __thiscall codecvt_char32_out(const codecvt_char32 *this, _Mbstatet *state,
+        const char32_t *from, const char32_t *from_end, const char32_t **from_next,
+        char *to, char *to_end, char **to_next)
+{
+    TRACE("(%p %p %p %p %p %p %p %p)\n", this, state, from,
+            from_end, from_next, to, to_end, to_next);
+    return call_codecvt_char32_do_out(this, state, from,
+            from_end, from_next, to, to_end, to_next);
+}
+
+/* ?do_unshift@?$codecvt@_UDU_Mbstatet@@@std@@MBAHAAU_Mbstatet@@PAD1AAPAD@Z */
+/* ?do_unshift@?$codecvt@_UDU_Mbstatet@@@std@@MBEHAAU_Mbstatet@@PAD1AAPAD@Z */
+/* ?do_unshift@?$codecvt@_UDU_Mbstatet@@@std@@MEBAHAEAU_Mbstatet@@PEAD1AEAPEAD@Z */
+#define call_codecvt_char32_do_unshift(this, state, to, to_end, to_next) CALL_VTBL_FUNC(this, 32, \
+        int, (const codecvt_char32*, _Mbstatet*, char*, char*, char**), (this, state, to, to_end, to_next))
+DEFINE_THISCALL_WRAPPER(codecvt_char32_do_unshift, 20)
+int __thiscall codecvt_char32_do_unshift(const codecvt_char32 *this,
+        _Mbstatet *state, char *to, char *to_end, char **to_next)
+{
+    FIXME("(%p %p %p %p %p) stub\n", this, state, to, to_end, to_next);
+    return 0;
+}
+
+/* ?unshift@?$codecvt@_UDU_Mbstatet@@@std@@QBAHAAU_Mbstatet@@PAD1AAPAD@Z */
+/* ?unshift@?$codecvt@_UDU_Mbstatet@@@std@@QBEHAAU_Mbstatet@@PAD1AAPAD@Z */
+/* ?unshift@?$codecvt@_UDU_Mbstatet@@@std@@QEBAHAEAU_Mbstatet@@PEAD1AEAPEAD@Z */
+DEFINE_THISCALL_WRAPPER(codecvt_char32_unshift, 20)
+int __thiscall codecvt_char32_unshift(const codecvt_char32 *this,
+        _Mbstatet *state, char *to, char *to_end, char **to_next)
+{
+    TRACE("(%p %p %p %p %p)\n", this, state, to, to_end, to_next);
+    return call_codecvt_char32_do_unshift(this, state, to, to_end, to_next);
+}
+#endif
+
 /* ?id@?$numpunct@D@std@@2V0locale@2@A */
 locale_id numpunct_char_id = {0};
 
@@ -12444,6 +12682,7 @@ DEFINE_RTTI_DATA2(ctype_short, 0, &ctype_base_rtti_base_descriptor, &locale_face
 DEFINE_RTTI_DATA1(codecvt_base, 0, &locale_facet_rtti_base_descriptor, ".?AVcodecvt_base@std@@")
 #if _MSVCP_VER >= 140
 DEFINE_RTTI_DATA2(codecvt_char, 0, &codecvt_base_rtti_base_descriptor, &locale_facet_rtti_base_descriptor, ".?AV?$codecvt@DDU_Mbstatet@@@std@@")
+DEFINE_RTTI_DATA2(codecvt_char32, 0, &codecvt_base_rtti_base_descriptor, &locale_facet_rtti_base_descriptor, ".?AV?$codecvt@_UDU@std@@")
 DEFINE_RTTI_DATA2(codecvt_wchar, 0, &codecvt_base_rtti_base_descriptor, &locale_facet_rtti_base_descriptor, ".?AV?$codecvt@_WDU_Mbstatet@@@std@@")
 DEFINE_RTTI_DATA2(codecvt_short, 0, &codecvt_base_rtti_base_descriptor, &locale_facet_rtti_base_descriptor, ".?AV?$codecvt@GDU_Mbstatet@@@std@@")
 #else
@@ -12619,6 +12858,19 @@ __ASM_BLOCK_BEGIN(locale_vtables)
             VTABLE_ADD_FUNC(codecvt_char_do_out)
             VTABLE_ADD_FUNC(codecvt_char_do_unshift)
             VTABLE_ADD_FUNC(codecvt_char_do_length));
+#if _MSVCP_VER >= 140
+    __ASM_VTABLE(codecvt_char32,
+            VTABLE_ADD_FUNC(codecvt_char32_vector_dtor)
+            VTABLE_ADD_FUNC(locale_facet__Incref)
+            VTABLE_ADD_FUNC(locale_facet__Decref)
+            VTABLE_ADD_FUNC(codecvt_char32_do_always_noconv)
+            VTABLE_ADD_FUNC(codecvt_char32_do_max_length)
+            VTABLE_ADD_FUNC(codecvt_char32_do_encoding)
+            VTABLE_ADD_FUNC(codecvt_char32_do_in)
+            VTABLE_ADD_FUNC(codecvt_char32_do_out)
+            VTABLE_ADD_FUNC(codecvt_char32_do_unshift)
+            VTABLE_ADD_FUNC(codecvt_char32_do_length));
+#endif
     __ASM_VTABLE(codecvt_wchar,
             VTABLE_ADD_FUNC(codecvt_wchar_vector_dtor)
 #if _MSVCP_VER >= 110
@@ -12849,6 +13101,9 @@ void init_locale(void *base)
     init_ctype_short_rtti(base);
     init_codecvt_base_rtti(base);
     init_codecvt_char_rtti(base);
+#if _MSVCP_VER >= 140
+    init_codecvt_char32_rtti(base);
+#endif
     init_codecvt_wchar_rtti(base);
     init_codecvt_short_rtti(base);
     init_numpunct_char_rtti(base);
diff --git a/dlls/msvcp90/msvcp90.h b/dlls/msvcp90/msvcp90.h
index 69f1785a32b..b9359c33ff1 100644
--- a/dlls/msvcp90/msvcp90.h
+++ b/dlls/msvcp90/msvcp90.h
@@ -236,6 +236,20 @@ typedef struct {
     codecvt_base base;
 } codecvt_char;
 
+#if _MSVCP_VER >= 140
+typedef enum convert_mode
+{
+    consume_header = 4,
+    generate_header = 2,
+    little_endian = 1
+} codecvt_convert_mode;
+
+/* class codecvt<char32> */
+typedef struct {
+    codecvt_base base;
+} codecvt_char32;
+#endif
+
 bool __thiscall codecvt_base_always_noconv(const codecvt_base*);
 int __thiscall codecvt_char_unshift(const codecvt_char*, _Mbstatet*, char*, char*, char**);
 int __thiscall codecvt_char_out(const codecvt_char*, _Mbstatet*, const char*,
diff --git a/dlls/msvcp_win/msvcp_win.spec b/dlls/msvcp_win/msvcp_win.spec
index a2107ea198a..c8107094d31 100644
--- a/dlls/msvcp_win/msvcp_win.spec
+++ b/dlls/msvcp_win/msvcp_win.spec
@@ -181,15 +181,15 @@
 @ stub -arch=arm ??0?$codecvt@_SDU_Mbstatet@@@std@@QAA@I@Z
 @ stub -arch=i386 ??0?$codecvt@_SDU_Mbstatet@@@std@@QAE@I@Z
 @ stub -arch=win64 ??0?$codecvt@_SDU_Mbstatet@@@std@@QEAA@_K@Z
-@ stub -arch=arm ??0?$codecvt@_UDU_Mbstatet@@@std@@QAA@ABV_Locinfo@1@KW4_Codecvt_mode@1@I@Z
-@ stub -arch=i386 ??0?$codecvt@_UDU_Mbstatet@@@std@@QAE@ABV_Locinfo@1@I@Z
-@ stub -arch=win64 ??0?$codecvt@_UDU_Mbstatet@@@std@@QEAA@AEBV_Locinfo@1@KW4_Codecvt_mode@1@_K@Z
-@ stub -arch=arm ??0?$codecvt@_UDU_Mbstatet@@@std@@QAA@ABV_Locinfo@1@I@Z
-@ stub -arch=i386 ??0?$codecvt@_UDU_Mbstatet@@@std@@QAE@ABV_Locinfo@1@KW4_Codecvt_mode@1@I@Z
-@ stub -arch=win64 ??0?$codecvt@_UDU_Mbstatet@@@std@@QEAA@AEBV_Locinfo@1@_K@Z
-@ stub -arch=arm ??0?$codecvt@_UDU_Mbstatet@@@std@@QAA@I@Z
-@ stub -arch=i386 ??0?$codecvt@_UDU_Mbstatet@@@std@@QAE@I@Z
-@ stub -arch=win64 ??0?$codecvt@_UDU_Mbstatet@@@std@@QEAA@_K@Z
+@ cdecl -arch=arm ??0?$codecvt@_UDU_Mbstatet@@@std@@QAA@ABV_Locinfo@1@KW4_Codecvt_mode@1@I@Z(ptr long long long) msvcp140.??0?$codecvt@_UDU_Mbstatet@@@std@@QAA@ABV_Locinfo@1@KW4_Codecvt_mode@1@I@Z
+@ thiscall -arch=i386 ??0?$codecvt@_UDU_Mbstatet@@@std@@QAE@ABV_Locinfo@1@I@Z(ptr ptr long) msvcp140.??0?$codecvt@_UDU_Mbstatet@@@std@@QAE@ABV_Locinfo@1@I@Z
+@ cdecl -arch=win64 ??0?$codecvt@_UDU_Mbstatet@@@std@@QEAA@AEBV_Locinfo@1@KW4_Codecvt_mode@1@_K@Z(ptr long long long) msvcp140.??0?$codecvt@_UDU_Mbstatet@@@std@@QEAA@AEBV_Locinfo@1@KW4_Codecvt_mode@1@_K@Z
+@ cdecl -arch=arm ??0?$codecvt@_UDU_Mbstatet@@@std@@QAA@ABV_Locinfo@1@I@Z(ptr ptr long) msvcp140.??0?$codecvt@_UDU_Mbstatet@@@std@@QAA@ABV_Locinfo@1@I@Z
+@ thiscall -arch=i386 ??0?$codecvt@_UDU_Mbstatet@@@std@@QAE@ABV_Locinfo@1@KW4_Codecvt_mode@1@I@Z(ptr long long long) msvcp140.??0?$codecvt@_UDU_Mbstatet@@@std@@QAE@ABV_Locinfo@1@KW4_Codecvt_mode@1@I@Z
+@ cdecl -arch=win64 ??0?$codecvt@_UDU_Mbstatet@@@std@@QEAA@AEBV_Locinfo@1@_K@Z(ptr ptr long) msvcp140.??0?$codecvt@_UDU_Mbstatet@@@std@@QEAA@AEBV_Locinfo@1@_K@Z
+@ cdecl -arch=arm ??0?$codecvt@_UDU_Mbstatet@@@std@@QAA@I@Z(ptr long) msvcp140.??0?$codecvt@_UDU_Mbstatet@@@std@@QAA@I@Z
+@ thiscall -arch=i386 ??0?$codecvt@_UDU_Mbstatet@@@std@@QAE@I@Z(ptr long) msvcp140.??0?$codecvt@_UDU_Mbstatet@@@std@@QAE@I@Z
+@ cdecl -arch=win64 ??0?$codecvt@_UDU_Mbstatet@@@std@@QEAA@_K@Z(ptr long) msvcp140.??0?$codecvt@_UDU_Mbstatet@@@std@@QEAA@_K@Z
 @ cdecl -arch=arm ??0?$codecvt@_WDU_Mbstatet@@@std@@QAA@ABV_Locinfo@1@I@Z(ptr ptr long) msvcp140.??0?$codecvt@_WDU_Mbstatet@@@std@@QAA@ABV_Locinfo@1@I@Z
 @ thiscall -arch=i386 ??0?$codecvt@_WDU_Mbstatet@@@std@@QAE@ABV_Locinfo@1@I@Z(ptr ptr long) msvcp140.??0?$codecvt@_WDU_Mbstatet@@@std@@QAE@ABV_Locinfo@1@I@Z
 @ cdecl -arch=win64 ??0?$codecvt@_WDU_Mbstatet@@@std@@QEAA@AEBV_Locinfo@1@_K@Z(ptr ptr long) msvcp140.??0?$codecvt@_WDU_Mbstatet@@@std@@QEAA@AEBV_Locinfo@1@_K@Z
@@ -427,9 +427,9 @@
 @ stub -arch=arm ??1?$codecvt@_SDU_Mbstatet@@@std@@MAA@XZ
 @ stub -arch=i386 ??1?$codecvt@_SDU_Mbstatet@@@std@@MAE@XZ
 @ stub -arch=win64 ??1?$codecvt@_SDU_Mbstatet@@@std@@MEAA@XZ
-@ stub -arch=arm ??1?$codecvt@_UDU_Mbstatet@@@std@@MAA@XZ
-@ stub -arch=i386 ??1?$codecvt@_UDU_Mbstatet@@@std@@MAE@XZ
-@ stub -arch=win64 ??1?$codecvt@_UDU_Mbstatet@@@std@@MEAA@XZ
+@ cdecl -arch=arm ??1?$codecvt@_UDU_Mbstatet@@@std@@MAA@XZ(ptr) msvcp140.??1?$codecvt@_UDU_Mbstatet@@@std@@MAA@XZ
+@ thiscall -arch=i386 ??1?$codecvt@_UDU_Mbstatet@@@std@@MAE@XZ(ptr) msvcp140.??1?$codecvt@_UDU_Mbstatet@@@std@@MAE@XZ
+@ cdecl -arch=win64 ??1?$codecvt@_UDU_Mbstatet@@@std@@MEAA@XZ(ptr) msvcp140.??1?$codecvt@_UDU_Mbstatet@@@std@@MEAA@XZ
 @ cdecl -arch=arm ??1?$codecvt@_WDU_Mbstatet@@@std@@MAA@XZ(ptr) msvcp140.??1?$codecvt@_WDU_Mbstatet@@@std@@MAA@XZ
 @ thiscall -arch=i386 ??1?$codecvt@_WDU_Mbstatet@@@std@@MAE@XZ(ptr) msvcp140.??1?$codecvt@_WDU_Mbstatet@@@std@@MAE@XZ
 @ cdecl -arch=win64 ??1?$codecvt@_WDU_Mbstatet@@@std@@MEAA@XZ(ptr) msvcp140.??1?$codecvt@_WDU_Mbstatet@@@std@@MEAA@XZ
@@ -937,7 +937,7 @@
 @ extern ??_7?$codecvt@DDU_Mbstatet@@@std@@6B@ msvcp140.??_7?$codecvt@DDU_Mbstatet@@@std@@6B@
 @ extern ??_7?$codecvt@GDU_Mbstatet@@@std@@6B@ msvcp140.??_7?$codecvt@GDU_Mbstatet@@@std@@6B@
 @ stub ??_7?$codecvt@_SDU_Mbstatet@@@std@@6B@
-@ stub ??_7?$codecvt@_UDU_Mbstatet@@@std@@6B@
+@ extern ??_7?$codecvt@_UDU_Mbstatet@@@std@@6B@ msvcp140.??_7?$codecvt@_UDU_Mbstatet@@@std@@6B@
 @ extern ??_7?$codecvt@_WDU_Mbstatet@@@std@@6B@ msvcp140.??_7?$codecvt@_WDU_Mbstatet@@@std@@6B@
 @ extern ??_7?$ctype@D@std@@6B@ msvcp140.??_7?$ctype@D@std@@6B@
 @ extern ??_7?$ctype@G@std@@6B@ msvcp140.??_7?$ctype@G@std@@6B@
@@ -1009,9 +1009,9 @@
 @ stub -arch=arm ??_F?$codecvt@_SDU_Mbstatet@@@std@@QAAXXZ
 @ stub -arch=i386 ??_F?$codecvt@_SDU_Mbstatet@@@std@@QAEXXZ
 @ stub -arch=win64 ??_F?$codecvt@_SDU_Mbstatet@@@std@@QEAAXXZ
-@ stub -arch=arm ??_F?$codecvt@_UDU_Mbstatet@@@std@@QAAXXZ
-@ stub -arch=i386 ??_F?$codecvt@_UDU_Mbstatet@@@std@@QAEXXZ
-@ stub -arch=win64 ??_F?$codecvt@_UDU_Mbstatet@@@std@@QEAAXXZ
+@ cdecl -arch=arm ??_F?$codecvt@_UDU_Mbstatet@@@std@@QAAXXZ(ptr) msvcp140.??_F?$codecvt@_UDU_Mbstatet@@@std@@QAAXXZ
+@ thiscall -arch=i386 ??_F?$codecvt@_UDU_Mbstatet@@@std@@QAEXXZ(ptr) msvcp140.??_F?$codecvt@_UDU_Mbstatet@@@std@@QAEXXZ
+@ cdecl -arch=win64 ??_F?$codecvt@_UDU_Mbstatet@@@std@@QEAAXXZ(ptr) msvcp140.??_F?$codecvt@_UDU_Mbstatet@@@std@@QEAAXXZ
 @ cdecl -arch=arm ??_F?$codecvt@_WDU_Mbstatet@@@std@@QAAXXZ(ptr) msvcp140.??_F?$codecvt@_WDU_Mbstatet@@@std@@QAAXXZ
 @ thiscall -arch=i386 ??_F?$codecvt@_WDU_Mbstatet@@@std@@QAEXXZ(ptr) msvcp140.??_F?$codecvt@_WDU_Mbstatet@@@std@@QAEXXZ
 @ cdecl -arch=win64 ??_F?$codecvt@_WDU_Mbstatet@@@std@@QEAAXXZ(ptr) msvcp140.??_F?$codecvt@_WDU_Mbstatet@@@std@@QEAAXXZ
@@ -1175,8 +1175,8 @@
 @ cdecl -arch=win64 ?_Getcat@?$codecvt@GDU_Mbstatet@@@std@@SA_KPEAPEBVfacet@locale@2@PEBV42@@Z(ptr ptr) msvcp140.?_Getcat@?$codecvt@GDU_Mbstatet@@@std@@SA_KPEAPEBVfacet@locale@2@PEBV42@@Z
 @ stub -arch=win32 ?_Getcat@?$codecvt@_SDU_Mbstatet@@@std@@SAIPAPBVfacet@locale@2@PBV42@@Z
 @ stub -arch=win64 ?_Getcat@?$codecvt@_SDU_Mbstatet@@@std@@SA_KPEAPEBVfacet@locale@2@PEBV42@@Z
-@ stub -arch=win32 ?_Getcat@?$codecvt@_UDU_Mbstatet@@@std@@SAIPAPBVfacet@locale@2@PBV42@@Z
-@ stub -arch=win64 ?_Getcat@?$codecvt@_UDU_Mbstatet@@@std@@SA_KPEAPEBVfacet@locale@2@PEBV42@@Z
+@ cdecl -arch=win32 ?_Getcat@?$codecvt@_UDU_Mbstatet@@@std@@SAIPAPBVfacet@locale@2@PBV42@@Z(ptr ptr) msvcp140.?_Getcat@?$codecvt@_UDU_Mbstatet@@@std@@SAIPAPBVfacet@locale@2@PBV42@@Z
+@ cdecl -arch=win64 ?_Getcat@?$codecvt@_UDU_Mbstatet@@@std@@SA_KPEAPEBVfacet@locale@2@PEBV42@@Z(ptr ptr) msvcp140.?_Getcat@?$codecvt@_UDU_Mbstatet@@@std@@SA_KPEAPEBVfacet@locale@2@PEBV42@@Z
 @ cdecl -arch=win32 ?_Getcat@?$codecvt@_WDU_Mbstatet@@@std@@SAIPAPBVfacet@locale@2@PBV42@@Z(ptr ptr) msvcp140.?_Getcat@?$codecvt@_WDU_Mbstatet@@@std@@SAIPAPBVfacet@locale@2@PBV42@@Z
 @ cdecl -arch=win64 ?_Getcat@?$codecvt@_WDU_Mbstatet@@@std@@SA_KPEAPEBVfacet@locale@2@PEBV42@@Z(ptr ptr) msvcp140.?_Getcat@?$codecvt@_WDU_Mbstatet@@@std@@SA_KPEAPEBVfacet@locale@2@PEBV42@@Z
 @ cdecl -arch=win32 ?_Getcat@?$ctype@D@std@@SAIPAPBVfacet@locale@2@PBV42@@Z(ptr ptr) msvcp140.?_Getcat@?$ctype@D@std@@SAIPAPBVfacet@locale@2@PBV42@@Z
@@ -1356,9 +1356,9 @@
 @ stub -arch=arm ?_Init@?$codecvt@_SDU_Mbstatet@@@std@@IAAXABV_Locinfo@2@@Z
 @ stub -arch=i386 ?_Init@?$codecvt@_SDU_Mbstatet@@@std@@IAEXABV_Locinfo@2@@Z
 @ stub -arch=win64 ?_Init@?$codecvt@_SDU_Mbstatet@@@std@@IEAAXAEBV_Locinfo@2@@Z
-@ stub -arch=arm ?_Init@?$codecvt@_UDU_Mbstatet@@@std@@IAAXABV_Locinfo@2@@Z
-@ stub -arch=i386 ?_Init@?$codecvt@_UDU_Mbstatet@@@std@@IAEXABV_Locinfo@2@@Z
-@ stub -arch=win64 ?_Init@?$codecvt@_UDU_Mbstatet@@@std@@IEAAXAEBV_Locinfo@2@@Z
+@ cdecl -arch=arm ?_Init@?$codecvt@_UDU_Mbstatet@@@std@@IAAXABV_Locinfo@2@@Z(ptr ptr) msvcp140.?_Init@?$codecvt@_UDU_Mbstatet@@@std@@IAAXABV_Locinfo@2@@Z
+@ thiscall -arch=i386 ?_Init@?$codecvt@_UDU_Mbstatet@@@std@@IAEXABV_Locinfo@2@@Z(ptr ptr) msvcp140.?_Init@?$codecvt@_UDU_Mbstatet@@@std@@IAEXABV_Locinfo@2@@Z
+@ cdecl -arch=win64 ?_Init@?$codecvt@_UDU_Mbstatet@@@std@@IEAAXAEBV_Locinfo@2@@Z(ptr ptr) msvcp140.?_Init@?$codecvt@_UDU_Mbstatet@@@std@@IEAAXAEBV_Locinfo@2@@Z
 @ cdecl -arch=arm ?_Init@?$codecvt@_WDU_Mbstatet@@@std@@IAAXABV_Locinfo@2@@Z(ptr ptr) msvcp140.?_Init@?$codecvt@_WDU_Mbstatet@@@std@@IAAXABV_Locinfo@2@@Z
 @ thiscall -arch=i386 ?_Init@?$codecvt@_WDU_Mbstatet@@@std@@IAEXABV_Locinfo@2@@Z(ptr ptr) msvcp140.?_Init@?$codecvt@_WDU_Mbstatet@@@std@@IAEXABV_Locinfo@2@@Z
 @ cdecl -arch=win64 ?_Init@?$codecvt@_WDU_Mbstatet@@@std@@IEAAXAEBV_Locinfo@2@@Z(ptr ptr) msvcp140.?_Init@?$codecvt@_WDU_Mbstatet@@@std@@IEAAXAEBV_Locinfo@2@@Z
@@ -1789,9 +1789,9 @@
 @ stub -arch=arm ?do_always_noconv@?$codecvt@_SDU_Mbstatet@@@std@@MBA_NXZ
 @ stub -arch=i386 ?do_always_noconv@?$codecvt@_SDU_Mbstatet@@@std@@MBE_NXZ
 @ stub -arch=win64 ?do_always_noconv@?$codecvt@_SDU_Mbstatet@@@std@@MEBA_NXZ
-@ stub -arch=arm ?do_always_noconv@?$codecvt@_UDU_Mbstatet@@@std@@MBA_NXZ
-@ stub -arch=i386 ?do_always_noconv@?$codecvt@_UDU_Mbstatet@@@std@@MBE_NXZ
-@ stub -arch=win64 ?do_always_noconv@?$codecvt@_UDU_Mbstatet@@@std@@MEBA_NXZ
+@ cdecl -arch=arm ?do_always_noconv@?$codecvt@_UDU_Mbstatet@@@std@@MBA_NXZ(ptr) msvcp140.?do_always_noconv@?$codecvt@_UDU_Mbstatet@@@std@@MBA_NXZ
+@ thiscall -arch=i386 ?do_always_noconv@?$codecvt@_UDU_Mbstatet@@@std@@MBE_NXZ(ptr) msvcp140.?do_always_noconv@?$codecvt@_UDU_Mbstatet@@@std@@MBE_NXZ
+@ cdecl -arch=win64 ?do_always_noconv@?$codecvt@_UDU_Mbstatet@@@std@@MEBA_NXZ(ptr) msvcp140.?do_always_noconv@?$codecvt@_UDU_Mbstatet@@@std@@MEBA_NXZ
 @ cdecl -arch=arm ?do_always_noconv@?$codecvt@_WDU_Mbstatet@@@std@@MBA_NXZ(ptr) msvcp140.?do_always_noconv@?$codecvt@_WDU_Mbstatet@@@std@@MBA_NXZ
 @ thiscall -arch=i386 ?do_always_noconv@?$codecvt@_WDU_Mbstatet@@@std@@MBE_NXZ(ptr) msvcp140.?do_always_noconv@?$codecvt@_WDU_Mbstatet@@@std@@MBE_NXZ
 @ cdecl -arch=win64 ?do_always_noconv@?$codecvt@_WDU_Mbstatet@@@std@@MEBA_NXZ(ptr) msvcp140.?do_always_noconv@?$codecvt@_WDU_Mbstatet@@@std@@MEBA_NXZ
@@ -1813,9 +1813,9 @@
 @ stub -arch=arm ?do_encoding@?$codecvt@_SDU_Mbstatet@@@std@@MBAHXZ
 @ stub -arch=i386 ?do_encoding@?$codecvt@_SDU_Mbstatet@@@std@@MBEHXZ
 @ stub -arch=win64 ?do_encoding@?$codecvt@_SDU_Mbstatet@@@std@@MEBAHXZ
-@ stub -arch=arm ?do_encoding@?$codecvt@_UDU_Mbstatet@@@std@@MBAHXZ
-@ stub -arch=i386 ?do_encoding@?$codecvt@_UDU_Mbstatet@@@std@@MBEHXZ
-@ stub -arch=win64 ?do_encoding@?$codecvt@_UDU_Mbstatet@@@std@@MEBAHXZ
+@ cdecl -arch=arm ?do_encoding@?$codecvt@_UDU_Mbstatet@@@std@@MBAHXZ(ptr) msvcp140.?do_encoding@?$codecvt@_UDU_Mbstatet@@@std@@MBAHXZ
+@ thiscall -arch=i386 ?do_encoding@?$codecvt@_UDU_Mbstatet@@@std@@MBEHXZ(ptr) msvcp140.?do_encoding@?$codecvt@_UDU_Mbstatet@@@std@@MBEHXZ
+@ cdecl -arch=win64 ?do_encoding@?$codecvt@_UDU_Mbstatet@@@std@@MEBAHXZ(ptr) msvcp140.?do_encoding@?$codecvt@_UDU_Mbstatet@@@std@@MEBAHXZ
 @ cdecl -arch=arm ?do_encoding@?$codecvt@_WDU_Mbstatet@@@std@@MBAHXZ(ptr) msvcp140.?do_encoding@?$codecvt@_WDU_Mbstatet@@@std@@MBAHXZ
 @ thiscall -arch=i386 ?do_encoding@?$codecvt@_WDU_Mbstatet@@@std@@MBEHXZ(ptr) msvcp140.?do_encoding@?$codecvt@_WDU_Mbstatet@@@std@@MBEHXZ
 @ cdecl -arch=win64 ?do_encoding@?$codecvt@_WDU_Mbstatet@@@std@@MEBAHXZ(ptr) msvcp140.?do_encoding@?$codecvt@_WDU_Mbstatet@@@std@@MEBAHXZ
@@ -1984,9 +1984,9 @@
 @ stub -arch=arm ?do_in@?$codecvt@_SDU_Mbstatet@@@std@@MBAHAAU_Mbstatet@@PBD1AAPBDPA_S3AAPA_S@Z
 @ stub -arch=i386 ?do_in@?$codecvt@_SDU_Mbstatet@@@std@@MBEHAAU_Mbstatet@@PBD1AAPBDPA_S3AAPA_S@Z
 @ stub -arch=win64 ?do_in@?$codecvt@_SDU_Mbstatet@@@std@@MEBAHAEAU_Mbstatet@@PEBD1AEAPEBDPEA_S3AEAPEA_S@Z
-@ stub -arch=arm ?do_in@?$codecvt@_UDU_Mbstatet@@@std@@MBAHAAU_Mbstatet@@PBD1AAPBDPA_U3AAPA_U@Z
-@ stub -arch=i386 ?do_in@?$codecvt@_UDU_Mbstatet@@@std@@MBEHAAU_Mbstatet@@PBD1AAPBDPA_U3AAPA_U@Z
-@ stub -arch=win64 ?do_in@?$codecvt@_UDU_Mbstatet@@@std@@MEBAHAEAU_Mbstatet@@PEBD1AEAPEBDPEA_U3AEAPEA_U@Z
+@ cdecl -arch=arm ?do_in@?$codecvt@_UDU_Mbstatet@@@std@@MBAHAAU_Mbstatet@@PBD1AAPBDPA_U3AAPA_U@Z(ptr ptr str str ptr ptr ptr ptr) msvcp140.?do_in@?$codecvt@_UDU_Mbstatet@@@std@@MBAHAAU_Mbstatet@@PBD1AAPBDPA_U3AAPA_U@Z
+@ thiscall -arch=i386 ?do_in@?$codecvt@_UDU_Mbstatet@@@std@@MBEHAAU_Mbstatet@@PBD1AAPBDPA_U3AAPA_U@Z(ptr ptr str str ptr ptr ptr ptr) msvcp140.?do_in@?$codecvt@_UDU_Mbstatet@@@std@@MBEHAAU_Mbstatet@@PBD1AAPBDPA_U3AAPA_U@Z
+@ cdecl -arch=win64 ?do_in@?$codecvt@_UDU_Mbstatet@@@std@@MEBAHAEAU_Mbstatet@@PEBD1AEAPEBDPEA_U3AEAPEA_U@Z(ptr ptr str str ptr ptr ptr ptr) msvcp140.?do_in@?$codecvt@_UDU_Mbstatet@@@std@@MEBAHAEAU_Mbstatet@@PEBD1AEAPEBDPEA_U3AEAPEA_U@Z
 @ cdecl -arch=arm ?do_in@?$codecvt@_WDU_Mbstatet@@@std@@MBAHAAU_Mbstatet@@PBD1AAPBDPA_W3AAPA_W@Z(ptr ptr str str ptr ptr ptr ptr) msvcp140.?do_in@?$codecvt@_WDU_Mbstatet@@@std@@MBAHAAU_Mbstatet@@PBD1AAPBDPA_W3AAPA_W@Z
 @ thiscall -arch=i386 ?do_in@?$codecvt@_WDU_Mbstatet@@@std@@MBEHAAU_Mbstatet@@PBD1AAPBDPA_W3AAPA_W@Z(ptr ptr str str ptr ptr ptr ptr) msvcp140.?do_in@?$codecvt@_WDU_Mbstatet@@@std@@MBEHAAU_Mbstatet@@PBD1AAPBDPA_W3AAPA_W@Z
 @ cdecl -arch=win64 ?do_in@?$codecvt@_WDU_Mbstatet@@@std@@MEBAHAEAU_Mbstatet@@PEBD1AEAPEBDPEA_W3AEAPEA_W@Z(ptr ptr str str ptr ptr ptr ptr) msvcp140.?do_in@?$codecvt@_WDU_Mbstatet@@@std@@MEBAHAEAU_Mbstatet@@PEBD1AEAPEBDPEA_W3AEAPEA_W@Z
@@ -2011,9 +2011,9 @@
 @ stub -arch=arm ?do_length@?$codecvt@_SDU_Mbstatet@@@std@@MBAHAAU_Mbstatet@@PBD1I@Z
 @ stub -arch=i386 ?do_length@?$codecvt@_SDU_Mbstatet@@@std@@MBEHAAU_Mbstatet@@PBD1I@Z
 @ stub -arch=win64 ?do_length@?$codecvt@_SDU_Mbstatet@@@std@@MEBAHAEAU_Mbstatet@@PEBD1_K@Z
-@ stub -arch=arm ?do_length@?$codecvt@_UDU_Mbstatet@@@std@@MBAHAAU_Mbstatet@@PBD1I@Z
-@ stub -arch=i386 ?do_length@?$codecvt@_UDU_Mbstatet@@@std@@MBEHAAU_Mbstatet@@PBD1I@Z
-@ stub -arch=win64 ?do_length@?$codecvt@_UDU_Mbstatet@@@std@@MEBAHAEAU_Mbstatet@@PEBD1_K@Z
+@ cdecl -arch=arm ?do_length@?$codecvt@_UDU_Mbstatet@@@std@@MBAHAAU_Mbstatet@@PBD1I@Z(ptr ptr str str long) msvcp140.?do_length@?$codecvt@_UDU_Mbstatet@@@std@@MBAHAAU_Mbstatet@@PBD1I@Z
+@ thiscall -arch=i386 ?do_length@?$codecvt@_UDU_Mbstatet@@@std@@MBEHAAU_Mbstatet@@PBD1I@Z(ptr ptr str str long) msvcp140.?do_length@?$codecvt@_UDU_Mbstatet@@@std@@MBEHAAU_Mbstatet@@PBD1I@Z
+@ cdecl -arch=win64 ?do_length@?$codecvt@_UDU_Mbstatet@@@std@@MEBAHAEAU_Mbstatet@@PEBD1_K@Z(ptr ptr str str long) msvcp140.?do_length@?$codecvt@_UDU_Mbstatet@@@std@@MEBAHAEAU_Mbstatet@@PEBD1_K@Z
 @ cdecl -arch=arm ?do_length@?$codecvt@_WDU_Mbstatet@@@std@@MBAHAAU_Mbstatet@@PBD1I@Z(ptr ptr str str long) msvcp140.?do_length@?$codecvt@_WDU_Mbstatet@@@std@@MBAHAAU_Mbstatet@@PBD1I@Z
 @ thiscall -arch=i386 ?do_length@?$codecvt@_WDU_Mbstatet@@@std@@MBEHAAU_Mbstatet@@PBD1I@Z(ptr ptr str str long) msvcp140.?do_length@?$codecvt@_WDU_Mbstatet@@@std@@MBEHAAU_Mbstatet@@PBD1I@Z
 @ cdecl -arch=win64 ?do_length@?$codecvt@_WDU_Mbstatet@@@std@@MEBAHAEAU_Mbstatet@@PEBD1_K@Z(ptr ptr str str long) msvcp140.?do_length@?$codecvt@_WDU_Mbstatet@@@std@@MEBAHAEAU_Mbstatet@@PEBD1_K@Z
@@ -2023,9 +2023,9 @@
 @ stub -arch=arm ?do_max_length@?$codecvt@_SDU_Mbstatet@@@std@@MBAHXZ
 @ stub -arch=i386 ?do_max_length@?$codecvt@_SDU_Mbstatet@@@std@@MBEHXZ
 @ stub -arch=win64 ?do_max_length@?$codecvt@_SDU_Mbstatet@@@std@@MEBAHXZ
-@ stub -arch=arm ?do_max_length@?$codecvt@_UDU_Mbstatet@@@std@@MBAHXZ
-@ stub -arch=i386 ?do_max_length@?$codecvt@_UDU_Mbstatet@@@std@@MBEHXZ
-@ stub -arch=win64 ?do_max_length@?$codecvt@_UDU_Mbstatet@@@std@@MEBAHXZ
+@ cdecl -arch=arm ?do_max_length@?$codecvt@_UDU_Mbstatet@@@std@@MBAHXZ(ptr) msvcp140.?do_max_length@?$codecvt@_UDU_Mbstatet@@@std@@MBAHXZ
+@ thiscall -arch=i386 ?do_max_length@?$codecvt@_UDU_Mbstatet@@@std@@MBEHXZ(ptr) msvcp140.?do_max_length@?$codecvt@_UDU_Mbstatet@@@std@@MBEHXZ
+@ cdecl -arch=win64 ?do_max_length@?$codecvt@_UDU_Mbstatet@@@std@@MEBAHXZ(ptr) msvcp140.?do_max_length@?$codecvt@_UDU_Mbstatet@@@std@@MEBAHXZ
 @ cdecl -arch=arm ?do_max_length@?$codecvt@_WDU_Mbstatet@@@std@@MBAHXZ(ptr) msvcp140.?do_max_length@?$codecvt@_WDU_Mbstatet@@@std@@MBAHXZ
 @ thiscall -arch=i386 ?do_max_length@?$codecvt@_WDU_Mbstatet@@@std@@MBEHXZ(ptr) msvcp140.?do_max_length@?$codecvt@_WDU_Mbstatet@@@std@@MBEHXZ
 @ cdecl -arch=win64 ?do_max_length@?$codecvt@_WDU_Mbstatet@@@std@@MEBAHXZ(ptr) msvcp140.?do_max_length@?$codecvt@_WDU_Mbstatet@@@std@@MEBAHXZ
@@ -2059,9 +2059,9 @@
 @ stub -arch=arm ?do_out@?$codecvt@_SDU_Mbstatet@@@std@@MBAHAAU_Mbstatet@@PB_S1AAPB_SPAD3AAPAD@Z
 @ stub -arch=i386 ?do_out@?$codecvt@_SDU_Mbstatet@@@std@@MBEHAAU_Mbstatet@@PB_S1AAPB_SPAD3AAPAD@Z
 @ stub -arch=win64 ?do_out@?$codecvt@_SDU_Mbstatet@@@std@@MEBAHAEAU_Mbstatet@@PEB_S1AEAPEB_SPEAD3AEAPEAD@Z
-@ stub -arch=arm ?do_out@?$codecvt@_UDU_Mbstatet@@@std@@MBAHAAU_Mbstatet@@PB_U1AAPB_UPAD3AAPAD@Z
-@ stub -arch=i386 ?do_out@?$codecvt@_UDU_Mbstatet@@@std@@MBEHAAU_Mbstatet@@PB_U1AAPB_UPAD3AAPAD@Z
-@ stub -arch=win64 ?do_out@?$codecvt@_UDU_Mbstatet@@@std@@MEBAHAEAU_Mbstatet@@PEB_U1AEAPEB_UPEAD3AEAPEAD@Z
+@ cdecl -arch=arm ?do_out@?$codecvt@_UDU_Mbstatet@@@std@@MBAHAAU_Mbstatet@@PB_U1AAPB_UPAD3AAPAD@Z(ptr ptr ptr ptr ptr ptr ptr ptr) msvcp140.?do_out@?$codecvt@_UDU_Mbstatet@@@std@@MBAHAAU_Mbstatet@@PB_U1AAPB_UPAD3AAPAD@Z
+@ thiscall -arch=i386 ?do_out@?$codecvt@_UDU_Mbstatet@@@std@@MBEHAAU_Mbstatet@@PB_U1AAPB_UPAD3AAPAD@Z(ptr ptr ptr ptr ptr ptr ptr ptr) msvcp140.?do_out@?$codecvt@_UDU_Mbstatet@@@std@@MBEHAAU_Mbstatet@@PB_U1AAPB_UPAD3AAPAD@Z
+@ cdecl -arch=win64 ?do_out@?$codecvt@_UDU_Mbstatet@@@std@@MEBAHAEAU_Mbstatet@@PEB_U1AEAPEB_UPEAD3AEAPEAD@Z(ptr ptr ptr ptr ptr ptr ptr ptr) msvcp140.?do_out@?$codecvt@_UDU_Mbstatet@@@std@@MEBAHAEAU_Mbstatet@@PEB_U1AEAPEB_UPEAD3AEAPEAD@Z
 @ cdecl -arch=arm ?do_out@?$codecvt@_WDU_Mbstatet@@@std@@MBAHAAU_Mbstatet@@PB_W1AAPB_WPAD3AAPAD@Z(ptr ptr wstr wstr ptr ptr ptr ptr) msvcp140.?do_out@?$codecvt@_WDU_Mbstatet@@@std@@MBAHAAU_Mbstatet@@PB_W1AAPB_WPAD3AAPAD@Z
 @ thiscall -arch=i386 ?do_out@?$codecvt@_WDU_Mbstatet@@@std@@MBEHAAU_Mbstatet@@PB_W1AAPB_WPAD3AAPAD@Z(ptr ptr wstr wstr ptr ptr ptr ptr) msvcp140.?do_out@?$codecvt@_WDU_Mbstatet@@@std@@MBEHAAU_Mbstatet@@PB_W1AAPB_WPAD3AAPAD@Z
 @ cdecl -arch=win64 ?do_out@?$codecvt@_WDU_Mbstatet@@@std@@MEBAHAEAU_Mbstatet@@PEB_W1AEAPEB_WPEAD3AEAPEAD@Z(ptr ptr wstr wstr ptr ptr ptr ptr) msvcp140.?do_out@?$codecvt@_WDU_Mbstatet@@@std@@MEBAHAEAU_Mbstatet@@PEB_W1AEAPEB_WPEAD3AEAPEAD@Z
@@ -2203,9 +2203,9 @@
 @ stub -arch=arm ?do_unshift@?$codecvt@_SDU_Mbstatet@@@std@@MBAHAAU_Mbstatet@@PAD1AAPAD@Z
 @ stub -arch=i386 ?do_unshift@?$codecvt@_SDU_Mbstatet@@@std@@MBEHAAU_Mbstatet@@PAD1AAPAD@Z
 @ stub -arch=win64 ?do_unshift@?$codecvt@_SDU_Mbstatet@@@std@@MEBAHAEAU_Mbstatet@@PEAD1AEAPEAD@Z
-@ stub -arch=arm ?do_unshift@?$codecvt@_UDU_Mbstatet@@@std@@MBAHAAU_Mbstatet@@PAD1AAPAD@Z
-@ stub -arch=i386 ?do_unshift@?$codecvt@_UDU_Mbstatet@@@std@@MBEHAAU_Mbstatet@@PAD1AAPAD@Z
-@ stub -arch=win64 ?do_unshift@?$codecvt@_UDU_Mbstatet@@@std@@MEBAHAEAU_Mbstatet@@PEAD1AEAPEAD@Z
+@ cdecl -arch=arm ?do_unshift@?$codecvt@_UDU_Mbstatet@@@std@@MBAHAAU_Mbstatet@@PAD1AAPAD@Z(ptr ptr ptr ptr ptr) msvcp140.?do_unshift@?$codecvt@_UDU_Mbstatet@@@std@@MBAHAAU_Mbstatet@@PAD1AAPAD@Z
+@ thiscall -arch=i386 ?do_unshift@?$codecvt@_UDU_Mbstatet@@@std@@MBEHAAU_Mbstatet@@PAD1AAPAD@Z(ptr ptr ptr ptr ptr) msvcp140.?do_unshift@?$codecvt@_UDU_Mbstatet@@@std@@MBEHAAU_Mbstatet@@PAD1AAPAD@Z
+@ cdecl -arch=win64 ?do_unshift@?$codecvt@_UDU_Mbstatet@@@std@@MEBAHAEAU_Mbstatet@@PEAD1AEAPEAD@Z(ptr ptr ptr ptr ptr) msvcp140.?do_unshift@?$codecvt@_UDU_Mbstatet@@@std@@MEBAHAEAU_Mbstatet@@PEAD1AEAPEAD@Z
 @ cdecl -arch=arm ?do_unshift@?$codecvt@_WDU_Mbstatet@@@std@@MBAHAAU_Mbstatet@@PAD1AAPAD@Z(ptr ptr ptr ptr ptr) msvcp140.?do_unshift@?$codecvt@_WDU_Mbstatet@@@std@@MBAHAAU_Mbstatet@@PAD1AAPAD@Z
 @ thiscall -arch=i386 ?do_unshift@?$codecvt@_WDU_Mbstatet@@@std@@MBEHAAU_Mbstatet@@PAD1AAPAD@Z(ptr ptr ptr ptr ptr) msvcp140.?do_unshift@?$codecvt@_WDU_Mbstatet@@@std@@MBEHAAU_Mbstatet@@PAD1AAPAD@Z
 @ cdecl -arch=win64 ?do_unshift@?$codecvt@_WDU_Mbstatet@@@std@@MEBAHAEAU_Mbstatet@@PEAD1AEAPEAD@Z(ptr ptr ptr ptr ptr) msvcp140.?do_unshift@?$codecvt@_WDU_Mbstatet@@@std@@MEBAHAEAU_Mbstatet@@PEAD1AEAPEAD@Z
@@ -2672,9 +2672,9 @@
 @ stub -arch=arm ?in@?$codecvt@_SDU_Mbstatet@@@std@@QBAHAAU_Mbstatet@@PBD1AAPBDPA_S3AAPA_S@Z
 @ stub -arch=i386 ?in@?$codecvt@_SDU_Mbstatet@@@std@@QBEHAAU_Mbstatet@@PBD1AAPBDPA_S3AAPA_S@Z
 @ stub -arch=win64 ?in@?$codecvt@_SDU_Mbstatet@@@std@@QEBAHAEAU_Mbstatet@@PEBD1AEAPEBDPEA_S3AEAPEA_S@Z
-@ stub -arch=arm ?in@?$codecvt@_UDU_Mbstatet@@@std@@QBAHAAU_Mbstatet@@PBD1AAPBDPA_U3AAPA_U@Z
-@ stub -arch=i386 ?in@?$codecvt@_UDU_Mbstatet@@@std@@QBEHAAU_Mbstatet@@PBD1AAPBDPA_U3AAPA_U@Z
-@ stub -arch=win64 ?in@?$codecvt@_UDU_Mbstatet@@@std@@QEBAHAEAU_Mbstatet@@PEBD1AEAPEBDPEA_U3AEAPEA_U@Z
+@ cdecl -arch=arm ?in@?$codecvt@_UDU_Mbstatet@@@std@@QBAHAAU_Mbstatet@@PBD1AAPBDPA_U3AAPA_U@Z(ptr ptr str str ptr ptr ptr ptr) msvcp140.?in@?$codecvt@_UDU_Mbstatet@@@std@@QBAHAAU_Mbstatet@@PBD1AAPBDPA_U3AAPA_U@Z
+@ thiscall -arch=i386 ?in@?$codecvt@_UDU_Mbstatet@@@std@@QBEHAAU_Mbstatet@@PBD1AAPBDPA_U3AAPA_U@Z(ptr ptr str str ptr ptr ptr ptr) msvcp140.?in@?$codecvt@_UDU_Mbstatet@@@std@@QBEHAAU_Mbstatet@@PBD1AAPBDPA_U3AAPA_U@Z
+@ cdecl -arch=win64 ?in@?$codecvt@_UDU_Mbstatet@@@std@@QEBAHAEAU_Mbstatet@@PEBD1AEAPEBDPEA_U3AEAPEA_U@Z(ptr ptr str str ptr ptr ptr ptr) msvcp140.?in@?$codecvt@_UDU_Mbstatet@@@std@@QEBAHAEAU_Mbstatet@@PEBD1AEAPEBDPEA_U3AEAPEA_U@Z
 @ cdecl -arch=arm ?in@?$codecvt@_WDU_Mbstatet@@@std@@QBAHAAU_Mbstatet@@PBD1AAPBDPA_W3AAPA_W@Z(ptr ptr str str ptr ptr ptr ptr) msvcp140.?in@?$codecvt@_WDU_Mbstatet@@@std@@QBAHAAU_Mbstatet@@PBD1AAPBDPA_W3AAPA_W@Z
 @ thiscall -arch=i386 ?in@?$codecvt@_WDU_Mbstatet@@@std@@QBEHAAU_Mbstatet@@PBD1AAPBDPA_W3AAPA_W@Z(ptr ptr str str ptr ptr ptr ptr) msvcp140.?in@?$codecvt@_WDU_Mbstatet@@@std@@QBEHAAU_Mbstatet@@PBD1AAPBDPA_W3AAPA_W@Z
 @ cdecl -arch=win64 ?in@?$codecvt@_WDU_Mbstatet@@@std@@QEBAHAEAU_Mbstatet@@PEBD1AEAPEBDPEA_W3AEAPEA_W@Z(ptr ptr str str ptr ptr ptr ptr) msvcp140.?in@?$codecvt@_WDU_Mbstatet@@@std@@QEBAHAEAU_Mbstatet@@PEBD1AEAPEBDPEA_W3AEAPEA_W@Z
@@ -2750,9 +2750,9 @@
 @ stub -arch=arm ?length@?$codecvt@_SDU_Mbstatet@@@std@@QBAHAAU_Mbstatet@@PBD1I@Z
 @ stub -arch=i386 ?length@?$codecvt@_SDU_Mbstatet@@@std@@QBEHAAU_Mbstatet@@PBD1I@Z
 @ stub -arch=win64 ?length@?$codecvt@_SDU_Mbstatet@@@std@@QEBAHAEAU_Mbstatet@@PEBD1_K@Z
-@ stub -arch=arm ?length@?$codecvt@_UDU_Mbstatet@@@std@@QBAHAAU_Mbstatet@@PBD1I@Z
-@ stub -arch=i386 ?length@?$codecvt@_UDU_Mbstatet@@@std@@QBEHAAU_Mbstatet@@PBD1I@Z
-@ stub -arch=win64 ?length@?$codecvt@_UDU_Mbstatet@@@std@@QEBAHAEAU_Mbstatet@@PEBD1_K@Z
+@ cdecl -arch=arm ?length@?$codecvt@_UDU_Mbstatet@@@std@@QBAHAAU_Mbstatet@@PBD1I@Z(ptr ptr str str long) msvcp140.?length@?$codecvt@_UDU_Mbstatet@@@std@@QBAHAAU_Mbstatet@@PBD1I@Z
+@ thiscall -arch=i386 ?length@?$codecvt@_UDU_Mbstatet@@@std@@QBEHAAU_Mbstatet@@PBD1I@Z(ptr ptr str str long) msvcp140.?length@?$codecvt@_UDU_Mbstatet@@@std@@QBEHAAU_Mbstatet@@PBD1I@Z
+@ cdecl -arch=win64 ?length@?$codecvt@_UDU_Mbstatet@@@std@@QEBAHAEAU_Mbstatet@@PEBD1_K@Z(ptr ptr str str long) msvcp140.?length@?$codecvt@_UDU_Mbstatet@@@std@@QEBAHAEAU_Mbstatet@@PEBD1_K@Z
 @ cdecl -arch=arm ?length@?$codecvt@_WDU_Mbstatet@@@std@@QBAHAAU_Mbstatet@@PBD1I@Z(ptr ptr str str long) msvcp140.?length@?$codecvt@_WDU_Mbstatet@@@std@@QBAHAAU_Mbstatet@@PBD1I@Z
 @ thiscall -arch=i386 ?length@?$codecvt@_WDU_Mbstatet@@@std@@QBEHAAU_Mbstatet@@PBD1I@Z(ptr ptr str str long) msvcp140.?length@?$codecvt@_WDU_Mbstatet@@@std@@QBEHAAU_Mbstatet@@PBD1I@Z
 @ cdecl -arch=win64 ?length@?$codecvt@_WDU_Mbstatet@@@std@@QEBAHAEAU_Mbstatet@@PEBD1_K@Z(ptr ptr str str long) msvcp140.?length@?$codecvt@_WDU_Mbstatet@@@std@@QEBAHAEAU_Mbstatet@@PEBD1_K@Z
@@ -2831,9 +2831,9 @@
 @ stub -arch=arm ?out@?$codecvt@_SDU_Mbstatet@@@std@@QBAHAAU_Mbstatet@@PB_S1AAPB_SPAD3AAPAD@Z
 @ stub -arch=i386 ?out@?$codecvt@_SDU_Mbstatet@@@std@@QBEHAAU_Mbstatet@@PB_S1AAPB_SPAD3AAPAD@Z
 @ stub -arch=win64 ?out@?$codecvt@_SDU_Mbstatet@@@std@@QEBAHAEAU_Mbstatet@@PEB_S1AEAPEB_SPEAD3AEAPEAD@Z
-@ stub -arch=arm ?out@?$codecvt@_UDU_Mbstatet@@@std@@QBAHAAU_Mbstatet@@PB_U1AAPB_UPAD3AAPAD@Z
-@ stub -arch=i386 ?out@?$codecvt@_UDU_Mbstatet@@@std@@QBEHAAU_Mbstatet@@PB_U1AAPB_UPAD3AAPAD@Z
-@ stub -arch=win64 ?out@?$codecvt@_UDU_Mbstatet@@@std@@QEBAHAEAU_Mbstatet@@PEB_U1AEAPEB_UPEAD3AEAPEAD@Z
+@ cdecl -arch=arm ?out@?$codecvt@_UDU_Mbstatet@@@std@@QBAHAAU_Mbstatet@@PB_U1AAPB_UPAD3AAPAD@Z(ptr ptr ptr ptr ptr ptr ptr ptr) msvcp140.?out@?$codecvt@_UDU_Mbstatet@@@std@@QBAHAAU_Mbstatet@@PB_U1AAPB_UPAD3AAPAD@Z
+@ thiscall -arch=i386 ?out@?$codecvt@_UDU_Mbstatet@@@std@@QBEHAAU_Mbstatet@@PB_U1AAPB_UPAD3AAPAD@Z(ptr ptr ptr ptr ptr ptr ptr ptr) msvcp140.?out@?$codecvt@_UDU_Mbstatet@@@std@@QBEHAAU_Mbstatet@@PB_U1AAPB_UPAD3AAPAD@Z
+@ cdecl -arch=win64 ?out@?$codecvt@_UDU_Mbstatet@@@std@@QEBAHAEAU_Mbstatet@@PEB_U1AEAPEB_UPEAD3AEAPEAD@Z(ptr ptr ptr ptr ptr ptr ptr ptr) msvcp140.?out@?$codecvt@_UDU_Mbstatet@@@std@@QEBAHAEAU_Mbstatet@@PEB_U1AEAPEB_UPEAD3AEAPEAD@Z
 @ cdecl -arch=arm ?out@?$codecvt@_WDU_Mbstatet@@@std@@QBAHAAU_Mbstatet@@PB_W1AAPB_WPAD3AAPAD@Z(ptr ptr wstr wstr ptr ptr ptr ptr) msvcp140.?out@?$codecvt@_WDU_Mbstatet@@@std@@QBAHAAU_Mbstatet@@PB_W1AAPB_WPAD3AAPAD@Z
 @ thiscall -arch=i386 ?out@?$codecvt@_WDU_Mbstatet@@@std@@QBEHAAU_Mbstatet@@PB_W1AAPB_WPAD3AAPAD@Z(ptr ptr wstr wstr ptr ptr ptr ptr) msvcp140.?out@?$codecvt@_WDU_Mbstatet@@@std@@QBEHAAU_Mbstatet@@PB_W1AAPB_WPAD3AAPAD@Z
 @ cdecl -arch=win64 ?out@?$codecvt@_WDU_Mbstatet@@@std@@QEBAHAEAU_Mbstatet@@PEB_W1AEAPEB_WPEAD3AEAPEAD@Z(ptr ptr wstr wstr ptr ptr ptr ptr) msvcp140.?out@?$codecvt@_WDU_Mbstatet@@@std@@QEBAHAEAU_Mbstatet@@PEB_W1AEAPEB_WPEAD3AEAPEAD@Z
@@ -3544,9 +3544,9 @@
 @ stub -arch=arm ?unshift@?$codecvt@_SDU_Mbstatet@@@std@@QBAHAAU_Mbstatet@@PAD1AAPAD@Z
 @ stub -arch=i386 ?unshift@?$codecvt@_SDU_Mbstatet@@@std@@QBEHAAU_Mbstatet@@PAD1AAPAD@Z
 @ stub -arch=win64 ?unshift@?$codecvt@_SDU_Mbstatet@@@std@@QEBAHAEAU_Mbstatet@@PEAD1AEAPEAD@Z
-@ stub -arch=arm ?unshift@?$codecvt@_UDU_Mbstatet@@@std@@QBAHAAU_Mbstatet@@PAD1AAPAD@Z
-@ stub -arch=i386 ?unshift@?$codecvt@_UDU_Mbstatet@@@std@@QBEHAAU_Mbstatet@@PAD1AAPAD@Z
-@ stub -arch=win64 ?unshift@?$codecvt@_UDU_Mbstatet@@@std@@QEBAHAEAU_Mbstatet@@PEAD1AEAPEAD@Z
+@ cdecl -arch=arm ?unshift@?$codecvt@_UDU_Mbstatet@@@std@@QBAHAAU_Mbstatet@@PAD1AAPAD@Z(ptr ptr ptr ptr ptr) msvcp140.?unshift@?$codecvt@_UDU_Mbstatet@@@std@@QBAHAAU_Mbstatet@@PAD1AAPAD@Z
+@ thiscall -arch=i386 ?unshift@?$codecvt@_UDU_Mbstatet@@@std@@QBEHAAU_Mbstatet@@PAD1AAPAD@Z(ptr ptr ptr ptr ptr) msvcp140.?unshift@?$codecvt@_UDU_Mbstatet@@@std@@QBEHAAU_Mbstatet@@PAD1AAPAD@Z
+@ cdecl -arch=win64 ?unshift@?$codecvt@_UDU_Mbstatet@@@std@@QEBAHAEAU_Mbstatet@@PEAD1AEAPEAD@Z(ptr ptr ptr ptr ptr) msvcp140.?unshift@?$codecvt@_UDU_Mbstatet@@@std@@QEBAHAEAU_Mbstatet@@PEAD1AEAPEAD@Z
 @ cdecl -arch=arm ?unshift@?$codecvt@_WDU_Mbstatet@@@std@@QBAHAAU_Mbstatet@@PAD1AAPAD@Z(ptr ptr ptr ptr ptr) msvcp140.?unshift@?$codecvt@_WDU_Mbstatet@@@std@@QBAHAAU_Mbstatet@@PAD1AAPAD@Z
 @ thiscall -arch=i386 ?unshift@?$codecvt@_WDU_Mbstatet@@@std@@QBEHAAU_Mbstatet@@PAD1AAPAD@Z(ptr ptr ptr ptr ptr) msvcp140.?unshift@?$codecvt@_WDU_Mbstatet@@@std@@QBEHAAU_Mbstatet@@PAD1AAPAD@Z
 @ cdecl -arch=win64 ?unshift@?$codecvt@_WDU_Mbstatet@@@std@@QEBAHAEAU_Mbstatet@@PEAD1AEAPEAD@Z(ptr ptr ptr ptr ptr) msvcp140.?unshift@?$codecvt@_WDU_Mbstatet@@@std@@QEBAHAEAU_Mbstatet@@PEAD1AEAPEAD@Z
-- 
GitLab

From c94671324ea2a3c9185da0850a2be213d13fdcfb Mon Sep 17 00:00:00 2001
From: Bartosz Kosiorek <gang65@poczta.onet.pl>
Date: Sat, 11 Nov 2023 23:23:44 +0100
Subject: [PATCH 1/2] msvcrt: Fix _mbsspn_l implementation.

---
 dlls/msvcrt/mbcs.c | 3 +++
 1 file changed, 3 insertions(+)

diff --git a/dlls/msvcrt/mbcs.c b/dlls/msvcrt/mbcs.c
index 385274a44a4..1a595a44ced 100644
--- a/dlls/msvcrt/mbcs.c
+++ b/dlls/msvcrt/mbcs.c
@@ -2791,6 +2791,9 @@ size_t CDECL _mbsspn_l(const unsigned char* string,
 {
     const unsigned char *p, *q;
 
+    if (!MSVCRT_CHECK_PMT(string && set))
+        return 0;
+
     for (p = string; *p; p++)
     {
         for (q = set; *q; q++)
-- 
GitLab


From 65f7d5ec484111c27abcec6811d5a92aa4bbd7bf Mon Sep 17 00:00:00 2001
From: Bartosz Kosiorek <gang65@poczta.onet.pl>
Date: Sat, 11 Nov 2023 23:32:38 +0100
Subject: [PATCH 2/2] msvcrt: Add _mbsspnp_l implementation.

---
 dlls/msvcr100/msvcr100.spec |  2 +-
 dlls/msvcr110/msvcr110.spec |  2 +-
 dlls/msvcr120/msvcr120.spec |  2 +-
 dlls/msvcr80/msvcr80.spec   |  2 +-
 dlls/msvcr90/msvcr90.spec   |  2 +-
 dlls/msvcrt/mbcs.c          | 15 +++++++++++++--
 dlls/msvcrt/msvcrt.spec     |  2 +-
 dlls/ucrtbase/ucrtbase.spec |  4 ++--
 8 files changed, 21 insertions(+), 10 deletions(-)

diff --git a/dlls/msvcr100/msvcr100.spec b/dlls/msvcr100/msvcr100.spec
index f4baf442b53..79a201f4c17 100644
--- a/dlls/msvcr100/msvcr100.spec
+++ b/dlls/msvcr100/msvcr100.spec
@@ -1186,7 +1186,7 @@
 @ cdecl _mbsspn(str str)
 @ cdecl _mbsspn_l(str str ptr)
 @ cdecl _mbsspnp(str str)
-@ stub _mbsspnp_l
+@ cdecl _mbsspnp_l(str str ptr)
 @ cdecl _mbsstr(str str)
 @ stub _mbsstr_l
 @ cdecl _mbstok(str str)
diff --git a/dlls/msvcr110/msvcr110.spec b/dlls/msvcr110/msvcr110.spec
index e9bdf422024..6a6d38db187 100644
--- a/dlls/msvcr110/msvcr110.spec
+++ b/dlls/msvcr110/msvcr110.spec
@@ -1543,7 +1543,7 @@
 @ cdecl _mbsspn(str str)
 @ cdecl _mbsspn_l(str str ptr)
 @ cdecl _mbsspnp(str str)
-@ stub _mbsspnp_l
+@ cdecl _mbsspnp_l(str str ptr)
 @ cdecl _mbsstr(str str)
 @ stub _mbsstr_l
 @ cdecl _mbstok(str str)
diff --git a/dlls/msvcr120/msvcr120.spec b/dlls/msvcr120/msvcr120.spec
index 13dacc15744..13d7e401133 100644
--- a/dlls/msvcr120/msvcr120.spec
+++ b/dlls/msvcr120/msvcr120.spec
@@ -1554,7 +1554,7 @@
 @ cdecl _mbsspn(str str)
 @ cdecl _mbsspn_l(str str ptr)
 @ cdecl _mbsspnp(str str)
-@ stub _mbsspnp_l
+@ cdecl _mbsspnp_l(str str ptr)
 @ cdecl _mbsstr(str str)
 @ stub _mbsstr_l
 @ cdecl _mbstok(str str)
diff --git a/dlls/msvcr80/msvcr80.spec b/dlls/msvcr80/msvcr80.spec
index 91781c9c9e4..5b253b88234 100644
--- a/dlls/msvcr80/msvcr80.spec
+++ b/dlls/msvcr80/msvcr80.spec
@@ -858,7 +858,7 @@
 @ cdecl _mbsspn(str str)
 @ cdecl _mbsspn_l(str str ptr)
 @ cdecl _mbsspnp(str str)
-@ stub _mbsspnp_l
+@ cdecl _mbsspnp_l(str str ptr)
 @ cdecl _mbsstr(str str)
 @ stub _mbsstr_l
 @ cdecl _mbstok(str str)
diff --git a/dlls/msvcr90/msvcr90.spec b/dlls/msvcr90/msvcr90.spec
index 2af41f8aea2..df989581d5e 100644
--- a/dlls/msvcr90/msvcr90.spec
+++ b/dlls/msvcr90/msvcr90.spec
@@ -836,7 +836,7 @@
 @ cdecl _mbsspn(str str)
 @ cdecl _mbsspn_l(str str ptr)
 @ cdecl _mbsspnp(str str)
-@ stub _mbsspnp_l
+@ cdecl _mbsspnp_l(str str ptr)
 @ cdecl _mbsstr(str str)
 @ stub _mbsstr_l
 @ cdecl _mbstok(str str)
diff --git a/dlls/msvcrt/mbcs.c b/dlls/msvcrt/mbcs.c
index 1a595a44ced..e6c0e944255 100644
--- a/dlls/msvcrt/mbcs.c
+++ b/dlls/msvcrt/mbcs.c
@@ -2828,13 +2828,24 @@ size_t CDECL _mbsspn(const unsigned char* string, const unsigned char* set)
     return _mbsspn_l(string, set, NULL);
 }
 
+/*********************************************************************
+ *              _mbsspnp_l (MSVCRT.@)
+ */
+unsigned char* CDECL _mbsspnp_l(const unsigned char* string, const unsigned char* set, _locale_t locale)
+{
+    if (!MSVCRT_CHECK_PMT(string && set))
+        return 0;
+
+    string += _mbsspn_l(string, set, locale);
+    return *string ? (unsigned char*)string : NULL;
+}
+
 /*********************************************************************
  *              _mbsspnp (MSVCRT.@)
  */
 unsigned char* CDECL _mbsspnp(const unsigned char* string, const unsigned char* set)
 {
-    string += _mbsspn( string, set );
-    return *string ? (unsigned char*)string : NULL;
+    return _mbsspnp_l(string, set, NULL);
 }
 
 /*********************************************************************
diff --git a/dlls/msvcrt/msvcrt.spec b/dlls/msvcrt/msvcrt.spec
index f54a437692f..72392a1847b 100644
--- a/dlls/msvcrt/msvcrt.spec
+++ b/dlls/msvcrt/msvcrt.spec
@@ -807,7 +807,7 @@
 @ cdecl _mbsspn(str str)
 @ cdecl _mbsspn_l(str str ptr)
 @ cdecl _mbsspnp(str str)
-# stub _mbsspnp_l(str str ptr)
+@ cdecl _mbsspnp_l(str str ptr)
 @ cdecl _mbsstr(str str)
 # stub _mbsstr_l(str str ptr)
 @ cdecl _mbstok(str str)
diff --git a/dlls/ucrtbase/ucrtbase.spec b/dlls/ucrtbase/ucrtbase.spec
index 7cf9b01aa4f..60ebe06ea82 100644
--- a/dlls/ucrtbase/ucrtbase.spec
+++ b/dlls/ucrtbase/ucrtbase.spec
@@ -702,7 +702,7 @@
 @ cdecl _mbsspn(str str)
 @ cdecl _mbsspn_l(str str ptr)
 @ cdecl _mbsspnp(str str)
-@ stub _mbsspnp_l
+@ cdecl _mbsspnp_l(str str ptr)
 @ cdecl _mbsstr(str str)
 @ stub _mbsstr_l
 @ cdecl _mbstok(str str)
@@ -1271,7 +1271,7 @@
 @ cdecl _o__mbsspn(str str) _mbsspn
 @ cdecl _o__mbsspn_l(str str ptr) _mbsspn_l
 @ cdecl _o__mbsspnp(str str) _mbsspnp
-@ stub _o__mbsspnp_l
+@ cdecl _o__mbsspnp_l(str str ptr) _mbsspnp_l
 @ cdecl _o__mbsstr(str str) _mbsstr
 @ stub _o__mbsstr_l
 @ cdecl _o__mbstok(str str) _mbstok
-- 
GitLab

From c180a902c066de6e9f55d7486b3189b5ec0c4b0a Mon Sep 17 00:00:00 2001
From: Piotr Caban <piotr@codeweavers.com>
Date: Fri, 17 Nov 2023 20:28:55 +0100
Subject: [PATCH 1/2] msvcrt: Avoid temporary buffer allocation in _mbsrev_l.

---
 dlls/msvcrt/mbcs.c | 50 ++++++++++++++--------------------------------
 1 file changed, 15 insertions(+), 35 deletions(-)

diff --git a/dlls/msvcrt/mbcs.c b/dlls/msvcrt/mbcs.c
index e6c0e944255..2e228d77811 100644
--- a/dlls/msvcrt/mbcs.c
+++ b/dlls/msvcrt/mbcs.c
@@ -2889,9 +2889,8 @@ size_t CDECL _mbscspn(const unsigned char* str, const unsigned char* cmp)
  */
 unsigned char* CDECL _mbsrev_l(unsigned char* str, _locale_t locale)
 {
-    int i, len;
-    unsigned char *p, *temp;
     pthreadmbcinfo mbcinfo;
+    unsigned char *p, tmp;
 
     if (!MSVCRT_CHECK_PMT(str))
         return NULL;
@@ -2904,44 +2903,25 @@ unsigned char* CDECL _mbsrev_l(unsigned char* str, _locale_t locale)
     if (!mbcinfo->ismbcodepage)
         return u__strrev(str);
 
-    len = _mbslen_l(str, locale);
-    temp = malloc(len * 2);
-    if (!temp)
-        return str;
-
-    /* unpack multibyte string to temp buffer */
-    p = str;
-    for (i = 0; i < len; i++)
+    for (p = str; *p; p++)
     {
         if (_ismbblead_l(*p, locale))
         {
-            temp[i * 2] = *p++;
-            temp[i * 2 + 1] = *p++;
-        }
-        else
-        {
-            temp[i * 2] = *p++;
-            temp[i * 2 + 1] = 0;
-        }
-    }
-
-    /* repack it in the reverse order */
-    p = str;
-    for (i = len - 1; i >= 0; i--)
-    {
-        if (_ismbblead_l(temp[i * 2], locale))
-        {
-            *p++ = temp[i * 2];
-            *p++ = temp[i * 2 + 1];
-        }
-        else
-        {
-            *p++ = temp[i * 2];
+            if (p[1])
+            {
+                tmp = p[0];
+                p[0] = p[1];
+                p[1] = tmp;
+                p++;
+            }
+            else
+            {
+                /* drop trailing lead char */
+                p[0] = 0;
+            }
         }
     }
-
-    free(temp);
-    return str;
+    return u__strrev(str);
 }
 
 /*********************************************************************
-- 
GitLab


From 4623c41100dd4d910829fc10c20ce4474f5d27ae Mon Sep 17 00:00:00 2001
From: Piotr Caban <piotr@codeweavers.com>
Date: Sun, 19 Nov 2023 12:05:00 +0100
Subject: [PATCH 2/2] msvcrt: Add _mbsrev tests.

---
 dlls/msvcrt/tests/string.c | 22 ++++++++++++++++++++++
 1 file changed, 22 insertions(+)

diff --git a/dlls/msvcrt/tests/string.c b/dlls/msvcrt/tests/string.c
index b63df4b846d..34338fd4a39 100644
--- a/dlls/msvcrt/tests/string.c
+++ b/dlls/msvcrt/tests/string.c
@@ -4671,6 +4671,27 @@ static void test_wcsncpy(void)
             wine_dbgstr_wn(dst, ARRAY_SIZE(dst)));
 }
 
+static void test_mbsrev(void)
+{
+    unsigned char buf[64], *ret;
+    int cp = _getmbcp();
+
+    _setmbcp(932);
+
+    strcpy((char *)buf, "\x36\x8c\x8e");
+    ret = _mbsrev(buf);
+    ok(ret == buf, "ret = %p, expected %p\n", ret, buf);
+    ok(!memcmp(buf, "\x8c\x8e\x36", 4), "buf = %s\n", wine_dbgstr_a((char *)buf));
+
+    /* test string that ends with leading byte */
+    strcpy((char *)buf, "\x36\x8c");
+    ret = _mbsrev(buf);
+    ok(ret == buf, "ret = %p, expected %p\n", ret, buf);
+    ok(!memcmp(buf, "\x36", 2), "buf = %s\n", wine_dbgstr_a((char *)buf));
+
+    _setmbcp(cp);
+}
+
 START_TEST(string)
 {
     char mem[100];
@@ -4831,4 +4852,5 @@ START_TEST(string)
     test_SpecialCasing();
     test__mbbtype();
     test_wcsncpy();
+    test_mbsrev();
 }
-- 
GitLab

From a2d3b27b6c90101729299314da9cae534a3c11ba Mon Sep 17 00:00:00 2001
From: Paul Gofman <pgofman@codeweavers.com>
Date: Mon, 20 Nov 2023 12:27:02 -0600
Subject: [PATCH] msvcp110: Implement std::_Xbad_function_call().

---
 dlls/msvcp110/msvcp110.spec         |  2 +-
 dlls/msvcp120/msvcp120.spec         |  2 +-
 dlls/msvcp120_app/msvcp120_app.spec |  2 +-
 dlls/msvcp140/msvcp140.spec         |  2 +-
 dlls/msvcp90/exception.c            | 50 +++++++++++++++++++++++++++++
 dlls/msvcp_win/msvcp_win.spec       |  2 +-
 6 files changed, 55 insertions(+), 5 deletions(-)

diff --git a/dlls/msvcp110/msvcp110.spec b/dlls/msvcp110/msvcp110.spec
index 9c61f57a4de..bc73bd57a54 100644
--- a/dlls/msvcp110/msvcp110.spec
+++ b/dlls/msvcp110/msvcp110.spec
@@ -1833,7 +1833,7 @@
 @ cdecl ?_XLgamma@std@@YANN@Z(double) std__XLgamma_double
 @ cdecl ?_XLgamma@std@@YAOO@Z(double) std__XLgamma_double
 @ cdecl ?_Xbad_alloc@std@@YAXXZ() _Xmem
-@ stub ?_Xbad_function_call@std@@YAXXZ
+@ cdecl ?_Xbad_function_call@std@@YAXXZ() _Xbad_function_call
 @ cdecl -arch=win32 ?_Xinvalid_argument@std@@YAXPBD@Z(str) _Xinvalid_argument
 @ cdecl -arch=win64 ?_Xinvalid_argument@std@@YAXPEBD@Z(str) _Xinvalid_argument
 @ cdecl -arch=win32 ?_Xlength_error@std@@YAXPBD@Z(str) _Xlength_error
diff --git a/dlls/msvcp120/msvcp120.spec b/dlls/msvcp120/msvcp120.spec
index 835d37d3bf4..dc00344c92f 100644
--- a/dlls/msvcp120/msvcp120.spec
+++ b/dlls/msvcp120/msvcp120.spec
@@ -1794,7 +1794,7 @@
 @ cdecl ?_XLgamma@std@@YANN@Z(double) std__XLgamma_double
 @ cdecl ?_XLgamma@std@@YAOO@Z(double) std__XLgamma_double
 @ cdecl ?_Xbad_alloc@std@@YAXXZ() _Xmem
-@ stub ?_Xbad_function_call@std@@YAXXZ
+@ cdecl ?_Xbad_function_call@std@@YAXXZ() _Xbad_function_call
 @ cdecl -arch=win32 ?_Xinvalid_argument@std@@YAXPBD@Z(str) _Xinvalid_argument
 @ cdecl -arch=win64 ?_Xinvalid_argument@std@@YAXPEBD@Z(str) _Xinvalid_argument
 @ cdecl -arch=win32 ?_Xlength_error@std@@YAXPBD@Z(str) _Xlength_error
diff --git a/dlls/msvcp120_app/msvcp120_app.spec b/dlls/msvcp120_app/msvcp120_app.spec
index c6778841ffb..dc69df9ce6a 100644
--- a/dlls/msvcp120_app/msvcp120_app.spec
+++ b/dlls/msvcp120_app/msvcp120_app.spec
@@ -1794,7 +1794,7 @@
 @ cdecl ?_XLgamma@std@@YANN@Z(double) msvcp120.?_XLgamma@std@@YANN@Z
 @ cdecl ?_XLgamma@std@@YAOO@Z(double) msvcp120.?_XLgamma@std@@YAOO@Z
 @ cdecl ?_Xbad_alloc@std@@YAXXZ() msvcp120.?_Xbad_alloc@std@@YAXXZ
-@ stub ?_Xbad_function_call@std@@YAXXZ
+@ cdecl ?_Xbad_function_call@std@@YAXXZ() msvcp120.?_Xbad_function_call@std@@YAXXZ
 @ cdecl -arch=win32 ?_Xinvalid_argument@std@@YAXPBD@Z(str) msvcp120.?_Xinvalid_argument@std@@YAXPBD@Z
 @ cdecl -arch=win64 ?_Xinvalid_argument@std@@YAXPEBD@Z(str) msvcp120.?_Xinvalid_argument@std@@YAXPEBD@Z
 @ cdecl -arch=win32 ?_Xlength_error@std@@YAXPBD@Z(str) msvcp120.?_Xlength_error@std@@YAXPBD@Z
diff --git a/dlls/msvcp140/msvcp140.spec b/dlls/msvcp140/msvcp140.spec
index e3d01a9326f..ea2e7798a1d 100644
--- a/dlls/msvcp140/msvcp140.spec
+++ b/dlls/msvcp140/msvcp140.spec
@@ -1677,7 +1677,7 @@
 @ cdecl ?_XLgamma@std@@YANN@Z(double) std__XLgamma_double
 @ cdecl ?_XLgamma@std@@YAOO@Z(double) std__XLgamma_double
 @ cdecl ?_Xbad_alloc@std@@YAXXZ() _Xmem
-@ stub ?_Xbad_function_call@std@@YAXXZ
+@ cdecl ?_Xbad_function_call@std@@YAXXZ() _Xbad_function_call
 @ cdecl -arch=win32 ?_Xinvalid_argument@std@@YAXPBD@Z(str) _Xinvalid_argument
 @ cdecl -arch=win64 ?_Xinvalid_argument@std@@YAXPEBD@Z(str) _Xinvalid_argument
 @ cdecl -arch=win32 ?_Xlength_error@std@@YAXPBD@Z(str) _Xlength_error
diff --git a/dlls/msvcp90/exception.c b/dlls/msvcp90/exception.c
index ee59dbf2112..01cb2bb5dab 100644
--- a/dlls/msvcp90/exception.c
+++ b/dlls/msvcp90/exception.c
@@ -68,6 +68,8 @@ extern const vtable_ptr failure_vtable;
 extern const vtable_ptr bad_cast_vtable;
 /* ??_7range_error@std@@6B@ */
 extern const vtable_ptr range_error_vtable;
+/* ??_7bad_function_call@std@@6B@ */
+extern const vtable_ptr bad_function_call_vtable;
 
 /* ??0exception@@QAE@ABQBD@Z */
 /* ??0exception@@QEAA@AEBQEBD@Z */
@@ -875,6 +877,33 @@ range_error* __thiscall MSVCP_range_error_assign(range_error *this, const range_
 DEFINE_RTTI_DATA2(range_error, 0, &runtime_error_rtti_base_descriptor, &exception_rtti_base_descriptor, ".?AVrange_error@std@@")
 DEFINE_CXX_DATA2(range_error, &runtime_error_cxx_type_info, &exception_cxx_type_info, MSVCP_runtime_error_dtor)
 
+#if _MSVCP_VER > 90
+/* bad_function_call class data */
+typedef exception bad_function_call;
+
+static bad_function_call* MSVCP_bad_function_call_ctor(bad_function_call *this)
+{
+    static const char *name = "bad function call";
+
+    TRACE("%p\n", this);
+    MSVCP_exception_ctor(this, EXCEPTION_NAME(name));
+    this->vtable = &bad_function_call_vtable;
+    return this;
+}
+
+DEFINE_THISCALL_WRAPPER(bad_function_call_copy_ctor, 8)
+bad_function_call* __thiscall bad_function_call_copy_ctor(bad_function_call *this, const bad_function_call *rhs)
+{
+    TRACE("%p %p\n", this, rhs);
+    exception_copy_ctor(this, rhs);
+    this->vtable = &bad_function_call_vtable;
+    return this;
+}
+
+DEFINE_RTTI_DATA1(bad_function_call, 0, &exception_rtti_base_descriptor, ".?AVbad_function_call@std@@")
+DEFINE_CXX_DATA1(bad_function_call, &exception_cxx_type_info, MSVCP_exception_dtor)
+#endif
+
 /* ?_Nomemory@std@@YAXXZ */
 void __cdecl DECLSPEC_NORETURN _Nomemory(void)
 {
@@ -949,6 +978,19 @@ void __cdecl DECLSPEC_NORETURN _Xruntime_error(const char *str)
     _CxxThrowException(&e, &runtime_error_cxx_type);
 }
 
+#if _MSVCP_VER > 90
+/* ?_Xbad_function_call@std@@YAXXZ() */
+void __cdecl _Xbad_function_call(void)
+{
+    exception e;
+
+    TRACE("()\n");
+
+    MSVCP_bad_function_call_ctor(&e);
+    _CxxThrowException(&e, &bad_function_call_cxx_type);
+}
+#endif
+
 /* ?uncaught_exception@std@@YA_NXZ */
 bool __cdecl MSVCP__uncaught_exception(void)
 {
@@ -1476,6 +1518,9 @@ __ASM_BLOCK_BEGIN(exception_vtables)
     EXCEPTION_VTABLE(system_error,
             VTABLE_ADD_FUNC(MSVCP_failure_vector_dtor)
             VTABLE_ADD_FUNC(MSVCP_failure_what));
+    EXCEPTION_VTABLE(bad_function_call,
+            VTABLE_ADD_FUNC(MSVCP_exception_vector_dtor)
+            VTABLE_ADD_FUNC(MSVCP_exception_what));
 #endif
     EXCEPTION_VTABLE(failure,
             VTABLE_ADD_FUNC(MSVCP_failure_vector_dtor)
@@ -1486,6 +1531,7 @@ __ASM_BLOCK_BEGIN(exception_vtables)
     EXCEPTION_VTABLE(range_error,
             VTABLE_ADD_FUNC(MSVCP_runtime_error_vector_dtor)
             VTABLE_ADD_FUNC(MSVCP_runtime_error_what));
+
 __ASM_BLOCK_END
 
 /* Internal: throws exception */
@@ -1537,6 +1583,7 @@ void init_exception(void *base)
 #endif
 #if _MSVCP_VER > 90
     init_system_error_rtti(base);
+    init_bad_function_call_rtti(base);
 #endif
     init_failure_rtti(base);
     init_bad_cast_rtti(base);
@@ -1559,6 +1606,9 @@ void init_exception(void *base)
     init_system_error_cxx_type_info(base);
 #elif _MSVCP_VER > 100
     init_system_error_cxx(base);
+#endif
+#if _MSVCP_VER > 90
+    init_bad_function_call_cxx(base);
 #endif
     init_failure_cxx(base);
     init_range_error_cxx(base);
diff --git a/dlls/msvcp_win/msvcp_win.spec b/dlls/msvcp_win/msvcp_win.spec
index c8107094d31..9f4d8581cf3 100644
--- a/dlls/msvcp_win/msvcp_win.spec
+++ b/dlls/msvcp_win/msvcp_win.spec
@@ -1677,7 +1677,7 @@
 @ cdecl ?_XLgamma@std@@YANN@Z(double) msvcp140.?_XLgamma@std@@YANN@Z
 @ cdecl ?_XLgamma@std@@YAOO@Z(double) msvcp140.?_XLgamma@std@@YAOO@Z
 @ cdecl ?_Xbad_alloc@std@@YAXXZ() msvcp140.?_Xbad_alloc@std@@YAXXZ
-@ stub ?_Xbad_function_call@std@@YAXXZ
+@ cdecl ?_Xbad_function_call@std@@YAXXZ() msvcp140.?_Xbad_function_call@std@@YAXXZ
 @ cdecl -arch=win32 ?_Xinvalid_argument@std@@YAXPBD@Z(str) msvcp140.?_Xinvalid_argument@std@@YAXPBD@Z
 @ cdecl -arch=win64 ?_Xinvalid_argument@std@@YAXPEBD@Z(str) msvcp140.?_Xinvalid_argument@std@@YAXPEBD@Z
 @ cdecl -arch=win32 ?_Xlength_error@std@@YAXPBD@Z(str) msvcp140.?_Xlength_error@std@@YAXPBD@Z
-- 
GitLab

From 1c4897ec8a0273329dc9fe5f66745eb1ebbe6336 Mon Sep 17 00:00:00 2001
From: Eric Pouech <epouech@codeweavers.com>
Date: Tue, 21 Nov 2023 10:23:54 +0100
Subject: [PATCH 1/7] msvcrt/tests: Test passing environment in child process.

Signed-off-by: Eric Pouech <epouech@codeweavers.com>
---
 dlls/msvcrt/tests/environ.c | 49 +++++++++++++++++++++++++++++++++++++
 1 file changed, 49 insertions(+)

diff --git a/dlls/msvcrt/tests/environ.c b/dlls/msvcrt/tests/environ.c
index f14764ea5a0..17d75733c85 100644
--- a/dlls/msvcrt/tests/environ.c
+++ b/dlls/msvcrt/tests/environ.c
@@ -393,12 +393,61 @@ static void test_environment_manipulation(void)
     ok( count == env_get_entry_countA( *p_environ ), "Unexpected modification of _environ[]\n" );
 }
 
+static void test_child_env(char** argv)
+{
+    STARTUPINFOA si = {sizeof(si)};
+    WCHAR *cur_env, *env, *p, *q;
+    PROCESS_INFORMATION pi;
+    char tmp[1024];
+    BOOL ret;
+    int len;
+
+    cur_env = GetEnvironmentStringsW();
+    ok( cur_env != NULL, "GetEnvironemntStrings failed\n" );
+
+    p = cur_env;
+    while (*p) p += wcslen( p ) + 1;
+    len = p - cur_env;
+    env = malloc( (len + 1024) * sizeof(*env) );
+    memcpy(env, cur_env, len * sizeof(*env) );
+    q = env + len;
+    FreeEnvironmentStringsW( cur_env );
+
+    wcscpy( q, L"__winetest_dog=bark" );
+    q += wcslen( L"__winetest_dog=bark" ) + 1;
+    wcscpy( q, L"__winetest_\u263a=\u03b2" );
+    q += wcslen( L"__winetest_\u263a=\u03b2" ) + 1;
+    *q = 0;
+
+    snprintf( tmp, sizeof(tmp), "%s %s create", argv[0], argv[1] );
+    ret = CreateProcessA( NULL, tmp, NULL, NULL, FALSE, CREATE_UNICODE_ENVIRONMENT, env, NULL, &si, &pi );
+    ok( ret, "Couldn't create child process %s\n", tmp );
+    winetest_wait_child_process( pi.hProcess );
+    CloseHandle( pi.hProcess );
+    CloseHandle( pi.hThread );
+    free( env );
+}
+
 START_TEST(environ)
 {
+    char **argv;
+    int argc;
+
     init();
 
+    argc = winetest_get_mainargs( &argv );
+    if (argc == 3 && !strcmp( argv[2], "create" ))
+    {
+        ok( getenv( "__winetest_dog" ) && !strcmp( getenv( "__winetest_dog" ), "bark" ),
+                "Couldn't find env var\n" );
+        ok( _wgetenv( L"__winetest_\u263a" ) && !wcscmp( _wgetenv( L"__winetest_\u263a" ), L"\u03b2" ),
+                "Couldn't find unicode env var\n" );
+        return;
+    }
+
     test__environ();
     test__wenviron();
     test_environment_manipulation();
+    test_child_env(argv);
     test_system();
 }
-- 
GitLab


From 52b88199afa6b42b5f937b6aa9dc383b0b890e0e Mon Sep 17 00:00:00 2001
From: Eric Pouech <epouech@codeweavers.com>
Date: Tue, 21 Nov 2023 10:23:54 +0100
Subject: [PATCH 2/7] ucrtbase/tests: Introduce environment tests.

Mostly adapting msvcrt tests/environ.c.

Signed-off-by: Eric Pouech <epouech@codeweavers.com>
---
 dlls/ucrtbase/tests/Makefile.in |   1 +
 dlls/ucrtbase/tests/environ.c   | 350 ++++++++++++++++++++++++++++++++
 2 files changed, 351 insertions(+)
 create mode 100644 dlls/ucrtbase/tests/environ.c

diff --git a/dlls/ucrtbase/tests/Makefile.in b/dlls/ucrtbase/tests/Makefile.in
index 4df5684290c..cd01a3aacb9 100644
--- a/dlls/ucrtbase/tests/Makefile.in
+++ b/dlls/ucrtbase/tests/Makefile.in
@@ -4,6 +4,7 @@ EXTRADEFS = -fno-builtin
 
 SOURCES = \
 	cpp.c \
+	environ.c \
 	misc.c \
 	printf.c \
 	scanf.c \
diff --git a/dlls/ucrtbase/tests/environ.c b/dlls/ucrtbase/tests/environ.c
new file mode 100644
index 00000000000..4d2dbadd33d
--- /dev/null
+++ b/dlls/ucrtbase/tests/environ.c
@@ -0,0 +1,350 @@
+/*
+ * Unit tests for C library environment routines
+ *
+ * Copyright 2004 Mike Hearn <mh@codeweavers.com>
+ *
+ * This library is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU Lesser General Public
+ * License as published by the Free Software Foundation; either
+ * version 2.1 of the License, or (at your option) any later version.
+ *
+ * This library is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+ * Lesser General Public License for more details.
+ *
+ * You should have received a copy of the GNU Lesser General Public
+ * License along with this library; if not, write to the Free Software
+ * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301, USA
+ */
+
+#include "wine/test.h"
+#include <errno.h>
+#include <stdlib.h>
+#include <process.h>
+#include <winnls.h>
+
+#define DEFINE_EXPECT(func) \
+    static BOOL expect_ ## func = FALSE, called_ ## func = FALSE
+
+#define SET_EXPECT(func) \
+    expect_ ## func = TRUE
+
+#define CHECK_EXPECT2(func) \
+    do { \
+        ok(expect_ ##func, "unexpected call " #func "\n"); \
+        called_ ## func = TRUE; \
+    }while(0)
+
+#define CHECK_EXPECT(func) \
+    do { \
+        CHECK_EXPECT2(func); \
+        expect_ ## func = FALSE; \
+    }while(0)
+
+#define CHECK_CALLED(func) \
+    do { \
+        ok(called_ ## func, "expected " #func "\n"); \
+        expect_ ## func = called_ ## func = FALSE; \
+    }while(0)
+
+DEFINE_EXPECT(invalid_parameter_handler);
+
+static const char *a_very_long_env_string =
+ "LIBRARY_PATH="
+ "C:/Program Files/GLBasic/Compiler/platform/Win32/Bin/../lib/gcc/mingw32/3.4.2/;"
+ "C:/Program Files/GLBasic/Compiler/platform/Win32/Bin/../lib/gcc/;"
+ "/mingw/lib/gcc/mingw32/3.4.2/;"
+ "/usr/lib/gcc/mingw32/3.4.2/;"
+ "C:/Program Files/GLBasic/Compiler/platform/Win32/Bin/../lib/gcc/mingw32/3.4.2/../../../../mingw32/lib/mingw32/3.4.2/;"
+ "C:/Program Files/GLBasic/Compiler/platform/Win32/Bin/../lib/gcc/mingw32/3.4.2/../../../../mingw32/lib/;"
+ "/mingw/mingw32/lib/mingw32/3.4.2/;"
+ "/mingw/mingw32/lib/;"
+ "/mingw/lib/mingw32/3.4.2/;"
+ "/mingw/lib/;"
+ "C:/Program Files/GLBasic/Compiler/platform/Win32/Bin/../lib/gcc/mingw32/3.4.2/../../../mingw32/3.4.2/;"
+ "C:/Program Files/GLBasic/Compiler/platform/Win32/Bin/../lib/gcc/mingw32/3.4.2/../../../;"
+ "/mingw/lib/mingw32/3.4.2/;"
+ "/mingw/lib/;"
+ "/lib/mingw32/3.4.2/;"
+ "/lib/;"
+ "/usr/lib/mingw32/3.4.2/;"
+ "/usr/lib/";
+
+static char ***(__cdecl *p__p__environ)(void);
+static WCHAR ***(__cdecl *p__p__wenviron)(void);
+static char** (__cdecl *p_get_initial_narrow_environment)(void);
+static wchar_t** (__cdecl *p_get_initial_wide_environment)(void);
+static errno_t (__cdecl *p_putenv_s)(const char*, const char*);
+static errno_t (__cdecl *p_wputenv_s)(const wchar_t*, const wchar_t*);
+static errno_t (__cdecl *p_getenv_s)(size_t*, char*, size_t, const char*);
+
+static char ***p_environ;
+static WCHAR ***p_wenviron;
+
+static void __cdecl test_invalid_parameter_handler(const wchar_t *expression,
+                                                   const wchar_t *function, const wchar_t *file,
+                                                   unsigned line, uintptr_t arg)
+{
+    CHECK_EXPECT(invalid_parameter_handler);
+    ok(expression == NULL, "expression is not NULL\n");
+    ok(function == NULL, "function is not NULL\n");
+    ok(file == NULL, "file is not NULL\n");
+    ok(line == 0, "line = %u\n", line);
+    ok(arg == 0, "arg = %Ix\n", arg);
+}
+
+static BOOL init(void)
+{
+    HMODULE hmod = GetModuleHandleA( "ucrtbase.dll" );
+
+    p__p__environ = (void *)GetProcAddress( hmod, "__p__environ" );
+    p__p__wenviron = (void *)GetProcAddress( hmod, "__p__wenviron" );
+    p_get_initial_narrow_environment = (void *)GetProcAddress( hmod, "_get_initial_narrow_environment" );
+    p_get_initial_wide_environment = (void *)GetProcAddress( hmod, "_get_initial_wide_environment" );
+    p_putenv_s = (void *)GetProcAddress( hmod, "_putenv_s" );
+    p_wputenv_s = (void *)GetProcAddress( hmod, "_wputenv_s" );
+    p_getenv_s = (void *)GetProcAddress( hmod, "getenv_s" );
+
+    ok(p__p__environ != NULL, "Unexecped NULL pointer to environ\n" );
+    ok(p__p__wenviron != NULL, "Unexecped NULL pointer to environ\n" );
+    if (!p__p__environ || !p__p__wenviron)
+    {
+        skip( "NULL pointers for environment\n" );
+        return FALSE;
+    }
+    p_environ = p__p__environ();
+    p_wenviron = p__p__wenviron();
+    return TRUE;
+}
+
+static unsigned env_get_entry_countA( char **env )
+{
+    unsigned count;
+
+    if (!env) return 0;
+    for (count = 0; env[count] != NULL; count++) {}
+    return count;
+}
+
+static void test_initial_environ( void )
+{
+    ok( p__p__environ() != NULL, "Unexpected NULL _environ[]\n" );
+    ok( *p__p__environ() != NULL, "Unexpected empty _environ[]\n" );
+    ok( p_get_initial_narrow_environment() != NULL, "Unexpected empty narrow initial environment\n" );
+    todo_wine
+    ok( p_get_initial_narrow_environment() == *p__p__environ(), "Expecting _environ[] to match initial narrow environment\n" );
+
+    ok( p__p__wenviron() != NULL, "Unexpected NULL _wenviron[]\n" );
+    ok( *p__p__wenviron() == NULL, "Unexpected non empty _wenviron[]\n" );
+    ok( p_get_initial_wide_environment() != NULL, "Unexpected empty wide initial environment\n" );
+    todo_wine
+    ok( p_get_initial_wide_environment() == *p__p__wenviron(), "Expecting _wenviron[] to match initial wide environment\n" );
+}
+
+static void test_environment_manipulation(void)
+{
+    char buf[256];
+    errno_t ret;
+    size_t len;
+    unsigned count;
+    char* first;
+    char* second;
+
+    ok( _putenv( "cat=" ) == 0, "_putenv failed on deletion of nonexistent environment variable\n" );
+    ok( _putenv( "cat=dog" ) == 0, "failed setting cat=dog\n" );
+    ok( strcmp( getenv( "cat" ), "dog" ) == 0, "getenv did not return 'dog'\n" );
+    if (p_getenv_s)
+    {
+        ret = p_getenv_s( &len, buf, sizeof(buf), "cat" );
+        ok( !ret, "getenv_s returned %d\n", ret );
+        ok( len == 4, "getenv_s returned length is %Id\n", len);
+        ok( !strcmp(buf, "dog"), "getenv_s did not return 'dog'\n" );
+    }
+    ok( _putenv("cat=") == 0, "failed deleting cat\n" );
+
+    ok( _putenv("=") == -1, "should not accept '=' as input\n" );
+    ok( _putenv("=dog") == -1, "should not accept '=dog' as input\n" );
+    ok( _putenv(a_very_long_env_string) == 0, "_putenv failed for long environment string\n" );
+
+    ok( getenv("nonexistent") == NULL, "getenv should fail with nonexistent var name\n" );
+
+    if (p_putenv_s)
+    {
+        SET_EXPECT(invalid_parameter_handler);
+        ret = p_putenv_s( NULL, "dog" );
+        CHECK_CALLED(invalid_parameter_handler);
+        ok( ret == EINVAL, "_putenv_s returned %d\n", ret );
+        SET_EXPECT(invalid_parameter_handler);
+        ret = p_putenv_s( "cat", NULL );
+        CHECK_CALLED(invalid_parameter_handler);
+        ok( ret == EINVAL, "_putenv_s returned %d\n", ret );
+        SET_EXPECT(invalid_parameter_handler);
+        ret = p_putenv_s( "a=b", NULL );
+        CHECK_CALLED(invalid_parameter_handler);
+        ok( ret == EINVAL, "_putenv_s returned %d\n", ret );
+        ret = p_putenv_s( "cat", "a=b" );
+        ok( !ret, "_putenv_s returned %d\n", ret );
+        ret = p_putenv_s( "cat", "" );
+        ok( !ret, "_putenv_s returned %d\n", ret );
+    }
+
+    if (p_wputenv_s)
+    {
+        SET_EXPECT(invalid_parameter_handler);
+        ret = p_wputenv_s( NULL, L"dog" );
+        CHECK_CALLED(invalid_parameter_handler);
+        ok( ret == EINVAL, "_wputenv_s returned %d\n", ret );
+        SET_EXPECT(invalid_parameter_handler);
+        ret = p_wputenv_s( L"cat", NULL );
+        CHECK_CALLED(invalid_parameter_handler);
+        ok( ret == EINVAL, "_wputenv_s returned %d\n", ret );
+        SET_EXPECT(invalid_parameter_handler);
+        ret = p_wputenv_s( L"a=b", NULL );
+        CHECK_CALLED(invalid_parameter_handler);
+        ok( ret == EINVAL, "_wputenv_s returned %d\n", ret );
+        ret = p_wputenv_s( L"cat", L"a=b" );
+        ok( !ret, "_wputenv_s returned %d\n", ret );
+        ret = p_wputenv_s( L"cat", L"" );
+        ok( !ret, "_wputenv_s returned %d\n", ret );
+    }
+
+    if (p_getenv_s)
+    {
+        buf[0] = 'x';
+        len = 1;
+        errno = 0xdeadbeef;
+        ret = p_getenv_s( &len, buf, sizeof(buf), "nonexistent" );
+        ok( !ret, "_getenv_s returned %d\n", ret );
+        ok( !len, "getenv_s returned length is %Id\n", len );
+        ok( !buf[0], "buf = %s\n", buf );
+        ok( errno == 0xdeadbeef, "errno = %d\n", errno );
+
+        buf[0] = 'x';
+        len = 1;
+        errno = 0xdeadbeef;
+        ret = p_getenv_s( &len, buf, sizeof(buf), NULL );
+        ok( !ret, "_getenv_s returned %d\n", ret );
+        ok( !len, "getenv_s returned length is %Id\n", len );
+        ok( !buf[0], "buf = %s\n", buf );
+        ok( errno == 0xdeadbeef, "errno = %d\n", errno );
+    }
+
+    /* test stability of _environ[] pointers */
+    ok( _putenv( "__winetest_cat=" ) == 0, "Couldn't reset env var\n" );
+    ok( _putenv( "__winetest_dog=" ) == 0, "Couldn't reset env var\n" );
+    count = env_get_entry_countA( *p_environ );
+    ok( _putenv( "__winetest_cat=mew") == 0, "Couldn't set env var\n" );
+    ok( !strcmp( (*p_environ)[count], "__winetest_cat=mew"), "Unexpected env var value\n" );
+    first = (*p_environ)[count];
+    ok( getenv("__winetest_cat") == strchr( (*p_environ)[count], '=') + 1, "Expected getenv() to return pointer inside _environ[] entry\n" );
+    ok( _putenv( "__winetest_dog=bark" ) == 0, "Couldn't set env var\n" );
+    ok( !strcmp( (*p_environ)[count + 1], "__winetest_dog=bark" ), "Unexpected env var value\n" );
+    ok( getenv( "__winetest_dog" ) == strchr( (*p_environ)[count + 1], '=' ) + 1, "Expected getenv() to return pointer inside _environ[] entry\n" );
+    todo_wine
+    ok( first == (*p_environ)[count], "Expected stability of _environ[count] pointer\n" );
+    second = (*p_environ)[count + 1];
+    ok( count + 2 == env_get_entry_countA( *p_environ ), "Unexpected count\n" );
+
+    ok( _putenv( "__winetest_cat=purr" ) == 0, "Couldn't set env var\n" );
+    ok( !strcmp( (*p_environ)[count], "__winetest_cat=purr" ), "Unexpected env var value\n" );
+    ok( getenv( "__winetest_cat" ) == strchr( (*p_environ)[count], '=' ) + 1, "Expected getenv() to return pointer inside _environ[] entry\n" );
+    todo_wine
+    ok( second == (*p_environ)[count + 1], "Expected stability of _environ[count] pointer\n" );
+    ok( !strcmp( (*p_environ)[count + 1], "__winetest_dog=bark" ), "Couldn't get env var value\n" );
+    ok( getenv( "__winetest_dog" ) == strchr( (*p_environ)[count + 1], '=' ) + 1, "Expected getenv() to return pointer inside _environ[] entry\n" );
+    ok( count + 2 == env_get_entry_countA( *p_environ ), "Unexpected count\n" );
+    ok( _putenv( "__winetest_cat=" ) == 0, "Couldn't reset env vat\n" );
+    todo_wine
+    ok( second == (*p_environ)[count], "Expected _environ[count] to be second\n" );
+    ok( !strcmp( (*p_environ)[count], "__winetest_dog=bark" ), "Unexpected env var value\n" );
+    ok( count + 1 == env_get_entry_countA( *p_environ ), "Unexpected count\n" );
+    ok( _putenv( "__winetest_dog=" ) == 0, "Couldn't reset env var\n" );
+    ok( count == env_get_entry_countA( *p_environ ), "Unexpected count\n" );
+
+    /* in putenv, only changed variable is updated (no other reload of kernel info is done) */
+    ret = SetEnvironmentVariableA( "__winetest_cat", "meow" );
+    ok( ret, "SetEnvironmentVariableA failed: %lu\n", GetLastError() );
+    ok( _putenv( "__winetest_dog=bark" ) == 0, "Couldn't set env var\n" );
+    todo_wine
+    ok( getenv( "__winetest_cat" ) == NULL, "msvcrt env cache shouldn't have been updated\n" );
+    ok( _putenv( "__winetest_cat=" ) == 0, "Couldn't reset env var\n" );
+    ok( _putenv( "__winetest_dog=" ) == 0, "Couldn't reset env var\n" );
+
+    /* test setting unicode bits */
+    count = env_get_entry_countA( *p_environ );
+    ret = WideCharToMultiByte( CP_ACP, 0, L"\u263a", -1, buf, ARRAY_SIZE(buf), 0, 0 );
+    ok( ret, "WideCharToMultiByte failed: %lu\n", GetLastError() );
+    ok( _wputenv( L"__winetest_cat=\u263a" ) == 0, "Couldn't set env var\n" );
+    ok( _wgetenv( L"__winetest_cat" ) && !wcscmp( _wgetenv( L"__winetest_cat" ), L"\u263a" ), "Couldn't retrieve env var\n" );
+    ok( getenv( "__winetest_cat" ) && !strcmp( getenv( "__winetest_cat" ), buf ), "Couldn't retrieve env var\n" );
+    ok( _wputenv( L"__winetest_cat=" ) == 0, "Couldn't reset env var\n" );
+
+    ret = WideCharToMultiByte( CP_ACP, 0, L"__winetest_\u263a", -1, buf, ARRAY_SIZE(buf), 0, 0 );
+    ok( ret, "WideCharToMultiByte failed: %lu\n", GetLastError() );
+    ok( _wputenv( L"__winetest_\u263a=bark" ) == 0, "Couldn't set env var\n" );
+    ok( _wgetenv( L"__winetest_\u263a" ) && !wcscmp( _wgetenv( L"__winetest_\u263a" ), L"bark"), "Couldn't retrieve env var\n" );
+    ok( getenv( buf ) && !strcmp( getenv( buf ), "bark"), "Couldn't retrieve env var %s\n", wine_dbgstr_a(buf) );
+    ok( _wputenv( L"__winetest_\u263a=" ) == 0, "Couldn't reset env var\n" );
+    ok( count == env_get_entry_countA( *p_environ ), "Unexpected modification of _environ[]\n" );
+}
+
+static void test_child_env(char** argv)
+{
+    STARTUPINFOA si = {sizeof(si)};
+    WCHAR *cur_env, *env, *p, *q;
+    PROCESS_INFORMATION pi;
+    char tmp[1024];
+    BOOL ret;
+    int len;
+
+    cur_env = GetEnvironmentStringsW();
+    ok( cur_env != NULL, "GetEnvironemntStrings failed\n" );
+
+    p = cur_env;
+    while (*p) p += wcslen( p ) + 1;
+    len = p - cur_env;
+    env = malloc( (len + 1024) * sizeof(*env) );
+    memcpy(env, cur_env, len * sizeof(*env) );
+    q = env + len;
+    FreeEnvironmentStringsW( cur_env );
+
+    wcscpy( q, L"__winetest_dog=bark" );
+    q += wcslen( L"__winetest_dog=bark" ) + 1;
+    wcscpy( q, L"__winetest_\u263a=\u03b2" );
+    q += wcslen( L"__winetest_\u263a=\u03b2" ) + 1;
+    *q = 0;
+
+    snprintf( tmp, sizeof(tmp), "%s %s create", argv[0], argv[1] );
+    ret = CreateProcessA( NULL, tmp, NULL, NULL, FALSE, CREATE_UNICODE_ENVIRONMENT, env, NULL, &si, &pi );
+    ok( ret, "Couldn't create child process %s\n", tmp );
+    winetest_wait_child_process( pi.hProcess );
+    CloseHandle( pi.hProcess );
+    CloseHandle( pi.hThread );
+    free( env );
+}
+
+START_TEST(environ)
+{
+    char **argv;
+    int argc;
+
+    if (!init()) return;
+
+    ok( _set_invalid_parameter_handler( test_invalid_parameter_handler ) == NULL,
+       "Invalid parameter handler was already set\n" );
+
+    argc = winetest_get_mainargs( &argv );
+    if (argc == 3 && !strcmp( argv[2], "create" ))
+    {
+        ok( getenv( "__winetest_dog" ) && !strcmp( getenv( "__winetest_dog" ), "bark" ),
+                "Couldn't find env var\n" );
+        ok( _wgetenv( L"__winetest_\u263a" ) && !wcscmp( _wgetenv( L"__winetest_\u263a" ), L"\u03b2" ),
+                "Couldn't find unicode env var\n" );
+        return;
+    }
+
+    test_initial_environ();
+    test_environment_manipulation();
+    test_child_env(argv);
+}
-- 
GitLab


From ca7a1139a8f690d4a6c130b2233092aa977939f8 Mon Sep 17 00:00:00 2001
From: Piotr Caban <piotr@codeweavers.com>
Date: Tue, 21 Nov 2023 10:23:54 +0100
Subject: [PATCH 3/7] msvcrt: Factor out env_get_index helper.

---
 dlls/msvcrt/environ.c | 31 +++++++++++++++++--------------
 1 file changed, 17 insertions(+), 14 deletions(-)

diff --git a/dlls/msvcrt/environ.c b/dlls/msvcrt/environ.c
index 2c2a3353582..f0c3705a030 100644
--- a/dlls/msvcrt/environ.c
+++ b/dlls/msvcrt/environ.c
@@ -25,25 +25,28 @@
 
 WINE_DEFAULT_DEBUG_CHANNEL(msvcrt);
 
-static char * getenv_helper(const char *name)
+static int env_get_index(const char *name)
 {
-    char **env;
-    size_t len;
+    int i, len;
 
-    if (!name) return NULL;
     len = strlen(name);
-
-    for (env = MSVCRT__environ; *env; env++)
+    for (i = 0; MSVCRT__environ[i]; i++)
     {
-        char *str = *env;
-        char *pos = strchr(str,'=');
-        if (pos && ((pos - str) == len) && !_strnicmp(str, name, len))
-        {
-            TRACE("(%s): got %s\n", debugstr_a(name), debugstr_a(pos + 1));
-            return pos + 1;
-        }
+        if (!strncmp(name, MSVCRT__environ[i], len) && MSVCRT__environ[i][len] == '=')
+            return i;
     }
-    return NULL;
+    return i;
+}
+
+static char * getenv_helper(const char *name)
+{
+    int idx;
+
+    if (!name) return NULL;
+
+    idx = env_get_index(name);
+    if (!MSVCRT__environ[idx]) return NULL;
+    return strchr(MSVCRT__environ[idx], '=') + 1;
 }
 
 /*********************************************************************
-- 
GitLab


From 55b18b143f51846f15d81594ec204eadb65082c3 Mon Sep 17 00:00:00 2001
From: Piotr Caban <piotr@codeweavers.com>
Date: Tue, 21 Nov 2023 10:23:54 +0100
Subject: [PATCH 4/7] msvcrt: Factor out wenv_get_index helper.

---
 dlls/msvcrt/environ.c | 31 +++++++++++++++++--------------
 1 file changed, 17 insertions(+), 14 deletions(-)

diff --git a/dlls/msvcrt/environ.c b/dlls/msvcrt/environ.c
index f0c3705a030..96793a8261b 100644
--- a/dlls/msvcrt/environ.c
+++ b/dlls/msvcrt/environ.c
@@ -38,6 +38,19 @@ static int env_get_index(const char *name)
     return i;
 }
 
+static int wenv_get_index(const wchar_t *name)
+{
+    int i, len;
+
+    len = wcslen(name);
+    for (i = 0; MSVCRT__wenviron[i]; i++)
+    {
+        if (!wcsncmp(name, MSVCRT__wenviron[i], len) && MSVCRT__wenviron[i][len] == '=')
+            return i;
+    }
+    return i;
+}
+
 static char * getenv_helper(const char *name)
 {
     int idx;
@@ -61,27 +74,17 @@ char * CDECL getenv(const char *name)
 
 static wchar_t * wgetenv_helper(const wchar_t *name)
 {
-    wchar_t **env;
-    size_t len;
+    int idx;
 
     if (!name) return NULL;
-    len = wcslen(name);
 
     /* Initialize the _wenviron array if it's not already created. */
     if (!MSVCRT__wenviron)
         MSVCRT__wenviron = msvcrt_SnapshotOfEnvironmentW(NULL);
 
-    for (env = MSVCRT__wenviron; *env; env++)
-    {
-        wchar_t *str = *env;
-        wchar_t *pos = wcschr(str,'=');
-        if (pos && ((pos - str) == len) && !_wcsnicmp(str, name, len))
-        {
-            TRACE("(%s): got %s\n", debugstr_w(name), debugstr_w(pos + 1));
-            return pos + 1;
-        }
-    }
-    return NULL;
+    idx = wenv_get_index(name);
+    if (!MSVCRT__wenviron[idx]) return NULL;
+    return wcschr(MSVCRT__wenviron[idx], '=') + 1;
 }
 
 /*********************************************************************
-- 
GitLab


From a45ca342fc418ce5e018953f60c4c1219774f254 Mon Sep 17 00:00:00 2001
From: Eric Pouech <epouech@codeweavers.com>
Date: Tue, 21 Nov 2023 10:23:54 +0100
Subject: [PATCH 5/7] msvcrt: Lazily initialize ___winitenv.

---
 dlls/msvcrt/data.c            |  80 +-------------------------
 dlls/msvcrt/environ.c         | 105 +++++++++++++++++++++++++++++-----
 dlls/msvcrt/msvcrt.h          |   5 +-
 dlls/msvcrt/tests/environ.c   |   3 -
 dlls/ucrtbase/tests/environ.c |   3 +-
 5 files changed, 97 insertions(+), 99 deletions(-)

diff --git a/dlls/msvcrt/data.c b/dlls/msvcrt/data.c
index 8a8552a151e..bec1e61e411 100644
--- a/dlls/msvcrt/data.c
+++ b/dlls/msvcrt/data.c
@@ -60,77 +60,6 @@ int MSVCRT_app_type = 0;
 char* MSVCRT__pgmptr = NULL;
 WCHAR* MSVCRT__wpgmptr = NULL;
 
-/* Get a snapshot of the current environment
- * and construct the __p__environ array
- *
- * The pointer returned from GetEnvironmentStrings may get invalid when
- * some other module cause a reallocation of the env-variable block
- *
- * blk is an array of pointers to environment strings, ending with a NULL
- * and after that the actual copy of the environment strings, ending in a \0
- */
-char ** msvcrt_SnapshotOfEnvironmentA(char **blk)
-{
-  char* environ_strings = GetEnvironmentStringsA();
-  int count = 1, len = 1, i = 0; /* keep space for the trailing NULLS */
-  char *ptr;
-
-  for (ptr = environ_strings; *ptr; ptr += strlen(ptr) + 1)
-  {
-    /* Don't count environment variables starting with '=' which are command shell specific */
-    if (*ptr != '=') count++;
-    len += strlen(ptr) + 1;
-  }
-  blk = realloc(blk, count * sizeof(char*) + len);
-
-  if (blk)
-    {
-      if (count)
-	{
-	  memcpy(&blk[count],environ_strings,len);
-	  for (ptr = (char*) &blk[count]; *ptr; ptr += strlen(ptr) + 1)
-	    {
-	      /* Skip special environment strings set by the command shell */
-	      if (*ptr != '=') blk[i++] = ptr;
-	    }
-	}
-      blk[i] = NULL;
-    }
-  FreeEnvironmentStringsA(environ_strings);
-  return blk;
-}
-
-wchar_t ** msvcrt_SnapshotOfEnvironmentW(wchar_t **wblk)
-{
-  wchar_t* wenviron_strings = GetEnvironmentStringsW();
-  int count = 1, len = 1, i = 0; /* keep space for the trailing NULLS */
-  wchar_t *wptr;
-
-  for (wptr = wenviron_strings; *wptr; wptr += wcslen(wptr) + 1)
-  {
-    /* Don't count environment variables starting with '=' which are command shell specific */
-    if (*wptr != '=') count++;
-    len += wcslen(wptr) + 1;
-  }
-  wblk = realloc(wblk, count * sizeof(wchar_t*) + len * sizeof(wchar_t));
-
-  if (wblk)
-    {
-      if (count)
-	{
-	  memcpy(&wblk[count],wenviron_strings,len * sizeof(wchar_t));
-	  for (wptr = (wchar_t*)&wblk[count]; *wptr; wptr += wcslen(wptr) + 1)
-	    {
-	      /* Skip special environment strings set by the command shell */
-	      if (*wptr != '=') wblk[i++] = wptr;
-	    }
-	}
-      wblk[i] = NULL;
-    }
-  FreeEnvironmentStringsW(wenviron_strings);
-  return wblk;
-}
-
 static char **build_argv( WCHAR **wargv )
 {
     int argc;
@@ -433,9 +362,7 @@ void msvcrt_init_args(void)
   MSVCRT___unguarded_readlc_active = 0;
   MSVCRT__fmode = _O_TEXT;
 
-  MSVCRT__environ = msvcrt_SnapshotOfEnvironmentA(NULL);
-  MSVCRT___initenv = msvcrt_SnapshotOfEnvironmentA(NULL);
-  MSVCRT___winitenv = msvcrt_SnapshotOfEnvironmentW(NULL);
+  env_init(FALSE, FALSE);
 
   MSVCRT__pgmptr = HeapAlloc(GetProcessHeap(), 0, MAX_PATH);
   if (MSVCRT__pgmptr)
@@ -554,9 +481,8 @@ int CDECL __wgetmainargs(int *argc, wchar_t** *wargv, wchar_t** *wenvp,
         MSVCRT___wargv = initial_wargv;
     }
 
-    /* Initialize the _wenviron array if it's not already created. */
-    if (!MSVCRT__wenviron)
-        MSVCRT__wenviron = msvcrt_SnapshotOfEnvironmentW(NULL);
+    env_init(TRUE, FALSE);
+
     *argc = MSVCRT___argc;
     *wargv = MSVCRT___wargv;
     *wenvp = MSVCRT__wenviron;
diff --git a/dlls/msvcrt/environ.c b/dlls/msvcrt/environ.c
index 96793a8261b..431b4efa2eb 100644
--- a/dlls/msvcrt/environ.c
+++ b/dlls/msvcrt/environ.c
@@ -25,6 +25,83 @@
 
 WINE_DEFAULT_DEBUG_CHANNEL(msvcrt);
 
+int env_init(BOOL unicode, BOOL modif)
+{
+    if (!unicode && (!MSVCRT___initenv || modif))
+    {
+        char *environ_strings = GetEnvironmentStringsA();
+        int count = 1, len = 1, i = 0; /* keep space for the trailing NULLS */
+        char **blk, *ptr;
+
+        for (ptr = environ_strings; *ptr; ptr += strlen(ptr) + 1)
+        {
+            /* Don't count environment variables starting with '=' which are command shell specific */
+            if (*ptr != '=') count++;
+            len += strlen(ptr) + 1;
+        }
+        if (MSVCRT___initenv != MSVCRT__environ)
+            blk = realloc(MSVCRT__environ, count * sizeof(*MSVCRT__environ) + len);
+        else
+            blk = malloc(count * sizeof(*MSVCRT__environ) + len);
+        if (!blk)
+        {
+            FreeEnvironmentStringsA(environ_strings);
+            return -1;
+        }
+        MSVCRT__environ = blk;
+
+        memcpy(&MSVCRT__environ[count], environ_strings, len);
+        for (ptr = (char *)&MSVCRT__environ[count]; *ptr; ptr += strlen(ptr) + 1)
+        {
+            /* Skip special environment strings set by the command shell */
+            if (*ptr != '=') MSVCRT__environ[i++] = ptr;
+        }
+        MSVCRT__environ[i] = NULL;
+        FreeEnvironmentStringsA(environ_strings);
+
+        if (!MSVCRT___initenv)
+            MSVCRT___initenv = MSVCRT__environ;
+    }
+
+    if (unicode && (!MSVCRT___winitenv || modif))
+    {
+        wchar_t *wenviron_strings = GetEnvironmentStringsW();
+        int count = 1, len = 1, i = 0; /* keep space for the trailing NULLS */
+        wchar_t **wblk, *wptr;
+
+        for (wptr = wenviron_strings; *wptr; wptr += wcslen(wptr) + 1)
+        {
+            /* Don't count environment variables starting with '=' which are command shell specific */
+            if (*wptr != '=') count++;
+            len += wcslen(wptr) + 1;
+        }
+        if (MSVCRT___winitenv != MSVCRT__wenviron)
+            wblk = realloc(MSVCRT__wenviron, count * sizeof(*MSVCRT__wenviron) + len * sizeof(wchar_t));
+        else
+            wblk = malloc(count * sizeof(*MSVCRT__wenviron) + len * sizeof(wchar_t));
+        if (!wblk)
+        {
+            FreeEnvironmentStringsW(wenviron_strings);
+            return -1;
+        }
+        MSVCRT__wenviron = wblk;
+
+        memcpy(&MSVCRT__wenviron[count], wenviron_strings, len * sizeof(wchar_t));
+        for (wptr = (wchar_t *)&MSVCRT__wenviron[count]; *wptr; wptr += wcslen(wptr) + 1)
+        {
+            /* Skip special environment strings set by the command shell */
+            if (*wptr != '=') MSVCRT__wenviron[i++] = wptr;
+        }
+        MSVCRT__wenviron[i] = NULL;
+        FreeEnvironmentStringsW(wenviron_strings);
+
+        if (!MSVCRT___winitenv)
+            MSVCRT___winitenv = MSVCRT__wenviron;
+    }
+
+    return 0;
+}
+
 static int env_get_index(const char *name)
 {
     int i, len;
@@ -77,10 +154,7 @@ static wchar_t * wgetenv_helper(const wchar_t *name)
     int idx;
 
     if (!name) return NULL;
-
-    /* Initialize the _wenviron array if it's not already created. */
-    if (!MSVCRT__wenviron)
-        MSVCRT__wenviron = msvcrt_SnapshotOfEnvironmentW(NULL);
+    if (env_init(TRUE, FALSE)) return NULL;
 
     idx = wenv_get_index(name);
     if (!MSVCRT__wenviron[idx]) return NULL;
@@ -133,10 +207,9 @@ int CDECL _putenv(const char *str)
  /* _putenv returns success on deletion of nonexistent variable, unlike [Rtl]SetEnvironmentVariable */
  if ((ret == -1) && (GetLastError() == ERROR_ENVVAR_NOT_FOUND)) ret = 0;
 
- MSVCRT__environ = msvcrt_SnapshotOfEnvironmentA(MSVCRT__environ);
+ if (ret != -1) ret = env_init(FALSE, TRUE);
  /* Update the __p__wenviron array only when already initialized */
- if (MSVCRT__wenviron)
-   MSVCRT__wenviron = msvcrt_SnapshotOfEnvironmentW(MSVCRT__wenviron);
+ if (ret != -1 && MSVCRT__wenviron) ret = env_init(TRUE, TRUE);
    
 finish:
  HeapFree(GetProcessHeap(), 0, name);
@@ -154,6 +227,8 @@ int CDECL _wputenv(const wchar_t *str)
 
  TRACE("%s\n", debugstr_w(str));
 
+ if (env_init(TRUE, FALSE)) return -1;
+
  if (!str)
    return -1;
  name = HeapAlloc(GetProcessHeap(), 0, (wcslen(str) + 1) * sizeof(wchar_t));
@@ -178,8 +253,8 @@ int CDECL _wputenv(const wchar_t *str)
  /* _putenv returns success on deletion of nonexistent variable, unlike [Rtl]SetEnvironmentVariable */
  if ((ret == -1) && (GetLastError() == ERROR_ENVVAR_NOT_FOUND)) ret = 0;
 
- MSVCRT__environ = msvcrt_SnapshotOfEnvironmentA(MSVCRT__environ);
- MSVCRT__wenviron = msvcrt_SnapshotOfEnvironmentW(MSVCRT__wenviron);
+ if (ret != -1) ret = env_init(FALSE, TRUE);
+ if (ret != -1) ret = env_init(TRUE, TRUE);
 
 finish:
  HeapFree(GetProcessHeap(), 0, name);
@@ -208,9 +283,8 @@ errno_t CDECL _putenv_s(const char *name, const char *value)
         }
     }
 
-    MSVCRT__environ = msvcrt_SnapshotOfEnvironmentA(MSVCRT__environ);
-    MSVCRT__wenviron = msvcrt_SnapshotOfEnvironmentW(MSVCRT__wenviron);
-
+    env_init(FALSE, TRUE);
+    env_init(TRUE, TRUE);
     return ret;
 }
 
@@ -223,6 +297,8 @@ errno_t CDECL _wputenv_s(const wchar_t *name, const wchar_t *value)
 
     TRACE("%s %s\n", debugstr_w(name), debugstr_w(value));
 
+    env_init(TRUE, FALSE);
+
     if (!MSVCRT_CHECK_PMT(name != NULL)) return EINVAL;
     if (!MSVCRT_CHECK_PMT(value != NULL)) return EINVAL;
 
@@ -236,9 +312,8 @@ errno_t CDECL _wputenv_s(const wchar_t *name, const wchar_t *value)
         }
     }
 
-    MSVCRT__environ = msvcrt_SnapshotOfEnvironmentA(MSVCRT__environ);
-    MSVCRT__wenviron = msvcrt_SnapshotOfEnvironmentW(MSVCRT__wenviron);
-
+    env_init(FALSE, TRUE);
+    env_init(TRUE, TRUE);
     return ret;
 }
 
diff --git a/dlls/msvcrt/msvcrt.h b/dlls/msvcrt/msvcrt.h
index 7c2dd4835f5..fe626e2e79f 100644
--- a/dlls/msvcrt/msvcrt.h
+++ b/dlls/msvcrt/msvcrt.h
@@ -205,9 +205,10 @@ void __cdecl _amsg_exit(int errnum);
 
 extern char **MSVCRT__environ;
 extern wchar_t **MSVCRT__wenviron;
+extern char **MSVCRT___initenv;
+extern wchar_t **MSVCRT___winitenv;
 
-extern char ** msvcrt_SnapshotOfEnvironmentA(char **);
-extern wchar_t ** msvcrt_SnapshotOfEnvironmentW(wchar_t **);
+int env_init(BOOL, BOOL);
 
 wchar_t *msvcrt_wstrdupa(const char *);
 
diff --git a/dlls/msvcrt/tests/environ.c b/dlls/msvcrt/tests/environ.c
index 17d75733c85..84d610e6c76 100644
--- a/dlls/msvcrt/tests/environ.c
+++ b/dlls/msvcrt/tests/environ.c
@@ -139,7 +139,6 @@ static void test__environ(void)
     {
         initenv = *p__p___initenv();
 
-        todo_wine
         ok( initenv == *p_environ,
             "Expected _environ to be equal to initial env\n" );
     }
@@ -195,7 +194,6 @@ static void test__wenviron(void)
     if (p__p___winitenv)
     {
         wchar_t ***retptr = p__p___winitenv();
-        todo_wine
         ok( !*retptr, "Expected initial env to be NULL\n" );
     }
     else
@@ -235,7 +233,6 @@ static void test__wenviron(void)
             "Expected _wenviron to be different from __p___winitenv() %p %p\n", *retptr, *p_wenviron );
         /* test that w-initial env is derived from current _environ[] and not from ansi initial env */
         value = env_get_valueW( *retptr, L"cat" );
-        todo_wine
         ok( value && !wcscmp( value, L"dog" ),
                 "Expecting initial env to be derived from current env (got %ls)\n", value );
     }
diff --git a/dlls/ucrtbase/tests/environ.c b/dlls/ucrtbase/tests/environ.c
index 4d2dbadd33d..5cc019af673 100644
--- a/dlls/ucrtbase/tests/environ.c
+++ b/dlls/ucrtbase/tests/environ.c
@@ -132,13 +132,12 @@ static void test_initial_environ( void )
     ok( p__p__environ() != NULL, "Unexpected NULL _environ[]\n" );
     ok( *p__p__environ() != NULL, "Unexpected empty _environ[]\n" );
     ok( p_get_initial_narrow_environment() != NULL, "Unexpected empty narrow initial environment\n" );
-    todo_wine
     ok( p_get_initial_narrow_environment() == *p__p__environ(), "Expecting _environ[] to match initial narrow environment\n" );
 
     ok( p__p__wenviron() != NULL, "Unexpected NULL _wenviron[]\n" );
     ok( *p__p__wenviron() == NULL, "Unexpected non empty _wenviron[]\n" );
-    ok( p_get_initial_wide_environment() != NULL, "Unexpected empty wide initial environment\n" );
     todo_wine
+    ok( p_get_initial_wide_environment() != NULL, "Unexpected empty wide initial environment\n" );
     ok( p_get_initial_wide_environment() == *p__p__wenviron(), "Expecting _wenviron[] to match initial wide environment\n" );
 }
 
-- 
GitLab


From bdb624fffb1c1acc1feb2baec396d9b805cb0ce9 Mon Sep 17 00:00:00 2001
From: Eric Pouech <epouech@codeweavers.com>
Date: Tue, 21 Nov 2023 10:23:54 +0100
Subject: [PATCH 6/7] msvcrt: Allocate environment variables in separate
 allocation chunks.

---
 dlls/msvcrt/environ.c         | 338 +++++++++++++++++++++-------------
 dlls/msvcrt/tests/environ.c   |   4 -
 dlls/ucrtbase/tests/environ.c |   4 -
 3 files changed, 214 insertions(+), 132 deletions(-)

diff --git a/dlls/msvcrt/environ.c b/dlls/msvcrt/environ.c
index 431b4efa2eb..3c90ec4bf21 100644
--- a/dlls/msvcrt/environ.c
+++ b/dlls/msvcrt/environ.c
@@ -21,17 +21,18 @@
  * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301, USA
  */
 #include "msvcrt.h"
+#include <winnls.h>
 #include "wine/debug.h"
 
 WINE_DEFAULT_DEBUG_CHANNEL(msvcrt);
 
 int env_init(BOOL unicode, BOOL modif)
 {
-    if (!unicode && (!MSVCRT___initenv || modif))
+    if (!unicode && !MSVCRT___initenv)
     {
         char *environ_strings = GetEnvironmentStringsA();
         int count = 1, len = 1, i = 0; /* keep space for the trailing NULLS */
-        char **blk, *ptr;
+        char *ptr;
 
         for (ptr = environ_strings; *ptr; ptr += strlen(ptr) + 1)
         {
@@ -39,35 +40,42 @@ int env_init(BOOL unicode, BOOL modif)
             if (*ptr != '=') count++;
             len += strlen(ptr) + 1;
         }
-        if (MSVCRT___initenv != MSVCRT__environ)
-            blk = realloc(MSVCRT__environ, count * sizeof(*MSVCRT__environ) + len);
-        else
-            blk = malloc(count * sizeof(*MSVCRT__environ) + len);
-        if (!blk)
+        MSVCRT___initenv = malloc(count * sizeof(*MSVCRT___initenv) + len);
+        if (!MSVCRT___initenv)
         {
             FreeEnvironmentStringsA(environ_strings);
             return -1;
         }
-        MSVCRT__environ = blk;
 
-        memcpy(&MSVCRT__environ[count], environ_strings, len);
-        for (ptr = (char *)&MSVCRT__environ[count]; *ptr; ptr += strlen(ptr) + 1)
+        memcpy(&MSVCRT___initenv[count], environ_strings, len);
+        for (ptr = (char *)&MSVCRT___initenv[count]; *ptr; ptr += strlen(ptr) + 1)
         {
             /* Skip special environment strings set by the command shell */
-            if (*ptr != '=') MSVCRT__environ[i++] = ptr;
+            if (*ptr != '=') MSVCRT___initenv[i++] = ptr;
         }
-        MSVCRT__environ[i] = NULL;
+        MSVCRT___initenv[i] = NULL;
         FreeEnvironmentStringsA(environ_strings);
 
-        if (!MSVCRT___initenv)
-            MSVCRT___initenv = MSVCRT__environ;
+        MSVCRT__environ = MSVCRT___initenv;
+    }
+
+    if (!unicode && modif && MSVCRT__environ == MSVCRT___initenv)
+    {
+        int i = 0;
+
+        while(MSVCRT___initenv[i]) i++;
+        MSVCRT__environ = malloc((i + 1) * sizeof(char *));
+        if (!MSVCRT__environ) return -1;
+        for (i = 0; MSVCRT___initenv[i]; i++)
+            MSVCRT__environ[i] = strdup(MSVCRT___initenv[i]);
+        MSVCRT__environ[i] = NULL;
     }
 
-    if (unicode && (!MSVCRT___winitenv || modif))
+    if (unicode && !MSVCRT___winitenv)
     {
         wchar_t *wenviron_strings = GetEnvironmentStringsW();
         int count = 1, len = 1, i = 0; /* keep space for the trailing NULLS */
-        wchar_t **wblk, *wptr;
+        wchar_t *wptr;
 
         for (wptr = wenviron_strings; *wptr; wptr += wcslen(wptr) + 1)
         {
@@ -75,28 +83,35 @@ int env_init(BOOL unicode, BOOL modif)
             if (*wptr != '=') count++;
             len += wcslen(wptr) + 1;
         }
-        if (MSVCRT___winitenv != MSVCRT__wenviron)
-            wblk = realloc(MSVCRT__wenviron, count * sizeof(*MSVCRT__wenviron) + len * sizeof(wchar_t));
-        else
-            wblk = malloc(count * sizeof(*MSVCRT__wenviron) + len * sizeof(wchar_t));
-        if (!wblk)
+        MSVCRT___winitenv = malloc(count * sizeof(*MSVCRT___winitenv) + len * sizeof(wchar_t));
+        if (!MSVCRT___winitenv)
         {
             FreeEnvironmentStringsW(wenviron_strings);
             return -1;
         }
-        MSVCRT__wenviron = wblk;
 
-        memcpy(&MSVCRT__wenviron[count], wenviron_strings, len * sizeof(wchar_t));
-        for (wptr = (wchar_t *)&MSVCRT__wenviron[count]; *wptr; wptr += wcslen(wptr) + 1)
+        memcpy(&MSVCRT___winitenv[count], wenviron_strings, len * sizeof(wchar_t));
+        for (wptr = (wchar_t *)&MSVCRT___winitenv[count]; *wptr; wptr += wcslen(wptr) + 1)
         {
             /* Skip special environment strings set by the command shell */
-            if (*wptr != '=') MSVCRT__wenviron[i++] = wptr;
+            if (*wptr != '=') MSVCRT___winitenv[i++] = wptr;
         }
-        MSVCRT__wenviron[i] = NULL;
+        MSVCRT___winitenv[i] = NULL;
         FreeEnvironmentStringsW(wenviron_strings);
 
-        if (!MSVCRT___winitenv)
-            MSVCRT___winitenv = MSVCRT__wenviron;
+        MSVCRT__wenviron = MSVCRT___winitenv;
+    }
+
+    if (unicode && modif && MSVCRT__wenviron == MSVCRT___winitenv)
+    {
+        int i = 0;
+
+        while(MSVCRT___winitenv[i]) i++;
+        MSVCRT__wenviron = malloc((i + 1) * sizeof(wchar_t *));
+        if (!MSVCRT__wenviron) return -1;
+        for (i = 0; MSVCRT___winitenv[i]; i++)
+            MSVCRT__wenviron[i] = wcsdup(MSVCRT___winitenv[i]);
+        MSVCRT__wenviron[i] = NULL;
     }
 
     return 0;
@@ -128,6 +143,67 @@ static int wenv_get_index(const wchar_t *name)
     return i;
 }
 
+static int env_set(char **env, wchar_t **wenv)
+{
+    wchar_t *weq = wcschr(*wenv, '=');
+    char *eq = strchr(*env, '=');
+    int idx;
+
+    *weq = 0;
+    if (!SetEnvironmentVariableW(*wenv, weq[1] ? weq + 1 : NULL) &&
+            GetLastError() != ERROR_ENVVAR_NOT_FOUND)
+        return -1;
+
+    *eq = 0;
+    idx = env_get_index(*env);
+    *eq = '=';
+    if (!eq[1])
+    {
+        for(; MSVCRT__environ[idx]; idx++)
+            MSVCRT__environ[idx] = MSVCRT__environ[idx + 1];
+    }
+    else if (MSVCRT__environ[idx])
+    {
+        free(MSVCRT__environ[idx]);
+        MSVCRT__environ[idx] = *env;
+        *env = NULL;
+    }
+    else
+    {
+        char **new_env = realloc(MSVCRT__environ, (idx + 2) * sizeof(*MSVCRT__environ));
+        if (!new_env) return -1;
+        MSVCRT__environ = new_env;
+        MSVCRT__environ[idx] = *env;
+        MSVCRT__environ[idx + 1] = NULL;
+        *env = NULL;
+    }
+
+    if (!MSVCRT__wenviron) return 0;
+    idx = wenv_get_index(*wenv);
+    *weq = '=';
+    if (!weq[1])
+    {
+        for(; MSVCRT__wenviron[idx]; idx++)
+            MSVCRT__wenviron[idx] = MSVCRT__wenviron[idx + 1];
+    }
+    else if (MSVCRT__wenviron[idx])
+    {
+        free(MSVCRT__wenviron[idx]);
+        MSVCRT__wenviron[idx] = *wenv;
+        *wenv = NULL;
+    }
+    else
+    {
+        wchar_t **new_env = realloc(MSVCRT__wenviron, (idx + 2) * sizeof(*MSVCRT__wenviron));
+        if (!new_env) return -1;
+        MSVCRT__wenviron = new_env;
+        MSVCRT__wenviron[idx] = *wenv;
+        MSVCRT__wenviron[idx + 1] = NULL;
+        *wenv = NULL;
+    }
+    return 0;
+}
+
 static char * getenv_helper(const char *name)
 {
     int idx;
@@ -171,49 +247,107 @@ wchar_t * CDECL _wgetenv(const wchar_t *name)
     return wgetenv_helper(name);
 }
 
+static int putenv_helper(const char *name, const char *val, const char *eq)
+{
+    wchar_t *wenv;
+    char *env;
+    int r;
+
+    if (env_init(FALSE, TRUE)) return -1;
+
+    if (eq)
+    {
+        env = strdup(name);
+        if (!env) return -1;
+    }
+    else
+    {
+        int name_len = strlen(name);
+
+        r = strlen(val);
+        env = malloc(name_len + r + 2);
+        if (!env) return -1;
+        memcpy(env, name, name_len);
+        env[name_len] = '=';
+        strcpy(env + name_len + 1, val);
+    }
+
+    wenv = msvcrt_wstrdupa(env);
+    if (!wenv)
+    {
+        free(env);
+        return -1;
+    }
+
+    r = env_set(&env, &wenv);
+    free(env);
+    free(wenv);
+    return r;
+}
+
+static char *msvcrt_astrdupw(const wchar_t *wstr)
+{
+    const unsigned int len = WideCharToMultiByte(CP_ACP, 0, wstr, -1, NULL, 0, NULL, NULL);
+    char *str = malloc(len * sizeof(char));
+
+    if (!str)
+        return NULL;
+    WideCharToMultiByte(CP_ACP, 0, wstr, -1, str, len, NULL, NULL);
+    return str;
+}
+
+
+static int wputenv_helper(const wchar_t *name, const wchar_t *val, const wchar_t *eq)
+{
+    wchar_t *wenv;
+    char *env;
+    int r;
+
+    if (env_init(TRUE, TRUE)) return -1;
+
+    if (eq)
+    {
+        wenv = wcsdup(name);
+        if (!wenv) return -1;
+    }
+    else
+    {
+        int name_len = wcslen(name);
+
+        r = wcslen(val);
+        wenv = malloc((name_len + r + 2) * sizeof(wchar_t));
+        if (!wenv) return -1;
+        memcpy(wenv, name, name_len * sizeof(wchar_t));
+        wenv[name_len] = '=';
+        wcscpy(wenv + name_len + 1, val);
+    }
+
+    env = msvcrt_astrdupw(wenv);
+    if (!env)
+    {
+        free(wenv);
+        return -1;
+    }
+
+    r = env_set(&env, &wenv);
+    free(env);
+    free(wenv);
+    return r;
+}
+
 /*********************************************************************
  *		_putenv (MSVCRT.@)
  */
 int CDECL _putenv(const char *str)
 {
- char *name, *value;
- char *dst;
- int ret;
-
- TRACE("%s\n", debugstr_a(str));
-
- if (!str)
-   return -1;
-   
- name = HeapAlloc(GetProcessHeap(), 0, strlen(str) + 1);
- if (!name)
-   return -1;
- dst = name;
- while (*str && *str != '=')
-  *dst++ = *str++;
- if (!*str++)
- {
-   ret = -1;
-   goto finish;
- }
- *dst++ = '\0';
- value = dst;
- while (*str)
-  *dst++ = *str++;
- *dst = '\0';
-
- ret = SetEnvironmentVariableA(name, value[0] ? value : NULL) ? 0 : -1;
-
- /* _putenv returns success on deletion of nonexistent variable, unlike [Rtl]SetEnvironmentVariable */
- if ((ret == -1) && (GetLastError() == ERROR_ENVVAR_NOT_FOUND)) ret = 0;
-
- if (ret != -1) ret = env_init(FALSE, TRUE);
- /* Update the __p__wenviron array only when already initialized */
- if (ret != -1 && MSVCRT__wenviron) ret = env_init(TRUE, TRUE);
-   
-finish:
- HeapFree(GetProcessHeap(), 0, name);
- return ret;
+    const char *eq;
+
+    TRACE("%s\n", debugstr_a(str));
+
+    if (!str || !(eq = strchr(str, '=')))
+        return -1;
+
+    return putenv_helper(str, NULL, eq);
 }
 
 /*********************************************************************
@@ -221,44 +355,14 @@ finish:
  */
 int CDECL _wputenv(const wchar_t *str)
 {
- wchar_t *name, *value;
- wchar_t *dst;
- int ret;
-
- TRACE("%s\n", debugstr_w(str));
-
- if (env_init(TRUE, FALSE)) return -1;
-
- if (!str)
-   return -1;
- name = HeapAlloc(GetProcessHeap(), 0, (wcslen(str) + 1) * sizeof(wchar_t));
- if (!name)
-   return -1;
- dst = name;
- while (*str && *str != '=')
-  *dst++ = *str++;
- if (!*str++)
- {
-   ret = -1;
-   goto finish;
- }
- *dst++ = 0;
- value = dst;
- while (*str)
-  *dst++ = *str++;
- *dst = 0;
-
- ret = SetEnvironmentVariableW(name, value[0] ? value : NULL) ? 0 : -1;
-
- /* _putenv returns success on deletion of nonexistent variable, unlike [Rtl]SetEnvironmentVariable */
- if ((ret == -1) && (GetLastError() == ERROR_ENVVAR_NOT_FOUND)) ret = 0;
-
- if (ret != -1) ret = env_init(FALSE, TRUE);
- if (ret != -1) ret = env_init(TRUE, TRUE);
-
-finish:
- HeapFree(GetProcessHeap(), 0, name);
- return ret;
+    const wchar_t *eq;
+
+    TRACE("%s\n", debugstr_w(str));
+
+    if (!str || !(eq = wcschr(str, '=')))
+        return -1;
+
+    return wputenv_helper(str, NULL, eq);
 }
 
 /*********************************************************************
@@ -273,18 +377,12 @@ errno_t CDECL _putenv_s(const char *name, const char *value)
     if (!MSVCRT_CHECK_PMT(name != NULL)) return EINVAL;
     if (!MSVCRT_CHECK_PMT(value != NULL)) return EINVAL;
 
-    if (!SetEnvironmentVariableA(name, value[0] ? value : NULL))
+    if (putenv_helper(name, value, NULL) < 0)
     {
-        /* _putenv returns success on deletion of nonexistent variable */
-        if (GetLastError() != ERROR_ENVVAR_NOT_FOUND)
-        {
-            msvcrt_set_errno(GetLastError());
-            ret = *_errno();
-        }
+        msvcrt_set_errno(GetLastError());
+        ret = *_errno();
     }
 
-    env_init(FALSE, TRUE);
-    env_init(TRUE, TRUE);
     return ret;
 }
 
@@ -297,23 +395,15 @@ errno_t CDECL _wputenv_s(const wchar_t *name, const wchar_t *value)
 
     TRACE("%s %s\n", debugstr_w(name), debugstr_w(value));
 
-    env_init(TRUE, FALSE);
-
     if (!MSVCRT_CHECK_PMT(name != NULL)) return EINVAL;
     if (!MSVCRT_CHECK_PMT(value != NULL)) return EINVAL;
 
-    if (!SetEnvironmentVariableW(name, value[0] ? value : NULL))
+    if (wputenv_helper(name, value, NULL) < 0)
     {
-        /* _putenv returns success on deletion of nonexistent variable */
-        if (GetLastError() != ERROR_ENVVAR_NOT_FOUND)
-        {
-            msvcrt_set_errno(GetLastError());
-            ret = *_errno();
-        }
+        msvcrt_set_errno(GetLastError());
+        ret = *_errno();
     }
 
-    env_init(FALSE, TRUE);
-    env_init(TRUE, TRUE);
     return ret;
 }
 
diff --git a/dlls/msvcrt/tests/environ.c b/dlls/msvcrt/tests/environ.c
index 84d610e6c76..aab14a422b3 100644
--- a/dlls/msvcrt/tests/environ.c
+++ b/dlls/msvcrt/tests/environ.c
@@ -342,7 +342,6 @@ static void test_environment_manipulation(void)
     ok( _putenv( "__winetest_dog=bark" ) == 0, "Couldn't set env var\n" );
     ok( !strcmp( (*p_environ)[count + 1], "__winetest_dog=bark" ), "Unexpected env var value\n" );
     ok( getenv( "__winetest_dog" ) == strchr( (*p_environ)[count + 1], '=' ) + 1, "Expected getenv() to return pointer inside _environ[] entry\n" );
-    todo_wine
     ok( first == (*p_environ)[count], "Expected stability of _environ[count] pointer\n" );
     second = (*p_environ)[count + 1];
     ok( count + 2 == env_get_entry_countA( *p_environ ), "Unexpected count\n" );
@@ -350,13 +349,11 @@ static void test_environment_manipulation(void)
     ok( _putenv( "__winetest_cat=purr" ) == 0, "Couldn't set env var\n" );
     ok( !strcmp( (*p_environ)[count], "__winetest_cat=purr" ), "Unexpected env var value\n" );
     ok( getenv( "__winetest_cat" ) == strchr( (*p_environ)[count], '=' ) + 1, "Expected getenv() to return pointer inside _environ[] entry\n" );
-    todo_wine
     ok( second == (*p_environ)[count + 1], "Expected stability of _environ[count] pointer\n" );
     ok( !strcmp( (*p_environ)[count + 1], "__winetest_dog=bark" ), "Couldn't get env var value\n" );
     ok( getenv( "__winetest_dog" ) == strchr( (*p_environ)[count + 1], '=' ) + 1, "Expected getenv() to return pointer inside _environ[] entry\n" );
     ok( count + 2 == env_get_entry_countA( *p_environ ), "Unexpected count\n" );
     ok( _putenv( "__winetest_cat=" ) == 0, "Couldn't reset env vat\n" );
-    todo_wine
     ok( second == (*p_environ)[count], "Expected _environ[count] to be second\n" );
     ok( !strcmp( (*p_environ)[count], "__winetest_dog=bark" ), "Unexpected env var value\n" );
     ok( count + 1 == env_get_entry_countA( *p_environ ), "Unexpected count\n" );
@@ -367,7 +364,6 @@ static void test_environment_manipulation(void)
     ret = SetEnvironmentVariableA( "__winetest_cat", "meow" );
     ok( ret, "SetEnvironmentVariableA failed: %lu\n", GetLastError() );
     ok( _putenv( "__winetest_dog=bark" ) == 0, "Couldn't set env var\n" );
-    todo_wine
     ok( getenv( "__winetest_cat" ) == NULL, "msvcrt env cache shouldn't have been updated\n" );
     ok( _putenv( "__winetest_cat=" ) == 0, "Couldn't reset env var\n" );
     ok( _putenv( "__winetest_dog=" ) == 0, "Couldn't reset env var\n" );
diff --git a/dlls/ucrtbase/tests/environ.c b/dlls/ucrtbase/tests/environ.c
index 5cc019af673..dc31c640239 100644
--- a/dlls/ucrtbase/tests/environ.c
+++ b/dlls/ucrtbase/tests/environ.c
@@ -240,7 +240,6 @@ static void test_environment_manipulation(void)
     ok( _putenv( "__winetest_dog=bark" ) == 0, "Couldn't set env var\n" );
     ok( !strcmp( (*p_environ)[count + 1], "__winetest_dog=bark" ), "Unexpected env var value\n" );
     ok( getenv( "__winetest_dog" ) == strchr( (*p_environ)[count + 1], '=' ) + 1, "Expected getenv() to return pointer inside _environ[] entry\n" );
-    todo_wine
     ok( first == (*p_environ)[count], "Expected stability of _environ[count] pointer\n" );
     second = (*p_environ)[count + 1];
     ok( count + 2 == env_get_entry_countA( *p_environ ), "Unexpected count\n" );
@@ -248,13 +247,11 @@ static void test_environment_manipulation(void)
     ok( _putenv( "__winetest_cat=purr" ) == 0, "Couldn't set env var\n" );
     ok( !strcmp( (*p_environ)[count], "__winetest_cat=purr" ), "Unexpected env var value\n" );
     ok( getenv( "__winetest_cat" ) == strchr( (*p_environ)[count], '=' ) + 1, "Expected getenv() to return pointer inside _environ[] entry\n" );
-    todo_wine
     ok( second == (*p_environ)[count + 1], "Expected stability of _environ[count] pointer\n" );
     ok( !strcmp( (*p_environ)[count + 1], "__winetest_dog=bark" ), "Couldn't get env var value\n" );
     ok( getenv( "__winetest_dog" ) == strchr( (*p_environ)[count + 1], '=' ) + 1, "Expected getenv() to return pointer inside _environ[] entry\n" );
     ok( count + 2 == env_get_entry_countA( *p_environ ), "Unexpected count\n" );
     ok( _putenv( "__winetest_cat=" ) == 0, "Couldn't reset env vat\n" );
-    todo_wine
     ok( second == (*p_environ)[count], "Expected _environ[count] to be second\n" );
     ok( !strcmp( (*p_environ)[count], "__winetest_dog=bark" ), "Unexpected env var value\n" );
     ok( count + 1 == env_get_entry_countA( *p_environ ), "Unexpected count\n" );
@@ -265,7 +262,6 @@ static void test_environment_manipulation(void)
     ret = SetEnvironmentVariableA( "__winetest_cat", "meow" );
     ok( ret, "SetEnvironmentVariableA failed: %lu\n", GetLastError() );
     ok( _putenv( "__winetest_dog=bark" ) == 0, "Couldn't set env var\n" );
-    todo_wine
     ok( getenv( "__winetest_cat" ) == NULL, "msvcrt env cache shouldn't have been updated\n" );
     ok( _putenv( "__winetest_cat=" ) == 0, "Couldn't reset env var\n" );
     ok( _putenv( "__winetest_dog=" ) == 0, "Couldn't reset env var\n" );
-- 
GitLab


From 58155d3eb9ccaf79a2f8a481aec639568cce9f14 Mon Sep 17 00:00:00 2001
From: Eric Pouech <epouech@codeweavers.com>
Date: Tue, 21 Nov 2023 10:23:54 +0100
Subject: [PATCH 7/7] msvcrt: Fix ucrtbase environment initialization.

Signed-off-by: Eric Pouech <epouech@codeweavers.com>
---
 dlls/msvcrt/data.c            | 34 +++++++++++++++++++---------------
 dlls/ucrtbase/tests/environ.c |  1 -
 2 files changed, 19 insertions(+), 16 deletions(-)

diff --git a/dlls/msvcrt/data.c b/dlls/msvcrt/data.c
index bec1e61e411..6e764e52eae 100644
--- a/dlls/msvcrt/data.c
+++ b/dlls/msvcrt/data.c
@@ -592,14 +592,6 @@ void CDECL __set_app_type(int app_type)
 
 #if _MSVCR_VER>=140
 
-/*********************************************************************
- *		_get_initial_narrow_environment (UCRTBASE.@)
- */
-char** CDECL _get_initial_narrow_environment(void)
-{
-  return MSVCRT___initenv;
-}
-
 /*********************************************************************
  *		_configure_narrow_argv (UCRTBASE.@)
  */
@@ -614,16 +606,18 @@ int CDECL _configure_narrow_argv(int mode)
  */
 int CDECL _initialize_narrow_environment(void)
 {
-  TRACE("\n");
-  return 0;
+    TRACE("\n");
+    return env_init(FALSE, FALSE);
 }
 
 /*********************************************************************
- *		_get_initial_wide_environment (UCRTBASE.@)
+ *		_get_initial_narrow_environment (UCRTBASE.@)
  */
-wchar_t** CDECL _get_initial_wide_environment(void)
+char** CDECL _get_initial_narrow_environment(void)
 {
-  return MSVCRT___winitenv;
+    TRACE("\n");
+    _initialize_narrow_environment();
+    return MSVCRT___initenv;
 }
 
 /*********************************************************************
@@ -640,8 +634,18 @@ int CDECL _configure_wide_argv(int mode)
  */
 int CDECL _initialize_wide_environment(void)
 {
-  WARN("stub\n");
-  return 0;
+    TRACE("\n");
+    return env_init(TRUE, FALSE);
+}
+
+/*********************************************************************
+ *		_get_initial_wide_environment (UCRTBASE.@)
+ */
+wchar_t** CDECL _get_initial_wide_environment(void)
+{
+    TRACE("\n");
+    _initialize_wide_environment();
+    return MSVCRT___winitenv;
 }
 
 /*********************************************************************
diff --git a/dlls/ucrtbase/tests/environ.c b/dlls/ucrtbase/tests/environ.c
index dc31c640239..a42f64466e9 100644
--- a/dlls/ucrtbase/tests/environ.c
+++ b/dlls/ucrtbase/tests/environ.c
@@ -136,7 +136,6 @@ static void test_initial_environ( void )
 
     ok( p__p__wenviron() != NULL, "Unexpected NULL _wenviron[]\n" );
     ok( *p__p__wenviron() == NULL, "Unexpected non empty _wenviron[]\n" );
-    todo_wine
     ok( p_get_initial_wide_environment() != NULL, "Unexpected empty wide initial environment\n" );
     ok( p_get_initial_wide_environment() == *p__p__wenviron(), "Expecting _wenviron[] to match initial wide environment\n" );
 }
-- 
GitLab

From 141aa0a2834b3e2d171607940a870460b5c033a5 Mon Sep 17 00:00:00 2001
From: Piotr Caban <piotr@codeweavers.com>
Date: Tue, 21 Nov 2023 20:03:28 +0100
Subject: [PATCH] msvcrt: Hold _ENV_LOCK when accessing environment variables.

---
 dlls/msvcrt/environ.c | 77 +++++++++++++++++++++++++++++++++----------
 1 file changed, 59 insertions(+), 18 deletions(-)

diff --git a/dlls/msvcrt/environ.c b/dlls/msvcrt/environ.c
index 3c90ec4bf21..9e358d971f9 100644
--- a/dlls/msvcrt/environ.c
+++ b/dlls/msvcrt/environ.c
@@ -21,6 +21,7 @@
  * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301, USA
  */
 #include "msvcrt.h"
+#include "mtdll.h"
 #include <winnls.h>
 #include "wine/debug.h"
 
@@ -220,9 +221,14 @@ static char * getenv_helper(const char *name)
  */
 char * CDECL getenv(const char *name)
 {
+    char *ret;
+
     if (!MSVCRT_CHECK_PMT(name != NULL)) return NULL;
 
-    return getenv_helper(name);
+    _lock(_ENV_LOCK);
+    ret = getenv_helper(name);
+    _unlock(_ENV_LOCK);
+    return ret;
 }
 
 static wchar_t * wgetenv_helper(const wchar_t *name)
@@ -242,9 +248,14 @@ static wchar_t * wgetenv_helper(const wchar_t *name)
  */
 wchar_t * CDECL _wgetenv(const wchar_t *name)
 {
+    wchar_t *ret;
+
     if (!MSVCRT_CHECK_PMT(name != NULL)) return NULL;
 
-    return wgetenv_helper(name);
+    _lock(_ENV_LOCK);
+    ret = wgetenv_helper(name);
+    _unlock(_ENV_LOCK);
+    return ret;
 }
 
 static int putenv_helper(const char *name, const char *val, const char *eq)
@@ -253,7 +264,10 @@ static int putenv_helper(const char *name, const char *val, const char *eq)
     char *env;
     int r;
 
-    if (env_init(FALSE, TRUE)) return -1;
+    _lock(_ENV_LOCK);
+    r = env_init(FALSE, TRUE);
+    _unlock(_ENV_LOCK);
+    if (r) return -1;
 
     if (eq)
     {
@@ -279,7 +293,9 @@ static int putenv_helper(const char *name, const char *val, const char *eq)
         return -1;
     }
 
+    _lock(_ENV_LOCK);
     r = env_set(&env, &wenv);
+    _unlock(_ENV_LOCK);
     free(env);
     free(wenv);
     return r;
@@ -303,7 +319,10 @@ static int wputenv_helper(const wchar_t *name, const wchar_t *val, const wchar_t
     char *env;
     int r;
 
-    if (env_init(TRUE, TRUE)) return -1;
+    _lock(_ENV_LOCK);
+    r = env_init(TRUE, TRUE);
+    _unlock(_ENV_LOCK);
+    if (r) return -1;
 
     if (eq)
     {
@@ -329,7 +348,9 @@ static int wputenv_helper(const wchar_t *name, const wchar_t *val, const wchar_t
         return -1;
     }
 
+    _lock(_ENV_LOCK);
     r = env_set(&env, &wenv);
+    _unlock(_ENV_LOCK);
     free(env);
     free(wenv);
     return r;
@@ -420,20 +441,25 @@ int CDECL _dupenv_s(char **buffer, size_t *numberOfElements, const char *varname
     if (!MSVCRT_CHECK_PMT(buffer != NULL)) return EINVAL;
     if (!MSVCRT_CHECK_PMT(varname != NULL)) return EINVAL;
 
+    _lock(_ENV_LOCK);
     if (!(e = getenv(varname)))
     {
+        _unlock(_ENV_LOCK);
         *buffer = NULL;
         if (numberOfElements) *numberOfElements = 0;
         return 0;
     }
 
     sz = strlen(e) + 1;
-    if (!(*buffer = malloc(sz)))
+    *buffer = malloc(sz);
+    if (*buffer) strcpy(*buffer, e);
+    _unlock(_ENV_LOCK);
+
+    if (!*buffer)
     {
         if (numberOfElements) *numberOfElements = 0;
         return *_errno() = ENOMEM;
     }
-    strcpy(*buffer, e);
     if (numberOfElements) *numberOfElements = sz;
     return 0;
 }
@@ -450,20 +476,25 @@ int CDECL _wdupenv_s(wchar_t **buffer, size_t *numberOfElements,
     if (!MSVCRT_CHECK_PMT(buffer != NULL)) return EINVAL;
     if (!MSVCRT_CHECK_PMT(varname != NULL)) return EINVAL;
 
+    _lock(_ENV_LOCK);
     if (!(e = _wgetenv(varname)))
     {
+        _unlock(_ENV_LOCK);
         *buffer = NULL;
         if (numberOfElements) *numberOfElements = 0;
         return 0;
     }
 
     sz = wcslen(e) + 1;
-    if (!(*buffer = malloc(sz * sizeof(wchar_t))))
+    *buffer = malloc(sz * sizeof(wchar_t));
+    if (*buffer) wcscpy(*buffer, e);
+    _unlock(_ENV_LOCK);
+
+    if (!*buffer)
     {
         if (numberOfElements) *numberOfElements = 0;
         return *_errno() = ENOMEM;
     }
-    wcscpy(*buffer, e);
     if (numberOfElements) *numberOfElements = sz;
     return 0;
 }
@@ -482,12 +513,17 @@ int CDECL getenv_s(size_t *ret_len, char* buffer, size_t len, const char *varnam
     if (!MSVCRT_CHECK_PMT((buffer && len > 0) || (!buffer && !len))) return EINVAL;
     if (buffer) buffer[0] = 0;
 
-    if (!(e = getenv_helper(varname))) return 0;
-    *ret_len = strlen(e) + 1;
-    if (!len) return 0;
-    if (len < *ret_len) return ERANGE;
+    _lock(_ENV_LOCK);
+    e = getenv_helper(varname);
+    if (e)
+    {
+        *ret_len = strlen(e) + 1;
+        if (len >= *ret_len) strcpy(buffer, e);
+    }
+    _unlock(_ENV_LOCK);
 
-    strcpy(buffer, e);
+    if (!e || !len) return 0;
+    if (len < *ret_len) return ERANGE;
     return 0;
 }
 
@@ -504,12 +540,17 @@ int CDECL _wgetenv_s(size_t *ret_len, wchar_t *buffer, size_t len,
     if (!MSVCRT_CHECK_PMT((buffer && len > 0) || (!buffer && !len))) return EINVAL;
     if (buffer) buffer[0] = 0;
 
-    if (!(e = wgetenv_helper(varname))) return 0;
-    *ret_len = wcslen(e) + 1;
-    if (!len) return 0;
-    if (len < *ret_len) return ERANGE;
+    _lock(_ENV_LOCK);
+    e = wgetenv_helper(varname);
+    if (e)
+    {
+        *ret_len = wcslen(e) + 1;
+        if (len >= *ret_len) wcscpy(buffer, e);
+    }
+    _unlock(_ENV_LOCK);
 
-    wcscpy(buffer, e);
+    if (!e || !len) return 0;
+    if (len < *ret_len) return ERANGE;
     return 0;
 }
 
-- 
GitLab

From 70e240949c2a400caf16b24d7b68b9f58ee8ef38 Mon Sep 17 00:00:00 2001
From: Piotr Caban <piotr@codeweavers.com>
Date: Wed, 22 Nov 2023 14:24:28 +0100
Subject: [PATCH] msvcp140: Add codecvt<char16> class stub.

---
 dlls/msvcp140/msvcp140.spec   | 108 +++++++--------
 dlls/msvcp90/locale.c         | 249 ++++++++++++++++++++++++++++++++++
 dlls/msvcp90/msvcp90.h        |   5 +
 dlls/msvcp_win/msvcp_win.spec | 108 +++++++--------
 4 files changed, 362 insertions(+), 108 deletions(-)

diff --git a/dlls/msvcp140/msvcp140.spec b/dlls/msvcp140/msvcp140.spec
index ea2e7798a1d..c04e870eb72 100644
--- a/dlls/msvcp140/msvcp140.spec
+++ b/dlls/msvcp140/msvcp140.spec
@@ -172,15 +172,15 @@
 @ thiscall -arch=i386 ??0?$codecvt@GDU_Mbstatet@@@std@@QAE@I@Z(ptr long) codecvt_short_ctor_refs
 @ cdecl -arch=win64 ??0?$codecvt@GDU_Mbstatet@@@std@@QEAA@AEBV_Locinfo@1@_K@Z(ptr ptr long) codecvt_short_ctor_locinfo
 @ cdecl -arch=win64 ??0?$codecvt@GDU_Mbstatet@@@std@@QEAA@_K@Z(ptr long) codecvt_short_ctor_refs
-@ stub -arch=arm ??0?$codecvt@_SDU_Mbstatet@@@std@@QAA@ABV_Locinfo@1@I@Z
-@ stub -arch=arm ??0?$codecvt@_SDU_Mbstatet@@@std@@QAA@ABV_Locinfo@1@KW4_Codecvt_mode@1@I@Z
-@ stub -arch=arm ??0?$codecvt@_SDU_Mbstatet@@@std@@QAA@I@Z
-@ stub -arch=i386 ??0?$codecvt@_SDU_Mbstatet@@@std@@QAE@ABV_Locinfo@1@I@Z
-@ stub -arch=i386 ??0?$codecvt@_SDU_Mbstatet@@@std@@QAE@ABV_Locinfo@1@KW4_Codecvt_mode@1@I@Z
-@ stub -arch=i386 ??0?$codecvt@_SDU_Mbstatet@@@std@@QAE@I@Z
-@ stub -arch=win64 ??0?$codecvt@_SDU_Mbstatet@@@std@@QEAA@AEBV_Locinfo@1@KW4_Codecvt_mode@1@_K@Z
-@ stub -arch=win64 ??0?$codecvt@_SDU_Mbstatet@@@std@@QEAA@AEBV_Locinfo@1@_K@Z
-@ stub -arch=win64 ??0?$codecvt@_SDU_Mbstatet@@@std@@QEAA@_K@Z
+@ cdecl -arch=arm ??0?$codecvt@_SDU_Mbstatet@@@std@@QAA@ABV_Locinfo@1@I@Z(ptr ptr long) codecvt_char16_ctor_locinfo
+@ cdecl -arch=arm ??0?$codecvt@_SDU_Mbstatet@@@std@@QAA@ABV_Locinfo@1@KW4_Codecvt_mode@1@I@Z(ptr long long long) codecvt_char16_ctor_mode
+@ cdecl -arch=arm ??0?$codecvt@_SDU_Mbstatet@@@std@@QAA@I@Z(ptr long) codecvt_char16_ctor_refs
+@ thiscall -arch=i386 ??0?$codecvt@_SDU_Mbstatet@@@std@@QAE@ABV_Locinfo@1@I@Z(ptr ptr long) codecvt_char16_ctor_locinfo
+@ thiscall -arch=i386 ??0?$codecvt@_SDU_Mbstatet@@@std@@QAE@ABV_Locinfo@1@KW4_Codecvt_mode@1@I@Z(ptr long long long) codecvt_char16_ctor_mode
+@ thiscall -arch=i386 ??0?$codecvt@_SDU_Mbstatet@@@std@@QAE@I@Z(ptr long) codecvt_char16_ctor_refs
+@ cdecl -arch=win64 ??0?$codecvt@_SDU_Mbstatet@@@std@@QEAA@AEBV_Locinfo@1@KW4_Codecvt_mode@1@_K@Z(ptr long long long) codecvt_char16_ctor_mode
+@ cdecl -arch=win64 ??0?$codecvt@_SDU_Mbstatet@@@std@@QEAA@AEBV_Locinfo@1@_K@Z(ptr ptr long) codecvt_char16_ctor_locinfo
+@ cdecl -arch=win64 ??0?$codecvt@_SDU_Mbstatet@@@std@@QEAA@_K@Z(ptr long) codecvt_char16_ctor_refs
 @ cdecl -arch=arm ??0?$codecvt@_UDU_Mbstatet@@@std@@QAA@ABV_Locinfo@1@I@Z(ptr ptr long) codecvt_char32_ctor_locinfo
 @ cdecl -arch=arm ??0?$codecvt@_UDU_Mbstatet@@@std@@QAA@ABV_Locinfo@1@KW4_Codecvt_mode@1@I@Z(ptr long long long) codecvt_char32_ctor_mode
 @ cdecl -arch=arm ??0?$codecvt@_UDU_Mbstatet@@@std@@QAA@I@Z(ptr long) codecvt_char32_ctor_refs
@@ -424,9 +424,9 @@
 @ cdecl -arch=arm ??1?$codecvt@GDU_Mbstatet@@@std@@MAA@XZ(ptr) codecvt_wchar_dtor
 @ thiscall -arch=i386 ??1?$codecvt@GDU_Mbstatet@@@std@@MAE@XZ(ptr) codecvt_wchar_dtor
 @ cdecl -arch=win64 ??1?$codecvt@GDU_Mbstatet@@@std@@MEAA@XZ(ptr) codecvt_wchar_dtor
-@ stub -arch=arm ??1?$codecvt@_SDU_Mbstatet@@@std@@MAA@XZ
-@ stub -arch=i386 ??1?$codecvt@_SDU_Mbstatet@@@std@@MAE@XZ
-@ stub -arch=win64 ??1?$codecvt@_SDU_Mbstatet@@@std@@MEAA@XZ
+@ cdecl -arch=arm ??1?$codecvt@_SDU_Mbstatet@@@std@@MAA@XZ(ptr) codecvt_char16_dtor
+@ thiscall -arch=i386 ??1?$codecvt@_SDU_Mbstatet@@@std@@MAE@XZ(ptr) codecvt_char16_dtor
+@ cdecl -arch=win64 ??1?$codecvt@_SDU_Mbstatet@@@std@@MEAA@XZ(ptr) codecvt_char16_dtor
 @ cdecl -arch=arm ??1?$codecvt@_UDU_Mbstatet@@@std@@MAA@XZ(ptr) codecvt_char32_dtor
 @ thiscall -arch=i386 ??1?$codecvt@_UDU_Mbstatet@@@std@@MAE@XZ(ptr) codecvt_char32_dtor
 @ cdecl -arch=win64 ??1?$codecvt@_UDU_Mbstatet@@@std@@MEAA@XZ(ptr) codecvt_char32_dtor
@@ -936,7 +936,7 @@
 @ extern ??_7?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@6B@ basic_streambuf_wchar_vtable
 @ extern ??_7?$codecvt@DDU_Mbstatet@@@std@@6B@ codecvt_char_vtable
 @ extern ??_7?$codecvt@GDU_Mbstatet@@@std@@6B@ codecvt_short_vtable
-# extern ??_7?$codecvt@_SDU_Mbstatet@@@std@@6B@
+@ extern ??_7?$codecvt@_SDU_Mbstatet@@@std@@6B@ codecvt_char16_vtable
 @ extern ??_7?$codecvt@_UDU_Mbstatet@@@std@@6B@ codecvt_char32_vtable
 @ extern ??_7?$codecvt@_WDU_Mbstatet@@@std@@6B@ codecvt_wchar_vtable
 @ extern ??_7?$ctype@D@std@@6B@ ctype_char_vtable
@@ -1006,9 +1006,9 @@
 @ cdecl -arch=arm ??_F?$codecvt@GDU_Mbstatet@@@std@@QAAXXZ(ptr) codecvt_short_ctor
 @ thiscall -arch=i386 ??_F?$codecvt@GDU_Mbstatet@@@std@@QAEXXZ(ptr) codecvt_short_ctor
 @ cdecl -arch=win64 ??_F?$codecvt@GDU_Mbstatet@@@std@@QEAAXXZ(ptr) codecvt_short_ctor
-@ stub -arch=arm ??_F?$codecvt@_SDU_Mbstatet@@@std@@QAAXXZ
-@ stub -arch=i386 ??_F?$codecvt@_SDU_Mbstatet@@@std@@QAEXXZ
-@ stub -arch=win64 ??_F?$codecvt@_SDU_Mbstatet@@@std@@QEAAXXZ
+@ cdecl -arch=arm ??_F?$codecvt@_SDU_Mbstatet@@@std@@QAAXXZ(ptr) codecvt_char16_ctor
+@ thiscall -arch=i386 ??_F?$codecvt@_SDU_Mbstatet@@@std@@QAEXXZ(ptr) codecvt_char16_ctor
+@ cdecl -arch=win64 ??_F?$codecvt@_SDU_Mbstatet@@@std@@QEAAXXZ(ptr) codecvt_char16_ctor
 @ cdecl -arch=arm ??_F?$codecvt@_UDU_Mbstatet@@@std@@QAAXXZ(ptr) codecvt_char32_ctor
 @ thiscall -arch=i386 ??_F?$codecvt@_UDU_Mbstatet@@@std@@QAEXXZ(ptr) codecvt_char32_ctor
 @ cdecl -arch=win64 ??_F?$codecvt@_UDU_Mbstatet@@@std@@QEAAXXZ(ptr) codecvt_char32_ctor
@@ -1173,8 +1173,8 @@
 @ cdecl -arch=win64 ?_Getcat@?$codecvt@DDU_Mbstatet@@@std@@SA_KPEAPEBVfacet@locale@2@PEBV42@@Z(ptr ptr) codecvt_char__Getcat
 @ cdecl -arch=win32 ?_Getcat@?$codecvt@GDU_Mbstatet@@@std@@SAIPAPBVfacet@locale@2@PBV42@@Z(ptr ptr) codecvt_short__Getcat
 @ cdecl -arch=win64 ?_Getcat@?$codecvt@GDU_Mbstatet@@@std@@SA_KPEAPEBVfacet@locale@2@PEBV42@@Z(ptr ptr) codecvt_short__Getcat
-@ stub -arch=win32 ?_Getcat@?$codecvt@_SDU_Mbstatet@@@std@@SAIPAPBVfacet@locale@2@PBV42@@Z
-@ stub -arch=win64 ?_Getcat@?$codecvt@_SDU_Mbstatet@@@std@@SA_KPEAPEBVfacet@locale@2@PEBV42@@Z
+@ cdecl -arch=win32 ?_Getcat@?$codecvt@_SDU_Mbstatet@@@std@@SAIPAPBVfacet@locale@2@PBV42@@Z(ptr ptr) codecvt_char16__Getcat
+@ cdecl -arch=win64 ?_Getcat@?$codecvt@_SDU_Mbstatet@@@std@@SA_KPEAPEBVfacet@locale@2@PEBV42@@Z(ptr ptr) codecvt_char16__Getcat
 @ cdecl -arch=win32 ?_Getcat@?$codecvt@_UDU_Mbstatet@@@std@@SAIPAPBVfacet@locale@2@PBV42@@Z(ptr ptr) codecvt_char32__Getcat
 @ cdecl -arch=win64 ?_Getcat@?$codecvt@_UDU_Mbstatet@@@std@@SA_KPEAPEBVfacet@locale@2@PEBV42@@Z(ptr ptr) codecvt_char32__Getcat
 @ cdecl -arch=win32 ?_Getcat@?$codecvt@_WDU_Mbstatet@@@std@@SAIPAPBVfacet@locale@2@PBV42@@Z(ptr ptr) codecvt_wchar__Getcat
@@ -1353,9 +1353,9 @@
 @ cdecl -arch=arm ?_Init@?$codecvt@GDU_Mbstatet@@@std@@IAAXABV_Locinfo@2@@Z(ptr ptr) codecvt_wchar__Init
 @ thiscall -arch=i386 ?_Init@?$codecvt@GDU_Mbstatet@@@std@@IAEXABV_Locinfo@2@@Z(ptr ptr) codecvt_wchar__Init
 @ cdecl -arch=win64 ?_Init@?$codecvt@GDU_Mbstatet@@@std@@IEAAXAEBV_Locinfo@2@@Z(ptr ptr) codecvt_wchar__Init
-@ stub -arch=arm ?_Init@?$codecvt@_SDU_Mbstatet@@@std@@IAAXABV_Locinfo@2@@Z
-@ stub -arch=i386 ?_Init@?$codecvt@_SDU_Mbstatet@@@std@@IAEXABV_Locinfo@2@@Z
-@ stub -arch=win64 ?_Init@?$codecvt@_SDU_Mbstatet@@@std@@IEAAXAEBV_Locinfo@2@@Z
+@ cdecl -arch=arm ?_Init@?$codecvt@_SDU_Mbstatet@@@std@@IAAXABV_Locinfo@2@@Z(ptr ptr) codecvt_char16__Init
+@ thiscall -arch=i386 ?_Init@?$codecvt@_SDU_Mbstatet@@@std@@IAEXABV_Locinfo@2@@Z(ptr ptr) codecvt_char16__Init
+@ cdecl -arch=win64 ?_Init@?$codecvt@_SDU_Mbstatet@@@std@@IEAAXAEBV_Locinfo@2@@Z(ptr ptr) codecvt_char16__Init
 @ cdecl -arch=arm ?_Init@?$codecvt@_UDU_Mbstatet@@@std@@IAAXABV_Locinfo@2@@Z(ptr ptr) codecvt_char32__Init
 @ thiscall -arch=i386 ?_Init@?$codecvt@_UDU_Mbstatet@@@std@@IAEXABV_Locinfo@2@@Z(ptr ptr) codecvt_char32__Init
 @ cdecl -arch=win64 ?_Init@?$codecvt@_UDU_Mbstatet@@@std@@IEAAXAEBV_Locinfo@2@@Z(ptr ptr) codecvt_char32__Init
@@ -1786,9 +1786,9 @@
 @ cdecl -arch=arm ?do_always_noconv@?$codecvt@GDU_Mbstatet@@@std@@MBA_NXZ(ptr) codecvt_wchar_do_always_noconv
 @ thiscall -arch=i386 ?do_always_noconv@?$codecvt@GDU_Mbstatet@@@std@@MBE_NXZ(ptr) codecvt_wchar_do_always_noconv
 @ cdecl -arch=win64 ?do_always_noconv@?$codecvt@GDU_Mbstatet@@@std@@MEBA_NXZ(ptr) codecvt_wchar_do_always_noconv
-@ stub -arch=arm ?do_always_noconv@?$codecvt@_SDU_Mbstatet@@@std@@MBA_NXZ
-@ stub -arch=i386 ?do_always_noconv@?$codecvt@_SDU_Mbstatet@@@std@@MBE_NXZ
-@ stub -arch=win64 ?do_always_noconv@?$codecvt@_SDU_Mbstatet@@@std@@MEBA_NXZ
+@ cdecl -arch=arm ?do_always_noconv@?$codecvt@_SDU_Mbstatet@@@std@@MBA_NXZ(ptr) codecvt_char16_do_always_noconv
+@ thiscall -arch=i386 ?do_always_noconv@?$codecvt@_SDU_Mbstatet@@@std@@MBE_NXZ(ptr) codecvt_char16_do_always_noconv
+@ cdecl -arch=win64 ?do_always_noconv@?$codecvt@_SDU_Mbstatet@@@std@@MEBA_NXZ(ptr) codecvt_char16_do_always_noconv
 @ cdecl -arch=arm ?do_always_noconv@?$codecvt@_UDU_Mbstatet@@@std@@MBA_NXZ(ptr) codecvt_char32_do_always_noconv
 @ thiscall -arch=i386 ?do_always_noconv@?$codecvt@_UDU_Mbstatet@@@std@@MBE_NXZ(ptr) codecvt_char32_do_always_noconv
 @ cdecl -arch=win64 ?do_always_noconv@?$codecvt@_UDU_Mbstatet@@@std@@MEBA_NXZ(ptr) codecvt_char32_do_always_noconv
@@ -1810,9 +1810,9 @@
 @ cdecl -arch=arm ?do_encoding@?$codecvt@GDU_Mbstatet@@@std@@MBAHXZ(ptr) codecvt_wchar_do_encoding
 @ thiscall -arch=i386 ?do_encoding@?$codecvt@GDU_Mbstatet@@@std@@MBEHXZ(ptr) codecvt_wchar_do_encoding
 @ cdecl -arch=win64 ?do_encoding@?$codecvt@GDU_Mbstatet@@@std@@MEBAHXZ(ptr) codecvt_wchar_do_encoding
-@ stub -arch=arm ?do_encoding@?$codecvt@_SDU_Mbstatet@@@std@@MBAHXZ
-@ stub -arch=i386 ?do_encoding@?$codecvt@_SDU_Mbstatet@@@std@@MBEHXZ
-@ stub -arch=win64 ?do_encoding@?$codecvt@_SDU_Mbstatet@@@std@@MEBAHXZ
+@ cdecl -arch=arm ?do_encoding@?$codecvt@_SDU_Mbstatet@@@std@@MBAHXZ(ptr) codecvt_char16_do_encoding
+@ thiscall -arch=i386 ?do_encoding@?$codecvt@_SDU_Mbstatet@@@std@@MBEHXZ(ptr) codecvt_char16_do_encoding
+@ cdecl -arch=win64 ?do_encoding@?$codecvt@_SDU_Mbstatet@@@std@@MEBAHXZ(ptr) codecvt_char16_do_encoding
 @ cdecl -arch=arm ?do_encoding@?$codecvt@_UDU_Mbstatet@@@std@@MBAHXZ(ptr) codecvt_char32_do_encoding
 @ thiscall -arch=i386 ?do_encoding@?$codecvt@_UDU_Mbstatet@@@std@@MBEHXZ(ptr) codecvt_char32_do_encoding
 @ cdecl -arch=win64 ?do_encoding@?$codecvt@_UDU_Mbstatet@@@std@@MEBAHXZ(ptr) codecvt_char32_do_encoding
@@ -1981,9 +1981,9 @@
 @ cdecl -arch=arm ?do_in@?$codecvt@GDU_Mbstatet@@@std@@MBAHAAU_Mbstatet@@PBD1AAPBDPAG3AAPAG@Z(ptr ptr str str ptr ptr ptr ptr) codecvt_wchar_do_in
 @ thiscall -arch=i386 ?do_in@?$codecvt@GDU_Mbstatet@@@std@@MBEHAAU_Mbstatet@@PBD1AAPBDPAG3AAPAG@Z(ptr ptr str str ptr ptr ptr ptr) codecvt_wchar_do_in
 @ cdecl -arch=win64 ?do_in@?$codecvt@GDU_Mbstatet@@@std@@MEBAHAEAU_Mbstatet@@PEBD1AEAPEBDPEAG3AEAPEAG@Z(ptr ptr str str ptr ptr ptr ptr) codecvt_wchar_do_in
-@ stub -arch=arm ?do_in@?$codecvt@_SDU_Mbstatet@@@std@@MBAHAAU_Mbstatet@@PBD1AAPBDPA_S3AAPA_S@Z
-@ stub -arch=i386 ?do_in@?$codecvt@_SDU_Mbstatet@@@std@@MBEHAAU_Mbstatet@@PBD1AAPBDPA_S3AAPA_S@Z
-@ stub -arch=win64 ?do_in@?$codecvt@_SDU_Mbstatet@@@std@@MEBAHAEAU_Mbstatet@@PEBD1AEAPEBDPEA_S3AEAPEA_S@Z
+@ cdecl -arch=arm ?do_in@?$codecvt@_SDU_Mbstatet@@@std@@MBAHAAU_Mbstatet@@PBD1AAPBDPA_S3AAPA_S@Z(ptr ptr str str ptr ptr ptr ptr) codecvt_char16_do_in
+@ thiscall -arch=i386 ?do_in@?$codecvt@_SDU_Mbstatet@@@std@@MBEHAAU_Mbstatet@@PBD1AAPBDPA_S3AAPA_S@Z(ptr ptr str str ptr ptr ptr ptr) codecvt_char16_do_in
+@ cdecl -arch=win64 ?do_in@?$codecvt@_SDU_Mbstatet@@@std@@MEBAHAEAU_Mbstatet@@PEBD1AEAPEBDPEA_S3AEAPEA_S@Z(ptr ptr str str ptr ptr ptr ptr) codecvt_char16_do_in
 @ cdecl -arch=arm ?do_in@?$codecvt@_UDU_Mbstatet@@@std@@MBAHAAU_Mbstatet@@PBD1AAPBDPA_U3AAPA_U@Z(ptr ptr str str ptr ptr ptr ptr) codecvt_char32_do_in
 @ thiscall -arch=i386 ?do_in@?$codecvt@_UDU_Mbstatet@@@std@@MBEHAAU_Mbstatet@@PBD1AAPBDPA_U3AAPA_U@Z(ptr ptr str str ptr ptr ptr ptr) codecvt_char32_do_in
 @ cdecl -arch=win64 ?do_in@?$codecvt@_UDU_Mbstatet@@@std@@MEBAHAEAU_Mbstatet@@PEBD1AEAPEBDPEA_U3AEAPEA_U@Z(ptr ptr str str ptr ptr ptr ptr) codecvt_char32_do_in
@@ -2008,9 +2008,9 @@
 @ cdecl -arch=arm ?do_length@?$codecvt@GDU_Mbstatet@@@std@@MBAHAAU_Mbstatet@@PBD1I@Z(ptr ptr str str long) codecvt_wchar_do_length
 @ thiscall -arch=i386 ?do_length@?$codecvt@GDU_Mbstatet@@@std@@MBEHAAU_Mbstatet@@PBD1I@Z(ptr ptr str str long) codecvt_wchar_do_length
 @ cdecl -arch=win64 ?do_length@?$codecvt@GDU_Mbstatet@@@std@@MEBAHAEAU_Mbstatet@@PEBD1_K@Z(ptr ptr str str long) codecvt_wchar_do_length
-@ stub -arch=arm ?do_length@?$codecvt@_SDU_Mbstatet@@@std@@MBAHAAU_Mbstatet@@PBD1I@Z
-@ stub -arch=i386 ?do_length@?$codecvt@_SDU_Mbstatet@@@std@@MBEHAAU_Mbstatet@@PBD1I@Z
-@ stub -arch=win64 ?do_length@?$codecvt@_SDU_Mbstatet@@@std@@MEBAHAEAU_Mbstatet@@PEBD1_K@Z
+@ cdecl -arch=arm ?do_length@?$codecvt@_SDU_Mbstatet@@@std@@MBAHAAU_Mbstatet@@PBD1I@Z(ptr ptr str str long) codecvt_char16_do_length
+@ thiscall -arch=i386 ?do_length@?$codecvt@_SDU_Mbstatet@@@std@@MBEHAAU_Mbstatet@@PBD1I@Z(ptr ptr str str long) codecvt_char16_do_length
+@ cdecl -arch=win64 ?do_length@?$codecvt@_SDU_Mbstatet@@@std@@MEBAHAEAU_Mbstatet@@PEBD1_K@Z(ptr ptr str str long) codecvt_char16_do_length
 @ cdecl -arch=arm ?do_length@?$codecvt@_UDU_Mbstatet@@@std@@MBAHAAU_Mbstatet@@PBD1I@Z(ptr ptr str str long) codecvt_char32_do_length
 @ thiscall -arch=i386 ?do_length@?$codecvt@_UDU_Mbstatet@@@std@@MBEHAAU_Mbstatet@@PBD1I@Z(ptr ptr str str long) codecvt_char32_do_length
 @ cdecl -arch=win64 ?do_length@?$codecvt@_UDU_Mbstatet@@@std@@MEBAHAEAU_Mbstatet@@PEBD1_K@Z(ptr ptr str str long) codecvt_char32_do_length
@@ -2020,9 +2020,9 @@
 @ cdecl -arch=arm ?do_max_length@?$codecvt@GDU_Mbstatet@@@std@@MBAHXZ(ptr) codecvt_wchar_do_max_length
 @ thiscall -arch=i386 ?do_max_length@?$codecvt@GDU_Mbstatet@@@std@@MBEHXZ(ptr) codecvt_wchar_do_max_length
 @ cdecl -arch=win64 ?do_max_length@?$codecvt@GDU_Mbstatet@@@std@@MEBAHXZ(ptr) codecvt_wchar_do_max_length
-@ stub -arch=arm ?do_max_length@?$codecvt@_SDU_Mbstatet@@@std@@MBAHXZ
-@ stub -arch=i386 ?do_max_length@?$codecvt@_SDU_Mbstatet@@@std@@MBEHXZ
-@ stub -arch=win64 ?do_max_length@?$codecvt@_SDU_Mbstatet@@@std@@MEBAHXZ
+@ cdecl -arch=arm ?do_max_length@?$codecvt@_SDU_Mbstatet@@@std@@MBAHXZ(ptr) codecvt_char16_do_max_length
+@ thiscall -arch=i386 ?do_max_length@?$codecvt@_SDU_Mbstatet@@@std@@MBEHXZ(ptr) codecvt_char16_do_max_length
+@ cdecl -arch=win64 ?do_max_length@?$codecvt@_SDU_Mbstatet@@@std@@MEBAHXZ(ptr) codecvt_char16_do_max_length
 @ cdecl -arch=arm ?do_max_length@?$codecvt@_UDU_Mbstatet@@@std@@MBAHXZ(ptr) codecvt_char32_do_max_length
 @ thiscall -arch=i386 ?do_max_length@?$codecvt@_UDU_Mbstatet@@@std@@MBEHXZ(ptr) codecvt_char32_do_max_length
 @ cdecl -arch=win64 ?do_max_length@?$codecvt@_UDU_Mbstatet@@@std@@MEBAHXZ(ptr) codecvt_char32_do_max_length
@@ -2056,9 +2056,9 @@
 @ cdecl -arch=arm ?do_out@?$codecvt@GDU_Mbstatet@@@std@@MBAHAAU_Mbstatet@@PBG1AAPBGPAD3AAPAD@Z(ptr ptr ptr ptr ptr ptr ptr ptr) codecvt_wchar_do_out
 @ thiscall -arch=i386 ?do_out@?$codecvt@GDU_Mbstatet@@@std@@MBEHAAU_Mbstatet@@PBG1AAPBGPAD3AAPAD@Z(ptr ptr ptr ptr ptr ptr ptr ptr) codecvt_wchar_do_out
 @ cdecl -arch=win64 ?do_out@?$codecvt@GDU_Mbstatet@@@std@@MEBAHAEAU_Mbstatet@@PEBG1AEAPEBGPEAD3AEAPEAD@Z(ptr ptr ptr ptr ptr ptr ptr ptr) codecvt_wchar_do_out
-@ stub -arch=arm ?do_out@?$codecvt@_SDU_Mbstatet@@@std@@MBAHAAU_Mbstatet@@PB_S1AAPB_SPAD3AAPAD@Z
-@ stub -arch=i386 ?do_out@?$codecvt@_SDU_Mbstatet@@@std@@MBEHAAU_Mbstatet@@PB_S1AAPB_SPAD3AAPAD@Z
-@ stub -arch=win64 ?do_out@?$codecvt@_SDU_Mbstatet@@@std@@MEBAHAEAU_Mbstatet@@PEB_S1AEAPEB_SPEAD3AEAPEAD@Z
+@ cdecl -arch=arm ?do_out@?$codecvt@_SDU_Mbstatet@@@std@@MBAHAAU_Mbstatet@@PB_S1AAPB_SPAD3AAPAD@Z(ptr ptr ptr ptr ptr ptr ptr ptr) codecvt_char16_do_out
+@ thiscall -arch=i386 ?do_out@?$codecvt@_SDU_Mbstatet@@@std@@MBEHAAU_Mbstatet@@PB_S1AAPB_SPAD3AAPAD@Z(ptr ptr ptr ptr ptr ptr ptr ptr) codecvt_char16_do_out
+@ cdecl -arch=win64 ?do_out@?$codecvt@_SDU_Mbstatet@@@std@@MEBAHAEAU_Mbstatet@@PEB_S1AEAPEB_SPEAD3AEAPEAD@Z(ptr ptr ptr ptr ptr ptr ptr ptr) codecvt_char16_do_out
 @ cdecl -arch=arm ?do_out@?$codecvt@_UDU_Mbstatet@@@std@@MBAHAAU_Mbstatet@@PB_U1AAPB_UPAD3AAPAD@Z(ptr ptr ptr ptr ptr ptr ptr ptr) codecvt_char32_do_out
 @ thiscall -arch=i386 ?do_out@?$codecvt@_UDU_Mbstatet@@@std@@MBEHAAU_Mbstatet@@PB_U1AAPB_UPAD3AAPAD@Z(ptr ptr ptr ptr ptr ptr ptr ptr) codecvt_char32_do_out
 @ cdecl -arch=win64 ?do_out@?$codecvt@_UDU_Mbstatet@@@std@@MEBAHAEAU_Mbstatet@@PEB_U1AEAPEB_UPEAD3AEAPEAD@Z(ptr ptr ptr ptr ptr ptr ptr ptr) codecvt_char32_do_out
@@ -2200,9 +2200,9 @@
 @ cdecl -arch=arm ?do_unshift@?$codecvt@GDU_Mbstatet@@@std@@MBAHAAU_Mbstatet@@PAD1AAPAD@Z(ptr ptr ptr ptr ptr) codecvt_wchar_do_unshift
 @ thiscall -arch=i386 ?do_unshift@?$codecvt@GDU_Mbstatet@@@std@@MBEHAAU_Mbstatet@@PAD1AAPAD@Z(ptr ptr ptr ptr ptr) codecvt_wchar_do_unshift
 @ cdecl -arch=win64 ?do_unshift@?$codecvt@GDU_Mbstatet@@@std@@MEBAHAEAU_Mbstatet@@PEAD1AEAPEAD@Z(ptr ptr ptr ptr ptr) codecvt_wchar_do_unshift
-@ stub -arch=arm ?do_unshift@?$codecvt@_SDU_Mbstatet@@@std@@MBAHAAU_Mbstatet@@PAD1AAPAD@Z
-@ stub -arch=i386 ?do_unshift@?$codecvt@_SDU_Mbstatet@@@std@@MBEHAAU_Mbstatet@@PAD1AAPAD@Z
-@ stub -arch=win64 ?do_unshift@?$codecvt@_SDU_Mbstatet@@@std@@MEBAHAEAU_Mbstatet@@PEAD1AEAPEAD@Z
+@ cdecl -arch=arm ?do_unshift@?$codecvt@_SDU_Mbstatet@@@std@@MBAHAAU_Mbstatet@@PAD1AAPAD@Z(ptr ptr ptr ptr ptr) codecvt_char16_do_unshift
+@ thiscall -arch=i386 ?do_unshift@?$codecvt@_SDU_Mbstatet@@@std@@MBEHAAU_Mbstatet@@PAD1AAPAD@Z(ptr ptr ptr ptr ptr) codecvt_char16_do_unshift
+@ cdecl -arch=win64 ?do_unshift@?$codecvt@_SDU_Mbstatet@@@std@@MEBAHAEAU_Mbstatet@@PEAD1AEAPEAD@Z(ptr ptr ptr ptr ptr) codecvt_char16_do_unshift
 @ cdecl -arch=arm ?do_unshift@?$codecvt@_UDU_Mbstatet@@@std@@MBAHAAU_Mbstatet@@PAD1AAPAD@Z(ptr ptr ptr ptr ptr) codecvt_char32_do_unshift
 @ thiscall -arch=i386 ?do_unshift@?$codecvt@_UDU_Mbstatet@@@std@@MBEHAAU_Mbstatet@@PAD1AAPAD@Z(ptr ptr ptr ptr ptr) codecvt_char32_do_unshift
 @ cdecl -arch=win64 ?do_unshift@?$codecvt@_UDU_Mbstatet@@@std@@MEBAHAEAU_Mbstatet@@PEAD1AEAPEAD@Z(ptr ptr ptr ptr ptr) codecvt_char32_do_unshift
@@ -2669,9 +2669,9 @@
 @ cdecl -arch=arm ?in@?$codecvt@GDU_Mbstatet@@@std@@QBAHAAU_Mbstatet@@PBD1AAPBDPAG3AAPAG@Z(ptr ptr str str ptr ptr ptr ptr) codecvt_wchar_in
 @ thiscall -arch=i386 ?in@?$codecvt@GDU_Mbstatet@@@std@@QBEHAAU_Mbstatet@@PBD1AAPBDPAG3AAPAG@Z(ptr ptr str str ptr ptr ptr ptr) codecvt_wchar_in
 @ cdecl -arch=win64 ?in@?$codecvt@GDU_Mbstatet@@@std@@QEBAHAEAU_Mbstatet@@PEBD1AEAPEBDPEAG3AEAPEAG@Z(ptr ptr str str ptr ptr ptr ptr) codecvt_wchar_in
-@ stub -arch=arm ?in@?$codecvt@_SDU_Mbstatet@@@std@@QBAHAAU_Mbstatet@@PBD1AAPBDPA_S3AAPA_S@Z
-@ stub -arch=i386 ?in@?$codecvt@_SDU_Mbstatet@@@std@@QBEHAAU_Mbstatet@@PBD1AAPBDPA_S3AAPA_S@Z
-@ stub -arch=win64 ?in@?$codecvt@_SDU_Mbstatet@@@std@@QEBAHAEAU_Mbstatet@@PEBD1AEAPEBDPEA_S3AEAPEA_S@Z
+@ cdecl -arch=arm ?in@?$codecvt@_SDU_Mbstatet@@@std@@QBAHAAU_Mbstatet@@PBD1AAPBDPA_S3AAPA_S@Z(ptr ptr str str ptr ptr ptr ptr) codecvt_char16_in
+@ thiscall -arch=i386 ?in@?$codecvt@_SDU_Mbstatet@@@std@@QBEHAAU_Mbstatet@@PBD1AAPBDPA_S3AAPA_S@Z(ptr ptr str str ptr ptr ptr ptr) codecvt_char16_in
+@ cdecl -arch=win64 ?in@?$codecvt@_SDU_Mbstatet@@@std@@QEBAHAEAU_Mbstatet@@PEBD1AEAPEBDPEA_S3AEAPEA_S@Z(ptr ptr str str ptr ptr ptr ptr) codecvt_char16_in
 @ cdecl -arch=arm ?in@?$codecvt@_UDU_Mbstatet@@@std@@QBAHAAU_Mbstatet@@PBD1AAPBDPA_U3AAPA_U@Z(ptr ptr str str ptr ptr ptr ptr) codecvt_char32_in
 @ thiscall -arch=i386 ?in@?$codecvt@_UDU_Mbstatet@@@std@@QBEHAAU_Mbstatet@@PBD1AAPBDPA_U3AAPA_U@Z(ptr ptr str str ptr ptr ptr ptr) codecvt_char32_in
 @ cdecl -arch=win64 ?in@?$codecvt@_UDU_Mbstatet@@@std@@QEBAHAEAU_Mbstatet@@PEBD1AEAPEBDPEA_U3AEAPEA_U@Z(ptr ptr str str ptr ptr ptr ptr) codecvt_char32_in
@@ -2747,9 +2747,9 @@
 @ cdecl -arch=arm ?length@?$codecvt@GDU_Mbstatet@@@std@@QBAHAAU_Mbstatet@@PBD1I@Z(ptr ptr str str long) codecvt_wchar_length
 @ thiscall -arch=i386 ?length@?$codecvt@GDU_Mbstatet@@@std@@QBEHAAU_Mbstatet@@PBD1I@Z(ptr ptr str str long) codecvt_wchar_length
 @ cdecl -arch=win64 ?length@?$codecvt@GDU_Mbstatet@@@std@@QEBAHAEAU_Mbstatet@@PEBD1_K@Z(ptr ptr str str long) codecvt_wchar_length
-@ stub -arch=arm ?length@?$codecvt@_SDU_Mbstatet@@@std@@QBAHAAU_Mbstatet@@PBD1I@Z
-@ stub -arch=i386 ?length@?$codecvt@_SDU_Mbstatet@@@std@@QBEHAAU_Mbstatet@@PBD1I@Z
-@ stub -arch=win64 ?length@?$codecvt@_SDU_Mbstatet@@@std@@QEBAHAEAU_Mbstatet@@PEBD1_K@Z
+@ cdecl -arch=arm ?length@?$codecvt@_SDU_Mbstatet@@@std@@QBAHAAU_Mbstatet@@PBD1I@Z(ptr ptr str str long) codecvt_char16_length
+@ thiscall -arch=i386 ?length@?$codecvt@_SDU_Mbstatet@@@std@@QBEHAAU_Mbstatet@@PBD1I@Z(ptr ptr str str long) codecvt_char16_length
+@ cdecl -arch=win64 ?length@?$codecvt@_SDU_Mbstatet@@@std@@QEBAHAEAU_Mbstatet@@PEBD1_K@Z(ptr ptr str str long) codecvt_char16_length
 @ cdecl -arch=arm ?length@?$codecvt@_UDU_Mbstatet@@@std@@QBAHAAU_Mbstatet@@PBD1I@Z(ptr ptr str str long) codecvt_char32_length
 @ thiscall -arch=i386 ?length@?$codecvt@_UDU_Mbstatet@@@std@@QBEHAAU_Mbstatet@@PBD1I@Z(ptr ptr str str long) codecvt_char32_length
 @ cdecl -arch=win64 ?length@?$codecvt@_UDU_Mbstatet@@@std@@QEBAHAEAU_Mbstatet@@PEBD1_K@Z(ptr ptr str str long) codecvt_char32_length
@@ -2828,9 +2828,9 @@
 @ cdecl -arch=arm ?out@?$codecvt@GDU_Mbstatet@@@std@@QBAHAAU_Mbstatet@@PBG1AAPBGPAD3AAPAD@Z(ptr ptr ptr ptr ptr ptr ptr ptr) codecvt_wchar_out
 @ thiscall -arch=i386 ?out@?$codecvt@GDU_Mbstatet@@@std@@QBEHAAU_Mbstatet@@PBG1AAPBGPAD3AAPAD@Z(ptr ptr ptr ptr ptr ptr ptr ptr) codecvt_wchar_out
 @ cdecl -arch=win64 ?out@?$codecvt@GDU_Mbstatet@@@std@@QEBAHAEAU_Mbstatet@@PEBG1AEAPEBGPEAD3AEAPEAD@Z(ptr ptr ptr ptr ptr ptr ptr ptr) codecvt_wchar_out
-@ stub -arch=arm ?out@?$codecvt@_SDU_Mbstatet@@@std@@QBAHAAU_Mbstatet@@PB_S1AAPB_SPAD3AAPAD@Z
-@ stub -arch=i386 ?out@?$codecvt@_SDU_Mbstatet@@@std@@QBEHAAU_Mbstatet@@PB_S1AAPB_SPAD3AAPAD@Z
-@ stub -arch=win64 ?out@?$codecvt@_SDU_Mbstatet@@@std@@QEBAHAEAU_Mbstatet@@PEB_S1AEAPEB_SPEAD3AEAPEAD@Z
+@ cdecl -arch=arm ?out@?$codecvt@_SDU_Mbstatet@@@std@@QBAHAAU_Mbstatet@@PB_S1AAPB_SPAD3AAPAD@Z(ptr ptr ptr ptr ptr ptr ptr ptr) codecvt_char16_out
+@ thiscall -arch=i386 ?out@?$codecvt@_SDU_Mbstatet@@@std@@QBEHAAU_Mbstatet@@PB_S1AAPB_SPAD3AAPAD@Z(ptr ptr ptr ptr ptr ptr ptr ptr) codecvt_char16_out
+@ cdecl -arch=win64 ?out@?$codecvt@_SDU_Mbstatet@@@std@@QEBAHAEAU_Mbstatet@@PEB_S1AEAPEB_SPEAD3AEAPEAD@Z(ptr ptr ptr ptr ptr ptr ptr ptr) codecvt_char16_out
 @ cdecl -arch=arm ?out@?$codecvt@_UDU_Mbstatet@@@std@@QBAHAAU_Mbstatet@@PB_U1AAPB_UPAD3AAPAD@Z(ptr ptr ptr ptr ptr ptr ptr ptr) codecvt_char32_out
 @ thiscall -arch=i386 ?out@?$codecvt@_UDU_Mbstatet@@@std@@QBEHAAU_Mbstatet@@PB_U1AAPB_UPAD3AAPAD@Z(ptr ptr ptr ptr ptr ptr ptr ptr) codecvt_char32_out
 @ cdecl -arch=win64 ?out@?$codecvt@_UDU_Mbstatet@@@std@@QEBAHAEAU_Mbstatet@@PEB_U1AEAPEB_UPEAD3AEAPEAD@Z(ptr ptr ptr ptr ptr ptr ptr ptr) codecvt_char32_out
@@ -3541,9 +3541,9 @@
 @ cdecl -arch=arm ?unshift@?$codecvt@GDU_Mbstatet@@@std@@QBAHAAU_Mbstatet@@PAD1AAPAD@Z(ptr ptr ptr ptr ptr) codecvt_wchar_unshift
 @ thiscall -arch=i386 ?unshift@?$codecvt@GDU_Mbstatet@@@std@@QBEHAAU_Mbstatet@@PAD1AAPAD@Z(ptr ptr ptr ptr ptr) codecvt_wchar_unshift
 @ cdecl -arch=win64 ?unshift@?$codecvt@GDU_Mbstatet@@@std@@QEBAHAEAU_Mbstatet@@PEAD1AEAPEAD@Z(ptr ptr ptr ptr ptr) codecvt_wchar_unshift
-@ stub -arch=arm ?unshift@?$codecvt@_SDU_Mbstatet@@@std@@QBAHAAU_Mbstatet@@PAD1AAPAD@Z
-@ stub -arch=i386 ?unshift@?$codecvt@_SDU_Mbstatet@@@std@@QBEHAAU_Mbstatet@@PAD1AAPAD@Z
-@ stub -arch=win64 ?unshift@?$codecvt@_SDU_Mbstatet@@@std@@QEBAHAEAU_Mbstatet@@PEAD1AEAPEAD@Z
+@ cdecl -arch=arm ?unshift@?$codecvt@_SDU_Mbstatet@@@std@@QBAHAAU_Mbstatet@@PAD1AAPAD@Z(ptr ptr ptr ptr ptr) codecvt_char16_unshift
+@ thiscall -arch=i386 ?unshift@?$codecvt@_SDU_Mbstatet@@@std@@QBEHAAU_Mbstatet@@PAD1AAPAD@Z(ptr ptr ptr ptr ptr) codecvt_char16_unshift
+@ cdecl -arch=win64 ?unshift@?$codecvt@_SDU_Mbstatet@@@std@@QEBAHAEAU_Mbstatet@@PEAD1AEAPEAD@Z(ptr ptr ptr ptr ptr) codecvt_char16_unshift
 @ cdecl -arch=arm ?unshift@?$codecvt@_UDU_Mbstatet@@@std@@QBAHAAU_Mbstatet@@PAD1AAPAD@Z(ptr ptr ptr ptr ptr) codecvt_char32_unshift
 @ thiscall -arch=i386 ?unshift@?$codecvt@_UDU_Mbstatet@@@std@@QBEHAAU_Mbstatet@@PAD1AAPAD@Z(ptr ptr ptr ptr ptr) codecvt_char32_unshift
 @ cdecl -arch=win64 ?unshift@?$codecvt@_UDU_Mbstatet@@@std@@QEBAHAEAU_Mbstatet@@PEAD1AEAPEAD@Z(ptr ptr ptr ptr ptr) codecvt_char32_unshift
diff --git a/dlls/msvcp90/locale.c b/dlls/msvcp90/locale.c
index 3e5d5ad25ae..27568a44d36 100644
--- a/dlls/msvcp90/locale.c
+++ b/dlls/msvcp90/locale.c
@@ -3997,6 +3997,242 @@ int __thiscall codecvt_wchar_length(const codecvt_wchar *this, const _Mbstatet *
 
 #if _MSVCP_VER >= 140
 
+/* ??_7?$codecvt@_SDU_Mbstatet@@@std@@6B@ */
+extern const vtable_ptr codecvt_char16_vtable;
+
+/* ?_Init@?$codecvt@_SDU_Mbstatet@@@std@@IAAXABV_Locinfo@2@@Z */
+/* ?_Init@?$codecvt@_SDU_Mbstatet@@@std@@IAEXABV_Locinfo@2@@Z */
+/* ?_Init@?$codecvt@_SDU_Mbstatet@@@std@@IEAAXAEBV_Locinfo@2@@Z */
+DEFINE_THISCALL_WRAPPER(codecvt_char16__Init, 8)
+void __thiscall codecvt_char16__Init(codecvt_char16 *this, const _Locinfo *locinfo)
+{
+    FIXME("(%p %p) stub\n", this, locinfo);
+}
+
+/* ??0?$codecvt@_SDU_Mbstatet@@@std@@QAA@ABV_Locinfo@1@I@Z */
+/* ??0?$codecvt@_SDU_Mbstatet@@@std@@QAE@ABV_Locinfo@1@I@Z */
+/* ??0?$codecvt@_SDU_Mbstatet@@@std@@QEAA@AEBV_Locinfo@1@_K@Z */
+DEFINE_THISCALL_WRAPPER(codecvt_char16_ctor_locinfo, 12)
+codecvt_char16* __thiscall codecvt_char16_ctor_locinfo(codecvt_char16 *this,
+        const _Locinfo *locinfo, size_t refs)
+{
+    FIXME("(%p %p %Iu) stub\n", this, locinfo, refs);
+    return NULL;
+}
+
+/* ??0?$codecvt@_SDU_Mbstatet@@@std@@QAA@I@Z */
+/* ??0?$codecvt@_SDU_Mbstatet@@@std@@QAE@I@Z */
+/* ??0?$codecvt@_SDU_Mbstatet@@@std@@QEAA@_K@Z */
+DEFINE_THISCALL_WRAPPER(codecvt_char16_ctor_refs, 8)
+codecvt_char* __thiscall codecvt_char16_ctor_refs(codecvt_char16 *this, size_t refs)
+{
+    FIXME("(%p %Iu) stub\n", this, refs);
+    return NULL;
+}
+
+/* ??0?$codecvt@_SDU_Mbstatet@@@std@@QAA@ABV_Locinfo@1@KW4_Codecvt_mode@1@I@Z */
+/* ??0?$codecvt@_SDU_Mbstatet@@@std@@QAE@ABV_Locinfo@1@KW4_Codecvt_mode@1@I@Z */
+/* ??0?$codecvt@_SDU_Mbstatet@@@std@@QEAA@AEBV_Locinfo@1@KW4_Codecvt_mode@1@_K@Z */
+DEFINE_THISCALL_WRAPPER(codecvt_char16_ctor_mode, 16)
+codecvt_char16* __thiscall codecvt_char16_ctor_mode(codecvt_char16 *this,
+        ULONG max_code, codecvt_convert_mode mode, size_t refs)
+{
+    FIXME("(%p %ld %d %Iu) stub\n", this, max_code, mode, refs);
+    return NULL;
+}
+
+/* ??_F?$codecvt@_SDU_Mbstatet@@@std@@QAAXXZ */
+/* ??_F?$codecvt@_SDU_Mbstatet@@@std@@QAEXXZ */
+/* ??_F?$codecvt@_SDU_Mbstatet@@@std@@QEAAXXZ */
+DEFINE_THISCALL_WRAPPER(codecvt_char16_ctor, 4)
+codecvt_char* __thiscall codecvt_char16_ctor(codecvt_char16 *this)
+{
+    FIXME("(%p) stub\n", this);
+    return NULL;
+}
+
+/* ??1?$codecvt@_SDU_Mbstatet@@@std@@MAA@XZ */
+/* ??1?$codecvt@_SDU_Mbstatet@@@std@@MAE@XZ */
+/* ??1?$codecvt@_SDU_Mbstatet@@@std@@MEAA@XZ */
+DEFINE_THISCALL_WRAPPER(codecvt_char16_dtor, 4)
+void __thiscall codecvt_char16_dtor(codecvt_char16 *this)
+{
+    FIXME("(%p) stub\n", this);
+}
+
+DEFINE_THISCALL_WRAPPER(codecvt_char16_vector_dtor, 8)
+codecvt_char16* __thiscall codecvt_char16_vector_dtor(
+        codecvt_char16 *this, unsigned int flags)
+{
+    TRACE("(%p %x)\n", this, flags);
+    if(flags & 2) {
+        /* we have an array, with the number of elements stored before the first object */
+        INT_PTR i, *ptr = (INT_PTR *)this-1;
+
+        for(i=*ptr-1; i>=0; i--)
+            codecvt_char16_dtor(this+i);
+        operator_delete(ptr);
+    } else {
+        codecvt_char16_dtor(this);
+        if(flags & 1)
+            operator_delete(this);
+    }
+
+    return this;
+}
+
+/* ?_Getcat@?$codecvt@_SDU_Mbstatet@@@std@@SAIPAPBVfacet@locale@2@PBV42@@Z */
+/* ?_Getcat@?$codecvt@_SDU_Mbstatet@@@std@@SA_KPEAPEBVfacet@locale@2@PEBV42@@Z */
+size_t __cdecl codecvt_char16__Getcat(const locale_facet **facet, const locale *loc)
+{
+    FIXME("(%p %p) stub\n", facet, loc);
+    return 0;
+}
+
+/* ?do_always_noconv@?$codecvt@_SDU_Mbstatet@@@std@@MBA_NXZ */
+/* ?do_always_noconv@?$codecvt@_SDU_Mbstatet@@@std@@MBE_NXZ */
+/* ?do_always_noconv@?$codecvt@_SDU_Mbstatet@@@std@@MEBA_NXZ */
+DEFINE_THISCALL_WRAPPER(codecvt_char16_do_always_noconv, 4)
+bool __thiscall codecvt_char16_do_always_noconv(const codecvt_char16 *this)
+{
+    FIXME("(%p) stub\n", this);
+    return 0;
+}
+
+/* ?do_encoding@?$codecvt@_SDU_Mbstatet@@@std@@MBAHXZ */
+/* ?do_encoding@?$codecvt@_SDU_Mbstatet@@@std@@MBEHXZ */
+/* ?do_encoding@?$codecvt@_SDU_Mbstatet@@@std@@MEBAHXZ */
+DEFINE_THISCALL_WRAPPER(codecvt_char16_do_encoding, 4)
+int __thiscall codecvt_char16_do_encoding(const codecvt_char16 *this)
+{
+    FIXME("(%p) stub\n", this);
+    return 0;
+}
+
+/* ?do_in@?$codecvt@_SDU_Mbstatet@@@std@@MBAHAAU_Mbstatet@@PBD1AAPBDPA_S3AAPA_S@Z */
+/* ?do_in@?$codecvt@_SDU_Mbstatet@@@std@@MBEHAAU_Mbstatet@@PBD1AAPBDPA_S3AAPA_S@Z */
+/* ?do_in@?$codecvt@_SDU_Mbstatet@@@std@@MEBAHAEAU_Mbstatet@@PEBD1AEAPEBDPEA_S3AEAPEA_S@Z */
+#define call_codecvt_char16_do_in(this, state, from, from_end, from_next, to, to_end, to_next) \
+    CALL_VTBL_FUNC(this, 24, int, \
+            (const codecvt_char16*, _Mbstatet*, const char*, const char*, const char**, \
+                    char16_t*, char16_t*, char16_t**), \
+            (this, state, from, from_end, from_next, to, to_end, to_next))
+DEFINE_THISCALL_WRAPPER(codecvt_char16_do_in, 32)
+int __thiscall codecvt_char16_do_in(const codecvt_char16 *this, _Mbstatet *state,
+        const char *from, const char *from_end, const char **from_next,
+        char16_t *to, char16_t *to_end, char16_t **to_next)
+{
+    FIXME("(%p %p %p %p %p %p %p %p) stub\n", this, state, from,
+            from_end, from_next, to, to_end, to_next);
+    return 0;
+}
+
+/* ?in@?$codecvt@_SDU_Mbstatet@@@std@@QBAHAAU_Mbstatet@@PBD1AAPBDPA_S3AAPA_S@Z */
+/* ?in@?$codecvt@_SDU_Mbstatet@@@std@@QBEHAAU_Mbstatet@@PBD1AAPBDPA_S3AAPA_S@Z */
+/* ?in@?$codecvt@_SDU_Mbstatet@@@std@@QEBAHAEAU_Mbstatet@@PEBD1AEAPEBDPEA_S3AEAPEA_S@Z */
+DEFINE_THISCALL_WRAPPER(codecvt_char16_in, 32)
+int __thiscall codecvt_char16_in(const codecvt_char16 *this, _Mbstatet *state,
+        const char *from, const char *from_end, const char **from_next,
+        char16_t *to, char16_t *to_end, char16_t **to_next)
+{
+    TRACE("(%p %p %p %p %p %p %p %p)\n", this, state, from, from_end,
+            from_next, to, to_end, to_next);
+    return call_codecvt_char16_do_in(this, state, from, from_end, from_next,
+            to, to_end, to_next);
+}
+
+/* ?do_length@?$codecvt@_SDU_Mbstatet@@@std@@MBAHAAU_Mbstatet@@PBD1I@Z */
+/* ?do_length@?$codecvt@_SDU_Mbstatet@@@std@@MBEHAAU_Mbstatet@@PBD1I@Z */
+/* ?do_length@?$codecvt@_SDU_Mbstatet@@@std@@MEBAHAEAU_Mbstatet@@PEBD1_K@Z */
+#define call_codecvt_char16_do_length(this, state, from, from_end, max) CALL_VTBL_FUNC(this, 36, \
+        int, (const codecvt_char16*, const _Mbstatet*, const char*, const char*, size_t), \
+        (this, state, from, from_end, max))
+DEFINE_THISCALL_WRAPPER(codecvt_char16_do_length, 20)
+int __thiscall codecvt_char16_do_length(const codecvt_char16 *this, const _Mbstatet *state,
+        const char *from, const char *from_end, size_t max)
+{
+    FIXME("(%p %p %p %p %Iu) stub\n", this, state, from, from_end, max);
+    return 0;
+}
+
+
+/* ?length@?$codecvt@_SDU_Mbstatet@@@std@@QBAHAAU_Mbstatet@@PBD1I@Z */
+/* ?length@?$codecvt@_SDU_Mbstatet@@@std@@QBEHAAU_Mbstatet@@PBD1I@Z */
+/* ?length@?$codecvt@_SDU_Mbstatet@@@std@@QEBAHAEAU_Mbstatet@@PEBD1_K@Z */
+DEFINE_THISCALL_WRAPPER(codecvt_char16_length, 20)
+int __thiscall codecvt_char16_length(const codecvt_char16 *this, const _Mbstatet *state,
+        const char *from, const char *from_end, size_t max)
+{
+    TRACE("(%p %p %p %p %Iu)\n", this, state, from, from_end, max);
+    return call_codecvt_char16_do_length(this, state, from, from_end, max);
+}
+
+/* ?do_max_length@?$codecvt@_SDU_Mbstatet@@@std@@MBAHXZ */
+/* ?do_max_length@?$codecvt@_SDU_Mbstatet@@@std@@MBEHXZ */
+/* ?do_max_length@?$codecvt@_SDU_Mbstatet@@@std@@MEBAHXZ */
+DEFINE_THISCALL_WRAPPER(codecvt_char16_do_max_length, 4)
+int __thiscall codecvt_char16_do_max_length(const codecvt_char16 *this)
+{
+    FIXME("(%p) stub\n", this);
+    return 0;
+}
+
+/* ?do_out@?$codecvt@_SDU_Mbstatet@@@std@@MBAHAAU_Mbstatet@@PB_S1AAPB_SPAD3AAPAD@Z */
+/* ?do_out@?$codecvt@_SDU_Mbstatet@@@std@@MBEHAAU_Mbstatet@@PB_S1AAPB_SPAD3AAPAD@Z */
+/* ?do_out@?$codecvt@_SDU_Mbstatet@@@std@@MEBAHAEAU_Mbstatet@@PEB_S1AEAPEB_SPEAD3AEAPEAD@Z */
+#define call_codecvt_char16_do_out(this, state, from, from_end, from_next, to, to_end, to_next) \
+    CALL_VTBL_FUNC(this, 28, int, \
+            (const codecvt_char16*, _Mbstatet*, const char16_t*, const char16_t*, const char16_t**, \
+                    char*, char*, char**), \
+            (this, state, from, from_end, from_next, to, to_end, to_next))
+DEFINE_THISCALL_WRAPPER(codecvt_char16_do_out, 32)
+int __thiscall codecvt_char16_do_out(const codecvt_char16 *this, _Mbstatet *state,
+        const char16_t *from, const char16_t *from_end, const char16_t **from_next,
+        char *to, char *to_end, char **to_next)
+{
+    FIXME("(%p %p %p %p %p %p %p %p) stub\n", this, state, from,
+            from_end, from_next, to, to_end, to_next);
+    return 0;
+}
+
+/* ?out@?$codecvt@_SDU_Mbstatet@@@std@@QBAHAAU_Mbstatet@@PB_S1AAPB_SPAD3AAPAD@Z */
+/* ?out@?$codecvt@_SDU_Mbstatet@@@std@@QBEHAAU_Mbstatet@@PB_S1AAPB_SPAD3AAPAD@Z */
+/* ?out@?$codecvt@_SDU_Mbstatet@@@std@@QEBAHAEAU_Mbstatet@@PEB_S1AEAPEB_SPEAD3AEAPEAD@Z */
+DEFINE_THISCALL_WRAPPER(codecvt_char16_out, 32)
+int __thiscall codecvt_char16_out(const codecvt_char16 *this, _Mbstatet *state,
+        const char16_t *from, const char16_t *from_end, const char16_t **from_next,
+        char *to, char *to_end, char **to_next)
+{
+    TRACE("(%p %p %p %p %p %p %p %p)\n", this, state, from,
+            from_end, from_next, to, to_end, to_next);
+    return call_codecvt_char16_do_out(this, state, from,
+            from_end, from_next, to, to_end, to_next);
+}
+
+/* ?do_unshift@?$codecvt@_SDU_Mbstatet@@@std@@MBAHAAU_Mbstatet@@PAD1AAPAD@Z */
+/* ?do_unshift@?$codecvt@_SDU_Mbstatet@@@std@@MBEHAAU_Mbstatet@@PAD1AAPAD@Z */
+/* ?do_unshift@?$codecvt@_SDU_Mbstatet@@@std@@MEBAHAEAU_Mbstatet@@PEAD1AEAPEAD@Z */
+#define call_codecvt_char16_do_unshift(this, state, to, to_end, to_next) CALL_VTBL_FUNC(this, 32, \
+        int, (const codecvt_char16*, _Mbstatet*, char*, char*, char**), (this, state, to, to_end, to_next))
+DEFINE_THISCALL_WRAPPER(codecvt_char16_do_unshift, 20)
+int __thiscall codecvt_char16_do_unshift(const codecvt_char16 *this,
+        _Mbstatet *state, char *to, char *to_end, char **to_next)
+{
+    FIXME("(%p %p %p %p %p) stub\n", this, state, to, to_end, to_next);
+    return 0;
+}
+
+/* ?unshift@?$codecvt@_SDU_Mbstatet@@@std@@QBAHAAU_Mbstatet@@PAD1AAPAD@Z */
+/* ?unshift@?$codecvt@_SDU_Mbstatet@@@std@@QBEHAAU_Mbstatet@@PAD1AAPAD@Z */
+/* ?unshift@?$codecvt@_SDU_Mbstatet@@@std@@QEBAHAEAU_Mbstatet@@PEAD1AEAPEAD@Z */
+DEFINE_THISCALL_WRAPPER(codecvt_char16_unshift, 20)
+int __thiscall codecvt_char16_unshift(const codecvt_char16 *this,
+        _Mbstatet *state, char *to, char *to_end, char **to_next)
+{
+    TRACE("(%p %p %p %p %p)\n", this, state, to, to_end, to_next);
+    return call_codecvt_char16_do_unshift(this, state, to, to_end, to_next);
+}
+
 /* ??_7?$codecvt@_UDU_Mbstatet@@@std@@6B@ */
 extern const vtable_ptr codecvt_char32_vtable;
 
@@ -12682,6 +12918,7 @@ DEFINE_RTTI_DATA2(ctype_short, 0, &ctype_base_rtti_base_descriptor, &locale_face
 DEFINE_RTTI_DATA1(codecvt_base, 0, &locale_facet_rtti_base_descriptor, ".?AVcodecvt_base@std@@")
 #if _MSVCP_VER >= 140
 DEFINE_RTTI_DATA2(codecvt_char, 0, &codecvt_base_rtti_base_descriptor, &locale_facet_rtti_base_descriptor, ".?AV?$codecvt@DDU_Mbstatet@@@std@@")
+DEFINE_RTTI_DATA2(codecvt_char16, 0, &codecvt_base_rtti_base_descriptor, &locale_facet_rtti_base_descriptor, ".?AV?$codecvt@_SDU@std@@")
 DEFINE_RTTI_DATA2(codecvt_char32, 0, &codecvt_base_rtti_base_descriptor, &locale_facet_rtti_base_descriptor, ".?AV?$codecvt@_UDU@std@@")
 DEFINE_RTTI_DATA2(codecvt_wchar, 0, &codecvt_base_rtti_base_descriptor, &locale_facet_rtti_base_descriptor, ".?AV?$codecvt@_WDU_Mbstatet@@@std@@")
 DEFINE_RTTI_DATA2(codecvt_short, 0, &codecvt_base_rtti_base_descriptor, &locale_facet_rtti_base_descriptor, ".?AV?$codecvt@GDU_Mbstatet@@@std@@")
@@ -12859,6 +13096,17 @@ __ASM_BLOCK_BEGIN(locale_vtables)
             VTABLE_ADD_FUNC(codecvt_char_do_unshift)
             VTABLE_ADD_FUNC(codecvt_char_do_length));
 #if _MSVCP_VER >= 140
+    __ASM_VTABLE(codecvt_char16,
+            VTABLE_ADD_FUNC(codecvt_char16_vector_dtor)
+            VTABLE_ADD_FUNC(locale_facet__Incref)
+            VTABLE_ADD_FUNC(locale_facet__Decref)
+            VTABLE_ADD_FUNC(codecvt_char16_do_always_noconv)
+            VTABLE_ADD_FUNC(codecvt_char16_do_max_length)
+            VTABLE_ADD_FUNC(codecvt_char16_do_encoding)
+            VTABLE_ADD_FUNC(codecvt_char16_do_in)
+            VTABLE_ADD_FUNC(codecvt_char16_do_out)
+            VTABLE_ADD_FUNC(codecvt_char16_do_unshift)
+            VTABLE_ADD_FUNC(codecvt_char16_do_length));
     __ASM_VTABLE(codecvt_char32,
             VTABLE_ADD_FUNC(codecvt_char32_vector_dtor)
             VTABLE_ADD_FUNC(locale_facet__Incref)
@@ -13102,6 +13350,7 @@ void init_locale(void *base)
     init_codecvt_base_rtti(base);
     init_codecvt_char_rtti(base);
 #if _MSVCP_VER >= 140
+    init_codecvt_char16_rtti(base);
     init_codecvt_char32_rtti(base);
 #endif
     init_codecvt_wchar_rtti(base);
diff --git a/dlls/msvcp90/msvcp90.h b/dlls/msvcp90/msvcp90.h
index b9359c33ff1..3b97cfefd4b 100644
--- a/dlls/msvcp90/msvcp90.h
+++ b/dlls/msvcp90/msvcp90.h
@@ -244,6 +244,11 @@ typedef enum convert_mode
     little_endian = 1
 } codecvt_convert_mode;
 
+/* class codecvt<char16> */
+typedef struct {
+    codecvt_base base;
+} codecvt_char16;
+
 /* class codecvt<char32> */
 typedef struct {
     codecvt_base base;
diff --git a/dlls/msvcp_win/msvcp_win.spec b/dlls/msvcp_win/msvcp_win.spec
index 9f4d8581cf3..813d2ba67da 100644
--- a/dlls/msvcp_win/msvcp_win.spec
+++ b/dlls/msvcp_win/msvcp_win.spec
@@ -172,15 +172,15 @@
 @ cdecl -arch=arm ??0?$codecvt@GDU_Mbstatet@@@std@@QAA@I@Z(ptr long) msvcp140.??0?$codecvt@GDU_Mbstatet@@@std@@QAA@I@Z
 @ thiscall -arch=i386 ??0?$codecvt@GDU_Mbstatet@@@std@@QAE@I@Z(ptr long) msvcp140.??0?$codecvt@GDU_Mbstatet@@@std@@QAE@I@Z
 @ cdecl -arch=win64 ??0?$codecvt@GDU_Mbstatet@@@std@@QEAA@_K@Z(ptr long) msvcp140.??0?$codecvt@GDU_Mbstatet@@@std@@QEAA@_K@Z
-@ stub -arch=arm ??0?$codecvt@_SDU_Mbstatet@@@std@@QAA@ABV_Locinfo@1@KW4_Codecvt_mode@1@I@Z
-@ stub -arch=i386 ??0?$codecvt@_SDU_Mbstatet@@@std@@QAE@ABV_Locinfo@1@I@Z
-@ stub -arch=win64 ??0?$codecvt@_SDU_Mbstatet@@@std@@QEAA@AEBV_Locinfo@1@KW4_Codecvt_mode@1@_K@Z
-@ stub -arch=arm ??0?$codecvt@_SDU_Mbstatet@@@std@@QAA@ABV_Locinfo@1@I@Z
-@ stub -arch=i386 ??0?$codecvt@_SDU_Mbstatet@@@std@@QAE@ABV_Locinfo@1@KW4_Codecvt_mode@1@I@Z
-@ stub -arch=win64 ??0?$codecvt@_SDU_Mbstatet@@@std@@QEAA@AEBV_Locinfo@1@_K@Z
-@ stub -arch=arm ??0?$codecvt@_SDU_Mbstatet@@@std@@QAA@I@Z
-@ stub -arch=i386 ??0?$codecvt@_SDU_Mbstatet@@@std@@QAE@I@Z
-@ stub -arch=win64 ??0?$codecvt@_SDU_Mbstatet@@@std@@QEAA@_K@Z
+@ cdecl -arch=arm ??0?$codecvt@_SDU_Mbstatet@@@std@@QAA@ABV_Locinfo@1@KW4_Codecvt_mode@1@I@Z(ptr long long long) msvcp140.??0?$codecvt@_SDU_Mbstatet@@@std@@QAA@ABV_Locinfo@1@KW4_Codecvt_mode@1@I@Z
+@ thiscall -arch=i386 ??0?$codecvt@_SDU_Mbstatet@@@std@@QAE@ABV_Locinfo@1@I@Z(ptr ptr long) msvcp140.??0?$codecvt@_SDU_Mbstatet@@@std@@QAE@ABV_Locinfo@1@I@Z
+@ cdecl -arch=win64 ??0?$codecvt@_SDU_Mbstatet@@@std@@QEAA@AEBV_Locinfo@1@KW4_Codecvt_mode@1@_K@Z(ptr long long long) msvcp140.??0?$codecvt@_SDU_Mbstatet@@@std@@QEAA@AEBV_Locinfo@1@KW4_Codecvt_mode@1@_K@Z
+@ cdecl -arch=arm ??0?$codecvt@_SDU_Mbstatet@@@std@@QAA@ABV_Locinfo@1@I@Z(ptr ptr long) msvcp140.??0?$codecvt@_SDU_Mbstatet@@@std@@QAA@ABV_Locinfo@1@I@Z
+@ thiscall -arch=i386 ??0?$codecvt@_SDU_Mbstatet@@@std@@QAE@ABV_Locinfo@1@KW4_Codecvt_mode@1@I@Z(ptr long long long) msvcp140.??0?$codecvt@_SDU_Mbstatet@@@std@@QAE@ABV_Locinfo@1@KW4_Codecvt_mode@1@I@Z
+@ cdecl -arch=win64 ??0?$codecvt@_SDU_Mbstatet@@@std@@QEAA@AEBV_Locinfo@1@_K@Z(ptr ptr long) msvcp140.??0?$codecvt@_SDU_Mbstatet@@@std@@QEAA@AEBV_Locinfo@1@_K@Z
+@ cdecl -arch=arm ??0?$codecvt@_SDU_Mbstatet@@@std@@QAA@I@Z(ptr long) msvcp140.??0?$codecvt@_SDU_Mbstatet@@@std@@QAA@I@Z
+@ thiscall -arch=i386 ??0?$codecvt@_SDU_Mbstatet@@@std@@QAE@I@Z(ptr long) msvcp140.??0?$codecvt@_SDU_Mbstatet@@@std@@QAE@I@Z
+@ cdecl -arch=win64 ??0?$codecvt@_SDU_Mbstatet@@@std@@QEAA@_K@Z(ptr long) msvcp140.??0?$codecvt@_SDU_Mbstatet@@@std@@QEAA@_K@Z
 @ cdecl -arch=arm ??0?$codecvt@_UDU_Mbstatet@@@std@@QAA@ABV_Locinfo@1@KW4_Codecvt_mode@1@I@Z(ptr long long long) msvcp140.??0?$codecvt@_UDU_Mbstatet@@@std@@QAA@ABV_Locinfo@1@KW4_Codecvt_mode@1@I@Z
 @ thiscall -arch=i386 ??0?$codecvt@_UDU_Mbstatet@@@std@@QAE@ABV_Locinfo@1@I@Z(ptr ptr long) msvcp140.??0?$codecvt@_UDU_Mbstatet@@@std@@QAE@ABV_Locinfo@1@I@Z
 @ cdecl -arch=win64 ??0?$codecvt@_UDU_Mbstatet@@@std@@QEAA@AEBV_Locinfo@1@KW4_Codecvt_mode@1@_K@Z(ptr long long long) msvcp140.??0?$codecvt@_UDU_Mbstatet@@@std@@QEAA@AEBV_Locinfo@1@KW4_Codecvt_mode@1@_K@Z
@@ -424,9 +424,9 @@
 @ cdecl -arch=arm ??1?$codecvt@GDU_Mbstatet@@@std@@MAA@XZ(ptr) msvcp140.??1?$codecvt@GDU_Mbstatet@@@std@@MAA@XZ
 @ thiscall -arch=i386 ??1?$codecvt@GDU_Mbstatet@@@std@@MAE@XZ(ptr) msvcp140.??1?$codecvt@GDU_Mbstatet@@@std@@MAE@XZ
 @ cdecl -arch=win64 ??1?$codecvt@GDU_Mbstatet@@@std@@MEAA@XZ(ptr) msvcp140.??1?$codecvt@GDU_Mbstatet@@@std@@MEAA@XZ
-@ stub -arch=arm ??1?$codecvt@_SDU_Mbstatet@@@std@@MAA@XZ
-@ stub -arch=i386 ??1?$codecvt@_SDU_Mbstatet@@@std@@MAE@XZ
-@ stub -arch=win64 ??1?$codecvt@_SDU_Mbstatet@@@std@@MEAA@XZ
+@ cdecl -arch=arm ??1?$codecvt@_SDU_Mbstatet@@@std@@MAA@XZ(ptr) msvcp140.??1?$codecvt@_SDU_Mbstatet@@@std@@MAA@XZ
+@ thiscall -arch=i386 ??1?$codecvt@_SDU_Mbstatet@@@std@@MAE@XZ(ptr) msvcp140.??1?$codecvt@_SDU_Mbstatet@@@std@@MAE@XZ
+@ cdecl -arch=win64 ??1?$codecvt@_SDU_Mbstatet@@@std@@MEAA@XZ(ptr) msvcp140.??1?$codecvt@_SDU_Mbstatet@@@std@@MEAA@XZ
 @ cdecl -arch=arm ??1?$codecvt@_UDU_Mbstatet@@@std@@MAA@XZ(ptr) msvcp140.??1?$codecvt@_UDU_Mbstatet@@@std@@MAA@XZ
 @ thiscall -arch=i386 ??1?$codecvt@_UDU_Mbstatet@@@std@@MAE@XZ(ptr) msvcp140.??1?$codecvt@_UDU_Mbstatet@@@std@@MAE@XZ
 @ cdecl -arch=win64 ??1?$codecvt@_UDU_Mbstatet@@@std@@MEAA@XZ(ptr) msvcp140.??1?$codecvt@_UDU_Mbstatet@@@std@@MEAA@XZ
@@ -936,7 +936,7 @@
 @ extern ??_7?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@6B@ msvcp140.??_7?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@6B@
 @ extern ??_7?$codecvt@DDU_Mbstatet@@@std@@6B@ msvcp140.??_7?$codecvt@DDU_Mbstatet@@@std@@6B@
 @ extern ??_7?$codecvt@GDU_Mbstatet@@@std@@6B@ msvcp140.??_7?$codecvt@GDU_Mbstatet@@@std@@6B@
-@ stub ??_7?$codecvt@_SDU_Mbstatet@@@std@@6B@
+@ extern ??_7?$codecvt@_SDU_Mbstatet@@@std@@6B@ msvcp140.??_7?$codecvt@_SDU_Mbstatet@@@std@@6B@
 @ extern ??_7?$codecvt@_UDU_Mbstatet@@@std@@6B@ msvcp140.??_7?$codecvt@_UDU_Mbstatet@@@std@@6B@
 @ extern ??_7?$codecvt@_WDU_Mbstatet@@@std@@6B@ msvcp140.??_7?$codecvt@_WDU_Mbstatet@@@std@@6B@
 @ extern ??_7?$ctype@D@std@@6B@ msvcp140.??_7?$ctype@D@std@@6B@
@@ -1006,9 +1006,9 @@
 @ cdecl -arch=arm ??_F?$codecvt@GDU_Mbstatet@@@std@@QAAXXZ(ptr) msvcp140.??_F?$codecvt@GDU_Mbstatet@@@std@@QAAXXZ
 @ thiscall -arch=i386 ??_F?$codecvt@GDU_Mbstatet@@@std@@QAEXXZ(ptr) msvcp140.??_F?$codecvt@GDU_Mbstatet@@@std@@QAEXXZ
 @ cdecl -arch=win64 ??_F?$codecvt@GDU_Mbstatet@@@std@@QEAAXXZ(ptr) msvcp140.??_F?$codecvt@GDU_Mbstatet@@@std@@QEAAXXZ
-@ stub -arch=arm ??_F?$codecvt@_SDU_Mbstatet@@@std@@QAAXXZ
-@ stub -arch=i386 ??_F?$codecvt@_SDU_Mbstatet@@@std@@QAEXXZ
-@ stub -arch=win64 ??_F?$codecvt@_SDU_Mbstatet@@@std@@QEAAXXZ
+@ cdecl -arch=arm ??_F?$codecvt@_SDU_Mbstatet@@@std@@QAAXXZ(ptr) msvcp140.??_F?$codecvt@_SDU_Mbstatet@@@std@@QAAXXZ
+@ thiscall -arch=i386 ??_F?$codecvt@_SDU_Mbstatet@@@std@@QAEXXZ(ptr) msvcp140.??_F?$codecvt@_SDU_Mbstatet@@@std@@QAEXXZ
+@ cdecl -arch=win64 ??_F?$codecvt@_SDU_Mbstatet@@@std@@QEAAXXZ(ptr) msvcp140.??_F?$codecvt@_SDU_Mbstatet@@@std@@QEAAXXZ
 @ cdecl -arch=arm ??_F?$codecvt@_UDU_Mbstatet@@@std@@QAAXXZ(ptr) msvcp140.??_F?$codecvt@_UDU_Mbstatet@@@std@@QAAXXZ
 @ thiscall -arch=i386 ??_F?$codecvt@_UDU_Mbstatet@@@std@@QAEXXZ(ptr) msvcp140.??_F?$codecvt@_UDU_Mbstatet@@@std@@QAEXXZ
 @ cdecl -arch=win64 ??_F?$codecvt@_UDU_Mbstatet@@@std@@QEAAXXZ(ptr) msvcp140.??_F?$codecvt@_UDU_Mbstatet@@@std@@QEAAXXZ
@@ -1173,8 +1173,8 @@
 @ cdecl -arch=win64 ?_Getcat@?$codecvt@DDU_Mbstatet@@@std@@SA_KPEAPEBVfacet@locale@2@PEBV42@@Z(ptr ptr) msvcp140.?_Getcat@?$codecvt@DDU_Mbstatet@@@std@@SA_KPEAPEBVfacet@locale@2@PEBV42@@Z
 @ cdecl -arch=win32 ?_Getcat@?$codecvt@GDU_Mbstatet@@@std@@SAIPAPBVfacet@locale@2@PBV42@@Z(ptr ptr) msvcp140.?_Getcat@?$codecvt@GDU_Mbstatet@@@std@@SAIPAPBVfacet@locale@2@PBV42@@Z
 @ cdecl -arch=win64 ?_Getcat@?$codecvt@GDU_Mbstatet@@@std@@SA_KPEAPEBVfacet@locale@2@PEBV42@@Z(ptr ptr) msvcp140.?_Getcat@?$codecvt@GDU_Mbstatet@@@std@@SA_KPEAPEBVfacet@locale@2@PEBV42@@Z
-@ stub -arch=win32 ?_Getcat@?$codecvt@_SDU_Mbstatet@@@std@@SAIPAPBVfacet@locale@2@PBV42@@Z
-@ stub -arch=win64 ?_Getcat@?$codecvt@_SDU_Mbstatet@@@std@@SA_KPEAPEBVfacet@locale@2@PEBV42@@Z
+@ cdecl -arch=win32 ?_Getcat@?$codecvt@_SDU_Mbstatet@@@std@@SAIPAPBVfacet@locale@2@PBV42@@Z(ptr ptr) msvcp140.?_Getcat@?$codecvt@_SDU_Mbstatet@@@std@@SAIPAPBVfacet@locale@2@PBV42@@Z
+@ cdecl -arch=win64 ?_Getcat@?$codecvt@_SDU_Mbstatet@@@std@@SA_KPEAPEBVfacet@locale@2@PEBV42@@Z(ptr ptr) msvcp140.?_Getcat@?$codecvt@_SDU_Mbstatet@@@std@@SA_KPEAPEBVfacet@locale@2@PEBV42@@Z
 @ cdecl -arch=win32 ?_Getcat@?$codecvt@_UDU_Mbstatet@@@std@@SAIPAPBVfacet@locale@2@PBV42@@Z(ptr ptr) msvcp140.?_Getcat@?$codecvt@_UDU_Mbstatet@@@std@@SAIPAPBVfacet@locale@2@PBV42@@Z
 @ cdecl -arch=win64 ?_Getcat@?$codecvt@_UDU_Mbstatet@@@std@@SA_KPEAPEBVfacet@locale@2@PEBV42@@Z(ptr ptr) msvcp140.?_Getcat@?$codecvt@_UDU_Mbstatet@@@std@@SA_KPEAPEBVfacet@locale@2@PEBV42@@Z
 @ cdecl -arch=win32 ?_Getcat@?$codecvt@_WDU_Mbstatet@@@std@@SAIPAPBVfacet@locale@2@PBV42@@Z(ptr ptr) msvcp140.?_Getcat@?$codecvt@_WDU_Mbstatet@@@std@@SAIPAPBVfacet@locale@2@PBV42@@Z
@@ -1353,9 +1353,9 @@
 @ cdecl -arch=arm ?_Init@?$codecvt@GDU_Mbstatet@@@std@@IAAXABV_Locinfo@2@@Z(ptr ptr) msvcp140.?_Init@?$codecvt@GDU_Mbstatet@@@std@@IAAXABV_Locinfo@2@@Z
 @ thiscall -arch=i386 ?_Init@?$codecvt@GDU_Mbstatet@@@std@@IAEXABV_Locinfo@2@@Z(ptr ptr) msvcp140.?_Init@?$codecvt@GDU_Mbstatet@@@std@@IAEXABV_Locinfo@2@@Z
 @ cdecl -arch=win64 ?_Init@?$codecvt@GDU_Mbstatet@@@std@@IEAAXAEBV_Locinfo@2@@Z(ptr ptr) msvcp140.?_Init@?$codecvt@GDU_Mbstatet@@@std@@IEAAXAEBV_Locinfo@2@@Z
-@ stub -arch=arm ?_Init@?$codecvt@_SDU_Mbstatet@@@std@@IAAXABV_Locinfo@2@@Z
-@ stub -arch=i386 ?_Init@?$codecvt@_SDU_Mbstatet@@@std@@IAEXABV_Locinfo@2@@Z
-@ stub -arch=win64 ?_Init@?$codecvt@_SDU_Mbstatet@@@std@@IEAAXAEBV_Locinfo@2@@Z
+@ cdecl -arch=arm ?_Init@?$codecvt@_SDU_Mbstatet@@@std@@IAAXABV_Locinfo@2@@Z(ptr ptr) msvcp140.?_Init@?$codecvt@_SDU_Mbstatet@@@std@@IAAXABV_Locinfo@2@@Z
+@ thiscall -arch=i386 ?_Init@?$codecvt@_SDU_Mbstatet@@@std@@IAEXABV_Locinfo@2@@Z(ptr ptr) msvcp140.?_Init@?$codecvt@_SDU_Mbstatet@@@std@@IAEXABV_Locinfo@2@@Z
+@ cdecl -arch=win64 ?_Init@?$codecvt@_SDU_Mbstatet@@@std@@IEAAXAEBV_Locinfo@2@@Z(ptr ptr) msvcp140.?_Init@?$codecvt@_SDU_Mbstatet@@@std@@IEAAXAEBV_Locinfo@2@@Z
 @ cdecl -arch=arm ?_Init@?$codecvt@_UDU_Mbstatet@@@std@@IAAXABV_Locinfo@2@@Z(ptr ptr) msvcp140.?_Init@?$codecvt@_UDU_Mbstatet@@@std@@IAAXABV_Locinfo@2@@Z
 @ thiscall -arch=i386 ?_Init@?$codecvt@_UDU_Mbstatet@@@std@@IAEXABV_Locinfo@2@@Z(ptr ptr) msvcp140.?_Init@?$codecvt@_UDU_Mbstatet@@@std@@IAEXABV_Locinfo@2@@Z
 @ cdecl -arch=win64 ?_Init@?$codecvt@_UDU_Mbstatet@@@std@@IEAAXAEBV_Locinfo@2@@Z(ptr ptr) msvcp140.?_Init@?$codecvt@_UDU_Mbstatet@@@std@@IEAAXAEBV_Locinfo@2@@Z
@@ -1786,9 +1786,9 @@
 @ cdecl -arch=arm ?do_always_noconv@?$codecvt@GDU_Mbstatet@@@std@@MBA_NXZ(ptr) msvcp140.?do_always_noconv@?$codecvt@GDU_Mbstatet@@@std@@MBA_NXZ
 @ thiscall -arch=i386 ?do_always_noconv@?$codecvt@GDU_Mbstatet@@@std@@MBE_NXZ(ptr) msvcp140.?do_always_noconv@?$codecvt@GDU_Mbstatet@@@std@@MBE_NXZ
 @ cdecl -arch=win64 ?do_always_noconv@?$codecvt@GDU_Mbstatet@@@std@@MEBA_NXZ(ptr) msvcp140.?do_always_noconv@?$codecvt@GDU_Mbstatet@@@std@@MEBA_NXZ
-@ stub -arch=arm ?do_always_noconv@?$codecvt@_SDU_Mbstatet@@@std@@MBA_NXZ
-@ stub -arch=i386 ?do_always_noconv@?$codecvt@_SDU_Mbstatet@@@std@@MBE_NXZ
-@ stub -arch=win64 ?do_always_noconv@?$codecvt@_SDU_Mbstatet@@@std@@MEBA_NXZ
+@ cdecl -arch=arm ?do_always_noconv@?$codecvt@_SDU_Mbstatet@@@std@@MBA_NXZ(ptr) msvcp140.?do_always_noconv@?$codecvt@_SDU_Mbstatet@@@std@@MBA_NXZ
+@ thiscall -arch=i386 ?do_always_noconv@?$codecvt@_SDU_Mbstatet@@@std@@MBE_NXZ(ptr) msvcp140.?do_always_noconv@?$codecvt@_SDU_Mbstatet@@@std@@MBE_NXZ
+@ cdecl -arch=win64 ?do_always_noconv@?$codecvt@_SDU_Mbstatet@@@std@@MEBA_NXZ(ptr) msvcp140.?do_always_noconv@?$codecvt@_SDU_Mbstatet@@@std@@MEBA_NXZ
 @ cdecl -arch=arm ?do_always_noconv@?$codecvt@_UDU_Mbstatet@@@std@@MBA_NXZ(ptr) msvcp140.?do_always_noconv@?$codecvt@_UDU_Mbstatet@@@std@@MBA_NXZ
 @ thiscall -arch=i386 ?do_always_noconv@?$codecvt@_UDU_Mbstatet@@@std@@MBE_NXZ(ptr) msvcp140.?do_always_noconv@?$codecvt@_UDU_Mbstatet@@@std@@MBE_NXZ
 @ cdecl -arch=win64 ?do_always_noconv@?$codecvt@_UDU_Mbstatet@@@std@@MEBA_NXZ(ptr) msvcp140.?do_always_noconv@?$codecvt@_UDU_Mbstatet@@@std@@MEBA_NXZ
@@ -1810,9 +1810,9 @@
 @ cdecl -arch=arm ?do_encoding@?$codecvt@GDU_Mbstatet@@@std@@MBAHXZ(ptr) msvcp140.?do_encoding@?$codecvt@GDU_Mbstatet@@@std@@MBAHXZ
 @ thiscall -arch=i386 ?do_encoding@?$codecvt@GDU_Mbstatet@@@std@@MBEHXZ(ptr) msvcp140.?do_encoding@?$codecvt@GDU_Mbstatet@@@std@@MBEHXZ
 @ cdecl -arch=win64 ?do_encoding@?$codecvt@GDU_Mbstatet@@@std@@MEBAHXZ(ptr) msvcp140.?do_encoding@?$codecvt@GDU_Mbstatet@@@std@@MEBAHXZ
-@ stub -arch=arm ?do_encoding@?$codecvt@_SDU_Mbstatet@@@std@@MBAHXZ
-@ stub -arch=i386 ?do_encoding@?$codecvt@_SDU_Mbstatet@@@std@@MBEHXZ
-@ stub -arch=win64 ?do_encoding@?$codecvt@_SDU_Mbstatet@@@std@@MEBAHXZ
+@ cdecl -arch=arm ?do_encoding@?$codecvt@_SDU_Mbstatet@@@std@@MBAHXZ(ptr) msvcp140.?do_encoding@?$codecvt@_SDU_Mbstatet@@@std@@MBAHXZ
+@ thiscall -arch=i386 ?do_encoding@?$codecvt@_SDU_Mbstatet@@@std@@MBEHXZ(ptr) msvcp140.?do_encoding@?$codecvt@_SDU_Mbstatet@@@std@@MBEHXZ
+@ cdecl -arch=win64 ?do_encoding@?$codecvt@_SDU_Mbstatet@@@std@@MEBAHXZ(ptr) msvcp140.?do_encoding@?$codecvt@_SDU_Mbstatet@@@std@@MEBAHXZ
 @ cdecl -arch=arm ?do_encoding@?$codecvt@_UDU_Mbstatet@@@std@@MBAHXZ(ptr) msvcp140.?do_encoding@?$codecvt@_UDU_Mbstatet@@@std@@MBAHXZ
 @ thiscall -arch=i386 ?do_encoding@?$codecvt@_UDU_Mbstatet@@@std@@MBEHXZ(ptr) msvcp140.?do_encoding@?$codecvt@_UDU_Mbstatet@@@std@@MBEHXZ
 @ cdecl -arch=win64 ?do_encoding@?$codecvt@_UDU_Mbstatet@@@std@@MEBAHXZ(ptr) msvcp140.?do_encoding@?$codecvt@_UDU_Mbstatet@@@std@@MEBAHXZ
@@ -1981,9 +1981,9 @@
 @ cdecl -arch=arm ?do_in@?$codecvt@GDU_Mbstatet@@@std@@MBAHAAU_Mbstatet@@PBD1AAPBDPAG3AAPAG@Z(ptr ptr str str ptr ptr ptr ptr) msvcp140.?do_in@?$codecvt@GDU_Mbstatet@@@std@@MBAHAAU_Mbstatet@@PBD1AAPBDPAG3AAPAG@Z
 @ thiscall -arch=i386 ?do_in@?$codecvt@GDU_Mbstatet@@@std@@MBEHAAU_Mbstatet@@PBD1AAPBDPAG3AAPAG@Z(ptr ptr str str ptr ptr ptr ptr) msvcp140.?do_in@?$codecvt@GDU_Mbstatet@@@std@@MBEHAAU_Mbstatet@@PBD1AAPBDPAG3AAPAG@Z
 @ cdecl -arch=win64 ?do_in@?$codecvt@GDU_Mbstatet@@@std@@MEBAHAEAU_Mbstatet@@PEBD1AEAPEBDPEAG3AEAPEAG@Z(ptr ptr str str ptr ptr ptr ptr) msvcp140.?do_in@?$codecvt@GDU_Mbstatet@@@std@@MEBAHAEAU_Mbstatet@@PEBD1AEAPEBDPEAG3AEAPEAG@Z
-@ stub -arch=arm ?do_in@?$codecvt@_SDU_Mbstatet@@@std@@MBAHAAU_Mbstatet@@PBD1AAPBDPA_S3AAPA_S@Z
-@ stub -arch=i386 ?do_in@?$codecvt@_SDU_Mbstatet@@@std@@MBEHAAU_Mbstatet@@PBD1AAPBDPA_S3AAPA_S@Z
-@ stub -arch=win64 ?do_in@?$codecvt@_SDU_Mbstatet@@@std@@MEBAHAEAU_Mbstatet@@PEBD1AEAPEBDPEA_S3AEAPEA_S@Z
+@ cdecl -arch=arm ?do_in@?$codecvt@_SDU_Mbstatet@@@std@@MBAHAAU_Mbstatet@@PBD1AAPBDPA_S3AAPA_S@Z(ptr ptr str str ptr ptr ptr ptr) msvcp140.?do_in@?$codecvt@_SDU_Mbstatet@@@std@@MBAHAAU_Mbstatet@@PBD1AAPBDPA_S3AAPA_S@Z
+@ thiscall -arch=i386 ?do_in@?$codecvt@_SDU_Mbstatet@@@std@@MBEHAAU_Mbstatet@@PBD1AAPBDPA_S3AAPA_S@Z(ptr ptr str str ptr ptr ptr ptr) msvcp140.?do_in@?$codecvt@_SDU_Mbstatet@@@std@@MBEHAAU_Mbstatet@@PBD1AAPBDPA_S3AAPA_S@Z
+@ cdecl -arch=win64 ?do_in@?$codecvt@_SDU_Mbstatet@@@std@@MEBAHAEAU_Mbstatet@@PEBD1AEAPEBDPEA_S3AEAPEA_S@Z(ptr ptr str str ptr ptr ptr ptr) msvcp140.?do_in@?$codecvt@_SDU_Mbstatet@@@std@@MEBAHAEAU_Mbstatet@@PEBD1AEAPEBDPEA_S3AEAPEA_S@Z
 @ cdecl -arch=arm ?do_in@?$codecvt@_UDU_Mbstatet@@@std@@MBAHAAU_Mbstatet@@PBD1AAPBDPA_U3AAPA_U@Z(ptr ptr str str ptr ptr ptr ptr) msvcp140.?do_in@?$codecvt@_UDU_Mbstatet@@@std@@MBAHAAU_Mbstatet@@PBD1AAPBDPA_U3AAPA_U@Z
 @ thiscall -arch=i386 ?do_in@?$codecvt@_UDU_Mbstatet@@@std@@MBEHAAU_Mbstatet@@PBD1AAPBDPA_U3AAPA_U@Z(ptr ptr str str ptr ptr ptr ptr) msvcp140.?do_in@?$codecvt@_UDU_Mbstatet@@@std@@MBEHAAU_Mbstatet@@PBD1AAPBDPA_U3AAPA_U@Z
 @ cdecl -arch=win64 ?do_in@?$codecvt@_UDU_Mbstatet@@@std@@MEBAHAEAU_Mbstatet@@PEBD1AEAPEBDPEA_U3AEAPEA_U@Z(ptr ptr str str ptr ptr ptr ptr) msvcp140.?do_in@?$codecvt@_UDU_Mbstatet@@@std@@MEBAHAEAU_Mbstatet@@PEBD1AEAPEBDPEA_U3AEAPEA_U@Z
@@ -2008,9 +2008,9 @@
 @ cdecl -arch=arm ?do_length@?$codecvt@GDU_Mbstatet@@@std@@MBAHAAU_Mbstatet@@PBD1I@Z(ptr ptr str str long) msvcp140.?do_length@?$codecvt@GDU_Mbstatet@@@std@@MBAHAAU_Mbstatet@@PBD1I@Z
 @ thiscall -arch=i386 ?do_length@?$codecvt@GDU_Mbstatet@@@std@@MBEHAAU_Mbstatet@@PBD1I@Z(ptr ptr str str long) msvcp140.?do_length@?$codecvt@GDU_Mbstatet@@@std@@MBEHAAU_Mbstatet@@PBD1I@Z
 @ cdecl -arch=win64 ?do_length@?$codecvt@GDU_Mbstatet@@@std@@MEBAHAEAU_Mbstatet@@PEBD1_K@Z(ptr ptr str str long) msvcp140.?do_length@?$codecvt@GDU_Mbstatet@@@std@@MEBAHAEAU_Mbstatet@@PEBD1_K@Z
-@ stub -arch=arm ?do_length@?$codecvt@_SDU_Mbstatet@@@std@@MBAHAAU_Mbstatet@@PBD1I@Z
-@ stub -arch=i386 ?do_length@?$codecvt@_SDU_Mbstatet@@@std@@MBEHAAU_Mbstatet@@PBD1I@Z
-@ stub -arch=win64 ?do_length@?$codecvt@_SDU_Mbstatet@@@std@@MEBAHAEAU_Mbstatet@@PEBD1_K@Z
+@ cdecl -arch=arm ?do_length@?$codecvt@_SDU_Mbstatet@@@std@@MBAHAAU_Mbstatet@@PBD1I@Z(ptr ptr str str long) msvcp140.?do_length@?$codecvt@_SDU_Mbstatet@@@std@@MBAHAAU_Mbstatet@@PBD1I@Z
+@ thiscall -arch=i386 ?do_length@?$codecvt@_SDU_Mbstatet@@@std@@MBEHAAU_Mbstatet@@PBD1I@Z(ptr ptr str str long) msvcp140.?do_length@?$codecvt@_SDU_Mbstatet@@@std@@MBEHAAU_Mbstatet@@PBD1I@Z
+@ cdecl -arch=win64 ?do_length@?$codecvt@_SDU_Mbstatet@@@std@@MEBAHAEAU_Mbstatet@@PEBD1_K@Z(ptr ptr str str long) msvcp140.?do_length@?$codecvt@_SDU_Mbstatet@@@std@@MEBAHAEAU_Mbstatet@@PEBD1_K@Z
 @ cdecl -arch=arm ?do_length@?$codecvt@_UDU_Mbstatet@@@std@@MBAHAAU_Mbstatet@@PBD1I@Z(ptr ptr str str long) msvcp140.?do_length@?$codecvt@_UDU_Mbstatet@@@std@@MBAHAAU_Mbstatet@@PBD1I@Z
 @ thiscall -arch=i386 ?do_length@?$codecvt@_UDU_Mbstatet@@@std@@MBEHAAU_Mbstatet@@PBD1I@Z(ptr ptr str str long) msvcp140.?do_length@?$codecvt@_UDU_Mbstatet@@@std@@MBEHAAU_Mbstatet@@PBD1I@Z
 @ cdecl -arch=win64 ?do_length@?$codecvt@_UDU_Mbstatet@@@std@@MEBAHAEAU_Mbstatet@@PEBD1_K@Z(ptr ptr str str long) msvcp140.?do_length@?$codecvt@_UDU_Mbstatet@@@std@@MEBAHAEAU_Mbstatet@@PEBD1_K@Z
@@ -2020,9 +2020,9 @@
 @ cdecl -arch=arm ?do_max_length@?$codecvt@GDU_Mbstatet@@@std@@MBAHXZ(ptr) msvcp140.?do_max_length@?$codecvt@GDU_Mbstatet@@@std@@MBAHXZ
 @ thiscall -arch=i386 ?do_max_length@?$codecvt@GDU_Mbstatet@@@std@@MBEHXZ(ptr) msvcp140.?do_max_length@?$codecvt@GDU_Mbstatet@@@std@@MBEHXZ
 @ cdecl -arch=win64 ?do_max_length@?$codecvt@GDU_Mbstatet@@@std@@MEBAHXZ(ptr) msvcp140.?do_max_length@?$codecvt@GDU_Mbstatet@@@std@@MEBAHXZ
-@ stub -arch=arm ?do_max_length@?$codecvt@_SDU_Mbstatet@@@std@@MBAHXZ
-@ stub -arch=i386 ?do_max_length@?$codecvt@_SDU_Mbstatet@@@std@@MBEHXZ
-@ stub -arch=win64 ?do_max_length@?$codecvt@_SDU_Mbstatet@@@std@@MEBAHXZ
+@ cdecl -arch=arm ?do_max_length@?$codecvt@_SDU_Mbstatet@@@std@@MBAHXZ(ptr) msvcp140.?do_max_length@?$codecvt@_SDU_Mbstatet@@@std@@MBAHXZ
+@ thiscall -arch=i386 ?do_max_length@?$codecvt@_SDU_Mbstatet@@@std@@MBEHXZ(ptr) msvcp140.?do_max_length@?$codecvt@_SDU_Mbstatet@@@std@@MBEHXZ
+@ cdecl -arch=win64 ?do_max_length@?$codecvt@_SDU_Mbstatet@@@std@@MEBAHXZ(ptr) msvcp140.?do_max_length@?$codecvt@_SDU_Mbstatet@@@std@@MEBAHXZ
 @ cdecl -arch=arm ?do_max_length@?$codecvt@_UDU_Mbstatet@@@std@@MBAHXZ(ptr) msvcp140.?do_max_length@?$codecvt@_UDU_Mbstatet@@@std@@MBAHXZ
 @ thiscall -arch=i386 ?do_max_length@?$codecvt@_UDU_Mbstatet@@@std@@MBEHXZ(ptr) msvcp140.?do_max_length@?$codecvt@_UDU_Mbstatet@@@std@@MBEHXZ
 @ cdecl -arch=win64 ?do_max_length@?$codecvt@_UDU_Mbstatet@@@std@@MEBAHXZ(ptr) msvcp140.?do_max_length@?$codecvt@_UDU_Mbstatet@@@std@@MEBAHXZ
@@ -2056,9 +2056,9 @@
 @ cdecl -arch=arm ?do_out@?$codecvt@GDU_Mbstatet@@@std@@MBAHAAU_Mbstatet@@PBG1AAPBGPAD3AAPAD@Z(ptr ptr ptr ptr ptr ptr ptr ptr) msvcp140.?do_out@?$codecvt@GDU_Mbstatet@@@std@@MBAHAAU_Mbstatet@@PBG1AAPBGPAD3AAPAD@Z
 @ thiscall -arch=i386 ?do_out@?$codecvt@GDU_Mbstatet@@@std@@MBEHAAU_Mbstatet@@PBG1AAPBGPAD3AAPAD@Z(ptr ptr ptr ptr ptr ptr ptr ptr) msvcp140.?do_out@?$codecvt@GDU_Mbstatet@@@std@@MBEHAAU_Mbstatet@@PBG1AAPBGPAD3AAPAD@Z
 @ cdecl -arch=win64 ?do_out@?$codecvt@GDU_Mbstatet@@@std@@MEBAHAEAU_Mbstatet@@PEBG1AEAPEBGPEAD3AEAPEAD@Z(ptr ptr ptr ptr ptr ptr ptr ptr) msvcp140.?do_out@?$codecvt@GDU_Mbstatet@@@std@@MEBAHAEAU_Mbstatet@@PEBG1AEAPEBGPEAD3AEAPEAD@Z
-@ stub -arch=arm ?do_out@?$codecvt@_SDU_Mbstatet@@@std@@MBAHAAU_Mbstatet@@PB_S1AAPB_SPAD3AAPAD@Z
-@ stub -arch=i386 ?do_out@?$codecvt@_SDU_Mbstatet@@@std@@MBEHAAU_Mbstatet@@PB_S1AAPB_SPAD3AAPAD@Z
-@ stub -arch=win64 ?do_out@?$codecvt@_SDU_Mbstatet@@@std@@MEBAHAEAU_Mbstatet@@PEB_S1AEAPEB_SPEAD3AEAPEAD@Z
+@ cdecl -arch=arm ?do_out@?$codecvt@_SDU_Mbstatet@@@std@@MBAHAAU_Mbstatet@@PB_S1AAPB_SPAD3AAPAD@Z(ptr ptr ptr ptr ptr ptr ptr ptr) msvcp140.?do_out@?$codecvt@_SDU_Mbstatet@@@std@@MBAHAAU_Mbstatet@@PB_S1AAPB_SPAD3AAPAD@Z
+@ thiscall -arch=i386 ?do_out@?$codecvt@_SDU_Mbstatet@@@std@@MBEHAAU_Mbstatet@@PB_S1AAPB_SPAD3AAPAD@Z(ptr ptr ptr ptr ptr ptr ptr ptr) msvcp140.?do_out@?$codecvt@_SDU_Mbstatet@@@std@@MBEHAAU_Mbstatet@@PB_S1AAPB_SPAD3AAPAD@Z
+@ cdecl -arch=win64 ?do_out@?$codecvt@_SDU_Mbstatet@@@std@@MEBAHAEAU_Mbstatet@@PEB_S1AEAPEB_SPEAD3AEAPEAD@Z(ptr ptr ptr ptr ptr ptr ptr ptr) msvcp140.?do_out@?$codecvt@_SDU_Mbstatet@@@std@@MEBAHAEAU_Mbstatet@@PEB_S1AEAPEB_SPEAD3AEAPEAD@Z
 @ cdecl -arch=arm ?do_out@?$codecvt@_UDU_Mbstatet@@@std@@MBAHAAU_Mbstatet@@PB_U1AAPB_UPAD3AAPAD@Z(ptr ptr ptr ptr ptr ptr ptr ptr) msvcp140.?do_out@?$codecvt@_UDU_Mbstatet@@@std@@MBAHAAU_Mbstatet@@PB_U1AAPB_UPAD3AAPAD@Z
 @ thiscall -arch=i386 ?do_out@?$codecvt@_UDU_Mbstatet@@@std@@MBEHAAU_Mbstatet@@PB_U1AAPB_UPAD3AAPAD@Z(ptr ptr ptr ptr ptr ptr ptr ptr) msvcp140.?do_out@?$codecvt@_UDU_Mbstatet@@@std@@MBEHAAU_Mbstatet@@PB_U1AAPB_UPAD3AAPAD@Z
 @ cdecl -arch=win64 ?do_out@?$codecvt@_UDU_Mbstatet@@@std@@MEBAHAEAU_Mbstatet@@PEB_U1AEAPEB_UPEAD3AEAPEAD@Z(ptr ptr ptr ptr ptr ptr ptr ptr) msvcp140.?do_out@?$codecvt@_UDU_Mbstatet@@@std@@MEBAHAEAU_Mbstatet@@PEB_U1AEAPEB_UPEAD3AEAPEAD@Z
@@ -2200,9 +2200,9 @@
 @ cdecl -arch=arm ?do_unshift@?$codecvt@GDU_Mbstatet@@@std@@MBAHAAU_Mbstatet@@PAD1AAPAD@Z(ptr ptr ptr ptr ptr) msvcp140.?do_unshift@?$codecvt@GDU_Mbstatet@@@std@@MBAHAAU_Mbstatet@@PAD1AAPAD@Z
 @ thiscall -arch=i386 ?do_unshift@?$codecvt@GDU_Mbstatet@@@std@@MBEHAAU_Mbstatet@@PAD1AAPAD@Z(ptr ptr ptr ptr ptr) msvcp140.?do_unshift@?$codecvt@GDU_Mbstatet@@@std@@MBEHAAU_Mbstatet@@PAD1AAPAD@Z
 @ cdecl -arch=win64 ?do_unshift@?$codecvt@GDU_Mbstatet@@@std@@MEBAHAEAU_Mbstatet@@PEAD1AEAPEAD@Z(ptr ptr ptr ptr ptr) msvcp140.?do_unshift@?$codecvt@GDU_Mbstatet@@@std@@MEBAHAEAU_Mbstatet@@PEAD1AEAPEAD@Z
-@ stub -arch=arm ?do_unshift@?$codecvt@_SDU_Mbstatet@@@std@@MBAHAAU_Mbstatet@@PAD1AAPAD@Z
-@ stub -arch=i386 ?do_unshift@?$codecvt@_SDU_Mbstatet@@@std@@MBEHAAU_Mbstatet@@PAD1AAPAD@Z
-@ stub -arch=win64 ?do_unshift@?$codecvt@_SDU_Mbstatet@@@std@@MEBAHAEAU_Mbstatet@@PEAD1AEAPEAD@Z
+@ cdecl -arch=arm ?do_unshift@?$codecvt@_SDU_Mbstatet@@@std@@MBAHAAU_Mbstatet@@PAD1AAPAD@Z(ptr ptr ptr ptr ptr) msvcp140.?do_unshift@?$codecvt@_SDU_Mbstatet@@@std@@MBAHAAU_Mbstatet@@PAD1AAPAD@Z
+@ thiscall -arch=i386 ?do_unshift@?$codecvt@_SDU_Mbstatet@@@std@@MBEHAAU_Mbstatet@@PAD1AAPAD@Z(ptr ptr ptr ptr ptr) msvcp140.?do_unshift@?$codecvt@_SDU_Mbstatet@@@std@@MBEHAAU_Mbstatet@@PAD1AAPAD@Z
+@ cdecl -arch=win64 ?do_unshift@?$codecvt@_SDU_Mbstatet@@@std@@MEBAHAEAU_Mbstatet@@PEAD1AEAPEAD@Z(ptr ptr ptr ptr ptr) msvcp140.?do_unshift@?$codecvt@_SDU_Mbstatet@@@std@@MEBAHAEAU_Mbstatet@@PEAD1AEAPEAD@Z
 @ cdecl -arch=arm ?do_unshift@?$codecvt@_UDU_Mbstatet@@@std@@MBAHAAU_Mbstatet@@PAD1AAPAD@Z(ptr ptr ptr ptr ptr) msvcp140.?do_unshift@?$codecvt@_UDU_Mbstatet@@@std@@MBAHAAU_Mbstatet@@PAD1AAPAD@Z
 @ thiscall -arch=i386 ?do_unshift@?$codecvt@_UDU_Mbstatet@@@std@@MBEHAAU_Mbstatet@@PAD1AAPAD@Z(ptr ptr ptr ptr ptr) msvcp140.?do_unshift@?$codecvt@_UDU_Mbstatet@@@std@@MBEHAAU_Mbstatet@@PAD1AAPAD@Z
 @ cdecl -arch=win64 ?do_unshift@?$codecvt@_UDU_Mbstatet@@@std@@MEBAHAEAU_Mbstatet@@PEAD1AEAPEAD@Z(ptr ptr ptr ptr ptr) msvcp140.?do_unshift@?$codecvt@_UDU_Mbstatet@@@std@@MEBAHAEAU_Mbstatet@@PEAD1AEAPEAD@Z
@@ -2669,9 +2669,9 @@
 @ cdecl -arch=arm ?in@?$codecvt@GDU_Mbstatet@@@std@@QBAHAAU_Mbstatet@@PBD1AAPBDPAG3AAPAG@Z(ptr ptr str str ptr ptr ptr ptr) msvcp140.?in@?$codecvt@GDU_Mbstatet@@@std@@QBAHAAU_Mbstatet@@PBD1AAPBDPAG3AAPAG@Z
 @ thiscall -arch=i386 ?in@?$codecvt@GDU_Mbstatet@@@std@@QBEHAAU_Mbstatet@@PBD1AAPBDPAG3AAPAG@Z(ptr ptr str str ptr ptr ptr ptr) msvcp140.?in@?$codecvt@GDU_Mbstatet@@@std@@QBEHAAU_Mbstatet@@PBD1AAPBDPAG3AAPAG@Z
 @ cdecl -arch=win64 ?in@?$codecvt@GDU_Mbstatet@@@std@@QEBAHAEAU_Mbstatet@@PEBD1AEAPEBDPEAG3AEAPEAG@Z(ptr ptr str str ptr ptr ptr ptr) msvcp140.?in@?$codecvt@GDU_Mbstatet@@@std@@QEBAHAEAU_Mbstatet@@PEBD1AEAPEBDPEAG3AEAPEAG@Z
-@ stub -arch=arm ?in@?$codecvt@_SDU_Mbstatet@@@std@@QBAHAAU_Mbstatet@@PBD1AAPBDPA_S3AAPA_S@Z
-@ stub -arch=i386 ?in@?$codecvt@_SDU_Mbstatet@@@std@@QBEHAAU_Mbstatet@@PBD1AAPBDPA_S3AAPA_S@Z
-@ stub -arch=win64 ?in@?$codecvt@_SDU_Mbstatet@@@std@@QEBAHAEAU_Mbstatet@@PEBD1AEAPEBDPEA_S3AEAPEA_S@Z
+@ cdecl -arch=arm ?in@?$codecvt@_SDU_Mbstatet@@@std@@QBAHAAU_Mbstatet@@PBD1AAPBDPA_S3AAPA_S@Z(ptr ptr str str ptr ptr ptr ptr) msvcp140.?in@?$codecvt@_SDU_Mbstatet@@@std@@QBAHAAU_Mbstatet@@PBD1AAPBDPA_S3AAPA_S@Z
+@ thiscall -arch=i386 ?in@?$codecvt@_SDU_Mbstatet@@@std@@QBEHAAU_Mbstatet@@PBD1AAPBDPA_S3AAPA_S@Z(ptr ptr str str ptr ptr ptr ptr) msvcp140.?in@?$codecvt@_SDU_Mbstatet@@@std@@QBEHAAU_Mbstatet@@PBD1AAPBDPA_S3AAPA_S@Z
+@ cdecl -arch=win64 ?in@?$codecvt@_SDU_Mbstatet@@@std@@QEBAHAEAU_Mbstatet@@PEBD1AEAPEBDPEA_S3AEAPEA_S@Z(ptr ptr str str ptr ptr ptr ptr) msvcp140.?in@?$codecvt@_SDU_Mbstatet@@@std@@QEBAHAEAU_Mbstatet@@PEBD1AEAPEBDPEA_S3AEAPEA_S@Z
 @ cdecl -arch=arm ?in@?$codecvt@_UDU_Mbstatet@@@std@@QBAHAAU_Mbstatet@@PBD1AAPBDPA_U3AAPA_U@Z(ptr ptr str str ptr ptr ptr ptr) msvcp140.?in@?$codecvt@_UDU_Mbstatet@@@std@@QBAHAAU_Mbstatet@@PBD1AAPBDPA_U3AAPA_U@Z
 @ thiscall -arch=i386 ?in@?$codecvt@_UDU_Mbstatet@@@std@@QBEHAAU_Mbstatet@@PBD1AAPBDPA_U3AAPA_U@Z(ptr ptr str str ptr ptr ptr ptr) msvcp140.?in@?$codecvt@_UDU_Mbstatet@@@std@@QBEHAAU_Mbstatet@@PBD1AAPBDPA_U3AAPA_U@Z
 @ cdecl -arch=win64 ?in@?$codecvt@_UDU_Mbstatet@@@std@@QEBAHAEAU_Mbstatet@@PEBD1AEAPEBDPEA_U3AEAPEA_U@Z(ptr ptr str str ptr ptr ptr ptr) msvcp140.?in@?$codecvt@_UDU_Mbstatet@@@std@@QEBAHAEAU_Mbstatet@@PEBD1AEAPEBDPEA_U3AEAPEA_U@Z
@@ -2747,9 +2747,9 @@
 @ cdecl -arch=arm ?length@?$codecvt@GDU_Mbstatet@@@std@@QBAHAAU_Mbstatet@@PBD1I@Z(ptr ptr str str long) msvcp140.?length@?$codecvt@GDU_Mbstatet@@@std@@QBAHAAU_Mbstatet@@PBD1I@Z
 @ thiscall -arch=i386 ?length@?$codecvt@GDU_Mbstatet@@@std@@QBEHAAU_Mbstatet@@PBD1I@Z(ptr ptr str str long) msvcp140.?length@?$codecvt@GDU_Mbstatet@@@std@@QBEHAAU_Mbstatet@@PBD1I@Z
 @ cdecl -arch=win64 ?length@?$codecvt@GDU_Mbstatet@@@std@@QEBAHAEAU_Mbstatet@@PEBD1_K@Z(ptr ptr str str long) msvcp140.?length@?$codecvt@GDU_Mbstatet@@@std@@QEBAHAEAU_Mbstatet@@PEBD1_K@Z
-@ stub -arch=arm ?length@?$codecvt@_SDU_Mbstatet@@@std@@QBAHAAU_Mbstatet@@PBD1I@Z
-@ stub -arch=i386 ?length@?$codecvt@_SDU_Mbstatet@@@std@@QBEHAAU_Mbstatet@@PBD1I@Z
-@ stub -arch=win64 ?length@?$codecvt@_SDU_Mbstatet@@@std@@QEBAHAEAU_Mbstatet@@PEBD1_K@Z
+@ cdecl -arch=arm ?length@?$codecvt@_SDU_Mbstatet@@@std@@QBAHAAU_Mbstatet@@PBD1I@Z(ptr ptr str str long) msvcp140.?length@?$codecvt@_SDU_Mbstatet@@@std@@QBAHAAU_Mbstatet@@PBD1I@Z
+@ thiscall -arch=i386 ?length@?$codecvt@_SDU_Mbstatet@@@std@@QBEHAAU_Mbstatet@@PBD1I@Z(ptr ptr str str long) msvcp140.?length@?$codecvt@_SDU_Mbstatet@@@std@@QBEHAAU_Mbstatet@@PBD1I@Z
+@ cdecl -arch=win64 ?length@?$codecvt@_SDU_Mbstatet@@@std@@QEBAHAEAU_Mbstatet@@PEBD1_K@Z(ptr ptr str str long) msvcp140.?length@?$codecvt@_SDU_Mbstatet@@@std@@QEBAHAEAU_Mbstatet@@PEBD1_K@Z
 @ cdecl -arch=arm ?length@?$codecvt@_UDU_Mbstatet@@@std@@QBAHAAU_Mbstatet@@PBD1I@Z(ptr ptr str str long) msvcp140.?length@?$codecvt@_UDU_Mbstatet@@@std@@QBAHAAU_Mbstatet@@PBD1I@Z
 @ thiscall -arch=i386 ?length@?$codecvt@_UDU_Mbstatet@@@std@@QBEHAAU_Mbstatet@@PBD1I@Z(ptr ptr str str long) msvcp140.?length@?$codecvt@_UDU_Mbstatet@@@std@@QBEHAAU_Mbstatet@@PBD1I@Z
 @ cdecl -arch=win64 ?length@?$codecvt@_UDU_Mbstatet@@@std@@QEBAHAEAU_Mbstatet@@PEBD1_K@Z(ptr ptr str str long) msvcp140.?length@?$codecvt@_UDU_Mbstatet@@@std@@QEBAHAEAU_Mbstatet@@PEBD1_K@Z
@@ -2828,9 +2828,9 @@
 @ cdecl -arch=arm ?out@?$codecvt@GDU_Mbstatet@@@std@@QBAHAAU_Mbstatet@@PBG1AAPBGPAD3AAPAD@Z(ptr ptr ptr ptr ptr ptr ptr ptr) msvcp140.?out@?$codecvt@GDU_Mbstatet@@@std@@QBAHAAU_Mbstatet@@PBG1AAPBGPAD3AAPAD@Z
 @ thiscall -arch=i386 ?out@?$codecvt@GDU_Mbstatet@@@std@@QBEHAAU_Mbstatet@@PBG1AAPBGPAD3AAPAD@Z(ptr ptr ptr ptr ptr ptr ptr ptr) msvcp140.?out@?$codecvt@GDU_Mbstatet@@@std@@QBEHAAU_Mbstatet@@PBG1AAPBGPAD3AAPAD@Z
 @ cdecl -arch=win64 ?out@?$codecvt@GDU_Mbstatet@@@std@@QEBAHAEAU_Mbstatet@@PEBG1AEAPEBGPEAD3AEAPEAD@Z(ptr ptr ptr ptr ptr ptr ptr ptr) msvcp140.?out@?$codecvt@GDU_Mbstatet@@@std@@QEBAHAEAU_Mbstatet@@PEBG1AEAPEBGPEAD3AEAPEAD@Z
-@ stub -arch=arm ?out@?$codecvt@_SDU_Mbstatet@@@std@@QBAHAAU_Mbstatet@@PB_S1AAPB_SPAD3AAPAD@Z
-@ stub -arch=i386 ?out@?$codecvt@_SDU_Mbstatet@@@std@@QBEHAAU_Mbstatet@@PB_S1AAPB_SPAD3AAPAD@Z
-@ stub -arch=win64 ?out@?$codecvt@_SDU_Mbstatet@@@std@@QEBAHAEAU_Mbstatet@@PEB_S1AEAPEB_SPEAD3AEAPEAD@Z
+@ cdecl -arch=arm ?out@?$codecvt@_SDU_Mbstatet@@@std@@QBAHAAU_Mbstatet@@PB_S1AAPB_SPAD3AAPAD@Z(ptr ptr ptr ptr ptr ptr ptr ptr) msvcp140.?out@?$codecvt@_SDU_Mbstatet@@@std@@QBAHAAU_Mbstatet@@PB_S1AAPB_SPAD3AAPAD@Z
+@ thiscall -arch=i386 ?out@?$codecvt@_SDU_Mbstatet@@@std@@QBEHAAU_Mbstatet@@PB_S1AAPB_SPAD3AAPAD@Z(ptr ptr ptr ptr ptr ptr ptr ptr) msvcp140.?out@?$codecvt@_SDU_Mbstatet@@@std@@QBEHAAU_Mbstatet@@PB_S1AAPB_SPAD3AAPAD@Z
+@ cdecl -arch=win64 ?out@?$codecvt@_SDU_Mbstatet@@@std@@QEBAHAEAU_Mbstatet@@PEB_S1AEAPEB_SPEAD3AEAPEAD@Z(ptr ptr ptr ptr ptr ptr ptr ptr) msvcp140.?out@?$codecvt@_SDU_Mbstatet@@@std@@QEBAHAEAU_Mbstatet@@PEB_S1AEAPEB_SPEAD3AEAPEAD@Z
 @ cdecl -arch=arm ?out@?$codecvt@_UDU_Mbstatet@@@std@@QBAHAAU_Mbstatet@@PB_U1AAPB_UPAD3AAPAD@Z(ptr ptr ptr ptr ptr ptr ptr ptr) msvcp140.?out@?$codecvt@_UDU_Mbstatet@@@std@@QBAHAAU_Mbstatet@@PB_U1AAPB_UPAD3AAPAD@Z
 @ thiscall -arch=i386 ?out@?$codecvt@_UDU_Mbstatet@@@std@@QBEHAAU_Mbstatet@@PB_U1AAPB_UPAD3AAPAD@Z(ptr ptr ptr ptr ptr ptr ptr ptr) msvcp140.?out@?$codecvt@_UDU_Mbstatet@@@std@@QBEHAAU_Mbstatet@@PB_U1AAPB_UPAD3AAPAD@Z
 @ cdecl -arch=win64 ?out@?$codecvt@_UDU_Mbstatet@@@std@@QEBAHAEAU_Mbstatet@@PEB_U1AEAPEB_UPEAD3AEAPEAD@Z(ptr ptr ptr ptr ptr ptr ptr ptr) msvcp140.?out@?$codecvt@_UDU_Mbstatet@@@std@@QEBAHAEAU_Mbstatet@@PEB_U1AEAPEB_UPEAD3AEAPEAD@Z
@@ -3541,9 +3541,9 @@
 @ cdecl -arch=arm ?unshift@?$codecvt@GDU_Mbstatet@@@std@@QBAHAAU_Mbstatet@@PAD1AAPAD@Z(ptr ptr ptr ptr ptr) msvcp140.?unshift@?$codecvt@GDU_Mbstatet@@@std@@QBAHAAU_Mbstatet@@PAD1AAPAD@Z
 @ thiscall -arch=i386 ?unshift@?$codecvt@GDU_Mbstatet@@@std@@QBEHAAU_Mbstatet@@PAD1AAPAD@Z(ptr ptr ptr ptr ptr) msvcp140.?unshift@?$codecvt@GDU_Mbstatet@@@std@@QBEHAAU_Mbstatet@@PAD1AAPAD@Z
 @ cdecl -arch=win64 ?unshift@?$codecvt@GDU_Mbstatet@@@std@@QEBAHAEAU_Mbstatet@@PEAD1AEAPEAD@Z(ptr ptr ptr ptr ptr) msvcp140.?unshift@?$codecvt@GDU_Mbstatet@@@std@@QEBAHAEAU_Mbstatet@@PEAD1AEAPEAD@Z
-@ stub -arch=arm ?unshift@?$codecvt@_SDU_Mbstatet@@@std@@QBAHAAU_Mbstatet@@PAD1AAPAD@Z
-@ stub -arch=i386 ?unshift@?$codecvt@_SDU_Mbstatet@@@std@@QBEHAAU_Mbstatet@@PAD1AAPAD@Z
-@ stub -arch=win64 ?unshift@?$codecvt@_SDU_Mbstatet@@@std@@QEBAHAEAU_Mbstatet@@PEAD1AEAPEAD@Z
+@ cdecl -arch=arm ?unshift@?$codecvt@_SDU_Mbstatet@@@std@@QBAHAAU_Mbstatet@@PAD1AAPAD@Z(ptr ptr ptr ptr ptr) msvcp140.?unshift@?$codecvt@_SDU_Mbstatet@@@std@@QBAHAAU_Mbstatet@@PAD1AAPAD@Z
+@ thiscall -arch=i386 ?unshift@?$codecvt@_SDU_Mbstatet@@@std@@QBEHAAU_Mbstatet@@PAD1AAPAD@Z(ptr ptr ptr ptr ptr) msvcp140.?unshift@?$codecvt@_SDU_Mbstatet@@@std@@QBEHAAU_Mbstatet@@PAD1AAPAD@Z
+@ cdecl -arch=win64 ?unshift@?$codecvt@_SDU_Mbstatet@@@std@@QEBAHAEAU_Mbstatet@@PEAD1AEAPEAD@Z(ptr ptr ptr ptr ptr) msvcp140.?unshift@?$codecvt@_SDU_Mbstatet@@@std@@QEBAHAEAU_Mbstatet@@PEAD1AEAPEAD@Z
 @ cdecl -arch=arm ?unshift@?$codecvt@_UDU_Mbstatet@@@std@@QBAHAAU_Mbstatet@@PAD1AAPAD@Z(ptr ptr ptr ptr ptr) msvcp140.?unshift@?$codecvt@_UDU_Mbstatet@@@std@@QBAHAAU_Mbstatet@@PAD1AAPAD@Z
 @ thiscall -arch=i386 ?unshift@?$codecvt@_UDU_Mbstatet@@@std@@QBEHAAU_Mbstatet@@PAD1AAPAD@Z(ptr ptr ptr ptr ptr) msvcp140.?unshift@?$codecvt@_UDU_Mbstatet@@@std@@QBEHAAU_Mbstatet@@PAD1AAPAD@Z
 @ cdecl -arch=win64 ?unshift@?$codecvt@_UDU_Mbstatet@@@std@@QEBAHAEAU_Mbstatet@@PEAD1AEAPEAD@Z(ptr ptr ptr ptr ptr) msvcp140.?unshift@?$codecvt@_UDU_Mbstatet@@@std@@QEBAHAEAU_Mbstatet@@PEAD1AEAPEAD@Z
-- 
GitLab

From 9b9f7a007786b32a4c80f69ceb6753acdc8c2091 Mon Sep 17 00:00:00 2001
From: Zebediah Figura <zfigura@codeweavers.com>
Date: Tue, 21 Nov 2023 15:59:41 -0600
Subject: [PATCH] msvcrt: Perform a base-10 logarithm using integer math.

Wine-Bug: https://bugs.winehq.org/show_bug.cgi?id=55918
---
 dlls/msvcrt/bnum.h   |  2 +-
 dlls/msvcrt/printf.h | 18 ++++++++++++++++--
 2 files changed, 17 insertions(+), 3 deletions(-)

diff --git a/dlls/msvcrt/bnum.h b/dlls/msvcrt/bnum.h
index a1d3133c3e6..3e42f61e3e1 100644
--- a/dlls/msvcrt/bnum.h
+++ b/dlls/msvcrt/bnum.h
@@ -22,7 +22,7 @@
 #define EXP_BITS 11
 #define MANT_BITS 53
 
-static const int p10s[] = { 1, 10, 100, 1000, 10000, 100000, 1000000, 10000000, 100000000 };
+static const int p10s[] = { 1, 10, 100, 1000, 10000, 100000, 1000000, 10000000, 100000000, 1000000000 };
 
 #define LIMB_DIGITS 9           /* each DWORD stores up to 9 digits */
 #define LIMB_MAX 1000000000     /* 10^9 */
diff --git a/dlls/msvcrt/printf.h b/dlls/msvcrt/printf.h
index c34479c5688..be30d6ae719 100644
--- a/dlls/msvcrt/printf.h
+++ b/dlls/msvcrt/printf.h
@@ -135,6 +135,20 @@ static inline int mbstowcs_len(wchar_t *wcstr, const char *mbstr,
     }
     return wlen;
 }
+
+static inline unsigned int log2i(unsigned int x)
+{
+    ULONG result;
+    _BitScanReverse(&result, x);
+    return result;
+}
+
+static inline unsigned int log10i(unsigned int x)
+{
+    unsigned int t = ((log2i(x) + 1) * 1233) / 4096;
+    return t - (x < p10s[t]);
+}
+
 #endif
 
 static inline int FUNC_NAME(pf_output_wstr)(FUNC_NAME(puts_clbk) pf_puts, void *puts_ctx,
@@ -635,7 +649,7 @@ static inline int FUNC_NAME(pf_output_fp)(FUNC_NAME(puts_clbk) pf_puts, void *pu
     if(!b->data[bnum_idx(b, b->e-1)])
         first_limb_len = 1;
     else
-        first_limb_len = floor(log10(b->data[bnum_idx(b, b->e - 1)])) + 1;
+        first_limb_len = log10i(b->data[bnum_idx(b, b->e - 1)]) + 1;
     radix_pos = first_limb_len + LIMB_DIGITS + e10;
 
     round_pos = flags->Precision;
@@ -700,7 +714,7 @@ static inline int FUNC_NAME(pf_output_fp)(FUNC_NAME(puts_clbk) pf_puts, void *pu
                 if(!b->data[bnum_idx(b, b->e-1)])
                     i = 1;
                 else
-                    i = floor(log10(b->data[bnum_idx(b, b->e-1)])) + 1;
+                    i = log10i(b->data[bnum_idx(b, b->e-1)]) + 1;
                 if(i != first_limb_len) {
                     first_limb_len = i;
                     radix_pos++;
-- 
GitLab

From adfb58f17d492c5451fdb5dfcf111303b9d1eaad Mon Sep 17 00:00:00 2001
From: Tim Clem <tclem@codeweavers.com>
Date: Thu, 16 Nov 2023 12:01:59 -0800
Subject: [PATCH] msvcrt: Pass INT_MAX as the length in implementations of the
 _mbscoll family.

A length of -1 has no special meaning for the mbsn*coll functions, and
since it is > INT_MAX, it will eventually trigger _invalid_parameter in
_strnicmp_l in newer versions of msvcrt.
---
 dlls/msvcrt/mbcs.c | 8 ++++----
 1 file changed, 4 insertions(+), 4 deletions(-)

diff --git a/dlls/msvcrt/mbcs.c b/dlls/msvcrt/mbcs.c
index 9b52170d4e9..385274a44a4 100644
--- a/dlls/msvcrt/mbcs.c
+++ b/dlls/msvcrt/mbcs.c
@@ -1118,7 +1118,7 @@ int CDECL _mbsnbicoll_l(const unsigned char *str1, const unsigned char *str2, si
  */
 int CDECL _mbsicoll_l(const unsigned char *str1, const unsigned char *str2, _locale_t locale)
 {
-    return _mbsnbicoll_l(str1, str2, -1, locale);
+    return _mbsnbicoll_l(str1, str2, INT_MAX, locale);
 }
 
 /*********************************************************************
@@ -1138,7 +1138,7 @@ int CDECL _mbsicoll(const unsigned char* str, const unsigned char* cmp)
     return CompareStringA(get_mbcinfo()->mblcid, NORM_IGNORECASE,
             (const char*)str, -1, (const char*)cmp, -1)-CSTR_EQUAL;
 #else
-    return _mbsnbicoll_l(str, cmp, -1, NULL);
+    return _mbsnbicoll_l(str, cmp, INT_MAX, NULL);
 #endif
 }
 
@@ -1164,7 +1164,7 @@ int CDECL _mbsnbcoll_l(const unsigned char *str1, const unsigned char *str2, siz
  */
 int CDECL _mbscoll_l(const unsigned char *str1, const unsigned char *str2, _locale_t locale)
 {
-    return _mbsnbcoll_l(str1, str2, -1, locale);
+    return _mbsnbcoll_l(str1, str2, INT_MAX, locale);
 }
 
 /*********************************************************************
@@ -1184,7 +1184,7 @@ int CDECL _mbscoll(const unsigned char* str, const unsigned char* cmp)
     return CompareStringA(get_mbcinfo()->mblcid, 0,
             (const char*)str, -1, (const char*)cmp, -1)-CSTR_EQUAL;
 #else
-    return _mbsnbcoll_l(str, cmp, -1, NULL);
+    return _mbsnbcoll_l(str, cmp, INT_MAX, NULL);
 #endif
 }
 
-- 
GitLab

From 6a78f71f3c3d6b0298c556858dcd1ff7f2878e14 Mon Sep 17 00:00:00 2001
From: Piotr Caban <piotr@codeweavers.com>
Date: Wed, 29 Nov 2023 12:06:02 +0100
Subject: [PATCH] msvcrt: Fix string size passed to CompareString in
 _mbsnbcoll_l.

Wine-Bug: https://bugs.winehq.org/show_bug.cgi?id=55959
---
 dlls/msvcrt/mbcs.c | 8 ++++++--
 1 file changed, 6 insertions(+), 2 deletions(-)

diff --git a/dlls/msvcrt/mbcs.c b/dlls/msvcrt/mbcs.c
index 2e228d77811..ce8a3115eeb 100644
--- a/dlls/msvcrt/mbcs.c
+++ b/dlls/msvcrt/mbcs.c
@@ -1110,7 +1110,9 @@ int CDECL _mbsnbicoll_l(const unsigned char *str1, const unsigned char *str2, si
 
     if(!mbcinfo->ismbcodepage)
         return _strnicoll_l((const char*)str1, (const char*)str2, len, locale);
-    return CompareStringA(mbcinfo->mblcid, NORM_IGNORECASE, (const char*)str1, len, (const char*)str2, len)-CSTR_EQUAL;
+    return CompareStringA(mbcinfo->mblcid, NORM_IGNORECASE,
+            (const char*)str1, strnlen((const char*)str1, len),
+            (const char*)str2, strnlen((const char*)str2, len)) - CSTR_EQUAL;
 }
 
 /*********************************************************************
@@ -1156,7 +1158,9 @@ int CDECL _mbsnbcoll_l(const unsigned char *str1, const unsigned char *str2, siz
 
     if(!mbcinfo->ismbcodepage)
         return _strncoll_l((const char*)str1, (const char*)str2, len, locale);
-    return CompareStringA(mbcinfo->mblcid, 0, (const char*)str1, len, (const char*)str2, len)-CSTR_EQUAL;
+    return CompareStringA(mbcinfo->mblcid, 0,
+            (const char*)str1, strnlen((const char*)str1, len),
+            (const char*)str2, strnlen((const char*)str2, len)) - CSTR_EQUAL;
 }
 
 /*********************************************************************
-- 
GitLab

From 62a979347a4dc1bd68f79b86397de85c016ec588 Mon Sep 17 00:00:00 2001
From: Zebediah Figura <zfigura@codeweavers.com>
Date: Wed, 29 Nov 2023 17:00:30 -0600
Subject: [PATCH] ntdll: Allow specifying per-process channels.
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: 8bit

Based on a patch by Michael Müller.
---
 dlls/ntdll/unix/debug.c | 20 ++++++++++++++++----
 1 file changed, 16 insertions(+), 4 deletions(-)

diff --git a/dlls/ntdll/unix/debug.c b/dlls/ntdll/unix/debug.c
index 11bb7a2df22..e73ee05fc03 100644
--- a/dlls/ntdll/unix/debug.c
+++ b/dlls/ntdll/unix/debug.c
@@ -129,7 +129,7 @@ static void add_option( const char *name, unsigned char set, unsigned char clear
 }
 
 /* parse a set of debugging option specifications and add them to the option list */
-static void parse_options( const char *str )
+static void parse_options( const char *str, const char *app_name )
 {
     char *opt, *next, *options;
     unsigned int i;
@@ -137,11 +137,18 @@ static void parse_options( const char *str )
     if (!(options = strdup(str))) return;
     for (opt = options; opt; opt = next)
     {
-        const char *p;
+        char *p;
         unsigned char set = 0, clear = 0;
 
         if ((next = strchr( opt, ',' ))) *next++ = 0;
 
+        if ((p = strchr( opt, ':' )))
+        {
+            *p = 0;
+            if (strcasecmp( opt, app_name )) continue;
+            opt = p + 1;
+        }
+
         p = opt + strcspn( opt, "+-" );
         if (!p[0]) p = opt;  /* assume it's a debug channel name */
 
@@ -182,7 +189,7 @@ static void debug_usage(void)
 {
     static const char usage[] =
         "Syntax of the WINEDEBUG variable:\n"
-        "  WINEDEBUG=[class]+xxx,[class]-yyy,...\n\n"
+        "  WINEDEBUG=[[process:]class]+xxx,[[process:]class]-yyy,...\n\n"
         "Example: WINEDEBUG=+relay,warn-heap\n"
         "    turns on relay traces, disable heap warnings\n"
         "Available message classes: err, warn, fixme, trace\n";
@@ -194,6 +201,7 @@ static void debug_usage(void)
 static void init_options(void)
 {
     char *wine_debug = getenv("WINEDEBUG");
+    const char *app_name, *p;
     struct stat st1, st2;
 
     nb_debug_options = 0;
@@ -208,7 +216,11 @@ static void init_options(void)
     }
     if (!wine_debug) return;
     if (!strcmp( wine_debug, "help" )) debug_usage();
-    parse_options( wine_debug );
+
+    app_name = main_argv[1];
+    while ((p = strpbrk( app_name, "/\\" ))) app_name = p + 1;
+
+    parse_options( wine_debug, app_name );
 }
 
 /***********************************************************************
-- 
GitLab

From ae32b2f45243462971d4581a0214d4834e715cf2 Mon Sep 17 00:00:00 2001
From: Piotr Caban <piotr@codeweavers.com>
Date: Thu, 30 Nov 2023 11:41:51 +0100
Subject: [PATCH] msvcrt: Initialize writable environment block in env_set.

---
 dlls/msvcrt/environ.c | 8 +++-----
 1 file changed, 3 insertions(+), 5 deletions(-)

diff --git a/dlls/msvcrt/environ.c b/dlls/msvcrt/environ.c
index 9e358d971f9..063a9254c67 100644
--- a/dlls/msvcrt/environ.c
+++ b/dlls/msvcrt/environ.c
@@ -155,6 +155,7 @@ static int env_set(char **env, wchar_t **wenv)
             GetLastError() != ERROR_ENVVAR_NOT_FOUND)
         return -1;
 
+    if (env_init(FALSE, TRUE)) return -1;
     *eq = 0;
     idx = env_get_index(*env);
     *eq = '=';
@@ -180,6 +181,8 @@ static int env_set(char **env, wchar_t **wenv)
     }
 
     if (!MSVCRT__wenviron) return 0;
+    if (MSVCRT__wenviron == MSVCRT___winitenv)
+        if (env_init(TRUE, TRUE)) return -1;
     idx = wenv_get_index(*wenv);
     *weq = '=';
     if (!weq[1])
@@ -264,11 +267,6 @@ static int putenv_helper(const char *name, const char *val, const char *eq)
     char *env;
     int r;
 
-    _lock(_ENV_LOCK);
-    r = env_init(FALSE, TRUE);
-    _unlock(_ENV_LOCK);
-    if (r) return -1;
-
     if (eq)
     {
         env = strdup(name);
-- 
GitLab

From f97ad2340d9869a5994c1ab666c1b0217e67a7f0 Mon Sep 17 00:00:00 2001
From: Vijay Kiran Kamuju <infyquest@gmail.com>
Date: Mon, 4 Dec 2023 16:46:43 +0100
Subject: [PATCH 1/3] msvcm80: Add stub for ThrowModuleLoadException(String)
 function.

---
 dlls/msvcm80/msvcm80.spec | 4 ++--
 dlls/msvcm80/msvcm_main.c | 6 ++++++
 dlls/msvcm90/msvcm90.spec | 4 ++--
 3 files changed, 10 insertions(+), 4 deletions(-)

diff --git a/dlls/msvcm80/msvcm80.spec b/dlls/msvcm80/msvcm80.spec
index 86e50bfb402..b35a0ba7d89 100644
--- a/dlls/msvcm80/msvcm80.spec
+++ b/dlls/msvcm80/msvcm80.spec
@@ -3,8 +3,8 @@
 @ cdecl ?DoDllLanguageSupportValidation@<CrtImplementationDetails>@@YAXXZ() CrtImplementationDetails_DoDllLanguageSupportValidation
 @ cdecl -arch=win32 ?RegisterModuleUninitializer@<CrtImplementationDetails>@@YAXP$AAVEventHandler@System@@@Z(ptr) CrtImplementationDetails_RegisterModuleUninitializer
 @ cdecl -arch=win64 ?RegisterModuleUninitializer@<CrtImplementationDetails>@@YAXPE$AAVEventHandler@System@@@Z(ptr) CrtImplementationDetails_RegisterModuleUninitializer
-@ stub -arch=win32 ?ThrowModuleLoadException@<CrtImplementationDetails>@@YAXP$AAVString@System@@@Z
-@ stub -arch=win64 ?ThrowModuleLoadException@<CrtImplementationDetails>@@YAXPE$AAVString@System@@@Z
+@ cdecl -arch=win32 ?ThrowModuleLoadException@<CrtImplementationDetails>@@YAXP$AAVString@System@@@Z(ptr) CrtImplementationDetails_ThrowModuleLoadException
+@ cdecl -arch=win64 ?ThrowModuleLoadException@<CrtImplementationDetails>@@YAXPE$AAVString@System@@@Z(ptr) CrtImplementationDetails_ThrowModuleLoadException
 @ stub -arch=win32 ?ThrowModuleLoadException@<CrtImplementationDetails>@@YAXP$AAVString@System@@P$AAVException@3@@Z
 @ stub -arch=win64 ?ThrowModuleLoadException@<CrtImplementationDetails>@@YAXPE$AAVString@System@@PE$AAVException@3@@Z
 @ stub -arch=win32 ?ThrowNestedModuleLoadException@<CrtImplementationDetails>@@YAXP$AAVException@System@@0@Z
diff --git a/dlls/msvcm80/msvcm_main.c b/dlls/msvcm80/msvcm_main.c
index 9ebf809ab54..badb9a1b5f8 100644
--- a/dlls/msvcm80/msvcm_main.c
+++ b/dlls/msvcm80/msvcm_main.c
@@ -43,3 +43,9 @@ void __cdecl __setusermatherr_m(void *handler)
 {
     FIXME("%p: stub\n", handler);
 }
+
+/* void __cdecl <CrtImplementationDetails>::ThrowModuleLoadException(System.String^) */
+void __cdecl CrtImplementationDetails_ThrowModuleLoadException(void* message)
+{
+    FIXME("%p: stub\n", message);
+}
diff --git a/dlls/msvcm90/msvcm90.spec b/dlls/msvcm90/msvcm90.spec
index 9d57dc75c08..80c661e775e 100644
--- a/dlls/msvcm90/msvcm90.spec
+++ b/dlls/msvcm90/msvcm90.spec
@@ -3,8 +3,8 @@
 @ cdecl ?DoDllLanguageSupportValidation@<CrtImplementationDetails>@@YAXXZ() CrtImplementationDetails_DoDllLanguageSupportValidation
 @ cdecl -arch=win32 ?RegisterModuleUninitializer@<CrtImplementationDetails>@@YAXP$AAVEventHandler@System@@@Z(ptr) CrtImplementationDetails_RegisterModuleUninitializer
 @ cdecl -arch=win64 ?RegisterModuleUninitializer@<CrtImplementationDetails>@@YAXPE$AAVEventHandler@System@@@Z(ptr) CrtImplementationDetails_RegisterModuleUninitializer
-@ stub -arch=win32 ?ThrowModuleLoadException@<CrtImplementationDetails>@@YAXP$AAVString@System@@@Z
-@ stub -arch=win64 ?ThrowModuleLoadException@<CrtImplementationDetails>@@YAXPE$AAVString@System@@@Z
+@ cdecl -arch=win32 ?ThrowModuleLoadException@<CrtImplementationDetails>@@YAXP$AAVString@System@@@Z(ptr) CrtImplementationDetails_ThrowModuleLoadException
+@ cdecl -arch=win64 ?ThrowModuleLoadException@<CrtImplementationDetails>@@YAXPE$AAVString@System@@@Z(ptr) CrtImplementationDetails_ThrowModuleLoadException
 @ stub -arch=win32 ?ThrowModuleLoadException@<CrtImplementationDetails>@@YAXP$AAVString@System@@P$AAVException@3@@Z
 @ stub -arch=win64 ?ThrowModuleLoadException@<CrtImplementationDetails>@@YAXPE$AAVString@System@@PE$AAVException@3@@Z
 @ stub -arch=win32 ?ThrowNestedModuleLoadException@<CrtImplementationDetails>@@YAXP$AAVException@System@@0@Z
-- 
GitLab


From 9bec22a2e25f9f2c66df1b3b6269f0140922b191 Mon Sep 17 00:00:00 2001
From: Vijay Kiran Kamuju <infyquest@gmail.com>
Date: Mon, 4 Dec 2023 16:49:08 +0100
Subject: [PATCH 2/3] msvcm80: Add stub for ThrowModuleLoadException(String,
 Exception) function.

Wine-Bug: https://bugs.winehq.org/show_bug.cgi?id=34537
---
 dlls/msvcm80/msvcm80.spec | 4 ++--
 dlls/msvcm80/msvcm_main.c | 6 ++++++
 dlls/msvcm90/msvcm90.spec | 4 ++--
 3 files changed, 10 insertions(+), 4 deletions(-)

diff --git a/dlls/msvcm80/msvcm80.spec b/dlls/msvcm80/msvcm80.spec
index b35a0ba7d89..211dcd678b8 100644
--- a/dlls/msvcm80/msvcm80.spec
+++ b/dlls/msvcm80/msvcm80.spec
@@ -5,8 +5,8 @@
 @ cdecl -arch=win64 ?RegisterModuleUninitializer@<CrtImplementationDetails>@@YAXPE$AAVEventHandler@System@@@Z(ptr) CrtImplementationDetails_RegisterModuleUninitializer
 @ cdecl -arch=win32 ?ThrowModuleLoadException@<CrtImplementationDetails>@@YAXP$AAVString@System@@@Z(ptr) CrtImplementationDetails_ThrowModuleLoadException
 @ cdecl -arch=win64 ?ThrowModuleLoadException@<CrtImplementationDetails>@@YAXPE$AAVString@System@@@Z(ptr) CrtImplementationDetails_ThrowModuleLoadException
-@ stub -arch=win32 ?ThrowModuleLoadException@<CrtImplementationDetails>@@YAXP$AAVString@System@@P$AAVException@3@@Z
-@ stub -arch=win64 ?ThrowModuleLoadException@<CrtImplementationDetails>@@YAXPE$AAVString@System@@PE$AAVException@3@@Z
+@ cdecl -arch=win32 ?ThrowModuleLoadException@<CrtImplementationDetails>@@YAXP$AAVString@System@@P$AAVException@3@@Z(ptr ptr) CrtImplementationDetails_ThrowModuleLoadException_inner
+@ cdecl -arch=win64 ?ThrowModuleLoadException@<CrtImplementationDetails>@@YAXPE$AAVString@System@@PE$AAVException@3@@Z(ptr ptr) CrtImplementationDetails_ThrowModuleLoadException_inner
 @ stub -arch=win32 ?ThrowNestedModuleLoadException@<CrtImplementationDetails>@@YAXP$AAVException@System@@0@Z
 @ stub -arch=win64 ?ThrowNestedModuleLoadException@<CrtImplementationDetails>@@YAXPE$AAVException@System@@0@Z
 @ stub -arch=win32 ?_Addstd@ios_base@std@@SAXPAV12@@Z
diff --git a/dlls/msvcm80/msvcm_main.c b/dlls/msvcm80/msvcm_main.c
index badb9a1b5f8..680636d5418 100644
--- a/dlls/msvcm80/msvcm_main.c
+++ b/dlls/msvcm80/msvcm_main.c
@@ -49,3 +49,9 @@ void __cdecl CrtImplementationDetails_ThrowModuleLoadException(void* message)
 {
     FIXME("%p: stub\n", message);
 }
+
+/* void __cdecl <CrtImplementationDetails>::ThrowModuleLoadException(System.String^, System.Exception^) */
+void __cdecl CrtImplementationDetails_ThrowModuleLoadException_inner(void* message, void* inner)
+{
+    FIXME("%p %p: stub\n", message, inner);
+}
diff --git a/dlls/msvcm90/msvcm90.spec b/dlls/msvcm90/msvcm90.spec
index 80c661e775e..cb555442ed0 100644
--- a/dlls/msvcm90/msvcm90.spec
+++ b/dlls/msvcm90/msvcm90.spec
@@ -5,8 +5,8 @@
 @ cdecl -arch=win64 ?RegisterModuleUninitializer@<CrtImplementationDetails>@@YAXPE$AAVEventHandler@System@@@Z(ptr) CrtImplementationDetails_RegisterModuleUninitializer
 @ cdecl -arch=win32 ?ThrowModuleLoadException@<CrtImplementationDetails>@@YAXP$AAVString@System@@@Z(ptr) CrtImplementationDetails_ThrowModuleLoadException
 @ cdecl -arch=win64 ?ThrowModuleLoadException@<CrtImplementationDetails>@@YAXPE$AAVString@System@@@Z(ptr) CrtImplementationDetails_ThrowModuleLoadException
-@ stub -arch=win32 ?ThrowModuleLoadException@<CrtImplementationDetails>@@YAXP$AAVString@System@@P$AAVException@3@@Z
-@ stub -arch=win64 ?ThrowModuleLoadException@<CrtImplementationDetails>@@YAXPE$AAVString@System@@PE$AAVException@3@@Z
+@ cdecl -arch=win32 ?ThrowModuleLoadException@<CrtImplementationDetails>@@YAXP$AAVString@System@@P$AAVException@3@@Z(ptr ptr) CrtImplementationDetails_ThrowModuleLoadException_inner
+@ cdecl -arch=win64 ?ThrowModuleLoadException@<CrtImplementationDetails>@@YAXPE$AAVString@System@@PE$AAVException@3@@Z(ptr ptr) CrtImplementationDetails_ThrowModuleLoadException_inner
 @ stub -arch=win32 ?ThrowNestedModuleLoadException@<CrtImplementationDetails>@@YAXP$AAVException@System@@0@Z
 @ stub -arch=win64 ?ThrowNestedModuleLoadException@<CrtImplementationDetails>@@YAXPE$AAVException@System@@0@Z
 @ stub -arch=win32 ?_Addstd@ios_base@std@@SAXPAV12@@Z
-- 
GitLab


From 63ccb5826db1884f5f3946f1800657e3ab31b122 Mon Sep 17 00:00:00 2001
From: Vijay Kiran Kamuju <infyquest@gmail.com>
Date: Tue, 5 Dec 2023 21:05:17 +0100
Subject: [PATCH 3/3] msvcm80: Add stub for ThrowNestedLoadModuleException
 function.

---
 dlls/msvcm80/msvcm80.spec | 4 ++--
 dlls/msvcm80/msvcm_main.c | 6 ++++++
 dlls/msvcm90/msvcm90.spec | 4 ++--
 3 files changed, 10 insertions(+), 4 deletions(-)

diff --git a/dlls/msvcm80/msvcm80.spec b/dlls/msvcm80/msvcm80.spec
index 211dcd678b8..89cabd80f34 100644
--- a/dlls/msvcm80/msvcm80.spec
+++ b/dlls/msvcm80/msvcm80.spec
@@ -7,8 +7,8 @@
 @ cdecl -arch=win64 ?ThrowModuleLoadException@<CrtImplementationDetails>@@YAXPE$AAVString@System@@@Z(ptr) CrtImplementationDetails_ThrowModuleLoadException
 @ cdecl -arch=win32 ?ThrowModuleLoadException@<CrtImplementationDetails>@@YAXP$AAVString@System@@P$AAVException@3@@Z(ptr ptr) CrtImplementationDetails_ThrowModuleLoadException_inner
 @ cdecl -arch=win64 ?ThrowModuleLoadException@<CrtImplementationDetails>@@YAXPE$AAVString@System@@PE$AAVException@3@@Z(ptr ptr) CrtImplementationDetails_ThrowModuleLoadException_inner
-@ stub -arch=win32 ?ThrowNestedModuleLoadException@<CrtImplementationDetails>@@YAXP$AAVException@System@@0@Z
-@ stub -arch=win64 ?ThrowNestedModuleLoadException@<CrtImplementationDetails>@@YAXPE$AAVException@System@@0@Z
+@ cdecl -arch=win32 ?ThrowNestedModuleLoadException@<CrtImplementationDetails>@@YAXP$AAVException@System@@0@Z(ptr ptr) CrtImplementationDetails_ThrowNestedModuleLoadException
+@ cdecl -arch=win64 ?ThrowNestedModuleLoadException@<CrtImplementationDetails>@@YAXPE$AAVException@System@@0@Z(ptr ptr) CrtImplementationDetails_ThrowNestedModuleLoadException
 @ stub -arch=win32 ?_Addstd@ios_base@std@@SAXPAV12@@Z
 @ stub -arch=win64 ?_Addstd@ios_base@std@@SAXPEAV12@@Z
 @ stub ?_Atexit@@YAXP6AXXZ@Z
diff --git a/dlls/msvcm80/msvcm_main.c b/dlls/msvcm80/msvcm_main.c
index 680636d5418..9b7cd18dcb0 100644
--- a/dlls/msvcm80/msvcm_main.c
+++ b/dlls/msvcm80/msvcm_main.c
@@ -55,3 +55,9 @@ void __cdecl CrtImplementationDetails_ThrowModuleLoadException_inner(void* messa
 {
     FIXME("%p %p: stub\n", message, inner);
 }
+
+/* void __cdecl <CrtImplementationDetails>::ThrowNestedModuleLoadException(System.Exception^, System.Exception^) */
+void __cdecl CrtImplementationDetails_ThrowNestedModuleLoadException(void* inner, void* nested)
+{
+    FIXME("%p %p: stub\n", inner, nested);
+}
diff --git a/dlls/msvcm90/msvcm90.spec b/dlls/msvcm90/msvcm90.spec
index cb555442ed0..3cd61344fe4 100644
--- a/dlls/msvcm90/msvcm90.spec
+++ b/dlls/msvcm90/msvcm90.spec
@@ -7,8 +7,8 @@
 @ cdecl -arch=win64 ?ThrowModuleLoadException@<CrtImplementationDetails>@@YAXPE$AAVString@System@@@Z(ptr) CrtImplementationDetails_ThrowModuleLoadException
 @ cdecl -arch=win32 ?ThrowModuleLoadException@<CrtImplementationDetails>@@YAXP$AAVString@System@@P$AAVException@3@@Z(ptr ptr) CrtImplementationDetails_ThrowModuleLoadException_inner
 @ cdecl -arch=win64 ?ThrowModuleLoadException@<CrtImplementationDetails>@@YAXPE$AAVString@System@@PE$AAVException@3@@Z(ptr ptr) CrtImplementationDetails_ThrowModuleLoadException_inner
-@ stub -arch=win32 ?ThrowNestedModuleLoadException@<CrtImplementationDetails>@@YAXP$AAVException@System@@0@Z
-@ stub -arch=win64 ?ThrowNestedModuleLoadException@<CrtImplementationDetails>@@YAXPE$AAVException@System@@0@Z
+@ cdecl -arch=win32 ?ThrowNestedModuleLoadException@<CrtImplementationDetails>@@YAXP$AAVException@System@@0@Z(ptr ptr) CrtImplementationDetails_ThrowNestedModuleLoadException
+@ cdecl -arch=win64 ?ThrowNestedModuleLoadException@<CrtImplementationDetails>@@YAXPE$AAVException@System@@0@Z(ptr ptr) CrtImplementationDetails_ThrowNestedModuleLoadException
 @ stub -arch=win32 ?_Addstd@ios_base@std@@SAXPAV12@@Z
 @ stub -arch=win64 ?_Addstd@ios_base@std@@SAXPEAV12@@Z
 @ stub ?_Atexit@@YAXP6AXXZ@Z
-- 
GitLab

From 5af51ce0af881ad0fbf63d8337dadfa8f7d4981e Mon Sep 17 00:00:00 2001
From: Piotr Caban <piotr@codeweavers.com>
Date: Tue, 5 Dec 2023 18:25:27 +0100
Subject: [PATCH 1/2] msvcrt: Accept <> characters in string literals in
 demangler.

---
 dlls/msvcrt/undname.c | 3 ++-
 1 file changed, 2 insertions(+), 1 deletion(-)

diff --git a/dlls/msvcrt/undname.c b/dlls/msvcrt/undname.c
index 89052d433b0..557f1ce13e0 100644
--- a/dlls/msvcrt/undname.c
+++ b/dlls/msvcrt/undname.c
@@ -591,7 +591,8 @@ static char* get_literal_string(struct parsed_symbol* sym)
         if (!((*sym->current >= 'A' && *sym->current <= 'Z') ||
               (*sym->current >= 'a' && *sym->current <= 'z') ||
               (*sym->current >= '0' && *sym->current <= '9') ||
-              *sym->current == '_' || *sym->current == '$')) {
+              *sym->current == '_' || *sym->current == '$' ||
+              *sym->current == '<' || *sym->current == '>')) {
             TRACE("Failed at '%c' in %s\n", *sym->current, debugstr_a(ptr));
             return NULL;
         }
-- 
GitLab


From bdd04f5f714c7bed42c30687977c4e40662ed519 Mon Sep 17 00:00:00 2001
From: Piotr Caban <piotr@codeweavers.com>
Date: Tue, 5 Dec 2023 19:25:59 +0100
Subject: [PATCH 2/2] msvcrt: Add partial support for managed handle
 demangling.

---
 dlls/msvcrt/tests/cpp.c |  4 ++++
 dlls/msvcrt/undname.c   | 22 ++++++++++++++++++++++
 2 files changed, 26 insertions(+)

diff --git a/dlls/msvcrt/tests/cpp.c b/dlls/msvcrt/tests/cpp.c
index 2dec315ba68..d230659404d 100644
--- a/dlls/msvcrt/tests/cpp.c
+++ b/dlls/msvcrt/tests/cpp.c
@@ -1320,6 +1320,10 @@ static void test_demangle(void)
 /* 147 */ {"?ptititi4@@3PETtititi@@IET1@", "unsigned int const volatile tititi::* __ptr64 const volatile __ptr64 ptititi4"},
 /* 148 */ {"?ptititi4v@@3RETtititi@@IET1@", "unsigned int const volatile tititi::* __ptr64 const volatile __ptr64 ptititi4v"},
 /* 149 */ {"?meth@AAA@@QFCEXXZ", "public: void __thiscall AAA::meth(void)volatile __unaligned "},
+/* 150 */ {"?RegisterModuleUninitializer@<CrtImplementationDetails>@@YAXP$AAVEventHandler@System@@@Z",
+           "void __cdecl <CrtImplementationDetails>::RegisterModuleUninitializer(class System::EventHandler ^)"},
+/* 151 */ {"?RegisterModuleUninitializer@<CrtImplementationDetails>@@YAXBE$AAVEventHandler@System@@@Z",
+           "void __cdecl <CrtImplementationDetails>::RegisterModuleUninitializer(class System::EventHandler % __ptr64 volatile)"},
     };
     int i, num_test = ARRAY_SIZE(test);
     char* name;
diff --git a/dlls/msvcrt/undname.c b/dlls/msvcrt/undname.c
index 557f1ce13e0..91d4fdbc3eb 100644
--- a/dlls/msvcrt/undname.c
+++ b/dlls/msvcrt/undname.c
@@ -519,6 +519,28 @@ static BOOL get_qualified_type(struct datatype_t *ct, struct parsed_symbol* sym,
     ct->right = NULL;
     ct->flags = 0;
 
+    /* parse managed handle information */
+    if (sym->current[0] == '$' && sym->current[1] == 'A')
+    {
+        sym->current += 2;
+
+        switch (qualif)
+        {
+        case 'A':
+        case 'B':
+            ref = " %";
+            break;
+        case 'P':
+        case 'Q':
+        case 'R':
+        case 'S':
+            ref = " ^";
+            break;
+        default:
+            return FALSE;
+        }
+    }
+
     if (get_qualifier(sym, &xdt2, &class))
     {
         unsigned            mark = sym->stack.num;
-- 
GitLab

From 1f01dd123000796b8ea92fc80abbf07c3202c981 Mon Sep 17 00:00:00 2001
From: Zsolt Vadasz <zsolt_vadasz@protonmail.com>
Date: Tue, 2 Jan 2024 16:09:19 +0100
Subject: [PATCH 1/2] msvcrt: Compare environment variable names case
 insensitively.

Wine-Bug: https://bugs.winehq.org/show_bug.cgi?id=56134
---
 dlls/msvcrt/environ.c | 4 ++--
 1 file changed, 2 insertions(+), 2 deletions(-)

diff --git a/dlls/msvcrt/environ.c b/dlls/msvcrt/environ.c
index 063a9254c67..aa857afa615 100644
--- a/dlls/msvcrt/environ.c
+++ b/dlls/msvcrt/environ.c
@@ -125,7 +125,7 @@ static int env_get_index(const char *name)
     len = strlen(name);
     for (i = 0; MSVCRT__environ[i]; i++)
     {
-        if (!strncmp(name, MSVCRT__environ[i], len) && MSVCRT__environ[i][len] == '=')
+        if (!strnicmp(name, MSVCRT__environ[i], len) && MSVCRT__environ[i][len] == '=')
             return i;
     }
     return i;
@@ -138,7 +138,7 @@ static int wenv_get_index(const wchar_t *name)
     len = wcslen(name);
     for (i = 0; MSVCRT__wenviron[i]; i++)
     {
-        if (!wcsncmp(name, MSVCRT__wenviron[i], len) && MSVCRT__wenviron[i][len] == '=')
+        if (!wcsnicmp(name, MSVCRT__wenviron[i], len) && MSVCRT__wenviron[i][len] == '=')
             return i;
     }
     return i;
-- 
GitLab


From 56a666d563be840913f2f3855c36312e5d2a2890 Mon Sep 17 00:00:00 2001
From: Zsolt Vadasz <zsolt_vadasz@protonmail.com>
Date: Tue, 2 Jan 2024 18:17:08 +0100
Subject: [PATCH 2/2] msvcrt/tests: Test case insensitivity of getenv() and
 _wgetenv().

---
 dlls/msvcrt/tests/environ.c | 24 ++++++++++++++++++++++++
 1 file changed, 24 insertions(+)

diff --git a/dlls/msvcrt/tests/environ.c b/dlls/msvcrt/tests/environ.c
index aab14a422b3..1d1bfd2f504 100644
--- a/dlls/msvcrt/tests/environ.c
+++ b/dlls/msvcrt/tests/environ.c
@@ -421,6 +421,29 @@ static void test_child_env(char** argv)
     free( env );
 }
 
+static void test_case_insensitive(void)
+{
+    const char *uppercase_env = getenv("APPDATA");
+    const char *lowercase_env = getenv("appdata");
+    const wchar_t *uppercase_wenv = _wgetenv(L"APPDATA");
+    const wchar_t *lowercase_wenv = _wgetenv(L"appdata");
+
+    ok( uppercase_env == lowercase_env, "getenv() must be case insensitive, %p should be %p\n",
+        lowercase_env, uppercase_env );
+    ok( uppercase_wenv == lowercase_wenv, "_wgetenv() must be case insensitive, %p should be %p\n",
+        lowercase_wenv, uppercase_wenv );
+
+    ok( !_putenv("cAt=bar"), "Failed to set CAT=bar\n" );
+    ok( !_putenv("CAT=BAR"), "Failed to set CAT=BAR\n" );
+    ok( !strcmp(getenv("cAt"), "BAR"), "_putenv() must be case insensitive\n" );
+
+    ok( !_wputenv(L"cAt=bar"), "Failed to set CAT=bar\n" );
+    ok( !_wputenv(L"CAT=BAR"), "Failed to set CAT=BAR\n" );
+    ok( !wcscmp(_wgetenv(L"cAt"), L"BAR"), "_wputenv() must be case insensitive\n" );
+
+    _putenv("cat=");
+}
+
 START_TEST(environ)
 {
     char **argv;
@@ -443,4 +466,5 @@ START_TEST(environ)
     test_environment_manipulation();
     test_child_env(argv);
     test_system();
+    test_case_insensitive();
 }
-- 
GitLab

From 3481d165d16587101857991a02ce169018d9e657 Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?Bernhard=20=C3=9Cbelacker?= <bernhardu@mailbox.org>
Date: Fri, 8 Dec 2023 16:54:45 +0100
Subject: [PATCH] msvcrt: Protect setlocale against concurrent accesses.

Wine-Bug: https://bugs.winehq.org/show_bug.cgi?id=55467
---
 dlls/msvcrt/locale.c | 5 +++++
 1 file changed, 5 insertions(+)

diff --git a/dlls/msvcrt/locale.c b/dlls/msvcrt/locale.c
index f7be2a1e9bc..99612edfa3e 100644
--- a/dlls/msvcrt/locale.c
+++ b/dlls/msvcrt/locale.c
@@ -2036,6 +2036,7 @@ char* CDECL setlocale(int category, const char* locale)
 {
     thread_data_t *data = msvcrt_get_thread_data();
     pthreadlocinfo locinfo = get_locinfo(), newlocinfo;
+    int locale_flags;
 
     if(category<LC_MIN || category>LC_MAX)
         return NULL;
@@ -2047,7 +2048,11 @@ char* CDECL setlocale(int category, const char* locale)
         return locinfo->lc_category[category].locale;
     }
 
+    /* Make sure that locinfo is not updated by e.g. stricmp function */
+    locale_flags = data->locale_flags;
+    data->locale_flags |= LOCALE_THREAD;
     newlocinfo = create_locinfo(category, locale, locinfo);
+    data->locale_flags = locale_flags;
     if(!newlocinfo) {
         WARN("%d %s failed\n", category, locale);
         return NULL;
-- 
GitLab

From 4240c8180e4955d5c445c6909e5bba71ddea7420 Mon Sep 17 00:00:00 2001
From: Piotr Caban <piotr@codeweavers.com>
Date: Thu, 18 Jan 2024 18:44:26 +0100
Subject: [PATCH 1/4] msvcp140_2: Fix i386 export names.

---
 dlls/msvcp140_2/msvcp140_2.spec | 132 +++++++++++++++++++++-----------
 1 file changed, 88 insertions(+), 44 deletions(-)

diff --git a/dlls/msvcp140_2/msvcp140_2.spec b/dlls/msvcp140_2/msvcp140_2.spec
index c59da9aba9c..0c10d213c4b 100644
--- a/dlls/msvcp140_2/msvcp140_2.spec
+++ b/dlls/msvcp140_2/msvcp140_2.spec
@@ -1,44 +1,88 @@
-@ stub __std_smf_assoc_laguerre
-@ stub __std_smf_assoc_laguerref
-@ stub __std_smf_assoc_legendre
-@ stub __std_smf_assoc_legendref
-@ stub __std_smf_beta
-@ stub __std_smf_betaf
-@ stub __std_smf_comp_ellint_1
-@ stub __std_smf_comp_ellint_1f
-@ stub __std_smf_comp_ellint_2
-@ stub __std_smf_comp_ellint_2f
-@ stub __std_smf_comp_ellint_3
-@ stub __std_smf_comp_ellint_3f
-@ stub __std_smf_cyl_bessel_i
-@ stub __std_smf_cyl_bessel_if
-@ stub __std_smf_cyl_bessel_j
-@ stub __std_smf_cyl_bessel_jf
-@ stub __std_smf_cyl_bessel_k
-@ stub __std_smf_cyl_bessel_kf
-@ stub __std_smf_cyl_neumann
-@ stub __std_smf_cyl_neumannf
-@ stub __std_smf_ellint_1
-@ stub __std_smf_ellint_1f
-@ stub __std_smf_ellint_2
-@ stub __std_smf_ellint_2f
-@ stub __std_smf_ellint_3
-@ stub __std_smf_ellint_3f
-@ stub __std_smf_expint
-@ stub __std_smf_expintf
-@ stub __std_smf_hermite
-@ stub __std_smf_hermitef
-@ stub __std_smf_hypot3
-@ stub __std_smf_hypot3f
-@ stub __std_smf_laguerre
-@ stub __std_smf_laguerref
-@ stub __std_smf_legendre
-@ stub __std_smf_legendref
-@ stub __std_smf_riemann_zeta
-@ stub __std_smf_riemann_zetaf
-@ stub __std_smf_sph_bessel
-@ stub __std_smf_sph_besself
-@ stub __std_smf_sph_legendre
-@ stub __std_smf_sph_legendref
-@ stub __std_smf_sph_neumann
-@ stub __std_smf_sph_neumannf
+@ stub -arch=i386 ___std_smf_assoc_laguerre@16
+@ stub -arch=!i386 __std_smf_assoc_laguerre
+@ stub -arch=i386 ___std_smf_assoc_laguerref@12
+@ stub -arch=!i386 __std_smf_assoc_laguerref
+@ stub -arch=i386 ___std_smf_assoc_legendre@16
+@ stub -arch=!i386 __std_smf_assoc_legendre
+@ stub -arch=i386 ___std_smf_assoc_legendref@12
+@ stub -arch=!i386 __std_smf_assoc_legendref
+@ stub -arch=i386 ___std_smf_beta@16
+@ stub -arch=!i386 __std_smf_beta
+@ stub -arch=i386 ___std_smf_betaf@8
+@ stub -arch=!i386 __std_smf_betaf
+@ stub -arch=i386 ___std_smf_comp_ellint_1@8
+@ stub -arch=!i386 __std_smf_comp_ellint_1
+@ stub -arch=i386 ___std_smf_comp_ellint_1f@4
+@ stub -arch=!i386 __std_smf_comp_ellint_1f
+@ stub -arch=i386 ___std_smf_comp_ellint_2@8
+@ stub -arch=!i386 __std_smf_comp_ellint_2
+@ stub -arch=i386 ___std_smf_comp_ellint_2f@4
+@ stub -arch=!i386 __std_smf_comp_ellint_2f
+@ stub -arch=i386 ___std_smf_comp_ellint_3@16
+@ stub -arch=!i386 __std_smf_comp_ellint_3
+@ stub -arch=i386 ___std_smf_comp_ellint_3f@8
+@ stub -arch=!i386 __std_smf_comp_ellint_3f
+@ stub -arch=i386 ___std_smf_cyl_bessel_i@16
+@ stub -arch=!i386 __std_smf_cyl_bessel_i
+@ stub -arch=i386 ___std_smf_cyl_bessel_if@8
+@ stub -arch=!i386 __std_smf_cyl_bessel_if
+@ stub -arch=i386 ___std_smf_cyl_bessel_j@16
+@ stub -arch=!i386 __std_smf_cyl_bessel_j
+@ stub -arch=i386 ___std_smf_cyl_bessel_jf@8
+@ stub -arch=!i386 __std_smf_cyl_bessel_jf
+@ stub -arch=i386 ___std_smf_cyl_bessel_k@16
+@ stub -arch=!i386 __std_smf_cyl_bessel_k
+@ stub -arch=i386 ___std_smf_cyl_bessel_kf@8
+@ stub -arch=!i386 __std_smf_cyl_bessel_kf
+@ stub -arch=i386 ___std_smf_cyl_neumann@16
+@ stub -arch=!i386 __std_smf_cyl_neumann
+@ stub -arch=i386 ___std_smf_cyl_neumannf@8
+@ stub -arch=!i386 __std_smf_cyl_neumannf
+@ stub -arch=i386 ___std_smf_ellint_1@16
+@ stub -arch=!i386 __std_smf_ellint_1
+@ stub -arch=i386 ___std_smf_ellint_1f@8
+@ stub -arch=!i386 __std_smf_ellint_1f
+@ stub -arch=i386 ___std_smf_ellint_2@16
+@ stub -arch=!i386 __std_smf_ellint_2
+@ stub -arch=i386 ___std_smf_ellint_2f@8
+@ stub -arch=!i386 __std_smf_ellint_2f
+@ stub -arch=i386 ___std_smf_ellint_3@24
+@ stub -arch=!i386 __std_smf_ellint_3
+@ stub -arch=i386 ___std_smf_ellint_3f@12
+@ stub -arch=!i386 __std_smf_ellint_3f
+@ stub -arch=i386 ___std_smf_expint@8
+@ stub -arch=!i386 __std_smf_expint
+@ stub -arch=i386 ___std_smf_expintf@4
+@ stub -arch=!i386 __std_smf_expintf
+@ stub -arch=i386 ___std_smf_hermite@12
+@ stub -arch=!i386 __std_smf_hermite
+@ stub -arch=i386 ___std_smf_hermitef@8
+@ stub -arch=!i386 __std_smf_hermitef
+@ stub -arch=i386 ___std_smf_hypot3@24
+@ stub -arch=!i386 __std_smf_hypot3
+@ stub -arch=i386 ___std_smf_hypot3f@12
+@ stub -arch=!i386 __std_smf_hypot3f
+@ stub -arch=i386 ___std_smf_laguerre@12
+@ stub -arch=!i386 __std_smf_laguerre
+@ stub -arch=i386 ___std_smf_laguerref@8
+@ stub -arch=!i386 __std_smf_laguerref
+@ stub -arch=i386 ___std_smf_legendre@12
+@ stub -arch=!i386 __std_smf_legendre
+@ stub -arch=i386 ___std_smf_legendref@8
+@ stub -arch=!i386 __std_smf_legendref
+@ stub -arch=i386 ___std_smf_riemann_zeta@8
+@ stub -arch=!i386 __std_smf_riemann_zeta
+@ stub -arch=i386 ___std_smf_riemann_zetaf@4
+@ stub -arch=!i386 __std_smf_riemann_zetaf
+@ stub -arch=i386 ___std_smf_sph_bessel@12
+@ stub -arch=!i386 __std_smf_sph_bessel
+@ stub -arch=i386 ___std_smf_sph_besself@8
+@ stub -arch=!i386 __std_smf_sph_besself
+@ stub -arch=i386 ___std_smf_sph_legendre@16
+@ stub -arch=!i386 __std_smf_sph_legendre
+@ stub -arch=i386 ___std_smf_sph_legendref@12
+@ stub -arch=!i386 __std_smf_sph_legendref
+@ stub -arch=i386 ___std_smf_sph_neumann@12
+@ stub -arch=!i386 __std_smf_sph_neumann
+@ stub -arch=i386 ___std_smf_sph_neumannf@8
+@ stub -arch=!i386 __std_smf_sph_neumannf
-- 
GitLab


From fca71b6ef84e2f52afe369e1a1d1f5908f138881 Mon Sep 17 00:00:00 2001
From: Alex Henrie <alexhenrie24@gmail.com>
Date: Sat, 6 Jan 2024 12:53:30 -0700
Subject: [PATCH 2/4] msvcp140_2: Implement __std_smf_hypot3.

Wine-Bug: https://bugs.winehq.org/show_bug.cgi?id=56078
---
 dlls/msvcp140_2/Makefile.in     |  3 +++
 dlls/msvcp140_2/math.c          | 26 ++++++++++++++++++++++++++
 dlls/msvcp140_2/msvcp140_2.spec |  4 ++--
 3 files changed, 31 insertions(+), 2 deletions(-)
 create mode 100644 dlls/msvcp140_2/math.c

diff --git a/dlls/msvcp140_2/Makefile.in b/dlls/msvcp140_2/Makefile.in
index 5b4865db844..0f75819198f 100644
--- a/dlls/msvcp140_2/Makefile.in
+++ b/dlls/msvcp140_2/Makefile.in
@@ -1 +1,4 @@
 MODULE       = msvcp140_2.dll
+
+SOURCES = \
+	math.c
diff --git a/dlls/msvcp140_2/math.c b/dlls/msvcp140_2/math.c
new file mode 100644
index 00000000000..d2909745a9d
--- /dev/null
+++ b/dlls/msvcp140_2/math.c
@@ -0,0 +1,26 @@
+/*
+ * Special math functions
+ *
+ * Copyright 2024 Alex Henrie
+ *
+ * This library is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU Lesser General Public
+ * License as published by the Free Software Foundation; either
+ * version 2.1 of the License, or (at your option) any later version.
+ *
+ * This library is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+ * Lesser General Public License for more details.
+ *
+ * You should have received a copy of the GNU Lesser General Public
+ * License along with this library; if not, write to the Free Software
+ * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301, USA
+ */
+
+#include <math.h>
+
+double __stdcall __std_smf_hypot3(double x, double y, double z)
+{
+    return hypot(hypot(x, y), z);
+}
diff --git a/dlls/msvcp140_2/msvcp140_2.spec b/dlls/msvcp140_2/msvcp140_2.spec
index 0c10d213c4b..fbc63fa5e28 100644
--- a/dlls/msvcp140_2/msvcp140_2.spec
+++ b/dlls/msvcp140_2/msvcp140_2.spec
@@ -58,8 +58,8 @@
 @ stub -arch=!i386 __std_smf_hermite
 @ stub -arch=i386 ___std_smf_hermitef@8
 @ stub -arch=!i386 __std_smf_hermitef
-@ stub -arch=i386 ___std_smf_hypot3@24
-@ stub -arch=!i386 __std_smf_hypot3
+@ stdcall -arch=i386 ___std_smf_hypot3@24(double double double) __std_smf_hypot3
+@ stdcall -arch=!i386 __std_smf_hypot3(double double double)
 @ stub -arch=i386 ___std_smf_hypot3f@12
 @ stub -arch=!i386 __std_smf_hypot3f
 @ stub -arch=i386 ___std_smf_laguerre@12
-- 
GitLab


From ff88ec624c32e07c4dd05488b1d86cf0fd42235d Mon Sep 17 00:00:00 2001
From: Piotr Caban <piotr@codeweavers.com>
Date: Thu, 18 Jan 2024 17:40:48 +0100
Subject: [PATCH 3/4] msvcp140_2: Implement __std_smf_hypot3f.

---
 dlls/msvcp140_2/math.c          | 5 +++++
 dlls/msvcp140_2/msvcp140_2.spec | 4 ++--
 2 files changed, 7 insertions(+), 2 deletions(-)

diff --git a/dlls/msvcp140_2/math.c b/dlls/msvcp140_2/math.c
index d2909745a9d..aa8726d6b3e 100644
--- a/dlls/msvcp140_2/math.c
+++ b/dlls/msvcp140_2/math.c
@@ -24,3 +24,8 @@ double __stdcall __std_smf_hypot3(double x, double y, double z)
 {
     return hypot(hypot(x, y), z);
 }
+
+float __stdcall __std_smf_hypot3f(float x, float y, float z)
+{
+    return hypotf(hypotf(x, y), z);
+}
diff --git a/dlls/msvcp140_2/msvcp140_2.spec b/dlls/msvcp140_2/msvcp140_2.spec
index fbc63fa5e28..bcc3ecfa7fd 100644
--- a/dlls/msvcp140_2/msvcp140_2.spec
+++ b/dlls/msvcp140_2/msvcp140_2.spec
@@ -60,8 +60,8 @@
 @ stub -arch=!i386 __std_smf_hermitef
 @ stdcall -arch=i386 ___std_smf_hypot3@24(double double double) __std_smf_hypot3
 @ stdcall -arch=!i386 __std_smf_hypot3(double double double)
-@ stub -arch=i386 ___std_smf_hypot3f@12
-@ stub -arch=!i386 __std_smf_hypot3f
+@ stdcall -arch=i386 ___std_smf_hypot3f@12(float float float) __std_smf_hypot3f
+@ stdcall -arch=!i386 __std_smf_hypot3f(float float float)
 @ stub -arch=i386 ___std_smf_laguerre@12
 @ stub -arch=!i386 __std_smf_laguerre
 @ stub -arch=i386 ___std_smf_laguerref@8
-- 
GitLab


From 816c35e0ee57354d25d6115f64346da87550d922 Mon Sep 17 00:00:00 2001
From: Piotr Caban <piotr@codeweavers.com>
Date: Thu, 18 Jan 2024 18:18:26 +0100
Subject: [PATCH 4/4] msvcp140_t/tests: Add __std_smf_hypot3 tests.

---
 configure                         |  1 +
 configure.ac                      |  1 +
 dlls/msvcp140_2/tests/Makefile.in |  4 ++
 dlls/msvcp140_2/tests/math.c      | 81 +++++++++++++++++++++++++++++++
 4 files changed, 87 insertions(+)
 create mode 100644 dlls/msvcp140_2/tests/Makefile.in
 create mode 100644 dlls/msvcp140_2/tests/math.c

diff --git a/configure b/configure
index 3939f1873a4..e9fc3a8ef5a 100755
--- a/configure
+++ b/configure
@@ -22059,6 +22059,7 @@ wine_fn_config_makefile dlls/msvcp140/tests enable_tests
 wine_fn_config_makefile dlls/msvcp140_1 enable_msvcp140_1
 wine_fn_config_makefile dlls/msvcp140_1/tests enable_tests
 wine_fn_config_makefile dlls/msvcp140_2 enable_msvcp140_2
+wine_fn_config_makefile dlls/msvcp140_2/tests enable_tests
 wine_fn_config_makefile dlls/msvcp140_atomic_wait enable_msvcp140_atomic_wait
 wine_fn_config_makefile dlls/msvcp140_atomic_wait/tests enable_tests
 wine_fn_config_makefile dlls/msvcp140_codecvt_ids enable_msvcp140_codecvt_ids
diff --git a/configure.ac b/configure.ac
index 9488b3263cc..da661323375 100644
--- a/configure.ac
+++ b/configure.ac
@@ -2876,6 +2876,7 @@ WINE_CONFIG_MAKEFILE(dlls/msvcp140/tests)
 WINE_CONFIG_MAKEFILE(dlls/msvcp140_1)
 WINE_CONFIG_MAKEFILE(dlls/msvcp140_1/tests)
 WINE_CONFIG_MAKEFILE(dlls/msvcp140_2)
+WINE_CONFIG_MAKEFILE(dlls/msvcp140_2/tests)
 WINE_CONFIG_MAKEFILE(dlls/msvcp140_atomic_wait)
 WINE_CONFIG_MAKEFILE(dlls/msvcp140_atomic_wait/tests)
 WINE_CONFIG_MAKEFILE(dlls/msvcp140_codecvt_ids)
diff --git a/dlls/msvcp140_2/tests/Makefile.in b/dlls/msvcp140_2/tests/Makefile.in
new file mode 100644
index 00000000000..3024ebdd358
--- /dev/null
+++ b/dlls/msvcp140_2/tests/Makefile.in
@@ -0,0 +1,4 @@
+TESTDLL   = msvcp140_2.dll
+
+SOURCES = \
+	math.c
diff --git a/dlls/msvcp140_2/tests/math.c b/dlls/msvcp140_2/tests/math.c
new file mode 100644
index 00000000000..dc61d9b6db2
--- /dev/null
+++ b/dlls/msvcp140_2/tests/math.c
@@ -0,0 +1,81 @@
+/*
+ * Special math functions
+ *
+ * Copyright 2024 Piotr Caban for CodeWeavers
+ *
+ * This library is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU Lesser General Public
+ * License as published by the Free Software Foundation; either
+ * version 2.1 of the License, or (at your option) any later version.
+ *
+ * This library is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+ * Lesser General Public License for more details.
+ *
+ * You should have received a copy of the GNU Lesser General Public
+ * License along with this library; if not, write to the Free Software
+ * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301, USA
+ */
+
+#include "wine/test.h"
+#include <math.h>
+
+static double (__stdcall *p___std_smf_hypot3)(double x, double y, double z);
+
+#define SETNOFAIL(x,y) x = (void*)GetProcAddress(msvcp, y)
+#define SET(x,y) do { SETNOFAIL(x, y); ok(x != NULL, "Export '%s' not found\n", y); } while(0)
+static BOOL init(void)
+{
+    HMODULE msvcp = LoadLibraryA("msvcp140_2.dll");
+
+    if (!msvcp)
+    {
+        win_skip("msvcp140_2.dll not installed\n");
+        return FALSE;
+    }
+
+#ifdef __i386__
+    SET(p___std_smf_hypot3, "___std_smf_hypot3@24");
+#else
+    SET(p___std_smf_hypot3, "__std_smf_hypot3");
+#endif
+
+    return TRUE;
+}
+
+static inline BOOL compare_double(double f, double g, unsigned int ulps)
+{
+    ULONGLONG x = *(ULONGLONG *)&f;
+    ULONGLONG y = *(ULONGLONG *)&g;
+
+    if (f < 0)
+        x = ~x + 1;
+    else
+        x |= ((ULONGLONG)1) << 63;
+    if (g < 0)
+        y = ~y + 1;
+    else
+        y |= ((ULONGLONG)1) << 63;
+
+    return (x > y ? x - y : y - x) <= ulps;
+}
+
+static void test_hypot3(void)
+{
+    double r;
+
+    r = p___std_smf_hypot3(0, 0, 0);
+    ok(compare_double(r, 0.0, 1), "r = %.23e\n", r);
+
+    r = p___std_smf_hypot3(9, 12, 20);
+    ok(compare_double(r, 25.0, 1), "r = %.23e\n", r);
+}
+
+START_TEST(math)
+{
+    if (!init())
+        return;
+
+    test_hypot3();
+}
-- 
GitLab

From c086a7eb3125d0a05b4dc21a8824e5d40dfb66a5 Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?Gabriel=20Iv=C4=83ncescu?= <gabrielopcode@gmail.com>
Date: Thu, 18 Jan 2024 21:03:06 +0200
Subject: [PATCH] msvcirt: Use proper operator_new and operator_delete types.
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: 8bit

msvcirt's PARENTSRC imports exception.c from msvcp90, but it uses a function
pointer for these functions, resulting in a type mismatch.

Signed-off-by: Gabriel Ivăncescu <gabrielopcode@gmail.com>
---
 dlls/msvcirt/msvcirt.c | 24 +++++++++++++++++-------
 dlls/msvcirt/msvcirt.h |  4 ++--
 2 files changed, 19 insertions(+), 9 deletions(-)

diff --git a/dlls/msvcirt/msvcirt.c b/dlls/msvcirt/msvcirt.c
index 8d83fca7c94..0fcdc52c203 100644
--- a/dlls/msvcirt/msvcirt.c
+++ b/dlls/msvcirt/msvcirt.c
@@ -38,9 +38,6 @@ WINE_DEFAULT_DEBUG_CHANNEL(msvcirt);
 #define RESERVE_SIZE 512
 #define STATEBUF_SIZE 8
 
-void* (__cdecl *operator_new)(SIZE_T);
-void (__cdecl *operator_delete)(void*);
-
 /* ?sh_none@filebuf@@2HB */
 const int filebuf_sh_none = 0x800;
 /* ?sh_read@filebuf@@2HB */
@@ -5132,19 +5129,32 @@ void __cdecl _mtunlock(CRITICAL_SECTION *crit)
     LeaveCriticalSection(crit);
 }
 
+static void* (__cdecl *MSVCRT_operator_new)(SIZE_T);
+static void (__cdecl *MSVCRT_operator_delete)(void*);
+
+void* __cdecl operator_new(SIZE_T size)
+{
+    return MSVCRT_operator_new(size);
+}
+
+void __cdecl operator_delete(void *mem)
+{
+    MSVCRT_operator_delete(mem);
+}
+
 static void init_cxx_funcs(void)
 {
     HMODULE hmod = GetModuleHandleA("msvcrt.dll");
 
     if (sizeof(void *) > sizeof(int))  /* 64-bit has different names */
     {
-        operator_new = (void*)GetProcAddress(hmod, "??2@YAPEAX_K@Z");
-        operator_delete = (void*)GetProcAddress(hmod, "??3@YAXPEAX@Z");
+        MSVCRT_operator_new = (void*)GetProcAddress(hmod, "??2@YAPEAX_K@Z");
+        MSVCRT_operator_delete = (void*)GetProcAddress(hmod, "??3@YAXPEAX@Z");
     }
     else
     {
-        operator_new = (void*)GetProcAddress(hmod, "??2@YAPAXI@Z");
-        operator_delete = (void*)GetProcAddress(hmod, "??3@YAXPAX@Z");
+        MSVCRT_operator_new = (void*)GetProcAddress(hmod, "??2@YAPAXI@Z");
+        MSVCRT_operator_delete = (void*)GetProcAddress(hmod, "??3@YAXPAX@Z");
     }
 }
 
diff --git a/dlls/msvcirt/msvcirt.h b/dlls/msvcirt/msvcirt.h
index 5b59b7862a3..ccbc7027146 100644
--- a/dlls/msvcirt/msvcirt.h
+++ b/dlls/msvcirt/msvcirt.h
@@ -68,7 +68,7 @@ typedef enum {
     FLAGS_stdio      = 0x4000
 } ios_flags;
 
-extern void* (__cdecl *MSVCRT_operator_new)(SIZE_T);
-extern void (__cdecl *MSVCRT_operator_delete)(void*);
+void* __cdecl operator_new(SIZE_T);
+void __cdecl operator_delete(void*);
 
 void init_exception(void*);
-- 
GitLab

From b6199254be9acb5a08b3cc840e8a7cab51b852ae Mon Sep 17 00:00:00 2001
From: Vijay Kiran Kamuju <infyquest@gmail.com>
Date: Sat, 20 Jan 2024 14:52:29 +0100
Subject: [PATCH 1/4] msvcp140: Add stub for _XGetLastError.

---
 dlls/msvcp140/msvcp140.spec   | 2 +-
 dlls/msvcp90/exception.c      | 8 ++++++++
 dlls/msvcp_win/msvcp_win.spec | 2 +-
 3 files changed, 10 insertions(+), 2 deletions(-)

diff --git a/dlls/msvcp140/msvcp140.spec b/dlls/msvcp140/msvcp140.spec
index c04e870eb72..bc18d7b5be8 100644
--- a/dlls/msvcp140/msvcp140.spec
+++ b/dlls/msvcp140/msvcp140.spec
@@ -1672,7 +1672,7 @@
 @ cdecl ?_Winerror_map@std@@YAHH@Z(long) _Winerror_map
 @ cdecl -arch=win32 ?_Winerror_message@std@@YAKKPADK@Z(long ptr long) _Winerror_message
 @ cdecl -arch=win64 ?_Winerror_message@std@@YAKKPEADK@Z(long ptr long) _Winerror_message
-@ stub ?_XGetLastError@std@@YAXXZ
+@ cdecl ?_XGetLastError@std@@YAXXZ() _XGetLastError
 @ cdecl ?_XLgamma@std@@YAMM@Z(float) std__XLgamma_float
 @ cdecl ?_XLgamma@std@@YANN@Z(double) std__XLgamma_double
 @ cdecl ?_XLgamma@std@@YAOO@Z(double) std__XLgamma_double
diff --git a/dlls/msvcp90/exception.c b/dlls/msvcp90/exception.c
index 01cb2bb5dab..4cfa70c4c72 100644
--- a/dlls/msvcp90/exception.c
+++ b/dlls/msvcp90/exception.c
@@ -997,6 +997,14 @@ bool __cdecl MSVCP__uncaught_exception(void)
     return __uncaught_exception();
 }
 
+#if _MSVCP_VER >= 140
+/* ?_XGetLastError@std@@YAXXZ */
+void __cdecl _XGetLastError(void)
+{
+    FIXME("stub\n");
+}
+#endif
+
 #if _MSVCP_VER >= 110
 typedef struct
 {
diff --git a/dlls/msvcp_win/msvcp_win.spec b/dlls/msvcp_win/msvcp_win.spec
index 813d2ba67da..71dc2c1e953 100644
--- a/dlls/msvcp_win/msvcp_win.spec
+++ b/dlls/msvcp_win/msvcp_win.spec
@@ -1672,7 +1672,7 @@
 @ cdecl ?_Winerror_map@std@@YAHH@Z(long) msvcp140.?_Winerror_map@std@@YAHH@Z
 @ cdecl -arch=win32 ?_Winerror_message@std@@YAKKPADK@Z(long ptr long) msvcp140.?_Winerror_message@std@@YAKKPADK@Z
 @ cdecl -arch=win64 ?_Winerror_message@std@@YAKKPEADK@Z(long ptr long) msvcp140.?_Winerror_message@std@@YAKKPEADK@Z
-@ stub ?_XGetLastError@std@@YAXXZ
+@ cdecl ?_XGetLastError@std@@YAXXZ() msvcp140.?_XGetLastError@std@@YAXXZ
 @ cdecl ?_XLgamma@std@@YAMM@Z(float) msvcp140.?_XLgamma@std@@YAMM@Z
 @ cdecl ?_XLgamma@std@@YANN@Z(double) msvcp140.?_XLgamma@std@@YANN@Z
 @ cdecl ?_XLgamma@std@@YAOO@Z(double) msvcp140.?_XLgamma@std@@YAOO@Z
-- 
GitLab


From 1d917529f13a14fc304cec8540e18c48ba39c15a Mon Sep 17 00:00:00 2001
From: Piotr Caban <piotr@codeweavers.com>
Date: Sat, 20 Jan 2024 20:20:54 +0100
Subject: [PATCH 2/4] msvcp140: Add _XGetLastError implementation.

Wine-Bug: https://bugs.winehq.org/show_bug.cgi?id=46904
---
 dlls/msvcp90/exception.c | 14 +++++++++++-
 dlls/msvcp90/misc.c      | 49 ++++++++++++++++++++++++++++------------
 dlls/msvcp90/msvcp90.h   |  3 +++
 3 files changed, 50 insertions(+), 16 deletions(-)

diff --git a/dlls/msvcp90/exception.c b/dlls/msvcp90/exception.c
index 4cfa70c4c72..c881b37cd97 100644
--- a/dlls/msvcp90/exception.c
+++ b/dlls/msvcp90/exception.c
@@ -1001,7 +1001,19 @@ bool __cdecl MSVCP__uncaught_exception(void)
 /* ?_XGetLastError@std@@YAXXZ */
 void __cdecl _XGetLastError(void)
 {
-    FIXME("stub\n");
+    int err = GetLastError();
+    system_error se;
+    const char *msg;
+
+    TRACE("() GetLastError()=%d\n", err);
+
+    msg = _Winerror_map_str(err);
+    MSVCP_runtime_error_ctor(&se.base, &msg);
+    se.code.code = err;
+    se.code.category = std_system_category();
+    se.base.e.vtable = &system_error_vtable;
+
+    _CxxThrowException(&se, &system_error_cxx_type);
 }
 #endif
 
diff --git a/dlls/msvcp90/misc.c b/dlls/msvcp90/misc.c
index f82456cbf4b..a08101052da 100644
--- a/dlls/msvcp90/misc.c
+++ b/dlls/msvcp90/misc.c
@@ -1063,6 +1063,13 @@ bool __thiscall custom_category_equivalent_code(custom_category *this,
     return FALSE;
 }
 
+DEFINE_THISCALL_WRAPPER(custom_category_message, 12)
+basic_string_char* __thiscall custom_category_message(const custom_category *this,
+        basic_string_char *ret, int err)
+{
+    return MSVCP_basic_string_char_ctor_cstr(ret, strerror(err));
+}
+
 DEFINE_THISCALL_WRAPPER(iostream_category_name, 4)
 const char* __thiscall iostream_category_name(const custom_category *this)
 {
@@ -1090,7 +1097,7 @@ const error_category* __cdecl std_iostream_category(void)
 }
 #endif
 
-#if _MSVCP_VER == 100
+#if _MSVCP_VER == 100 || _MSVCP_VER >= 140
 static custom_category system_category;
 DEFINE_RTTI_DATA1(system_category, 0, &error_category_rtti_base_descriptor, ".?AV_System_error_category@std@@")
 
@@ -1099,13 +1106,32 @@ extern const vtable_ptr system_category_vtable;
 static void system_category_ctor(custom_category *this)
 {
     this->base.vtable = &system_category_vtable;
+#if _MSVCP_VER == 100
     this->type = "system";
+#endif
 }
 
-DEFINE_THISCALL_WRAPPER(custom_category_name, 4)
-const char* __thiscall custom_category_name(const custom_category *this)
+DEFINE_THISCALL_WRAPPER(system_category_name, 4)
+const char* __thiscall system_category_name(const custom_category *this)
 {
+#if _MSVCP_VER == 100
     return this->type;
+#else
+    return "system";
+#endif
+}
+
+DEFINE_THISCALL_WRAPPER(system_category_message, 12)
+basic_string_char* __thiscall system_category_message(const custom_category *this,
+        basic_string_char *ret, int err)
+{
+#if _MSVCP_VER > 100
+    const char *msg = _Winerror_map_str(err);
+    if (!msg) return MSVCP_basic_string_char_ctor_cstr(ret, "unknown error");
+    return MSVCP_basic_string_char_ctor_cstr(ret, msg);
+#else
+    return custom_category_message(this, ret, err);
+#endif
 }
 
 /* ?system_category@std@@YAABVerror_category@1@XZ */
@@ -1140,13 +1166,6 @@ const char* __thiscall generic_category_name(const custom_category *this)
 #endif
 }
 
-DEFINE_THISCALL_WRAPPER(custom_category_message, 12)
-basic_string_char* __thiscall custom_category_message(const custom_category *this,
-        basic_string_char *ret, int err)
-{
-    return MSVCP_basic_string_char_ctor_cstr(ret, strerror(err));
-}
-
 /* ?generic_category@std@@YAABVerror_category@1@XZ */
 /* ?generic_category@std@@YAAEBVerror_category@1@XZ */
 const error_category* __cdecl std_generic_category(void)
@@ -1729,11 +1748,11 @@ __ASM_BLOCK_BEGIN(misc_vtables)
             VTABLE_ADD_FUNC(custom_category_default_error_condition)
             VTABLE_ADD_FUNC(custom_category_equivalent)
             VTABLE_ADD_FUNC(custom_category_equivalent_code));
-#if _MSVCP_VER == 100
+#if _MSVCP_VER == 100 || _MSVCP_VER >= 140
     __ASM_VTABLE(system_category,
             VTABLE_ADD_FUNC(custom_category_vector_dtor)
-            VTABLE_ADD_FUNC(custom_category_name)
-            VTABLE_ADD_FUNC(custom_category_message)
+            VTABLE_ADD_FUNC(system_category_name)
+            VTABLE_ADD_FUNC(system_category_message)
             VTABLE_ADD_FUNC(custom_category_default_error_condition)
             VTABLE_ADD_FUNC(custom_category_equivalent)
             VTABLE_ADD_FUNC(custom_category_equivalent_code));
@@ -1759,7 +1778,7 @@ void init_misc(void *base)
     init_generic_category_rtti(base);
     init_iostream_category_rtti(base);
 #endif
-#if _MSVCP_VER == 100
+#if _MSVCP_VER == 100 || _MSVCP_VER >= 140
     init_system_category_rtti(base);
 #endif
 #if _MSVCP_VER >= 110
@@ -1772,7 +1791,7 @@ void init_misc(void *base)
     generic_category_ctor(&generic_category);
 #endif
 
-#if _MSVCP_VER == 100
+#if _MSVCP_VER == 100 || _MSVCP_VER >= 140
     system_category_ctor(&system_category);
 #endif
 }
diff --git a/dlls/msvcp90/msvcp90.h b/dlls/msvcp90/msvcp90.h
index 3b97cfefd4b..9471b896ba5 100644
--- a/dlls/msvcp90/msvcp90.h
+++ b/dlls/msvcp90/msvcp90.h
@@ -694,12 +694,15 @@ typedef struct {
 
 const error_category* __cdecl std_iostream_category(void);
 const error_category* __cdecl std_generic_category(void);
+const error_category* __cdecl std_system_category(void);
 
 typedef struct
 {
     int code;
     const error_category *category;
 } error_code;
+
+const char *_Winerror_map_str(int err);
 #endif
 
 #if _MSVCP_VER < 80
-- 
GitLab


From c0598baa874e9d328fefd200510e0cbfc178134e Mon Sep 17 00:00:00 2001
From: Piotr Caban <piotr@codeweavers.com>
Date: Sat, 20 Jan 2024 20:46:31 +0100
Subject: [PATCH 3/4] msvcp140/tests: Fix _Syserror_map(0) test failure in
 newest msvcp140.

---
 dlls/msvcp140/tests/msvcp140.c | 2 ++
 1 file changed, 2 insertions(+)

diff --git a/dlls/msvcp140/tests/msvcp140.c b/dlls/msvcp140/tests/msvcp140.c
index 6affa2f9c29..0140d4c3925 100644
--- a/dlls/msvcp140/tests/msvcp140.c
+++ b/dlls/msvcp140/tests/msvcp140.c
@@ -1396,6 +1396,8 @@ static void test__Syserror_map(void)
 
     r1 = p__Syserror_map(0);
     ok(r1 != NULL, "_Syserror_map(0) returned NULL\n");
+    r1 = p__Syserror_map(1233);
+    ok(r1 != NULL, "_Syserror_map(1233) returned NULL\n");
     r2 = p__Syserror_map(1234);
     ok(r2 != NULL, "_Syserror_map(1234) returned NULL\n");
     ok(r1 == r2, "r1 = %p(%s), r2 = %p(%s)\n", r1, r1, r2, r2);
-- 
GitLab


From 12e8d3bd48f28654c4e1d86de19f7e2ff9e2ba4e Mon Sep 17 00:00:00 2001
From: Piotr Caban <piotr@codeweavers.com>
Date: Sat, 20 Jan 2024 20:27:42 +0100
Subject: [PATCH 4/4] msvcp140: Recognize no error case in _Syserror_map.

---
 dlls/msvcp90/misc.c | 6 ++++++
 1 file changed, 6 insertions(+)

diff --git a/dlls/msvcp90/misc.c b/dlls/msvcp90/misc.c
index a08101052da..3ae190abeb3 100644
--- a/dlls/msvcp90/misc.c
+++ b/dlls/msvcp90/misc.c
@@ -28,6 +28,9 @@ WINE_DEFAULT_DEBUG_CHANNEL(msvcp);
 
 #if _MSVCP_VER >= 110
 /* error strings generated with glibc strerror */
+#if _MSVCP_VER >= 140
+static const char str_SUCC[]            = "success";
+#endif
 static const char str_EPERM[]           = "operation not permitted";
 static const char str_ENOENT[]          = "no such file or directory";
 static const char str_ESRCH[]           = "no such process";
@@ -112,6 +115,9 @@ static const struct {
     const char *str;
 } syserror_map[] =
 {
+#if _MSVCP_VER >= 140
+    {0, str_SUCC},
+#endif
     {EPERM, str_EPERM},
     {ENOENT, str_ENOENT},
     {ESRCH, str_ESRCH},
-- 
GitLab

From 0d137ddb725e22c8d147a8c3a0aac4609cb69352 Mon Sep 17 00:00:00 2001
From: Vijay Kiran Kamuju <infyquest@gmail.com>
Date: Sun, 21 Jan 2024 21:14:04 +0100
Subject: [PATCH] msvcr100: Add _ReaderWriterLock constructor implementation.

Wine-Bug: https://bugs.winehq.org/show_bug.cgi?id=46074
---
 dlls/concrt140/concrt140.spec       |  6 +++---
 dlls/msvcr100/msvcr100.spec         |  4 ++--
 dlls/msvcr110/msvcr110.spec         |  6 +++---
 dlls/msvcr120/msvcr120.spec         |  6 +++---
 dlls/msvcr120_app/msvcr120_app.spec |  6 +++---
 dlls/msvcrt/concurrency.c           | 19 +++++++++++++++++++
 6 files changed, 33 insertions(+), 14 deletions(-)

diff --git a/dlls/concrt140/concrt140.spec b/dlls/concrt140/concrt140.spec
index f3a39a30599..54b2fb7fc01 100644
--- a/dlls/concrt140/concrt140.spec
+++ b/dlls/concrt140/concrt140.spec
@@ -33,9 +33,9 @@
 @ cdecl -arch=arm ??0_NonReentrantPPLLock@details@Concurrency@@QAA@XZ(ptr) _NonReentrantPPLLock_ctor
 @ thiscall -arch=i386 ??0_NonReentrantPPLLock@details@Concurrency@@QAE@XZ(ptr) _NonReentrantPPLLock_ctor
 @ cdecl -arch=win64 ??0_NonReentrantPPLLock@details@Concurrency@@QEAA@XZ(ptr) _NonReentrantPPLLock_ctor
-@ stub -arch=arm ??0_ReaderWriterLock@details@Concurrency@@QAA@XZ
-@ stub -arch=i386 ??0_ReaderWriterLock@details@Concurrency@@QAE@XZ
-@ stub -arch=win64 ??0_ReaderWriterLock@details@Concurrency@@QEAA@XZ
+@ cdecl -arch=arm ??0_ReaderWriterLock@details@Concurrency@@QAA@XZ(ptr) _ReaderWriterLock_ctor
+@ thiscall -arch=i386 ??0_ReaderWriterLock@details@Concurrency@@QAE@XZ(ptr) _ReaderWriterLock_ctor
+@ cdecl -arch=win64 ??0_ReaderWriterLock@details@Concurrency@@QEAA@XZ(ptr) _ReaderWriterLock_ctor
 @ cdecl -arch=arm ??0_ReentrantBlockingLock@details@Concurrency@@QAA@XZ(ptr) _ReentrantBlockingLock_ctor
 @ thiscall -arch=i386 ??0_ReentrantBlockingLock@details@Concurrency@@QAE@XZ(ptr) _ReentrantBlockingLock_ctor
 @ cdecl -arch=win64 ??0_ReentrantBlockingLock@details@Concurrency@@QEAA@XZ(ptr) _ReentrantBlockingLock_ctor
diff --git a/dlls/msvcr100/msvcr100.spec b/dlls/msvcr100/msvcr100.spec
index 79a201f4c17..532e90b170b 100644
--- a/dlls/msvcr100/msvcr100.spec
+++ b/dlls/msvcr100/msvcr100.spec
@@ -14,8 +14,8 @@
 @ cdecl -arch=win64 ??0_NonReentrantBlockingLock@details@Concurrency@@QEAA@XZ(ptr) _ReentrantBlockingLock_ctor
 @ thiscall -arch=win32 ??0_NonReentrantPPLLock@details@Concurrency@@QAE@XZ(ptr) _NonReentrantPPLLock_ctor
 @ cdecl -arch=win64 ??0_NonReentrantPPLLock@details@Concurrency@@QEAA@XZ(ptr) _NonReentrantPPLLock_ctor
-@ stub -arch=win32 ??0_ReaderWriterLock@details@Concurrency@@QAE@XZ
-@ stub -arch=win64 ??0_ReaderWriterLock@details@Concurrency@@QEAA@XZ
+@ thiscall -arch=win32 ??0_ReaderWriterLock@details@Concurrency@@QAE@XZ(ptr) _ReaderWriterLock_ctor
+@ cdecl -arch=win64 ??0_ReaderWriterLock@details@Concurrency@@QEAA@XZ(ptr) _ReaderWriterLock_ctor
 @ thiscall -arch=win32 ??0_ReentrantBlockingLock@details@Concurrency@@QAE@XZ(ptr) _ReentrantBlockingLock_ctor
 @ cdecl -arch=win64 ??0_ReentrantBlockingLock@details@Concurrency@@QEAA@XZ(ptr) _ReentrantBlockingLock_ctor
 @ stub -arch=win32 ??0_ReentrantLock@details@Concurrency@@QAE@XZ
diff --git a/dlls/msvcr110/msvcr110.spec b/dlls/msvcr110/msvcr110.spec
index 15ceae906c1..a95c32e6d6a 100644
--- a/dlls/msvcr110/msvcr110.spec
+++ b/dlls/msvcr110/msvcr110.spec
@@ -38,9 +38,9 @@
 @ cdecl -arch=arm ??0_NonReentrantPPLLock@details@Concurrency@@QAA@XZ(ptr) _NonReentrantPPLLock_ctor
 @ thiscall -arch=i386 ??0_NonReentrantPPLLock@details@Concurrency@@QAE@XZ(ptr) _NonReentrantPPLLock_ctor
 @ cdecl -arch=win64 ??0_NonReentrantPPLLock@details@Concurrency@@QEAA@XZ(ptr) _NonReentrantPPLLock_ctor
-@ stub -arch=arm ??0_ReaderWriterLock@details@Concurrency@@QAA@XZ
-@ stub -arch=i386 ??0_ReaderWriterLock@details@Concurrency@@QAE@XZ
-@ stub -arch=win64 ??0_ReaderWriterLock@details@Concurrency@@QEAA@XZ
+@ cdecl -arch=arm ??0_ReaderWriterLock@details@Concurrency@@QAA@XZ(ptr) _ReaderWriterLock_ctor
+@ thiscall -arch=i386 ??0_ReaderWriterLock@details@Concurrency@@QAE@XZ(ptr) _ReaderWriterLock_ctor
+@ cdecl -arch=win64 ??0_ReaderWriterLock@details@Concurrency@@QEAA@XZ(ptr) _ReaderWriterLock_ctor
 @ cdecl -arch=arm ??0_ReentrantBlockingLock@details@Concurrency@@QAA@XZ(ptr) _ReentrantBlockingLock_ctor
 @ thiscall -arch=i386 ??0_ReentrantBlockingLock@details@Concurrency@@QAE@XZ(ptr) _ReentrantBlockingLock_ctor
 @ cdecl -arch=win64 ??0_ReentrantBlockingLock@details@Concurrency@@QEAA@XZ(ptr) _ReentrantBlockingLock_ctor
diff --git a/dlls/msvcr120/msvcr120.spec b/dlls/msvcr120/msvcr120.spec
index 2d6798a0af2..35895d7a9e8 100644
--- a/dlls/msvcr120/msvcr120.spec
+++ b/dlls/msvcr120/msvcr120.spec
@@ -35,9 +35,9 @@
 @ cdecl -arch=arm ??0_NonReentrantPPLLock@details@Concurrency@@QAA@XZ(ptr) _NonReentrantPPLLock_ctor
 @ thiscall -arch=i386 ??0_NonReentrantPPLLock@details@Concurrency@@QAE@XZ(ptr) _NonReentrantPPLLock_ctor
 @ cdecl -arch=win64 ??0_NonReentrantPPLLock@details@Concurrency@@QEAA@XZ(ptr) _NonReentrantPPLLock_ctor
-@ stub -arch=arm ??0_ReaderWriterLock@details@Concurrency@@QAA@XZ
-@ stub -arch=i386 ??0_ReaderWriterLock@details@Concurrency@@QAE@XZ
-@ stub -arch=win64 ??0_ReaderWriterLock@details@Concurrency@@QEAA@XZ
+@ cdecl -arch=arm ??0_ReaderWriterLock@details@Concurrency@@QAA@XZ(ptr) _ReaderWriterLock_ctor
+@ thiscall -arch=i386 ??0_ReaderWriterLock@details@Concurrency@@QAE@XZ(ptr) _ReaderWriterLock_ctor
+@ cdecl -arch=win64 ??0_ReaderWriterLock@details@Concurrency@@QEAA@XZ(ptr) _ReaderWriterLock_ctor
 @ cdecl -arch=arm ??0_ReentrantBlockingLock@details@Concurrency@@QAA@XZ(ptr) _ReentrantBlockingLock_ctor
 @ thiscall -arch=i386 ??0_ReentrantBlockingLock@details@Concurrency@@QAE@XZ(ptr) _ReentrantBlockingLock_ctor
 @ cdecl -arch=win64 ??0_ReentrantBlockingLock@details@Concurrency@@QEAA@XZ(ptr) _ReentrantBlockingLock_ctor
diff --git a/dlls/msvcr120_app/msvcr120_app.spec b/dlls/msvcr120_app/msvcr120_app.spec
index 02a28330b54..c987939c381 100644
--- a/dlls/msvcr120_app/msvcr120_app.spec
+++ b/dlls/msvcr120_app/msvcr120_app.spec
@@ -33,9 +33,9 @@
 @ cdecl -arch=arm ??0_NonReentrantPPLLock@details@Concurrency@@QAA@XZ(ptr) msvcr120.??0_NonReentrantPPLLock@details@Concurrency@@QAA@XZ
 @ thiscall -arch=i386 ??0_NonReentrantPPLLock@details@Concurrency@@QAE@XZ(ptr) msvcr120.??0_NonReentrantPPLLock@details@Concurrency@@QAE@XZ
 @ cdecl -arch=win64 ??0_NonReentrantPPLLock@details@Concurrency@@QEAA@XZ(ptr) msvcr120.??0_NonReentrantPPLLock@details@Concurrency@@QEAA@XZ
-@ stub -arch=arm ??0_ReaderWriterLock@details@Concurrency@@QAA@XZ
-@ stub -arch=i386 ??0_ReaderWriterLock@details@Concurrency@@QAE@XZ
-@ stub -arch=win64 ??0_ReaderWriterLock@details@Concurrency@@QEAA@XZ
+@ cdecl -arch=arm ??0_ReaderWriterLock@details@Concurrency@@QAA@XZ(ptr) msvcr120.??0_ReaderWriterLock@details@Concurrency@@QAA@XZ
+@ thiscall -arch=i386 ??0_ReaderWriterLock@details@Concurrency@@QAE@XZ(ptr) msvcr120.??0_ReaderWriterLock@details@Concurrency@@QAE@XZ
+@ cdecl -arch=win64 ??0_ReaderWriterLock@details@Concurrency@@QEAA@XZ(ptr) msvcr120.??0_ReaderWriterLock@details@Concurrency@@QEAA@XZ
 @ cdecl -arch=arm ??0_ReentrantBlockingLock@details@Concurrency@@QAA@XZ(ptr) msvcr120.??0_ReentrantBlockingLock@details@Concurrency@@QAA@XZ
 @ thiscall -arch=i386 ??0_ReentrantBlockingLock@details@Concurrency@@QAE@XZ(ptr) msvcr120.??0_ReentrantBlockingLock@details@Concurrency@@QAE@XZ
 @ cdecl -arch=win64 ??0_ReentrantBlockingLock@details@Concurrency@@QEAA@XZ(ptr) msvcr120.??0_ReentrantBlockingLock@details@Concurrency@@QEAA@XZ
diff --git a/dlls/msvcrt/concurrency.c b/dlls/msvcrt/concurrency.c
index 68091c21e60..a9879879301 100644
--- a/dlls/msvcrt/concurrency.c
+++ b/dlls/msvcrt/concurrency.c
@@ -295,6 +295,12 @@ typedef struct
     } wait;
 } _ReentrantPPLLock__Scoped_lock;
 
+typedef struct
+{
+    LONG state;
+    LONG count;
+} _ReaderWriterLock;
+
 #define EVT_RUNNING     (void*)1
 #define EVT_WAITING     NULL
 
@@ -3562,6 +3568,19 @@ bool __thiscall _ReentrantBlockingLock__TryAcquire(_ReentrantBlockingLock *this)
     return TryEnterCriticalSection(&this->cs);
 }
 
+/* ??0_ReaderWriterLock@details@Concurrency@@QAA@XZ */
+/* ??0_ReaderWriterLock@details@Concurrency@@QAE@XZ */
+/* ??0_ReaderWriterLock@details@Concurrency@@QEAA@XZ */
+DEFINE_THISCALL_WRAPPER(_ReaderWriterLock_ctor, 4)
+_ReaderWriterLock* __thiscall _ReaderWriterLock_ctor(_ReaderWriterLock *this)
+{
+    TRACE("(%p)\n", this);
+
+    this->state = 0;
+    this->count = 0;
+    return this;
+}
+
 /* ?wait@Concurrency@@YAXI@Z */
 void __cdecl Concurrency_wait(unsigned int time)
 {
-- 
GitLab

From 1580c1133a190f850182ce891f7299a157b1d0fb Mon Sep 17 00:00:00 2001
From: David Kahurani <k.kahurani@gmail.com>
Date: Fri, 26 Jan 2024 16:08:33 +0300
Subject: [PATCH] msvcrt: Free previous environment variable when clearing.

Shifting the rest of the variables by one towards indices of lesser value
overwrites the variable being cleared and effectively leaks it.

Signed-off-by: David Kahurani <k.kahurani@gmail.com>
---
 dlls/msvcrt/environ.c | 2 ++
 1 file changed, 2 insertions(+)

diff --git a/dlls/msvcrt/environ.c b/dlls/msvcrt/environ.c
index aa857afa615..a0d2e08c7d0 100644
--- a/dlls/msvcrt/environ.c
+++ b/dlls/msvcrt/environ.c
@@ -161,6 +161,7 @@ static int env_set(char **env, wchar_t **wenv)
     *eq = '=';
     if (!eq[1])
     {
+        free(MSVCRT__environ[idx]);
         for(; MSVCRT__environ[idx]; idx++)
             MSVCRT__environ[idx] = MSVCRT__environ[idx + 1];
     }
@@ -187,6 +188,7 @@ static int env_set(char **env, wchar_t **wenv)
     *weq = '=';
     if (!weq[1])
     {
+        free(MSVCRT__wenviron[idx]);
         for(; MSVCRT__wenviron[idx]; idx++)
             MSVCRT__wenviron[idx] = MSVCRT__wenviron[idx + 1];
     }
-- 
GitLab

From 779ba03bcda26895fab21d396442b302c004cd4c Mon Sep 17 00:00:00 2001
From: Piotr Caban <piotr@codeweavers.com>
Date: Mon, 29 Jan 2024 13:45:06 +0100
Subject: [PATCH 1/2] msvcrt: Store _unDName function parameter backreferences
 in parsed_symbol structure.

Wine-Bug: https://bugs.winehq.org/show_bug.cgi?id=53934
---
 dlls/msvcrt/tests/cpp.c |  6 ++++++
 dlls/msvcrt/undname.c   | 29 +++++++++++++++++++++--------
 2 files changed, 27 insertions(+), 8 deletions(-)

diff --git a/dlls/msvcrt/tests/cpp.c b/dlls/msvcrt/tests/cpp.c
index d230659404d..5716455424a 100644
--- a/dlls/msvcrt/tests/cpp.c
+++ b/dlls/msvcrt/tests/cpp.c
@@ -1324,6 +1324,12 @@ static void test_demangle(void)
            "void __cdecl <CrtImplementationDetails>::RegisterModuleUninitializer(class System::EventHandler ^)"},
 /* 151 */ {"?RegisterModuleUninitializer@<CrtImplementationDetails>@@YAXBE$AAVEventHandler@System@@@Z",
            "void __cdecl <CrtImplementationDetails>::RegisterModuleUninitializer(class System::EventHandler % __ptr64 volatile)"},
+/* 152 */ {"??$forward@AEAUFFIValue@?1??call@FFIFunctionBinder@@CAHPEAUlua_State@@@Z@@std@@YAAEAUFFIValue@?1??call@"
+           "FFIFunctionBinder@@CAHPEAUxlua_State@@@Z@AEAU1?1??23@CAH0@Z@@Z",
+           "struct `private: static int __cdecl FFIFunctionBinder::call(struct xlua_State * __ptr64)'::`2'::FFIValue & "
+           "__ptr64 __cdecl std::forward<struct `private: static int __cdecl FFIFunctionBinder::call(struct lua_State "
+           "* __ptr64)'::`2'::FFIValue & __ptr64>(struct `private: static int __cdecl FFIFunctionBinder::call(struct "
+           "xlua_State * __ptr64)'::`2'::FFIValue & __ptr64)"},
     };
     int i, num_test = ARRAY_SIZE(test);
     char* name;
diff --git a/dlls/msvcrt/undname.c b/dlls/msvcrt/undname.c
index 91d4fdbc3eb..21a4924b6a4 100644
--- a/dlls/msvcrt/undname.c
+++ b/dlls/msvcrt/undname.c
@@ -70,6 +70,7 @@ struct parsed_symbol
     char*               result;         /* demangled string */
 
     struct array        names;          /* array of names for back reference */
+    struct array        args;           /* array of arguments for back reference */
     struct array        stack;          /* stack of parsed strings */
 
     void*               alloc_list;     /* linked list of allocated blocks */
@@ -362,12 +363,15 @@ static char* get_args(struct parsed_symbol* sym, struct array* pmt_ref, BOOL z_t
     char*               args_str = NULL;
     char*               last;
     unsigned int        i;
+    const char *p;
 
     str_array_init(&arg_collect);
 
     /* Now come the function arguments */
     while (*sym->current)
     {
+        p = sym->current;
+
         /* Decode each data type and append it to the argument list */
         if (*sym->current == '@')
         {
@@ -382,14 +386,20 @@ static char* get_args(struct parsed_symbol* sym, struct array* pmt_ref, BOOL z_t
                             &arg_collect))
             return NULL;
         if (!strcmp(ct.left, "...")) break;
+        if (z_term && sym->current - p > 1 && sym->args.num < 20)
+        {
+            if (!str_array_push(sym, ct.left ? ct.left : "", -1, &sym->args) ||
+                    !str_array_push(sym, ct.right ? ct.right : "", -1, &sym->args))
+                return NULL;
+        }
     }
     /* Functions are always terminated by 'Z'. If we made it this far and
      * don't find it, we have incorrectly identified a data type.
      */
     if (z_term && *sym->current++ != 'Z') return NULL;
 
-    if (arg_collect.num == 0 || 
-        (arg_collect.num == 1 && !strcmp(arg_collect.elts[0], "void")))        
+    if (arg_collect.num == 0 ||
+        (arg_collect.num == 1 && !strcmp(arg_collect.elts[0], "void")))
         return str_printf(sym, "%cvoid%c", open_char, close_char);
     for (i = 1; i < arg_collect.num; i++)
     {
@@ -398,12 +408,12 @@ static char* get_args(struct parsed_symbol* sym, struct array* pmt_ref, BOOL z_t
 
     last = args_str ? args_str : arg_collect.elts[0];
     if (close_char == '>' && last[strlen(last) - 1] == '>')
-        args_str = str_printf(sym, "%c%s%s %c", 
+        args_str = str_printf(sym, "%c%s%s %c",
                               open_char, arg_collect.elts[0], args_str, close_char);
     else
-        args_str = str_printf(sym, "%c%s%s%c", 
+        args_str = str_printf(sym, "%c%s%s%c",
                               open_char, arg_collect.elts[0], args_str, close_char);
-    
+
     return args_str;
 }
 
@@ -642,6 +652,7 @@ static char* get_template_name(struct parsed_symbol* sym)
     unsigned num_mark = sym->names.num;
     unsigned start_mark = sym->names.start;
     unsigned stack_mark = sym->stack.num;
+    unsigned args_mark = sym->args.num;
     struct array array_pmt;
 
     sym->names.start = sym->names.num;
@@ -656,6 +667,7 @@ static char* get_template_name(struct parsed_symbol* sym)
     sym->names.num = num_mark;
     sym->names.start = start_mark;
     sym->stack.num = stack_mark;
+    sym->args.num = args_mark;
     return name;
 }
 
@@ -1043,9 +1055,8 @@ static BOOL demangle_datatype(struct parsed_symbol* sym, struct datatype_t* ct,
     case '5': case '6': case '7': case '8': case '9':
         /* Referring back to previously parsed type */
         /* left and right are pushed as two separate strings */
-        if (!pmt_ref) goto done;
-        ct->left = str_array_get_ref(pmt_ref, (dt - '0') * 2);
-        ct->right = str_array_get_ref(pmt_ref, (dt - '0') * 2 + 1);
+        ct->left = str_array_get_ref(&sym->args, (dt - '0') * 2);
+        ct->right = str_array_get_ref(&sym->args, (dt - '0') * 2 + 1);
         if (!ct->left) goto done;
         add_pmt = FALSE;
         break;
@@ -1636,12 +1647,14 @@ static BOOL symbol_demangle(struct parsed_symbol* sym)
         sym->current++;
         if (in_template)
         {
+            unsigned args_mark = sym->args.num;
             const char *args;
             struct array array_pmt;
 
             str_array_init(&array_pmt);
             args = get_args(sym, &array_pmt, FALSE, '<', '>');
             if (args) function_name = function_name ? str_printf(sym, "%s%s", function_name, args) : args;
+            sym->args.num = args_mark;
             sym->names.num = 0;
         }
         if (!str_array_push(sym, function_name, -1, &sym->stack))
-- 
GitLab


From fdd9e257e2913ecb53fa3c31bfa9ed1ec65fce3c Mon Sep 17 00:00:00 2001
From: Piotr Caban <piotr@codeweavers.com>
Date: Mon, 29 Jan 2024 14:03:28 +0100
Subject: [PATCH 2/2] msvcrt: Remove no longer used parameters reference
 arguments from _unDname helpers.

---
 dlls/msvcrt/undname.c | 73 +++++++++++++++----------------------------
 1 file changed, 26 insertions(+), 47 deletions(-)

diff --git a/dlls/msvcrt/undname.c b/dlls/msvcrt/undname.c
index 21a4924b6a4..85ee181fc2c 100644
--- a/dlls/msvcrt/undname.c
+++ b/dlls/msvcrt/undname.c
@@ -301,7 +301,7 @@ enum datatype_flags
 
 /* forward declaration */
 static BOOL demangle_datatype(struct parsed_symbol* sym, struct datatype_t* ct,
-                              struct array* pmt, enum datatype_flags flags);
+                              enum datatype_flags flags);
 
 static const char* get_number(struct parsed_symbol* sym)
 {
@@ -354,7 +354,7 @@ static const char* get_number(struct parsed_symbol* sym)
  * Parses a list of function/method arguments, creates a string corresponding
  * to the arguments' list.
  */
-static char* get_args(struct parsed_symbol* sym, struct array* pmt_ref, BOOL z_term, 
+static char* get_args(struct parsed_symbol* sym, BOOL z_term,
                       char open_char, char close_char)
 
 {
@@ -378,7 +378,7 @@ static char* get_args(struct parsed_symbol* sym, struct array* pmt_ref, BOOL z_t
             sym->current++;
             break;
         }
-        if (!demangle_datatype(sym, &ct, pmt_ref, IN_ARGS))
+        if (!demangle_datatype(sym, &ct, IN_ARGS))
             return NULL;
         /* 'void' terminates an argument list in a function */
         if (z_term && !strcmp(ct.left, "void")) break;
@@ -504,7 +504,7 @@ static BOOL get_function_qualifier(struct parsed_symbol *sym, const char** quali
 }
 
 static BOOL get_qualified_type(struct datatype_t *ct, struct parsed_symbol* sym,
-                              struct array *pmt_ref, char qualif, enum datatype_flags flags)
+                               char qualif, enum datatype_flags flags)
 {
     struct datatype_t xdt1;
     struct datatype_t xdt2;
@@ -589,7 +589,7 @@ static BOOL get_qualified_type(struct datatype_t *ct, struct parsed_symbol* sym,
         }
 
         /* Recurse to get the referred-to type */
-        if (!demangle_datatype(sym, &sub_ct, pmt_ref, 0))
+        if (!demangle_datatype(sym, &sub_ct, 0))
             return FALSE;
         if (sub_ct.flags & DT_NO_LEADING_WS)
             ct->left++;
@@ -653,15 +653,13 @@ static char* get_template_name(struct parsed_symbol* sym)
     unsigned start_mark = sym->names.start;
     unsigned stack_mark = sym->stack.num;
     unsigned args_mark = sym->args.num;
-    struct array array_pmt;
 
     sym->names.start = sym->names.num;
     if (!(name = get_literal_string(sym))) {
         sym->names.start = start_mark;
         return FALSE;
     }
-    str_array_init(&array_pmt);
-    args = get_args(sym, &array_pmt, FALSE, '<', '>');
+    args = get_args(sym, FALSE, '<', '>');
     if (args != NULL)
         name = str_printf(sym, "%s%s", name, args);
     sym->names.num = num_mark;
@@ -899,18 +897,17 @@ struct function_signature
     const char*             arguments;
 };
 
-static BOOL get_function_signature(struct parsed_symbol* sym, struct array* pmt_ref,
-                                   struct function_signature* fs)
+static BOOL get_function_signature(struct parsed_symbol* sym, struct function_signature* fs)
 {
     unsigned mark = sym->stack.num;
 
     if (!get_calling_convention(*sym->current++,
                                 &fs->call_conv, &fs->exported,
                                 sym->flags & ~UNDNAME_NO_ALLOCATION_LANGUAGE) ||
-        !demangle_datatype(sym, &fs->return_ct, pmt_ref, FALSE))
+        !demangle_datatype(sym, &fs->return_ct, FALSE))
         return FALSE;
 
-    if (!(fs->arguments = get_args(sym, pmt_ref, TRUE, '(', ')')))
+    if (!(fs->arguments = get_args(sym, TRUE, '(', ')')))
         return FALSE;
     sym->stack.num = mark;
 
@@ -925,10 +922,9 @@ static BOOL get_function_signature(struct parsed_symbol* sym, struct array* pmt_
  * char** = (pointer to (pointer to (char)))
  */
 static BOOL demangle_datatype(struct parsed_symbol* sym, struct datatype_t* ct,
-                              struct array* pmt_ref, enum datatype_flags flags)
+                              enum datatype_flags flags)
 {
     char                dt;
-    BOOL                add_pmt = TRUE;
 
     assert(ct);
     ct->left = ct->right = NULL;
@@ -945,7 +941,6 @@ static BOOL demangle_datatype(struct parsed_symbol* sym, struct datatype_t* ct,
     case 'N': case 'O': case 'X': case 'Z':
         /* Simple data types */
         ct->left = get_simple_type(dt);
-        add_pmt = FALSE;
         break;
     case 'T': /* union */
     case 'U': /* struct */
@@ -981,17 +976,17 @@ static BOOL demangle_datatype(struct parsed_symbol* sym, struct datatype_t* ct,
         }
         else
         {
-            if (!get_qualified_type(ct, sym, pmt_ref, '?', flags)) goto done;
+            if (!get_qualified_type(ct, sym, '?', flags)) goto done;
         }
         break;
     case 'A': /* reference */
     case 'B': /* volatile reference */
-        if (!get_qualified_type(ct, sym, pmt_ref, dt, flags)) goto done;
+        if (!get_qualified_type(ct, sym, dt, flags)) goto done;
         break;
     case 'Q': /* const pointer */
     case 'R': /* volatile pointer */
     case 'S': /* const volatile pointer */
-        if (!get_qualified_type(ct, sym, pmt_ref, (flags & IN_ARGS) ? dt : 'P', flags)) goto done;
+        if (!get_qualified_type(ct, sym, (flags & IN_ARGS) ? dt : 'P', flags)) goto done;
         break;
     case 'P': /* Pointer */
         if (isdigit(*sym->current))
@@ -1012,7 +1007,7 @@ static BOOL demangle_datatype(struct parsed_symbol* sym, struct datatype_t* ct,
                     goto done;
                 if (!get_function_qualifier(sym, &function_qualifier))
                     goto done;
-                if (!get_function_signature(sym, pmt_ref, &fs))
+                if (!get_function_signature(sym, &fs))
                      goto done;
 
                 ct->left  = str_printf(sym, "%s%s (%s %s::*",
@@ -1025,7 +1020,7 @@ static BOOL demangle_datatype(struct parsed_symbol* sym, struct datatype_t* ct,
 
                 sym->current++;
 
-                if (!get_function_signature(sym, pmt_ref, &fs))
+                if (!get_function_signature(sym, &fs))
                      goto done;
 
                 ct->left  = str_printf(sym, "%s%s (%s*",
@@ -1035,7 +1030,7 @@ static BOOL demangle_datatype(struct parsed_symbol* sym, struct datatype_t* ct,
             }
             else goto done;
 	}
-	else if (!get_qualified_type(ct, sym, pmt_ref, 'P', flags)) goto done;
+	else if (!get_qualified_type(ct, sym, 'P', flags)) goto done;
         break;
     case 'W':
         if (*sym->current == '4')
@@ -1058,7 +1053,6 @@ static BOOL demangle_datatype(struct parsed_symbol* sym, struct datatype_t* ct,
         ct->left = str_array_get_ref(&sym->args, (dt - '0') * 2);
         ct->right = str_array_get_ref(&sym->args, (dt - '0') * 2 + 1);
         if (!ct->left) goto done;
-        add_pmt = FALSE;
         break;
     case '$':
         switch (*sym->current++)
@@ -1110,7 +1104,7 @@ static BOOL demangle_datatype(struct parsed_symbol* sym, struct datatype_t* ct,
 
                     sym->current++;
 
-                    if (!get_function_signature(sym, pmt_ref, &fs))
+                    if (!get_function_signature(sym, &fs))
                         goto done;
                     ct->left = str_printf(sym, "%s%s %s%s",
                                           fs.return_ct.left, fs.return_ct.right, fs.call_conv, fs.arguments);
@@ -1137,7 +1131,7 @@ static BOOL demangle_datatype(struct parsed_symbol* sym, struct datatype_t* ct,
                         arr = str_printf(sym, "%s[%s]", arr, get_number(sym));
                 }
 
-                if (!demangle_datatype(sym, &sub_ct, pmt_ref, 0)) goto done;
+                if (!demangle_datatype(sym, &sub_ct, 0)) goto done;
 
                 if (arr)
                     ct->left = str_printf(sym, "%s %s", sub_ct.left, arr);
@@ -1152,13 +1146,13 @@ static BOOL demangle_datatype(struct parsed_symbol* sym, struct datatype_t* ct,
 
                 sym->current++;
                 if (!get_qualifier(sym, &xdt, NULL)) goto done;
-                if (!demangle_datatype(sym, ct, pmt_ref, flags)) goto done;
+                if (!demangle_datatype(sym, ct, flags)) goto done;
                 ct->left = str_printf(sym, "%s %s", ct->left, xdt.left);
             }
             else if (*sym->current == 'Q')
             {
                 sym->current++;
-                if (!get_qualified_type(ct, sym, pmt_ref, '$', flags)) goto done;
+                if (!get_qualified_type(ct, sym, '$', flags)) goto done;
             }
             break;
         }
@@ -1167,13 +1161,6 @@ static BOOL demangle_datatype(struct parsed_symbol* sym, struct datatype_t* ct,
         ERR("Unknown type %c\n", dt);
         break;
     }
-    if (add_pmt && pmt_ref && (flags & IN_ARGS))
-    {
-        /* left and right are pushed as two separate strings */
-        if (!str_array_push(sym, ct->left ? ct->left : "", -1, pmt_ref) ||
-            !str_array_push(sym, ct->right ? ct->right : "", -1, pmt_ref))
-            return FALSE;
-    }
 done:
     
     return ct->left != NULL;
@@ -1228,12 +1215,9 @@ static BOOL handle_data(struct parsed_symbol* sym)
     case '3': case '4': case '5':
         {
             unsigned mark = sym->stack.num;
-            struct array pmt;
             const char* class;
 
-            str_array_init(&pmt);
-
-            if (!demangle_datatype(sym, &ct, &pmt, 0)) goto done;
+            if (!demangle_datatype(sym, &ct, 0)) goto done;
             if (!get_qualifier(sym, &xdt, &class)) goto done; /* class doesn't seem to be displayed */
             if (xdt.left && xdt.right) xdt.left = str_printf(sym, "%s %s", xdt.left, xdt.right);
             else if (!xdt.left) xdt.left = xdt.right;
@@ -1289,7 +1273,6 @@ static BOOL handle_method(struct parsed_symbol* sym, BOOL cast_op)
     const char*         name = NULL;
     BOOL                ret = FALSE, has_args = TRUE, has_ret = TRUE;
     unsigned            mark;
-    struct array        array_pmt;
 
     /* FIXME: why 2 possible letters for each option?
      * 'A' private:
@@ -1419,8 +1402,6 @@ static BOOL handle_method(struct parsed_symbol* sym, BOOL cast_op)
                                 sym->flags))
         goto done;
 
-    str_array_init(&array_pmt);
-
     /* Return type, or @ if 'void' */
     if (has_ret && *sym->current == '@')
     {
@@ -1430,7 +1411,7 @@ static BOOL handle_method(struct parsed_symbol* sym, BOOL cast_op)
     }
     else if (has_ret)
     {
-        if (!demangle_datatype(sym, &ct_ret, &array_pmt, cast_op ? WS_AFTER_QUAL_IF : 0))
+        if (!demangle_datatype(sym, &ct_ret, cast_op ? WS_AFTER_QUAL_IF : 0))
             goto done;
     }
     if (!has_ret || sym->flags & UNDNAME_NO_FUNCTION_RETURNS)
@@ -1442,7 +1423,7 @@ static BOOL handle_method(struct parsed_symbol* sym, BOOL cast_op)
     }
 
     mark = sym->stack.num;
-    if (has_args && !(args_str = get_args(sym, &array_pmt, TRUE, '(', ')'))) goto done;
+    if (has_args && !(args_str = get_args(sym, TRUE, '(', ')'))) goto done;
     if (sym->flags & UNDNAME_NAME_ONLY) args_str = function_qualifier = NULL;
     if (sym->flags & UNDNAME_NO_THISTYPE) function_qualifier = NULL;
     sym->stack.num = mark;
@@ -1479,7 +1460,7 @@ static BOOL symbol_demangle(struct parsed_symbol* sym)
     {
         struct datatype_t   ct;
 
-        if (demangle_datatype(sym, &ct, NULL, 0))
+        if (demangle_datatype(sym, &ct, 0))
         {
             sym->result = str_printf(sym, "%s%s", ct.left, ct.right);
             ret = TRUE;
@@ -1582,7 +1563,7 @@ static BOOL symbol_demangle(struct parsed_symbol* sym)
                         struct datatype_t       ct;
 
                         sym->current++;
-                        if (!demangle_datatype(sym, &ct, NULL, 0))
+                        if (!demangle_datatype(sym, &ct, 0))
                             goto done;
                         function_name = str_printf(sym, "%s%s `RTTI Type Descriptor'",
                                                    ct.left, ct.right);
@@ -1649,10 +1630,8 @@ static BOOL symbol_demangle(struct parsed_symbol* sym)
         {
             unsigned args_mark = sym->args.num;
             const char *args;
-            struct array array_pmt;
 
-            str_array_init(&array_pmt);
-            args = get_args(sym, &array_pmt, FALSE, '<', '>');
+            args = get_args(sym, FALSE, '<', '>');
             if (args) function_name = function_name ? str_printf(sym, "%s%s", function_name, args) : args;
             sym->args.num = args_mark;
             sym->names.num = 0;
-- 
GitLab

From 16dafed08b2e4b483176c5ee286134544a4badf8 Mon Sep 17 00:00:00 2001
From: Paul Gofman <pgofman@codeweavers.com>
Date: Fri, 8 Dec 2023 19:10:07 -0600
Subject: [PATCH] msvcrt: Adjust _gmtime64_s() accepted time limits.

---
 dlls/msvcr120/tests/msvcr120.c | 78 ++++++++++++++++++++++++++++++++++
 dlls/msvcrt/tests/time.c       | 77 +++++++++++++++++++++++++++++++++
 dlls/msvcrt/time.c             | 15 ++++++-
 dlls/ucrtbase/tests/misc.c     | 75 ++++++++++++++++++++++++++++++++
 include/msvcrt/time.h          |  3 ++
 5 files changed, 247 insertions(+), 1 deletion(-)

diff --git a/dlls/msvcr120/tests/msvcr120.c b/dlls/msvcr120/tests/msvcr120.c
index c76db6582cf..656004f4826 100644
--- a/dlls/msvcr120/tests/msvcr120.c
+++ b/dlls/msvcr120/tests/msvcr120.c
@@ -35,6 +35,8 @@
 
 #include <locale.h>
 
+#define _MAX__TIME64_T     (((__time64_t)0x00000007 << 32) | 0x93406FFF)
+
 #ifdef __i386__
 #include "pshpack1.h"
 struct thiscall_thunk
@@ -226,6 +228,10 @@ static wctrans_t (__cdecl *p_wctrans)(const char*);
 static wint_t (__cdecl *p_towctrans)(wint_t, wctrans_t);
 static int (__cdecl *p_strcmp)(const char *, const char *);
 static int (__cdecl *p_strncmp)(const char *, const char *, size_t);
+static struct tm* (__cdecl *p_gmtime32)(__time32_t*);
+static errno_t    (__cdecl *p_gmtime32_s)(struct tm*, __time32_t*);
+static struct tm* (__cdecl *p_gmtime64)(__time64_t*);
+static errno_t    (__cdecl *p_gmtime64_s)(struct tm*, __time64_t*);
 
 /* make sure we use the correct errno */
 #undef errno
@@ -296,6 +302,10 @@ static BOOL init(void)
     p_errno = (void*)GetProcAddress(module, "_errno");
     p_wcreate_locale = (void*)GetProcAddress(module, "_wcreate_locale");
     p_free_locale = (void*)GetProcAddress(module, "_free_locale");
+    p_gmtime64 = (void*)GetProcAddress(module, "_gmtime64");
+    p_gmtime64_s = (void*)GetProcAddress(module, "_gmtime64_s");
+    p_gmtime32 = (void*)GetProcAddress(module, "_gmtime32");
+    p_gmtime32_s = (void*)GetProcAddress(module, "_gmtime32_s");
     SET(p_wctype, "wctype");
     SET(p_fegetenv, "fegetenv");
     SET(p_fesetenv, "fesetenv");
@@ -1714,6 +1724,73 @@ static void test_strcmp(void)
     ok( ret == 0, "wrong ret %d\n", ret );
 }
 
+static void test_gmtime64(void)
+{
+    struct tm *ptm, tm;
+    __time64_t t;
+    int ret;
+
+    t = -1;
+    memset(&tm, 0xcc, sizeof(tm));
+    ptm = p_gmtime64(&t);
+    ok(!!ptm, "got NULL.\n");
+    ret = p_gmtime64_s(&tm, &t);
+    ok(!ret, "got %d.\n", ret);
+    ok(tm.tm_year == 69 && tm.tm_hour == 23 && tm.tm_min == 59 && tm.tm_sec == 59, "got %d, %d, %d, %d.\n",
+            tm.tm_year, tm.tm_hour, tm.tm_min, tm.tm_sec);
+
+    t = -43200;
+    memset(&tm, 0xcc, sizeof(tm));
+    ptm = p_gmtime64(&t);
+    ok(!!ptm, "got NULL.\n");
+    ret = p_gmtime64_s(&tm, &t);
+    ok(!ret, "got %d.\n", ret);
+    ok(tm.tm_year == 69 && tm.tm_hour == 12 && tm.tm_min == 0 && tm.tm_sec == 0, "got %d, %d, %d, %d.\n",
+            tm.tm_year, tm.tm_hour, tm.tm_min, tm.tm_sec);
+    ptm = p_gmtime32((__time32_t *)&t);
+    ok(!!ptm, "got NULL.\n");
+    memset(&tm, 0xcc, sizeof(tm));
+    ret = p_gmtime32_s(&tm, (__time32_t *)&t);
+    ok(!ret, "got %d.\n", ret);
+    todo_wine_if(tm.tm_year == 69 && tm.tm_hour == 12)
+    ok(tm.tm_year == 70 && tm.tm_hour == -12 && tm.tm_min == 0 && tm.tm_sec == 0, "got %d, %d, %d, %d.\n",
+            tm.tm_year, tm.tm_hour, tm.tm_min, tm.tm_sec);
+
+    t = -43201;
+    ptm = p_gmtime64(&t);
+    ok(!ptm, "got non-NULL.\n");
+    memset(&tm, 0xcc, sizeof(tm));
+    ret = p_gmtime64_s(&tm, &t);
+    ok(ret == EINVAL, "got %d.\n", ret);
+    ok(tm.tm_year == -1 && tm.tm_hour == -1 && tm.tm_min == -1 && tm.tm_sec == -1, "got %d, %d, %d, %d.\n",
+            tm.tm_year, tm.tm_hour, tm.tm_min, tm.tm_sec);
+    ptm = p_gmtime32((__time32_t *)&t);
+    ok(!ptm, "got NULL.\n");
+    memset(&tm, 0xcc, sizeof(tm));
+    ret = p_gmtime32_s(&tm, (__time32_t *)&t);
+    ok(ret == EINVAL, "got %d.\n", ret);
+    ok(tm.tm_year == -1 && tm.tm_hour == -1 && tm.tm_min == -1 && tm.tm_sec == -1, "got %d, %d, %d, %d.\n",
+            tm.tm_year, tm.tm_hour, tm.tm_min, tm.tm_sec);
+
+    t = _MAX__TIME64_T + 46800;
+    memset(&tm, 0xcc, sizeof(tm));
+    ptm = p_gmtime64(&t);
+    ok(!!ptm, "got NULL.\n");
+    ret = p_gmtime64_s(&tm, &t);
+    ok(!ret, "got %d.\n", ret);
+    ok(tm.tm_year == 1101 && tm.tm_hour == 20 && tm.tm_min == 59 && tm.tm_sec == 59, "got %d, %d, %d, %d.\n",
+            tm.tm_year, tm.tm_hour, tm.tm_min, tm.tm_sec);
+
+    t = _MAX__TIME64_T + 46801;
+    ptm = p_gmtime64(&t);
+    ok(!ptm, "got non-NULL.\n");
+    memset(&tm, 0xcc, sizeof(tm));
+    ret = p_gmtime64_s(&tm, &t);
+    ok(ret == EINVAL, "got %d.\n", ret);
+    ok(tm.tm_year == -1 && tm.tm_hour == -1 && tm.tm_min == -1 && tm.tm_sec == -1, "got %d, %d, %d, %d.\n",
+            tm.tm_year, tm.tm_hour, tm.tm_min, tm.tm_sec);
+}
+
 START_TEST(msvcr120)
 {
     if (!init()) return;
@@ -1738,4 +1815,5 @@ START_TEST(msvcr120)
     test_CurrentContext();
     test_StructuredTaskCollection();
     test_strcmp();
+    test_gmtime64();
 }
diff --git a/dlls/msvcrt/tests/time.c b/dlls/msvcrt/tests/time.c
index 4ed17c940a9..aba911f30a4 100644
--- a/dlls/msvcrt/tests/time.c
+++ b/dlls/msvcrt/tests/time.c
@@ -55,6 +55,8 @@ static __time32_t (__cdecl *p_mkgmtime32)(struct tm*);
 static struct tm* (__cdecl *p_gmtime32)(__time32_t*);
 static struct tm* (__cdecl *p_gmtime)(time_t*);
 static errno_t    (__cdecl *p_gmtime32_s)(struct tm*, __time32_t*);
+static struct tm* (__cdecl *p_gmtime64)(__time64_t*);
+static errno_t    (__cdecl *p_gmtime64_s)(struct tm*, __time64_t*);
 static errno_t    (__cdecl *p_strtime_s)(char*,size_t);
 static errno_t    (__cdecl *p_strdate_s)(char*,size_t);
 static errno_t    (__cdecl *p_localtime32_s)(struct tm*, __time32_t*);
@@ -76,6 +78,8 @@ static void init(void)
     p_gmtime32 = (void*)GetProcAddress(hmod, "_gmtime32");
     p_gmtime = (void*)GetProcAddress(hmod, "gmtime");
     p_gmtime32_s = (void*)GetProcAddress(hmod, "_gmtime32_s");
+    p_gmtime64 = (void*)GetProcAddress(hmod, "_gmtime64");
+    p_gmtime64_s = (void*)GetProcAddress(hmod, "_gmtime64_s");
     p_mkgmtime32 = (void*)GetProcAddress(hmod, "_mkgmtime32");
     p_strtime_s = (void*)GetProcAddress(hmod, "_strtime_s");
     p_strdate_s = (void*)GetProcAddress(hmod, "_strdate_s");
@@ -208,6 +212,78 @@ static void test_gmtime(void)
     }
 }
 
+static void test_gmtime64(void)
+{
+    struct tm *ptm, tm;
+    __time64_t t;
+    int ret;
+
+    t = -1;
+    memset(&tm, 0xcc, sizeof(tm));
+    ptm = p_gmtime64(&t);
+    if (!ptm)
+    {
+        skip("Old gmtime64 limits, skipping tests.\n");
+        return;
+    }
+    ok(!!ptm, "got NULL.\n");
+    ret = p_gmtime64_s(&tm, &t);
+    ok(!ret, "got %d.\n", ret);
+    ok(tm.tm_year == 69 && tm.tm_hour == 23 && tm.tm_min == 59 && tm.tm_sec == 59, "got %d, %d, %d, %d.\n",
+            tm.tm_year, tm.tm_hour, tm.tm_min, tm.tm_sec);
+
+    t = -43200;
+    memset(&tm, 0xcc, sizeof(tm));
+    ptm = p_gmtime64(&t);
+    ok(!!ptm, "got NULL.\n");
+    ret = p_gmtime64_s(&tm, &t);
+    ok(!ret, "got %d.\n", ret);
+    ok(tm.tm_year == 69 && tm.tm_hour == 12 && tm.tm_min == 0 && tm.tm_sec == 0, "got %d, %d, %d, %d.\n",
+            tm.tm_year, tm.tm_hour, tm.tm_min, tm.tm_sec);
+    ptm = p_gmtime32((__time32_t *)&t);
+    ok(!!ptm, "got NULL.\n");
+    memset(&tm, 0xcc, sizeof(tm));
+    ret = p_gmtime32_s(&tm, (__time32_t *)&t);
+    ok(!ret, "got %d.\n", ret);
+    todo_wine_if(tm.tm_year == 69 && tm.tm_hour == 12)
+    ok(tm.tm_year == 70 && tm.tm_hour == -12 && tm.tm_min == 0 && tm.tm_sec == 0, "got %d, %d, %d, %d.\n",
+            tm.tm_year, tm.tm_hour, tm.tm_min, tm.tm_sec);
+
+    t = -43201;
+    ptm = p_gmtime64(&t);
+    ok(!ptm, "got non-NULL.\n");
+    memset(&tm, 0xcc, sizeof(tm));
+    ret = p_gmtime64_s(&tm, &t);
+    ok(ret == EINVAL, "got %d.\n", ret);
+    ok(tm.tm_year == -1 && tm.tm_hour == -1 && tm.tm_min == -1 && tm.tm_sec == -1, "got %d, %d, %d, %d.\n",
+            tm.tm_year, tm.tm_hour, tm.tm_min, tm.tm_sec);
+    ptm = p_gmtime32((__time32_t *)&t);
+    ok(!ptm, "got NULL.\n");
+    memset(&tm, 0xcc, sizeof(tm));
+    ret = p_gmtime32_s(&tm, (__time32_t *)&t);
+    ok(ret == EINVAL, "got %d.\n", ret);
+    ok(tm.tm_year == -1 && tm.tm_hour == -1 && tm.tm_min == -1 && tm.tm_sec == -1, "got %d, %d, %d, %d.\n",
+            tm.tm_year, tm.tm_hour, tm.tm_min, tm.tm_sec);
+
+    t = _MAX__TIME64_T + 46800;
+    memset(&tm, 0xcc, sizeof(tm));
+    ptm = p_gmtime64(&t);
+    ok(!!ptm, "got NULL.\n");
+    ret = p_gmtime64_s(&tm, &t);
+    ok(!ret, "got %d.\n", ret);
+    ok(tm.tm_year == 1101 && tm.tm_hour == 20 && tm.tm_min == 59 && tm.tm_sec == 59, "got %d, %d, %d, %d.\n",
+            tm.tm_year, tm.tm_hour, tm.tm_min, tm.tm_sec);
+
+    t = _MAX__TIME64_T + 46801;
+    ptm = p_gmtime64(&t);
+    ok(!ptm, "got non-NULL.\n");
+    memset(&tm, 0xcc, sizeof(tm));
+    ret = p_gmtime64_s(&tm, &t);
+    ok(ret == EINVAL, "got %d.\n", ret);
+    ok(tm.tm_year == -1 && tm.tm_hour == -1 && tm.tm_min == -1 && tm.tm_sec == -1, "got %d, %d, %d, %d.\n",
+            tm.tm_year, tm.tm_hour, tm.tm_min, tm.tm_sec);
+}
+
 static void test_mktime(void)
 {
     TIME_ZONE_INFORMATION tzinfo;
@@ -963,6 +1039,7 @@ START_TEST(time)
     test_strftime();
     test_ctime();
     test_gmtime();
+    test_gmtime64();
     test_mktime();
     test_localtime();
     test_strdate();
diff --git a/dlls/msvcrt/time.c b/dlls/msvcrt/time.c
index 56b80e84105..7a110e53455 100644
--- a/dlls/msvcrt/time.c
+++ b/dlls/msvcrt/time.c
@@ -66,6 +66,17 @@ static const int MAX_SECONDS = 60;
 static const int MAX_SECONDS = 59;
 #endif
 
+#if _MSVCR_VER == 0
+#define MIN_GMTIME64_TIME 0
+#define MAX_GMTIME64_TIME _MAX__TIME64_T
+#elif _MSVCR_VER >= 140
+#define MIN_GMTIME64_TIME -43200
+#define MAX_GMTIME64_TIME (_MAX__TIME64_T + 1605600)
+#else
+#define MIN_GMTIME64_TIME -43200
+#define MAX_GMTIME64_TIME (_MAX__TIME64_T + 46800)
+#endif
+
 static inline BOOL IsLeapYear(int Year)
 {
     return Year % 4 == 0 && (Year % 100 != 0 || Year % 400 == 0);
@@ -457,7 +468,9 @@ int CDECL _gmtime64_s(struct tm *res, const __time64_t *secs)
     SYSTEMTIME st;
     ULONGLONG time;
 
-    if (!res || !secs || *secs < 0 || *secs > _MAX__TIME64_T) {
+    TRACE("res %p, secs %p (%I64d).\n", res, secs, secs ? *secs : 0);
+
+    if (!res || !secs || *secs < MIN_GMTIME64_TIME || *secs > MAX_GMTIME64_TIME) {
         if (res) {
             write_invalid_msvcrt_tm(res);
         }
diff --git a/dlls/ucrtbase/tests/misc.c b/dlls/ucrtbase/tests/misc.c
index 86cdec88108..ff1ed20f2f8 100644
--- a/dlls/ucrtbase/tests/misc.c
+++ b/dlls/ucrtbase/tests/misc.c
@@ -113,6 +113,8 @@ _se_translator_function __cdecl _set_se_translator(_se_translator_function func)
 void** __cdecl __current_exception(void);
 int* __cdecl __processing_throw(void);
 
+#define _MAX__TIME64_T     (((__time64_t)0x00000007 << 32) | 0x93406FFF)
+
 static void test__initialize_onexit_table(void)
 {
     _onexit_table_t table, table2;
@@ -1632,6 +1634,78 @@ static void test_rewind_i386_abi(void)
 }
 #endif
 
+static void test_gmtime64(void)
+{
+    struct tm *ptm, tm;
+    __time64_t t;
+    int ret;
+
+    t = -1;
+    memset(&tm, 0xcc, sizeof(tm));
+    ptm = _gmtime64(&t);
+    ok(!!ptm, "got NULL.\n");
+    ret = _gmtime64_s(&tm, &t);
+    ok(!ret, "got %d.\n", ret);
+    ok(tm.tm_year == 69 && tm.tm_hour == 23 && tm.tm_min == 59 && tm.tm_sec == 59, "got %d, %d, %d, %d.\n",
+            tm.tm_year, tm.tm_hour, tm.tm_min, tm.tm_sec);
+
+    t = -43200;
+    memset(&tm, 0xcc, sizeof(tm));
+    ptm = _gmtime64(&t);
+    ok(!!ptm, "got NULL.\n");
+    ret = _gmtime64_s(&tm, &t);
+    ok(!ret, "got %d.\n", ret);
+    ok(tm.tm_year == 69 && tm.tm_hour == 12 && tm.tm_min == 0 && tm.tm_sec == 0, "got %d, %d, %d, %d.\n",
+            tm.tm_year, tm.tm_hour, tm.tm_min, tm.tm_sec);
+    ptm = _gmtime32((__time32_t *)&t);
+    ok(!!ptm, "got NULL.\n");
+    memset(&tm, 0xcc, sizeof(tm));
+    ret = _gmtime32_s(&tm, (__time32_t *)&t);
+    ok(!ret, "got %d.\n", ret);
+    todo_wine_if(tm.tm_year == 69 && tm.tm_hour == 12)
+    ok(tm.tm_year == 70 && tm.tm_hour == -12 && tm.tm_min == 0 && tm.tm_sec == 0, "got %d, %d, %d, %d.\n",
+            tm.tm_year, tm.tm_hour, tm.tm_min, tm.tm_sec);
+
+    t = -43201;
+    ptm = _gmtime64(&t);
+    ok(!ptm, "got non-NULL.\n");
+    memset(&tm, 0xcc, sizeof(tm));
+    ret = _gmtime64_s(&tm, &t);
+    ok(ret == EINVAL, "got %d.\n", ret);
+    ok(tm.tm_year == -1 && tm.tm_hour == -1 && tm.tm_min == -1 && tm.tm_sec == -1, "got %d, %d, %d, %d.\n",
+            tm.tm_year, tm.tm_hour, tm.tm_min, tm.tm_sec);
+    ptm = _gmtime32((__time32_t *)&t);
+    ok(!ptm, "got NULL.\n");
+    memset(&tm, 0xcc, sizeof(tm));
+    ret = _gmtime32_s(&tm, (__time32_t *)&t);
+    ok(ret == EINVAL, "got %d.\n", ret);
+    ok(tm.tm_year == -1 && tm.tm_hour == -1 && tm.tm_min == -1 && tm.tm_sec == -1, "got %d, %d, %d, %d.\n",
+            tm.tm_year, tm.tm_hour, tm.tm_min, tm.tm_sec);
+
+    t = _MAX__TIME64_T + 1605600;
+    memset(&tm, 0xcc, sizeof(tm));
+    ptm = _gmtime64(&t);
+    ok(!!ptm || broken(!ptm) /* before Win10 1909 */, "got NULL.\n");
+    if (!ptm)
+    {
+        win_skip("Old gmtime64 limits, skipping tests.\n");
+        return;
+    }
+    ret = _gmtime64_s(&tm, &t);
+    ok(!ret, "got %d.\n", ret);
+    ok(tm.tm_year == 1101 && tm.tm_hour == 21 && tm.tm_min == 59 && tm.tm_sec == 59, "got %d, %d, %d, %d.\n",
+            tm.tm_year, tm.tm_hour, tm.tm_min, tm.tm_sec);
+
+    t = _MAX__TIME64_T + 1605601;
+    ptm = _gmtime64(&t);
+    ok(!ptm, "got non-NULL.\n");
+    memset(&tm, 0xcc, sizeof(tm));
+    ret = _gmtime64_s(&tm, &t);
+    ok(ret == EINVAL, "got %d.\n", ret);
+    ok(tm.tm_year == -1 && tm.tm_hour == -1 && tm.tm_min == -1 && tm.tm_sec == -1, "got %d, %d, %d, %d.\n",
+            tm.tm_year, tm.tm_hour, tm.tm_min, tm.tm_sec);
+}
+
 START_TEST(misc)
 {
     int arg_c;
diff --git a/include/msvcrt/time.h b/include/msvcrt/time.h
index e1d914fea0d..4d79d066184 100644
--- a/include/msvcrt/time.h
+++ b/include/msvcrt/time.h
@@ -80,7 +80,10 @@ _ACRTIMP errno_t     __cdecl _ctime64_s(char*,size_t,const __time64_t*);
 _ACRTIMP double      __cdecl _difftime32(__time32_t,__time32_t);
 _ACRTIMP double      __cdecl _difftime64(__time64_t,__time64_t);
 _ACRTIMP struct tm*  __cdecl _gmtime32(const __time32_t*);
+_ACRTIMP int         __cdecl _gmtime32_s(struct tm *res, const __time32_t *secs);
 _ACRTIMP struct tm*  __cdecl _gmtime64(const __time64_t*);
+_ACRTIMP int         __cdecl _gmtime64_s(struct tm *res, const __time64_t *secs);
+
 _ACRTIMP struct tm*  __cdecl _localtime32(const __time32_t*);
 _ACRTIMP errno_t     __cdecl _localtime32_s(struct tm*, const __time32_t*);
 _ACRTIMP struct tm*  __cdecl _localtime64(const __time64_t*);
-- 
GitLab

From 2f0c0f4c385441be366ef7b7c775222ef3a6c8b0 Mon Sep 17 00:00:00 2001
From: Alexandre Julliard <julliard@winehq.org>
Date: Thu, 2 Nov 2023 12:08:43 +0100
Subject: [PATCH] winedump: Re-import the demangling code from msvcrt.

---
 tools/winedump/dump.c     |   53 +-
 tools/winedump/main.c     |    2 +-
 tools/winedump/msmangle.c | 2145 +++++++++++++++++++++++++------------
 tools/winedump/winedump.h |    2 +-
 4 files changed, 1463 insertions(+), 739 deletions(-)

diff --git a/tools/winedump/dump.c b/tools/winedump/dump.c
index 42916ac4fa30..abfc2ab8c74b 100644
--- a/tools/winedump/dump.c
+++ b/tools/winedump/dump.c
@@ -130,58 +130,11 @@ void dump_unicode_str( const WCHAR *str, int len )
 
 const char* get_symbol_str(const char* symname)
 {
-    char*       tmp;
-    const char* ret;
+    const char* ret = NULL;
 
     if (!symname) return "(nil)";
-    if (globals.do_demangle)
-    {
-        parsed_symbol   symbol;
-
-        symbol_init(&symbol, symname);
-        if (!symbol_demangle(&symbol))
-            ret = symname;
-        else if (symbol.flags & SYM_DATA)
-        {
-            ret = tmp = dump_want_n(strlen(symbol.arg_text[0]) + 1);
-            if (tmp) strcpy(tmp, symbol.arg_text[0]);
-        }
-        else
-        {
-            unsigned int i, len, start = symbol.flags & SYM_THISCALL ? 1 : 0;
-
-            len = strlen(symbol.return_text) + 3 /* ' __' */ +
-                strlen(symbol_get_call_convention(&symbol)) + 1 /* ' ' */+
-                strlen(symbol.function_name) + 1 /* ')' */;
-            if (!symbol.argc || (symbol.argc == 1 && symbol.flags & SYM_THISCALL))
-                len += 4 /* "void" */;
-            else for (i = start; i < symbol.argc; i++)
-                len += (i > start ? 2 /* ", " */ : 0 /* "" */) + strlen(symbol.arg_text[i]);
-            if (symbol.varargs) len += 5 /* ", ..." */;
-            len += 2; /* ")\0" */
-
-            ret = tmp = dump_want_n(len);
-            if (tmp)
-            {
-                sprintf(tmp, "%s __%s %s(",
-                        symbol.return_text,
-                        symbol_get_call_convention(&symbol),
-                        symbol.function_name);
-                if (!symbol.argc || (symbol.argc == 1 && symbol.flags & SYM_THISCALL))
-                    strcat(tmp, "void");
-                else for (i = start; i < symbol.argc; i++)
-                {
-                    if (i > start) strcat(tmp, ", ");
-                    strcat(tmp, symbol.arg_text[i]);
-                }
-                if (symbol.varargs) strcat(tmp, ", ...");
-                strcat(tmp, ")");
-            }
-        }
-        symbol_clear(&symbol);
-    }
-    else ret = symname;
-    return ret;
+    if (globals.do_demangle) ret = demangle( symname );
+    return ret ? ret : symname;
 }
 
 const char* get_guid_str(const GUID* guid)
diff --git a/tools/winedump/main.c b/tools/winedump/main.c
index f0668ec0b4f8..969b70d7d031 100644
--- a/tools/winedump/main.c
+++ b/tools/winedump/main.c
@@ -453,7 +453,7 @@ int   main (int argc, char *argv[])
 	    if (globals.do_code && symbol_searched(count, symbol.symbol))
 	    {
 		/* Attempt to get information about the symbol */
-                BOOL result = symbol_demangle (&symbol) || symbol_search(&symbol);
+                BOOL result = symbol_search(&symbol);
 
                 if (result && symbol.function_name)
 		    /* Clean up the prototype */
diff --git a/tools/winedump/msmangle.c b/tools/winedump/msmangle.c
index 4408e4181910..19ccc18f7146 100644
--- a/tools/winedump/msmangle.c
+++ b/tools/winedump/msmangle.c
@@ -2,6 +2,7 @@
  *  Demangle VC++ symbols into C function prototypes
  *
  *  Copyright 2000 Jon Griffiths
+ *            2004 Eric Pouech
  *
  * This library is free software; you can redistribute it and/or
  * modify it under the terms of the GNU Lesser General Public
@@ -21,682 +22,708 @@
 #include "config.h"
 
 #include "winedump.h"
+#include "winver.h"
+#include "imagehlp.h"
+
+#define UNDNAME_NO_COMPLEX_TYPE (0x8000)
+
+struct array
+{
+    unsigned            start;          /* first valid reference in array */
+    unsigned            num;            /* total number of used elts */
+    unsigned            max;
+    unsigned            alloc;
+    char**              elts;
+};
+
+/* Structure holding a parsed symbol */
+struct parsed_symbol
+{
+    unsigned            flags;          /* the UNDNAME_ flags used for demangling */
+
+    const char*         current;        /* pointer in input (mangled) string */
+    char*               result;         /* demangled string */
+
+    struct array        names;          /* array of names for back reference */
+    struct array        stack;          /* stack of parsed strings */
+
+    void*               alloc_list;     /* linked list of allocated blocks */
+    unsigned            avail_in_first; /* number of available bytes in head block */
+};
+
+enum datatype_e
+{
+    DT_NO_LEADING_WS = 0x01,
+    DT_NO_LRSEP_WS = 0x02,
+};
 
 /* Type for parsing mangled types */
-typedef struct _compound_type
+struct datatype_t
 {
-  char  dest_type;
-  int   flags;
-  BOOL  have_qualifiers;
-  char *expression;
-} compound_type;
+    const char*         left;
+    const char*         right;
+    enum datatype_e     flags;
+};
 
+static BOOL symbol_demangle(struct parsed_symbol* sym);
+static char* get_class_name(struct parsed_symbol* sym);
 
-/* Initialise a compound type structure */
-#define INIT_CT(ct) do { memset (&ct, 0, sizeof (ct)); } while (0)
+#define und_alloc(sym,len) xmalloc(len)
 
-/* free the memory used by a compound structure */
-#define FREE_CT(ct) free (ct.expression)
+/******************************************************************
+ *		str_array_init
+ * Initialises an array of strings
+ */
+static void str_array_init(struct array* a)
+{
+    a->start = a->num = a->max = a->alloc = 0;
+    a->elts = NULL;
+}
 
-/* Flags for data types */
-#define DATA_VTABLE   0x1
+/******************************************************************
+ *		str_array_push
+ * Adding a new string to an array
+ */
+static BOOL str_array_push(struct parsed_symbol* sym, const char* ptr, int len,
+                           struct array* a)
+{
+    char**      new;
 
-/* Internal functions */
-static char *demangle_datatype (char **str, compound_type *ct,
-                                parsed_symbol* sym);
+    assert(ptr);
+    assert(a);
 
-static char *get_constraints_convention_1 (char **str, compound_type *ct);
+    if (!a->alloc)
+    {
+        new = und_alloc(sym, (a->alloc = 32) * sizeof(a->elts[0]));
+        if (!new) return FALSE;
+        a->elts = new;
+    }
+    else if (a->max >= a->alloc)
+    {
+        new = und_alloc(sym, (a->alloc * 2) * sizeof(a->elts[0]));
+        if (!new) return FALSE;
+        memcpy(new, a->elts, a->alloc * sizeof(a->elts[0]));
+        a->alloc *= 2;
+        a->elts = new;
+    }
+    if (len == -1) len = strlen(ptr);
+    a->elts[a->num] = und_alloc(sym, len + 1);
+    assert(a->elts[a->num]);
+    memcpy(a->elts[a->num], ptr, len);
+    a->elts[a->num][len] = '\0';
+    if (++a->num >= a->max) a->max = a->num;
+    return TRUE;
+}
 
-static char *get_constraints_convention_2 (char **str, compound_type *ct);
+/******************************************************************
+ *		str_array_get_ref
+ * Extracts a reference from an existing array (doing proper type
+ * checking)
+ */
+static char* str_array_get_ref(struct array* cref, unsigned idx)
+{
+    assert(cref);
+    if (cref->start + idx >= cref->max) return NULL;
+    return cref->elts[cref->start + idx];
+}
 
-static char *get_type_string (const char c, const int constraints);
+/******************************************************************
+ *		str_printf
+ * Helper for printf type of command (only %s and %c are implemented)
+ * while dynamically allocating the buffer
+ */
+static char* WINAPIV str_printf(struct parsed_symbol* sym, const char* format, ...)
+{
+    va_list      args;
+    unsigned int len = 1, i, sz;
+    char*        tmp;
+    char*        p;
+    char*        t;
+
+    va_start(args, format);
+    for (i = 0; format[i]; i++)
+    {
+        if (format[i] == '%')
+        {
+            switch (format[++i])
+            {
+            case 's': t = va_arg(args, char*); if (t) len += strlen(t); break;
+            case 'c': (void)va_arg(args, int); len++; break;
+            default: i--; /* fall through */
+            case '%': len++; break;
+            }
+        }
+        else len++;
+    }
+    va_end(args);
+    if (!(tmp = und_alloc(sym, len))) return NULL;
+    va_start(args, format);
+    for (p = tmp, i = 0; format[i]; i++)
+    {
+        if (format[i] == '%')
+        {
+            switch (format[++i])
+            {
+            case 's':
+                t = va_arg(args, char*);
+                if (t)
+                {
+                    sz = strlen(t);
+                    memcpy(p, t, sz);
+                    p += sz;
+                }
+                break;
+            case 'c':
+                *p++ = (char)va_arg(args, int);
+                break;
+            default: i--; /* fall through */
+            case '%': *p++ = '%'; break;
+            }
+        }
+        else *p++ = format[i];
+    }
+    va_end(args);
+    *p = '\0';
+    return tmp;
+}
 
-static int   get_type_constant (const char c, const int constraints);
+enum datatype_flags
+{
+    IN_ARGS = 0x01,
+    WS_AFTER_QUAL_IF = 0x02,
+};
 
-static char *get_pointer_type_string (compound_type *ct,
-                                      const char *expression);
+/* forward declaration */
+static BOOL demangle_datatype(struct parsed_symbol* sym, struct datatype_t* ct,
+                              struct array* pmt, enum datatype_flags flags);
 
+static const char* get_number(struct parsed_symbol* sym)
+{
+    char*       ptr;
+    BOOL        sgn = FALSE;
 
-/*******************************************************************
- *         demangle_symbol
- *
- * Demangle a C++ linker symbol into a C prototype
+    if (*sym->current == '?')
+    {
+        sgn = TRUE;
+        sym->current++;
+    }
+    if (*sym->current >= '0' && *sym->current <= '8')
+    {
+        ptr = und_alloc(sym, 3);
+        if (sgn) ptr[0] = '-';
+        ptr[sgn ? 1 : 0] = *sym->current + 1;
+        ptr[sgn ? 2 : 1] = '\0';
+        sym->current++;
+    }
+    else if (*sym->current == '9')
+    {
+        ptr = und_alloc(sym, 4);
+        if (sgn) ptr[0] = '-';
+        ptr[sgn ? 1 : 0] = '1';
+        ptr[sgn ? 2 : 1] = '0';
+        ptr[sgn ? 3 : 2] = '\0';
+        sym->current++;
+    }
+    else if (*sym->current >= 'A' && *sym->current <= 'P')
+    {
+        int ret = 0;
+
+        while (*sym->current >= 'A' && *sym->current <= 'P')
+        {
+            ret *= 16;
+            ret += *sym->current++ - 'A';
+        }
+        if (*sym->current != '@') return NULL;
+
+        ptr = und_alloc(sym, 17);
+        sprintf(ptr, "%s%u", sgn ? "-" : "", ret);
+        sym->current++;
+    }
+    else return NULL;
+    return ptr;
+}
+
+/******************************************************************
+ *		get_args
+ * Parses a list of function/method arguments, creates a string corresponding
+ * to the arguments' list.
  */
-BOOL symbol_demangle (parsed_symbol *sym)
+static char* get_args(struct parsed_symbol* sym, struct array* pmt_ref, BOOL z_term,
+                      char open_char, char close_char)
+
 {
-  compound_type ct;
-  BOOL is_static = FALSE;
-  int is_const = 0;
-  char *function_name = NULL;
-  char *class_name = NULL;
-  char *name;
-  const char *const_status;
-  static unsigned int hash = 0; /* In case of overloaded functions */
-  unsigned int data_flags = 0;
-
-  assert (globals.do_code);
-  assert (sym && sym->symbol);
-
-  hash++;
-
-  /* MS mangled names always begin with '?' */
-  name = sym->symbol;
-  if (*name++ != '?')
-    return FALSE;
-
-  if (VERBOSE)
-    puts ("Attempting to demangle symbol");
-
-  /* Then function name or operator code */
-  if (*name == '?')
-  {
-    /* C++ operator code (one character, or two if the first is '_') */
-    switch (*++name)
-    {
-    case '0': function_name = xstrdup ("ctor"); break;
-    case '1': function_name = xstrdup ("dtor"); break;
-    case '2': function_name = xstrdup ("operator_new"); break;
-    case '3': function_name = xstrdup ("operator_delete"); break;
-    case '4': function_name = xstrdup ("operator_equals"); break;
-    case '5': function_name = xstrdup ("operator_shiftright"); break;
-    case '6': function_name = xstrdup ("operator_shiftleft"); break;
-    case '7': function_name = xstrdup ("operator_not"); break;
-    case '8': function_name = xstrdup ("operator_equalsequals"); break;
-    case '9': function_name = xstrdup ("operator_notequals"); break;
-    case 'A': function_name = xstrdup ("operator_array"); break;
-    case 'C': function_name = xstrdup ("operator_dereference"); break;
-    case 'D': function_name = xstrdup ("operator_multiply"); break;
-    case 'E': function_name = xstrdup ("operator_plusplus"); break;
-    case 'F': function_name = xstrdup ("operator_minusminus"); break;
-    case 'G': function_name = xstrdup ("operator_minus"); break;
-    case 'H': function_name = xstrdup ("operator_plus"); break;
-    case 'I': function_name = xstrdup ("operator_address"); break;
-    case 'J': function_name = xstrdup ("operator_dereferencememberptr"); break;
-    case 'K': function_name = xstrdup ("operator_divide"); break;
-    case 'L': function_name = xstrdup ("operator_modulo"); break;
-    case 'M': function_name = xstrdup ("operator_lessthan"); break;
-    case 'N': function_name = xstrdup ("operator_lessthanequal"); break;
-    case 'O': function_name = xstrdup ("operator_greaterthan"); break;
-    case 'P': function_name = xstrdup ("operator_greaterthanequal"); break;
-    case 'Q': function_name = xstrdup ("operator_comma"); break;
-    case 'R': function_name = xstrdup ("operator_functioncall"); break;
-    case 'S': function_name = xstrdup ("operator_complement"); break;
-    case 'T': function_name = xstrdup ("operator_xor"); break;
-    case 'U': function_name = xstrdup ("operator_logicalor"); break;
-    case 'V': function_name = xstrdup ("operator_logicaland"); break;
-    case 'W': function_name = xstrdup ("operator_or"); break;
-    case 'X': function_name = xstrdup ("operator_multiplyequals"); break;
-    case 'Y': function_name = xstrdup ("operator_plusequals"); break;
-    case 'Z': function_name = xstrdup ("operator_minusequals"); break;
-    case '_':
-      switch (*++name)
-      {
-      case '0': function_name = xstrdup ("operator_divideequals"); break;
-      case '1': function_name = xstrdup ("operator_moduloequals"); break;
-      case '2': function_name = xstrdup ("operator_shiftrightequals"); break;
-      case '3': function_name = xstrdup ("operator_shiftleftequals"); break;
-      case '4': function_name = xstrdup ("operator_andequals"); break;
-      case '5': function_name = xstrdup ("operator_orequals"); break;
-      case '6': function_name = xstrdup ("operator_xorequals"); break;
-      case '7': function_name = xstrdup ("vftable"); data_flags = DATA_VTABLE; break;
-      case '8': function_name = xstrdup ("vbtable"); data_flags = DATA_VTABLE; break;
-      case '9': function_name = xstrdup ("vcall"); data_flags = DATA_VTABLE; break;
-      case 'A': function_name = xstrdup ("typeof"); data_flags = DATA_VTABLE; break;
-      case 'B': function_name = xstrdup ("local_static_guard"); data_flags = DATA_VTABLE; break;
-      case 'C': function_name = xstrdup ("string"); data_flags = DATA_VTABLE; break;
-      case 'D': function_name = xstrdup ("vbase_dtor"); data_flags = DATA_VTABLE; break;
-      case 'E': function_name = xstrdup ("vector_dtor"); break;
-      case 'G': function_name = xstrdup ("scalar_dtor"); break;
-      case 'H': function_name = xstrdup ("vector_ctor_iter"); break;
-      case 'I': function_name = xstrdup ("vector_dtor_iter"); break;
-      case 'J': function_name = xstrdup ("vector_vbase_ctor_iter"); break;
-      case 'L': function_name = xstrdup ("eh_vector_ctor_iter"); break;
-      case 'M': function_name = xstrdup ("eh_vector_dtor_iter"); break;
-      case 'N': function_name = xstrdup ("eh_vector_vbase_ctor_iter"); break;
-      case 'O': function_name = xstrdup ("copy_ctor_closure"); break;
-      case 'S': function_name = xstrdup ("local_vftable"); data_flags = DATA_VTABLE; break;
-      case 'T': function_name = xstrdup ("local_vftable_ctor_closure"); break;
-      case 'U': function_name = xstrdup ("operator_new_vector"); break;
-      case 'V': function_name = xstrdup ("operator_delete_vector"); break;
-      case 'X': function_name = xstrdup ("placement_new_closure"); break;
-      case 'Y': function_name = xstrdup ("placement_delete_closure"); break;
-      default:
-        return FALSE;
-      }
-      break;
-    default:
-      /* FIXME: Other operators */
-      return FALSE;
-    }
-    name++;
-  }
-  else
-  {
-    /* Type or function name terminated by '@' */
-    function_name = name;
-    while (*name && *name++ != '@') ;
-    if (!*name)
-      return FALSE;
-    function_name = str_substring (function_name, name - 1);
-  }
-
-  /* Either a class name, or '@' if the symbol is not a class member */
-  if (*name == '@')
-  {
-    class_name = xstrdup ("global"); /* Non member function (or a datatype) */
-    name++;
-  }
-  else
-  {
-    /* Class the function is associated with, terminated by '@@' */
-    class_name = name;
-    while (*name && *name++ != '@') ;
-    if (*name++ != '@') {
-      free (function_name);
-      return FALSE;
-    }
-    class_name = str_substring (class_name, name - 2); /* Allocates a new string */
-  }
-
-  /* Function/Data type and access level */
-  /* FIXME: why 2 possible letters for each option? */
-  switch(*name++)
-  {
-  /* Data */
-
-  case '0' : /* private static */
-  case '1' : /* protected static */
-  case '2' : /* public static */
-    is_static = TRUE;
-    /* Fall through */
-  case '3' : /* non static */
-  case '4' : /* non static */
-    /* Data members need to be implemented: report */
-    INIT_CT (ct);
-    if (!demangle_datatype (&name, &ct, sym))
-    {
-      if (VERBOSE)
-        printf ("/*FIXME: %s: unknown data*/\n", sym->symbol);
-      free (function_name);
-      free (class_name);
-      return FALSE;
-    }
-    sym->flags |= SYM_DATA;
-    sym->argc = 1;
-    sym->arg_name[0] = strmake( "%s_%s%s_%s", OUTPUT_UC_DLL_NAME, class_name,
-                                  is_static ? "static" : "", function_name );
-    sym->arg_text[0] = strmake( "%s %s", ct.expression, sym->arg_name[0] );
-    FREE_CT (ct);
-    free (function_name);
-    free (class_name);
-    return TRUE;
+    struct datatype_t   ct;
+    struct array        arg_collect;
+    char*               args_str = NULL;
+    char*               last;
+    unsigned int        i;
 
-  case '6' : /* compiler generated static */
-  case '7' : /* compiler generated static */
-    if (data_flags & DATA_VTABLE)
-    {
-      sym->flags |= SYM_DATA;
-      sym->argc = 1;
-      sym->arg_name[0] = strmake( "%s_%s_%s", OUTPUT_UC_DLL_NAME, class_name, function_name );
-      sym->arg_text[0] = strmake( "void *%s", sym->arg_name[0] );
-
-      if (VERBOSE)
-        puts ("Demangled symbol OK [vtable]");
-      free (function_name);
-      free (class_name);
-      return TRUE;
-    }
-    free (function_name);
-    free (class_name);
-    return FALSE;
-
-  /* Functions */
-
-  case 'E' : /* private virtual */
-  case 'F' : /* private virtual */
-  case 'M' : /* protected virtual */
-  case 'N' : /* protected virtual */
-  case 'U' : /* public virtual */
-  case 'V' : /* public virtual */
-    /* Virtual functions need to be added to the exported vtable: report */
-    if (VERBOSE)
-      printf ("/*FIXME %s: %s::%s is virtual-add to vftable*/\n", sym->symbol,
-              class_name, function_name);
-    /* Fall through */
-  case 'A' : /* private */
-  case 'B' : /* private */
-  case 'I' : /* protected */
-  case 'J' : /* protected */
-  case 'Q' : /* public */
-  case 'R' : /* public */
-    /* Implicit 'this' pointer */
-    sym->arg_text [sym->argc] = strmake( "struct %s *", class_name );
-    sym->arg_type [sym->argc] = ARG_POINTER;
-    sym->arg_flag [sym->argc] = 0;
-    sym->arg_name [sym->argc++] = xstrdup ("_this");
-    /* New struct definitions can be 'grep'ed out for making a fixup header */
-    if (VERBOSE)
-      printf ("struct %s { void **vtable; /*FIXME: class definition */ };\n", class_name);
-    break;
-  case 'C' : /* private: static */
-  case 'D' : /* private: static */
-  case 'K' : /* protected: static */
-  case 'L' : /* protected: static */
-  case 'S' : /* public: static */
-  case 'T' : /* public: static */
-    is_static = TRUE; /* No implicit this pointer */
-    break;
-  case 'Y' :
-  case 'Z' :
-    break;
-  /* FIXME: G,H / O,P / W,X are private / protected / public thunks */
-  default:
-    free (function_name);
-    free (class_name);
-    return FALSE;
-  }
-
-  /* If there is an implicit this pointer, const status follows */
-  if (sym->argc)
-  {
-   switch (*name++)
-   {
-   case 'A': break; /* non-const */
-   case 'B': is_const = CT_CONST; break;
-   case 'C': is_const = CT_VOLATILE; break;
-   case 'D': is_const = (CT_CONST | CT_VOLATILE); break;
-   default:
-    free (function_name);
-    free (class_name);
-     return FALSE;
-   }
-  }
-
-  /* Next is the calling convention */
-  switch (*name++)
-  {
-  case 'A': /* __cdecl */
-  case 'B': /* __cdecl __declspec(dllexport) */
-    if (!sym->argc)
-    {
-      sym->flags |= SYM_CDECL;
-      break;
-    }
-    /* Else fall through */
-  case 'C': /* __pascal */
-  case 'D': /* __pascal __declspec(dllexport) */
-  case 'E': /* __thiscall */
-  case 'F': /* __thiscall __declspec(dllexport) */
-  case 'G': /* __stdcall */
-  case 'H': /* __stdcall __declspec(dllexport) */
-  case 'I': /* __fastcall */
-  case 'J': /* __fastcall __declspec(dllexport)*/
-  case 'K': /* default (none given) */
-    if (sym->argc)
-      sym->flags |= SYM_THISCALL;
-    else
-      sym->flags |= SYM_STDCALL;
-    break;
-  default:
-    free (function_name);
-    free (class_name);
-    return FALSE;
-  }
-
-  /* Return type, or @ if 'void' */
-  if (*name == '@')
-  {
-    sym->return_text = xstrdup ("void");
-    sym->return_type = ARG_VOID;
-    name++;
-  }
-  else
-  {
-    INIT_CT (ct);
-    if (!demangle_datatype (&name, &ct, sym)) {
-      free (function_name);
-      free (class_name);
-      return FALSE;
-    }
-    sym->return_text = ct.expression;
-    sym->return_type = get_type_constant(ct.dest_type, ct.flags);
-    ct.expression = NULL;
-    FREE_CT (ct);
-  }
-
-  /* Now come the function arguments */
-  while (*name && *name != 'Z')
-  {
-    /* Decode each data type and append it to the argument list */
-    if (*name != '@')
-    {
-      INIT_CT (ct);
-      if (!demangle_datatype(&name, &ct, sym)) {
-        free (function_name);
-        free (class_name);
-        return FALSE;
-      }
-
-      if (strcmp (ct.expression, "void"))
-      {
-        sym->arg_text [sym->argc] = ct.expression;
-        ct.expression = NULL;
-        sym->arg_type [sym->argc] = get_type_constant (ct.dest_type, ct.flags);
-        sym->arg_flag [sym->argc] = ct.flags;
-        sym->arg_name[sym->argc] = strmake( "arg%u", sym->argc );
-        sym->argc++;
-      }
-      else
-        break; /* 'void' terminates an argument list */
-      FREE_CT (ct);
+    str_array_init(&arg_collect);
+
+    /* Now come the function arguments */
+    while (*sym->current)
+    {
+        /* Decode each data type and append it to the argument list */
+        if (*sym->current == '@')
+        {
+            sym->current++;
+            break;
+        }
+        if (!demangle_datatype(sym, &ct, pmt_ref, IN_ARGS))
+            return NULL;
+        /* 'void' terminates an argument list in a function */
+        if (z_term && !strcmp(ct.left, "void")) break;
+        if (!str_array_push(sym, str_printf(sym, "%s%s", ct.left, ct.right), -1,
+                            &arg_collect))
+            return NULL;
+        if (!strcmp(ct.left, "...")) break;
+    }
+    /* Functions are always terminated by 'Z'. If we made it this far and
+     * don't find it, we have incorrectly identified a data type.
+     */
+    if (z_term && *sym->current++ != 'Z') return NULL;
+
+    if (arg_collect.num == 0 ||
+        (arg_collect.num == 1 && !strcmp(arg_collect.elts[0], "void")))
+        return str_printf(sym, "%cvoid%c", open_char, close_char);
+    for (i = 1; i < arg_collect.num; i++)
+    {
+        args_str = str_printf(sym, "%s,%s", args_str, arg_collect.elts[i]);
     }
+
+    last = args_str ? args_str : arg_collect.elts[0];
+    if (close_char == '>' && last[strlen(last) - 1] == '>')
+        args_str = str_printf(sym, "%c%s%s %c",
+                              open_char, arg_collect.elts[0], args_str, close_char);
     else
-      name++;
-  }
-
-  while (*name == '@')
-    name++;
-
-  /* Functions are always terminated by 'Z'. If we made it this far and
-   * Don't find it, we have incorrectly identified a data type.
-   */
-  if (*name != 'Z') {
-    free (function_name);
-    free (class_name);
-    return FALSE;
-  }
-
-  /* Note: '()' after 'Z' means 'throws', but we don't care here */
-
-  /* Create the function name. Include a unique number because otherwise
-   * overloaded functions could have the same c signature.
-   */
-  switch (is_const)
-  {
-  case (CT_CONST | CT_VOLATILE): const_status = "_const_volatile"; break;
-  case CT_CONST: const_status = "_const"; break;
-  case CT_VOLATILE: const_status = "_volatile"; break;
-  default: const_status = "_"; break;
-  }
-  sym->function_name = strmake( "%s_%s%s%u", class_name, function_name,
-                                is_static ? "_static" : const_status, hash );
-
-  assert (sym->return_text);
-  assert (sym->flags);
-  assert (sym->function_name);
-
-  free (class_name);
-  free (function_name);
-
-  if (VERBOSE)
-    puts ("Demangled symbol OK");
-
-  return TRUE;
+        args_str = str_printf(sym, "%c%s%s%c",
+                              open_char, arg_collect.elts[0], args_str, close_char);
+
+    return args_str;
 }
 
+static void append_extended_qualifier(struct parsed_symbol *sym, const char **where,
+                                      const char *str, BOOL is_ms_keyword)
+{
+    if (!is_ms_keyword || !(sym->flags & UNDNAME_NO_MS_KEYWORDS))
+    {
+        if (is_ms_keyword && (sym->flags & UNDNAME_NO_LEADING_UNDERSCORES))
+            str += 2;
+        *where = *where ? str_printf(sym, "%s%s%s%s", *where, is_ms_keyword ? " " : "", str, is_ms_keyword ? "" : " ") :
+            str_printf(sym, "%s%s", str, is_ms_keyword ? "" : " ");
+    }
+}
 
-/*******************************************************************
- *         demangle_datatype
- *
- * Attempt to demangle a C++ data type, which may be compound.
- * a compound type is made up of a number of simple types. e.g:
- * char** = (pointer to (pointer to (char)))
- *
- * Uses a simple recursive descent algorithm that is broken
- * and/or incomplete, without a doubt ;-)
- */
-static char *demangle_datatype (char **str, compound_type *ct,
-                                parsed_symbol* sym)
+static void get_extended_qualifier(struct parsed_symbol *sym, struct datatype_t *xdt)
 {
-  char *iter;
+    unsigned fl = 0;
+    xdt->left = xdt->right = NULL;
+    xdt->flags = 0;
+    for (;;)
+    {
+        switch (*sym->current)
+        {
+        case 'E': append_extended_qualifier(sym, &xdt->right, "__ptr64", TRUE);     fl |= 2; break;
+        case 'F': append_extended_qualifier(sym, &xdt->left,  "__unaligned", TRUE); fl |= 2; break;
+#ifdef _UCRT
+        case 'G': append_extended_qualifier(sym, &xdt->right, "&", FALSE);          fl |= 1; break;
+        case 'H': append_extended_qualifier(sym, &xdt->right, "&&", FALSE);         fl |= 1; break;
+#endif
+        case 'I': append_extended_qualifier(sym, &xdt->right, "__restrict", TRUE);  fl |= 2; break;
+        default: if (fl == 1 || (fl == 3 && (sym->flags & UNDNAME_NO_MS_KEYWORDS))) xdt->flags = DT_NO_LRSEP_WS; return;
+        }
+        sym->current++;
+    }
+}
 
-  assert (str && *str);
-  assert (ct);
+/******************************************************************
+ *		get_qualifier
+ * Parses the type qualifier. Always returns static strings.
+ */
+static BOOL get_qualifier(struct parsed_symbol *sym, struct datatype_t *xdt, const char** pclass)
+{
+    char ch;
+    const char* qualif;
 
-  iter = *str;
+    get_extended_qualifier(sym, xdt);
+    switch (ch = *sym->current++)
+    {
+    case 'A': qualif = NULL; break;
+    case 'B': qualif = "const"; break;
+    case 'C': qualif = "volatile"; break;
+    case 'D': qualif = "const volatile"; break;
+    case 'Q': qualif = NULL; break;
+    case 'R': qualif = "const"; break;
+    case 'S': qualif = "volatile"; break;
+    case 'T': qualif = "const volatile"; break;
+    default: return FALSE;
+    }
+    if (qualif)
+    {
+        xdt->flags &= ~DT_NO_LRSEP_WS;
+        xdt->left = xdt->left ? str_printf(sym, "%s %s", qualif, xdt->left) : qualif;
+    }
+    if (ch >= 'Q' && ch <= 'T') /* pointer to member, fetch class */
+    {
+        const char* class = get_class_name(sym);
+        if (!class) return FALSE;
+        if (!pclass) return FALSE;
+        *pclass = class;
+    }
+    else if (pclass) *pclass = NULL;
+    return TRUE;
+}
 
-  if (!get_constraints_convention_1 (&iter, ct))
-    return NULL;
+static BOOL get_function_qualifier(struct parsed_symbol *sym, const char** qualif)
+{
+    struct datatype_t   xdt;
 
-  if (*iter == '_')
-  {
-    /* MS type: __int8,__int16 etc */
-    ct->flags |= CT_EXTENDED;
-    iter++;
-  }
+    if (!get_qualifier(sym, &xdt, NULL)) return FALSE;
+    *qualif = (xdt.left || xdt.right) ?
+        str_printf(sym, "%s%s%s", xdt.left, (xdt.flags & DT_NO_LRSEP_WS) ? "" : " ", xdt.right) : NULL;
+    return TRUE;
+}
 
-  switch (*iter)
-  {
-    case 'C': case 'D': case 'E': case 'F': case 'G':
-    case 'H': case 'I': case 'J': case 'K': case 'M':
-    case 'N': case 'O': case 'X': case 'Z':
-      /* Simple data types */
-      ct->dest_type = *iter++;
-      if (!get_constraints_convention_2 (&iter, ct))
-        return NULL;
-      ct->expression = get_type_string (ct->dest_type, ct->flags);
-      break;
-    case 'U':
-    case 'V':
-      /* Class/struct/union */
-      ct->dest_type = *iter++;
-      if (*iter == '0' || *iter == '1')
-      {
-        /* Referring to class type (implicit 'this') */
-        char *stripped;
-        if (!sym->argc)
-          return NULL;
-
-        iter++;
-        /* Apply our constraints to the base type (struct xxx *) */
-        stripped = xstrdup (sym->arg_text [0]);
-
-        /* If we're a reference, re-use the pointer already in the type */
-        if (!(ct->flags & CT_BY_REFERENCE))
-          stripped[ strlen (stripped) - 2] = '\0'; /* otherwise, strip it */
-
-        ct->expression = strmake( "%s%s", ct->flags & CT_CONST ? "const " :
-                                  ct->flags & CT_VOLATILE ? "volatile " : "", stripped);
-        free (stripped);
-      }
-      else if (*iter != '@')
-      {
-        /* The name of the class/struct, followed by '@@' */
-        char *struct_name = iter;
-        while (*iter && *iter++ != '@') ;
-        if (*iter++ != '@')
-          return NULL;
-        struct_name = str_substring (struct_name, iter - 2);
-        ct->expression = strmake( "%sstruct %s%s", ct->flags & CT_CONST ? "const " :
-                         ct->flags & CT_VOLATILE ? "volatile " : "",
-                         struct_name, ct->flags & CT_BY_REFERENCE ? " *" : "");
-        free (struct_name);
-      }
-      break;
-    case 'Q': /* FIXME: Array Just treated as pointer currently  */
-    case 'P': /* Pointer */
-      {
-        compound_type sub_ct;
-        INIT_CT (sub_ct);
+static BOOL get_qualified_type(struct datatype_t *ct, struct parsed_symbol* sym,
+                              struct array *pmt_ref, char qualif, enum datatype_flags flags)
+{
+    struct datatype_t xdt1;
+    struct datatype_t xdt2;
+    const char* ref;
+    const char* str_qualif;
+    const char* class;
 
-        ct->dest_type = *iter++;
-        if (!get_constraints_convention_2 (&iter, ct))
-          return NULL;
+    get_extended_qualifier(sym, &xdt1);
 
-        /* FIXME: P6 = Function pointer, others who knows.. */
-        if (isdigit (*iter))
-	{
-	  if (*iter == '6')
-	  {
-	      int sub_expressions = 0;
-	      /* FIXME: this is still broken in some cases and it has to be
-	       * merged with the function prototype parsing above...
-	       */
-	      iter += iter[1] == 'A' ? 2 : 3; /* FIXME */
-	      if (!demangle_datatype (&iter, &sub_ct, sym))
-		  return NULL;
-	      ct->expression = strmake( "%s (*)(", sub_ct.expression );
-	      if (*iter != '@')
-	      {
-		  while (*iter != 'Z')
-		  {
-		      FREE_CT (sub_ct);
-		      INIT_CT (sub_ct);
-		      if (!demangle_datatype (&iter, &sub_ct, sym))
-			  return NULL;
-		      if (sub_expressions)
-                          ct->expression = strmake( "%s, %s", ct->expression, sub_ct.expression );
-		      else
-                          ct->expression = strmake( "%s%s", ct->expression, sub_ct.expression );
-		      while (*iter == '@') iter++;
-		      sub_expressions++;
-		  }
-	      } else while (*iter == '@') iter++;
-	      iter++;
-	      ct->expression = strmake( "%s)", ct->expression );
-	  }
-	  else
-	      return NULL;
-	}
-	else
-	{
-	    /* Recurse to get the pointed-to type */
-	    if (!demangle_datatype (&iter, &sub_ct, sym))
-		return NULL;
+    switch (qualif)
+    {
+    case 'A': ref = " &";  str_qualif = NULL;              break;
+    case 'B': ref = " &";  str_qualif = " volatile";       break;
+    case 'P': ref = " *";  str_qualif = NULL;              break;
+    case 'Q': ref = " *";  str_qualif = " const";          break;
+    case 'R': ref = " *";  str_qualif = " volatile";       break;
+    case 'S': ref = " *";  str_qualif = " const volatile"; break;
+    case '?': ref = NULL;  str_qualif = NULL;              break;
+    case '$': ref = " &&"; str_qualif = NULL;              break;
+    default: return FALSE;
+    }
+    ct->right = NULL;
+    ct->flags = 0;
 
-	    ct->expression = get_pointer_type_string (ct, sub_ct.expression);
-	}
+    if (get_qualifier(sym, &xdt2, &class))
+    {
+        unsigned            mark = sym->stack.num;
+        struct datatype_t   sub_ct;
+
+        if (ref || str_qualif || xdt1.left || xdt1.right)
+        {
+            if (class)
+                ct->left = str_printf(sym, "%s%s%s%s::%s%s%s",
+                                      xdt1.left ? " " : NULL, xdt1.left,
+                                      class ? " " : NULL, class, ref ? ref + 1 : NULL,
+                                      xdt1.right ? " " : NULL, xdt1.right, str_qualif);
+            else
+                ct->left = str_printf(sym, "%s%s%s%s%s%s",
+                                      xdt1.left ? " " : NULL, xdt1.left, ref,
+                                      xdt1.right ? " " : NULL, xdt1.right, str_qualif);
+        }
+        else
+            ct->left = NULL;
+        /* multidimensional arrays */
+        if (*sym->current == 'Y')
+        {
+            const char* n1;
+            int num;
+
+            sym->current++;
+            if (!(n1 = get_number(sym))) return FALSE;
+            num = atoi(n1);
+
+            ct->left = str_printf(sym, " (%s%s", xdt2.left, ct->left && !xdt2.left ? ct->left + 1 : ct->left);
+            ct->right = ")";
+            xdt2.left = NULL;
+
+            while (num--)
+                ct->right = str_printf(sym, "%s[%s]", ct->right, get_number(sym));
+        }
+
+        /* Recurse to get the referred-to type */
+        if (!demangle_datatype(sym, &sub_ct, pmt_ref, 0))
+            return FALSE;
+        if (sub_ct.flags & DT_NO_LEADING_WS)
+            ct->left++;
+        ct->left = str_printf(sym, "%s%s%s%s%s", sub_ct.left, xdt2.left ? " " : NULL,
+                              xdt2.left, ct->left,
+                              ((xdt2.left || str_qualif) && (flags & WS_AFTER_QUAL_IF)) ? " " : NULL);
+        if (sub_ct.right) ct->right = str_printf(sym, "%s%s", ct->right, sub_ct.right);
+        sym->stack.num = mark;
+    }
+    else if (ref || str_qualif || xdt1.left || xdt1.right)
+        ct->left = str_printf(sym, "%s%s%s%s%s%s",
+                              xdt1.left ? " " : NULL, xdt1.left, ref,
+                              xdt1.right ? " " : NULL, xdt1.right, str_qualif);
+    else
+        ct->left = NULL;
+    return TRUE;
+}
 
-        FREE_CT (sub_ct);
-      }
-      break;
-    case '0': case '1': case '2': case '3': case '4':
-    case '5': case '6': case '7': case '8': case '9':
-      /* Referring back to previously parsed type */
-      if (sym->argc >= (size_t)(*iter - '0'))
+/******************************************************************
+ *             get_literal_string
+ * Gets the literal name from the current position in the mangled
+ * symbol to the first '@' character. It pushes the parsed name to
+ * the symbol names stack and returns a pointer to it or NULL in
+ * case of an error.
+ */
+static char* get_literal_string(struct parsed_symbol* sym)
+{
+    const char *ptr = sym->current;
+
+    do {
+        if (!((*sym->current >= 'A' && *sym->current <= 'Z') ||
+              (*sym->current >= 'a' && *sym->current <= 'z') ||
+              (*sym->current >= '0' && *sym->current <= '9') ||
+              *sym->current == '_' || *sym->current == '$')) {
+            return NULL;
+        }
+    } while (*++sym->current != '@');
+    sym->current++;
+    if (!str_array_push(sym, ptr, sym->current - 1 - ptr, &sym->names))
         return NULL;
-      ct->dest_type = sym->arg_type [*iter - '0'];
-      ct->expression = xstrdup (sym->arg_text [*iter - '0']);
-      iter++;
-      break;
-    default :
-      return NULL;
-  }
-  if (!ct->expression)
-    return NULL;
 
-  return *str = iter;
+    return str_array_get_ref(&sym->names, sym->names.num - sym->names.start - 1);
 }
 
-
-/* Constraints:
- * There are two conventions for specifying data type constants. I
- * don't know how the compiler chooses between them, but I suspect it
- * is based on ensuring that linker names are unique.
- * Convention 1. The data type modifier is given first, followed
- *   by the data type it operates on. '?' means passed by value,
- *   'A' means passed by reference. Note neither of these characters
- *   is a valid base data type. This is then followed by a character
- *   specifying constness or volatility.
- * Convention 2. The base data type (which is never '?' or 'A') is
- *   given first. The character modifier is optionally given after
- *   the base type character. If a valid character modifier is present,
- *   then it only applies to the current data type if the character
- *   after that is not 'A' 'B' or 'C' (Because this makes a convention 1
- *   constraint for the next data type).
- *
- * The conventions are usually mixed within the same symbol.
- * Since 'C' is both a qualifier and a data type, I suspect that
- * convention 1 allows specifying e.g. 'volatile signed char*'. In
- * convention 2 this would be 'CC' which is ambiguous (i.e. Is it two
- * pointers, or a single pointer + modifier?). In convention 1 it
- * is encoded as '?CC' which is not ambiguous. This probably
- * holds true for some other types as well.
+/******************************************************************
+ *		get_template_name
+ * Parses a name with a template argument list and returns it as
+ * a string.
+ * In a template argument list the back reference to the names
+ * table is separately created. '0' points to the class component
+ * name with the template arguments.  We use the same stack array
+ * to hold the names but save/restore the stack state before/after
+ * parsing the template argument list.
  */
+static char* get_template_name(struct parsed_symbol* sym)
+{
+    char *name, *args;
+    unsigned num_mark = sym->names.num;
+    unsigned start_mark = sym->names.start;
+    unsigned stack_mark = sym->stack.num;
+    struct array array_pmt;
+
+    sym->names.start = sym->names.num;
+    if (!(name = get_literal_string(sym))) {
+        sym->names.start = start_mark;
+        return FALSE;
+    }
+    str_array_init(&array_pmt);
+    args = get_args(sym, &array_pmt, FALSE, '<', '>');
+    if (args != NULL)
+        name = str_printf(sym, "%s%s", name, args);
+    sym->names.num = num_mark;
+    sym->names.start = start_mark;
+    sym->stack.num = stack_mark;
+    return name;
+}
 
-/*******************************************************************
- *         get_constraints_convention_1
- *
- * Get type constraint information for a data type
+/******************************************************************
+ *		get_class
+ * Parses class as a list of parent-classes, terminated by '@' and stores the
+ * result in 'a' array. Each parent-classes, as well as the inner element
+ * (either field/method name or class name), are represented in the mangled
+ * name by a literal name ([a-zA-Z0-9_]+ terminated by '@') or a back reference
+ * ([0-9]) or a name with template arguments ('?$' literal name followed by the
+ * template argument list). The class name components appear in the reverse
+ * order in the mangled name, e.g aaa@bbb@ccc@@ will be demangled to
+ * ccc::bbb::aaa
+ * For each of these class name components a string will be allocated in the
+ * array.
  */
-static char *get_constraints_convention_1 (char **str, compound_type *ct)
+static BOOL get_class(struct parsed_symbol* sym)
 {
-  char *iter = *str, **retval = str;
+    const char* name = NULL;
 
-  if (ct->have_qualifiers)
-    return *str; /* Previously got constraints for this type */
+    while (*sym->current != '@')
+    {
+        switch (*sym->current)
+        {
+        case '\0': return FALSE;
+
+        case '0': case '1': case '2': case '3':
+        case '4': case '5': case '6': case '7':
+        case '8': case '9':
+            name = str_array_get_ref(&sym->names, *sym->current++ - '0');
+            break;
+        case '?':
+            switch (*++sym->current)
+            {
+            case '$':
+                sym->current++;
+                if ((name = get_template_name(sym)) &&
+                    !str_array_push(sym, name, -1, &sym->names))
+                    return FALSE;
+                break;
+            case '?':
+                {
+                    struct array stack = sym->stack;
+                    unsigned int start = sym->names.start;
+                    unsigned int num = sym->names.num;
+
+                    str_array_init( &sym->stack );
+                    if (symbol_demangle( sym )) name = str_printf( sym, "`%s'", sym->result );
+                    sym->names.start = start;
+                    sym->names.num = num;
+                    sym->stack = stack;
+                }
+                break;
+            default:
+                if (!(name = get_number( sym ))) return FALSE;
+                name = str_printf( sym, "`%s'", name );
+                break;
+            }
+            break;
+        default:
+            name = get_literal_string(sym);
+            break;
+        }
+        if (!name || !str_array_push(sym, name, -1, &sym->stack))
+            return FALSE;
+    }
+    sym->current++;
+    return TRUE;
+}
 
-  if (*iter == '?' || *iter == 'A')
-  {
-    ct->have_qualifiers = TRUE;
-    ct->flags |= (*iter++ == '?' ? 0 : CT_BY_REFERENCE);
+/******************************************************************
+ *		get_class_string
+ * From an array collected by get_class in sym->stack, constructs the
+ * corresponding (allocated) string
+ */
+static char* get_class_string(struct parsed_symbol* sym, int start)
+{
+    int          i;
+    unsigned int len, sz;
+    char*        ret;
+    struct array *a = &sym->stack;
 
-    switch (*iter++)
+    for (len = 0, i = start; i < a->num; i++)
+    {
+        assert(a->elts[i]);
+        len += 2 + strlen(a->elts[i]);
+    }
+    if (!(ret = und_alloc(sym, len - 1))) return NULL;
+    for (len = 0, i = a->num - 1; i >= start; i--)
     {
-    case 'A' :
-      break; /* non-const, non-volatile */
-    case 'B' :
-      ct->flags |= CT_CONST;
-      break;
-    case 'C' :
-      ct->flags |= CT_VOLATILE;
-      break;
-    default  :
-      return NULL;
+        sz = strlen(a->elts[i]);
+        memcpy(ret + len, a->elts[i], sz);
+        len += sz;
+        if (i > start)
+        {
+            ret[len++] = ':';
+            ret[len++] = ':';
+        }
     }
-  }
+    ret[len] = '\0';
+    return ret;
+}
+
+/******************************************************************
+ *            get_class_name
+ * Wrapper around get_class and get_class_string.
+ */
+static char* get_class_name(struct parsed_symbol* sym)
+{
+    unsigned    mark = sym->stack.num;
+    char*       s = NULL;
 
-  return *retval = iter;
+    if (get_class(sym))
+        s = get_class_string(sym, mark);
+    sym->stack.num = mark;
+    return s;
 }
 
+/******************************************************************
+ *		get_calling_convention
+ * Returns a static string corresponding to the calling convention described
+ * by char 'ch'. Sets export to TRUE iff the calling convention is exported.
+ */
+static BOOL get_calling_convention(char ch, const char** call_conv,
+                                   const char** exported, unsigned flags)
+{
+    *call_conv = *exported = NULL;
+
+    if (!(flags & (UNDNAME_NO_MS_KEYWORDS | UNDNAME_NO_ALLOCATION_LANGUAGE)))
+    {
+        if (flags & UNDNAME_NO_LEADING_UNDERSCORES)
+        {
+            if (((ch - 'A') % 2) == 1) *exported = "dll_export ";
+            switch (ch)
+            {
+            case 'A': case 'B': *call_conv = "cdecl"; break;
+            case 'C': case 'D': *call_conv = "pascal"; break;
+            case 'E': case 'F': *call_conv = "thiscall"; break;
+            case 'G': case 'H': *call_conv = "stdcall"; break;
+            case 'I': case 'J': *call_conv = "fastcall"; break;
+            case 'K': case 'L': break;
+            case 'M': *call_conv = "clrcall"; break;
+            default: return FALSE;
+            }
+        }
+        else
+        {
+            if (((ch - 'A') % 2) == 1) *exported = "__dll_export ";
+            switch (ch)
+            {
+            case 'A': case 'B': *call_conv = "__cdecl"; break;
+            case 'C': case 'D': *call_conv = "__pascal"; break;
+            case 'E': case 'F': *call_conv = "__thiscall"; break;
+            case 'G': case 'H': *call_conv = "__stdcall"; break;
+            case 'I': case 'J': *call_conv = "__fastcall"; break;
+            case 'K': case 'L': break;
+            case 'M': *call_conv = "__clrcall"; break;
+            default: return FALSE;
+            }
+        }
+    }
+    return TRUE;
+}
 
 /*******************************************************************
- *         get_constraints_convention_2
- *
- * Get type constraint information for a data type
+ *         get_simple_type
+ * Return a string containing an allocated string for a simple data type
  */
-static char *get_constraints_convention_2 (char **str, compound_type *ct)
+static const char* get_simple_type(char c)
 {
-  char *iter = *str, **retval = str;
-
-  /* FIXME: Why do arrays have both convention 1 & 2 constraints? */
-  if (ct->have_qualifiers && ct->dest_type != 'Q')
-    return *str; /* Previously got constraints for this type */
-
-  ct->have_qualifiers = TRUE; /* Even if none, we've got all we're getting */
-
-  switch (*iter)
-  {
-  case 'A' :
-    if (iter[1] != 'A' && iter[1] != 'B' && iter[1] != 'C')
-      iter++;
-    break;
-  case 'B' :
-    ct->flags |= CT_CONST;
-    iter++;
-    break;
-  case 'C' :
-    /* See note above, if we find 'C' it is _not_ a signed char */
-    ct->flags |= CT_VOLATILE;
-    iter++;
-    break;
-  }
-
-  return *retval = iter;
-}
+    const char* type_string;
 
+    switch (c)
+    {
+    case 'C': type_string = "signed char"; break;
+    case 'D': type_string = "char"; break;
+    case 'E': type_string = "unsigned char"; break;
+    case 'F': type_string = "short"; break;
+    case 'G': type_string = "unsigned short"; break;
+    case 'H': type_string = "int"; break;
+    case 'I': type_string = "unsigned int"; break;
+    case 'J': type_string = "long"; break;
+    case 'K': type_string = "unsigned long"; break;
+    case 'M': type_string = "float"; break;
+    case 'N': type_string = "double"; break;
+    case 'O': type_string = "long double"; break;
+    case 'X': type_string = "void"; break;
+    case 'Z': type_string = "..."; break;
+    default:  type_string = NULL; break;
+    }
+    return type_string;
+}
 
 /*******************************************************************
- *         get_type_string
- *
- * Return a string containing the name of a data type
+ *         get_extended_type
+ * Return a string containing an allocated string for a simple data type
  */
-static char *get_type_string (const char c, const int constraints)
+static const char* get_extended_type(char c)
 {
-  const char *type_string;
+    const char* type_string;
 
-  if (constraints & CT_EXTENDED)
-  {
     switch (c)
     {
     case 'D': type_string = "__int8"; break;
@@ -709,88 +736,832 @@ static char *get_type_string (const char c, const int constraints)
     case 'K': type_string = "unsigned __int64"; break;
     case 'L': type_string = "__int128"; break;
     case 'M': type_string = "unsigned __int128"; break;
-    case 'N': type_string = "int"; break; /* bool */
-    case 'W': type_string = "WCHAR"; break; /* wchar_t */
-    default:
-      return NULL;
-   }
-  }
-  else
-  {
-    switch (c)
-    {
-    case 'C': /* Signed char, fall through */
-    case 'D': type_string = "char"; break;
-    case 'E': type_string = "unsigned char"; break;
-    case 'F': type_string = "short int"; break;
-    case 'G': type_string = "unsigned short int"; break;
-    case 'H': type_string = "int"; break;
-    case 'I': type_string = "unsigned int"; break;
-    case 'J': type_string = "long"; break;
-    case 'K': type_string = "unsigned long"; break;
-    case 'M': type_string = "float"; break;
-    case 'N': type_string = "double"; break;
-    case 'O': type_string = "long double"; break;
-    /* FIXME: T = union */
-    case 'U':
-    case 'V': type_string = "struct"; break;
-    case 'X': return xstrdup ("void");
-    case 'Z': return xstrdup ("...");
-    default:
-      return NULL;
-   }
-  }
-
-  return strmake( "%s%s%s", constraints & CT_CONST ? "const " :
-                  constraints & CT_VOLATILE ? "volatile " : "", type_string,
-                  constraints & CT_BY_REFERENCE ? " *" : "" );
+    case 'N': type_string = "bool"; break;
+    case 'Q': type_string = "char8_t"; break;
+    case 'S': type_string = "char16_t"; break;
+    case 'U': type_string = "char32_t"; break;
+    case 'W': type_string = "wchar_t"; break;
+    default:  type_string = NULL; break;
+    }
+    return type_string;
 }
 
+struct function_signature
+{
+    const char*             call_conv;
+    const char*             exported;
+    struct datatype_t       return_ct;
+    const char*             arguments;
+};
+
+static BOOL get_function_signature(struct parsed_symbol* sym, struct array* pmt_ref,
+                                   struct function_signature* fs)
+{
+    unsigned mark = sym->stack.num;
+
+    if (!get_calling_convention(*sym->current++,
+                                &fs->call_conv, &fs->exported,
+                                sym->flags & ~UNDNAME_NO_ALLOCATION_LANGUAGE) ||
+        !demangle_datatype(sym, &fs->return_ct, pmt_ref, FALSE))
+        return FALSE;
+
+    if (!(fs->arguments = get_args(sym, pmt_ref, TRUE, '(', ')')))
+        return FALSE;
+    sym->stack.num = mark;
+
+    return TRUE;
+}
 
 /*******************************************************************
- *         get_type_constant
+ *         demangle_datatype
  *
- * Get the ARG_* constant for this data type
+ * Attempt to demangle a C++ data type, which may be datatype.
+ * a datatype type is made up of a number of simple types. e.g:
+ * char** = (pointer to (pointer to (char)))
  */
-static int get_type_constant (const char c, const int constraints)
+static BOOL demangle_datatype(struct parsed_symbol* sym, struct datatype_t* ct,
+                              struct array* pmt_ref, enum datatype_flags flags)
 {
-  /* Any reference type is really a pointer */
-  if (constraints & CT_BY_REFERENCE)
-     return ARG_POINTER;
-
-  switch (c)
-  {
-  case 'C': case 'D': case 'E': case 'F': case 'G': case 'H': case 'I':
-  case 'J': case 'K':
-    return ARG_LONG;
-  case 'M':
-    return ARG_FLOAT;
-  case 'N': case 'O':
-    return ARG_DOUBLE;
-  case 'P': case 'Q':
-    return ARG_POINTER;
-  case 'U': case 'V':
-    return ARG_STRUCT;
-  case 'X':
-    return ARG_VOID;
-  case 'Z':
-  default:
-    return -1;
-  }
+    char                dt;
+    BOOL                add_pmt = TRUE;
+
+    assert(ct);
+    ct->left = ct->right = NULL;
+    ct->flags = 0;
+
+    switch (dt = *sym->current++)
+    {
+    case '_':
+        /* MS type: __int8,__int16 etc */
+        ct->left = get_extended_type(*sym->current++);
+        break;
+    case 'C': case 'D': case 'E': case 'F': case 'G':
+    case 'H': case 'I': case 'J': case 'K': case 'M':
+    case 'N': case 'O': case 'X': case 'Z':
+        /* Simple data types */
+        ct->left = get_simple_type(dt);
+        add_pmt = FALSE;
+        break;
+    case 'T': /* union */
+    case 'U': /* struct */
+    case 'V': /* class */
+    case 'Y': /* cointerface */
+        /* Class/struct/union/cointerface */
+        {
+            const char* struct_name = NULL;
+            const char* type_name = NULL;
+
+            if (!(struct_name = get_class_name(sym)))
+                goto done;
+            if (!(sym->flags & UNDNAME_NO_COMPLEX_TYPE))
+            {
+                switch (dt)
+                {
+                case 'T': type_name = "union ";  break;
+                case 'U': type_name = "struct "; break;
+                case 'V': type_name = "class ";  break;
+                case 'Y': type_name = "cointerface "; break;
+                }
+            }
+            ct->left = str_printf(sym, "%s%s", type_name, struct_name);
+        }
+        break;
+    case '?':
+        /* not all the time is seems */
+        if (flags & IN_ARGS)
+        {
+            const char*   ptr;
+            if (!(ptr = get_number(sym))) goto done;
+            ct->left = str_printf(sym, "`template-parameter-%s'", ptr);
+        }
+        else
+        {
+            if (!get_qualified_type(ct, sym, pmt_ref, '?', flags)) goto done;
+        }
+        break;
+    case 'A': /* reference */
+    case 'B': /* volatile reference */
+        if (!get_qualified_type(ct, sym, pmt_ref, dt, flags)) goto done;
+        break;
+    case 'Q': /* const pointer */
+    case 'R': /* volatile pointer */
+    case 'S': /* const volatile pointer */
+        if (!get_qualified_type(ct, sym, pmt_ref, (flags & IN_ARGS) ? dt : 'P', flags)) goto done;
+        break;
+    case 'P': /* Pointer */
+        if (isdigit(*sym->current))
+	{
+            /* FIXME:
+             *   P6 = Function pointer
+             *   P8 = Member function pointer
+             *   others who knows.. */
+            if (*sym->current == '8')
+            {
+                struct function_signature       fs;
+                const char*                     class;
+                const char*                     function_qualifier;
+
+                sym->current++;
+
+                if (!(class = get_class_name(sym)))
+                    goto done;
+                if (!get_function_qualifier(sym, &function_qualifier))
+                    goto done;
+                if (!get_function_signature(sym, pmt_ref, &fs))
+                     goto done;
+
+                ct->left  = str_printf(sym, "%s%s (%s %s::*",
+                                       fs.return_ct.left, fs.return_ct.right, fs.call_conv, class);
+                ct->right = str_printf(sym, ")%s%s", fs.arguments, function_qualifier);
+            }
+            else if (*sym->current == '6')
+            {
+                struct function_signature       fs;
+
+                sym->current++;
+
+                if (!get_function_signature(sym, pmt_ref, &fs))
+                     goto done;
+
+                ct->left  = str_printf(sym, "%s%s (%s*",
+                                       fs.return_ct.left, fs.return_ct.right, fs.call_conv);
+                ct->flags = DT_NO_LEADING_WS;
+                ct->right = str_printf(sym, ")%s", fs.arguments);
+            }
+            else goto done;
+	}
+	else if (!get_qualified_type(ct, sym, pmt_ref, 'P', flags)) goto done;
+        break;
+    case 'W':
+        if (*sym->current == '4')
+        {
+            char*               enum_name;
+            sym->current++;
+            if (!(enum_name = get_class_name(sym)))
+                goto done;
+            if (sym->flags & UNDNAME_NO_COMPLEX_TYPE)
+                ct->left = enum_name;
+            else
+                ct->left = str_printf(sym, "enum %s", enum_name);
+        }
+        else goto done;
+        break;
+    case '0': case '1': case '2': case '3': case '4':
+    case '5': case '6': case '7': case '8': case '9':
+        /* Referring back to previously parsed type */
+        /* left and right are pushed as two separate strings */
+        if (!pmt_ref) goto done;
+        ct->left = str_array_get_ref(pmt_ref, (dt - '0') * 2);
+        ct->right = str_array_get_ref(pmt_ref, (dt - '0') * 2 + 1);
+        if (!ct->left) goto done;
+        add_pmt = FALSE;
+        break;
+    case '$':
+        switch (*sym->current++)
+        {
+        case '0':
+            if (!(ct->left = get_number(sym))) goto done;
+            break;
+        case 'D':
+            {
+                const char*   ptr;
+                if (!(ptr = get_number(sym))) goto done;
+                ct->left = str_printf(sym, "`template-parameter%s'", ptr);
+            }
+            break;
+        case 'F':
+            {
+                const char*   p1;
+                const char*   p2;
+                if (!(p1 = get_number(sym))) goto done;
+                if (!(p2 = get_number(sym))) goto done;
+                ct->left = str_printf(sym, "{%s,%s}", p1, p2);
+            }
+            break;
+        case 'G':
+            {
+                const char*   p1;
+                const char*   p2;
+                const char*   p3;
+                if (!(p1 = get_number(sym))) goto done;
+                if (!(p2 = get_number(sym))) goto done;
+                if (!(p3 = get_number(sym))) goto done;
+                ct->left = str_printf(sym, "{%s,%s,%s}", p1, p2, p3);
+            }
+            break;
+        case 'Q':
+            {
+                const char*   ptr;
+                if (!(ptr = get_number(sym))) goto done;
+                ct->left = str_printf(sym, "`non-type-template-parameter%s'", ptr);
+            }
+            break;
+        case '$':
+            if (*sym->current == 'A')
+            {
+                sym->current++;
+                if (*sym->current == '6')
+                {
+                    struct function_signature fs;
+
+                    sym->current++;
+
+                    if (!get_function_signature(sym, pmt_ref, &fs))
+                        goto done;
+                    ct->left = str_printf(sym, "%s%s %s%s",
+                                          fs.return_ct.left, fs.return_ct.right, fs.call_conv, fs.arguments);
+                }
+            }
+            else if (*sym->current == 'B')
+            {
+                unsigned            mark = sym->stack.num;
+                struct datatype_t   sub_ct;
+                const char*         arr = NULL;
+                sym->current++;
+
+                /* multidimensional arrays */
+                if (*sym->current == 'Y')
+                {
+                    const char* n1;
+                    int num;
+
+                    sym->current++;
+                    if (!(n1 = get_number(sym))) goto done;
+                    num = atoi(n1);
+
+                    while (num--)
+                        arr = str_printf(sym, "%s[%s]", arr, get_number(sym));
+                }
+
+                if (!demangle_datatype(sym, &sub_ct, pmt_ref, 0)) goto done;
+
+                if (arr)
+                    ct->left = str_printf(sym, "%s %s", sub_ct.left, arr);
+                else
+                    ct->left = sub_ct.left;
+                ct->right = sub_ct.right;
+                sym->stack.num = mark;
+            }
+            else if (*sym->current == 'C')
+            {
+                struct datatype_t xdt;
+
+                sym->current++;
+                if (!get_qualifier(sym, &xdt, NULL)) goto done;
+                if (!demangle_datatype(sym, ct, pmt_ref, flags)) goto done;
+                ct->left = str_printf(sym, "%s %s", ct->left, xdt.left);
+            }
+            else if (*sym->current == 'Q')
+            {
+                sym->current++;
+                if (!get_qualified_type(ct, sym, pmt_ref, '$', flags)) goto done;
+            }
+            break;
+        }
+        break;
+    default :
+        break;
+    }
+    if (add_pmt && pmt_ref && (flags & IN_ARGS))
+    {
+        /* left and right are pushed as two separate strings */
+        if (!str_array_push(sym, ct->left ? ct->left : "", -1, pmt_ref) ||
+            !str_array_push(sym, ct->right ? ct->right : "", -1, pmt_ref))
+            return FALSE;
+    }
+done:
+
+    return ct->left != NULL;
+}
+
+/******************************************************************
+ *		handle_data
+ * Does the final parsing and handling for a variable or a field in
+ * a class.
+ */
+static BOOL handle_data(struct parsed_symbol* sym)
+{
+    const char*         access = NULL;
+    const char*         member_type = NULL;
+    struct datatype_t   xdt = {NULL};
+    struct datatype_t   ct;
+    char*               name = NULL;
+    BOOL                ret = FALSE;
+
+    /* 0 private static
+     * 1 protected static
+     * 2 public static
+     * 3 private non-static
+     * 4 protected non-static
+     * 5 public non-static
+     * 6 ?? static
+     * 7 ?? static
+     */
+
+    if (!(sym->flags & UNDNAME_NO_ACCESS_SPECIFIERS))
+    {
+        /* we only print the access for static members */
+        switch (*sym->current)
+        {
+        case '0': access = "private: "; break;
+        case '1': access = "protected: "; break;
+        case '2': access = "public: "; break;
+        }
+    }
+
+    if (!(sym->flags & UNDNAME_NO_MEMBER_TYPE))
+    {
+        if (*sym->current >= '0' && *sym->current <= '2')
+            member_type = "static ";
+    }
+
+    name = get_class_string(sym, 0);
+
+    switch (*sym->current++)
+    {
+    case '0': case '1': case '2':
+    case '3': case '4': case '5':
+        {
+            unsigned mark = sym->stack.num;
+            struct array pmt;
+            const char* class;
+
+            str_array_init(&pmt);
+
+            if (!demangle_datatype(sym, &ct, &pmt, 0)) goto done;
+            if (!get_qualifier(sym, &xdt, &class)) goto done; /* class doesn't seem to be displayed */
+            if (xdt.left && xdt.right) xdt.left = str_printf(sym, "%s %s", xdt.left, xdt.right);
+            else if (!xdt.left) xdt.left = xdt.right;
+            sym->stack.num = mark;
+        }
+        break;
+    case '6' : /* compiler generated static */
+    case '7' : /* compiler generated static */
+        ct.left = ct.right = NULL;
+        if (!get_qualifier(sym, &xdt, NULL)) goto done;
+        if (*sym->current != '@')
+        {
+            char*       cls = NULL;
+
+            if (!(cls = get_class_name(sym)))
+                goto done;
+            ct.right = str_printf(sym, "{for `%s'}", cls);
+        }
+        break;
+    case '8':
+    case '9':
+        xdt.left = ct.left = ct.right = NULL;
+        break;
+    default: goto done;
+    }
+    if (sym->flags & UNDNAME_NAME_ONLY) ct.left = ct.right = xdt.left = NULL;
+
+    sym->result = str_printf(sym, "%s%s%s%s%s%s%s%s", access,
+                             member_type, ct.left,
+                             xdt.left && ct.left ? " " : NULL, xdt.left,
+                             xdt.left || ct.left ? " " : NULL, name, ct.right);
+    ret = TRUE;
+done:
+    return ret;
 }
 
+/******************************************************************
+ *		handle_method
+ * Does the final parsing and handling for a function or a method in
+ * a class.
+ */
+static BOOL handle_method(struct parsed_symbol* sym, BOOL cast_op)
+{
+    char                accmem;
+    const char*         access = NULL;
+    int                 access_id = -1;
+    const char*         member_type = NULL;
+    struct datatype_t   ct_ret;
+    const char*         call_conv;
+    const char*         function_qualifier = NULL;
+    const char*         exported;
+    const char*         args_str = NULL;
+    const char*         name = NULL;
+    BOOL                ret = FALSE, has_args = TRUE, has_ret = TRUE;
+    unsigned            mark;
+    struct array        array_pmt;
+
+    /* FIXME: why 2 possible letters for each option?
+     * 'A' private:
+     * 'B' private:
+     * 'C' private: static
+     * 'D' private: static
+     * 'E' private: virtual
+     * 'F' private: virtual
+     * 'G' private: thunk
+     * 'H' private: thunk
+     * 'I' protected:
+     * 'J' protected:
+     * 'K' protected: static
+     * 'L' protected: static
+     * 'M' protected: virtual
+     * 'N' protected: virtual
+     * 'O' protected: thunk
+     * 'P' protected: thunk
+     * 'Q' public:
+     * 'R' public:
+     * 'S' public: static
+     * 'T' public: static
+     * 'U' public: virtual
+     * 'V' public: virtual
+     * 'W' public: thunk
+     * 'X' public: thunk
+     * 'Y'
+     * 'Z'
+     * "$0" private: thunk vtordisp
+     * "$1" private: thunk vtordisp
+     * "$2" protected: thunk vtordisp
+     * "$3" protected: thunk vtordisp
+     * "$4" public: thunk vtordisp
+     * "$5" public: thunk vtordisp
+     * "$B" vcall thunk
+     * "$R" thunk vtordispex
+     */
+    accmem = *sym->current++;
+    if (accmem == '$')
+    {
+        if (*sym->current >= '0' && *sym->current <= '5')
+            access_id = (*sym->current - '0') / 2;
+        else if (*sym->current == 'R')
+            access_id = (sym->current[1] - '0') / 2;
+        else if (*sym->current != 'B')
+            goto done;
+    }
+    else if (accmem >= 'A' && accmem <= 'Z')
+        access_id = (accmem - 'A') / 8;
+    else
+        goto done;
+
+    switch (access_id)
+    {
+    case 0: access = "private: "; break;
+    case 1: access = "protected: "; break;
+    case 2: access = "public: "; break;
+    }
+    if (accmem == '$' || (accmem - 'A') % 8 == 6 || (accmem - 'A') % 8 == 7)
+        access = str_printf(sym, "[thunk]:%s", access ? access : " ");
+
+    if (accmem == '$' && *sym->current != 'B')
+        member_type = "virtual ";
+    else if (accmem <= 'X')
+    {
+        switch ((accmem - 'A') % 8)
+        {
+        case 2: case 3: member_type = "static "; break;
+        case 4: case 5: case 6: case 7: member_type = "virtual "; break;
+        }
+    }
+
+    if (sym->flags & UNDNAME_NO_ACCESS_SPECIFIERS)
+        access = NULL;
+    if (sym->flags & UNDNAME_NO_MEMBER_TYPE)
+        member_type = NULL;
+
+    name = get_class_string(sym, 0);
+
+    if (accmem == '$' && *sym->current == 'B') /* vcall thunk */
+    {
+        const char *n;
+
+        sym->current++;
+        n = get_number(sym);
+
+        if(!n || *sym->current++ != 'A') goto done;
+        name = str_printf(sym, "%s{%s,{flat}}' }'", name, n);
+        has_args = FALSE;
+        has_ret = FALSE;
+    }
+    else if (accmem == '$' && *sym->current == 'R') /* vtordispex thunk */
+    {
+        const char *n1, *n2, *n3, *n4;
+
+        sym->current += 2;
+        n1 = get_number(sym);
+        n2 = get_number(sym);
+        n3 = get_number(sym);
+        n4 = get_number(sym);
+
+        if(!n1 || !n2 || !n3 || !n4) goto done;
+        name = str_printf(sym, "%s`vtordispex{%s,%s,%s,%s}' ", name, n1, n2, n3, n4);
+    }
+    else if (accmem == '$') /* vtordisp thunk */
+    {
+        const char *n1, *n2;
+
+        sym->current++;
+        n1 = get_number(sym);
+        n2 = get_number(sym);
+
+        if (!n1 || !n2) goto done;
+        name = str_printf(sym, "%s`vtordisp{%s,%s}' ", name, n1, n2);
+    }
+    else if ((accmem - 'A') % 8 == 6 || (accmem - 'A') % 8 == 7) /* a thunk */
+        name = str_printf(sym, "%s`adjustor{%s}' ", name, get_number(sym));
+
+    if (has_args && (accmem == '$' ||
+                (accmem <= 'X' && (accmem - 'A') % 8 != 2 && (accmem - 'A') % 8 != 3)))
+    {
+        /* Implicit 'this' pointer */
+        if (!get_function_qualifier(sym, &function_qualifier)) goto done;
+    }
+
+    if (!get_calling_convention(*sym->current++, &call_conv, &exported,
+                                sym->flags))
+        goto done;
+
+    str_array_init(&array_pmt);
+
+    /* Return type, or @ if 'void' */
+    if (has_ret && *sym->current == '@')
+    {
+        ct_ret.left = "void";
+        ct_ret.right = NULL;
+        sym->current++;
+    }
+    else if (has_ret)
+    {
+        if (!demangle_datatype(sym, &ct_ret, &array_pmt, cast_op ? WS_AFTER_QUAL_IF : 0))
+            goto done;
+    }
+    if (!has_ret || sym->flags & UNDNAME_NO_FUNCTION_RETURNS)
+        ct_ret.left = ct_ret.right = NULL;
+    if (cast_op)
+    {
+        name = str_printf(sym, "%s %s%s", name, ct_ret.left, ct_ret.right);
+        ct_ret.left = ct_ret.right = NULL;
+    }
+
+    mark = sym->stack.num;
+    if (has_args && !(args_str = get_args(sym, &array_pmt, TRUE, '(', ')'))) goto done;
+    if (sym->flags & UNDNAME_NAME_ONLY) args_str = function_qualifier = NULL;
+    if (sym->flags & UNDNAME_NO_THISTYPE) function_qualifier = NULL;
+    sym->stack.num = mark;
+
+    /* Note: '()' after 'Z' means 'throws', but we don't care here
+     * Yet!!! FIXME
+     */
+    sym->result = str_printf(sym, "%s%s%s%s%s%s%s%s%s%s%s",
+                             access, member_type, ct_ret.left,
+                             (ct_ret.left && !ct_ret.right) ? " " : NULL,
+                             call_conv, call_conv ? " " : NULL, exported,
+                             name, args_str, function_qualifier, ct_ret.right);
+    ret = TRUE;
+done:
+    return ret;
+}
 
 /*******************************************************************
- *         get_pointer_type_string
- *
- * Return a string containing 'pointer to expression'
+ *         symbol_demangle
+ * Demangle a C++ linker symbol
  */
-static char *get_pointer_type_string (compound_type *ct,
-                                      const char *expression)
+static BOOL symbol_demangle(struct parsed_symbol* sym)
+{
+    BOOL                ret = FALSE;
+    enum {
+        PP_NONE,
+        PP_CONSTRUCTOR,
+        PP_DESTRUCTOR,
+        PP_CAST_OPERATOR,
+    } post_process = PP_NONE;
+
+    /* FIXME seems wrong as name, as it demangles a simple data type */
+    if (sym->flags & UNDNAME_NO_ARGUMENTS)
+    {
+        struct datatype_t   ct;
+
+        if (demangle_datatype(sym, &ct, NULL, 0))
+        {
+            sym->result = str_printf(sym, "%s%s", ct.left, ct.right);
+            ret = TRUE;
+        }
+        goto done;
+    }
+
+    /* MS mangled names always begin with '?' */
+    if (*sym->current != '?') return FALSE;
+    sym->current++;
+
+    /* Then function name or operator code */
+    if (*sym->current == '?')
+    {
+        const char* function_name = NULL;
+        BOOL in_template = FALSE;
+
+        if (sym->current[1] == '$' && sym->current[2] == '?')
+        {
+            in_template = TRUE;
+            sym->current += 2;
+        }
+
+        /* C++ operator code (one character, or two if the first is '_') */
+        switch (*++sym->current)
+        {
+        case '0': function_name = ""; post_process = PP_CONSTRUCTOR; break;
+        case '1': function_name = ""; post_process = PP_DESTRUCTOR; break;
+        case '2': function_name = "operator new"; break;
+        case '3': function_name = "operator delete"; break;
+        case '4': function_name = "operator="; break;
+        case '5': function_name = "operator>>"; break;
+        case '6': function_name = "operator<<"; break;
+        case '7': function_name = "operator!"; break;
+        case '8': function_name = "operator=="; break;
+        case '9': function_name = "operator!="; break;
+        case 'A': function_name = "operator[]"; break;
+        case 'B': function_name = "operator"; post_process = PP_CAST_OPERATOR; break;
+        case 'C': function_name = "operator->"; break;
+        case 'D': function_name = "operator*"; break;
+        case 'E': function_name = "operator++"; break;
+        case 'F': function_name = "operator--"; break;
+        case 'G': function_name = "operator-"; break;
+        case 'H': function_name = "operator+"; break;
+        case 'I': function_name = "operator&"; break;
+        case 'J': function_name = "operator->*"; break;
+        case 'K': function_name = "operator/"; break;
+        case 'L': function_name = "operator%"; break;
+        case 'M': function_name = "operator<"; break;
+        case 'N': function_name = "operator<="; break;
+        case 'O': function_name = "operator>"; break;
+        case 'P': function_name = "operator>="; break;
+        case 'Q': function_name = "operator,"; break;
+        case 'R': function_name = "operator()"; break;
+        case 'S': function_name = "operator~"; break;
+        case 'T': function_name = "operator^"; break;
+        case 'U': function_name = "operator|"; break;
+        case 'V': function_name = "operator&&"; break;
+        case 'W': function_name = "operator||"; break;
+        case 'X': function_name = "operator*="; break;
+        case 'Y': function_name = "operator+="; break;
+        case 'Z': function_name = "operator-="; break;
+        case '_':
+            switch (*++sym->current)
+            {
+            case '0': function_name = "operator/="; break;
+            case '1': function_name = "operator%="; break;
+            case '2': function_name = "operator>>="; break;
+            case '3': function_name = "operator<<="; break;
+            case '4': function_name = "operator&="; break;
+            case '5': function_name = "operator|="; break;
+            case '6': function_name = "operator^="; break;
+            case '7': function_name = "`vftable'"; break;
+            case '8': function_name = "`vbtable'"; break;
+            case '9': function_name = "`vcall'"; break;
+            case 'A': function_name = "`typeof'"; break;
+            case 'B': function_name = "`local static guard'"; break;
+            case 'C': sym->result = (char*)"`string'"; /* string literal: followed by string encoding (native never undecode it) */
+                /* FIXME: should unmangle the whole string for error reporting */
+                if (*sym->current && sym->current[strlen(sym->current) - 1] == '@') ret = TRUE;
+                goto done;
+            case 'D': function_name = "`vbase destructor'"; break;
+            case 'E': function_name = "`vector deleting destructor'"; break;
+            case 'F': function_name = "`default constructor closure'"; break;
+            case 'G': function_name = "`scalar deleting destructor'"; break;
+            case 'H': function_name = "`vector constructor iterator'"; break;
+            case 'I': function_name = "`vector destructor iterator'"; break;
+            case 'J': function_name = "`vector vbase constructor iterator'"; break;
+            case 'K': function_name = "`virtual displacement map'"; break;
+            case 'L': function_name = "`eh vector constructor iterator'"; break;
+            case 'M': function_name = "`eh vector destructor iterator'"; break;
+            case 'N': function_name = "`eh vector vbase constructor iterator'"; break;
+            case 'O': function_name = "`copy constructor closure'"; break;
+            case 'R':
+                sym->flags |= UNDNAME_NO_FUNCTION_RETURNS;
+                switch (*++sym->current)
+                {
+                case '0':
+                    {
+                        struct datatype_t       ct;
+
+                        sym->current++;
+                        if (!demangle_datatype(sym, &ct, NULL, 0))
+                            goto done;
+                        function_name = str_printf(sym, "%s%s `RTTI Type Descriptor'",
+                                                   ct.left, ct.right);
+                        sym->current--;
+                    }
+                    break;
+                case '1':
+                    {
+                        const char* n1, *n2, *n3, *n4;
+                        sym->current++;
+                        n1 = get_number(sym);
+                        n2 = get_number(sym);
+                        n3 = get_number(sym);
+                        n4 = get_number(sym);
+                        sym->current--;
+                        function_name = str_printf(sym, "`RTTI Base Class Descriptor at (%s,%s,%s,%s)'",
+                                                   n1, n2, n3, n4);
+                    }
+                    break;
+                case '2': function_name = "`RTTI Base Class Array'"; break;
+                case '3': function_name = "`RTTI Class Hierarchy Descriptor'"; break;
+                case '4': function_name = "`RTTI Complete Object Locator'"; break;
+                default:
+                    break;
+                }
+                break;
+            case 'S': function_name = "`local vftable'"; break;
+            case 'T': function_name = "`local vftable constructor closure'"; break;
+            case 'U': function_name = "operator new[]"; break;
+            case 'V': function_name = "operator delete[]"; break;
+            case 'X': function_name = "`placement delete closure'"; break;
+            case 'Y': function_name = "`placement delete[] closure'"; break;
+            case '_':
+                switch (*++sym->current)
+                {
+                case 'K':
+                    sym->current++;
+                    function_name = str_printf(sym, "operator \"\" %s", get_literal_string(sym));
+                    --sym->current;
+                    break;
+                default:
+                    return FALSE;
+                }
+                break;
+            default:
+                return FALSE;
+            }
+            break;
+        case '$':
+            sym->current++;
+            if (!(function_name = get_template_name(sym))) goto done;
+            --sym->current;
+            break;
+        default:
+            /* FIXME: Other operators */
+            return FALSE;
+        }
+        sym->current++;
+        if (in_template)
+        {
+            const char *args;
+            struct array array_pmt;
+
+            str_array_init(&array_pmt);
+            args = get_args(sym, &array_pmt, FALSE, '<', '>');
+            if (args) function_name = function_name ? str_printf(sym, "%s%s", function_name, args) : args;
+            sym->names.num = 0;
+        }
+        if (!str_array_push(sym, function_name, -1, &sym->stack))
+            return FALSE;
+    }
+    else if (*sym->current == '$')
+    {
+        /* Strange construct, it's a name with a template argument list
+           and that's all. */
+        sym->current++;
+        ret = (sym->result = get_template_name(sym)) != NULL;
+        goto done;
+    }
+
+    /* Either a class name, or '@' if the symbol is not a class member */
+    switch (*sym->current)
+    {
+    case '@': sym->current++; break;
+    case '$': break;
+    default:
+        /* Class the function is associated with, terminated by '@@' */
+        if (!get_class(sym)) goto done;
+        break;
+    }
+
+    switch (post_process)
+    {
+    case PP_NONE: default: break;
+    case PP_CONSTRUCTOR: case PP_DESTRUCTOR:
+        /* it's time to set the member name for ctor & dtor */
+        if (sym->stack.num <= 1) goto done;
+        sym->stack.elts[0] = str_printf(sym, "%s%s%s", post_process == PP_DESTRUCTOR ? "~" : NULL,
+                                        sym->stack.elts[1], sym->stack.elts[0]);
+        /* ctors and dtors don't have return type */
+        sym->flags |= UNDNAME_NO_FUNCTION_RETURNS;
+        break;
+    case PP_CAST_OPERATOR:
+        sym->flags &= ~UNDNAME_NO_FUNCTION_RETURNS;
+        break;
+    }
+
+    /* Function/Data type and access level */
+    if (*sym->current >= '0' && *sym->current <= '9')
+        ret = handle_data(sym);
+    else if ((*sym->current >= 'A' && *sym->current <= 'Z') || *sym->current == '$')
+        ret = handle_method(sym, post_process == PP_CAST_OPERATOR);
+    else ret = FALSE;
+done:
+    return ret;
+}
+
+char *demangle( const char *mangled )
 {
-  /* FIXME: set a compound flag for bracketing expression if needed */
-    return strmake( "%s%s%s", ct->flags & CT_CONST ? "const " :
-                    ct->flags & CT_VOLATILE ? "volatile " : "", expression,
-                    ct->flags & CT_BY_REFERENCE ? " **" : " *" );
+    struct parsed_symbol sym;
 
+    memset(&sym, 0, sizeof(struct parsed_symbol));
+    sym.current = mangled;
+    str_array_init( &sym.names );
+    str_array_init( &sym.stack );
+    return symbol_demangle(&sym) ? sym.result : NULL;
 }
diff --git a/tools/winedump/winedump.h b/tools/winedump/winedump.h
index e2b3f7b1ca6a..91b7170b774a 100644
--- a/tools/winedump/winedump.h
+++ b/tools/winedump/winedump.h
@@ -168,7 +168,7 @@ BOOL  dll_next_symbol (parsed_symbol * sym);
 /* Symbol functions */
 void  symbol_init(parsed_symbol* symbol, const char* name);
 
-BOOL  symbol_demangle (parsed_symbol *symbol);
+char *demangle( const char *name );
 
 BOOL  symbol_search (parsed_symbol *symbol);
 
From 2d338e22f25a5d94a5a6d8944fcc39d3175799cc Mon Sep 17 00:00:00 2001
From: Alexandre Julliard <julliard@winehq.org>
Date: Fri, 24 Nov 2023 14:03:44 +0100
Subject: [PATCH] winedump: Display PE section offsets using their virtual
 address.

---
 tools/winedump/dump.c     | 11 ++++++++---
 tools/winedump/pe.c       |  3 ++-
 tools/winedump/winedump.h |  1 +
 3 files changed, 11 insertions(+), 4 deletions(-)

diff --git a/tools/winedump/dump.c b/tools/winedump/dump.c
index abfc2ab8c74b..90602d43367a 100644
--- a/tools/winedump/dump.c
+++ b/tools/winedump/dump.c
@@ -33,11 +33,11 @@
 void *dump_base = NULL;
 size_t dump_total_len = 0;
 
-void dump_data( const unsigned char *ptr, unsigned int size, const char *prefix )
+void dump_data_offset( const unsigned char *ptr, unsigned int size, unsigned int offset, const char *prefix )
 {
     unsigned int i, j;
 
-    printf( "%s%08x: ", prefix, 0 );
+    printf( "%s%08x: ", prefix, offset );
     if (!ptr)
     {
         printf("NULL\n");
@@ -51,7 +51,7 @@ void dump_data( const unsigned char *ptr, unsigned int size, const char *prefix
             printf( " " );
             for (j = 0; j < 16; j++)
                 printf( "%c", isprint(ptr[i-15+j]) ? ptr[i-15+j] : '.' );
-            if (i < size-1) printf( "\n%s%08x: ", prefix, i + 1 );
+            if (i < size-1) printf( "\n%s%08x: ", prefix, offset + i + 1 );
         }
     }
     if (i % 16)
@@ -63,6 +63,11 @@ void dump_data( const unsigned char *ptr, unsigned int size, const char *prefix
     printf( "\n" );
 }
 
+void dump_data( const unsigned char *ptr, unsigned int size, const char *prefix )
+{
+    dump_data_offset( ptr, size, 0, prefix );
+}
+
 static char* dump_want_n(unsigned sz)
 {
     static char         buffer[64 * 1024];
diff --git a/tools/winedump/pe.c b/tools/winedump/pe.c
index 3defdcd664b0..a49c4e83d522 100644
--- a/tools/winedump/pe.c
+++ b/tools/winedump/pe.c
@@ -539,7 +539,8 @@ static void dump_sections(const void *base, const void* addr, unsigned num_sect)
 
         if (globals.do_dump_rawdata)
         {
-            dump_data((const unsigned char *)base + sectHead->PointerToRawData, sectHead->SizeOfRawData, "    " );
+            dump_data_offset((const unsigned char *)base + sectHead->PointerToRawData,
+                             sectHead->SizeOfRawData, sectHead->VirtualAddress, "    " );
             printf("\n");
         }
     }
diff --git a/tools/winedump/winedump.h b/tools/winedump/winedump.h
index 91b7170b774a..3df2410a6c35 100644
--- a/tools/winedump/winedump.h
+++ b/tools/winedump/winedump.h
@@ -224,6 +224,7 @@ unsigned long	Offset(const void* ptr);
 typedef void (*file_dumper)(void);
 BOOL            dump_analysis(const char*, file_dumper, enum FileSig);
 
+void            dump_data_offset( const unsigned char *ptr, unsigned int size, unsigned int offset, const char *prefix );
 void            dump_data( const unsigned char *ptr, unsigned int size, const char *prefix );
 const char*	get_time_str( unsigned long );
 unsigned int    strlenW( const unsigned short *str );

From 244b63566a02e1a42e06af8a51cf1d6ec7952928 Mon Sep 17 00:00:00 2001
From: Piotr Caban <piotr@codeweavers.com>
Date: Tue, 28 Nov 2023 18:31:26 +0100
Subject: [PATCH] winedump: Fix EMR_EXTTEXTOUTW record dumping when ETO_PDY
 flag is specified.

---
 tools/winedump/emf.c | 8 ++++++--
 1 file changed, 6 insertions(+), 2 deletions(-)

diff --git a/tools/winedump/emf.c b/tools/winedump/emf.c
index 42b1f9469af8..253e7c658c23 100644
--- a/tools/winedump/emf.c
+++ b/tools/winedump/emf.c
@@ -384,6 +384,7 @@ unsigned long dump_emfrecord(const char *pfx, unsigned long offset)
     {
         const EMREXTTEXTOUTW *etoW = PRD(offset, sizeof(*etoW));
         const int *dx = (const int *)((const BYTE *)etoW + etoW->emrtext.offDx);
+        int dx_size;
 
         printf("%s%-20s %08x\n", pfx, "EMR_EXTTEXTOUTW", length);
         printf("%sbounds (%s) mode %#x x_scale %f y_scale %f pt (%d,%d) rect (%s) flags %#x, %s\n",
@@ -392,10 +393,13 @@ unsigned long dump_emfrecord(const char *pfx, unsigned long offset)
                debugstr_rect( &etoW->emrtext.rcl ), (UINT)etoW->emrtext.fOptions,
                debugstr_wn((LPCWSTR)((const BYTE *)etoW + etoW->emrtext.offString), etoW->emrtext.nChars));
         printf("%sdx_offset %u {", pfx, (UINT)etoW->emrtext.offDx);
-        for (i = 0; i < etoW->emrtext.nChars; ++i)
+        dx_size = etoW->emrtext.nChars;
+        if (etoW->emrtext.fOptions & ETO_PDY)
+            dx_size *= 2;
+        for (i = 0; i < dx_size; ++i)
         {
             printf("%d", dx[i]);
-            if (i != etoW->emrtext.nChars - 1)
+            if (i != dx_size - 1)
                 putchar(',');
         }
         printf("}\n");

From 17de5daa77c641ecb5e27f37ab0879741ef1bd5c Mon Sep 17 00:00:00 2001
From: Alexandre Julliard <julliard@winehq.org>
Date: Sun, 3 Dec 2023 14:25:54 +0100
Subject: [PATCH] winedump: Add dumping of UWOP_EPILOG entries.

---
 tools/winedump/pe.c | 23 ++++++++++++++++++++++-
 1 file changed, 22 insertions(+), 1 deletion(-)

diff --git a/tools/winedump/pe.c b/tools/winedump/pe.c
index a49c4e83d522..3e466daca485 100644
--- a/tools/winedump/pe.c
+++ b/tools/winedump/pe.c
@@ -833,6 +833,7 @@ struct unwind_info_epilogue_armnt
 #define UWOP_SET_FPREG       3
 #define UWOP_SAVE_NONVOL     4
 #define UWOP_SAVE_NONVOL_FAR 5
+#define UWOP_EPILOG          6
 #define UWOP_SAVE_XMM128     8
 #define UWOP_SAVE_XMM128_FAR 9
 #define UWOP_PUSH_MACHFRAME  10
@@ -861,7 +862,7 @@ static void dump_x86_64_unwind_info( const struct runtime_function_x86_64 *funct
     info = RVA( function->UnwindData, sizeof(*info) );
 
     printf( "  unwind info at %08x\n", function->UnwindData );
-    if (info->version != 1)
+    if (info->version > 2)
     {
         printf( "    *** unknown version %u\n", info->version );
         return;
@@ -878,6 +879,11 @@ static void dump_x86_64_unwind_info( const struct runtime_function_x86_64 *funct
 
     for (i = 0; i < info->count; i++)
     {
+        if (info->opcodes[i].code == UWOP_EPILOG)
+        {
+            i++;
+            continue;
+        }
         printf( "      0x%02x: ", info->opcodes[i].offset );
         switch (info->opcodes[i].code)
         {
@@ -934,6 +940,21 @@ static void dump_x86_64_unwind_info( const struct runtime_function_x86_64 *funct
         }
     }
 
+    if (info->version == 2 && info->opcodes[0].code == UWOP_EPILOG)  /* print the epilogs */
+    {
+        unsigned int end = function->EndAddress;
+        unsigned int size = info->opcodes[0].offset;
+
+        printf( "    epilog 0x%x bytes\n", size );
+        if (info->opcodes[0].info) printf( "      at %08x-%08x\n", end - size, end );
+        for (i = 1; i < info->count && info->opcodes[i].code == UWOP_EPILOG; i++)
+        {
+            unsigned int offset = (info->opcodes[i].info << 8) + info->opcodes[i].offset;
+            if (!offset) break;
+            printf( "      at %08x-%08x\n", end - offset, end - offset + size );
+        }
+    }
+
     handler_data = (const union handler_data *)&info->opcodes[(info->count + 1) & ~1];
     if (info->flags & UNW_FLAG_CHAININFO)
     {

From c0f500ba0006f3e5c31c7d79141fdca886e92ff7 Mon Sep 17 00:00:00 2001
From: Alexandre Julliard <julliard@winehq.org>
Date: Sun, 3 Dec 2023 14:26:05 +0100
Subject: [PATCH] winedump: Add a couple of ARM unwind codes.

---
 tools/winedump/pe.c | 20 +++++++++++++++++++-
 1 file changed, 19 insertions(+), 1 deletion(-)

diff --git a/tools/winedump/pe.c b/tools/winedump/pe.c
index 3e466daca485..65ff347efe2a 100644
--- a/tools/winedump/pe.c
+++ b/tools/winedump/pe.c
@@ -176,6 +176,7 @@ static const void *get_hybrid_metadata(void)
         if (!cfg) return 0;
         size = min( size, cfg->Size );
         if (size <= offsetof( IMAGE_LOAD_CONFIG_DIRECTORY64, CHPEMetadataPointer )) return 0;
+        if (!cfg->CHPEMetadataPointer) return 0;
         return RVA( cfg->CHPEMetadataPointer - ((const IMAGE_OPTIONAL_HEADER64 *)&PE_nt_headers->OptionalHeader)->ImageBase, 1 );
     }
     else
@@ -184,6 +185,7 @@ static const void *get_hybrid_metadata(void)
         if (!cfg) return 0;
         size = min( size, cfg->Size );
         if (size <= offsetof( IMAGE_LOAD_CONFIG_DIRECTORY32, CHPEMetadataPointer )) return 0;
+        if (!cfg->CHPEMetadataPointer) return 0;
         return RVA( cfg->CHPEMetadataPointer - PE_nt_headers->OptionalHeader.ImageBase, 1 );
     }
 }
@@ -1274,7 +1276,15 @@ static void dump_armnt_unwind_info( const struct runtime_function_armnt *fnc )
                 printf( "}\n" );
             }
             else if (code == 0xee)
-                printf( "unknown 16\n" );
+            {
+                BYTE excodes = bytes[++b];
+                if (excodes == 0x01)
+                    printf( "MSFT_OP_MACHINE_FRAME\n");
+                else if (excodes == 0x02)
+                    printf( "MSFT_OP_CONTEXT\n");
+                else
+                    printf( "MSFT opcode %u\n", excodes );
+            }
             else if (code == 0xef)
             {
                 WORD excode;
@@ -1550,10 +1560,18 @@ static void dump_arm64_codes( const BYTE *ptr, unsigned int count )
         {
             printf( "MSFT_OP_CONTEXT\n" );
         }
+        else if (ptr[i] == 0xeb)  /* MSFT_OP_EC_CONTEXT */
+        {
+            printf( "MSFT_OP_EC_CONTEXT\n" );
+        }
         else if (ptr[i] == 0xec)  /* MSFT_OP_CLEAR_UNWOUND_TO_CALL */
         {
             printf( "MSFT_OP_CLEAR_UNWOUND_TO_CALL\n" );
         }
+        else if (ptr[i] == 0xfc)  /* pac_sign_lr */
+        {
+            printf( "pac_sign_lr\n" );
+        }
         else printf( "??\n");
     }
 }

From ef07f6bb72bd6b0805a1706f431e22fe18f33c1b Mon Sep 17 00:00:00 2001
From: Alexandre Julliard <julliard@winehq.org>
Date: Tue, 5 Dec 2023 14:37:30 +0100
Subject: [PATCH] winedump: Also dump ARM64 exception information for ARM64EC
 binaries.

---
 tools/winedump/pe.c | 23 ++++++++++++++---------
 1 file changed, 14 insertions(+), 9 deletions(-)

diff --git a/tools/winedump/pe.c b/tools/winedump/pe.c
index 65ff347efe2a..6e9407f6070c 100644
--- a/tools/winedump/pe.c
+++ b/tools/winedump/pe.c
@@ -1726,14 +1726,13 @@ static void dump_arm64_unwind_info( const struct runtime_function_arm64 *func )
 
 static void dump_dir_exceptions(void)
 {
+    static const void *arm64_funcs;
     unsigned int i, size;
     const void *funcs;
-    const IMAGE_FILE_HEADER *file_header;
+    const IMAGE_FILE_HEADER *file_header = &PE_nt_headers->FileHeader;
+    const IMAGE_ARM64EC_METADATA *metadata;
 
     funcs = get_dir_and_size(IMAGE_FILE_EXCEPTION_DIRECTORY, &size);
-    if (!funcs) return;
-
-    file_header = &PE_nt_headers->FileHeader;
 
     switch (file_header->Machine)
     {
@@ -1741,17 +1740,23 @@ static void dump_dir_exceptions(void)
         size /= sizeof(struct runtime_function_x86_64);
         printf( "%s exception info (%u functions):\n", get_machine_str( file_header->Machine ), size );
         for (i = 0; i < size; i++) dump_x86_64_unwind_info( (struct runtime_function_x86_64*)funcs + i );
+        if (!(metadata = get_hybrid_metadata())) break;
+        if (!(size = metadata->ExtraRFETableSize)) break;
+        if (!(funcs = RVA( metadata->ExtraRFETable, size ))) break;
+        if (funcs == arm64_funcs) break; /* already dumped */
+        printf( "\n" );
+        /* fall through */
+    case IMAGE_FILE_MACHINE_ARM64:
+        arm64_funcs = funcs;
+        size /= sizeof(struct runtime_function_arm64);
+        printf( "%s exception info (%u functions):\n", get_machine_str( file_header->Machine ), size );
+        for (i = 0; i < size; i++) dump_arm64_unwind_info( (struct runtime_function_arm64*)funcs + i );
         break;
     case IMAGE_FILE_MACHINE_ARMNT:
         size /= sizeof(struct runtime_function_armnt);
         printf( "%s exception info (%u functions):\n", get_machine_str( file_header->Machine ), size );
         for (i = 0; i < size; i++) dump_armnt_unwind_info( (struct runtime_function_armnt*)funcs + i );
         break;
-    case IMAGE_FILE_MACHINE_ARM64:
-        size /= sizeof(struct runtime_function_arm64);
-        printf( "%s exception info (%u functions):\n", get_machine_str( file_header->Machine ), size );
-        for (i = 0; i < size; i++) dump_arm64_unwind_info( (struct runtime_function_arm64*)funcs + i );
-        break;
     default:
         printf( "Exception information not supported for %s binaries\n",
                 get_machine_str(file_header->Machine));

From 9a42affc344da1d68b7236b4e19b0adfb2a47b96 Mon Sep 17 00:00:00 2001
From: Piotr Caban <piotr@codeweavers.com>
Date: Thu, 7 Dec 2023 20:30:15 +0100
Subject: [PATCH] winedump: Sync demangling code with msvcrt.

---
 tools/winedump/msmangle.c | 25 ++++++++++++++++++++++++-
 1 file changed, 24 insertions(+), 1 deletion(-)

diff --git a/tools/winedump/msmangle.c b/tools/winedump/msmangle.c
index 19ccc18f7146..e49dd14ac2a1 100644
--- a/tools/winedump/msmangle.c
+++ b/tools/winedump/msmangle.c
@@ -410,6 +410,28 @@ static BOOL get_qualified_type(struct datatype_t *ct, struct parsed_symbol* sym,
     ct->right = NULL;
     ct->flags = 0;
 
+    /* parse managed handle information */
+    if (sym->current[0] == '$' && sym->current[1] == 'A')
+    {
+        sym->current += 2;
+
+        switch (qualif)
+        {
+        case 'A':
+        case 'B':
+            ref = " %";
+            break;
+        case 'P':
+        case 'Q':
+        case 'R':
+        case 'S':
+            ref = " ^";
+            break;
+        default:
+            return FALSE;
+        }
+    }
+
     if (get_qualifier(sym, &xdt2, &class))
     {
         unsigned            mark = sym->stack.num;
@@ -482,7 +504,8 @@ static char* get_literal_string(struct parsed_symbol* sym)
         if (!((*sym->current >= 'A' && *sym->current <= 'Z') ||
               (*sym->current >= 'a' && *sym->current <= 'z') ||
               (*sym->current >= '0' && *sym->current <= '9') ||
-              *sym->current == '_' || *sym->current == '$')) {
+              *sym->current == '_' || *sym->current == '$' ||
+              *sym->current == '<' || *sym->current == '>')) {
             return NULL;
         }
     } while (*++sym->current != '@');

From 6d7839418ea9589dd7b83f97e9c6aba0b45e18dd Mon Sep 17 00:00:00 2001
From: Eric Pouech <epouech@codeweavers.com>
Date: Mon, 11 Dec 2023 11:41:11 +0100
Subject: [PATCH] dbghelp: Allow an extra stream index entry in PDB files.

Latest MSVC version use this.

Signed-off-by: Eric Pouech <epouech@codeweavers.com>
---
 tools/winedump/pdb.c | 1 +
 1 file changed, 1 insertion(+)

diff --git a/tools/winedump/pdb.c b/tools/winedump/pdb.c
index 552fa4d8da83..adc0eadc7389 100644
--- a/tools/winedump/pdb.c
+++ b/tools/winedump/pdb.c
@@ -762,6 +762,7 @@ static void pdb_dump_symbols(struct pdb_reader* reader)
                    sidx.sections_stream);
             break;
         case sizeof(PDB_STREAM_INDEXES):
+        case sizeof(PDB_STREAM_INDEXES) + 2:
             memcpy(&sidx,
                    (const char*)symbols + sizeof(PDB_SYMBOLS) + symbols->module_size +
                    symbols->sectcontrib_size + symbols->segmap_size + symbols->srcmodule_size +

From 135b132dc2c3e3e8e1c04d771df4627e4c937902 Mon Sep 17 00:00:00 2001
From: Eric Pouech <epouech@codeweavers.com>
Date: Mon, 11 Dec 2023 11:39:00 +0100
Subject: [PATCH] winedump: Skip deleted vector in hash inside PDB header.

Signed-off-by: Eric Pouech <epouech@codeweavers.com>
---
 tools/winedump/pdb.c | 18 +++---------------
 1 file changed, 3 insertions(+), 15 deletions(-)

diff --git a/tools/winedump/pdb.c b/tools/winedump/pdb.c
index adc0eadc7389..c028f2df2b6b 100644
--- a/tools/winedump/pdb.c
+++ b/tools/winedump/pdb.c
@@ -200,11 +200,7 @@ static unsigned get_stream_by_name(struct pdb_reader* reader, const char* name)
     /* bitfield: first dword is len (in dword), then data */
     ok_bits = pdw;
     pdw += *ok_bits++ + 1;
-    if (*pdw++ != 0)
-    {
-        printf("unexpected value\n");
-        return -1;
-    }
+    pdw += *pdw + 1; /* skip deleted vector */
 
     for (i = 0; i < count; i++)
     {
@@ -1195,11 +1191,7 @@ static void pdb_jg_dump_header_root(struct pdb_reader* reader)
     /* bitfield: first dword is len (in dword), then data */
     ok_bits = pdw;
     pdw += *ok_bits++ + 1;
-    if (*pdw++ != 0)
-    {
-        printf("unexpected value\n");
-        return;
-    }
+    pdw += *pdw + 1; /* skip deleted vector */
 
     for (i = 0; i < count; i++)
     {
@@ -1346,11 +1338,7 @@ static void pdb_ds_dump_header_root(struct pdb_reader* reader)
     /* bitfield: first dword is len (in dword), then data */
     ok_bits = pdw;
     pdw += *ok_bits++ + 1;
-    if (*pdw++ != 0)
-    {
-        printf("unexpected value\n");
-        return;
-    }
+    pdw += *pdw + 1; /* skip deleted vector */
 
     for (i = 0; i < count; i++)
     {

From a2f98478c36908fd7a368cc633b6064aca053ab6 Mon Sep 17 00:00:00 2001
From: Eric Pouech <epouech@codeweavers.com>
Date: Thu, 28 Dec 2023 10:53:55 +0100
Subject: [PATCH] winedump: Better align fields in EXPORT table.

Signed-off-by: Eric Pouech <epouech@codeweavers.com>
---
 tools/winedump/pe.c | 8 ++++----
 1 file changed, 4 insertions(+), 4 deletions(-)

diff --git a/tools/winedump/pe.c b/tools/winedump/pe.c
index 6e9407f6070c..c90a339e5ba8 100644
--- a/tools/winedump/pe.c
+++ b/tools/winedump/pe.c
@@ -697,9 +697,9 @@ static	void	dump_dir_exported_functions(void)
     printf("  Ordinal base:    %u\n", (UINT)dir->Base);
     printf("  # of functions:  %u\n", (UINT)dir->NumberOfFunctions);
     printf("  # of Names:      %u\n", (UINT)dir->NumberOfNames);
-    printf("Addresses of functions: %08X\n", (UINT)dir->AddressOfFunctions);
-    printf("Addresses of name ordinals: %08X\n", (UINT)dir->AddressOfNameOrdinals);
-    printf("Addresses of names: %08X\n", (UINT)dir->AddressOfNames);
+    printf("  Functions RVA:   %08X\n", (UINT)dir->AddressOfFunctions);
+    printf("  Ordinals RVA:    %08X\n", (UINT)dir->AddressOfNameOrdinals);
+    printf("  Names RVA:       %08X\n", (UINT)dir->AddressOfNames);
     printf("\n");
     printf("  Entry Pt  Ordn  Name\n");
 
@@ -716,7 +716,7 @@ static	void	dump_dir_exported_functions(void)
     for (i = 0; i < dir->NumberOfFunctions; i++)
     {
         if (!pFunc[i]) continue;
-        printf("  %08X %5u ", pFunc[i], (UINT)dir->Base + i);
+        printf("  %08X %5u  ", pFunc[i], (UINT)dir->Base + i);
         if (funcs[i])
             printf("%s", get_symbol_str((const char*)RVA(funcs[i], sizeof(DWORD))));
         else

From 268f3adce9088ae1d38e844c40b70a7d37d6feef Mon Sep 17 00:00:00 2001
From: Piotr Caban <piotr@codeweavers.com>
Date: Tue, 30 Jan 2024 17:07:44 +0100
Subject: [PATCH] winedump: Sync demangling code with msvcrt.

---
 tools/winedump/msmangle.c | 92 ++++++++++++++++++---------------------
 1 file changed, 42 insertions(+), 50 deletions(-)

diff --git a/tools/winedump/msmangle.c b/tools/winedump/msmangle.c
index e49dd14ac2a1..1b76178ce16e 100644
--- a/tools/winedump/msmangle.c
+++ b/tools/winedump/msmangle.c
@@ -45,6 +45,7 @@ struct parsed_symbol
     char*               result;         /* demangled string */
 
     struct array        names;          /* array of names for back reference */
+    struct array        args;           /* array of arguments for back reference */
     struct array        stack;          /* stack of parsed strings */
 
     void*               alloc_list;     /* linked list of allocated blocks */
@@ -195,7 +196,7 @@ enum datatype_flags
 
 /* forward declaration */
 static BOOL demangle_datatype(struct parsed_symbol* sym, struct datatype_t* ct,
-                              struct array* pmt, enum datatype_flags flags);
+                              enum datatype_flags flags);
 
 static const char* get_number(struct parsed_symbol* sym)
 {
@@ -248,7 +249,7 @@ static const char* get_number(struct parsed_symbol* sym)
  * Parses a list of function/method arguments, creates a string corresponding
  * to the arguments' list.
  */
-static char* get_args(struct parsed_symbol* sym, struct array* pmt_ref, BOOL z_term,
+static char* get_args(struct parsed_symbol* sym, BOOL z_term,
                       char open_char, char close_char)
 
 {
@@ -257,19 +258,22 @@ static char* get_args(struct parsed_symbol* sym, struct array* pmt_ref, BOOL z_t
     char*               args_str = NULL;
     char*               last;
     unsigned int        i;
+    const char *p;
 
     str_array_init(&arg_collect);
 
     /* Now come the function arguments */
     while (*sym->current)
     {
+        p = sym->current;
+
         /* Decode each data type and append it to the argument list */
         if (*sym->current == '@')
         {
             sym->current++;
             break;
         }
-        if (!demangle_datatype(sym, &ct, pmt_ref, IN_ARGS))
+        if (!demangle_datatype(sym, &ct, IN_ARGS))
             return NULL;
         /* 'void' terminates an argument list in a function */
         if (z_term && !strcmp(ct.left, "void")) break;
@@ -277,6 +281,12 @@ static char* get_args(struct parsed_symbol* sym, struct array* pmt_ref, BOOL z_t
                             &arg_collect))
             return NULL;
         if (!strcmp(ct.left, "...")) break;
+        if (z_term && sym->current - p > 1 && sym->args.num < 20)
+        {
+            if (!str_array_push(sym, ct.left ? ct.left : "", -1, &sym->args) ||
+                    !str_array_push(sym, ct.right ? ct.right : "", -1, &sym->args))
+                return NULL;
+        }
     }
     /* Functions are always terminated by 'Z'. If we made it this far and
      * don't find it, we have incorrectly identified a data type.
@@ -385,7 +395,7 @@ static BOOL get_function_qualifier(struct parsed_symbol *sym, const char** quali
 }
 
 static BOOL get_qualified_type(struct datatype_t *ct, struct parsed_symbol* sym,
-                              struct array *pmt_ref, char qualif, enum datatype_flags flags)
+                               char qualif, enum datatype_flags flags)
 {
     struct datatype_t xdt1;
     struct datatype_t xdt2;
@@ -470,7 +480,7 @@ static BOOL get_qualified_type(struct datatype_t *ct, struct parsed_symbol* sym,
         }
 
         /* Recurse to get the referred-to type */
-        if (!demangle_datatype(sym, &sub_ct, pmt_ref, 0))
+        if (!demangle_datatype(sym, &sub_ct, 0))
             return FALSE;
         if (sub_ct.flags & DT_NO_LEADING_WS)
             ct->left++;
@@ -532,20 +542,20 @@ static char* get_template_name(struct parsed_symbol* sym)
     unsigned num_mark = sym->names.num;
     unsigned start_mark = sym->names.start;
     unsigned stack_mark = sym->stack.num;
-    struct array array_pmt;
+    unsigned args_mark = sym->args.num;
 
     sym->names.start = sym->names.num;
     if (!(name = get_literal_string(sym))) {
         sym->names.start = start_mark;
         return FALSE;
     }
-    str_array_init(&array_pmt);
-    args = get_args(sym, &array_pmt, FALSE, '<', '>');
+    args = get_args(sym, FALSE, '<', '>');
     if (args != NULL)
         name = str_printf(sym, "%s%s", name, args);
     sym->names.num = num_mark;
     sym->names.start = start_mark;
     sym->stack.num = stack_mark;
+    sym->args.num = args_mark;
     return name;
 }
 
@@ -777,18 +787,17 @@ struct function_signature
     const char*             arguments;
 };
 
-static BOOL get_function_signature(struct parsed_symbol* sym, struct array* pmt_ref,
-                                   struct function_signature* fs)
+static BOOL get_function_signature(struct parsed_symbol* sym, struct function_signature* fs)
 {
     unsigned mark = sym->stack.num;
 
     if (!get_calling_convention(*sym->current++,
                                 &fs->call_conv, &fs->exported,
                                 sym->flags & ~UNDNAME_NO_ALLOCATION_LANGUAGE) ||
-        !demangle_datatype(sym, &fs->return_ct, pmt_ref, FALSE))
+        !demangle_datatype(sym, &fs->return_ct, FALSE))
         return FALSE;
 
-    if (!(fs->arguments = get_args(sym, pmt_ref, TRUE, '(', ')')))
+    if (!(fs->arguments = get_args(sym, TRUE, '(', ')')))
         return FALSE;
     sym->stack.num = mark;
 
@@ -803,10 +812,9 @@ static BOOL get_function_signature(struct parsed_symbol* sym, struct array* pmt_
  * char** = (pointer to (pointer to (char)))
  */
 static BOOL demangle_datatype(struct parsed_symbol* sym, struct datatype_t* ct,
-                              struct array* pmt_ref, enum datatype_flags flags)
+                              enum datatype_flags flags)
 {
     char                dt;
-    BOOL                add_pmt = TRUE;
 
     assert(ct);
     ct->left = ct->right = NULL;
@@ -823,7 +831,6 @@ static BOOL demangle_datatype(struct parsed_symbol* sym, struct datatype_t* ct,
     case 'N': case 'O': case 'X': case 'Z':
         /* Simple data types */
         ct->left = get_simple_type(dt);
-        add_pmt = FALSE;
         break;
     case 'T': /* union */
     case 'U': /* struct */
@@ -859,17 +866,17 @@ static BOOL demangle_datatype(struct parsed_symbol* sym, struct datatype_t* ct,
         }
         else
         {
-            if (!get_qualified_type(ct, sym, pmt_ref, '?', flags)) goto done;
+            if (!get_qualified_type(ct, sym, '?', flags)) goto done;
         }
         break;
     case 'A': /* reference */
     case 'B': /* volatile reference */
-        if (!get_qualified_type(ct, sym, pmt_ref, dt, flags)) goto done;
+        if (!get_qualified_type(ct, sym, dt, flags)) goto done;
         break;
     case 'Q': /* const pointer */
     case 'R': /* volatile pointer */
     case 'S': /* const volatile pointer */
-        if (!get_qualified_type(ct, sym, pmt_ref, (flags & IN_ARGS) ? dt : 'P', flags)) goto done;
+        if (!get_qualified_type(ct, sym, (flags & IN_ARGS) ? dt : 'P', flags)) goto done;
         break;
     case 'P': /* Pointer */
         if (isdigit(*sym->current))
@@ -890,7 +897,7 @@ static BOOL demangle_datatype(struct parsed_symbol* sym, struct datatype_t* ct,
                     goto done;
                 if (!get_function_qualifier(sym, &function_qualifier))
                     goto done;
-                if (!get_function_signature(sym, pmt_ref, &fs))
+                if (!get_function_signature(sym, &fs))
                      goto done;
 
                 ct->left  = str_printf(sym, "%s%s (%s %s::*",
@@ -903,7 +910,7 @@ static BOOL demangle_datatype(struct parsed_symbol* sym, struct datatype_t* ct,
 
                 sym->current++;
 
-                if (!get_function_signature(sym, pmt_ref, &fs))
+                if (!get_function_signature(sym, &fs))
                      goto done;
 
                 ct->left  = str_printf(sym, "%s%s (%s*",
@@ -913,7 +920,7 @@ static BOOL demangle_datatype(struct parsed_symbol* sym, struct datatype_t* ct,
             }
             else goto done;
 	}
-	else if (!get_qualified_type(ct, sym, pmt_ref, 'P', flags)) goto done;
+	else if (!get_qualified_type(ct, sym, 'P', flags)) goto done;
         break;
     case 'W':
         if (*sym->current == '4')
@@ -933,11 +940,9 @@ static BOOL demangle_datatype(struct parsed_symbol* sym, struct datatype_t* ct,
     case '5': case '6': case '7': case '8': case '9':
         /* Referring back to previously parsed type */
         /* left and right are pushed as two separate strings */
-        if (!pmt_ref) goto done;
-        ct->left = str_array_get_ref(pmt_ref, (dt - '0') * 2);
-        ct->right = str_array_get_ref(pmt_ref, (dt - '0') * 2 + 1);
+        ct->left = str_array_get_ref(&sym->args, (dt - '0') * 2);
+        ct->right = str_array_get_ref(&sym->args, (dt - '0') * 2 + 1);
         if (!ct->left) goto done;
-        add_pmt = FALSE;
         break;
     case '$':
         switch (*sym->current++)
@@ -989,7 +994,7 @@ static BOOL demangle_datatype(struct parsed_symbol* sym, struct datatype_t* ct,
 
                     sym->current++;
 
-                    if (!get_function_signature(sym, pmt_ref, &fs))
+                    if (!get_function_signature(sym, &fs))
                         goto done;
                     ct->left = str_printf(sym, "%s%s %s%s",
                                           fs.return_ct.left, fs.return_ct.right, fs.call_conv, fs.arguments);
@@ -1016,7 +1021,7 @@ static BOOL demangle_datatype(struct parsed_symbol* sym, struct datatype_t* ct,
                         arr = str_printf(sym, "%s[%s]", arr, get_number(sym));
                 }
 
-                if (!demangle_datatype(sym, &sub_ct, pmt_ref, 0)) goto done;
+                if (!demangle_datatype(sym, &sub_ct, 0)) goto done;
 
                 if (arr)
                     ct->left = str_printf(sym, "%s %s", sub_ct.left, arr);
@@ -1031,13 +1036,13 @@ static BOOL demangle_datatype(struct parsed_symbol* sym, struct datatype_t* ct,
 
                 sym->current++;
                 if (!get_qualifier(sym, &xdt, NULL)) goto done;
-                if (!demangle_datatype(sym, ct, pmt_ref, flags)) goto done;
+                if (!demangle_datatype(sym, ct, flags)) goto done;
                 ct->left = str_printf(sym, "%s %s", ct->left, xdt.left);
             }
             else if (*sym->current == 'Q')
             {
                 sym->current++;
-                if (!get_qualified_type(ct, sym, pmt_ref, '$', flags)) goto done;
+                if (!get_qualified_type(ct, sym, '$', flags)) goto done;
             }
             break;
         }
@@ -1045,13 +1050,6 @@ static BOOL demangle_datatype(struct parsed_symbol* sym, struct datatype_t* ct,
     default :
         break;
     }
-    if (add_pmt && pmt_ref && (flags & IN_ARGS))
-    {
-        /* left and right are pushed as two separate strings */
-        if (!str_array_push(sym, ct->left ? ct->left : "", -1, pmt_ref) ||
-            !str_array_push(sym, ct->right ? ct->right : "", -1, pmt_ref))
-            return FALSE;
-    }
 done:
 
     return ct->left != NULL;
@@ -1106,12 +1104,9 @@ static BOOL handle_data(struct parsed_symbol* sym)
     case '3': case '4': case '5':
         {
             unsigned mark = sym->stack.num;
-            struct array pmt;
             const char* class;
 
-            str_array_init(&pmt);
-
-            if (!demangle_datatype(sym, &ct, &pmt, 0)) goto done;
+            if (!demangle_datatype(sym, &ct, 0)) goto done;
             if (!get_qualifier(sym, &xdt, &class)) goto done; /* class doesn't seem to be displayed */
             if (xdt.left && xdt.right) xdt.left = str_printf(sym, "%s %s", xdt.left, xdt.right);
             else if (!xdt.left) xdt.left = xdt.right;
@@ -1167,7 +1162,6 @@ static BOOL handle_method(struct parsed_symbol* sym, BOOL cast_op)
     const char*         name = NULL;
     BOOL                ret = FALSE, has_args = TRUE, has_ret = TRUE;
     unsigned            mark;
-    struct array        array_pmt;
 
     /* FIXME: why 2 possible letters for each option?
      * 'A' private:
@@ -1297,8 +1291,6 @@ static BOOL handle_method(struct parsed_symbol* sym, BOOL cast_op)
                                 sym->flags))
         goto done;
 
-    str_array_init(&array_pmt);
-
     /* Return type, or @ if 'void' */
     if (has_ret && *sym->current == '@')
     {
@@ -1308,7 +1300,7 @@ static BOOL handle_method(struct parsed_symbol* sym, BOOL cast_op)
     }
     else if (has_ret)
     {
-        if (!demangle_datatype(sym, &ct_ret, &array_pmt, cast_op ? WS_AFTER_QUAL_IF : 0))
+        if (!demangle_datatype(sym, &ct_ret, cast_op ? WS_AFTER_QUAL_IF : 0))
             goto done;
     }
     if (!has_ret || sym->flags & UNDNAME_NO_FUNCTION_RETURNS)
@@ -1320,7 +1312,7 @@ static BOOL handle_method(struct parsed_symbol* sym, BOOL cast_op)
     }
 
     mark = sym->stack.num;
-    if (has_args && !(args_str = get_args(sym, &array_pmt, TRUE, '(', ')'))) goto done;
+    if (has_args && !(args_str = get_args(sym, TRUE, '(', ')'))) goto done;
     if (sym->flags & UNDNAME_NAME_ONLY) args_str = function_qualifier = NULL;
     if (sym->flags & UNDNAME_NO_THISTYPE) function_qualifier = NULL;
     sym->stack.num = mark;
@@ -1357,7 +1349,7 @@ static BOOL symbol_demangle(struct parsed_symbol* sym)
     {
         struct datatype_t   ct;
 
-        if (demangle_datatype(sym, &ct, NULL, 0))
+        if (demangle_datatype(sym, &ct, 0))
         {
             sym->result = str_printf(sym, "%s%s", ct.left, ct.right);
             ret = TRUE;
@@ -1460,7 +1452,7 @@ static BOOL symbol_demangle(struct parsed_symbol* sym)
                         struct datatype_t       ct;
 
                         sym->current++;
-                        if (!demangle_datatype(sym, &ct, NULL, 0))
+                        if (!demangle_datatype(sym, &ct, 0))
                             goto done;
                         function_name = str_printf(sym, "%s%s `RTTI Type Descriptor'",
                                                    ct.left, ct.right);
@@ -1521,12 +1513,12 @@ static BOOL symbol_demangle(struct parsed_symbol* sym)
         sym->current++;
         if (in_template)
         {
+            unsigned args_mark = sym->args.num;
             const char *args;
-            struct array array_pmt;
 
-            str_array_init(&array_pmt);
-            args = get_args(sym, &array_pmt, FALSE, '<', '>');
+            args = get_args(sym, FALSE, '<', '>');
             if (args) function_name = function_name ? str_printf(sym, "%s%s", function_name, args) : args;
+            sym->args.num = args_mark;
             sym->names.num = 0;
         }
         if (!str_array_push(sym, function_name, -1, &sym->stack))

From 3825af604129e5403ad7104676e3275a2afe0e0d Mon Sep 17 00:00:00 2001
From: Alexandre Julliard <julliard@winehq.org>
Date: Thu, 1 Feb 2024 11:39:28 +0100
Subject: [PATCH] winedump: Make the ARM exception information more compact.

---
 tools/winedump/pe.c | 103 +++++++++++++++++---------------------------
 1 file changed, 39 insertions(+), 64 deletions(-)

diff --git a/tools/winedump/pe.c b/tools/winedump/pe.c
index c90a339e5ba8..4d60c130a4dd 100644
--- a/tools/winedump/pe.c
+++ b/tools/winedump/pe.c
@@ -985,7 +985,7 @@ static void dump_armnt_unwind_info( const struct runtime_function_armnt *fnc )
 {
     const struct unwind_info_armnt *info;
     const struct unwind_info_ext_armnt *infoex;
-    const struct unwind_info_epilogue_armnt *infoepi;
+    const struct unwind_info_epilogue_armnt *infoepi = NULL;
     unsigned int rva;
     WORD i, count = 0, words = 0;
 
@@ -993,18 +993,11 @@ static void dump_armnt_unwind_info( const struct runtime_function_armnt *fnc )
     {
         char intregs[32] = {0}, intregspop[32] = {0}, vfpregs[32] = {0};
         WORD pf = 0, ef = 0, fpoffset = 0, stack = fnc->StackAdjust;
+        const char *pfx = "    ...     ";
 
-        printf( "\nFunction %08x-%08x:\n", fnc->BeginAddress & ~1,
-                (fnc->BeginAddress & ~1) + fnc->FunctionLength * 2 );
-        printf( "    Flag           %x\n", fnc->Flag );
-        printf( "    FunctionLength %x\n", fnc->FunctionLength );
-        printf( "    Ret            %x\n", fnc->Ret );
-        printf( "    H              %x\n", fnc->H );
-        printf( "    Reg            %x\n", fnc->Reg );
-        printf( "    R              %x\n", fnc->R );
-        printf( "    L              %x\n", fnc->L );
-        printf( "    C              %x\n", fnc->C );
-        printf( "    StackAdjust    %x\n", fnc->StackAdjust );
+        printf( "\nFunction %08x-%08x: (flag=%u ret=%u H=%u reg=%u R=%u L=%u C=%u)\n",
+                fnc->BeginAddress & ~1, (fnc->BeginAddress & ~1) + fnc->FunctionLength * 2,
+                fnc->Flag, fnc->Ret, fnc->H, fnc->Reg, fnc->R, fnc->L, fnc->C );
 
         if (fnc->StackAdjust >= 0x03f4)
         {
@@ -1075,47 +1068,48 @@ static void dump_armnt_unwind_info( const struct runtime_function_armnt *fnc )
                 strcpy(vfpregs, "d8");
         }
 
+        printf( "  Prologue:\n" );
         if (fnc->Flag == 1) {
             if (fnc->H)
-                printf( "    Unwind Code\tpush {r0-r3}\n" );
+                printf( "%s push {r0-r3}\n", pfx );
 
             if (intregs[0])
-                printf( "    Unwind Code\tpush {%s}\n", intregs );
+                printf( "%s push {%s}\n", pfx, intregs );
 
             if (fnc->C && fpoffset == 0)
-                printf( "    Unwind Code\tmov r11, sp\n" );
+                printf( "%s mov r11, sp\n", pfx );
             else if (fnc->C)
-                printf( "    Unwind Code\tadd r11, sp, #%d\n", fpoffset * 4 );
+                printf( "%s add r11, sp, #%d\n", pfx, fpoffset * 4 );
 
             if (fnc->R && fnc->Reg != 0x07)
-                printf( "    Unwind Code\tvpush {%s}\n", vfpregs );
+                printf( "%s vpush {%s}\n", pfx, vfpregs );
 
             if (stack && !pf)
-                printf( "    Unwind Code\tsub sp, sp, #%d\n", stack * 4 );
+                printf( "%s sub sp, sp, #%d\n", pfx, stack * 4 );
         }
 
         if (fnc->Ret == 3)
             return;
-        printf( "Epilogue:\n" );
+        printf( "  Epilogue:\n" );
 
         if (stack && !ef)
-            printf( "    Unwind Code\tadd sp, sp, #%d\n", stack * 4 );
+            printf( "%s add sp, sp, #%d\n", pfx, stack * 4 );
 
         if (fnc->R && fnc->Reg != 0x07)
-            printf( "    Unwind Code\tvpop {%s}\n", vfpregs );
+            printf( "%s vpop {%s}\n", pfx, vfpregs );
 
         if (intregspop[0])
-            printf( "    Unwind Code\tpop {%s}\n", intregspop );
+            printf( "%s pop {%s}\n", pfx, intregspop );
 
         if (fnc->H && !(fnc->L && fnc->Ret == 0))
-            printf( "    Unwind Code\tadd sp, sp, #16\n" );
+            printf( "%s add sp, sp, #16\n", pfx );
         else if (fnc->H && (fnc->L && fnc->Ret == 0))
-            printf( "    Unwind Code\tldr pc, [sp], #20\n" );
+            printf( "%s ldr pc, [sp], #20\n", pfx );
 
         if (fnc->Ret == 1)
-            printf( "    Unwind Code\tbx <reg>\n" );
+            printf( "%s bx <reg>\n", pfx );
         else if (fnc->Ret == 2)
-            printf( "    Unwind Code\tb <address>\n" );
+            printf( "%s b <address>\n", pfx );
 
         return;
     }
@@ -1125,17 +1119,9 @@ static void dump_armnt_unwind_info( const struct runtime_function_armnt *fnc )
     count = info->count;
     words = info->words;
 
-    printf( "\nFunction %08x-%08x:\n", fnc->BeginAddress & ~1,
-            (fnc->BeginAddress & ~1) + info->function_length * 2 );
-    printf( "  unwind info at %08x\n", fnc->UnwindData );
-    printf( "    Flag           %x\n", fnc->Flag );
-    printf( "    FunctionLength %x\n", info->function_length );
-    printf( "    Version        %x\n", info->version );
-    printf( "    X              %x\n", info->x );
-    printf( "    E              %x\n", info->e );
-    printf( "    F              %x\n", info->f );
-    printf( "    Count          %x\n", count );
-    printf( "    Words          %x\n", words );
+    printf( "\nFunction %08x-%08x: (ver=%u X=%u E=%u F=%u)\n", fnc->BeginAddress & ~1,
+            (fnc->BeginAddress & ~1) + info->function_length * 2,
+            info->version, info->x, info->e, info->f );
 
     if (!info->count && !info->words)
     {
@@ -1143,26 +1129,13 @@ static void dump_armnt_unwind_info( const struct runtime_function_armnt *fnc )
         rva = rva + sizeof(*infoex);
         count = infoex->excount;
         words = infoex->exwords;
-        printf( "    ExtCount       %x\n", count );
-        printf( "    ExtWords       %x\n", words );
     }
 
-    if (!info->e)
+     if (!info->e)
     {
         infoepi = RVA( rva, count * sizeof(*infoepi) );
         rva = rva + count * sizeof(*infoepi);
-
-        for (i = 0; i < count; i++)
-        {
-            printf( "    Epilogue Scope %x\n", i );
-            printf( "      Offset       %x\n", infoepi[i].offset );
-            printf( "      Reserved     %x\n", infoepi[i].res );
-            printf( "      Condition    %x\n", infoepi[i].cond );
-            printf( "      Index        %x\n", infoepi[i].index );
-        }
     }
-    else
-        infoepi = NULL;
 
     if (words)
     {
@@ -1174,6 +1147,7 @@ static void dump_armnt_unwind_info( const struct runtime_function_armnt *fnc )
         rva = rva + words * sizeof(*codes);
         bytes = (BYTE*)codes;
 
+        printf( "  Prologue:\n" );
         for (b = 0; b < words * sizeof(*codes); b++)
         {
             BYTE code = bytes[b];
@@ -1181,7 +1155,7 @@ static void dump_armnt_unwind_info( const struct runtime_function_armnt *fnc )
 
             if (info->e && b == count)
             {
-                printf( "Epilogue:\n" );
+                printf( "  Epilogue:\n" );
                 inepilogue = TRUE;
             }
             else if (!info->e && infoepi)
@@ -1189,16 +1163,17 @@ static void dump_armnt_unwind_info( const struct runtime_function_armnt *fnc )
                 for (i = 0; i < count; i++)
                     if (b == infoepi[i].index)
                     {
-                        printf( "Epilogue from Scope %x at %08x:\n", i,
-                                (fnc->BeginAddress & ~1) + infoepi[i].offset * 2 );
+                        printf( "  Epilogue %u at %08x: (res=%x cond=%x)\n", i,
+                                (fnc->BeginAddress & ~1) + infoepi[i].offset * 2,
+                                infoepi[i].res, infoepi[i].cond );
                         inepilogue = TRUE;
                     }
             }
 
-            printf( "    Unwind Code");
+            printf( "   ");
             for (i = 0; i < len; i++)
                 printf( " %02x", bytes[b+i] );
-            printf( "\t" );
+            printf( " %*s", 3 * (3 - len), "" );
 
             if (code == 0x00)
                 printf( "\n" );
@@ -1232,16 +1207,16 @@ static void dump_armnt_unwind_info( const struct runtime_function_armnt *fnc )
                     printf( "mov sp, r%u\n", code & 0x0f );
                 else
                     printf( "mov r%u, sp\n", code & 0x0f );
+            else if (code <= 0xd3)
+                printf( "%s {r4-r%u}\n", inepilogue ? "pop" : "push", (code & 0x03) + 4 );
+            else if (code <= 0xd4)
+                printf( "%s {r4, %s}\n", inepilogue ? "pop" : "push", inepilogue ? "pc" : "lr" );
             else if (code <= 0xd7)
-                if (inepilogue)
-                    printf( "pop {r4-r%u%s}\n", (code & 0x03) + 4, (code & 0x04) ? ", pc" : "" );
-                else
-                    printf( "push {r4-r%u%s}\n", (code & 0x03) + 4, (code & 0x04) ? ", lr" : "" );
+                printf( "%s {r4-r%u, %s}\n", inepilogue ? "pop" : "push", (code & 0x03) + 4, inepilogue ? "pc" : "lr" );
+            else if (code <= 0xdb)
+                printf( "%s {r4-r%u}\n", inepilogue ? "pop" : "push", (code & 0x03) + 8 );
             else if (code <= 0xdf)
-                if (inepilogue)
-                    printf( "pop {r4-r%u%s}\n", (code & 0x03) + 8, (code & 0x04) ? ", pc" : "" );
-                else
-                    printf( "push {r4-r%u%s}\n", (code & 0x03) + 8, (code & 0x04) ? ", lr" : "" );
+                printf( "%s {r4-r%u, %s}\n", inepilogue ? "pop" : "push", (code & 0x03) + 8, inepilogue ? "pc" : "lr" );
             else if (code <= 0xe7)
                 printf( "%s {d8-d%u}\n", inepilogue ? "vpop" : "vpush", (code & 0x07) + 8 );
             else if (code <= 0xeb)

From a97b3f640cc4d0564774c7c6911d02c87fb5975f Mon Sep 17 00:00:00 2001
From: Alexandre Julliard <julliard@winehq.org>
Date: Thu, 1 Feb 2024 12:28:47 +0100
Subject: [PATCH] winedump: Handle ARM64 exception unwind info with flag==3.

---
 tools/winedump/pe.c | 12 +++++++++++-
 1 file changed, 11 insertions(+), 1 deletion(-)

diff --git a/tools/winedump/pe.c b/tools/winedump/pe.c
index 4d60c130a4dd..f405acb2710f 100644
--- a/tools/winedump/pe.c
+++ b/tools/winedump/pe.c
@@ -1645,11 +1645,14 @@ static void dump_arm64_unwind_info( const struct runtime_function_arm64 *func )
     const struct unwind_info_arm64 *info;
     const struct unwind_info_ext_arm64 *infoex;
     const struct unwind_info_epilog_arm64 *infoepi;
+    const struct runtime_function_arm64 *parent_func;
     const BYTE *ptr;
     unsigned int i, rva, codes, epilogs;
 
-    if (func->Flag)
+    switch (func->Flag)
     {
+    case 1:
+    case 2:
         printf( "\nFunction %08x-%08x:\n", func->BeginAddress,
                 func->BeginAddress + func->FunctionLength * 4 );
         printf( "    len=%#x flag=%x regF=%u regI=%u H=%u CR=%u frame=%x\n",
@@ -1657,6 +1660,13 @@ static void dump_arm64_unwind_info( const struct runtime_function_arm64 *func )
                 func->H, func->CR, func->FrameSize );
         dump_arm64_packed_info( func );
         return;
+    case 3:
+        rva = func->UnwindData & ~3;
+        parent_func = RVA( rva, sizeof(*parent_func) );
+        printf( "\nFunction %08x-%08x:\n", func->BeginAddress,
+                func->BeginAddress + 12 /* adrl x16, <dest>; br x16 */ );
+        printf( "    forward to parent %08x\n", parent_func->BeginAddress );
+        return;
     }
 
     rva = func->UnwindData;
From 7c4ca6ff74248b0dfd54be206e6a0e7b13c6ba8a Mon Sep 17 00:00:00 2001
From: Alexandre Julliard <julliard@winehq.org>
Date: Thu, 15 Feb 2024 15:08:55 +0100
Subject: [PATCH] winedump: Add dumping of the save_any_reg ARM64 unwind code.

---
 tools/winedump/pe.c | 30 +++++++++++++-----------------
 1 file changed, 13 insertions(+), 17 deletions(-)

diff --git a/tools/winedump/pe.c b/tools/winedump/pe.c
index f405acb2710f..1879dd0ce2a9 100644
--- a/tools/winedump/pe.c
+++ b/tools/winedump/pe.c
@@ -1395,7 +1395,7 @@ static const BYTE code_lengths[256] =
 /* 80 */ 1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
 /* a0 */ 1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
 /* c0 */ 2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,
-/* e0 */ 4,1,2,1,1,1,1,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1
+/* e0 */ 4,1,2,1,1,1,1,3,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1
 };
 
 static void dump_arm64_codes( const BYTE *ptr, unsigned int count )
@@ -1406,8 +1406,7 @@ static void dump_arm64_codes( const BYTE *ptr, unsigned int count )
     {
         BYTE len = code_lengths[ptr[i]];
         unsigned int val = ptr[i];
-        if (len == 2) val = ptr[i] * 0x100 + ptr[i+1];
-        else if (len == 4) val = ptr[i] * 0x1000000 + ptr[i+1] * 0x10000 + ptr[i+2] * 0x100 + ptr[i+3];
+        for (j = 1; j < len; j++) val = val * 0x100 + ptr[i + j];
 
         printf( "    %04x: ", i );
         for (j = 0; j < 4; j++)
@@ -1507,21 +1506,18 @@ static void dump_arm64_codes( const BYTE *ptr, unsigned int count )
         {
             printf( "save_next\n" );
         }
-        else if (ptr[i] == 0xe7)  /* arithmetic */
+        else if (ptr[i] == 0xe7)  /* save_any_reg */
         {
-            switch ((val >> 4) & 0x0f)
-            {
-            case 0: printf( "add lr,lr,x28\n" ); break;
-            case 1: printf( "add lr,lr,sp\n" ); break;
-            case 2: printf( "sub lr,lr,x28\n" ); break;
-            case 3: printf( "sub lr,lr,sp\n" ); break;
-            case 4: printf( "eor lr,lr,x28\n" ); break;
-            case 5: printf( "eor lr,lr,sp\n" ); break;
-            case 6: printf( "rol lr,lr,neg x28\n" ); break;
-            case 8: printf( "ror lr,lr,x28\n" ); break;
-            case 9: printf( "ror lr,lr,sp\n" ); break;
-            default:printf( "unknown op\n" ); break;
-            }
+            char reg = "xdq?"[(val >> 6) & 3];
+            int num = (val >> 8) & 0x1f;
+            if (val & 0x4000)
+                printf( "stp %c%u,%c%u", reg, num, reg, num + 1 );
+            else
+                printf( "str %c%u,", reg, num );
+            if (val & 0x2000)
+                printf( "[sp,#-%#x]!\n", 16 * (val & 0x3f) + 16 );
+            else
+                printf( "[sp,#%#x]\n", (val & 0x3f) * ((val & 0x4080) ? 16 : 8) );
         }
         else if (ptr[i] == 0xe8)  /* MSFT_OP_TRAP_FRAME */
         {

From 9119e3102b2477a93ab97ec900ec35495b5c9a7a Mon Sep 17 00:00:00 2001
From: Eric Pouech <epouech@codeweavers.com>
Date: Tue, 13 Feb 2024 08:58:37 +0100
Subject: [PATCH] winedump: Don't crash on non-effective runtime function
 entries.

MSVC generates zeroed out entries when EditAndContinue (aka HotPatch)
is enabled.

Signed-off-by: Eric Pouech <epouech@codeweavers.com>
---
 tools/winedump/pe.c | 5 +++++
 1 file changed, 5 insertions(+)

diff --git a/tools/winedump/pe.c b/tools/winedump/pe.c
index 1879dd0ce2a..1104072a2c2 100644
--- a/tools/winedump/pe.c
+++ b/tools/winedump/pe.c
@@ -863,6 +863,11 @@ static void dump_x86_64_unwind_info( const struct runtime_function_x86_64 *funct
     }
     info = RVA( function->UnwindData, sizeof(*info) );
 
+    if (!info)
+    {
+        printf( "  no unwind info (%x)\n", function->UnwindData );
+        return;
+    }
     printf( "  unwind info at %08x\n", function->UnwindData );
     if (info->version > 2)
     {
-- 
GitLab

From 7c6a50cc46893757d398a867421eaa7196eec1bf Mon Sep 17 00:00:00 2001
From: Daniel Lehman <dlehman25@gmail.com>
Date: Wed, 17 Jan 2024 21:29:59 -0800
Subject: [PATCH] include: Add some msvcrt declarations.

---
 include/msvcrt/corecrt_wctype.h  | 2 ++
 include/msvcrt/corecrt_wstdlib.h | 6 ++++++
 include/msvcrt/corecrt_wtime.h   | 1 +
 include/msvcrt/stdlib.h          | 1 +
 include/msvcrt/time.h            | 1 +
 include/msvcrt/wchar.h           | 1 +
 include/tchar.h                  | 5 +++++
 7 files changed, 17 insertions(+)

diff --git a/include/msvcrt/corecrt_wctype.h b/include/msvcrt/corecrt_wctype.h
index 9661ab5e596..26130aa4839 100644
--- a/include/msvcrt/corecrt_wctype.h
+++ b/include/msvcrt/corecrt_wctype.h
@@ -28,6 +28,7 @@ _ACRTIMP int     __cdecl _isleadbyte_l(int,_locale_t);
 _ACRTIMP int     __cdecl _iswalnum_l(wint_t,_locale_t);
 _ACRTIMP int     __cdecl _iswalpha_l(wint_t,_locale_t);
 _ACRTIMP int     __cdecl _iswblank_l(wint_t,_locale_t);
+_ACRTIMP int     __cdecl _iswcntrl_l(wint_t,_locale_t);
 _ACRTIMP int     __cdecl _iswctype_l(wint_t,wctype_t,_locale_t);
 _ACRTIMP int     __cdecl _iswdigit_l(wint_t,_locale_t);
 _ACRTIMP int     __cdecl _iswgraph_l(wint_t,_locale_t);
@@ -36,6 +37,7 @@ _ACRTIMP int     __cdecl _iswprint_l(wint_t,_locale_t);
 _ACRTIMP int     __cdecl _iswpunct_l(wint_t,_locale_t);
 _ACRTIMP int     __cdecl _iswspace_l(wint_t,_locale_t);
 _ACRTIMP int     __cdecl _iswupper_l(wint_t,_locale_t);
+_ACRTIMP int     __cdecl _iswxdigit_l(wint_t,_locale_t);
 _ACRTIMP wint_t  __cdecl _towlower_l(wint_t,_locale_t);
 _ACRTIMP wint_t  __cdecl _towupper_l(wint_t,_locale_t);
 _ACRTIMP int     __cdecl is_wctype(wint_t,wctype_t);
diff --git a/include/msvcrt/corecrt_wstdlib.h b/include/msvcrt/corecrt_wstdlib.h
index e37da1848ac..f6c68bb937a 100644
--- a/include/msvcrt/corecrt_wstdlib.h
+++ b/include/msvcrt/corecrt_wstdlib.h
@@ -46,6 +46,7 @@ _ACRTIMP errno_t       __cdecl _mbstowcs_s_l(size_t*,wchar_t*,size_t,const char*
 _ACRTIMP int           __cdecl mbtowc(wchar_t*,const char*,size_t);
 _ACRTIMP int           __cdecl _mbtowc_l(wchar_t*,const char*,size_t,_locale_t);
 _ACRTIMP float         __cdecl wcstof(const wchar_t*,wchar_t**);
+_ACRTIMP float         __cdecl _wcstof_l(const wchar_t*,wchar_t**,_locale_t);
 _ACRTIMP double        __cdecl wcstod(const wchar_t*,wchar_t**);
 _ACRTIMP __msvcrt_long __cdecl wcstol(const wchar_t*,wchar_t**,int);
 _ACRTIMP size_t        __cdecl wcstombs(char*,const wchar_t*,size_t);
@@ -63,6 +64,11 @@ _ACRTIMP __int64       __cdecl _wcstoll_l(const wchar_t*,wchar_t**,int,_locale_t
 _ACRTIMP unsigned __int64 __cdecl wcstoull(const wchar_t*,wchar_t**,int);
 _ACRTIMP unsigned __int64 __cdecl _wcstoull_l(const wchar_t*,wchar_t**,int,_locale_t);
 
+#ifdef _UCRT
+_ACRTIMP double __cdecl _wcstold_l(const wchar_t*,wchar_t**,_locale_t);
+static inline long double wcstold(const wchar_t *string, wchar_t **endptr) { return _wcstold_l(string, endptr, NULL); }
+#endif /* _UCRT */
+
 #ifdef __cplusplus
 extern "C++" {
 
diff --git a/include/msvcrt/corecrt_wtime.h b/include/msvcrt/corecrt_wtime.h
index 9d96f1a171c..c05602d2156 100644
--- a/include/msvcrt/corecrt_wtime.h
+++ b/include/msvcrt/corecrt_wtime.h
@@ -30,6 +30,7 @@ extern "C" {
 
 _ACRTIMP wchar_t* __cdecl _wasctime(const struct tm*);
 _ACRTIMP size_t   __cdecl wcsftime(wchar_t*,size_t,const wchar_t*,const struct tm*);
+_ACRTIMP size_t   __cdecl _wcsftime_l(wchar_t*,size_t,const wchar_t*,const struct tm*,_locale_t);
 _ACRTIMP wchar_t* __cdecl _wctime32(const __time32_t*);
 _ACRTIMP wchar_t* __cdecl _wctime64(const __time64_t*);
 _ACRTIMP wchar_t* __cdecl _wstrdate(wchar_t*);
diff --git a/include/msvcrt/stdlib.h b/include/msvcrt/stdlib.h
index b7ced413440..f1ffcd8c035 100644
--- a/include/msvcrt/stdlib.h
+++ b/include/msvcrt/stdlib.h
@@ -225,6 +225,7 @@ _ACRTIMP int           __cdecl rand(void);
 _ACRTIMP errno_t       __cdecl rand_s(unsigned int*);
 _ACRTIMP void          __cdecl srand(unsigned int);
 _ACRTIMP float         __cdecl strtof(const char*,char**);
+_ACRTIMP float         __cdecl _strtof_l(const char*,char**,_locale_t);
 _ACRTIMP double        __cdecl strtod(const char*,char**);
 _ACRTIMP __msvcrt_long __cdecl strtol(const char*,char**,int);
 _ACRTIMP __msvcrt_ulong __cdecl strtoul(const char*,char**,int);
diff --git a/include/msvcrt/time.h b/include/msvcrt/time.h
index 4d79d066184..42e2fc4b1e2 100644
--- a/include/msvcrt/time.h
+++ b/include/msvcrt/time.h
@@ -91,6 +91,7 @@ _ACRTIMP errno_t     __cdecl _localtime64_s(struct tm*, const __time64_t*);
 _ACRTIMP __time32_t  __cdecl _mktime32(struct tm*);
 _ACRTIMP __time64_t  __cdecl _mktime64(struct tm*);
 _ACRTIMP size_t      __cdecl strftime(char*,size_t,const char*,const struct tm*);
+_ACRTIMP size_t      __cdecl _strftime_l(char*,size_t,const char*,const struct tm*,_locale_t);
 _ACRTIMP __time32_t  __cdecl _time32(__time32_t*);
 _ACRTIMP __time64_t  __cdecl _time64(__time64_t*);
 
diff --git a/include/msvcrt/wchar.h b/include/msvcrt/wchar.h
index cb82a08692a..4ca189bd2c7 100644
--- a/include/msvcrt/wchar.h
+++ b/include/msvcrt/wchar.h
@@ -39,6 +39,7 @@ size_t  __cdecl mbrlen(const char *,size_t,mbstate_t*);
 size_t  __cdecl mbrtowc(wchar_t*,const char*,size_t,mbstate_t*);
 size_t  __cdecl mbsrtowcs(wchar_t*,const char**,size_t,mbstate_t*);
 size_t  __cdecl wcrtomb(char*,wchar_t,mbstate_t*);
+int     __cdecl wcrtomb_s(size_t*,char*,size_t,wchar_t,mbstate_t*);
 size_t  __cdecl wcsrtombs(char*,const wchar_t**,size_t,mbstate_t*);
 int     __cdecl wctob(wint_t);
 
diff --git a/include/tchar.h b/include/tchar.h
index a51bd5b359f..bbf85973b41 100644
--- a/include/tchar.h
+++ b/include/tchar.h
@@ -115,6 +115,7 @@ extern "C" {
 #define _tcsdec       WINE_tchar_routine(_strdec,         _mbsdec,     _wcsdec)
 #define _tcsdup       WINE_tchar_routine(strdup,          _mbsdup,     _wcsdup)
 #define _tcsftime     WINE_tchar_routine(strftime,        strftime,    wcsftime)
+#define _tcsftime_l   WINE_tchar_routine(_strftime_l,     _strftime_l, _wcsftime_l)
 #define _tcsicmp      WINE_tchar_routine(strcasecmp,      _mbsicmp,    _wcsicmp)
 #define _tcsicoll     WINE_tchar_routine(_stricoll,       _stricoll,   _wcsicoll)
 #define _tcsinc       WINE_tchar_routine(_strinc,         _mbsinc,     _wcsinc)
@@ -148,8 +149,12 @@ extern "C" {
 #define _tcsspn       WINE_tchar_routine(strspn,          _mbsspn,     wcsspn)
 #define _tcsstr       WINE_tchar_routine(strstr,          _mbsstr,     wcsstr)
 #define _tcstod       WINE_tchar_routine(strtod,          strtod,      wcstod)
+#define _tcstof       WINE_tchar_routine(strtof,          strtof,      wcstof)
+#define _tcstof_l     WINE_tchar_routine(_strtof_l,       _strtof_l,   _wcstof_l)
 #define _tcstok       WINE_tchar_routine(strtok,          _mbstok,     _wcstok)
 #define _tcstol       WINE_tchar_routine(strtol,          strtol,      wcstol)
+#define _tcstold      WINE_tchar_routine(strtold,         strtold,     wcstold)
+#define _tcstold_l    WINE_tchar_routine(_strtold_l,      _strtold_l,  _wcstold_l)
 #define _tcstoll      WINE_tchar_routine(strtoll,         strtoll,     wcstoll)
 #define _tcstoll_l    WINE_tchar_routine(_strtoll_l,      _strtoll_l,  _wcstoll_l)
 #define _tcstoul      WINE_tchar_routine(strtoul,         strtoul,     wcstoul)
-- 
GitLab

From 588db48be52972bc02370bdf379e777ab22e5126 Mon Sep 17 00:00:00 2001
From: Daniel Lehman <dlehman25@gmail.com>
Date: Wed, 14 Feb 2024 21:56:38 -0800
Subject: [PATCH 1/2] msvcrt: Use string sort for strncoll/wcsncoll.

---
 dlls/msvcrt/string.c       | 2 +-
 dlls/msvcrt/tests/string.c | 6 ++++++
 dlls/msvcrt/wcs.c          | 2 +-
 3 files changed, 8 insertions(+), 2 deletions(-)

diff --git a/dlls/msvcrt/string.c b/dlls/msvcrt/string.c
index ad57ecc8cda..e6323da3b01 100644
--- a/dlls/msvcrt/string.c
+++ b/dlls/msvcrt/string.c
@@ -1213,7 +1213,7 @@ int CDECL _strncoll_l( const char* str1, const char* str2, size_t count, _locale
 
     if(!locinfo->lc_handle[LC_COLLATE])
         return strncmp(str1, str2, count);
-    return CompareStringA(locinfo->lc_handle[LC_COLLATE], 0,
+    return CompareStringA(locinfo->lc_handle[LC_COLLATE], SORT_STRINGSORT,
               str1, strnlen(str1, count),
               str2, strnlen(str2, count))-CSTR_EQUAL;
 }
diff --git a/dlls/msvcrt/tests/string.c b/dlls/msvcrt/tests/string.c
index 34338fd4a39..3c43d2a78b4 100644
--- a/dlls/msvcrt/tests/string.c
+++ b/dlls/msvcrt/tests/string.c
@@ -4154,6 +4154,9 @@ static void test__tcsncoll(void)
         { "English", "ABCe", "ABCf",  3,  0 },
         { "English", "abcd", "ABCD", 10, -1 },
 
+        { "English", "AB D", "AB-D",  4,  1 },
+        { "English", "AB D", "AB'D",  4,  1 },
+
         { "C",       "ABCD", "ABCD",  4,  0 },
         { "C",       "ABCD", "ABCD", 10,  0 },
 
@@ -4165,6 +4168,9 @@ static void test__tcsncoll(void)
 
         { "C",       "ABCe", "ABCf",  3,  0 },
         { "C",       "abcd", "ABCD", 10,  1 },
+
+        { "C",       "AB D", "AB-D",  4,  -1 },
+        { "C",       "AB D", "AB'D",  4,  -1 },
     };
     WCHAR str1W[16];
     WCHAR str2W[16];
diff --git a/dlls/msvcrt/wcs.c b/dlls/msvcrt/wcs.c
index 60a15dfc29c..af684e6be2e 100644
--- a/dlls/msvcrt/wcs.c
+++ b/dlls/msvcrt/wcs.c
@@ -538,7 +538,7 @@ int CDECL _wcsncoll_l(const wchar_t* str1, const wchar_t* str2,
 
     if(!locinfo->lc_handle[LC_COLLATE])
         return wcsncmp(str1, str2, count);
-    return CompareStringW(locinfo->lc_handle[LC_COLLATE], 0,
+    return CompareStringW(locinfo->lc_handle[LC_COLLATE], SORT_STRINGSORT,
               str1, wcsnlen(str1, count),
               str2, wcsnlen(str2, count))-CSTR_EQUAL;
 }
-- 
GitLab


From 6a6263c8bd0a3bc6f48b1c8e039ef0eb42030da9 Mon Sep 17 00:00:00 2001
From: Daniel Lehman <dlehman25@gmail.com>
Date: Sun, 18 Feb 2024 08:56:05 -0800
Subject: [PATCH 2/2] msvcrt/tests: Include locale in ok message.

---
 dlls/msvcrt/tests/string.c | 18 ++++++++++++------
 1 file changed, 12 insertions(+), 6 deletions(-)

diff --git a/dlls/msvcrt/tests/string.c b/dlls/msvcrt/tests/string.c
index 3c43d2a78b4..a14e95704f3 100644
--- a/dlls/msvcrt/tests/string.c
+++ b/dlls/msvcrt/tests/string.c
@@ -4197,11 +4197,14 @@ static void test__tcsncoll(void)
 
         ret = _strncoll(str1, str2, tests[i].count);
         if (!tests[i].exp)
-            ok(!ret, "expected 0, got %d for %s, %s, %d\n", ret, str1, str2, (int)tests[i].count);
+            ok(!ret, "expected 0, got %d for %s, %s, %d for locale %s\n",
+               ret, str1, str2, (int)tests[i].count, tests[i].locale);
         else if (tests[i].exp < 0)
-            ok(ret < 0, "expected < 0, got %d for %s, %s, %d\n", ret, str1, str2, (int)tests[i].count);
+            ok(ret < 0, "expected < 0, got %d for %s, %s, %d for locale %s\n",
+               ret, str1, str2, (int)tests[i].count, tests[i].locale);
         else
-            ok(ret > 0, "expected > 0, got %d for %s, %s, %d\n", ret, str1, str2, (int)tests[i].count);
+            ok(ret > 0, "expected > 0, got %d for %s, %s, %d for locale %s\n",
+               ret, str1, str2, (int)tests[i].count, tests[i].locale);
 
         memset(str1W, 0xee, sizeof(str1W));
         len = mbstowcs(str1W, str1, ARRAY_SIZE(str1W));
@@ -4213,11 +4216,14 @@ static void test__tcsncoll(void)
 
         ret = _wcsncoll(str1W, str2W, tests[i].count);
         if (!tests[i].exp)
-            ok(!ret, "expected 0, got %d for %s, %s, %d\n", ret, str1, str2, (int)tests[i].count);
+            ok(!ret, "expected 0, got %d for %s, %s, %d for locale %s\n",
+               ret, str1, str2, (int)tests[i].count, tests[i].locale);
         else if (tests[i].exp < 0)
-            ok(ret < 0, "expected < 0, got %d for %s, %s, %d\n", ret, str1, str2, (int)tests[i].count);
+            ok(ret < 0, "expected < 0, got %d for %s, %s, %d for locale %s\n",
+               ret, str1, str2, (int)tests[i].count, tests[i].locale);
         else
-            ok(ret > 0, "expected > 0, got %d for %s, %s, %d\n", ret, str1, str2, (int)tests[i].count);
+            ok(ret > 0, "expected > 0, got %d for %s, %s, %d for locale %s\n",
+               ret, str1, str2, (int)tests[i].count, tests[i].locale);
     }
 }
 
-- 
GitLab

From dee3be21a3d4ad0ce12e5fae521f3d5370a84db6 Mon Sep 17 00:00:00 2001
From: Eric Pouech <epouech@codeweavers.com>
Date: Tue, 12 Dec 2023 08:14:20 +0100
Subject: [PATCH 1/2] winedump: Don't expect a fixed number of substreams in
 DBI header (PDB).

Signed-off-by: Eric Pouech <epouech@codeweavers.com>
---
 include/wine/mscvpdb.h |  8 +++++
 tools/winedump/pdb.c   | 73 ++++++++++++------------------------------
 2 files changed, 29 insertions(+), 52 deletions(-)

diff --git a/include/wine/mscvpdb.h b/include/wine/mscvpdb.h
index 3502e0faed0..c0f9c70a4e1 100644
--- a/include/wine/mscvpdb.h
+++ b/include/wine/mscvpdb.h
@@ -2568,6 +2568,14 @@ typedef struct _PDB_SYMBOLS
     unsigned int   resvd4;
 } PDB_SYMBOLS, *PPDB_SYMBOLS;
 
+/* FIXME other entries are unknown */
+enum PDB_STREAM_INDEX
+{
+    PDB_SIDX_FPO,
+    PDB_SIDX_SECTIONS = 5,
+    PDB_SIDX_FPOEXT = 9
+};
+
 typedef struct
 {
     unsigned short FPO;
diff --git a/tools/winedump/pdb.c b/tools/winedump/pdb.c
index c028f2df2b6..dc59695a826 100644
--- a/tools/winedump/pdb.c
+++ b/tools/winedump/pdb.c
@@ -489,10 +489,8 @@ static void pdb_dump_symbols(struct pdb_reader* reader)
     unsigned char*      modimage;
     const char*         file;
     char                tcver[32];
-    PDB_STREAM_INDEXES  sidx;
-
-    sidx.FPO = sidx.unk0 = sidx.unk1 = sidx.unk2 = sidx.unk3 = sidx.sections_stream =
-        sidx.unk4 = sidx.unk5 = sidx.unk6 = sidx.FPO_EXT = sidx.unk7 = -1;
+    const unsigned short* sub_streams = NULL;
+    unsigned            num_sub_streams = 0;
 
     symbols = reader->read_stream(reader, 3);
     if (!symbols) return;
@@ -736,52 +734,20 @@ static void pdb_dump_symbols(struct pdb_reader* reader)
     }
     if (symbols->stream_index_size && globals_dump_sect("image"))
     {
+        const char* sub_stream_names[] = {"FPO", NULL, NULL, NULL, NULL, "Sections stream", NULL, NULL, NULL, "FPO-ext"};
+        int i;
+
         printf("\t------------stream indexes--------------\n");
-        switch (symbols->stream_index_size)
+        num_sub_streams = symbols->stream_index_size / sizeof(sub_streams[0]);
+        sub_streams = (const unsigned short*)((const char*)symbols + sizeof(PDB_SYMBOLS) + symbols->module_size +
+                                              symbols->sectcontrib_size + symbols->segmap_size + symbols->srcmodule_size +
+                                              symbols->pdbimport_size + symbols->unknown2_size);
+        for (i = 0; i < num_sub_streams; i++)
         {
-        case sizeof(PDB_STREAM_INDEXES_OLD):
-            /* PDB_STREAM_INDEXES is a superset of PDB_STREAM_INDEX_OLD
-             * FIXME: to be confirmed when all fields are fully understood
-             */
-            memcpy(&sidx,
-                   (const char*)symbols + sizeof(PDB_SYMBOLS) + symbols->module_size +
-                   symbols->sectcontrib_size + symbols->segmap_size + symbols->srcmodule_size +
-                   symbols->pdbimport_size + symbols->unknown2_size,
-                   sizeof(PDB_STREAM_INDEXES_OLD));
-            printf("\tFPO:                  %04x\n"
-                   "\t?:                    %04x\n"
-                   "\t?:                    %04x\n"
-                   "\t?:                    %04x\n"
-                   "\t?:                    %04x\n"
-                   "\tSections stream:      %04x\n",
-                   sidx.FPO, sidx.unk0, sidx.unk1, sidx.unk2, sidx.unk3,
-                   sidx.sections_stream);
-            break;
-        case sizeof(PDB_STREAM_INDEXES):
-        case sizeof(PDB_STREAM_INDEXES) + 2:
-            memcpy(&sidx,
-                   (const char*)symbols + sizeof(PDB_SYMBOLS) + symbols->module_size +
-                   symbols->sectcontrib_size + symbols->segmap_size + symbols->srcmodule_size +
-                   symbols->pdbimport_size + symbols->unknown2_size,
-                   sizeof(sidx));
-            printf("\tFPO:                  %04x\n"
-                   "\t?:                    %04x\n"
-                   "\t?:                    %04x\n"
-                   "\t?:                    %04x\n"
-                   "\t?:                    %04x\n"
-                   "\tSection stream:       %04x\n"
-                   "\t?:                    %04x\n"
-                   "\t?:                    %04x\n"
-                   "\t?:                    %04x\n"
-                   "\tFPO-ext:              %04x\n"
-                   "\t?:                    %04x\n",
-                   sidx.FPO, sidx.unk0, sidx.unk1, sidx.unk2, sidx.unk3,
-                   sidx.sections_stream, sidx.unk4, sidx.unk5, sidx.unk6, sidx.FPO_EXT,
-                   sidx.unk7);
-            break;
-        default:
-            printf("unexpected size for stream index %d\n", symbols->stream_index_size);
-            break;
+            const char* name = "?";
+            if (i < ARRAY_SIZE(sub_stream_names) && sub_stream_names[i])
+                name = sub_stream_names[i];
+            printf("\t%s:%.*s%04x\n", name, (int)(21 - strlen(name)), "", sub_streams[i]);
         }
     }
 
@@ -835,11 +801,14 @@ static void pdb_dump_symbols(struct pdb_reader* reader)
     dump_global_symbol(reader, symbols->global_hash_stream);
     dump_public_symbol(reader, symbols->public_stream);
 
-    if (globals_dump_sect("image"))
+    if (sub_streams && globals_dump_sect("image"))
     {
-        pdb_dump_fpo(reader, sidx.FPO);
-        pdb_dump_fpo_ext(reader, sidx.FPO_EXT);
-        pdb_dump_sections(reader, sidx.sections_stream);
+        if (PDB_SIDX_FPO < num_sub_streams)
+            pdb_dump_fpo(reader, sub_streams[PDB_SIDX_FPO]);
+        if (PDB_SIDX_FPOEXT < num_sub_streams)
+            pdb_dump_fpo_ext(reader, sub_streams[PDB_SIDX_FPOEXT]);
+        if (PDB_SIDX_SECTIONS < num_sub_streams)
+            pdb_dump_sections(reader, sub_streams[PDB_SIDX_SECTIONS]);
     }
 
     free(symbols);
-- 
GitLab
tch
From 188d880493da37533adcdaa6cac7487766dd204f Mon Sep 17 00:00:00 2001
From: Daniel Lehman <dlehman25@gmail.com>
Date: Sun, 18 Feb 2024 09:04:51 -0800
Subject: [PATCH 1/2] msvcrt/tests: Add tests for strcoll/wcscoll.

---
 dlls/msvcrt/tests/string.c | 84 ++++++++++++++++++++++++++++++++++++++
 1 file changed, 84 insertions(+)

diff --git a/dlls/msvcrt/tests/string.c b/dlls/msvcrt/tests/string.c
index a14e95704f3..24902d96f27 100644
--- a/dlls/msvcrt/tests/string.c
+++ b/dlls/msvcrt/tests/string.c
@@ -4227,6 +4227,89 @@ static void test__tcsncoll(void)
     }
 }
 
+static void test__tcscoll(void)
+{
+    struct test {
+        const char *locale;
+        const char *str1;
+        const char *str2;
+        int exp;
+        BOOL todo;
+    };
+    static const struct test tests[] = {
+        { "English", "ABCD", "ABCD",  0 },
+        { "English", "ABC",  "ABCD", -1 },
+        { "English", "ABCD",  "ABC",  1 },
+        { "English", "ABCe", "ABCf", -1 },
+        { "English", "abcd", "ABCD", -1 },
+        { "English", "AB D", "AB-D",  1, TRUE },
+        { "English", "AB D", "AB'D",  1, TRUE },
+
+        { "C",       "ABCD", "ABCD",  0 },
+        { "C",       "ABC",  "ABCD", -1 },
+        { "C",       "ABCD",  "ABC",  1 },
+        { "C",       "ABCe", "ABCf", -1 },
+        { "C",       "abcd", "ABCD",  1 },
+        { "C",       "AB D", "AB-D", -1 },
+        { "C",       "AB D", "AB'D", -1 },
+    };
+    WCHAR str1W[16];
+    WCHAR str2W[16];
+    char str1[16];
+    char str2[16];
+    size_t len;
+    int i, ret;
+
+    for (i = 0; i < ARRAY_SIZE(tests); i++)
+    {
+        if (!setlocale(LC_ALL, tests[i].locale))
+        {
+            win_skip("%s locale _tcsncoll tests\n", tests[i].locale);
+            for (; i+1 < ARRAY_SIZE(tests); i++)
+                if (strcmp(tests[i].locale, tests[i+1].locale)) break;
+            continue;
+        }
+
+        memset(str1, 0xee, sizeof(str1));
+        strcpy(str1, tests[i].str1);
+
+        memset(str2, 0xff, sizeof(str2));
+        strcpy(str2, tests[i].str2);
+
+        ret = strcoll(str1, str2);
+        if (!tests[i].exp)
+            ok(!ret, "expected 0, got %d for %s, %s for locale %s\n",
+               ret, str1, str2, tests[i].locale);
+        else if (tests[i].exp < 0)
+            ok(ret < 0, "expected < 0, got %d for %s, %s for locale %s\n",
+               ret, str1, str2, tests[i].locale);
+        else
+            todo_wine_if(tests[i].todo)
+            ok(ret > 0, "expected > 0, got %d for %s, %s for locale %s\n",
+               ret, str1, str2, tests[i].locale);
+
+        memset(str1W, 0xee, sizeof(str1W));
+        len = mbstowcs(str1W, str1, ARRAY_SIZE(str1W));
+        str1W[len] = 0;
+
+        memset(str2W, 0xff, sizeof(str2W));
+        len = mbstowcs(str2W, str2, ARRAY_SIZE(str2W));
+        str2W[len] = 0;
+
+        ret = wcscoll(str1W, str2W);
+        if (!tests[i].exp)
+            ok(!ret, "expected 0, got %d for %s, %s for locale %s\n",
+               ret, str1, str2, tests[i].locale);
+        else if (tests[i].exp < 0)
+            ok(ret < 0, "expected < 0, got %d for %s, %s for locale %s\n",
+               ret, str1, str2, tests[i].locale);
+        else
+            todo_wine_if(tests[i].todo)
+            ok(ret > 0, "expected > 0, got %d for %s, %s for locale %s\n",
+               ret, str1, str2, tests[i].locale);
+    }
+}
+
 static void test__tcsnicoll(void)
 {
     struct test {
@@ -4854,6 +4937,7 @@ START_TEST(string)
     test__memicmp_l();
     test__strupr();
     test__tcsncoll();
+    test__tcscoll();
     test__tcsnicoll();
     test___strncnt();
     test_C_locale();
-- 
GitLab


From fb5302c29b8185e5d09941d5b022344b221bb0ed Mon Sep 17 00:00:00 2001
From: Daniel Lehman <dlehman25@gmail.com>
Date: Sun, 18 Feb 2024 09:09:10 -0800
Subject: [PATCH 2/2] msvcrt: Use string sort for strcoll/wcscoll.

---
 dlls/msvcrt/string.c       | 3 ++-
 dlls/msvcrt/tests/string.c | 7 ++-----
 dlls/msvcrt/wcs.c          | 3 ++-
 3 files changed, 6 insertions(+), 7 deletions(-)

diff --git a/dlls/msvcrt/string.c b/dlls/msvcrt/string.c
index e6323da3b01..7f7959e81e6 100644
--- a/dlls/msvcrt/string.c
+++ b/dlls/msvcrt/string.c
@@ -1162,7 +1162,8 @@ int CDECL _strcoll_l( const char* str1, const char* str2, _locale_t locale )
 
     if(!locinfo->lc_handle[LC_COLLATE])
         return strcmp(str1, str2);
-    return CompareStringA(locinfo->lc_handle[LC_COLLATE], 0, str1, -1, str2, -1)-CSTR_EQUAL;
+    return CompareStringA(locinfo->lc_handle[LC_COLLATE], SORT_STRINGSORT,
+              str1, -1, str2, -1)-CSTR_EQUAL;
 }
 
 /*********************************************************************
diff --git a/dlls/msvcrt/tests/string.c b/dlls/msvcrt/tests/string.c
index 24902d96f27..23f4205e785 100644
--- a/dlls/msvcrt/tests/string.c
+++ b/dlls/msvcrt/tests/string.c
@@ -4234,7 +4234,6 @@ static void test__tcscoll(void)
         const char *str1;
         const char *str2;
         int exp;
-        BOOL todo;
     };
     static const struct test tests[] = {
         { "English", "ABCD", "ABCD",  0 },
@@ -4242,8 +4241,8 @@ static void test__tcscoll(void)
         { "English", "ABCD",  "ABC",  1 },
         { "English", "ABCe", "ABCf", -1 },
         { "English", "abcd", "ABCD", -1 },
-        { "English", "AB D", "AB-D",  1, TRUE },
-        { "English", "AB D", "AB'D",  1, TRUE },
+        { "English", "AB D", "AB-D",  1 },
+        { "English", "AB D", "AB'D",  1 },
 
         { "C",       "ABCD", "ABCD",  0 },
         { "C",       "ABC",  "ABCD", -1 },
@@ -4284,7 +4283,6 @@ static void test__tcscoll(void)
             ok(ret < 0, "expected < 0, got %d for %s, %s for locale %s\n",
                ret, str1, str2, tests[i].locale);
         else
-            todo_wine_if(tests[i].todo)
             ok(ret > 0, "expected > 0, got %d for %s, %s for locale %s\n",
                ret, str1, str2, tests[i].locale);
 
@@ -4304,7 +4302,6 @@ static void test__tcscoll(void)
             ok(ret < 0, "expected < 0, got %d for %s, %s for locale %s\n",
                ret, str1, str2, tests[i].locale);
         else
-            todo_wine_if(tests[i].todo)
             ok(ret > 0, "expected > 0, got %d for %s, %s for locale %s\n",
                ret, str1, str2, tests[i].locale);
     }
diff --git a/dlls/msvcrt/wcs.c b/dlls/msvcrt/wcs.c
index af684e6be2e..1b7bc3e54e0 100644
--- a/dlls/msvcrt/wcs.c
+++ b/dlls/msvcrt/wcs.c
@@ -1994,7 +1994,8 @@ int CDECL _wcscoll_l(const wchar_t* str1, const wchar_t* str2, _locale_t locale)
 
     if(!locinfo->lc_handle[LC_COLLATE])
         return wcscmp(str1, str2);
-    return CompareStringW(locinfo->lc_handle[LC_COLLATE], 0, str1, -1, str2, -1)-CSTR_EQUAL;
+    return CompareStringW(locinfo->lc_handle[LC_COLLATE], SORT_STRINGSORT,
+              str1, -1, str2, -1)-CSTR_EQUAL;
 }
 
 /*********************************************************************
-- 
GitLab

From 4860be474792fb6a66abb5b73619bc0074e39a09 Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?Aida=20Jonikien=C4=97?= <aidas957@gmail.com>
Date: Thu, 7 Mar 2024 12:20:50 +0200
Subject: [PATCH] msvcrt: Handle wide specifiers option in
 __stdio_common_vfscanf().

This prevents log spam in one game.
---
 dlls/msvcrt/scanf.c | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

diff --git a/dlls/msvcrt/scanf.c b/dlls/msvcrt/scanf.c
index 89575101471..c8bbe15f373 100644
--- a/dlls/msvcrt/scanf.c
+++ b/dlls/msvcrt/scanf.c
@@ -710,7 +710,7 @@ int CDECL __stdio_common_vfscanf(unsigned __int64 options,
                                        _locale_t locale,
                                        va_list valist)
 {
-    if (options & ~_CRT_INTERNAL_SCANF_SECURECRT)
+    if (options & ~(_CRT_INTERNAL_SCANF_SECURECRT | _CRT_INTERNAL_SCANF_LEGACY_WIDE_SPECIFIERS))
         FIXME("options %#I64x not handled\n", options);
     if (options & _CRT_INTERNAL_SCANF_SECURECRT)
         return vfscanf_s_l(file, format, locale, valist);
-- 
GitLab

From 3473dd5268873b304b6f3d64777822f2690b72b9 Mon Sep 17 00:00:00 2001
From: Piotr Caban <piotr@codeweavers.com>
Date: Tue, 30 Apr 2024 14:20:27 +0200
Subject: [PATCH 1/2] msvcr80/tests: Fix errno access in tests.

---
 dlls/msvcr80/tests/msvcr80.c | 6 ++++++
 1 file changed, 6 insertions(+)

diff --git a/dlls/msvcr80/tests/msvcr80.c b/dlls/msvcr80/tests/msvcr80.c
index fa04b024031..6e48ecf2894 100644
--- a/dlls/msvcr80/tests/msvcr80.c
+++ b/dlls/msvcr80/tests/msvcr80.c
@@ -64,6 +64,11 @@ static int (__cdecl *p_strcmp)(const char *, const char *);
 static int (__cdecl *p_strncmp)(const char *, const char *, size_t);
 static int (__cdecl *p_dupenv_s)(char **, size_t *, const char *);
 static int (__cdecl *p_wdupenv_s)(wchar_t **, size_t *, const wchar_t *);
+static int* (__cdecl *p_errno)(void);
+
+/* make sure we use the correct errno */
+#undef errno
+#define errno (*p_errno())
 
 #define SETNOFAIL(x,y) x = (void*)GetProcAddress(hcrt,y)
 #define SET(x,y) do { SETNOFAIL(x,y); ok(x != NULL, "Export '%s' not found\n", y); } while(0)
@@ -87,6 +92,7 @@ static BOOL init(void)
     SET(p_strncmp, "strncmp");
     SET(p_dupenv_s, "_dupenv_s");
     SET(p_wdupenv_s, "_wdupenv_s");
+    SET(p_errno, "_errno");
 
     return TRUE;
 }
-- 
GitLab


From aa122902a9e23c9a5512a9315f8ad02ef17c1d99 Mon Sep 17 00:00:00 2001
From: Paul Gofman <pgofman@codeweavers.com>
Date: Fri, 26 Apr 2024 20:29:16 -0600
Subject: [PATCH 2/2] msvcrt: Implement _mbsncpy_s[_l]().

---
 dlls/msvcr100/msvcr100.spec  |   4 +-
 dlls/msvcr110/msvcr110.spec  |   4 +-
 dlls/msvcr120/msvcr120.spec  |   4 +-
 dlls/msvcr80/msvcr80.spec    |   4 +-
 dlls/msvcr80/tests/msvcr80.c | 220 ++++++++++++++++++++++++++++++++++-
 dlls/msvcr90/msvcr90.spec    |   4 +-
 dlls/msvcrt/mbcs.c           |  77 ++++++++++++
 dlls/ucrtbase/tests/string.c | 165 ++++++++++++++++++++++++++
 dlls/ucrtbase/ucrtbase.spec  |   8 +-
 include/msvcrt/mbstring.h    |   2 +
 10 files changed, 477 insertions(+), 15 deletions(-)

diff --git a/dlls/msvcr100/msvcr100.spec b/dlls/msvcr100/msvcr100.spec
index 68e502af597..7e6397051e9 100644
--- a/dlls/msvcr100/msvcr100.spec
+++ b/dlls/msvcr100/msvcr100.spec
@@ -1157,8 +1157,8 @@
 @ stub _mbsncoll_l
 @ cdecl _mbsncpy(ptr str long)
 @ cdecl _mbsncpy_l(ptr str long ptr)
-@ stub _mbsncpy_s
-@ stub _mbsncpy_s_l
+@ cdecl _mbsncpy_s(ptr long str long)
+@ cdecl _mbsncpy_s_l(ptr long str long ptr)
 @ cdecl _mbsnextc(str)
 @ cdecl _mbsnextc_l(str ptr)
 @ cdecl _mbsnicmp(str str long)
diff --git a/dlls/msvcr110/msvcr110.spec b/dlls/msvcr110/msvcr110.spec
index 560002e59ed..010d222d665 100644
--- a/dlls/msvcr110/msvcr110.spec
+++ b/dlls/msvcr110/msvcr110.spec
@@ -1514,8 +1514,8 @@
 @ stub _mbsncoll_l
 @ cdecl _mbsncpy(ptr str long)
 @ cdecl _mbsncpy_l(ptr str long ptr)
-@ stub _mbsncpy_s
-@ stub _mbsncpy_s_l
+@ cdecl _mbsncpy_s(ptr long str long)
+@ cdecl _mbsncpy_s_l(ptr long str long ptr)
 @ cdecl _mbsnextc(str)
 @ cdecl _mbsnextc_l(str ptr)
 @ cdecl _mbsnicmp(str str long)
diff --git a/dlls/msvcr120/msvcr120.spec b/dlls/msvcr120/msvcr120.spec
index 46715817932..caddf750038 100644
--- a/dlls/msvcr120/msvcr120.spec
+++ b/dlls/msvcr120/msvcr120.spec
@@ -1525,8 +1525,8 @@
 @ stub _mbsncoll_l
 @ cdecl _mbsncpy(ptr str long)
 @ cdecl _mbsncpy_l(ptr str long ptr)
-@ stub _mbsncpy_s
-@ stub _mbsncpy_s_l
+@ cdecl _mbsncpy_s(ptr long str long)
+@ cdecl _mbsncpy_s_l(ptr long str long ptr)
 @ cdecl _mbsnextc(str)
 @ cdecl _mbsnextc_l(str ptr)
 @ cdecl _mbsnicmp(str str long)
diff --git a/dlls/msvcr80/msvcr80.spec b/dlls/msvcr80/msvcr80.spec
index 6cce6ee22ee..b4548945236 100644
--- a/dlls/msvcr80/msvcr80.spec
+++ b/dlls/msvcr80/msvcr80.spec
@@ -829,8 +829,8 @@
 @ stub _mbsncoll_l
 @ cdecl _mbsncpy(ptr str long)
 @ cdecl _mbsncpy_l(ptr str long ptr)
-@ stub _mbsncpy_s
-@ stub _mbsncpy_s_l
+@ cdecl _mbsncpy_s(ptr long str long)
+@ cdecl _mbsncpy_s_l(ptr long str long ptr)
 @ cdecl _mbsnextc(str)
 @ cdecl _mbsnextc_l(str ptr)
 @ cdecl _mbsnicmp(str str long)
diff --git a/dlls/msvcr80/tests/msvcr80.c b/dlls/msvcr80/tests/msvcr80.c
index 6e48ecf2894..ea7cd5abf24 100644
--- a/dlls/msvcr80/tests/msvcr80.c
+++ b/dlls/msvcr80/tests/msvcr80.c
@@ -37,8 +37,48 @@
 #define WX_TTY            0x40
 #define WX_TEXT           0x80
 
+#define _MB_CP_SBCS 0
+
 #define MSVCRT_FD_BLOCK_SIZE 32
 
+#define DEFINE_EXPECT(func) \
+    static BOOL expect_ ## func = FALSE, called_ ## func = FALSE
+
+#define SET_EXPECT(func) \
+    expect_ ## func = TRUE
+
+#define CHECK_EXPECT2(func) \
+    do { \
+        ok(expect_ ##func, "unexpected call " #func "\n"); \
+        called_ ## func = TRUE; \
+    }while(0)
+
+#define CHECK_EXPECT(func) \
+    do { \
+        CHECK_EXPECT2(func); \
+        expect_ ## func = FALSE; \
+    }while(0)
+
+#define CHECK_CALLED(func) \
+    do { \
+        ok(called_ ## func, "expected " #func "\n"); \
+        expect_ ## func = called_ ## func = FALSE; \
+    }while(0)
+
+DEFINE_EXPECT(invalid_parameter_handler);
+
+static void __cdecl test_invalid_parameter_handler(const wchar_t *expression,
+        const wchar_t *function, const wchar_t *file,
+        unsigned line, uintptr_t arg)
+{
+    CHECK_EXPECT(invalid_parameter_handler);
+    ok(expression == NULL, "expression is not NULL\n");
+    ok(function == NULL, "function is not NULL\n");
+    ok(file == NULL, "file is not NULL\n");
+    ok(line == 0, "line = %u\n", line);
+    ok(arg == 0, "arg = %Ix\n", arg);
+}
+
 typedef struct
 {
     HANDLE              handle;
@@ -57,6 +97,7 @@ typedef struct
 
 static ioinfo **__pioinfo;
 
+static _invalid_parameter_handler (__cdecl *p__set_invalid_parameter_handler)(_invalid_parameter_handler);
 static int (WINAPIV *p__open)(const char *, int, ...);
 static int (__cdecl *p__close)(int);
 static intptr_t (__cdecl *p__get_osfhandle)(int);
@@ -65,6 +106,10 @@ static int (__cdecl *p_strncmp)(const char *, const char *, size_t);
 static int (__cdecl *p_dupenv_s)(char **, size_t *, const char *);
 static int (__cdecl *p_wdupenv_s)(wchar_t **, size_t *, const wchar_t *);
 static int* (__cdecl *p_errno)(void);
+static errno_t (__cdecl *p__mbsncpy_s)(unsigned char*,size_t,const unsigned char*,size_t);
+static int (__cdecl *p__ismbblead_l)(unsigned int,_locale_t);
+static int (__cdecl *p__getmbcp)(void);
+static int (__cdecl *p__setmbcp)(int);
 
 /* make sure we use the correct errno */
 #undef errno
@@ -83,6 +128,8 @@ static BOOL init(void)
         return FALSE;
     }
 
+    SET(p__set_invalid_parameter_handler, "_set_invalid_parameter_handler");
+
     SET(__pioinfo, "__pioinfo");
     SET(p__open,"_open");
     SET(p__close,"_close");
@@ -93,7 +140,10 @@ static BOOL init(void)
     SET(p_dupenv_s, "_dupenv_s");
     SET(p_wdupenv_s, "_wdupenv_s");
     SET(p_errno, "_errno");
-
+    SET(p__mbsncpy_s, "_mbsncpy_s");
+    SET(p__ismbblead_l, "_ismbblead_l");
+    SET(p__getmbcp, "_getmbcp");
+    SET(p__setmbcp, "_setmbcp");
     return TRUE;
 }
 
@@ -222,13 +272,181 @@ static void test_wdupenv_s(void)
     ok( !tmp, "_wdupenv_s returned pointer is %p\n", tmp );
 }
 
+#define expect_bin(buf, value, len) { ok(memcmp((buf), value, len) == 0, \
+                                         "Binary buffer mismatch - expected %s, got %s\n", \
+                                         debugstr_an(value, len), debugstr_an((char *)(buf), len)); }
+
+static void test__mbsncpy_s(void)
+{
+    unsigned char *mbstring = (unsigned char *)"\xb0\xb1\xb2\xb3Q\xb4\xb5\x0";
+    unsigned char *mbstring2 = (unsigned char *)"\xb0\x0";
+    unsigned char buf[16];
+    errno_t err;
+    int oldcp;
+
+    oldcp = p__getmbcp();
+    if (p__setmbcp(936))
+    {
+        win_skip("Code page 936 is not available, skipping test.\n");
+        return;
+    }
+
+    errno = 0xdeadbeef;
+    memset(buf, 0xcc, sizeof(buf));
+    err = p__mbsncpy_s(NULL, 0, mbstring, 0);
+    ok(errno == 0xdeadbeef, "got %d\n", errno);
+    ok(!err, "got %d.\n", err);
+
+    errno = 0xdeadbeef;
+    memset(buf, 0xcc, sizeof(buf));
+    err = p__mbsncpy_s(buf, 6, mbstring, 1);
+    ok(errno == 0xdeadbeef, "got %d\n", errno);
+    ok(!err, "got %d.\n", err);
+    expect_bin(buf, "\xb0\xb1\0\xcc", 4);
+
+    memset(buf, 0xcc, sizeof(buf));
+    errno = 0xdeadbeef;
+    err = p__mbsncpy_s(buf, 6, mbstring, 2);
+    ok(errno == 0xdeadbeef, "got %d\n", errno);
+    ok(!err, "got %d.\n", err);
+    expect_bin(buf, "\xb0\xb1\xb2\xb3\0\xcc", 6);
+
+    errno = 0xdeadbeef;
+    memset(buf, 0xcc, sizeof(buf));
+    err = p__mbsncpy_s(buf, 2, mbstring, _TRUNCATE);
+    ok(errno == 0xdeadbeef, "got %d\n", errno);
+    ok(err == STRUNCATE, "got %d.\n", err);
+    expect_bin(buf, "\x00\xb1\xcc", 3);
+
+    memset(buf, 0xcc, sizeof(buf));
+    SET_EXPECT(invalid_parameter_handler);
+    errno = 0xdeadbeef;
+    err = p__mbsncpy_s(buf, 2, mbstring, 1);
+    ok(errno == err, "got %d.\n", errno);
+    CHECK_CALLED(invalid_parameter_handler);
+    ok(err == ERANGE, "got %d.\n", err);
+    expect_bin(buf, "\x0\xcc\xcc", 3);
+
+    memset(buf, 0xcc, sizeof(buf));
+    SET_EXPECT(invalid_parameter_handler);
+    errno = 0xdeadbeef;
+    err = p__mbsncpy_s(buf, 2, mbstring, 3);
+    ok(errno == err, "got %d\n", errno);
+    CHECK_CALLED(invalid_parameter_handler);
+    ok(err == ERANGE, "got %d.\n", err);
+    expect_bin(buf, "\x0\xcc\xcc", 3);
+
+    memset(buf, 0xcc, sizeof(buf));
+    SET_EXPECT(invalid_parameter_handler);
+    errno = 0xdeadbeef;
+    err = p__mbsncpy_s(buf, 1, mbstring, 3);
+    ok(errno == err, "got %d\n", errno);
+    CHECK_CALLED(invalid_parameter_handler);
+    ok(err == ERANGE, "got %d.\n", err);
+    expect_bin(buf, "\x0\xcc", 2);
+
+    memset(buf, 0xcc, sizeof(buf));
+    SET_EXPECT(invalid_parameter_handler);
+    errno = 0xdeadbeef;
+    err = p__mbsncpy_s(buf, 0, mbstring, 3);
+    ok(errno == err, "got %d\n", errno);
+    CHECK_CALLED(invalid_parameter_handler);
+    ok(err == EINVAL, "got %d.\n", err);
+    expect_bin(buf, "\xcc", 1);
+
+    memset(buf, 0xcc, sizeof(buf));
+    SET_EXPECT(invalid_parameter_handler);
+    errno = 0xdeadbeef;
+    err = p__mbsncpy_s(buf, 0, mbstring, 0);
+    ok(errno == err, "got %d\n", errno);
+    CHECK_CALLED(invalid_parameter_handler);
+    ok(err == EINVAL, "got %d.\n", err);
+    expect_bin(buf, "\xcc", 1);
+
+    memset(buf, 0xcc, sizeof(buf));
+    errno = 0xdeadbeef;
+    err = p__mbsncpy_s(buf, -1, mbstring, 0);
+    ok(errno == 0xdeadbeef, "got %d\n", errno);
+    ok(!err, "got %d.\n", err);
+    expect_bin(buf, "\x0\xcc", 2);
+
+    memset(buf, 0xcc, sizeof(buf));
+    errno = 0xdeadbeef;
+    err = p__mbsncpy_s(buf, -1, mbstring, 256);
+    ok(errno == 0xdeadbeef, "got %d\n", errno);
+    ok(!err, "got %d.\n", err);
+    expect_bin(buf, "\xb0\xb1\xb2\xb3Q\xb4\xb5\x0\xcc", 9);
+
+    memset(buf, 0xcc, sizeof(buf));
+    errno = 0xdeadbeef;
+    err = p__mbsncpy_s(buf, 1, mbstring2, 4);
+    ok(errno == err, "got %d\n", errno);
+    ok(err == EILSEQ, "got %d.\n", err);
+    expect_bin(buf, "\x0\xcc", 2);
+
+    memset(buf, 0xcc, sizeof(buf));
+    errno = 0xdeadbeef;
+    err = p__mbsncpy_s(buf, 2, mbstring2, 4);
+    ok(errno == err, "got %d\n", errno);
+    ok(err == EILSEQ, "got %d.\n", err);
+    expect_bin(buf, "\x0\xcc", 2);
+
+    memset(buf, 0xcc, sizeof(buf));
+    errno = 0xdeadbeef;
+    err = p__mbsncpy_s(buf, 1, mbstring2, _TRUNCATE);
+    ok(errno == 0xdeadbeef, "got %d\n", errno);
+    ok(err == STRUNCATE, "got %d.\n", err);
+    expect_bin(buf, "\x0\xcc", 2);
+
+    memset(buf, 0xcc, sizeof(buf));
+    errno = 0xdeadbeef;
+    err = p__mbsncpy_s(buf, 2, mbstring2, _TRUNCATE);
+    ok(errno == 0xdeadbeef, "got %d\n", errno);
+    ok(!err, "got %d.\n", err);
+    expect_bin(buf, "\xb0\x0\xcc", 3);
+
+    memset(buf, 0xcc, sizeof(buf));
+    errno = 0xdeadbeef;
+    err = p__mbsncpy_s(buf, 1, mbstring2, 1);
+    ok(errno == err, "got %d\n", errno);
+    ok(err == EILSEQ, "got %d.\n", err);
+    expect_bin(buf, "\x0\xcc", 2);
+
+    memset(buf, 0xcc, sizeof(buf));
+    errno = 0xdeadbeef;
+    err = p__mbsncpy_s(buf, 2, mbstring2, 1);
+    ok(errno == err, "got %d\n", errno);
+    ok(err == EILSEQ, "got %d.\n", err);
+    expect_bin(buf, "\x0\xcc", 2);
+
+    memset(buf, 0xcc, sizeof(buf));
+    errno = 0xdeadbeef;
+    err = p__mbsncpy_s(buf, 3, mbstring2, 1);
+    ok(errno == err, "got %d\n", errno);
+    ok(err == EILSEQ, "got %d.\n", err);
+    expect_bin(buf, "\x0\xcc", 2);
+
+    memset(buf, 0xcc, sizeof(buf));
+    errno = 0xdeadbeef;
+    err = p__mbsncpy_s(buf, 3, mbstring2, 2);
+    ok(errno == err, "got %d\n", errno);
+    ok(err == EILSEQ, "got %d.\n", err);
+    expect_bin(buf, "\x0\xcc", 2);
+
+    p__setmbcp(oldcp);
+}
+
 START_TEST(msvcr80)
 {
     if(!init())
         return;
 
+    ok(p__set_invalid_parameter_handler(test_invalid_parameter_handler) == NULL,
+            "Invalid parameter handler was already set\n");
+
     test_ioinfo_flags();
     test_strcmp();
     test_dupenv_s();
     test_wdupenv_s();
+    test__mbsncpy_s();
 }
diff --git a/dlls/msvcr90/msvcr90.spec b/dlls/msvcr90/msvcr90.spec
index ca22d7460be..c19f7298235 100644
--- a/dlls/msvcr90/msvcr90.spec
+++ b/dlls/msvcr90/msvcr90.spec
@@ -807,8 +807,8 @@
 @ stub _mbsncoll_l
 @ cdecl _mbsncpy(ptr str long)
 @ cdecl _mbsncpy_l(ptr str long ptr)
-@ stub _mbsncpy_s
-@ stub _mbsncpy_s_l
+@ cdecl _mbsncpy_s(ptr long str long)
+@ cdecl _mbsncpy_s_l(ptr long str long ptr)
 @ cdecl _mbsnextc(str)
 @ cdecl _mbsnextc_l(str ptr)
 @ cdecl _mbsnicmp(str str long)
diff --git a/dlls/msvcrt/mbcs.c b/dlls/msvcrt/mbcs.c
index ce8a3115eeb..0bac4c9f8d9 100644
--- a/dlls/msvcrt/mbcs.c
+++ b/dlls/msvcrt/mbcs.c
@@ -900,6 +900,83 @@ unsigned char* CDECL _mbsncpy_l(unsigned char* dst, const unsigned char* src, si
     return ret;
 }
 
+#if _MSVCR_VER>=80
+errno_t CDECL _mbsncpy_s_l(unsigned char* dst, size_t maxsize, const unsigned char* src, size_t n, _locale_t locale)
+{
+    BOOL truncate = (n == _TRUNCATE);
+    unsigned char *start = dst, *last;
+    pthreadmbcinfo mbcinfo;
+    unsigned int curlen;
+
+    if (!dst && !maxsize && !n)
+        return 0;
+
+    if (!MSVCRT_CHECK_PMT(dst != NULL)) return EINVAL;
+    if (!MSVCRT_CHECK_PMT(maxsize != 0)) return EINVAL;
+    if (!MSVCRT_CHECK_PMT(src != NULL))
+    {
+        *start = 0;
+        return EINVAL;
+    }
+
+    if (!n)
+    {
+        *start = 0;
+        return 0;
+    }
+
+    if (locale)
+        mbcinfo = locale->mbcinfo;
+    else
+        mbcinfo = get_mbcinfo();
+
+    curlen = 0;
+    last = dst;
+    while (*src && n && maxsize)
+    {
+        if (curlen)
+        {
+            --maxsize;
+            *dst++ = *src++;
+            if (!--curlen) --n;
+            continue;
+        }
+        last = dst;
+        if (!(mbcinfo->ismbcodepage && _ismbblead_l(*src, locale)))
+        {
+            curlen = 1;
+            continue;
+        }
+        curlen = 2;
+        if (!truncate && maxsize <= curlen) maxsize = 0;
+    }
+
+    if (!maxsize && truncate)
+    {
+        *last = 0;
+        return STRUNCATE;
+    }
+    if (!truncate && curlen && !src[curlen - 1])
+    {
+        *_errno() = EILSEQ;
+        *start = 0;
+        return EILSEQ;
+    }
+    if (!maxsize)
+    {
+        *start = 0;
+        if (!MSVCRT_CHECK_PMT_ERR(FALSE, ERANGE)) return ERANGE;
+    }
+    *dst = 0;
+    return 0;
+}
+
+errno_t CDECL _mbsncpy_s(unsigned char* dst, size_t maxsize, const unsigned char* src, size_t n)
+{
+    return _mbsncpy_s_l(dst, maxsize, src, n, NULL);
+}
+#endif
+
 /*********************************************************************
  *		_mbsncpy(MSVCRT.@)
  * REMARKS
diff --git a/dlls/ucrtbase/tests/string.c b/dlls/ucrtbase/tests/string.c
index 6dcd15fb5b9..5714d384b05 100644
--- a/dlls/ucrtbase/tests/string.c
+++ b/dlls/ucrtbase/tests/string.c
@@ -651,6 +651,170 @@ static void test_strcmp(void)
     ok( ret == 0, "wrong ret %d\n", ret );
 }
 
+#define expect_bin(buf, value, len) { ok(memcmp((buf), value, len) == 0, \
+                                         "Binary buffer mismatch - expected %s, got %s\n", \
+                                         debugstr_an(value, len), debugstr_an((char *)(buf), len)); }
+
+static void test__mbsncpy_s(void)
+{
+    unsigned char *mbstring = (unsigned char *)"\xb0\xb1\xb2\xb3Q\xb4\xb5\x0";
+    unsigned char *mbstring2 = (unsigned char *)"\xb0\x0";
+    unsigned char buf[16];
+    errno_t err;
+    int oldcp;
+
+    oldcp = _getmbcp();
+    if (_setmbcp(936))
+    {
+        skip("Code page 936 is not available, skipping test.\n");
+        return;
+    }
+
+    errno = 0xdeadbeef;
+    memset(buf, 0xcc, sizeof(buf));
+    err = _mbsncpy_s(NULL, 0, mbstring, 0);
+    ok(errno == 0xdeadbeef, "got %d\n", errno);
+    ok(!err, "got %d.\n", err);
+
+    errno = 0xdeadbeef;
+    memset(buf, 0xcc, sizeof(buf));
+    err = _mbsncpy_s(buf, 6, mbstring, 1);
+    ok(errno == 0xdeadbeef, "got %d\n", errno);
+    ok(!err, "got %d.\n", err);
+    expect_bin(buf, "\xb0\xb1\0\xcc", 4);
+
+    memset(buf, 0xcc, sizeof(buf));
+    errno = 0xdeadbeef;
+    err = _mbsncpy_s(buf, 6, mbstring, 2);
+    ok(errno == 0xdeadbeef, "got %d\n", errno);
+    ok(!err, "got %d.\n", err);
+    expect_bin(buf, "\xb0\xb1\xb2\xb3\0\xcc", 6);
+
+    errno = 0xdeadbeef;
+    memset(buf, 0xcc, sizeof(buf));
+    err = _mbsncpy_s(buf, 2, mbstring, _TRUNCATE);
+    ok(errno == 0xdeadbeef, "got %d\n", errno);
+    ok(err == STRUNCATE, "got %d.\n", err);
+    expect_bin(buf, "\x00\xb1\xcc", 3);
+
+    memset(buf, 0xcc, sizeof(buf));
+    SET_EXPECT(invalid_parameter_handler);
+    errno = 0xdeadbeef;
+    err = _mbsncpy_s(buf, 2, mbstring, 1);
+    ok(errno == err, "got %d.\n", errno);
+    CHECK_CALLED(invalid_parameter_handler);
+    ok(err == ERANGE, "got %d.\n", err);
+    expect_bin(buf, "\x0\xcc\xcc", 3);
+
+    memset(buf, 0xcc, sizeof(buf));
+    SET_EXPECT(invalid_parameter_handler);
+    errno = 0xdeadbeef;
+    err = _mbsncpy_s(buf, 2, mbstring, 3);
+    ok(errno == err, "got %d\n", errno);
+    CHECK_CALLED(invalid_parameter_handler);
+    ok(err == ERANGE, "got %d.\n", err);
+    expect_bin(buf, "\x0\xcc\xcc", 3);
+
+    memset(buf, 0xcc, sizeof(buf));
+    SET_EXPECT(invalid_parameter_handler);
+    errno = 0xdeadbeef;
+    err = _mbsncpy_s(buf, 1, mbstring, 3);
+    ok(errno == err, "got %d\n", errno);
+    CHECK_CALLED(invalid_parameter_handler);
+    ok(err == ERANGE, "got %d.\n", err);
+    expect_bin(buf, "\x0\xcc", 2);
+
+    memset(buf, 0xcc, sizeof(buf));
+    SET_EXPECT(invalid_parameter_handler);
+    errno = 0xdeadbeef;
+    err = _mbsncpy_s(buf, 0, mbstring, 3);
+    ok(errno == err, "got %d\n", errno);
+    CHECK_CALLED(invalid_parameter_handler);
+    ok(err == EINVAL, "got %d.\n", err);
+    expect_bin(buf, "\xcc", 1);
+
+    memset(buf, 0xcc, sizeof(buf));
+    SET_EXPECT(invalid_parameter_handler);
+    errno = 0xdeadbeef;
+    err = _mbsncpy_s(buf, 0, mbstring, 0);
+    ok(errno == err, "got %d\n", errno);
+    CHECK_CALLED(invalid_parameter_handler);
+    ok(err == EINVAL, "got %d.\n", err);
+    expect_bin(buf, "\xcc", 1);
+
+    memset(buf, 0xcc, sizeof(buf));
+    errno = 0xdeadbeef;
+    err = _mbsncpy_s(buf, -1, mbstring, 0);
+    ok(errno == 0xdeadbeef, "got %d\n", errno);
+    ok(!err, "got %d.\n", err);
+    expect_bin(buf, "\x0\xcc", 2);
+
+    memset(buf, 0xcc, sizeof(buf));
+    errno = 0xdeadbeef;
+    err = _mbsncpy_s(buf, -1, mbstring, 256);
+    ok(errno == 0xdeadbeef, "got %d\n", errno);
+    ok(!err, "got %d.\n", err);
+    expect_bin(buf, "\xb0\xb1\xb2\xb3Q\xb4\xb5\x0\xcc", 9);
+
+    memset(buf, 0xcc, sizeof(buf));
+    errno = 0xdeadbeef;
+    err = _mbsncpy_s(buf, 1, mbstring2, 4);
+    ok(errno == err, "got %d\n", errno);
+    ok(err == EILSEQ, "got %d.\n", err);
+    expect_bin(buf, "\x0\xcc", 2);
+
+    memset(buf, 0xcc, sizeof(buf));
+    errno = 0xdeadbeef;
+    err = _mbsncpy_s(buf, 2, mbstring2, 4);
+    ok(errno == err, "got %d\n", errno);
+    ok(err == EILSEQ, "got %d.\n", err);
+    expect_bin(buf, "\x0\xcc", 2);
+
+    memset(buf, 0xcc, sizeof(buf));
+    errno = 0xdeadbeef;
+    err = _mbsncpy_s(buf, 1, mbstring2, _TRUNCATE);
+    ok(errno == 0xdeadbeef, "got %d\n", errno);
+    ok(err == STRUNCATE, "got %d.\n", err);
+    expect_bin(buf, "\x0\xcc", 2);
+
+    memset(buf, 0xcc, sizeof(buf));
+    errno = 0xdeadbeef;
+    err = _mbsncpy_s(buf, 2, mbstring2, _TRUNCATE);
+    ok(errno == 0xdeadbeef, "got %d\n", errno);
+    ok(!err, "got %d.\n", err);
+    expect_bin(buf, "\xb0\x0\xcc", 3);
+
+    memset(buf, 0xcc, sizeof(buf));
+    errno = 0xdeadbeef;
+    err = _mbsncpy_s(buf, 1, mbstring2, 1);
+    ok(errno == err, "got %d\n", errno);
+    ok(err == EILSEQ, "got %d.\n", err);
+    expect_bin(buf, "\x0\xcc", 2);
+
+    memset(buf, 0xcc, sizeof(buf));
+    errno = 0xdeadbeef;
+    err = _mbsncpy_s(buf, 2, mbstring2, 1);
+    ok(errno == err, "got %d\n", errno);
+    ok(err == EILSEQ, "got %d.\n", err);
+    expect_bin(buf, "\x0\xcc", 2);
+
+    memset(buf, 0xcc, sizeof(buf));
+    errno = 0xdeadbeef;
+    err = _mbsncpy_s(buf, 3, mbstring2, 1);
+    ok(errno == err, "got %d\n", errno);
+    ok(err == EILSEQ, "got %d.\n", err);
+    expect_bin(buf, "\x0\xcc", 2);
+
+    memset(buf, 0xcc, sizeof(buf));
+    errno = 0xdeadbeef;
+    err = _mbsncpy_s(buf, 3, mbstring2, 2);
+    ok(errno == err, "got %d\n", errno);
+    ok(err == EILSEQ, "got %d.\n", err);
+    expect_bin(buf, "\x0\xcc", 2);
+
+    _setmbcp(oldcp);
+}
+
 START_TEST(string)
 {
     ok(_set_invalid_parameter_handler(test_invalid_parameter_handler) == NULL,
@@ -669,4 +833,5 @@ START_TEST(string)
     test_SpecialCasing();
     test__mbbtype_l();
     test_strcmp();
+    test__mbsncpy_s();
 }
diff --git a/dlls/ucrtbase/ucrtbase.spec b/dlls/ucrtbase/ucrtbase.spec
index 449b734ad34..054fc4055f4 100644
--- a/dlls/ucrtbase/ucrtbase.spec
+++ b/dlls/ucrtbase/ucrtbase.spec
@@ -673,8 +673,8 @@
 @ stub _mbsncoll_l
 @ cdecl _mbsncpy(ptr str long)
 @ cdecl _mbsncpy_l(ptr str long ptr)
-@ stub _mbsncpy_s
-@ stub _mbsncpy_s_l
+@ cdecl _mbsncpy_s(ptr long str long)
+@ cdecl _mbsncpy_s_l(ptr long str long ptr)
 @ cdecl _mbsnextc(str)
 @ cdecl _mbsnextc_l(str ptr)
 @ cdecl _mbsnicmp(str str long)
@@ -1242,8 +1242,8 @@
 @ stub _o__mbsncoll_l
 @ cdecl _o__mbsncpy(ptr str long) _mbsncpy
 @ cdecl _o__mbsncpy_l(ptr str long ptr) _mbsncpy_l
-@ stub _o__mbsncpy_s
-@ stub _o__mbsncpy_s_l
+@ cdecl _o__mbsncpy_s(ptr long str long) _mbsncpy_s
+@ cdecl _o__mbsncpy_s_l(ptr long str long ptr) _mbsncpy_s_l
 @ cdecl _o__mbsnextc(str) _mbsnextc
 @ cdecl _o__mbsnextc_l(str ptr) _mbsnextc_l
 @ cdecl _o__mbsnicmp(str str long) _mbsnicmp
diff --git a/include/msvcrt/mbstring.h b/include/msvcrt/mbstring.h
index 28a0e41f10d..f51d8ed6bc3 100644
--- a/include/msvcrt/mbstring.h
+++ b/include/msvcrt/mbstring.h
@@ -93,6 +93,8 @@ _ACRTIMP size_t         __cdecl _mbsnccnt(const unsigned char*,size_t);
 _ACRTIMP int            __cdecl _mbsncmp(const unsigned char*,const unsigned char*,size_t);
 _ACRTIMP int            __cdecl _mbsncoll(const unsigned char*,const unsigned char*,size_t);
 _ACRTIMP unsigned char* __cdecl _mbsncpy(unsigned char*,const unsigned char*,size_t);
+_ACRTIMP errno_t        __cdecl _mbsncpy_s(unsigned char*,size_t,const unsigned char*,size_t);
+_ACRTIMP errno_t        __cdecl _mbsncpy_s_l(unsigned char*,size_t,const unsigned char*,size_t,_locale_t);
 _ACRTIMP unsigned int   __cdecl _mbsnextc(const unsigned char*);
 _ACRTIMP unsigned int   __cdecl _mbsnextc_l(const unsigned char*,_locale_t);
 _ACRTIMP int            __cdecl _mbsnicmp(const unsigned char*,const unsigned char*,size_t);
-- 
GitLab

From efce36004de600662876fb57389c9488b9c863bc Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?Aida=20Jonikien=C4=97?= <aidas957@gmail.com>
Date: Thu, 2 May 2024 02:02:36 +0300
Subject: [PATCH] msvcp140_atomic_wait: Implement __std_*_crt().

OpenImageViewer calls these functions when triggering the image
properties menu.
---
 dlls/msvcp140_atomic_wait/main.c                    | 10 ++++++++++
 dlls/msvcp140_atomic_wait/msvcp140_atomic_wait.spec |  4 ++--
 2 files changed, 12 insertions(+), 2 deletions(-)

diff --git a/dlls/msvcp140_atomic_wait/main.c b/dlls/msvcp140_atomic_wait/main.c
index b7aa30200ff..52ecae486eb 100644
--- a/dlls/msvcp140_atomic_wait/main.c
+++ b/dlls/msvcp140_atomic_wait/main.c
@@ -165,3 +165,13 @@ void __stdcall __std_release_shared_mutex_for_instance(void *ptr)
     }
     LeaveCriticalSection(&shared_mutex_cs);
 }
+
+void* __stdcall __std_calloc_crt(size_t count, size_t size)
+{
+    return calloc(count, size);
+}
+
+void __stdcall __std_free_crt(void *ptr)
+{
+    free(ptr);
+}
diff --git a/dlls/msvcp140_atomic_wait/msvcp140_atomic_wait.spec b/dlls/msvcp140_atomic_wait/msvcp140_atomic_wait.spec
index 5d9dd5c1a74..88ed59adad9 100644
--- a/dlls/msvcp140_atomic_wait/msvcp140_atomic_wait.spec
+++ b/dlls/msvcp140_atomic_wait/msvcp140_atomic_wait.spec
@@ -12,12 +12,12 @@
 @ stub __std_atomic_wait_get_remaining_timeout
 @ stub __std_atomic_wait_indirect
 @ stdcall __std_bulk_submit_threadpool_work(ptr long)
-@ stub __std_calloc_crt
+@ stdcall __std_calloc_crt(long long)
 @ stdcall __std_close_threadpool_work(ptr)
 @ stdcall __std_create_threadpool_work(ptr ptr ptr)
 @ stub __std_execution_wait_on_uchar
 @ stub __std_execution_wake_by_address_all
-@ stub __std_free_crt
+@ stdcall __std_free_crt(ptr)
 @ stdcall __std_parallel_algorithms_hw_threads()
 @ stdcall __std_release_shared_mutex_for_instance(ptr)
 @ stdcall __std_submit_threadpool_work(ptr)
-- 
GitLab

From 98e74c7842d124aa475c8cb9e5b47a34b96e0f63 Mon Sep 17 00:00:00 2001
From: Piotr Caban <piotr@codeweavers.com>
Date: Tue, 11 Jun 2024 19:18:53 +0200
Subject: [PATCH 1/6] msvcp140: Use _get_stream_buffer_pointers() to access
 FILE internal buffers.

---
 dlls/msvcp90/ios.c     | 16 +++++++++++++---
 dlls/msvcp90/locale.c  |  1 -
 dlls/msvcp90/msvcp90.h |  5 +++++
 dlls/msvcp90/string.c  |  1 -
 4 files changed, 18 insertions(+), 5 deletions(-)

diff --git a/dlls/msvcp90/ios.c b/dlls/msvcp90/ios.c
index d81e6367878..1bf1a41cca4 100644
--- a/dlls/msvcp90/ios.c
+++ b/dlls/msvcp90/ios.c
@@ -17,7 +17,6 @@
  */
 
 #include <stdarg.h>
-#include <stdio.h>
 #include <limits.h>
 #include <share.h>
 
@@ -3028,8 +3027,19 @@ void __thiscall basic_filebuf_char__Init(basic_filebuf_char *this, FILE *file, b
 
     basic_streambuf_char__Init_empty(&this->base);
     if(file)
-        basic_streambuf_char__Init(&this->base, &file->_base, &file->_ptr,
-                &file->_cnt, &file->_base, &file->_ptr, &file->_cnt);
+    {
+        char **base, **ptr;
+        int *cnt;
+
+#if _MSVCP_VER >= 140
+        _get_stream_buffer_pointers(file, &base, &ptr, &cnt);
+#else
+        base = &file->_base;
+        ptr = &file->_ptr;
+        cnt = &file->_cnt;
+#endif
+        basic_streambuf_char__Init(&this->base, base, ptr, cnt, base, ptr, cnt);
+    }
 }
 
 /* ?_Initcvt@?$basic_filebuf@DU?$char_traits@D@std@@@std@@IAEXPAV?$codecvt@DDH@2@@Z */
diff --git a/dlls/msvcp90/locale.c b/dlls/msvcp90/locale.c
index 4eaf679139c..28a0db9d3bd 100644
--- a/dlls/msvcp90/locale.c
+++ b/dlls/msvcp90/locale.c
@@ -24,7 +24,6 @@
 #include "limits.h"
 #include "math.h"
 #include "mbctype.h"
-#include "stdio.h"
 #include "wchar.h"
 #include "wctype.h"
 #include "uchar.h"
diff --git a/dlls/msvcp90/msvcp90.h b/dlls/msvcp90/msvcp90.h
index 54c66952a60..23ce63947e5 100644
--- a/dlls/msvcp90/msvcp90.h
+++ b/dlls/msvcp90/msvcp90.h
@@ -17,6 +17,7 @@
  */
 
 #include "stdbool.h"
+#include <stdio.h>
 #include "stdlib.h"
 #include "windef.h"
 #include "winbase.h"
@@ -736,3 +737,7 @@ void __cdecl DECLSPEC_NORETURN _Xruntime_error(const char*);
 void DECLSPEC_NORETURN throw_exception(const char*);
 void DECLSPEC_NORETURN throw_failure(const char*);
 void DECLSPEC_NORETURN throw_range_error(const char*);
+
+#if _MSVCP_VER >= 140
+int CDECL _get_stream_buffer_pointers(FILE*,char***,char***,int**);
+#endif
diff --git a/dlls/msvcp90/string.c b/dlls/msvcp90/string.c
index 3384069bd03..10fae252380 100644
--- a/dlls/msvcp90/string.c
+++ b/dlls/msvcp90/string.c
@@ -19,7 +19,6 @@
 #include <stdarg.h>
 
 #include "msvcp90.h"
-#include "stdio.h"
 
 #include "windef.h"
 #include "winbase.h"
-- 
GitLab

From d31497f659fb28b232f95aa56f5dfdf91e9b1dcc Mon Sep 17 00:00:00 2001
From: Eric Pouech <epouech@codeweavers.com>
Date: Wed, 3 Apr 2024 17:26:55 +0200
Subject: [PATCH] ucrtbase: Let stderr be always be unbuffered.

Signed-off-by: Eric Pouech <epouech@codeweavers.com>
(cherry picked from commit 8825f4dfa5e72834577aef58810b967c53965f93)

Link: https://github.com/ValveSoftware/wine/issues/224
---
 dlls/msvcrt/file.c         | 6 ++++++
 2 files changed, 6 insertions(+), 1 deletion(-)

diff --git a/dlls/msvcrt/file.c b/dlls/msvcrt/file.c
index 3de12d1087f..4fa56384cd5 100644
--- a/dlls/msvcrt/file.c
+++ b/dlls/msvcrt/file.c
@@ -845,9 +845,15 @@ int CDECL _isatty(int fd)
 /* INTERNAL: Allocate stdio file buffer */
 static BOOL msvcrt_alloc_buffer(FILE* file)
 {
+#if _MSVCR_VER >= 140
+    if((file->_file==STDOUT_FILENO && _isatty(file->_file))
+        || file->_file == STDERR_FILENO)
+        return FALSE;
+#else
     if((file->_file==STDOUT_FILENO || file->_file==STDERR_FILENO)
             && _isatty(file->_file))
         return FALSE;
+#endif
 
     file->_base = calloc(1, MSVCRT_INTERNAL_BUFSIZ);
     if(file->_base) {

From 2c0886257a79cf887d7cf5dce79293ad96668157 Mon Sep 17 00:00:00 2001
From: Piotr Caban <piotr@codeweavers.com>
Date: Mon, 22 Jul 2024 19:37:51 +0200
Subject: [PATCH] ucrtbase: Fix mbstowcs on UTF8 strings.

Wine-Bug: https://bugs.winehq.org/show_bug.cgi?id=56994
---
 dlls/msvcrt/mbcs.c           | 16 +++++++++++++++-
 dlls/ucrtbase/tests/string.c | 23 +++++++++++++++++++++++
 2 files changed, 38 insertions(+), 1 deletion(-)

diff --git a/dlls/msvcrt/mbcs.c b/dlls/msvcrt/mbcs.c
index 0bac4c9f8d9..5f5cd3e8cda 100644
--- a/dlls/msvcrt/mbcs.c
+++ b/dlls/msvcrt/mbcs.c
@@ -3266,6 +3266,17 @@ size_t CDECL mbrtowc(wchar_t *dst, const char *str,
     return len;
 }
 
+static inline int get_utf8_char_len(char ch)
+{
+    if((ch&0xf8) == 0xf0)
+        return 4;
+    else if((ch&0xf0) == 0xe0)
+        return 3;
+    else if((ch&0xe0) == 0xc0)
+        return 2;
+    return 1;
+}
+
 /*********************************************************************
  *		_mbstowcs_l(MSVCRT.@)
  */
@@ -3311,7 +3322,10 @@ size_t CDECL _mbstowcs_l(wchar_t *wcstr, const char *mbstr,
         if(mbstr[size] == '\0')
             break;
 
-        size += (_isleadbyte_l((unsigned char)mbstr[size], locale) ? 2 : 1);
+        if (locinfo->lc_codepage == CP_UTF8)
+            size += get_utf8_char_len(mbstr[size]);
+        else
+            size += (_isleadbyte_l((unsigned char)mbstr[size], locale) ? 2 : 1);
     }
 
     if(size) {
-- 
GitLab

From 9dd01c1350f19d1e21ee3b8f6d8baccb8474323a Mon Sep 17 00:00:00 2001
From: Piotr Caban <piotr@codeweavers.com>
Date: Thu, 25 Jul 2024 11:17:05 +0200
Subject: [PATCH 1/3] msvcrt: Use thread-safe functions in _ctime64_s.

---
 dlls/msvcrt/time.c | 10 ++++++----
 1 file changed, 6 insertions(+), 4 deletions(-)

diff --git a/dlls/msvcrt/time.c b/dlls/msvcrt/time.c
index 7a110e53455..5b3698357c2 100644
--- a/dlls/msvcrt/time.c
+++ b/dlls/msvcrt/time.c
@@ -1730,7 +1730,8 @@ char * CDECL _ctime64(const __time64_t *time)
  */
 errno_t CDECL _ctime64_s(char *res, size_t len, const __time64_t *time)
 {
-    struct tm *t;
+    struct tm t;
+    int ret;
 
     if (!MSVCRT_CHECK_PMT( res != NULL )) return EINVAL;
     if (!MSVCRT_CHECK_PMT( len >= 26 )) return EINVAL;
@@ -1738,9 +1739,10 @@ errno_t CDECL _ctime64_s(char *res, size_t len, const __time64_t *time)
     if (!MSVCRT_CHECK_PMT( time != NULL )) return EINVAL;
     if (!MSVCRT_CHECK_PMT( *time > 0 )) return EINVAL;
 
-    t = _localtime64( time );
-    strcpy( res, asctime( t ) );
-    return 0;
+    ret = _localtime64_s( &t, time );
+    if (ret)
+        return ret;
+    return asctime_s( res, len, &t );
 }
 
 /*********************************************************************
-- 
GitLab


From 70580c05f967c1c8ffb80734a29598893814cf7c Mon Sep 17 00:00:00 2001
From: Piotr Caban <piotr@codeweavers.com>
Date: Thu, 25 Jul 2024 11:18:29 +0200
Subject: [PATCH 2/3] msvcrt: Use thread-safe functions in _ctime32_s.

---
 dlls/msvcrt/time.c | 10 ++++++----
 1 file changed, 6 insertions(+), 4 deletions(-)

diff --git a/dlls/msvcrt/time.c b/dlls/msvcrt/time.c
index 5b3698357c2..155454c5659 100644
--- a/dlls/msvcrt/time.c
+++ b/dlls/msvcrt/time.c
@@ -1761,7 +1761,8 @@ char * CDECL _ctime32(const __time32_t *time)
  */
 errno_t CDECL _ctime32_s(char *res, size_t len, const __time32_t *time)
 {
-    struct tm *t;
+    struct tm t;
+    int ret;
 
     if (!MSVCRT_CHECK_PMT( res != NULL )) return EINVAL;
     if (!MSVCRT_CHECK_PMT( len >= 26 )) return EINVAL;
@@ -1769,9 +1770,10 @@ errno_t CDECL _ctime32_s(char *res, size_t len, const __time32_t *time)
     if (!MSVCRT_CHECK_PMT( time != NULL )) return EINVAL;
     if (!MSVCRT_CHECK_PMT( *time > 0 )) return EINVAL;
 
-    t = _localtime32( time );
-    strcpy( res, asctime( t ) );
-    return 0;
+    ret = _localtime32_s( &t, time );
+    if (ret)
+        return ret;
+    return asctime_s( res, len, &t );
 }
 
 /*********************************************************************
-- 
GitLab


From 0693a684682cea275da8888051d4986071ed8e93 Mon Sep 17 00:00:00 2001
From: Piotr Caban <piotr@codeweavers.com>
Date: Thu, 25 Jul 2024 11:39:32 +0200
Subject: [PATCH 3/3] msvcrt: Don't access input string after NULL-byte in
 mbstowcs.

---
 dlls/msvcrt/mbcs.c | 16 ++++++++++++++--
 1 file changed, 14 insertions(+), 2 deletions(-)

diff --git a/dlls/msvcrt/mbcs.c b/dlls/msvcrt/mbcs.c
index 5f5cd3e8cda..bd4245c2c53 100644
--- a/dlls/msvcrt/mbcs.c
+++ b/dlls/msvcrt/mbcs.c
@@ -3322,8 +3322,20 @@ size_t CDECL _mbstowcs_l(wchar_t *wcstr, const char *mbstr,
         if(mbstr[size] == '\0')
             break;
 
-        if (locinfo->lc_codepage == CP_UTF8)
-            size += get_utf8_char_len(mbstr[size]);
+        if(locinfo->lc_codepage == CP_UTF8) {
+            int j, chlen = get_utf8_char_len(mbstr[size]);
+
+            for(j = 1; j < chlen; j++)
+            {
+                if(!mbstr[size + j])
+                {
+                    if(count) wcstr[0] = '\0';
+                    *_errno() = EILSEQ;
+                    return -1;
+                }
+            }
+            size += chlen;
+        }
         else
             size += (_isleadbyte_l((unsigned char)mbstr[size], locale) ? 2 : 1);
     }
-- 
GitLab
