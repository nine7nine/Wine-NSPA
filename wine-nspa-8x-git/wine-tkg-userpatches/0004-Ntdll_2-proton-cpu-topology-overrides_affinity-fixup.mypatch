From c9d5405bd91bc5bdd89869f26bdecda2462fc685 Mon Sep 17 00:00:00 2001
From: Paul Gofman <pgofman@codeweavers.com>
Date: Tue, 8 Feb 2022 23:20:35 +0300
Subject: [PATCH] fixup! ntdll: Implement CPU topology override.

CW-Bug-Id: #20108

Also mind overridden topology for converting host affinity and allow
setting the affinity on thread creation.
---
 server/process.c | 23 +++++++++++++++++++++++
 server/process.h |  1 +
 server/thread.c  | 21 ++++++++++++++++-----
 3 files changed, 40 insertions(+), 5 deletions(-)

diff --git a/server/process.c b/server/process.c
index 8203eead9d4..1f9ec4eb619 100644
--- a/server/process.c
+++ b/server/process.c
@@ -1449,11 +1449,29 @@ DECL_HANDLER(get_startup_info)
 DECL_HANDLER(init_process_done)
 {
     struct process *process = current->process;
-    const struct cpu_topology_override *cpu_override = get_req_data();
-    unsigned int have_cpu_override = get_req_data_size() / sizeof(*cpu_override);
     struct memory_view *view;
     client_ptr_t base;
     const pe_image_info_t *image_info;
+    const struct cpu_topology_override *cpu_override = get_req_data();
+    unsigned int have_cpu_override = get_req_data_size() / sizeof(*cpu_override);
+    unsigned int i;
+
+    if (have_cpu_override)
+    {
+        if (cpu_override->cpu_count > ARRAY_SIZE(process->wine_cpu_id_from_host))
+        {
+            set_error( STATUS_INVALID_PARAMETER );
+            return;
+        }
+        for (i = 0; i < cpu_override->cpu_count; ++i)
+        {
+            if (cpu_override->host_cpu_id[i] >= ARRAY_SIZE(process->wine_cpu_id_from_host))
+            {
+                set_error( STATUS_INVALID_PARAMETER );
+                return;
+            }
+        }
+    }
 
     if (is_process_init_done(process))
     {
@@ -1485,7 +1503,12 @@ DECL_HANDLER(init_process_done)
     reply->suspend = (current->suspend || process->suspend);
 
     if (have_cpu_override)
+    {
         process->cpu_override = *cpu_override;
+        memset( process->wine_cpu_id_from_host, 0, sizeof(process->wine_cpu_id_from_host) );
+        for (i = 0; i < process->cpu_override.cpu_count; ++i)
+            process->wine_cpu_id_from_host[process->cpu_override.host_cpu_id[i]] = i;
+    }
 }
 
 /* open a handle to a process */
diff --git a/server/process.h b/server/process.h
index 404bbb12550..60a80be1fc1 100644
--- a/server/process.h
+++ b/server/process.h
@@ -94,6 +94,7 @@ struct process
     int                  esync_fd;        /* esync file descriptor (signaled on exit) */
     unsigned int         fsync_idx;
     struct cpu_topology_override cpu_override; /* Overridden CPUs to host CPUs mapping. */
+    unsigned char   wine_cpu_id_from_host[64]; /* Host to overridden CPU mapping. */
 };
 
 /* process functions */
diff --git a/server/thread.c b/server/thread.c
index 4c51567c286..5163d540531 100644
--- a/server/thread.c
+++ b/server/thread.c
@@ -749,8 +749,21 @@ affinity_t get_thread_affinity( struct t
         unsigned int i;
 
         if (!sched_getaffinity( thread->unix_tid, sizeof(set), &set ))
+        {
             for (i = 0; i < 8 * sizeof(mask); i++)
-                if (CPU_ISSET( i, &set )) mask |= (affinity_t)1 << i;
+                if (CPU_ISSET( i, &set ))
+                {
+                    if (thread->process->cpu_override.cpu_count)
+                    {
+                        if (i < ARRAY_SIZE(thread->process->wine_cpu_id_from_host))
+                            mask |= (affinity_t)1 << thread->process->wine_cpu_id_from_host[i];
+                    }
+                    else
+                    {
+                        mask |= (affinity_t)1 << i;
+                    }
+                }
+        }
     }
 #endif
     if (!mask) mask = ~(affinity_t)0;
@@ -1801,9 +1814,7 @@ DECL_HANDLER(init_first_thread)
 
     if (!process->parent_id)
         process->affinity = current->affinity = get_thread_affinity( current );
-    else if (!process->cpu_override.cpu_count)
-        set_thread_affinity( current, current->affinity ); 
-    
+    set_thread_affinity( current, current->affinity ); 
     set_thread_priority( current, current->priority );    
 
     debug_level = max( debug_level, req->debug_level );
@@ -1837,8 +1848,7 @@ DECL_HANDLER(init_thread)
     init_thread_context( current );
     generate_debug_event( current, DbgCreateThreadStateChange, &req->entry );
     set_thread_priority( current, current->priority );
-    if (!process->cpu_override.cpu_count)
-        set_thread_affinity( current, current->affinity );
+    set_thread_affinity( current, current->affinity );
 
     reply->suspend = (current->suspend || current->process->suspend || current->context != NULL);
 }
