--- a/server/fd.c	2023-09-25 15:54:28.566819846 -0500
+++ b/server/fd.c	2023-09-25 15:54:13.414743447 -0500
@@ -111,6 +111,9 @@
 
 #if defined(HAVE_SYS_EPOLL_H) && defined(HAVE_EPOLL_CREATE)
 # include <sys/epoll.h>
+#ifndef EPOLL_CTL_MIN_WAIT
+#define EPOLL_CTL_MIN_WAIT 4
+#endif
 # define USE_EPOLL
 #endif /* HAVE_SYS_EPOLL_H && HAVE_EPOLL_CREATE */
 
@@ -598,6 +598,9 @@ static inline void main_loop_epoll(void)
 {
     int i, ret, timeout;
     struct epoll_event events[128];
+    struct epoll_event min_wait_event;
+    char *env_min_wait_time;
+    int min_wait_time_us;
 
     assert( POLLIN == EPOLLIN );
     assert( POLLOUT == EPOLLOUT );
@@ -606,6 +609,24 @@ static inline void main_loop_epoll(void)
 
     if (epoll_fd == -1) return;
 
+    /* Fetch and set the minimum wait time from environment variable */
+    env_min_wait_time = getenv("EPOLL_MIN_WAIT_TIME_US");
+    if (env_min_wait_time)
+    {
+        min_wait_time_us = atoi(env_min_wait_time);
+    }
+    else
+    {
+        min_wait_time_us = 1;  // Default to 1 milliseconds if the environment variable is not set
+    }
+
+    min_wait_event.data.u64 = (uint64_t)min_wait_time_us;
+    if (epoll_ctl(epoll_fd, EPOLL_CTL_MIN_WAIT, -1, &min_wait_event) == -1)
+    {
+        perror("Failed to set epoll min wait time");
+        exit(EXIT_FAILURE);
+    }
+
     pthread_mutex_lock( &global_lock );
     while (active_users)
     {

