From 695c72575c72161501a2ac508ba1db649e96d1dd Mon Sep 17 00:00:00 2001
From: Arkadiusz Hiler <ahiler@codeweavers.com>
Date: Fri, 2 Jul 2021 16:01:28 +0300
Subject: [PATCH] user32: Allow the backends to defer restoring minimized
 windows.

When restoring a minimized window the WM_SYSCOMMAND SC_RESTORE message
should arrive after WM_NCACTIVATE but before WM_ACTIVATE and WM_SETFOCUS.

Some games depend on that ordering and the related window state.

For example Project CARS 3 expects window to be both active and in the
foreground (wrt GetActiveWindow() and GetForegroundWindow()) when
receiving those messages.

Without being active the window doesn't restore properly, see
82c6ec3a32f4 ("winex11.drv: Activate window when restoring from iconic state.")

But if the activate messages arrive before the window is in the
foreground, the game tries to re-acquire DirectInput DISCL_FOREGROUND
devices too early and fails, which results in non-working keyboards and
controllers.

CW-Bug-Id: #19011
---
 dlls/win32u/input.c | 6 ++++++
 1 file changed, 6 insertions(+)

diff --git a/dlls/win32u/input.c b/dlls/win32u/input.c
index 34cc3880cc9..2e1362eaff5 100644
--- a/dlls/win32u/input.c
+++ b/dlls/win32u/input.c
@@ -1222,6 +1222,12 @@ static BOOL set_active_window( HWND hwnd, HWND *prev, BOOL mouse, BOOL focus )
                       (LPARAM)previous );
         if (NtUserGetAncestor( hwnd, GA_PARENT ) == get_desktop_window())
             post_message( get_desktop_window(), WM_PARENTNOTIFY, WM_NCACTIVATE, (LPARAM)hwnd );
+
+        if (NtUserGetProp( hwnd, L"__WINE_RESTORE_WINDOW" ))
+        {
+            NtUserSetProp( hwnd, L"__WINE_RESTORE_WINDOW", NULL );
+            send_message( hwnd, WM_SYSCOMMAND, SC_RESTORE, 0 );
+        }
     }

     /* now change focus if necessary */
From ed85dc3dd49a6aae8347dae8a3b4300713fc3f6d Mon Sep 17 00:00:00 2001
From: Arkadiusz Hiler <ahiler@codeweavers.com>
Date: Fri, 2 Jul 2021 16:01:29 +0300
Subject: [PATCH] winex11.drv: Use __WINE_RESTORE_PROPERTY so Window is
 un-minimized on FocusIn.

On X11 / XWayland the PropertyNotify for WM_STATE change from
IconicState to NormalState arrives before the WM_TAKE_FOCUS
ClientMessage or the FocusIn event.

Converting that state change too early to a WM_SYSCOMMAND SC_RESTORE
message results in it (and the ACTIVATE events because of the previous
HAX) arriving without the window being set to foregrounds first.

This breaks the expectations of Project CARS 3 which tries on window
activation / restoration to re-acquire DirectInput devices with
cooperative level set to DISCL_FOREGROUND, which fails.

Signed-off-by: Arkadiusz Hiler <ahiler@codeweavers.com>

CW-Bug-Id: #19011
---
 dlls/winex11.drv/event.c | 11 +++++++----
 1 file changed, 7 insertions(+), 4 deletions(-)

diff --git a/dlls/winex11.drv/event.c b/dlls/winex11.drv/event.c
index 271a70940f1..3a903eebd7e 100644
--- a/dlls/winex11.drv/event.c
+++ b/dlls/winex11.drv/event.c
@@ -80,6 +80,8 @@ extern BOOL ximInComposeMode;
 #define XEMBED_UNREGISTER_ACCELERATOR 13
 #define XEMBED_ACTIVATE_ACCELERATOR   14

+static const WCHAR restore_window_propW[] = {'_','_','W','I','N','E','_','R','E','S','T','O','R','E','_','W','I','N','D','O','W',0};
+
 Bool (*pXGetEventData)( Display *display, XEvent /*XGenericEventCookie*/ *event ) = NULL;
 void (*pXFreeEventData)( Display *display, XEvent /*XGenericEventCookie*/ *event ) = NULL;

@@ -586,7 +588,7 @@ static inline BOOL can_activate_window( HWND hwnd )

     if (!(style & WS_VISIBLE)) return FALSE;
     if ((style & (WS_POPUP|WS_CHILD)) == WS_CHILD) return FALSE;
-    if (style & WS_MINIMIZE) return FALSE;
+    if ((style & WS_MINIMIZE) && !GetPropW( hwnd, restore_window_propW )) return FALSE;
     if (GetWindowLongW( hwnd, GWL_EXSTYLE ) & WS_EX_NOACTIVATE) return FALSE;
     if (hwnd == GetDesktopWindow()) return FALSE;
     if (GetWindowRect( hwnd, &rect ) && IsRectEmpty( &rect )) return FALSE;
@@ -1371,9 +1373,10 @@ static void handle_wm_state_notify( HWND hwnd, XPropertyEvent *event, BOOL updat
             {
                 TRACE( "restoring win %p/%lx\n", data->hwnd, data->whole_window );
                 release_win_data( data );
-                if ((style & (WS_MINIMIZE | WS_VISIBLE)) == (WS_MINIMIZE | WS_VISIBLE))
-                    SetActiveWindow( hwnd );
-                SendMessageW( hwnd, WM_SYSCOMMAND, SC_RESTORE, 0 );
+                if ((style & (WS_MINIMIZE | WS_VISIBLE)) == (WS_MINIMIZE | WS_VISIBLE) && GetActiveWindow() != hwnd)
+                    SetPropW( hwnd, restore_window_propW, (HANDLE) TRUE );
+                else
+                    SendMessageW( hwnd, WM_SYSCOMMAND, SC_RESTORE, 0 );
                 return;
             }
             TRACE( "not restoring win %p/%lx style %08x\n", data->hwnd, data->whole_window, style );
