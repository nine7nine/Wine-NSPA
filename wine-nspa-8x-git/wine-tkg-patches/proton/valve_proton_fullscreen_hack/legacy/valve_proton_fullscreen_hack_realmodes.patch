From 0a2e5ceddfd4b070328c515d450653259ca021f1 Mon Sep 17 00:00:00 2001
From: Tk-Glitch <ti3nou@gmail.com>
Date: Fri, 9 Aug 2019 01:37:25 +0200
Subject: winex11.drv: Report real display modes in the fs hack

With more intermedate modes added

Original patches from Proton 4.11-2, by Andrew Eikum <aeikum@codeweavers.com>


diff --git a/dlls/winex11.drv/settings.c b/dlls/winex11.drv/settings.c
index 589c159b29..04b2c0ba8c 100644
--- a/dlls/winex11.drv/settings.c
+++ b/dlls/winex11.drv/settings.c
@@ -21,6 +21,7 @@
 #include "config.h"
 #include <string.h>
 #include <stdio.h>
+#include <stdlib.h>
 #include <assert.h>
 #include <math.h>
 
@@ -61,12 +62,14 @@ struct x11drv_mode_info *X11DRV_Settings_SetHandlers(const char *name,
                                                      int reserve_depths)
 {
     handler_name = name;
-    pGetCurrentMode = pNewGCM;
-    pSetCurrentMode = pNewSCM;
+    if(pNewGCM)
+        pGetCurrentMode = pNewGCM;
+    if(pNewSCM)
+        pSetCurrentMode = pNewSCM;
     TRACE("Resolution settings now handled by: %s\n", name);
     if (reserve_depths)
-        /* leave room for other depths */
-        dd_max_modes = (3+1)*(nmodes);
+        /* leave room for other depths and refresh rates */
+        dd_max_modes = 2*(3+1)*(nmodes);
     else 
         dd_max_modes = nmodes;
 
@@ -82,16 +85,29 @@ struct x11drv_mode_info *X11DRV_Settings_SetHandlers(const char *name,
 }
 
 /* Add one mode to the master list */
-void X11DRV_Settings_AddOneMode(unsigned int width, unsigned int height, unsigned int bpp, unsigned int freq)
+BOOL X11DRV_Settings_AddOneMode(unsigned int width, unsigned int height, unsigned int bpp, unsigned int freq)
 {
+    unsigned int i;
     struct x11drv_mode_info *info = &dd_modes[dd_mode_count];
     DWORD dwBpp = screen_bpp;
     if (dd_mode_count >= dd_max_modes)
     {
         ERR("Maximum modes (%d) exceeded\n", dd_max_modes);
-        return;
+        return FALSE;
     }
     if (bpp == 0) bpp = dwBpp;
+
+    for(i = 0; i < dd_mode_count; ++i)
+    {
+        if(dd_modes[i].width == width &&
+                dd_modes[i].height == height &&
+                dd_modes[i].refresh_rate == freq &&
+                dd_modes[i].bpp == bpp)
+        {
+            return FALSE;
+        }
+    }
+
     info->width         = width;
     info->height        = height;
     info->refresh_rate  = freq;
@@ -99,8 +115,61 @@ void X11DRV_Settings_AddOneMode(unsigned int width, unsigned int height, unsigne
     TRACE("initialized mode %d: %dx%dx%d @%d Hz (%s)\n", 
           dd_mode_count, width, height, bpp, freq, handler_name);
     dd_mode_count++;
+
+    return TRUE;
+}
+
+static struct fs_mode {
+    int w, h;
+} fs_modes[] = {
+    /* this table should provide a few resolution options for common display
+     * ratios, so users can choose to render at lower resolution for
+     * performance. */
+    { 640,  480}, /*  4:3 */
+    { 800,  600}, /*  4:3 */
+    {1024,  768}, /*  4:3 */
+    {1600, 1200}, /*  4:3 */
+    { 960,  540}, /* 16:9 */
+    {1280,  720}, /* 16:9 */
+    {1600,  900}, /* 16:9 */
+    {1920, 1080}, /* 16:9 */
+    {2560, 1440}, /* 16:9 */
+    {2880, 1620}, /* 16:9 */
+    {3200, 1800}, /* 16:9 */
+    {1440,  900}, /*  8:5 */
+    {1680, 1050}, /*  8:5 */
+    {1920, 1200}, /*  8:5 */
+    {2560, 1600}, /*  8:5 */
+    {1440,  960}, /*  3:2 */
+    {1920, 1280}, /*  3:2 */
+    {2560, 1080}, /* 21:9 ultra-wide */
+    {1920,  800}, /* 12:5 */
+    {3840, 1600}, /* 12:5 */
+    {1280, 1024}, /*  5:4 */
+};
+
+static int sort_display_modes(const void *l, const void *r)
+{
+    const struct x11drv_mode_info *left = l, *right = r;
+
+    /* largest first */
+    if(left->width < right->width)
+        return 1;
+
+    if(left->width > right->width)
+        return -1;
+
+    if(left->height < right->height)
+        return 1;
+
+    if(left->height > right->height)
+        return -1;
+
+    return 0;
 }
 
+static int currentMode = -1, realMode = -1;
+
 /* copy all the current modes using the other color depths */
 void X11DRV_Settings_AddDepthModes(void)
 {
@@ -108,7 +177,34 @@ void X11DRV_Settings_AddDepthModes(void)
     int existing_modes = dd_mode_count;
     DWORD dwBpp = screen_bpp;
     const DWORD *depths = screen_bpp == 32 ? depths_32 : depths_24;
+    struct fs_mode real_mode;
+    unsigned int real_rate;
+
+    real_mode.w = dd_modes[realMode].width;
+    real_mode.h = dd_modes[realMode].height;
+    real_rate = dd_modes[realMode].refresh_rate;
+
+    /* Linux reports far fewer resolutions than Windows; add "missing" modes
+     * that some games may expect. */
+    for(i = 0; i < ARRAY_SIZE(fs_modes); ++i)
+    {
+        if(fs_modes[i].w <= real_mode.w &&
+                fs_modes[i].h <= real_mode.h)
+            X11DRV_Settings_AddOneMode(fs_modes[i].w, fs_modes[i].h, 0, dd_modes[realMode].refresh_rate);
+    }
 
+    qsort(dd_modes, dd_mode_count, sizeof(*dd_modes), sort_display_modes);
+
+    /* synthesize 60 FPS mode if needed */
+    if(real_rate != 60)
+    {
+        for(i = 0; i < existing_modes; ++i)
+        {
+            X11DRV_Settings_AddOneMode(dd_modes[i].width, dd_modes[i].height, dwBpp, 60);
+        }
+    }
+
+    existing_modes = dd_mode_count;
     for (j=0; j<3; j++)
     {
         if (depths[j] != dwBpp)
@@ -120,6 +216,8 @@ void X11DRV_Settings_AddDepthModes(void)
             }
         }
     }
+    
+    X11DRV_Settings_SetRealMode(real_mode.w, real_mode.h);
 }
 
 /* return the number of modes that are initialized */
@@ -132,51 +230,47 @@ unsigned int X11DRV_Settings_GetModeCount(void)
  * Default handlers if resolution switching is not enabled
  *
  */
-static int currentMode = 0;
 double fs_hack_user_to_real_w = 1., fs_hack_user_to_real_h = 1.;
 double fs_hack_real_to_user_w = 1., fs_hack_real_to_user_h = 1.;
 static int offs_x = 0, offs_y = 0;
 static int fs_width = 0, fs_height = 0;
 
+void X11DRV_Settings_SetRealMode(unsigned int w, unsigned int h)
+{
+    unsigned int i;
+
+    currentMode = realMode = -1;
+
+    for(i = 0; i < dd_mode_count; ++i)
+    {
+        if(dd_modes[i].width == w &&
+                dd_modes[i].height == h)
+        {
+            currentMode = i;
+            break;
+        }
+    }
+
+    if(currentMode < 0)
+    {
+        FIXME("Couldn't find current mode?! Returning 0...\n");
+        currentMode = 0;
+    }
+
+    realMode = currentMode;
+
+    TRACE("Set realMode to %d\n", realMode);
+}
+
 static int X11DRV_nores_GetCurrentMode(void)
 {
     return currentMode;
 }
 
-static struct fs_mode {
-    int w, h;
-} fs_modes[] = {
-    {0, 0}, /* mode 0 is the real mode */
-
-    /* this table should provide a few resolution options for common display
-     * ratios, so users can choose to render at lower resolution for
-     * performance. */
-    { 640,  480}, /*  4:3 */
-    { 800,  600}, /*  4:3 */
-    {1024,  768}, /*  4:3 */
-    {1600, 1200}, /*  4:3 */
-    { 960,  540}, /* 16:9 */
-    {1280,  720}, /* 16:9 */
-    {1600,  900}, /* 16:9 */
-    {1920, 1080}, /* 16:9 */
-    {2560, 1440}, /* 16:9 */
-    {2880, 1620}, /* 16:9 */
-    {3200, 1800}, /* 16:9 */
-    {1440,  900}, /*  8:5 */
-    {1680, 1050}, /*  8:5 */
-    {1920, 1200}, /*  8:5 */
-    {2560, 1600}, /*  8:5 */
-    {1440,  960}, /*  3:2 */
-    {1920, 1280}, /*  3:2 */
-    {2560, 1080}, /* 21:9 ultra-wide */
-    {1920,  800}, /* 12:5 */
-    {3840, 1600}, /* 12:5 */
-    {1280, 1024}, /*  5:4 */
-};
-
 BOOL fs_hack_enabled(void)
 {
-    return currentMode != 0;
+    return currentMode >= 0 &&
+        currentMode != realMode;
 }
 
 BOOL fs_hack_matches_current_mode(int w, int h)
@@ -189,8 +283,8 @@ BOOL fs_hack_matches_current_mode(int w, int h)
 BOOL fs_hack_matches_real_mode(int w, int h)
 {
     return fs_hack_enabled() &&
-        (w == fs_modes[0].w &&
-         h == fs_modes[0].h);
+        (w == dd_modes[realMode].width &&
+         h == dd_modes[realMode].height);
 }
 
 BOOL fs_hack_matches_last_mode(int w, int h)
@@ -316,22 +410,22 @@ static LONG X11DRV_nores_SetCurrentMode(int mode)
     }else{
         double w = dd_modes[currentMode].width;
         double h = dd_modes[currentMode].height;
-        if(fs_modes[0].w / (double)fs_modes[0].h < w / h){ /* real mode is narrower than fake mode */
+        if(dd_modes[realMode].width / (double)dd_modes[realMode].height < w / h){ /* real mode is narrower than fake mode */
             /* scale to fit width */
-            h = fs_modes[0].w * (h / w);
-            w = fs_modes[0].w;
+            h = dd_modes[realMode].width * (h / w);
+            w = dd_modes[realMode].width;
             offs_x = 0;
-            offs_y = (fs_modes[0].h - h) / 2;
-            fs_width = fs_modes[0].w;
+            offs_y = (dd_modes[realMode].height - h) / 2;
+            fs_width = dd_modes[realMode].width;
             fs_height = (int)h;
         }else{
             /* scale to fit height */
-            w = fs_modes[0].h * (w / h);
-            h = fs_modes[0].h;
-            offs_x = (fs_modes[0].w - w) / 2;
+            w = dd_modes[realMode].height * (w / h);
+            h = dd_modes[realMode].height;
+            offs_x = (dd_modes[realMode].width - w) / 2;
             offs_y = 0;
             fs_width = (int)w;
-            fs_height = fs_modes[0].h;
+            fs_height = dd_modes[realMode].height;
         }
         fs_hack_user_to_real_w = w / (double)dd_modes[currentMode].width;
         fs_hack_user_to_real_h = h / (double)dd_modes[currentMode].height;
@@ -362,24 +456,12 @@ POINT fs_hack_real_mode(void)
 
 void X11DRV_Settings_Init(void)
 {
-    int i;
     RECT primary = get_primary_monitor_rect();
     X11DRV_Settings_SetHandlers("NoRes", 
                                 X11DRV_nores_GetCurrentMode, 
                                 X11DRV_nores_SetCurrentMode, 
-                                sizeof(fs_modes) / sizeof(struct fs_mode), 1);
-    fs_modes[0].w = primary.right - primary.left;
-    fs_modes[0].h = primary.bottom - primary.top;
-    for(i = 0; i < sizeof(fs_modes) / sizeof(struct fs_mode); ++i){
-        if(i > 0 &&
-                ((fs_modes[i].w == fs_modes[0].w &&
-                  fs_modes[i].h == fs_modes[0].h) ||
-                 (fs_modes[i].w > fs_modes[0].w ||
-                  fs_modes[i].h > fs_modes[0].h)))
-            continue;
-        X11DRV_Settings_AddOneMode( fs_modes[i].w, fs_modes[i].h, 0, 60);
-    }
-    X11DRV_Settings_AddDepthModes();
+                                1, 0);
+    X11DRV_Settings_AddOneMode( primary.right - primary.left, primary.bottom - primary.top, 0, 60);
 }
 
 static BOOL get_display_device_reg_key(char *key, unsigned len)
diff --git a/dlls/winex11.drv/x11drv.h b/dlls/winex11.drv/x11drv.h
index bc13e69f35..c5caea9ad9 100644
--- a/dlls/winex11.drv/x11drv.h
+++ b/dlls/winex11.drv/x11drv.h
@@ -689,7 +689,7 @@ extern void X11DRV_resize_desktop(unsigned int width, unsigned int height) DECLS
 extern BOOL is_desktop_fullscreen(void) DECLSPEC_HIDDEN;
 extern BOOL create_desktop_win_data( Window win ) DECLSPEC_HIDDEN;
 extern void X11DRV_Settings_AddDepthModes(void) DECLSPEC_HIDDEN;
-extern void X11DRV_Settings_AddOneMode(unsigned int width, unsigned int height, unsigned int bpp, unsigned int freq) DECLSPEC_HIDDEN;
+extern BOOL X11DRV_Settings_AddOneMode(unsigned int width, unsigned int height, unsigned int bpp, unsigned int freq) DECLSPEC_HIDDEN;
 unsigned int X11DRV_Settings_GetModeCount(void) DECLSPEC_HIDDEN;
 void X11DRV_Settings_Init(void) DECLSPEC_HIDDEN;
 struct x11drv_mode_info *X11DRV_Settings_SetHandlers(const char *name,
@@ -697,6 +697,7 @@ struct x11drv_mode_info *X11DRV_Settings_SetHandlers(const char *name,
                                                      LONG (*pNewSCM)(int),
                                                      unsigned int nmodes,
                                                      int reserve_depths) DECLSPEC_HIDDEN;
+void X11DRV_Settings_SetRealMode(unsigned int w, unsigned int h) DECLSPEC_HIDDEN;
 
 void X11DRV_XF86VM_Init(void) DECLSPEC_HIDDEN;
 void X11DRV_XRandR_Init(void) DECLSPEC_HIDDEN;
diff --git a/dlls/winex11.drv/x11drv_main.c b/dlls/winex11.drv/x11drv_main.c
index dc70248f5f..afb0dce191 100644
--- a/dlls/winex11.drv/x11drv_main.c
+++ b/dlls/winex11.drv/x11drv_main.c
@@ -64,7 +64,7 @@ XPixmapFormatValues **pixmap_formats;
 unsigned int screen_bpp;
 Window root_window;
 BOOL usexvidmode = FALSE;
-BOOL usexrandr = FALSE;
+BOOL usexrandr = TRUE;
 BOOL usexcomposite = TRUE;
 BOOL use_xkb = TRUE;
 BOOL use_take_focus = TRUE;
diff --git a/dlls/winex11.drv/xrandr.c b/dlls/winex11.drv/xrandr.c
index 9f63310291..62906214d8 100644
--- a/dlls/winex11.drv/xrandr.c
+++ b/dlls/winex11.drv/xrandr.c
@@ -200,6 +200,9 @@ static void xrandr10_init_modes(void)
     int sizes_count;
     int i, j, nmodes = 0;
 
+    ERR("xrandr 1.2 support required\n");
+    return;
+
     sizes = pXRRSizes( gdi_display, DefaultScreen(gdi_display), &sizes_count );
     if (sizes_count <= 0) return;
 
@@ -444,7 +447,9 @@ static int xrandr12_init_modes(void)
     unsigned int only_one_resolution = 1, mode_count;
     XRRScreenResources *resources;
     XRROutputInfo *output_info;
+    XRRModeInfo *primary_mode = NULL;
     XRRCrtcInfo *crtc_info;
+    unsigned int primary_refresh, primary_dots;
     int ret = -1;
     int i, j;
 
@@ -471,6 +476,14 @@ static int xrandr12_init_modes(void)
         return ret;
     }
 
+    for (i = 0; i < resources->nmode; ++i)
+    {
+        if (resources->modes[i].id == crtc_info->mode)
+        {
+            primary_mode = &resources->modes[i];
+        }
+    }
+
     TRACE("CRTC %d: mode %#lx, %ux%u+%d+%d.\n", primary_crtc, crtc_info->mode,
           crtc_info->width, crtc_info->height, crtc_info->x, crtc_info->y);
 
@@ -497,10 +510,21 @@ static int xrandr12_init_modes(void)
     }
 
     dd_modes = X11DRV_Settings_SetHandlers( "XRandR 1.2",
-                                            xrandr12_get_current_mode,
-                                            xrandr12_set_current_mode,
+                                            NULL,
+                                            NULL,
                                             output_info->nmode, 1 );
 
+    if(primary_mode)
+    {
+        primary_dots = primary_mode->hTotal * primary_mode->vTotal;
+        primary_refresh = primary_dots ? (primary_mode->dotClock + primary_dots / 2) / primary_dots : 0;
+    }
+    else
+    {
+        WARN("Couldn't find primary mode! defaulting to 60 Hz\n");
+        primary_refresh = 60;
+    }
+
     xrandr_mode_count = 0;
     for (i = 0; i < output_info->nmode; ++i)
     {
@@ -510,12 +534,11 @@ static int xrandr12_init_modes(void)
 
             if (mode->id == output_info->modes[i])
             {
-                unsigned int dots = mode->hTotal * mode->vTotal;
-                unsigned int refresh = dots ? (mode->dotClock + dots / 2) / dots : 0;
-
-                TRACE("Adding mode %#lx: %ux%u@%u.\n", mode->id, mode->width, mode->height, refresh);
-                X11DRV_Settings_AddOneMode( mode->width, mode->height, 0, refresh );
-                xrandr12_modes[xrandr_mode_count++] = mode->id;
+                if(X11DRV_Settings_AddOneMode( mode->width, mode->height, 0, primary_refresh ))
+                {
+                    TRACE("Added mode %#lx: %ux%u@%u.\n", mode->id, mode->width, mode->height, primary_refresh);
+                    xrandr12_modes[xrandr_mode_count++] = mode->id;
+                }
                 break;
             }
         }
@@ -531,6 +554,11 @@ static int xrandr12_init_modes(void)
         }
     }
 
+    if(primary_mode)
+        X11DRV_Settings_SetRealMode(primary_mode->width, primary_mode->height);
+    else
+        X11DRV_Settings_SetRealMode(crtc_info->width, crtc_info->height);
+
     /* Recent (304.64, possibly earlier) versions of the nvidia driver only
      * report a DFP's native mode through RandR 1.2 / 1.3. Standard DMT modes
      * are only listed through RandR 1.0 / 1.1. This is completely useless,

From 4c9b5d6b9e668459699caaa8c56dce021277994c Mon Sep 17 00:00:00 2001
From: Andrew Eikum <aeikum@codeweavers.com>
Date: Fri, 2 Aug 2019 13:49:11 -0500
Subject: [PATCH] winex11.drv: Fix real mode resolution lookup

---
 dlls/winex11.drv/settings.c | 8 ++++----
 1 file changed, 4 insertions(+), 4 deletions(-)

diff --git a/dlls/winex11.drv/settings.c b/dlls/winex11.drv/settings.c
index 7a528d6c593..d0970e845c3 100644
--- a/dlls/winex11.drv/settings.c
+++ b/dlls/winex11.drv/settings.c
@@ -431,8 +431,8 @@ static LONG X11DRV_nores_SetCurrentMode(int mode)
         fs_hack_real_to_user_h = dd_modes[currentMode].height / (double)h;
 
         X11DRV_resize_desktop(
-                DisplayWidth(gdi_display, default_visual.screen) - (dd_modes[0].width - w),
-                DisplayHeight(gdi_display, default_visual.screen) - (dd_modes[0].height - h));
+                DisplayWidth(gdi_display, default_visual.screen) - (dd_modes[realMode].width - w),
+                DisplayHeight(gdi_display, default_visual.screen) - (dd_modes[realMode].height - h));
     }
 
     return DISP_CHANGE_SUCCESSFUL;
@@ -447,8 +447,8 @@ POINT fs_hack_current_mode(void)
 
 POINT fs_hack_real_mode(void)
 {
-    POINT ret = { dd_modes[0].width,
-        dd_modes[0].height };
+    POINT ret = { dd_modes[realMode].width,
+        dd_modes[realMode].height };
     return ret;
 }
 
From f8a795dd545ab1446dc370e7024ec5eac50aec55 Mon Sep 17 00:00:00 2001
From: Andrew Eikum <aeikum@codeweavers.com>
Date: Mon, 12 Aug 2019 15:10:19 -0500
Subject: [PATCH] winex11.drv: Account for crtc transformation when reporting
 modes

---
 dlls/winex11.drv/xrandr.c | 31 ++++++++++++++++++++++++++-----
 1 file changed, 26 insertions(+), 5 deletions(-)

diff --git a/dlls/winex11.drv/xrandr.c b/dlls/winex11.drv/xrandr.c
index b78df2bd8f8..c9bb5bb5943 100644
--- a/dlls/winex11.drv/xrandr.c
+++ b/dlls/winex11.drv/xrandr.c
@@ -447,7 +447,7 @@ static int xrandr12_init_modes(void)
     unsigned int only_one_resolution = 1, mode_count;
     XRRScreenResources *resources;
     XRROutputInfo *output_info;
-    XRRModeInfo *primary_mode = NULL;
+    XRRModeInfo *primary_mode = NULL, rotated_mode;
     XRRCrtcInfo *crtc_info;
     unsigned int primary_refresh, primary_dots;
     int ret = -1;
@@ -533,10 +533,20 @@ static int xrandr12_init_modes(void)
 
             if (mode->id == output_info->modes[i])
             {
-                if(X11DRV_Settings_AddOneMode( mode->width, mode->height, 0, primary_refresh ))
+
+                rotated_mode = *mode;
+                if((crtc_info->rotation & RR_Rotate_90) ||
+                        (crtc_info->rotation & RR_Rotate_270))
                 {
-                    TRACE("Added mode %#lx: %ux%u@%u.\n", mode->id, mode->width, mode->height, primary_refresh);
-                    xrandr12_modes[xrandr_mode_count++] = mode->id;
+                    int tmp = rotated_mode.width;
+                    rotated_mode.width = rotated_mode.height;
+                    rotated_mode.height = tmp;
+                }
+
+                if(X11DRV_Settings_AddOneMode( rotated_mode.width, rotated_mode.height, 0, primary_refresh ))
+                {
+                    TRACE("Added mode %#lx: %ux%u@%u.\n", rotated_mode.id, rotated_mode.width, rotated_mode.height, primary_refresh);
+                    xrandr12_modes[xrandr_mode_count++] = rotated_mode.id;
                 }
                 break;
             }
@@ -554,7 +564,18 @@ static int xrandr12_init_modes(void)
     }
 
     if(primary_mode)
-        X11DRV_Settings_SetRealMode(primary_mode->width, primary_mode->height);
+    {
+        rotated_mode = *primary_mode;
+        if((crtc_info->rotation & RR_Rotate_90) ||
+                (crtc_info->rotation & RR_Rotate_270))
+        {
+            int tmp = rotated_mode.width;
+            rotated_mode.width = rotated_mode.height;
+            rotated_mode.height = tmp;
+        }
+
+        X11DRV_Settings_SetRealMode(rotated_mode.width, rotated_mode.height);
+    }
     else
         X11DRV_Settings_SetRealMode(crtc_info->width, crtc_info->height);
 
From b897b017d28457bdb8a1d75b25f8758234978608 Mon Sep 17 00:00:00 2001
From: Andrew Eikum <aeikum@codeweavers.com>
Date: Tue, 13 Aug 2019 13:20:24 -0500
Subject: [PATCH] winex11.drv: Don't report real modes that are larger than the
 current mode

---
 dlls/winex11.drv/xrandr.c | 42 ++++++++++++++++++++-------------------
 1 file changed, 22 insertions(+), 20 deletions(-)

diff --git a/dlls/winex11.drv/xrandr.c b/dlls/winex11.drv/xrandr.c
index c9bb5bb5943..06e5462f59a 100644
--- a/dlls/winex11.drv/xrandr.c
+++ b/dlls/winex11.drv/xrandr.c
@@ -444,10 +444,10 @@ static XRRCrtcInfo *xrandr12_get_primary_crtc_info( XRRScreenResources *resource
 
 static int xrandr12_init_modes(void)
 {
-    unsigned int only_one_resolution = 1, mode_count;
+    unsigned int only_one_resolution = 1, mode_count, primary_width, primary_height;
     XRRScreenResources *resources;
     XRROutputInfo *output_info;
-    XRRModeInfo *primary_mode = NULL, rotated_mode;
+    XRRModeInfo *primary_mode = NULL;
     XRRCrtcInfo *crtc_info;
     unsigned int primary_refresh, primary_dots;
     int ret = -1;
@@ -519,11 +519,23 @@ static int xrandr12_init_modes(void)
     {
         primary_dots = primary_mode->hTotal * primary_mode->vTotal;
         primary_refresh = primary_dots ? (primary_mode->dotClock + primary_dots / 2) / primary_dots : 0;
+        primary_width = primary_mode->width;
+        primary_height = primary_mode->height;
     }
     else
     {
         WARN("Couldn't find primary mode! defaulting to 60 Hz\n");
         primary_refresh = 60;
+        primary_width = crtc_info->width;
+        primary_height = crtc_info->height;
+    }
+
+    if((crtc_info->rotation & RR_Rotate_90) ||
+            (crtc_info->rotation & RR_Rotate_270))
+    {
+        unsigned int tmp = primary_width;
+        primary_width = primary_height;
+        primary_height = tmp;
     }
 
     xrandr_mode_count = 0;
@@ -534,16 +548,18 @@ static int xrandr12_init_modes(void)
             if (mode->id == output_info->modes[i])
             {
 
-                rotated_mode = *mode;
+                XRRModeInfo rotated_mode = *mode;
                 if((crtc_info->rotation & RR_Rotate_90) ||
                         (crtc_info->rotation & RR_Rotate_270))
                 {
-                    int tmp = rotated_mode.width;
+                    unsigned int tmp = rotated_mode.width;
                     rotated_mode.width = rotated_mode.height;
                     rotated_mode.height = tmp;
                 }
 
-                if(X11DRV_Settings_AddOneMode( rotated_mode.width, rotated_mode.height, 0, primary_refresh ))
+                if(rotated_mode.width <= primary_width &&
+                        rotated_mode.height <= primary_height &&
+                        X11DRV_Settings_AddOneMode( rotated_mode.width, rotated_mode.height, 0, primary_refresh ))
                 {
                     TRACE("Added mode %#lx: %ux%u@%u.\n", rotated_mode.id, rotated_mode.width, rotated_mode.height, primary_refresh);
                     xrandr12_modes[xrandr_mode_count++] = rotated_mode.id;
@@ -563,21 +579,7 @@ static int xrandr12_init_modes(void)
         }
     }
 
-    if(primary_mode)
-    {
-        rotated_mode = *primary_mode;
-        if((crtc_info->rotation & RR_Rotate_90) ||
-                (crtc_info->rotation & RR_Rotate_270))
-        {
-            int tmp = rotated_mode.width;
-            rotated_mode.width = rotated_mode.height;
-            rotated_mode.height = tmp;
-        }
-
-        X11DRV_Settings_SetRealMode(rotated_mode.width, rotated_mode.height);
-    }
-    else
-        X11DRV_Settings_SetRealMode(crtc_info->width, crtc_info->height);
+    X11DRV_Settings_SetRealMode(primary_width, primary_height);
 
     /* Recent (304.64, possibly earlier) versions of the nvidia driver only
      * report a DFP's native mode through RandR 1.2 / 1.3. Standard DMT modes
