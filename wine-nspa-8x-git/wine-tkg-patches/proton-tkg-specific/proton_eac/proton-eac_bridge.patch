From b39cb3bfe9dafd6affe74f7657cd7fe41b52137f Mon Sep 17 00:00:00 2001
From: Derek Lesho <dlesho@codeweavers.com>
Date: Mon, 6 Dec 2021 15:13:40 +0100
Subject: [PATCH] ntdll: Load EAC bridge files from PROTON_EAC_RUNTIME path.

---
 dlls/ntdll/unix/loader.c | 23 ++++++++++++++++++++++-
 1 file changed, 22 insertions(+), 1 deletion(-)

diff --git a/dlls/ntdll/unix/loader.c b/dlls/ntdll/unix/loader.c
index 711b7224bfc..1d4160727e4 100644
--- a/dlls/ntdll/unix/loader.c
+++ b/dlls/ntdll/unix/loader.c
@@ -526,7 +526,7 @@ static const char *get_pe_dir( WORD machine )

 static void set_dll_path(void)
 {
-    char *p, *path = getenv( "WINEDLLPATH" ), *be_runtime = getenv( "PROTON_BATTLEYE_RUNTIME" );
+    char *p, *path = getenv( "WINEDLLPATH" ), *be_runtime = getenv( "PROTON_BATTLEYE_RUNTIME" ), *eac_runtime = getenv( "PROTON_EAC_RUNTIME" );
     int i, count = 0;

     if (path) for (p = path, count = 1; *p; p++) if (*p == ':') count++;
@@ -534,6 +534,9 @@ static void set_dll_path(void)
     if (be_runtime)
         count += 2;

+    if (eac_runtime)
+        count += 2;
+
     dll_paths = malloc( (count + 2) * sizeof(*dll_paths) );
     count = 0;

@@ -564,6 +567,24 @@ static void set_dll_path(void)
         dll_paths[count++] = p;
     }

+    if (eac_runtime)
+    {
+        const char lib32[] = "/v2/lib32/";
+        const char lib64[] = "/v2/lib64/";
+
+        p = malloc( strlen(eac_runtime) + strlen(lib32) + 1 );
+        strcpy(p, eac_runtime);
+        strcat(p, lib32);
+
+        dll_paths[count++] = p;
+
+        p = malloc( strlen(eac_runtime) + strlen(lib64) + 1 );
+        strcpy(p, eac_runtime);
+        strcat(p, lib64);
+
+        dll_paths[count++] = p;
+    }
+
     for (i = 0; i < count; i++) dll_path_maxlen = max( dll_path_maxlen, strlen(dll_paths[i]) );
     dll_paths[count] = NULL;
 }
From 240b2813a7a5e0fe1cda611961f78b2a9b0c99be Mon Sep 17 00:00:00 2001
From: Derek Lesho <dlesho@codeweavers.com>
Date: Tue, 18 Jan 2022 17:16:15 -0500
Subject: [PATCH] ntdll: Only load EAC bridge when Linux library is present.

---
 dlls/ntdll/unix/loadorder.c | 39 +++++++++++++++++++++++++++++++++++++
 1 file changed, 39 insertions(+)

diff --git a/dlls/ntdll/unix/loadorder.c b/dlls/ntdll/unix/loadorder.c
index aa987a80186..be25b2213d9 100644
--- a/dlls/ntdll/unix/loadorder.c
+++ b/dlls/ntdll/unix/loadorder.c
@@ -378,6 +378,10 @@ void set_load_order_app_name( const WCHAR *app_name )
  */
 enum loadorder get_load_order( const UNICODE_STRING *nt_name )
 {
+    static const WCHAR easyanticheat_x86W[] = {'e','a','s','y','a','n','t','i','c','h','e','a','t','_','x','8','6','.','d','l','l',0};
+    static const WCHAR easyanticheat_x64W[] = {'e','a','s','y','a','n','t','i','c','h','e','a','t','_','x','6','4','.','d','l','l',0};
+    static const WCHAR soW[] = {'s','o',0};
+
     static const WCHAR prefixW[] = {'\\','?','?','\\'};
     enum loadorder ret = LO_INVALID;
     const WCHAR *path = nt_name->Buffer;
@@ -391,6 +395,41 @@ enum loadorder get_load_order( const UNICODE_STRING *nt_name )

     TRACE("looking for %s\n", debugstr_w(path));

+    /* HACK: special logic for easyanticheat bridge: only load the bridge (builtin) if there exists a native version of the library next to the windows version */
+    basename = get_basename((WCHAR *)path);
+    if (!wcsicmp(basename, easyanticheat_x86W) || !wcsicmp(basename, easyanticheat_x64W))
+    {
+        UNICODE_STRING eac_unix_name;
+        OBJECT_ATTRIBUTES attr;
+        char *unix_path = NULL;
+        NTSTATUS status;
+
+        len = wcslen(nt_name->Buffer);
+        eac_unix_name.Buffer = malloc( (len + 1) * sizeof(WCHAR) );
+        wcscpy(eac_unix_name.Buffer, nt_name->Buffer);
+
+        basename = get_basename(eac_unix_name.Buffer);
+        wcscpy(&basename[18], soW);
+        eac_unix_name.Length = eac_unix_name.MaximumLength = wcslen(eac_unix_name.Buffer) * sizeof(WCHAR);
+        InitializeObjectAttributes(&attr, &eac_unix_name, 0, NULL, NULL);
+
+        if (!(status = nt_to_unix_file_name(&attr, &unix_path, FILE_OPEN)))
+        {
+            free(unix_path);
+            free(eac_unix_name.Buffer);
+            ret = LO_BUILTIN;
+            TRACE( "got hardcoded %s for %s, as the eac unix library is present\n", debugstr_loadorder(ret), debugstr_w(path) );
+            return ret;
+        }
+        else
+        {
+            ret = LO_NATIVE;
+            TRACE( "got hardcoded %s for %s, as the eac unix library (%s) is not present. status %x\n", debugstr_loadorder(ret), debugstr_w(path), debugstr_w(eac_unix_name.Buffer), status );
+            free(eac_unix_name.Buffer);
+            return ret;
+        }
+    }
+
     /* Strip path information if the module resides in the system directory
      */
     if (!wcsnicmp( system_dir + 4, path, wcslen(system_dir) - 4 ))

From 9dce79072ef483dda3674345eaf2274fd06dac89 Mon Sep 17 00:00:00 2001
From: Derek Lesho <dlesho@codeweavers.com>
Date: Fri, 21 Jan 2022 14:42:12 -0500
Subject: [PATCH] kernelbase: Add stub for GetConsoleSelectionInfo.

Signed-off-by: Derek Lesho <dlesho@codeweavers.com>
---
 dlls/kernel32/kernel32.spec     | 2 +-
 dlls/kernelbase/console.c       | 8 ++++++++
 dlls/kernelbase/kernelbase.spec | 1 +
 3 files changed, 10 insertions(+), 1 deletion(-)

diff --git a/dlls/kernel32/kernel32.spec b/dlls/kernel32/kernel32.spec
index 1d89c7f3cc0..37f419116ad 100644
--- a/dlls/kernel32/kernel32.spec
+++ b/dlls/kernel32/kernel32.spec
@@ -616,7 +616,7 @@
 @ stdcall -import GetConsoleProcessList(ptr long)
 @ stdcall -import GetConsoleScreenBufferInfo(long ptr)
 @ stdcall -import GetConsoleScreenBufferInfoEx(long ptr)
-# @ stub GetConsoleSelectionInfo
+@ stdcall -import GetConsoleSelectionInfo(ptr)
 @ stdcall -import GetConsoleTitleA(ptr long)
 @ stdcall -import GetConsoleTitleW(ptr long)
 @ stdcall -import GetConsoleWindow()
diff --git a/dlls/kernelbase/console.c b/dlls/kernelbase/console.c
index a7eeb439232..98f2483011b 100644
--- a/dlls/kernelbase/console.c
+++ b/dlls/kernelbase/console.c
@@ -742,6 +742,14 @@ BOOL WINAPI DECLSPEC_HOTPATCH GetConsoleScreenBufferInfoEx( HANDLE handle,
 }


+BOOL WINAPI DECLSPEC_HOTPATCH GetConsoleSelectionInfo(CONSOLE_SELECTION_INFO *info)
+{
+    FIXME("stub (%p)\n", info);
+    info->dwFlags = CONSOLE_NO_SELECTION;
+    return TRUE;
+}
+
+
 /******************************************************************************
  *	GetConsoleTitleW   (kernelbase.@)
  */
diff --git a/dlls/kernelbase/kernelbase.spec b/dlls/kernelbase/kernelbase.spec
index abbb137ef7f..b61c83e5ed9 100644
--- a/dlls/kernelbase/kernelbase.spec
+++ b/dlls/kernelbase/kernelbase.spec
@@ -449,6 +449,7 @@
 @ stdcall GetConsoleProcessList(ptr long)
 @ stdcall GetConsoleScreenBufferInfo(long ptr)
 @ stdcall GetConsoleScreenBufferInfoEx(long ptr)
+@ stdcall GetConsoleSelectionInfo(ptr)
 @ stdcall GetConsoleTitleA(ptr long)
 @ stdcall GetConsoleTitleW(ptr long)
 @ stdcall GetConsoleWindow()

