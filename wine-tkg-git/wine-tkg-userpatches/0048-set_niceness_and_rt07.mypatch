--- a/server/thread.c	2022-01-10 23:14:10.491774688 -0500
+++ b/server/thread.c	2022-01-10 23:11:05.985978485 -0500
@@ -751,6 +751,42 @@ static int get_unix_niceness( int base_p
     return min + (base_priority - 1) * range / 14;
 }
 
+static int get_rt_priority( int priority_class, int priority )
+{
+    int min, max, base_priority;
+
+    min = sched_get_priority_min( SCHED_FIFO );
+    max = sched_get_priority_max( SCHED_FIFO );
+
+    // RT priority for threads must be below kernel-mode APC, TIME_CRITICAL threads and Wineserver.
+    if ((base_priority = get_priority( "WINE_RT_PRIO", min, max )) != -1)
+    {
+        thread_base_priority = base_priority - 1;
+    }
+    switch (priority_class) {
+    case PROCESS_PRIOCLASS_REALTIME:
+        switch (priority) {
+        case THREAD_PRIORITY_IDLE: return 0;
+        case -7: return 0;
+        case -5: return 0;
+        case -4: return 0;
+        case -3: return 0;
+        case THREAD_PRIORITY_LOWEST: return -10 + thread_base_priority;
+        case THREAD_PRIORITY_BELOW_NORMAL: return -8 + thread_base_priority;
+        case THREAD_PRIORITY_NORMAL: return -6 + thread_base_priority;
+        case THREAD_PRIORITY_ABOVE_NORMAL: return -4 + thread_base_priority;
+        case THREAD_PRIORITY_HIGHEST: return -2 + thread_base_priority;
+        case 3: return -1 + thread_base_priority;
+        case 4: return -1 + thread_base_priority;
+        case 5: return -1 + thread_base_priority;
+        case 6: return -1 + thread_base_priority;  
+        case THREAD_PRIORITY_TIME_CRITICAL: return thread_base_priority;
+        }
+    }
+    return 0;
+}
+
+
 #define THREAD_PRIORITY_REALTIME_HIGHEST 6
 #define THREAD_PRIORITY_REALTIME_LOWEST -7
 
@@ -801,48 +837,27 @@ static void apply_thread_priority( struc
         struct sched_param param;
         if (sched_getparam( thread->unix_tid, &param ) != 0)
             return;
-
-    if ((priority_class == PROCESS_PRIOCLASS_REALTIME) && (priority >= THREAD_PRIORITY_TIME_CRITICAL))
+    
+    // Set RT for realtime process threads
+    if ((priority_class == PROCESS_PRIOCLASS_REALTIME) && (priority >= THREAD_PRIORITY_TIME_CRITICAL || THREAD_PRIORITY_HIGHEST))
     {
-        param.sched_priority = thread_base_priority;
+        param.sched_priority = get_rt_priority( thread->process->priority, priority );
         if (sched_setscheduler( thread->unix_tid, SCHED_FIFO|SCHED_RESET_ON_FORK, &param ) == 0)
             return;
     }
-    else if ((priority_class == PROCESS_PRIOCLASS_REALTIME) && (priority >= THREAD_PRIORITY_HIGHEST))
-    {
-        param.sched_priority = thread_base_priority -2;
-        if (sched_setscheduler( thread->unix_tid, wine_rt_policy|SCHED_RESET_ON_FORK, &param ) == 0)
-            return;
-    }
-    else if ((priority_class == PROCESS_PRIOCLASS_REALTIME) && (priority >= THREAD_PRIORITY_ABOVE_NORMAL))
-    {
-        param.sched_priority = thread_base_priority -4;
-        if (sched_setscheduler( thread->unix_tid, wine_rt_policy|SCHED_RESET_ON_FORK, &param ) == 0)
-            return;
-    }
-    else if ((priority_class == PROCESS_PRIOCLASS_REALTIME) && (priority >= THREAD_PRIORITY_NORMAL))
+    else if ((priority_class == PROCESS_PRIOCLASS_REALTIME) && (priority <= THREAD_PRIORITY_TIME_CRITICAL || THREAD_PRIORITY_HIGHEST))
     {
-        param.sched_priority = thread_base_priority -6;
+        param.sched_priority = get_rt_priority( thread->process->priority, priority );
         if (sched_setscheduler( thread->unix_tid, wine_rt_policy|SCHED_RESET_ON_FORK, &param ) == 0)
             return;
     }
-    else if ((priority_class == PROCESS_PRIOCLASS_REALTIME) && (priority <= THREAD_PRIORITY_NORMAL))
-    {
-        param.sched_priority = thread_base_priority -8;
-        if (sched_setscheduler( thread->unix_tid, wine_rt_policy|SCHED_RESET_ON_FORK, &param ) == 0)
-            return;
-    }  
-#ifdef __linux__
-#ifdef HAVE_SETPRIORITY
-    if (limit < 0)
+    else
     {
+    // set niceness      
         niceness = get_unix_niceness( get_base_priority( priority_class, priority ), limit );
         if (setpriority( PRIO_PROCESS, thread->unix_tid, niceness ) != 0)
-            fprintf( stderr, "wine: setpriority %d for pid %d failed: %d\n", niceness, thread->unix_tid, errno );
-        return;
+            return;
     }
-#endif
-#endif
 }
 
 int set_thread_priority( struct thread *thread, int priority_class, int priority )

