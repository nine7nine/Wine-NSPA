--- a/server/scheduler.c	2022-01-12 10:33:36.024073894 -0500
+++ b/server/scheduler.c	2022-01-12 10:28:57.693165237 -0500
@@ -46,11 +46,11 @@
 
 #if defined(__linux__) && defined(HAVE_SYS_RESOURCE_H) && defined(HAVE_SCHED_H)
 
-static int thread_base_priority = -1;
+static int thr_ceiling_prio = -1;
 static int wine_rt_policy = -1;
 
 /* gets the priority value from an environment variable */
-static int get_priority( const char *variable, int min, int max )
+static int get_sch_priority( const char *variable, int min, int max )
 {
     const char *env;
     int val;
@@ -86,7 +86,7 @@ void init_scheduler( void )
     } 
 
     /* change the wineserver priority */
-    if ((priority = get_priority( "WINE_RT_PRIO", min, max -1)) != -1)
+    if ((priority = get_sch_priority( "WINE_RT_PRIO", min, max -1)) != -1)
     {       
         struct sched_param param;
         memset( &param, 0, sizeof(param) );
@@ -108,12 +108,12 @@ void init_scheduler( void )
     }
 
     /* determine base priority which will be used for all threads */
-    if ((priority = get_priority( "WINE_RT_PRIO", min, max )) != -1)
+    if ((priority = get_sch_priority( "WINE_RT_PRIO", min, max )) != -1)
     {
-        thread_base_priority = priority;
+        thr_ceiling_prio = priority -1;
 
         if (debug_level) fprintf( stderr, "wineserver: initialized max user thread priority to %d\n",
-                                  thread_base_priority );
+                                  thr_ceiling_prio );
     }
 }
 
@@ -130,7 +130,7 @@ void set_scheduler_priority( struct thre
             wine_rt_policy = SCHED_FIFO;
     } 
 
-    if (thread_base_priority == -1) return;
+    if (thr_ceiling_prio == -1) return;
     if (thread->unix_tid == -1) return;
     if (thread->fsync_idx == -1) return;
  
@@ -139,36 +139,36 @@ void set_scheduler_priority( struct thre
     if (thread->priority >= THREAD_PRIORITY_TIME_CRITICAL )
     {
         wine_rt_policy = SCHED_FIFO;
-        param.sched_priority = thread_base_priority -1;
+        param.sched_priority = thr_ceiling_prio;
     }
     else if (thread->priority >= THREAD_PRIORITY_HIGHEST)
     {
         wine_rt_policy = SCHED_FIFO;
-        param.sched_priority = thread_base_priority -3;
+        param.sched_priority = thr_ceiling_prio -4;
     }
     else if (thread->priority >= THREAD_PRIORITY_ABOVE_NORMAL)
     {
-        param.sched_priority = thread_base_priority -5;
+        param.sched_priority = thr_ceiling_prio -6;
     }
     else if (thread->priority >= THREAD_PRIORITY_NORMAL)
     {
-        param.sched_priority = thread_base_priority -7;
+        param.sched_priority = thr_ceiling_prio -8;
     }
     else if (thread->priority >= THREAD_PRIORITY_BELOW_NORMAL)
     {
-        param.sched_priority = thread_base_priority -9;
+        param.sched_priority = thr_ceiling_prio -10;
     } 
     else if (thread->priority >= THREAD_PRIORITY_LOWEST)
     {
-        param.sched_priority = thread_base_priority -11;
+        param.sched_priority = thr_ceiling_prio -12;
     }   
     else if (thread->priority >= THREAD_PRIORITY_IDLE)
     {
-        param.sched_priority = thread_base_priority -13;
+        param.sched_priority = thr_ceiling_prio -14;
     }
     else
     {
-        param.sched_priority = thread_base_priority -15;
+        param.sched_priority = thr_ceiling_prio -16;
     }
 
     if (sched_setscheduler(thread->unix_tid, wine_rt_policy | SCHED_RESET_ON_FORK, &param) == -1 &&
--- a/dlls/ntdll/unix/thread.c	2022-01-12 10:34:51.624213277 -0500
+++ b/dlls/ntdll/unix/thread.c	2022-01-12 10:34:10.843758691 -0500
@@ -79,10 +79,10 @@ WINE_DECLARE_DEBUG_CHANNEL(seh);
 #if NSPA_RT_SYNC
 
 // We set the synchronization threads' RT priority from within Ntdll.
-static int thread_apc_priority = -1;
+static int thr_apc_priority = -1;
 
 /* gets the priority value from an environment variable */
-static int get_priority( const char *variable, int min, int max )
+static int get_ntdll_priority( const char *variable, int min, int max )
 {
     const char *env;
     int val;
@@ -97,7 +97,7 @@ static int get_priority( const char *var
 
 static int priority;
 
-int ntdll_set_sync_realtime (pthread_t pthread_id, int ntdll_rt_policy, int priority)
+int ntdll_set_thr_realtime (pthread_t pthread_id, int ntdll_rt_policy, int priority)
 {
     // Get RT policy
     const char *policyStr = getenv("NTDLL_RT_POLICY");
@@ -113,12 +113,12 @@ int ntdll_set_sync_realtime (pthread_t p
             ntdll_rt_policy = SCHED_FIFO;
     }
    
-    if ((apc_priority = get_priority( "NTDLL_RT_PRIO", min, max -1)) != -1)
+    if ((apc_priority = get_ntdll_priority( "NTDLL_RT_PRIO", min, max -1)) != -1)
     {
-        thread_apc_priority = apc_priority;
+        thr_apc_priority = apc_priority;
     }
 	struct sched_param param;	
-	param.sched_priority = thread_apc_priority;
+	param.sched_priority = thr_apc_priority;
 
 	return pthread_setschedparam (pthread_id, ntdll_rt_policy, &param);
 }
@@ -1452,7 +1452,7 @@ done:
 
         // set RT for sync threads
         pthread_attr_setinheritsched(&pthread_attr, PTHREAD_EXPLICIT_SCHED);
-        ntdll_set_sync_realtime(validSyncThread, ntdll_rt_policy, priority);
+        ntdll_set_thr_realtime(validSyncThread, ntdll_rt_policy, priority);
     }
 #endif
     return STATUS_SUCCESS;

--- a/server/thread.c	2022-01-12 10:35:33.403049539 -0500
+++ b/server/thread.c	2022-01-12 10:31:02.409785520 -0500
@@ -66,10 +66,10 @@
 #include <sys/resource.h>
 #endif
 
-static int thread_base_priority = -1;
+static int thr_rtpc_priority = -1;
 
 /* gets the priority value from an environment variable */
-static int get_priority( const char *variable, int min, int max )
+static int get_srv_priority( const char *variable, int min, int max )
 {
     const char *env;
     int val;
@@ -751,7 +751,7 @@ static int get_unix_niceness( int base_p
     return min + (base_priority - 1) * range / 14;
 }
 
-static int get_rt_priority( int priority_class, int priority )
+static int get_rtpc_priority( int priority_class, int priority )
 {
     int min, max, rt_base_priority;
 
@@ -759,28 +759,28 @@ static int get_rt_priority( int priority
     max = sched_get_priority_max( SCHED_FIFO );
 
     // RT priority for threads must be below kernel-mode APC, TIME_CRITICAL threads and Wineserver.
-    if ((rt_base_priority = get_priority( "WINE_RT_PRIO", min, max )) != -1)
+    if ((rt_base_priority = get_srv_priority( "WINE_RT_PRIO", min, max )) != -1)
     {
-        thread_base_priority = rt_base_priority - 1;
+        thr_rtpc_priority = rt_base_priority -1;
     }
     switch (priority_class) {
     case PROCESS_PRIOCLASS_REALTIME:
         switch (priority) {
-        case THREAD_PRIORITY_IDLE: return -12;
-        case -7: return -11;
-        case -5: return -11;
-        case -4: return -11;
-        case -3: return -11;
-        case THREAD_PRIORITY_LOWEST: return -10 + thread_base_priority;
-        case THREAD_PRIORITY_BELOW_NORMAL: return -8 + thread_base_priority;
-        case THREAD_PRIORITY_NORMAL: return -6 + thread_base_priority;
-        case THREAD_PRIORITY_ABOVE_NORMAL: return -4 + thread_base_priority;
-        case THREAD_PRIORITY_HIGHEST: return -2 + thread_base_priority;
-        case 3: return -1 + thread_base_priority;
-        case 4: return -1 + thread_base_priority;
-        case 5: return -1 + thread_base_priority;
-        case 6: return -1 + thread_base_priority;  
-        case THREAD_PRIORITY_TIME_CRITICAL: return thread_base_priority;
+        case THREAD_PRIORITY_IDLE: return -14;
+        case -7: return -12;
+        case -5: return -12;
+        case -4: return -12;
+        case -3: return -12;
+        case THREAD_PRIORITY_LOWEST: return -10;
+        case THREAD_PRIORITY_BELOW_NORMAL: -8;
+        case THREAD_PRIORITY_NORMAL: return -6;
+        case THREAD_PRIORITY_ABOVE_NORMAL: return -4;
+        case THREAD_PRIORITY_HIGHEST: return -2 + thr_rtpc_priority;
+        case 3: return -1 + thr_rtpc_priority;
+        case 4: return -1 + thr_rtpc_priority;
+        case 5: return -1 + thr_rtpc_priority;
+        case 6: return -1 + thr_rtpc_priority;  
+        case THREAD_PRIORITY_TIME_CRITICAL: return thr_rtpc_priority;
         }
     }
     return 0;
@@ -812,9 +812,9 @@ static void apply_thread_priority( struc
     max = sched_get_priority_max( SCHED_FIFO );
 
     // RT priority for threads must be below kernel-mode APC, TIME_CRITICAL threads and Wineserver.
-    if ((rt_base_priority = get_priority( "WINE_RT_PRIO", min, max )) != -1)
+    if ((rt_base_priority = get_srv_priority( "WINE_RT_PRIO", min, max )) != -1)
     {
-        thread_base_priority = rt_base_priority - 1;
+        thr_rtpc_priority = rt_base_priority;
     }
     
     // Set the RT policy      
@@ -841,13 +841,13 @@ static void apply_thread_priority( struc
     // Set RT for realtime process threads
     if ((priority_class == PROCESS_PRIOCLASS_REALTIME) && (priority >= THREAD_PRIORITY_TIME_CRITICAL || THREAD_PRIORITY_HIGHEST))
     {
-        param.sched_priority = get_rt_priority( thread->process->priority, priority );
+        param.sched_priority = get_rtpc_priority( thread->process->priority, priority );
         if (sched_setscheduler( thread->unix_tid, SCHED_FIFO|SCHED_RESET_ON_FORK, &param ) == 0)
             return;
     }
     else if ((priority_class == PROCESS_PRIOCLASS_REALTIME) && (priority <= THREAD_PRIORITY_TIME_CRITICAL || THREAD_PRIORITY_HIGHEST))
     {
-        param.sched_priority = get_rt_priority( thread->process->priority, priority );
+        param.sched_priority = get_rtpc_priority( thread->process->priority, priority );
         if (sched_setscheduler( thread->unix_tid, wine_rt_policy|SCHED_RESET_ON_FORK, &param ) == 0)
             return;
     }

