From a85b54f74d90f68900ce4a298de515f5921d6c52 Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?R=C3=A9mi=20Bernon?= <rbernon@codeweavers.com>
Date: Fri, 31 Jul 2020 15:32:01 +0200
Subject: [PATCH] ntdll: Implement ThreadIsTerminated thread info query.

---
 dlls/ntdll/tests/info.c  | 53 ++++++++++++++++++++++++++++++++++++++++
 dlls/ntdll/unix/thread.c | 14 +++++++++++
 2 files changed, 67 insertions(+)

diff --git a/dlls/ntdll/tests/info.c b/dlls/ntdll/tests/info.c
index 5bcccd8a322..5f8c1efb871 100644
--- a/dlls/ntdll/tests/info.c
+++ b/dlls/ntdll/tests/info.c
@@ -3110,6 +3110,58 @@ static void test_HideFromDebugger(void)
     CloseHandle( stop_event );
 }
 
+static DWORD WINAPI thread_is_terminated_thread(void *arg)
+{
+    HANDLE stop_event = arg;
+    WaitForSingleObject( stop_event, INFINITE );
+    return 0;
+}
+
+static void test_ThreadIsTerminated(void)
+{
+    NTSTATUS status;
+    HANDLE thread, stop_event;
+    ULONG terminated;
+
+    status = NtQueryInformationThread( GetCurrentThread(), ThreadIsTerminated, &terminated, sizeof(ULONG), NULL );
+    if (status == STATUS_INVALID_INFO_CLASS)
+        win_skip("ThreadIsTerminated not available\n");
+    else
+    {
+        ok( status == STATUS_INFO_LENGTH_MISMATCH, "Expected STATUS_INFO_LENGTH_MISMATCH, got %08x\n", status );
+        terminated = 0xdeadbeef;
+        status = NtQueryInformationThread( (HANDLE)0xdeadbeef, ThreadIsTerminated, &terminated, sizeof(ULONG), NULL );
+        ok( status == STATUS_INFO_LENGTH_MISMATCH, "Expected STATUS_INFO_LENGTH_MISMATCH, got %08x\n", status );
+        terminated = 0xdeadbeef;
+        status = NtQueryInformationThread( GetCurrentThread(), ThreadIsTerminated, &terminated, 1, NULL );
+        ok( status == STATUS_SUCCESS, "Expected STATUS_SUCCESS, got %08x\n", status );
+        if (status == STATUS_SUCCESS) ok( terminated == 1, "Expected terminated == 1, got %08x\n", terminated );
+    }
+
+    stop_event = CreateEventA( NULL, FALSE, FALSE, NULL );
+    ok( stop_event != NULL, "CreateEvent failed\n" );
+    thread = CreateThread( NULL, 0, thread_is_terminated_thread, stop_event, 0, NULL );
+    ok( thread != INVALID_HANDLE_VALUE, "CreateThread failed with %d\n", GetLastError() );
+
+    terminated = 0xdeadbeef;
+    status = NtQueryInformationThread( thread, ThreadIsTerminated, &terminated, 1, NULL );
+    ok( status == STATUS_SUCCESS || status == STATUS_INVALID_INFO_CLASS,
+        "Expected STATUS_SUCCESS, got %08x\n", status );
+    if (status == STATUS_SUCCESS) ok( terminated == 0, "Expected terminated == 0, got %08x\n", terminated );
+
+    SetEvent( stop_event );
+    WaitForSingleObject( thread, INFINITE );
+
+    terminated = 0xdeadbeef;
+    status = NtQueryInformationThread( thread, ThreadIsTerminated, &terminated, 1, NULL );
+    ok( status == STATUS_SUCCESS || status == STATUS_INVALID_INFO_CLASS,
+        "Expected STATUS_SUCCESS, got %08x\n", status );
+    if (status == STATUS_SUCCESS) ok( terminated == 1, "Expected terminated == 1, got %08x\n", terminated );
+
+    CloseHandle( thread );
+    CloseHandle( stop_event );
+}
+
 static void test_NtGetCurrentProcessorNumber(void)
 {
     NTSTATUS status;
@@ -3594,6 +3646,7 @@ START_TEST(info)
     /* NtQueryInformationThread */
     test_thread_info();
     test_HideFromDebugger();
+    test_ThreadIsTerminated();
     test_thread_start_address();
     test_thread_lookup();
 
diff --git a/dlls/ntdll/unix/thread.c b/dlls/ntdll/unix/thread.c
index a7ab24a2367..19fdff9d467 100644
--- a/dlls/ntdll/unix/thread.c
+++ b/dlls/ntdll/unix/thread.c
@@ -1909,6 +1909,20 @@ NTSTATUS WINAPI NtQueryInformationThread( HANDLE handle, THREADINFOCLASS class,
         return status;
     }
 
+    case ThreadIsTerminated:
+        if (length != sizeof(ULONG)) return STATUS_INFO_LENGTH_MISMATCH;
+        if (!data) return STATUS_ACCESS_VIOLATION;
+        SERVER_START_REQ( get_thread_info )
+        {
+            req->handle = wine_server_obj_handle( handle );
+            req->access = THREAD_QUERY_INFORMATION;
+            if ((status = wine_server_call( req ))) return status;
+            *(ULONG*)data = (reply->exit_code != STATUS_PENDING);
+        }
+        SERVER_END_REQ;
+        if (ret_len) *ret_len = sizeof(ULONG);
+        return STATUS_SUCCESS;
+
     case ThreadAffinityMask:
     {
         const ULONG_PTR affinity_mask = get_system_affinity_mask();

