From 025e44a2b1562a1924bd959b77637fe9ca774a73 Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?R=C3=A9mi=20Bernon?= <rbernon@codeweavers.com>
Date: Thu, 17 Dec 2020 20:24:12 +0100
Subject: [PATCH 1/6] server: Introduce new set_thread_priority helper.

---
 server/thread.c | 44 +++++++++++++++++++++++++++++++-------------
 server/thread.h |  1 +
 2 files changed, 32 insertions(+), 13 deletions(-)

diff --git a/server/thread.c b/server/thread.c
index 467ccd1f0db..2207c8e82cc 100644
--- a/server/thread.c
+++ b/server/thread.c
@@ -704,6 +704,31 @@ affinity_t get_thread_affinity( struct t
 #define THREAD_PRIORITY_REALTIME_HIGHEST 6
 #define THREAD_PRIORITY_REALTIME_LOWEST -7
 
+int set_thread_priority( struct thread *thread, int priority_class, int priority )
+{
+    int max = THREAD_PRIORITY_HIGHEST;
+    int min = THREAD_PRIORITY_LOWEST;
+    if (priority_class == PROCESS_PRIOCLASS_REALTIME)
+    {
+        max = THREAD_PRIORITY_REALTIME_HIGHEST;
+        min = THREAD_PRIORITY_REALTIME_LOWEST;
+    }
+    if ((priority < min || priority > max) &&
+        priority != THREAD_PRIORITY_IDLE &&
+        priority != THREAD_PRIORITY_TIME_CRITICAL)
+    {
+        errno = EINVAL;
+        return -1;
+    }
+
+    if (thread->process->priority == priority_class &&
+        thread->priority == priority)
+        return 0;
+    thread->priority = priority;
+
+    return 0;
+}
+
 /* set all information about a thread */
 static void set_thread_info( struct thread *thread,
                              const struct set_thread_info_request *req )
@@ -725,8 +750,8 @@ static void set_thread_info( struct thre
             // set RT threads. see: scheduler.c
             set_scheduler_priority( thread );
         }         
-        else
-            set_error( STATUS_INVALID_PARAMETER );
+        if (set_thread_priority( thread, thread->process->priority, req->priority ))
+            file_set_error();
     }
     if (req->mask & SET_THREAD_INFO_AFFINITY)
     {
@@ -1568,6 +1593,7 @@ DECL_HANDLER(init_first_thread)
         process->affinity = current->affinity = get_thread_affinity( current );
     else if (!process->cpu_override.cpu_count)
         set_thread_affinity( current, current->affinity );
+    set_thread_priority( current, current->process->priority, current->priority );
 
     debug_level = max( debug_level, req->debug_level );
 
@@ -1601,6 +1627,7 @@ DECL_HANDLER(init_thread)
     generate_debug_event( current, DbgCreateThreadStateChange, &req->entry );
     if (!process->cpu_override.cpu_count)
         set_thread_affinity( current, current->affinity );
+    set_thread_priority( current, current->process->priority, current->priority );
 
     reply->suspend = (current->suspend || current->process->suspend || current->context != NULL);
 }
diff --git a/server/thread.h b/server/thread.h
index 8dcf966a90a..b0237c3a80e 100644
--- a/server/thread.h
+++ b/server/thread.h
@@ -119,6 +119,7 @@ extern void thread_cancel_apc( struct thread *thread, struct object *owner, enum
 extern int thread_add_inflight_fd( struct thread *thread, int client, int server );
 extern int thread_get_inflight_fd( struct thread *thread, int client );
 extern struct token *thread_get_impersonation_token( struct thread *thread );
+extern int set_thread_priority( struct thread *thread, int priority_class, int priority );
 extern int set_thread_affinity( struct thread *thread, affinity_t affinity );
 extern int suspend_thread( struct thread *thread );
 extern int resume_thread( struct thread *thread );

