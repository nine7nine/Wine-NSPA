From cf7caf36c00dbbc8ed1d16b75a94106fdef78ca1 Mon Sep 17 00:00:00 2001
From: Fabian Maurer <dark.shadow4@web.de>
Date: Mon, 16 May 2022 18:39:35 +0200
Subject: [PATCH] ntdll: Prevent double free (Coverity)

The fd gets overwritten, therefore we need to close it before doing so.

Signed-off-by: Fabian Maurer <dark.shadow4@web.de>
---
Supersedes patch 233975
---
 dlls/ntdll/unix/file.c | 1 +
 1 file changed, 1 insertion(+)

diff --git a/dlls/ntdll/unix/file.c b/dlls/ntdll/unix/file.c
index cc8bf0c6e82..83ff59fa1e6 100644
--- a/dlls/ntdll/unix/file.c
+++ b/dlls/ntdll/unix/file.c
@@ -4210,6 +4210,7 @@ NTSTATUS WINAPI NtQueryInformationFile( HANDLE handle, IO_STATUS_BLOCK *io,
                 if (size > 0x10000) size = 0x10000;
                 if ((tmpbuf = malloc( size )))
                 {
+                    if (needs_close) close( fd );
                     if (!server_get_unix_fd( handle, FILE_READ_DATA, &fd, &needs_close, NULL, NULL ))
                     {
                         int res = recv( fd, tmpbuf, size, MSG_PEEK );
-- 
GitLab

From f391e9cf1ed597dd2d427ebef240b6c4244e2201 Mon Sep 17 00:00:00 2001
From: Fabian Maurer <dark.shadow4@web.de>
Date: Mon, 16 May 2022 19:29:10 +0200
Subject: [PATCH] kernel32: Prevent null pointer dereference in
 WritePrivateProfileStructW.

Wine-Bug: https://bugs.winehq.org/show_bug.cgi?id=49285
Signed-off-by: Fabian Maurer <dark.shadow4@web.de>
Signed-off-by: Alexandre Julliard <julliard@winehq.org>
---
 dlls/kernel32/profile.c       | 5 +++++
 dlls/kernel32/tests/profile.c | 6 ++++++
 2 files changed, 11 insertions(+)

diff --git a/dlls/kernel32/profile.c b/dlls/kernel32/profile.c
index e70874fa36f..bf1a9170896 100644
--- a/dlls/kernel32/profile.c
+++ b/dlls/kernel32/profile.c
@@ -2044,9 +2044,14 @@ BOOL WINAPI WritePrivateProfileStructW (LPCWSTR section, LPCWSTR key,
     LPWSTR outstring, p;
     DWORD sum = 0;
 
+    TRACE("(%s %s %p %u %s)\n", debugstr_w(section), debugstr_w(key), buf, bufsize, debugstr_w(filename));
+
     if (!section && !key && !buf)  /* flush the cache */
         return WritePrivateProfileStringW( NULL, NULL, NULL, filename );
 
+    if (!buf)
+        return WritePrivateProfileStringW(section, key, NULL, filename);
+
     /* allocate string buffer for hex chars + checksum hex char + '\0' */
     outstring = HeapAlloc( GetProcessHeap(), 0, (bufsize*2 + 2 + 1) * sizeof(WCHAR) );
     p = outstring;
diff --git a/dlls/kernel32/tests/profile.c b/dlls/kernel32/tests/profile.c
index 71d945f81df..18e12690f18 100644
--- a/dlls/kernel32/tests/profile.c
+++ b/dlls/kernel32/tests/profile.c
@@ -1109,6 +1109,7 @@ static void test_WritePrivateProfileString(void)
 static void test_profile_struct(void)
 {
     static const char expect_data[] = "[s]\r\nkey=616261637573006F\r\n";
+    static const char expect_data_empty[] = "[s]\r\n";
     char buffer[20];
     BOOL ret;
 
@@ -1173,6 +1174,11 @@ static void test_profile_struct(void)
     ok(!ret, "expected failure\n");
     todo_wine ok(GetLastError() == ERROR_BAD_LENGTH, "got error %lu\n", GetLastError());
 
+    /* Test deleting struct */
+    ret = WritePrivateProfileStructA("s", "key", NULL, sizeof("abacus"), "./winetest.ini");
+    ok(ret, "got error %lu\n", GetLastError());
+    ok(check_file_data("./winetest.ini", expect_data_empty), "file doesn't match\n");
+
     ret = DeleteFileA("./winetest.ini");
     ok(ret, "got error %lu\n", GetLastError());
 }
-- 
GitLab

From 57c04fd07c5653ac0606587ea2b233b46fe40eb9 Mon Sep 17 00:00:00 2001
From: Brendan Shanks <bshanks@codeweavers.com>
Date: Tue, 17 May 2022 13:50:24 -0700
Subject: [PATCH 1/2] ntdll: Use 32-bit stack in alloc_fs_sel().

Signed-off-by: Brendan Shanks <bshanks@codeweavers.com>
Signed-off-by: Alexandre Julliard <julliard@winehq.org>
---
 dlls/ntdll/unix/signal_x86_64.c | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

diff --git a/dlls/ntdll/unix/signal_x86_64.c b/dlls/ntdll/unix/signal_x86_64.c
index 34334f72ff0..cd50df0c805 100644
--- a/dlls/ntdll/unix/signal_x86_64.c
+++ b/dlls/ntdll/unix/signal_x86_64.c
@@ -94,7 +94,7 @@ __ASM_GLOBAL_FUNC( alloc_fs_sel,
                    "pushq %rbx\n\t"
                    "pushq %rdi\n\t"
                    "movq %rsp,%rdi\n\t"
-                   "movq %gs:0x8,%rsp\n\t"    /* NtCurrentTeb()->Tib.StackBase */
+                   "movl 0x4(%rdx),%esp\n\t"  /* Tib.StackBase */
                    "subl $0x10,%esp\n\t"
                    /* setup modify_ldt struct on 32-bit stack */
                    "movl %ecx,(%rsp)\n\t"     /* entry_number */
-- 
GitLab


From fe52b067bf9a9733e4c6929f63ab13363b87d39e Mon Sep 17 00:00:00 2001
From: Brendan Shanks <bshanks@codeweavers.com>
Date: Tue, 17 May 2022 13:32:29 -0700
Subject: [PATCH 2/2] ntdll: Avoid truncating pointer to 32-bits in
 get_cpu_area().

Signed-off-by: Brendan Shanks <bshanks@codeweavers.com>
Signed-off-by: Alexandre Julliard <julliard@winehq.org>
---
 dlls/ntdll/process.c     | 2 +-
 dlls/ntdll/unix/thread.c | 2 +-
 2 files changed, 2 insertions(+), 2 deletions(-)

diff --git a/dlls/ntdll/process.c b/dlls/ntdll/process.c
index 7b36c988e81..0b4245fdd42 100644
--- a/dlls/ntdll/process.c
+++ b/dlls/ntdll/process.c
@@ -161,7 +161,7 @@ NTSTATUS WINAPI RtlWow64GetCpuAreaInfo( WOW64_CPURESERVED *cpu, ULONG reserved,
 
     for (i = 0; i < ARRAY_SIZE(data); i++)
     {
-#define ALIGN(ptr,align) ((void *)(((ULONG_PTR)(ptr) + (align) - 1) & ~((align) - 1)))
+#define ALIGN(ptr,align) ((void *)(((ULONG_PTR)(ptr) + (align) - 1) & ~((ULONG_PTR)(align) - 1)))
         if (data[i].machine != cpu->Machine) continue;
         info->Context = ALIGN( cpu + 1, data[i].align );
         info->ContextEx = ALIGN( (char *)info->Context + data[i].size, sizeof(void *) );
diff --git a/dlls/ntdll/unix/thread.c b/dlls/ntdll/unix/thread.c
index 503230e4634..6d937675bcb 100644
--- a/dlls/ntdll/unix/thread.c
+++ b/dlls/ntdll/unix/thread.c
@@ -1111,7 +1111,7 @@ void *get_cpu_area( USHORT machine )
     case IMAGE_FILE_MACHINE_ARM64: align = TYPE_ALIGNMENT(ARM64_NT_CONTEXT); break;
     default: return NULL;
     }
-    return (void *)(((ULONG_PTR)(cpu + 1) + align - 1) & ~(align - 1));
+    return (void *)(((ULONG_PTR)(cpu + 1) + align - 1) & ~((ULONG_PTR)align - 1));
 }
 
 
-- 
GitLab

From 06b3471605dc1e7d1466774b745435ecef845be4 Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?Pedro=20Perdig=C3=A3o?= <pperdigao@codeweavers.com>
Date: Fri, 6 May 2022 17:56:28 +0100
Subject: [PATCH 1/2] user32/tests: Test an out-of-order RECT in
 RedrawWindow().
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: 8bit

Signed-off-by: Pedro Perdig√£o <pperdigao@codeweavers.com>
Signed-off-by: Alexandre Julliard <julliard@winehq.org>
---
 dlls/user32/tests/msg.c | 65 +++++++++++++++++++++++++++++++++++++++--
 1 file changed, 62 insertions(+), 3 deletions(-)

diff --git a/dlls/user32/tests/msg.c b/dlls/user32/tests/msg.c
index c0a74d8edbe..84833e8b1be 100644
--- a/dlls/user32/tests/msg.c
+++ b/dlls/user32/tests/msg.c
@@ -8174,8 +8174,9 @@ void dump_region(HRGN hrgn)
     HeapFree( GetProcessHeap(), 0, data );
 }
 
-#define check_update_rgn( hwnd, hrgn ) check_update_rgn_( __LINE__, hwnd, hrgn )
-static void check_update_rgn_( int line, HWND hwnd, HRGN hrgn )
+#define todo_check_update_rgn( hwnd, hrgn ) check_update_rgn_( __LINE__, TRUE, hwnd, hrgn )
+#define check_update_rgn( hwnd, hrgn ) check_update_rgn_( __LINE__, FALSE, hwnd, hrgn )
+static void check_update_rgn_( int line, BOOL todo, HWND hwnd, HRGN hrgn )
 {
     INT ret;
     RECT r1, r2;
@@ -8186,7 +8187,10 @@ static void check_update_rgn_( int line, HWND hwnd, HRGN hrgn )
     ok( ret != ERROR, "GetUpdateRgn failed\n" );
     if (ret == NULLREGION)
     {
-        ok_(__FILE__,line)( !hrgn, "Update region shouldn't be empty\n" );
+        if(todo)
+            todo_wine ok_(__FILE__,line)( !hrgn, "Update region shouldn't be empty\n" );
+        else
+            ok_(__FILE__,line)( !hrgn, "Update region shouldn't be empty\n" );
     }
     else
     {
@@ -8393,6 +8397,61 @@ static void test_paint_messages(void)
     ok(ret, "RedrawWindow returned %d instead of TRUE\n", ret);
     check_update_rgn( hwnd, 0 );
 
+    /* test a zeroed rectangle */
+    RedrawWindow( hwnd, NULL, 0, RDW_VALIDATE|RDW_NOFRAME|RDW_NOERASE );
+    SetRect( &rect, 0, 0, 0, 0 );
+    ret = RedrawWindow( hwnd, &rect, NULL, RDW_INVALIDATE );
+    ok(ret, "RedrawWindow returned %d instead of TRUE\n", ret);
+    check_update_rgn( hwnd, 0 );
+
+    /* a well ordered rectangle */
+    RedrawWindow( hwnd, NULL, 0, RDW_VALIDATE|RDW_NOFRAME|RDW_NOERASE );
+    SetRect( &rect, 10, 5, 17, 21 );
+    ret = RedrawWindow( hwnd, &rect, NULL, RDW_INVALIDATE );
+    ok(ret, "RedrawWindow returned %d instead of TRUE\n", ret);
+    SetRectRgn( hrgn, 10, 5, 17, 21 );
+    check_update_rgn( hwnd, hrgn );
+
+    /* empty rectangle, top and bottom are swapped but left and right have
+       the same value */
+    RedrawWindow( hwnd, NULL, 0, RDW_VALIDATE|RDW_NOFRAME|RDW_NOERASE );
+    SetRect( &rect, 5, 30, 5, 10 );
+    ret = RedrawWindow( hwnd, &rect, NULL, RDW_INVALIDATE );
+    ok(ret, "RedrawWindow returned %d instead of TRUE\n", ret);
+    check_update_rgn( hwnd, 0 );
+
+    /* empty rectangle, left and right are swapped but top and bottom have
+       the same value */
+    RedrawWindow( hwnd, NULL, 0, RDW_VALIDATE|RDW_NOFRAME|RDW_NOERASE );
+    SetRect( &rect, 17, 10, 5, 10 );
+    ret = RedrawWindow( hwnd, &rect, NULL, RDW_INVALIDATE );
+    ok(ret, "RedrawWindow returned %d instead of TRUE\n", ret);
+    check_update_rgn( hwnd, 0 );
+
+    /* Left and right are swapped */
+    RedrawWindow( hwnd, NULL, 0, RDW_VALIDATE|RDW_NOFRAME|RDW_NOERASE );
+    SetRect( &rect, 21, 12, 7, 30 );
+    ret = RedrawWindow( hwnd, &rect, NULL, RDW_INVALIDATE );
+    ok(ret, "RedrawWindow returned %d instead of TRUE\n", ret);
+    SetRectRgn( hrgn, 7, 12, 21, 30 );
+    todo_check_update_rgn( hwnd, hrgn );
+
+    /* Top and bottom are swapped */
+    RedrawWindow( hwnd, NULL, 0, RDW_VALIDATE|RDW_NOFRAME|RDW_NOERASE );
+    SetRect( &rect, 7, 30, 21, 12 );
+    ret = RedrawWindow( hwnd, &rect, NULL, RDW_INVALIDATE );
+    ok(ret, "RedrawWindow returned %d instead of TRUE\n", ret);
+    SetRectRgn( hrgn, 7, 12, 21, 30 );
+    todo_check_update_rgn( hwnd, hrgn );
+
+    /* both reference points are swapped */
+    RedrawWindow( hwnd, NULL, 0, RDW_VALIDATE|RDW_NOFRAME|RDW_NOERASE );
+    SetRect( &rect, 21, 30, 7, 12 );
+    ret = RedrawWindow( hwnd, &rect, NULL, RDW_INVALIDATE );
+    ok(ret, "RedrawWindow returned %d instead of TRUE\n", ret);
+    SetRectRgn( hrgn, 7, 12, 21, 30 );
+    todo_check_update_rgn( hwnd, hrgn );
+
     /* flush pending messages */
     flush_events();
     flush_sequence();
-- 
GitLab


From 1146bde39e1de69667d4efdc0da94490ba8e87cc Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?Pedro=20Perdig=C3=A3o?= <pperdigao@codeweavers.com>
Date: Fri, 6 May 2022 18:07:28 +0100
Subject: [PATCH 2/2] win32u: Allow an out-of-order RECT in RedrawWindow().
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: 8bit

Signed-off-by: Pedro Perdig√£o <pperdigao@codeweavers.com>
Signed-off-by: Alexandre Julliard <julliard@winehq.org>
---
 dlls/user32/tests/msg.c | 16 ++++++----------
 dlls/win32u/dce.c       |  7 +++++--
 2 files changed, 11 insertions(+), 12 deletions(-)

diff --git a/dlls/user32/tests/msg.c b/dlls/user32/tests/msg.c
index 84833e8b1be..2705914d5e5 100644
--- a/dlls/user32/tests/msg.c
+++ b/dlls/user32/tests/msg.c
@@ -8174,9 +8174,8 @@ void dump_region(HRGN hrgn)
     HeapFree( GetProcessHeap(), 0, data );
 }
 
-#define todo_check_update_rgn( hwnd, hrgn ) check_update_rgn_( __LINE__, TRUE, hwnd, hrgn )
-#define check_update_rgn( hwnd, hrgn ) check_update_rgn_( __LINE__, FALSE, hwnd, hrgn )
-static void check_update_rgn_( int line, BOOL todo, HWND hwnd, HRGN hrgn )
+#define check_update_rgn( hwnd, hrgn ) check_update_rgn_( __LINE__, hwnd, hrgn )
+static void check_update_rgn_( int line, HWND hwnd, HRGN hrgn )
 {
     INT ret;
     RECT r1, r2;
@@ -8187,10 +8186,7 @@ static void check_update_rgn_( int line, BOOL todo, HWND hwnd, HRGN hrgn )
     ok( ret != ERROR, "GetUpdateRgn failed\n" );
     if (ret == NULLREGION)
     {
-        if(todo)
-            todo_wine ok_(__FILE__,line)( !hrgn, "Update region shouldn't be empty\n" );
-        else
-            ok_(__FILE__,line)( !hrgn, "Update region shouldn't be empty\n" );
+        ok_(__FILE__,line)( !hrgn, "Update region shouldn't be empty\n" );
     }
     else
     {
@@ -8434,7 +8430,7 @@ static void test_paint_messages(void)
     ret = RedrawWindow( hwnd, &rect, NULL, RDW_INVALIDATE );
     ok(ret, "RedrawWindow returned %d instead of TRUE\n", ret);
     SetRectRgn( hrgn, 7, 12, 21, 30 );
-    todo_check_update_rgn( hwnd, hrgn );
+    check_update_rgn( hwnd, hrgn );
 
     /* Top and bottom are swapped */
     RedrawWindow( hwnd, NULL, 0, RDW_VALIDATE|RDW_NOFRAME|RDW_NOERASE );
@@ -8442,7 +8438,7 @@ static void test_paint_messages(void)
     ret = RedrawWindow( hwnd, &rect, NULL, RDW_INVALIDATE );
     ok(ret, "RedrawWindow returned %d instead of TRUE\n", ret);
     SetRectRgn( hrgn, 7, 12, 21, 30 );
-    todo_check_update_rgn( hwnd, hrgn );
+    check_update_rgn( hwnd, hrgn );
 
     /* both reference points are swapped */
     RedrawWindow( hwnd, NULL, 0, RDW_VALIDATE|RDW_NOFRAME|RDW_NOERASE );
@@ -8450,7 +8446,7 @@ static void test_paint_messages(void)
     ret = RedrawWindow( hwnd, &rect, NULL, RDW_INVALIDATE );
     ok(ret, "RedrawWindow returned %d instead of TRUE\n", ret);
     SetRectRgn( hrgn, 7, 12, 21, 30 );
-    todo_check_update_rgn( hwnd, hrgn );
+    check_update_rgn( hwnd, hrgn );
 
     /* flush pending messages */
     flush_events();
diff --git a/dlls/win32u/dce.c b/dlls/win32u/dce.c
index c41067af464..fbde3f3d0ec 100644
--- a/dlls/win32u/dce.c
+++ b/dlls/win32u/dce.c
@@ -1457,8 +1457,11 @@ BOOL WINAPI NtUserRedrawWindow( HWND hwnd, const RECT *rect, HRGN hrgn, UINT fla
 
     if (rect && !hrgn)
     {
-        if (IsRectEmpty( rect )) rect = &empty;
-        ret = redraw_window_rects( hwnd, flags, rect, 1 );
+        RECT ordered = *rect;
+
+        order_rect( &ordered );
+        if (IsRectEmpty( &ordered )) ordered = empty;
+        ret = redraw_window_rects( hwnd, flags, &ordered, 1 );
     }
     else if (!hrgn)
     {
-- 
GitLab

From 7dd952d5a90ac9f18d119cb03292ca0d1cbff72c Mon Sep 17 00:00:00 2001
From: Huw Davies <huw@codeweavers.com>
Date: Fri, 6 May 2022 10:35:10 +0100
Subject: [PATCH] dllhost: Try to load the dll server's factory at the start.

This lets dllhost quit early if the factory cannot be loaded.

Signed-off-by: Huw Davies <huw@codeweavers.com>
Signed-off-by: Alexandre Julliard <julliard@winehq.org>
---
 programs/dllhost/dllhost.c | 23 +++++++++++------------
 1 file changed, 11 insertions(+), 12 deletions(-)

diff --git a/programs/dllhost/dllhost.c b/programs/dllhost/dllhost.c
index 83700826f8b..9e3455ee15a 100644
--- a/programs/dllhost/dllhost.c
+++ b/programs/dllhost/dllhost.c
@@ -34,6 +34,7 @@ struct factory
     IMarshal IMarshal_iface;
     CLSID clsid;
     LONG ref;
+    IClassFactory *dll_factory;
 };
 
 static inline struct factory *impl_from_IClassFactory(IClassFactory *iface)
@@ -90,7 +91,10 @@ static ULONG WINAPI factory_Release(IClassFactory *iface)
     TRACE("(%p)->%lu\n", iface, ref);
 
     if (!ref)
+    {
+        if (factory->dll_factory) IClassFactory_Release(factory->dll_factory);
         HeapFree(GetProcessHeap(), 0, factory);
+    }
 
     return ref;
 }
@@ -166,18 +170,10 @@ static HRESULT WINAPI marshal_MarshalInterface(IMarshal *iface, IStream *stream,
         void *pv, DWORD dwDestContext, void *pvDestContext, DWORD mshlflags)
 {
     struct factory *factory = impl_from_IMarshal(iface);
-    IUnknown *object;
-    HRESULT hr;
 
     TRACE("(%p,%s,%p,%08lx,%p,%08lx)\n", stream, wine_dbgstr_guid(iid), pv, dwDestContext, pvDestContext, mshlflags);
 
-    hr = CoGetClassObject(&factory->clsid, CLSCTX_INPROC_SERVER, NULL, iid, (void **)&object);
-    if (hr == S_OK)
-    {
-        hr = CoMarshalInterface(stream, iid, object, dwDestContext, pvDestContext, mshlflags);
-        IUnknown_Release(object);
-    }
-    return hr;
+    return CoMarshalInterface(stream, iid, (IUnknown *)factory->dll_factory, dwDestContext, pvDestContext, mshlflags);
 }
 
 static HRESULT WINAPI marshal_UnmarshalInterface(IMarshal *iface, IStream *stream,
@@ -275,10 +271,13 @@ static HRESULT WINAPI surrogate_LoadDllServer(ISurrogate *iface, const CLSID *cl
     factory->IMarshal_iface.lpVtbl = &Marshal_Vtbl;
     factory->clsid = *clsid;
     factory->ref = 1;
+    factory->dll_factory = NULL;
 
-    hr = CoRegisterClassObject(clsid, (IUnknown *)&factory->IClassFactory_iface,
-                               CLSCTX_LOCAL_SERVER, REGCLS_SURROGATE, &surrogate->cookie);
-    if (hr != S_OK)
+    hr = CoGetClassObject(clsid, CLSCTX_INPROC_SERVER, NULL, &IID_IClassFactory, (void **)&factory->dll_factory);
+    if (SUCCEEDED(hr))
+        hr = CoRegisterClassObject(clsid, (IUnknown *)&factory->IClassFactory_iface,
+                                   CLSCTX_LOCAL_SERVER, REGCLS_SURROGATE, &surrogate->cookie);
+    if (FAILED(hr))
         IClassFactory_Release(&factory->IClassFactory_iface);
     else
     {
-- 
GitLab

From 3ebea55455dce0232f5d8850a67fd1b19534a36e Mon Sep 17 00:00:00 2001
From: Zhiyi Zhang <zzhang@codeweavers.com>
Date: Tue, 17 May 2022 16:45:58 +0800
Subject: [PATCH] winex11.drv: Don't compare error event serial if it's zero.

Sometimes error event serial is zero. For example, NVIDIA driver may send X_GLXCopyContext errors
with the event serial set to zero. When it's zero, previously the error handler passes the error
to the default error handler and cause application crashes.

CW-Bug-Id: #20513
Signed-off-by: Zhiyi Zhang <zzhang@codeweavers.com>
---
 dlls/winex11.drv/x11drv_main.c | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

diff --git a/dlls/winex11.drv/x11drv_main.c b/dlls/winex11.drv/x11drv_main.c
index 11111111111..11111111111 100644
--- a/dlls/winex11.drv/x11drv_main.c
+++ b/dlls/winex11.drv/x11drv_main.c
@@ -319,7 +319,7 @@ int X11DRV_check_error(void)
 static int error_handler( Display *display, XErrorEvent *error_evt )
 {
     if (err_callback && display == err_callback_display &&
-        (long)(error_evt->serial - err_serial) >= 0)
+        (!error_evt->serial || error_evt->serial >= err_serial))
     {
         if ((err_callback_result = err_callback( display, error_evt, err_callback_arg )))
         {
