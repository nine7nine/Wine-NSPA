From cf7caf36c00dbbc8ed1d16b75a94106fdef78ca1 Mon Sep 17 00:00:00 2001
From: Fabian Maurer <dark.shadow4@web.de>
Date: Mon, 16 May 2022 18:39:35 +0200
Subject: [PATCH] ntdll: Prevent double free (Coverity)

The fd gets overwritten, therefore we need to close it before doing so.

Signed-off-by: Fabian Maurer <dark.shadow4@web.de>
---
Supersedes patch 233975
---
 dlls/ntdll/unix/file.c | 1 +
 1 file changed, 1 insertion(+)

diff --git a/dlls/ntdll/unix/file.c b/dlls/ntdll/unix/file.c
index cc8bf0c6e82..83ff59fa1e6 100644
--- a/dlls/ntdll/unix/file.c
+++ b/dlls/ntdll/unix/file.c
@@ -4210,6 +4210,7 @@ NTSTATUS WINAPI NtQueryInformationFile( HANDLE handle, IO_STATUS_BLOCK *io,
                 if (size > 0x10000) size = 0x10000;
                 if ((tmpbuf = malloc( size )))
                 {
+                    if (needs_close) close( fd );
                     if (!server_get_unix_fd( handle, FILE_READ_DATA, &fd, &needs_close, NULL, NULL ))
                     {
                         int res = recv( fd, tmpbuf, size, MSG_PEEK );
-- 
GitLab

From f391e9cf1ed597dd2d427ebef240b6c4244e2201 Mon Sep 17 00:00:00 2001
From: Fabian Maurer <dark.shadow4@web.de>
Date: Mon, 16 May 2022 19:29:10 +0200
Subject: [PATCH] kernel32: Prevent null pointer dereference in
 WritePrivateProfileStructW.

Wine-Bug: https://bugs.winehq.org/show_bug.cgi?id=49285
Signed-off-by: Fabian Maurer <dark.shadow4@web.de>
Signed-off-by: Alexandre Julliard <julliard@winehq.org>
---
 dlls/kernel32/profile.c       | 5 +++++
 dlls/kernel32/tests/profile.c | 6 ++++++
 2 files changed, 11 insertions(+)

diff --git a/dlls/kernel32/profile.c b/dlls/kernel32/profile.c
index e70874fa36f..bf1a9170896 100644
--- a/dlls/kernel32/profile.c
+++ b/dlls/kernel32/profile.c
@@ -2044,9 +2044,14 @@ BOOL WINAPI WritePrivateProfileStructW (LPCWSTR section, LPCWSTR key,
     LPWSTR outstring, p;
     DWORD sum = 0;
 
+    TRACE("(%s %s %p %u %s)\n", debugstr_w(section), debugstr_w(key), buf, bufsize, debugstr_w(filename));
+
     if (!section && !key && !buf)  /* flush the cache */
         return WritePrivateProfileStringW( NULL, NULL, NULL, filename );
 
+    if (!buf)
+        return WritePrivateProfileStringW(section, key, NULL, filename);
+
     /* allocate string buffer for hex chars + checksum hex char + '\0' */
     outstring = HeapAlloc( GetProcessHeap(), 0, (bufsize*2 + 2 + 1) * sizeof(WCHAR) );
     p = outstring;
diff --git a/dlls/kernel32/tests/profile.c b/dlls/kernel32/tests/profile.c
index 71d945f81df..18e12690f18 100644
--- a/dlls/kernel32/tests/profile.c
+++ b/dlls/kernel32/tests/profile.c
@@ -1109,6 +1109,7 @@ static void test_WritePrivateProfileString(void)
 static void test_profile_struct(void)
 {
     static const char expect_data[] = "[s]\r\nkey=616261637573006F\r\n";
+    static const char expect_data_empty[] = "[s]\r\n";
     char buffer[20];
     BOOL ret;
 
@@ -1173,6 +1174,11 @@ static void test_profile_struct(void)
     ok(!ret, "expected failure\n");
     todo_wine ok(GetLastError() == ERROR_BAD_LENGTH, "got error %lu\n", GetLastError());
 
+    /* Test deleting struct */
+    ret = WritePrivateProfileStructA("s", "key", NULL, sizeof("abacus"), "./winetest.ini");
+    ok(ret, "got error %lu\n", GetLastError());
+    ok(check_file_data("./winetest.ini", expect_data_empty), "file doesn't match\n");
+
     ret = DeleteFileA("./winetest.ini");
     ok(ret, "got error %lu\n", GetLastError());
 }
-- 
GitLab

From 57c04fd07c5653ac0606587ea2b233b46fe40eb9 Mon Sep 17 00:00:00 2001
From: Brendan Shanks <bshanks@codeweavers.com>
Date: Tue, 17 May 2022 13:50:24 -0700
Subject: [PATCH 1/2] ntdll: Use 32-bit stack in alloc_fs_sel().

Signed-off-by: Brendan Shanks <bshanks@codeweavers.com>
Signed-off-by: Alexandre Julliard <julliard@winehq.org>
---
 dlls/ntdll/unix/signal_x86_64.c | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

diff --git a/dlls/ntdll/unix/signal_x86_64.c b/dlls/ntdll/unix/signal_x86_64.c
index 34334f72ff0..cd50df0c805 100644
--- a/dlls/ntdll/unix/signal_x86_64.c
+++ b/dlls/ntdll/unix/signal_x86_64.c
@@ -94,7 +94,7 @@ __ASM_GLOBAL_FUNC( alloc_fs_sel,
                    "pushq %rbx\n\t"
                    "pushq %rdi\n\t"
                    "movq %rsp,%rdi\n\t"
-                   "movq %gs:0x8,%rsp\n\t"    /* NtCurrentTeb()->Tib.StackBase */
+                   "movl 0x4(%rdx),%esp\n\t"  /* Tib.StackBase */
                    "subl $0x10,%esp\n\t"
                    /* setup modify_ldt struct on 32-bit stack */
                    "movl %ecx,(%rsp)\n\t"     /* entry_number */
-- 
GitLab


From fe52b067bf9a9733e4c6929f63ab13363b87d39e Mon Sep 17 00:00:00 2001
From: Brendan Shanks <bshanks@codeweavers.com>
Date: Tue, 17 May 2022 13:32:29 -0700
Subject: [PATCH 2/2] ntdll: Avoid truncating pointer to 32-bits in
 get_cpu_area().

Signed-off-by: Brendan Shanks <bshanks@codeweavers.com>
Signed-off-by: Alexandre Julliard <julliard@winehq.org>
---
 dlls/ntdll/process.c     | 2 +-
 dlls/ntdll/unix/thread.c | 2 +-
 2 files changed, 2 insertions(+), 2 deletions(-)

diff --git a/dlls/ntdll/process.c b/dlls/ntdll/process.c
index 7b36c988e81..0b4245fdd42 100644
--- a/dlls/ntdll/process.c
+++ b/dlls/ntdll/process.c
@@ -161,7 +161,7 @@ NTSTATUS WINAPI RtlWow64GetCpuAreaInfo( WOW64_CPURESERVED *cpu, ULONG reserved,
 
     for (i = 0; i < ARRAY_SIZE(data); i++)
     {
-#define ALIGN(ptr,align) ((void *)(((ULONG_PTR)(ptr) + (align) - 1) & ~((align) - 1)))
+#define ALIGN(ptr,align) ((void *)(((ULONG_PTR)(ptr) + (align) - 1) & ~((ULONG_PTR)(align) - 1)))
         if (data[i].machine != cpu->Machine) continue;
         info->Context = ALIGN( cpu + 1, data[i].align );
         info->ContextEx = ALIGN( (char *)info->Context + data[i].size, sizeof(void *) );
diff --git a/dlls/ntdll/unix/thread.c b/dlls/ntdll/unix/thread.c
index 503230e4634..6d937675bcb 100644
--- a/dlls/ntdll/unix/thread.c
+++ b/dlls/ntdll/unix/thread.c
@@ -1111,7 +1111,7 @@ void *get_cpu_area( USHORT machine )
     case IMAGE_FILE_MACHINE_ARM64: align = TYPE_ALIGNMENT(ARM64_NT_CONTEXT); break;
     default: return NULL;
     }
-    return (void *)(((ULONG_PTR)(cpu + 1) + align - 1) & ~(align - 1));
+    return (void *)(((ULONG_PTR)(cpu + 1) + align - 1) & ~((ULONG_PTR)align - 1));
 }
 
 
-- 
GitLab
