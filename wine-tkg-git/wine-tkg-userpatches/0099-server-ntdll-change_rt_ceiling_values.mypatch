
 - I think wineserver / app threads need a bit more headroom, now
   that i'm setting RT from kernelbase.
   
 - plus, in general; thread priority should be decremented by 2. This
   wasn't the case with wineservee vs. app threads
   
 - also, account for +1 boosting (subtract it)

--- a/server/scheduler.c		2022-11-30 08:15:14.728201168 -0500
+++ a/server/scheduler.c	2022-11-30 08:14:55.855005882 -0500
@@ -90,7 +90,7 @@ void init_scheduler( void )
     {       
         struct sched_param param;
         memset( &param, 0, sizeof(param) );
-        param.sched_priority = priority;
+        param.sched_priority = priority -1;
         // hardcode to SCHED_FIFO for wineserver.
         wine_rt_policy = SCHED_FIFO;
         
@@ -110,7 +110,7 @@ void init_scheduler( void )
     /* determine base priority which will be used for all threads */
     if ((priority = get_priority( "WINE_RT_PRIO", min, max )) != -1)
     {
-        thread_base_priority = priority;
+        thread_base_priority = priority -1;
 
         if (debug_level) fprintf( stderr, "wineserver: initialized max user thread priority to %d\n",
                                   thread_base_priority );
@@ -139,36 +139,36 @@ void set_scheduler_priority( struct thre
     if (thread->priority >= THREAD_PRIORITY_TIME_CRITICAL )
     {
         wine_rt_policy = SCHED_FIFO;
-        param.sched_priority = thread_base_priority -1;
+        param.sched_priority = thread_base_priority -2;
     }
     else if (thread->priority >= THREAD_PRIORITY_HIGHEST)
     {
         wine_rt_policy = SCHED_FIFO;
-        param.sched_priority = thread_base_priority -3;
+        param.sched_priority = thread_base_priority -4;
     }
     else if (thread->priority >= THREAD_PRIORITY_ABOVE_NORMAL)
     {
-        param.sched_priority = thread_base_priority -5;
+        param.sched_priority = thread_base_priority -6;
     }
     else if (thread->priority >= THREAD_PRIORITY_NORMAL)
     {
-        param.sched_priority = thread_base_priority -7;
+        param.sched_priority = thread_base_priority -8;
     }
     else if (thread->priority >= THREAD_PRIORITY_BELOW_NORMAL)
     {
-        param.sched_priority = thread_base_priority -9;
+        param.sched_priority = thread_base_priority -10;
     } 
     else if (thread->priority >= THREAD_PRIORITY_LOWEST)
     {
-        param.sched_priority = thread_base_priority -11;
+        param.sched_priority = thread_base_priority -12;
     }   
     else if (thread->priority >= THREAD_PRIORITY_IDLE)
     {
-        param.sched_priority = thread_base_priority -13;
+        param.sched_priority = thread_base_priority -14;
     }
     else
     {
-        param.sched_priority = thread_base_priority -15;
+        param.sched_priority = thread_base_priority -16;
     }
 
     if (sched_setscheduler(thread->unix_tid, wine_rt_policy | SCHED_RESET_ON_FORK, &param) == -1 &&
--- a/server/thread.c	2022-11-30 08:15:58.098649762 -0500
+++ b/server/thread.c	2022-11-30 08:14:53.889985547 -0500
@@ -1076,7 +1076,7 @@ static int get_unix_priority( int priori
     // RT priority for threads must be below kernel-mode APC, TIME_CRITICAL threads and Wineserver.
     if ((base_priority = get_priority( "WINE_RT_PRIO", min, max )) != -1)
     {
-        thread_base_priority = base_priority - 1;
+        thread_base_priority = base_priority - 3;
     }
     switch (priority_class) {
     case PROCESS_PRIOCLASS_IDLE:
--- a/dlls/ntdll/unix/thread.c		2022-11-30 08:15:45.208516460 -0500
+++ b/dlls/ntdll/unix/thread.c	2022-11-30 08:14:55.118998265 -0500
@@ -149,7 +149,7 @@ int ntdll_set_fsync_realtime (pthread_t
    
     if ((kapc_priority = fget_priority( "WINE_RT_PRIO", min, max -1)) != -1)
     {
-        thread_kapc_priority = kapc_priority -1;
+        thread_kapc_priority = kapc_priority -3;
     }
 	struct sched_param param;	
 	param.sched_priority = thread_kapc_priority;
