diff -Npur a/dlls/ntdll/unix/thread.c b/dlls/ntdll/unix/thread.c
--- a/dlls/ntdll/unix/thread.c	2020-07-16 01:33:47.485890000 -0400
+++ b/dlls/ntdll/unix/thread.c	2020-07-16 01:57:57.098633171 -0400
@@ -77,6 +77,55 @@
 #define PTHREAD_STACK_MIN 16384
 #endif
 
+#define NSPA_RT_SYNC 1
+#if NSPA_RT_SYNC
+
+// We set the synchronization threads' RT priority from within Ntdll.
+static int thread_apc_priority = -1;
+
+/* gets the priority value from an environment variable */
+static int get_priority( const char *variable, int min, int max )
+{
+    const char *env;
+    int val;
+
+    env = getenv( variable );
+    if (!env) return -1;
+
+    val = atoi( env );
+    if (val >= min && val <= max) return val;
+    return -1;
+}
+
+static int priority;
+
+int ntdll_set_sync_realtime (pthread_t pthread_id, int ntdll_rt_policy, int priority)
+{
+    // Get RT policy
+    const char *policyStr = getenv("NTDLL_RT_POLICY");
+    int min, max, apc_priority;
+    min = sched_get_priority_min( SCHED_FIFO );
+    max = sched_get_priority_max( SCHED_FIFO );
+
+    // hardcoded to SCHED_FIFO
+    if (policyStr) {
+        if (strcmp(policyStr, "RR")==0)
+            ntdll_rt_policy = SCHED_RR;
+        else if (strcmp(policyStr, "FF")==0)
+            ntdll_rt_policy = SCHED_FIFO;
+    }
+   
+    if ((apc_priority = get_priority( "NTDLL_RT_PRIO", min, max -1)) != -1)
+    {
+        thread_apc_priority = apc_priority;
+    }
+	struct sched_param param;	
+	param.sched_priority = thread_apc_priority;
+
+	return pthread_setschedparam (pthread_id, ntdll_rt_policy, &param);
+}
+#endif
+
 static int nb_threads = 1;
 
 static inline int get_unix_exit_code( NTSTATUS status )
@@ -1257,6 +1306,13 @@
     data_size_t len;
     struct object_attributes *objattr;
     struct ntdll_thread_data *thread_data;
+#if NSPA_RT_SYNC
+    // needed for setting RT for Sync threads
+    struct sched_param parm;
+    int ntdll_rt_policy = 0;
+    pthread_attr_setschedpolicy (&pthread_attr, ntdll_rt_policy);
+    pthread_attr_setschedparam (&pthread_attr, &parm);
+#endif
     DWORD tid = 0;
     int request_pipe[2];
     TEB *teb;
@@ -1370,6 +1426,35 @@
         return status;
     }
     if (attr_list) update_attr_list( attr_list, &teb->ClientId, teb );
+    
+#if NSPA_RT_SYNC
+    // give pthread_create a chance to call start_thread (pthread_info.entry), 
+    // which sets gets the tid via pthread_functions.init_current_teb
+    // 
+    // Catch all Synchronization Threads;
+    pthread_t validSyncThread = (thread_data->fsync_apc_idx);
+                                
+    if (validSyncThread == 0) {
+        int i;
+        for (i = 0; i < 100; ++i) {
+            validSyncThread = (thread_data->fsync_apc_idx);
+                               
+            if (validSyncThread == 0)
+                usleep(300);
+        }
+    }
+    if (validSyncThread != 0) {
+        // Fail on / filter out unsupported threads;
+        if (handle == GetCurrentThread() && (validSyncThread != thread_data->fsync_apc_idx)) { 
+            //thread_data->pthread_id)) {
+            return status;
+        }
+
+        // set RT for sync threads
+        pthread_attr_setinheritsched(&pthread_attr, PTHREAD_INHERIT_SCHED);
+        ntdll_set_sync_realtime(validSyncThread, ntdll_rt_policy, priority);
+    }
+#endif
     return STATUS_SUCCESS;
 }
 
--- a/dlls/ntdll/unix/virtual.c	2021-11-28 17:14:42.776307988 -0500
+++ b/dlls/ntdll/unix/virtual.c	2021-11-28 17:14:06.308971063 -0500
@@ -3095,8 +3095,10 @@
     teb->StaticUnicodeString.Buffer = teb->StaticUnicodeBuffer;
     teb->StaticUnicodeString.MaximumLength = sizeof(teb->StaticUnicodeBuffer);
     thread_data = (struct ntdll_thread_data *)&teb->GdiTebBatch;
-    thread_data->esync_apc_fd = -1;
+    // need to see this thread data for ntdll-rt
+    thread_data->esync_apc_fd = 0;
     thread_data->fsync_apc_idx = 0;
+    thread_data->pthread_id  =  0;
     thread_data->request_fd = -1;
     thread_data->reply_fd   = -1;
     thread_data->wait_fd[0] = -1;

