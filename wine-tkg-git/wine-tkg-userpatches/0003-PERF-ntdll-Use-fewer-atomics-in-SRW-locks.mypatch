From 68948aa9ee736e0529cd58d3a37454805481aa90 Mon Sep 17 00:00:00 2001
From: Torge Matthies <openglfreak@googlemail.com>
Date: Sun, 21 Nov 2021 18:11:58 +0100
Subject: [PATCH 1/1] ntdll: Use fewer atomics in SRW locks.

Original concept by Richard Yao <ryao@gentoo.org>.

Signed-off-by: Torge Matthies <openglfreak@googlemail.com>
---
 dlls/ntdll/sync.c | 118 +++++++++++++++-------------------------------
 1 file changed, 39 insertions(+), 79 deletions(-)

diff --git a/dlls/ntdll/sync.c b/dlls/ntdll/sync.c
index 11111111111..11111111111 100644
--- a/dlls/ntdll/sync.c
+++ b/dlls/ntdll/sync.c
@@ -539,34 +539,25 @@ void WINAPI RtlInitializeSRWLock( RTL_SRWLOCK *lock )
 void WINAPI RtlAcquireSRWLockExclusive( RTL_SRWLOCK *lock )
 {
     union { RTL_SRWLOCK *rtl; struct srw_lock *s; LONG *l; } u = { lock };
+    union { struct srw_lock s; LONG l; } old, new;
 
     InterlockedIncrement16( &u.s->exclusive_waiters );
 
     for (;;)
     {
-        union { struct srw_lock s; LONG l; } old, new;
-        BOOL wait;
-
-        do
+        old.s = *u.s;
+        if (old.s.owners)
         {
-            old.s = *u.s;
-            new.s = old.s;
-
-            if (!old.s.owners)
-            {
-                /* Not locked exclusive or shared. We can try to grab it. */
-                new.s.owners = -1;
-                --new.s.exclusive_waiters;
-                wait = FALSE;
-            }
-            else
-            {
-                wait = TRUE;
-            }
-        } while (InterlockedCompareExchange( u.l, new.l, old.l ) != old.l);
+            RtlWaitOnAddress( &u.s->owners, &old.s.owners, sizeof(short), NULL );
+            continue;
+        }
 
-        if (!wait) return;
-        RtlWaitOnAddress( &u.s->owners, &new.s.owners, sizeof(short), NULL );
+        /* Not locked exclusive or shared. We can try to grab it. */
+        new.s = old.s;
+        new.s.owners = -1;
+        --new.s.exclusive_waiters;
+        if (InterlockedCompareExchange( u.l, new.l, old.l ) == old.l)
+            break;
     }
 }
 
@@ -580,32 +571,23 @@ void WINAPI RtlAcquireSRWLockExclusive( RTL_SRWLOCK *lock )
 void WINAPI RtlAcquireSRWLockShared( RTL_SRWLOCK *lock )
 {
     union { RTL_SRWLOCK *rtl; struct srw_lock *s; LONG *l; } u = { lock };
+    union { struct srw_lock s; LONG l; } old, new;
 
     for (;;)
     {
-        union { struct srw_lock s; LONG l; } old, new;
-        BOOL wait;
-
-        do
+        old.s = *u.s;
+        if (old.s.owners == -1 || old.s.exclusive_waiters)
         {
-            old.s = *u.s;
-            new = old;
-
-            if (old.s.owners != -1 && !old.s.exclusive_waiters)
-            {
-                /* Not locked exclusive, and no exclusive waiters.
-                 * We can try to grab it. */
-                ++new.s.owners;
-                wait = FALSE;
-            }
-            else
-            {
-                wait = TRUE;
-            }
-        } while (InterlockedCompareExchange( u.l, new.l, old.l ) != old.l);
+            RtlWaitOnAddress( u.s, &old.s, sizeof(struct srw_lock), NULL );
+            continue;
+        }
 
-        if (!wait) return;
-        RtlWaitOnAddress( u.s, &new.s, sizeof(struct srw_lock), NULL );
+        /* Not locked exclusive, and no exclusive waiters.
+         * We can try to grab it. */
+        new = old;
+        ++new.s.owners;
+        if (InterlockedCompareExchange( u.l, new.l, old.l ) == old.l)
+            break;
     }
 }
 
@@ -667,26 +649,15 @@ BOOLEAN WINAPI RtlTryAcquireSRWLockExclusive( RTL_SRWLOCK *lock )
 {
     union { RTL_SRWLOCK *rtl; struct srw_lock *s; LONG *l; } u = { lock };
     union { struct srw_lock s; LONG l; } old, new;
-    BOOLEAN ret;
 
-    do
-    {
-        old.s = *u.s;
-        new.s = old.s;
-
-        if (!old.s.owners)
-        {
-            /* Not locked exclusive or shared. We can try to grab it. */
-            new.s.owners = -1;
-            ret = TRUE;
-        }
-        else
-        {
-            ret = FALSE;
-        }
-    } while (InterlockedCompareExchange( u.l, new.l, old.l ) != old.l);
+    old.s = *u.s;
+    if (old.s.owners)
+        return FALSE;
 
-    return ret;
+    /* Not locked exclusive or shared. We can try to grab it. */
+    new.s = old.s;
+    new.s.owners = -1;
+    return InterlockedCompareExchange( u.l, new.l, old.l ) == old.l;
 }
 
 /***********************************************************************
@@ -696,27 +667,16 @@ BOOLEAN WINAPI RtlTryAcquireSRWLockShared( RTL_SRWLOCK *lock )
 {
     union { RTL_SRWLOCK *rtl; struct srw_lock *s; LONG *l; } u = { lock };
     union { struct srw_lock s; LONG l; } old, new;
-    BOOLEAN ret;
 
-    do
-    {
-        old.s = *u.s;
-        new.s = old.s;
-
-        if (old.s.owners != -1 && !old.s.exclusive_waiters)
-        {
-            /* Not locked exclusive, and no exclusive waiters.
-             * We can try to grab it. */
-            ++new.s.owners;
-            ret = TRUE;
-        }
-        else
-        {
-            ret = FALSE;
-        }
-    } while (InterlockedCompareExchange( u.l, new.l, old.l ) != old.l);
+    old.s = *u.s;
+    if (old.s.owners == -1 || old.s.exclusive_waiters)
+        return FALSE;
 
-    return ret;
+    /* Not locked exclusive, and no exclusive waiters.
+     * We can try to grab it. */
+    new.s = old.s;
+    ++new.s.owners;
+    return InterlockedCompareExchange( u.l, new.l, old.l ) == old.l;
 }
 
 /***********************************************************************
-- 
2.36.0

