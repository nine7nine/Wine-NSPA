From 0ad5e2337278460f208a77220a1589f24acbbb81 Mon Sep 17 00:00:00 2001
From: Paul Gofman <pgofman@codeweavers.com>
Date: Tue, 7 Mar 2023 15:54:01 -0600
Subject: [PATCH] fsync: Retry grabbing semaphore if count has changed.

CW-Bug-Id: #21996
---
 dlls/ntdll/unix/fsync.c | 28 ++++++++++++++++++----------
 1 file changed, 18 insertions(+), 10 deletions(-)

diff --git a/dlls/ntdll/unix/fsync.c b/dlls/ntdll/unix/fsync.c
index 5d8023de884..93f8370dfa6 100644
--- a/dlls/ntdll/unix/fsync.c
+++ b/dlls/ntdll/unix/fsync.c
@@ -984,15 +984,18 @@ static NTSTATUS __fsync_wait_objects( DWORD count, const HANDLE *handles,
                     case FSYNC_SEMAPHORE:
                     {
                         struct semaphore *semaphore = obj->shm;
-                        int current;
+                        int current, new;
 
-                        if ((current = __atomic_load_n( &semaphore->count, __ATOMIC_SEQ_CST ))
-                                && __sync_val_compare_and_swap( &semaphore->count, current, current - 1 ) == current)
+                        new = __atomic_load_n( &semaphore->count, __ATOMIC_SEQ_CST );
+                        while ((current = new))
                         {
-                            TRACE("Woken up by handle %p [%d].\n", handles[i], i);
-                            if (waited) simulate_sched_quantum();
-                            put_objects( objs, count );
-                            return i;
+                            if ((new = __sync_val_compare_and_swap( &semaphore->count, current, current - 1 )) == current)
+                            {
+                                TRACE("Woken up by handle %p [%d].\n", handles[i], i);
+                                if (waited) simulate_sched_quantum();
+                                put_objects( objs, count );
+                                return i;
+                            }
                         }
                         futex_vector_set( &futexes[i], &semaphore->count, 0 );
                         break;
@@ -1238,10 +1241,15 @@ static NTSTATUS __fsync_wait_objects( DWORD count, const HANDLE *handles,
                 case FSYNC_SEMAPHORE:
                 {
                     struct semaphore *semaphore = obj->shm;
-                    int current;
+                    int current, new;
 
-                    if (!(current = __atomic_load_n( &semaphore->count, __ATOMIC_SEQ_CST ))
-                            || __sync_val_compare_and_swap( &semaphore->count, current, current - 1 ) != current)
+                    new = __atomic_load_n( &semaphore->count, __ATOMIC_SEQ_CST );
+                    while ((current = new))
+                    {
+                        if ((new = __sync_val_compare_and_swap( &semaphore->count, current, current - 1 )) == current)
+                            break;
+                    }
+                    if (!current)
                         goto tooslow;
                     break;
                 }
From df30c7ca39c3609b6f41584ba330cb42eaed1f54 Mon Sep 17 00:00:00 2001
From: Paul Gofman <pgofman@codeweavers.com>
Date: Mon, 13 Mar 2023 21:39:04 -0600
Subject: [PATCH] fsync: Avoid race between NtClose() and get_object().

CW-Bug-Id: #22029
---
 dlls/ntdll/unix/fsync.c | 19 ++++++++++++++++---
 dlls/ntdll/unix/fsync.h |  5 +++++
 2 files changed, 21 insertions(+), 3 deletions(-)

diff --git a/dlls/ntdll/unix/fsync.c b/dlls/ntdll/unix/fsync.c
index 93f8370dfa6..41d788e8412 100644
--- a/dlls/ntdll/unix/fsync.c
+++ b/dlls/ntdll/unix/fsync.c
@@ -381,8 +381,9 @@ static BOOL get_cached_object( HANDLE handle, struct fsync *obj )
     {
         /* This check does not strictly guarantee that we avoid the potential race but is supposed to greatly
          * reduce the probability of that. */
+        FIXME( "Cache changed while getting object, handle %p, shm_idx %d, refcount %d.\n",
+               handle, cache.shm_idx, ((int *)obj->shm)[2] );
         put_object( obj );
-        FIXME( "Cache changed while getting object.\n" );
         goto again;
     }
     return TRUE;
@@ -397,6 +398,7 @@ static NTSTATUS get_object( HANDLE handle, struct fsync *obj )
     NTSTATUS ret = STATUS_SUCCESS;
     unsigned int shm_idx = 0;
     enum fsync_type type;
+    sigset_t sigset;
 
     if (get_cached_object( handle, obj )) return STATUS_SUCCESS;
 
@@ -406,7 +408,17 @@ static NTSTATUS get_object( HANDLE handle, struct fsync *obj )
         return STATUS_NOT_IMPLEMENTED;
     }
 
-    /* We need to try grabbing it from the server. */
+
+    /* We need to try grabbing it from the server. Uninterrupted section
+     * is needed to avoid race with NtClose() which first calls fsync_close()
+     * and then closes handle on server. Without the section we might cache
+     * already closed handle back. */
+    server_enter_uninterrupted_section( &fd_cache_mutex, &sigset );
+    if (get_cached_object( handle, obj ))
+    {
+        server_leave_uninterrupted_section( &fd_cache_mutex, &sigset );
+        return STATUS_SUCCESS;
+    }
     SERVER_START_REQ( get_fsync_idx )
     {
         req->handle = wine_server_obj_handle( handle );
@@ -417,6 +429,8 @@ static NTSTATUS get_object( HANDLE handle, struct fsync *obj )
         }
     }
     SERVER_END_REQ;
+    if (!ret) add_to_list( handle, type, shm_idx );
+    server_leave_uninterrupted_section( &fd_cache_mutex, &sigset );
 
     if (ret)
     {
@@ -428,7 +442,6 @@ static NTSTATUS get_object( HANDLE handle, struct fsync *obj )
 
     obj->type = type;
     obj->shm = get_shm( shm_idx );
-    add_to_list( handle, type, shm_idx );
     /* get_fsync_idx server request increments shared mem refcount, so not grabbing object here. */
     return ret;
 }
diff --git a/dlls/ntdll/unix/fsync.h b/dlls/ntdll/unix/fsync.h
index b3604548554..16ae15f8423 100644
--- a/dlls/ntdll/unix/fsync.h
+++ b/dlls/ntdll/unix/fsync.h
@@ -47,3 +47,8 @@ extern NTSTATUS fsync_wait_objects( DWORD count, const HANDLE *handles, BOOLEAN
                                     BOOLEAN alertable, const LARGE_INTEGER *timeout ) DECLSPEC_HIDDEN;
 extern NTSTATUS fsync_signal_and_wait( HANDLE signal, HANDLE wait,
     BOOLEAN alertable, const LARGE_INTEGER *timeout ) DECLSPEC_HIDDEN;
+
+/* We have to synchronize on the fd cache mutex so that fsync_close(), close_handle() sequence 
+ * called from NtClose() doesn't race with get_fsync_idx(), add_to_list() sequence called
+ * from get_object(). */
+extern pthread_mutex_t fd_cache_mutex;

