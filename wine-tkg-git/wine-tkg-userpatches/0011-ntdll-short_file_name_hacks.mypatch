From 392ce75bf8065e0b30704e39bf312a78b267fd40 Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?R=C3=A9mi=20Bernon?= <rbernon@codeweavers.com>
Date: Sat, 20 Nov 2021 19:10:59 +0100
Subject: [PATCH] SPLIT: ntdll: Use lookup tables for invalid chars.

---
 dlls/ntdll/unix/file.c | 47 +++++++++++++++++++++++++++++++-----------
 1 file changed, 35 insertions(+), 12 deletions(-)

diff --git a/dlls/ntdll/unix/file.c b/dlls/ntdll/unix/file.c
index 82625f52990..73dd4eba504 100644
--- a/dlls/ntdll/unix/file.c
+++ b/dlls/ntdll/unix/file.c
@@ -172,7 +172,6 @@ typedef struct
 #define IS_SEPARATOR(ch)   ((ch) == '\\' || (ch) == '/')
 
 #define INVALID_NT_CHARS   '*','?','<','>','|','"'
-#define INVALID_DOS_CHARS  INVALID_NT_CHARS,'+','=',',',';','[',']',' ','\345'
 
 #define MAX_DIR_ENTRY_LEN 255  /* max length of a directory entry in chars */
 
@@ -243,9 +242,38 @@ static pthread_mutex_t mnt_mutex = PTHREAD_MUTEX_INITIALIZER;
 /* check if a given Unicode char is OK in a DOS short name */
 static inline BOOL is_invalid_dos_char( WCHAR ch )
 {
-    static const WCHAR invalid_chars[] = { INVALID_DOS_CHARS,'~','.',0 };
-    if (ch > 0x7f) return TRUE;
-    return wcschr( invalid_chars, ch ) != NULL;
+    static const char is_invalid[0x7f] =
+    {
+        ['*'] = 1, ['?'] = 1, ['<'] = 1, ['>'] = 1, ['|'] = 1, ['"'] = 1, ['+'] = 1, ['='] = 1,
+        [','] = 1, [';'] = 1, ['['] = 1, [']'] = 1, [' '] = 1, ['~'] = 1, ['.'] = 1,
+    };
+    return ch <= 0x7f ? is_invalid[ch] : TRUE;
+}
+
+static inline BOOL is_invalid_8dot3_char( WCHAR ch )
+{
+    static const char is_invalid[0x7f] =
+    {
+        ['*'] = 1, ['?'] = 1, ['<'] = 1, ['>'] = 1, ['|'] = 1, ['"'] = 1, ['+'] = 1, ['='] = 1,
+        [','] = 1, [';'] = 1, ['['] = 1, [']'] = 1, [' '] = 1, [':'] = 1, ['/'] = 1, ['\\'] = 1,
+    };
+    return ch <= 0x7f ? is_invalid[ch] : TRUE;
+}
+
+static inline BOOL is_invalid_nt_char( WCHAR ch )
+{
+    static const char is_invalid[0x7f] =
+    {
+        1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
+        ['*'] = 1, ['?'] = 1, ['<'] = 1, ['>'] = 1, ['|'] = 1, ['"'] = 1,
+    };
+    return ch <= 0x7f ? is_invalid[ch] : FALSE;
+}
+
+static inline BOOL is_invalid_unix_char( WCHAR ch )
+{
+    if (ch == '/') return TRUE;
+    return is_invalid_nt_char( ch );
 }
 
 /* check if the device can be a mounted volume */
@@ -1379,7 +1407,6 @@ static BOOLEAN match_filename( const WCHAR *name, int length, const UNICODE_STRI
  */
 static BOOLEAN is_legal_8dot3_name( const WCHAR *name, int len )
 {
-    static const WCHAR invalid_chars[] = { INVALID_DOS_CHARS,':','/','\\',0 };
     int i, dot = -1;
 
     if (len > 12) return FALSE;
@@ -1389,8 +1416,7 @@ static BOOLEAN is_legal_8dot3_name( const WCHAR *name, int len )
 
     for (i = 0; i < len; i++)
     {
-        if (name[i] > 0x7f) return FALSE;
-        if (wcschr( invalid_chars, name[i] )) return FALSE;
+        if (is_invalid_8dot3_char( name[i] )) return FALSE;
         if (name[i] == '.')
         {
             if (dot != -1) return FALSE;
@@ -3132,7 +3158,6 @@ static NTSTATUS file_id_to_unix_file_name( const OBJECT_ATTRIBUTES *attr, char *
 static NTSTATUS lookup_unix_name( const WCHAR *name, int name_len, char **buffer, int unix_len, int pos,
                                   UINT disposition, BOOL is_unix )
 {
-    static const WCHAR invalid_charsW[] = { INVALID_NT_CHARS, '/', 0 };
     NTSTATUS status;
     int ret;
     struct stat st;
@@ -3159,7 +3184,7 @@ static NTSTATUS lookup_unix_name( const WCHAR *name, int name_len, char **buffer
         {
             if (!*ptr) return STATUS_OBJECT_NAME_INVALID;
             if (is_unix) continue;
-            if (*ptr < 32 || wcschr( invalid_charsW, *ptr )) return STATUS_OBJECT_NAME_INVALID;
+            if (is_invalid_unix_char( *ptr )) return STATUS_OBJECT_NAME_INVALID;
         }
     }
 
@@ -3249,7 +3274,6 @@ static NTSTATUS nt_to_unix_file_name_no_root( const UNICODE_STRING *nameW, char
                                               UINT disposition )
 {
     static const WCHAR unixW[] = {'u','n','i','x'};
-    static const WCHAR invalid_charsW[] = { INVALID_NT_CHARS, 0 };
 
     NTSTATUS status = STATUS_SUCCESS;
     const WCHAR *name;
@@ -3276,8 +3300,7 @@ static NTSTATUS nt_to_unix_file_name_no_root( const UNICODE_STRING *nameW, char
     for (pos = 0; pos < name_len && pos <= MAX_DIR_ENTRY_LEN; pos++)
     {
         if (name[pos] == '\\') break;
-        if (name[pos] < 32 || wcschr( invalid_charsW, name[pos] ))
-            return STATUS_OBJECT_NAME_INVALID;
+        if (is_invalid_nt_char( name[pos] )) return STATUS_OBJECT_NAME_INVALID;
         prefix[pos] = (name[pos] >= 'A' && name[pos] <= 'Z') ? name[pos] + 'a' - 'A' : name[pos];
     }
     if (pos > MAX_DIR_ENTRY_LEN) return STATUS_OBJECT_NAME_INVALID;

From 4054919d99b37edb6691484703562e65cb99f978 Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?R=C3=A9mi=20Bernon?= <rbernon@codeweavers.com>
Date: Sat, 20 Nov 2021 19:14:04 +0100
Subject: [PATCH] WIP: ntdll: Lookup short file name extension from the end.

---
 dlls/ntdll/unix/file.c | 4 +++-
 1 file changed, 3 insertions(+), 1 deletion(-)

diff --git a/dlls/ntdll/unix/file.c b/dlls/ntdll/unix/file.c
index 73dd4eba504..7702fe26aee 100644
--- a/dlls/ntdll/unix/file.c
+++ b/dlls/ntdll/unix/file.c
@@ -1290,7 +1290,9 @@ static ULONG hash_short_file_name( const WCHAR *name, int length, LPWSTR buffer
     }
 
     /* Find last dot for start of the extension */
-    for (p = name + 1, ext = NULL; p < end - 1; p++) if (*p == '.') ext = p;
+    for (end = name + length, ext = end - 1; ext > name; ext--)
+        if (*ext == '.') break;
+    if (ext == name) ext = NULL;
 
     /* Copy first 4 chars, replacing invalid chars with '_' */
     for (i = 4, p = name, dst = buffer; i > 0; i--, p++)

From e7873c212bf3d3ac73acdca0e44346dc929eabe0 Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?R=C3=A9mi=20Bernon?= <rbernon@codeweavers.com>
Date: Sat, 20 Nov 2021 19:14:31 +0100
Subject: [PATCH] WIP: ntdll: Compute lower short file name before hashing it.

---
 dlls/ntdll/unix/file.c | 11 +++++++----
 1 file changed, 7 insertions(+), 4 deletions(-)

diff --git a/dlls/ntdll/unix/file.c b/dlls/ntdll/unix/file.c
index 7702fe26aee..44d1be97dbe 100644
--- a/dlls/ntdll/unix/file.c
+++ b/dlls/ntdll/unix/file.c
@@ -1268,7 +1268,8 @@ static ULONG hash_short_file_name( const WCHAR *name, int length, LPWSTR buffer
 {
     static const char hash_chars[32] = "ABCDEFGHIJKLMNOPQRSTUVWXYZ012345";
 
-    LPCWSTR p, ext, end = name + length;
+    WCHAR hash_name[MAX_DIR_ENTRY_LEN + 1];
+    LPCWSTR p, ext, end = name + length, hash_end = hash_name + length;
     LPWSTR dst;
     unsigned short hash;
     int i;
@@ -1278,9 +1279,11 @@ static ULONG hash_short_file_name( const WCHAR *name, int length, LPWSTR buffer
     /* insert a better algorithm here... */
     if (!is_case_sensitive)
     {
-        for (p = name, hash = 0xbeef; p < end - 1; p++)
-            hash = (hash<<3) ^ (hash>>5) ^ towlower(*p) ^ (towlower(p[1]) << 8);
-        hash = (hash<<3) ^ (hash>>5) ^ towlower(*p); /* Last character */
+        for (p = name, dst = hash_name; p < end; p++, dst++)
+            *dst = towlower(*p);
+        for (p = hash_name, hash = 0xbeef; p < hash_end - 1; p++)
+            hash = (hash << 3) ^ (hash >> 5) ^ *p ^ (p[1] << 8);
+        hash = (hash << 3) ^ (hash >> 5) ^ *p;  /* Last character */
     }
     else
     {

From a312756ebca7b5d025aad4b19a21f1ba840d3955 Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?R=C3=A9mi=20Bernon?= <rbernon@codeweavers.com>
Date: Sat, 20 Nov 2021 19:15:08 +0100
Subject: [PATCH] WIP: ntdll: Add a fast path for ASCII lower/upper case.

---
 dlls/ntdll/unix/unix_private.h | 4 ++++
 1 file changed, 4 insertions(+)

diff --git a/dlls/ntdll/unix/unix_private.h b/dlls/ntdll/unix/unix_private.h
index 77f8757fd95..3ca84566302 100644
--- a/dlls/ntdll/unix/unix_private.h
+++ b/dlls/ntdll/unix/unix_private.h
@@ -414,11 +414,15 @@ extern enum loadorder get_load_order( const UNICODE_STRING *nt_name ) DECLSPEC_H
 
 static inline WCHAR ntdll_towupper( WCHAR ch )
 {
+    if (ch >= 'a' && ch <= 'z') return ch - 'a' + 'A';
+    if (ch <= 0x7f) return ch;
     return ch + uctable[uctable[uctable[ch >> 8] + ((ch >> 4) & 0x0f)] + (ch & 0x0f)];
 }
 
 static inline WCHAR ntdll_towlower( WCHAR ch )
 {
+    if (ch >= 'A' && ch <= 'Z') return ch - 'A' + 'a';
+    if (ch <= 0x7f) return ch;
     return ch + lctable[lctable[lctable[ch >> 8] + ((ch >> 4) & 0x0f)] + (ch & 0x0f)];
 }
 

