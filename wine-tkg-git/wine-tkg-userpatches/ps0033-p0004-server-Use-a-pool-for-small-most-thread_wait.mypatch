From 016b15925a0ad462983a061a0ec6a09ad34b226d Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?R=C3=A9mi=20Bernon?= <rbernon@codeweavers.com>
Date: Fri, 13 Mar 2020 17:12:14 +0100
Subject: [PATCH 4/4] server: Use a pool for small (most) thread_wait allocs.

---
 server/thread.c | 47 +++++++++++++++++++++++++++++++++++++++++++++--
 1 file changed, 45 insertions(+), 2 deletions(-)

diff --git a/server/thread.c b/server/thread.c
index 11111111111..11111111111 100644
--- a/server/thread.c
+++ b/server/thread.c
@@ -138,6 +138,7 @@ struct thread_wait
 {
     struct thread_wait     *next;       /* next wait structure for this thread */
     struct thread          *thread;     /* owner thread */
+    int                     capacity;   /* size of objects */
     int                     count;      /* count of objects */
     int                     flags;
     int                     abandoned;
@@ -1104,6 +1105,47 @@ void set_wait_status( struct wait_queue_entry *entry, int status )
     entry->wait->status = status;
 }
 
+static struct thread_wait *wait_free_pool;
+
+static struct thread_wait *thread_wait_alloc(unsigned int count)
+{
+    struct thread_wait *wait, *pool;
+    unsigned int i;
+
+    if (count > 2)
+        return mem_alloc( FIELD_OFFSET(struct thread_wait, queues[count]) );
+
+    if (!(wait = wait_free_pool))
+    {
+        unsigned int size = FIELD_OFFSET( struct thread_wait, queues[2] );
+        if (!(pool = calloc( 64, size )))
+            return NULL;
+
+        for (i = 0; i < 64; ++i)
+        {
+            wait = (struct thread_wait *)((char*)pool + size * i);
+            wait->next = wait_free_pool;
+            wait_free_pool = wait;
+        }
+    }
+
+    wait_free_pool = wait->next;
+    assert(wait);
+    return wait;
+}
+
+static void thread_wait_free(struct thread_wait *wait)
+{
+    if (wait->capacity > 2)
+    {
+        free(wait);
+        return;
+    }
+
+    wait->next = wait_free_pool;
+    wait_free_pool = wait;
+}
+
 /* finish waiting */
 static unsigned int end_wait( struct thread *thread, unsigned int status )
 {
@@ -1133,7 +1175,7 @@ static unsigned int end_wait( struct thread *thread, unsigned int status )
     for (i = 0, entry = wait->queues; i < wait->count; i++, entry++)
         entry->obj->ops->remove_queue( entry->obj, entry );
     if (wait->user) remove_timeout_user( wait->user );
-    free( wait );
+    thread_wait_free( wait );
     return status;
 }
 
@@ -1145,9 +1187,10 @@ static int wait_on( const select_op_t *select_op, unsigned int count, struct obj
     struct wait_queue_entry *entry;
     unsigned int i;
 
-    if (!(wait = mem_alloc( FIELD_OFFSET(struct thread_wait, queues[count]) ))) return 0;
+    if (!(wait = thread_wait_alloc( count ))) { assert(0); return 0; }
     wait->next    = current->wait;
     wait->thread  = current;
+    wait->capacity = count;
     wait->count   = count;
     wait->flags   = flags;
     wait->select  = select_op->op;
