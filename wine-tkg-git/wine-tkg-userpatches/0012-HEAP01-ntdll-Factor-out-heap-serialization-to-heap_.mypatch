From: "Rémi Bernon" <rbernon@codeweavers.com>
Subject: [PATCH 2/5] ntdll: Factor out heap serialization to heap_(lock|unlock) helpers.
Message-Id: <20220428103149.2493705-2-rbernon@codeweavers.com>
Date: Thu, 28 Apr 2022 12:31:46 +0200
In-Reply-To: <20220428103149.2493705-1-rbernon@codeweavers.com>
References: <20220428103149.2493705-1-rbernon@codeweavers.com>

* modified for my nspa tree

Signed-off-by: Rémi Bernon <rbernon@codeweavers.com>
---
 dlls/ntdll/heap.c | 91 ++++++++++++++++++++++++++---------------------
 1 file changed, 51 insertions(+), 40 deletions(-)

diff --git a/dlls/ntdll/heap.c b/dlls/ntdll/heap.c
index 11111111111..11111111111 100644
--- a/dlls/ntdll/heap.c
+++ b/dlls/ntdll/heap.c
@@ -163,7 +163,7 @@ typedef struct tagHEAP
     DWORD            magic;         /* Magic number */
     DWORD            pending_pos;   /* Position in pending free requests ring */
     ARENA_INUSE    **pending_free;  /* Ring buffer for pending free requests */
-    RTL_CRITICAL_SECTION critSection; /* Critical section for serialization */
+    RTL_CRITICAL_SECTION cs;
     FREE_LIST_ENTRY *freeList;      /* Free lists */
     struct wine_rb_tree freeTree;   /* Free tree */
     int              extended_type; /* Extended heap type */
@@ -322,13 +322,24 @@ static inline ULONG get_protection_type(
     return (flags & HEAP_CREATE_ENABLE_EXECUTE) ? PAGE_EXECUTE_READWRITE : PAGE_READWRITE;
 }
 
-static RTL_CRITICAL_SECTION_DEBUG process_heap_critsect_debug =
+static RTL_CRITICAL_SECTION_DEBUG process_heap_cs_debug =
 {
     0, 0, NULL,  /* will be set later */
-    { &process_heap_critsect_debug.ProcessLocksList, &process_heap_critsect_debug.ProcessLocksList },
+    { &process_heap_cs_debug.ProcessLocksList, &process_heap_cs_debug.ProcessLocksList },
       0, 0, { (DWORD_PTR)(__FILE__ ": main process heap section") }
 };
 
+static void heap_lock( HEAP *heap, DWORD flags )
+{
+    if ((flags | heap->flags) & HEAP_NO_SERIALIZE) return;
+    enter_critical_section( &heap->cs );
+}
+
+static void heap_unlock( HEAP *heap, DWORD flags )
+{
+    if ((flags | heap->flags) & HEAP_NO_SERIALIZE) return;
+    leave_critical_section( &heap->cs );
+}
 
 /***********************************************************************
  *           HEAP_Dump
@@ -482,9 +493,9 @@ static HEAP *HEAP_GetPtr(
     }
     if (!(heapPtr->flags & HEAP_VALIDATE_ALL)) return heapPtr;
 
-    if (!(heapPtr->flags & HEAP_NO_SERIALIZE)) RtlEnterCriticalSection( &heapPtr->critSection );
+    heap_lock( heapPtr, heapPtr->flags );
     ret = HEAP_IsRealArena( heapPtr, heapPtr->flags, NULL, NOISY );
-    if (!(heapPtr->flags & HEAP_NO_SERIALIZE)) RtlLeaveCriticalSection( &heapPtr->critSection );
+    heap_unlock( heapPtr, heapPtr->flags );
 
     if (ret) return heapPtr;
     if (TRACE_ON(heap))
@@ -1018,31 +1029,31 @@ static SUBHEAP *HEAP_CreateSubHeap( HEAP
 
         if (!processHeap)  /* do it by hand to avoid memory allocations */
         {
-            heap->critSection.DebugInfo      = &process_heap_critsect_debug;
-            heap->critSection.LockCount      = -1;
-            heap->critSection.RecursionCount = 0;
-            heap->critSection.OwningThread   = 0;
-            heap->critSection.LockSemaphore  = 0;
-            heap->critSection.SpinCount      = 0;
-            process_heap_critsect_debug.CriticalSection = &heap->critSection;
+            heap->cs.DebugInfo      = &process_heap_cs_debug;
+            heap->cs.LockCount      = -1;
+            heap->cs.RecursionCount = 0;
+            heap->cs.OwningThread   = 0;
+            heap->cs.LockSemaphore  = 0;
+            heap->cs.SpinCount      = 0;
+            process_heap_cs_debug.CriticalSection = &heap->cs;
         }
         else
         {
-            RtlInitializeCriticalSection( &heap->critSection );
-            heap->critSection.DebugInfo->Spare[0] = (DWORD_PTR)(__FILE__ ": HEAP.critSection");
+            RtlInitializeCriticalSection( &heap->cs );
+            heap->cs.DebugInfo->Spare[0] = (DWORD_PTR)(__FILE__ ": heap.cs");
         }
 
         if (flags & HEAP_SHARED)
         {
             /* let's assume that only one thread at a time will try to do this */
-            HANDLE sem = heap->critSection.LockSemaphore;
+            HANDLE sem = heap->cs.LockSemaphore;
             if (!sem) NtCreateSemaphore( &sem, SEMAPHORE_ALL_ACCESS, NULL, 0, 1 );
 
             NtDuplicateObject( NtCurrentProcess(), sem, NtCurrentProcess(), &sem, 0, 0,
                                DUPLICATE_MAKE_GLOBAL | DUPLICATE_SAME_ACCESS | DUPLICATE_CLOSE_SOURCE );
-            heap->critSection.LockSemaphore = sem;
-            RtlFreeHeap( processHeap, 0, heap->critSection.DebugInfo );
-            heap->critSection.DebugInfo = NULL;
+            heap->cs.LockSemaphore = sem;
+            RtlFreeHeap( processHeap, 0, heap->cs.DebugInfo );
+            heap->cs.DebugInfo = NULL;
         }
     }
 
@@ -1658,9 +1669,9 @@ HANDLE WINAPI RtlCreateHeap( ULONG flags
     if (processHeap)
     {
         HEAP *heapPtr = subheap->heap;
-        enter_critical_section( &processHeap->critSection );
+        enter_critical_section( &processHeap->cs );
         list_add_head( &processHeap->entry, &heapPtr->entry );
-        leave_critical_section( &processHeap->critSection );
+        leave_critical_section( &processHeap->cs );
     }
     else if (!addr)
     {
@@ -1704,12 +1715,12 @@ HANDLE WINAPI RtlDestroyHeap( HANDLE hea
     if (heap == processHeap) return heap; /* cannot delete the main process heap */
 
     /* remove it from the per-process list */
-    enter_critical_section( &processHeap->critSection );
+    enter_critical_section( &processHeap->cs );
     list_remove( &heapPtr->entry );
-    leave_critical_section( &processHeap->critSection );
+    leave_critical_section( &processHeap->cs );
 
-    heapPtr->critSection.DebugInfo->Spare[0] = 0;
-    RtlDeleteCriticalSection( &heapPtr->critSection );
+    heapPtr->cs.DebugInfo->Spare[0] = 0;
+    RtlDeleteCriticalSection( &heapPtr->cs );
 
     LIST_FOR_EACH_ENTRY_SAFE( arena, arena_next, &heapPtr->large_list, ARENA_LARGE, entry )
     {
@@ -1771,9 +1782,9 @@ void * WINAPI DECLSPEC_HOTPATCH RtlAlloc
         if (!(status = HEAP_lfh_allocate( heap, flags, size, &ptr ))) break;
         /* fallthrough */
     default:
-        if (!(flags & HEAP_NO_SERIALIZE)) RtlEnterCriticalSection( &heapPtr->critSection );
+        heap_lock( heapPtr, flags );
         status = HEAP_std_allocate( heap, flags, size, &ptr );
-        if (!(flags & HEAP_NO_SERIALIZE)) RtlLeaveCriticalSection( &heapPtr->critSection );
+        heap_unlock( heapPtr, flags );
         break;
     }
 
@@ -1871,9 +1882,9 @@ BOOLEAN WINAPI DECLSPEC_HOTPATCH RtlFree
         if (!(status = HEAP_lfh_free( heap, flags, ptr ))) break;
         /* fallthrough */
     default:
-        if (!(flags & HEAP_NO_SERIALIZE)) RtlEnterCriticalSection( &heapPtr->critSection );
+        heap_lock( heapPtr, flags );
         status = HEAP_std_free( heap, flags, ptr );
-        if (!(flags & HEAP_NO_SERIALIZE)) RtlLeaveCriticalSection( &heapPtr->critSection );
+        heap_unlock( heapPtr, flags );
         break;
     }
 
@@ -1945,9 +1956,9 @@ PVOID WINAPI RtlReAllocateHeap( HANDLE h
         if (!(status = HEAP_lfh_reallocate( heap, flags, ptr, size, &ret ))) break;
         /* fallthrough */
     default:
-        if (!(flags & HEAP_NO_SERIALIZE)) RtlEnterCriticalSection( &heapPtr->critSection );
+        heap_lock( heapPtr, flags );
         status = HEAP_std_reallocate( heap, flags, ptr, size, &ret );
-        if (!(flags & HEAP_NO_SERIALIZE)) RtlLeaveCriticalSection( &heapPtr->critSection );
+        heap_unlock( heapPtr, flags );
         break;
     }
 
@@ -2099,7 +2110,7 @@ BOOLEAN WINAPI RtlLockHeap( HANDLE heap
 {
     HEAP *heapPtr = HEAP_GetPtr( heap );
     if (!heapPtr) return FALSE;
-    enter_critical_section( &heapPtr->critSection );
+    enter_critical_section( &heapPtr->cs );
     return TRUE;
 }
 
@@ -2120,7 +2131,7 @@ BOOLEAN WINAPI RtlUnlockHeap( HANDLE hea
 {
     HEAP *heapPtr = HEAP_GetPtr( heap );
     if (!heapPtr) return FALSE;
-    leave_critical_section( &heapPtr->critSection );
+    leave_critical_section( &heapPtr->cs );
     return TRUE;
 }
 
@@ -2162,9 +2173,9 @@ SIZE_T WINAPI RtlSizeHeap( HANDLE heap,
         if (!(status = HEAP_lfh_get_allocated_size( heap, flags, ptr, &size ))) break;
         /* fallthrough */
     default:
-        if (!(flags & HEAP_NO_SERIALIZE)) RtlEnterCriticalSection( &heapPtr->critSection );
+        heap_lock( heapPtr, flags );
         status = HEAP_std_get_allocated_size( heap, flags, ptr, &size );
-        if (!(flags & HEAP_NO_SERIALIZE)) RtlLeaveCriticalSection( &heapPtr->critSection );
+        heap_unlock( heapPtr, flags );
         break;
     }
 
@@ -2217,9 +2228,9 @@ BOOLEAN WINAPI RtlValidateHeap( HANDLE h
         if (!HEAP_lfh_validate( heapPtr, flags, ptr )) break;
         /* fallthrough */
     default:
-        if (!(flags & HEAP_NO_SERIALIZE)) RtlEnterCriticalSection( &heapPtr->critSection );
+        heap_lock( heapPtr, flags );
         if (!HEAP_IsRealArena( heapPtr, flags, ptr, QUIET )) status = STATUS_INVALID_PARAMETER;
-        if (!(flags & HEAP_NO_SERIALIZE)) RtlLeaveCriticalSection( &heapPtr->critSection );
+        heap_unlock( heapPtr, flags );
         break;
     }
 
@@ -2246,7 +2257,7 @@ NTSTATUS WINAPI RtlWalkHeap( HANDLE heap
 
     if (!heapPtr || !entry) return STATUS_INVALID_PARAMETER;
 
-    if (!(heapPtr->flags & HEAP_NO_SERIALIZE)) enter_critical_section( &heapPtr->critSection );
+    heap_lock( heapPtr, 0 );
 
     /* FIXME: enumerate large blocks too */
 
@@ -2351,7 +2362,7 @@ NTSTATUS WINAPI RtlWalkHeap( HANDLE heap
     if (TRACE_ON(heap)) HEAP_DumpEntry(entry);
 
 HW_end:
-    if (!(heapPtr->flags & HEAP_NO_SERIALIZE)) leave_critical_section( &heapPtr->critSection );
+    heap_unlock( heapPtr, 0 );
     return ret;
 }
 
@@ -2374,7 +2385,7 @@ ULONG WINAPI RtlGetProcessHeaps( ULONG c
     ULONG total = 1;  /* main heap */
     struct list *ptr;
 
-    enter_critical_section( &processHeap->critSection );
+    enter_critical_section( &processHeap->cs );
     LIST_FOR_EACH( ptr, &processHeap->entry ) total++;
     if (total <= count)
     {
@@ -2382,7 +2393,7 @@ ULONG WINAPI RtlGetProcessHeaps( ULONG c
         LIST_FOR_EACH( ptr, &processHeap->entry )
             *heaps++ = LIST_ENTRY( ptr, HEAP, entry );
     }
-    leave_critical_section( &processHeap->critSection );
+    leave_critical_section( &processHeap->cs );
     return total;
 }
 
-- 
2.36.0

