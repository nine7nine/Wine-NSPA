 - Implement Get/SetProcessWorkingSetSize() in kernelbase/process.c
 
 johnstonljordan <AT> gmail <DOT> com

--- a/dlls/kernelbase/process.c	2022-05-31 21:36:02.380736004 -0400
+++ b/dlls/kernelbase/process.c	2022-05-31 21:27:14.566272636 -0400
@@ -20,6 +20,11 @@
 
 #include <stdarg.h>
 #include <string.h>
+#include <stdio.h>
+#include <sys/resource.h>
+#ifdef HAVE_SYS_MMAN_H
+#include <sys/mman.h>
+#endif
 
 #include "ntstatus.h"
 #define WIN32_NO_STATUS
@@ -1018,11 +1023,29 @@ DWORD WINAPI DECLSPEC_HOTPATCH GetProces
 BOOL WINAPI DECLSPEC_HOTPATCH GetProcessWorkingSetSizeEx( HANDLE process, SIZE_T *minset,
                                                           SIZE_T *maxset, DWORD *flags)
 {
-    FIXME( "(%p,%p,%p,%p): stub\n", process, minset, maxset, flags );
-    /* 32 MB working set size */
-    if (minset) *minset = 32*1024*1024;
-    if (maxset) *maxset = 32*1024*1024;
+    struct rlimit limits;
+
+    if (process != GetCurrentProcess()) {
+        FIXME("Cannot get info for another process");
+        SetLastError(ERROR_INVALID_PARAMETER);
+        return FALSE;
+    }
+    /* 32 MB minimum working set size - no rlimit for this */
+    if (minset)
+        *minset = 32*1024*1024;
+
+    if (maxset) {
+        if (getrlimit(RLIMIT_MEMLOCK, &limits) == -1) {
+            return FALSE;
+        }
+        
+        if (limits.rlim_max == RLIM_INFINITY)
+            *maxset = MAXUINT_PTR;
+        else
+            *maxset = limits.rlim_max;
+    }
     if (flags) *flags = QUOTA_LIMITS_HARDWS_MIN_DISABLE | QUOTA_LIMITS_HARDWS_MAX_DISABLE;
+    
     return TRUE;
 }
 
@@ -1269,6 +1292,37 @@ BOOL WINAPI DECLSPEC_HOTPATCH SetProcess
 BOOL WINAPI DECLSPEC_HOTPATCH SetProcessWorkingSetSizeEx( HANDLE process, SIZE_T minset,
                                                           SIZE_T maxset, DWORD flags )
 {
+    struct rlimit limits;
+
+    if (process != GetCurrentProcess()) {
+        FIXME("Cannot get info for another process");
+        SetLastError(ERROR_INVALID_PARAMETER);
+        return FALSE;
+    }
+ 
+    if(( minset == (SIZE_T)-1) && (maxset == (SIZE_T)-1)) {
+#ifdef HAVE_SYS_MMAN
+    if (munlockall() == -1) {
+        return FALSE;
+    }
+
+    limits.rlim_cur = 0;
+    limits.rlim_max = 0;
+#else
+    SetLastError(ERROR_INVALID_PARAMETER);
+    return FALSE;
+#endif
+    }
+    else {
+        limits.rlim_cur = maxset;
+        limits.rlim_max = maxset;
+    }
+
+    if (setrlimit(RLIMIT_MEMLOCK, &limits) == -1) {
+
+        return FALSE;
+    }
+
     return TRUE;
 }
  
