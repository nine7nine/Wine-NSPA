diff --git a/dlls/ntdll/heap.c b/dlls/ntdll/heap.c
index 0080a89fddb6..d1c978f31e54 100644
--- a/dlls/ntdll/heap.c
+++ b/dlls/ntdll/heap.c
@@ -3,6 +3,7 @@
  *
  * Copyright 1996 Alexandre Julliard
  * Copyright 1998 Ulrich Weigand
+ * Copyright 2017 Sebastian Lackner
  *
  * This library is free software; you can redistribute it and/or
  * modify it under the terms of the GNU Lesser General Public
@@ -35,6 +36,7 @@
 #include "winternl.h"
 #include "ntdll_misc.h"
 #include "wine/list.h"
+#include "wine/rbtree.h"
 #include "wine/debug.h"
 
 WINE_DEFAULT_DEBUG_CHANNEL(heap);
@@ -56,6 +58,7 @@ typedef struct tagARENA_FREE
     DWORD                 size;     /* Block size; must be the first field */
     DWORD                 magic;    /* Magic number */
     struct list           entry;    /* Entry in free list */
+    struct wine_rb_entry  tree_entry; /* Entry in free tree */
 } ARENA_FREE;
 
 typedef struct
@@ -68,6 +71,12 @@ typedef struct
     DWORD                 magic;      /* these must remain at the end of the structure */
 } ARENA_LARGE;
 
+typedef union
+{
+    ARENA_FREE  arena;
+    void       *alignment[4];
+} FREE_LIST_ENTRY;
+
 #define ARENA_FLAG_FREE        0x00000001  /* flags OR'ed with arena size */
 #define ARENA_FLAG_PREV_FREE   0x00000002
 #define ARENA_SIZE_MASK        (~3)
@@ -97,7 +106,7 @@ C_ASSERT( sizeof(ARENA_LARGE) % LARGE_AL
 
 /* minimum data size (without arenas) of an allocated block */
 /* make sure that it's larger than a free list entry */
-#define HEAP_MIN_DATA_SIZE    ROUND_SIZE(2 * sizeof(struct list))
+#define HEAP_MIN_DATA_SIZE    ROUND_SIZE(sizeof(FREE_LIST_ENTRY))
 #define HEAP_MIN_ARENA_SIZE   (HEAP_MIN_DATA_SIZE + sizeof(ARENA_INUSE))
 /* minimum size that must remain to shrink an allocated block */
 #define HEAP_MIN_SHRINK_SIZE  (HEAP_MIN_DATA_SIZE+sizeof(ARENA_FREE))
@@ -118,12 +127,6 @@ static const SIZE_T HEAP_freeListSizes[]
 };
 #define HEAP_NB_FREE_LISTS (ARRAY_SIZE( HEAP_freeListSizes ) + HEAP_NB_SMALL_FREE_LISTS)
 
-typedef union
-{
-    ARENA_FREE  arena;
-    void       *alignment[4];
-} FREE_LIST_ENTRY;
-
 struct tagHEAP;
 
 typedef struct tagSUBHEAP
@@ -162,6 +165,7 @@ typedef struct tagHEAP
     ARENA_INUSE    **pending_free;  /* Ring buffer for pending free requests */
     RTL_CRITICAL_SECTION critSection; /* Critical section for serialization */
     FREE_LIST_ENTRY *freeList;      /* Free lists */
+    struct wine_rb_tree freeTree;   /* Free tree */
     int              extended_type; /* Extended heap type */
 } HEAP;
 
@@ -306,8 +310,10 @@ static inline unsigned int get_freelist_
         return (size - HEAP_MIN_ARENA_SIZE) / ALIGNMENT;
 
     for (i = HEAP_NB_SMALL_FREE_LISTS; i < HEAP_NB_FREE_LISTS - 1; i++)
-        if (size <= HEAP_freeListSizes[i - HEAP_NB_SMALL_FREE_LISTS]) break;
-    return i;
+        if (size <= HEAP_freeListSizes[i - HEAP_NB_SMALL_FREE_LISTS])
+            return i;
+
+    return HEAP_NB_FREE_LISTS;
 }
 
 /* get the memory protection type to use for a given heap */
@@ -345,6 +351,10 @@ static void HEAP_Dump( HEAP *heap )
                  LIST_ENTRY( heap->freeList[i].arena.entry.prev, ARENA_FREE, entry ),
                  LIST_ENTRY( heap->freeList[i].arena.entry.next, ARENA_FREE, entry ));
 
+    TRACE( "free %08x: root=%p\n",
+             (ULONG)(HEAP_MIN_ARENA_SIZE + HEAP_NB_FREE_LISTS * ALIGNMENT),
+             heap->freeTree.root ? LIST_ENTRY( heap->freeTree.root, ARENA_FREE, tree_entry ) : NULL);
+
     LIST_FOR_EACH_ENTRY( subheap, &heap->subheap_list, SUBHEAP, entry )
     {
         SIZE_T freeSize = 0, usedSize = 0, arenaSize = subheap->headerSize;
@@ -358,11 +368,29 @@ static void HEAP_Dump( HEAP *heap )
             if (*(DWORD *)ptr & ARENA_FLAG_FREE)
             {
                 ARENA_FREE *pArena = (ARENA_FREE *)ptr;
-                TRACE( "%p %08x free %08x prev=%p next=%p\n",
-                         pArena, pArena->magic,
-                         pArena->size & ARENA_SIZE_MASK,
-                         LIST_ENTRY( pArena->entry.prev, ARENA_FREE, entry ),
-                         LIST_ENTRY( pArena->entry.next, ARENA_FREE, entry ) );
+                SIZE_T index = get_freelist_index( (pArena->size & ARENA_SIZE_MASK) + sizeof(*pArena) );
+
+                if (index < HEAP_NB_FREE_LISTS)
+                {
+                    TRACE( "%p %08x free %08x prev=%p next=%p\n",
+                             pArena, pArena->magic,
+                             pArena->size & ARENA_SIZE_MASK,
+                             LIST_ENTRY( pArena->entry.prev, ARENA_FREE, entry ),
+                             LIST_ENTRY( pArena->entry.next, ARENA_FREE, entry ) );
+                }
+                else
+                {
+                    ARENA_FREE *parent = NULL, *left = NULL, *right = NULL;
+                    if (pArena->tree_entry.parent)
+                        parent = WINE_RB_ENTRY_VALUE( pArena->tree_entry.parent, ARENA_FREE, tree_entry );
+                    if (pArena->tree_entry.left)
+                        left = WINE_RB_ENTRY_VALUE( pArena->tree_entry.left, ARENA_FREE, tree_entry );
+                    if (pArena->tree_entry.right)
+                        right = WINE_RB_ENTRY_VALUE( pArena->tree_entry.right, ARENA_FREE, tree_entry );
+                    TRACE( "%p %08x free %08x parent=%p left=%p right=%p\n",
+                             pArena, pArena->magic, pArena->size & ARENA_SIZE_MASK, parent, left, right );
+                }
+
                 ptr += sizeof(*pArena) + (pArena->size & ARENA_SIZE_MASK);
                 arenaSize += sizeof(ARENA_FREE);
                 freeSize += pArena->size & ARENA_SIZE_MASK;
@@ -475,8 +503,12 @@ static HEAP *HEAP_GetPtr(
  */
 static inline void HEAP_InsertFreeBlock( HEAP *heap, ARENA_FREE *pArena, BOOL last )
 {
-    FREE_LIST_ENTRY *pEntry = heap->freeList + get_freelist_index( pArena->size + sizeof(*pArena) );
-    if (last)
+    SIZE_T index = get_freelist_index( pArena->size + sizeof(*pArena) );
+    FREE_LIST_ENTRY *pEntry = heap->freeList + index;
+
+    if (index == HEAP_NB_FREE_LISTS)
+        wine_rb_put( &heap->freeTree, &pArena->size, &pArena->tree_entry );
+    else if (last)
     {
         /* insert at end of free list, i.e. before the next free list entry */
         pEntry++;
@@ -493,6 +525,21 @@ static inline void HEAP_InsertFreeBlock(
 
 
 /***********************************************************************
+ *           HEAP_DeleteFreeBlock
+ *
+ * Delete a free block from the free list.
+ */
+static inline void HEAP_DeleteFreeBlock( HEAP *heap, ARENA_FREE *pArena )
+{
+    SIZE_T index = get_freelist_index( (pArena->size & ARENA_SIZE_MASK) + sizeof(*pArena) );
+    if (index == HEAP_NB_FREE_LISTS)
+        wine_rb_remove( &heap->freeTree, &pArena->tree_entry );
+    else
+        list_remove( &pArena->entry );
+}
+
+
+/***********************************************************************
  *           HEAP_FindSubHeap
  * Find the sub-heap containing a given address.
  *
@@ -600,7 +647,7 @@ static void HEAP_CreateFreeBlock( SUBHEA
     {
         /* Remove the next arena from the free list */
         ARENA_FREE *pNext = (ARENA_FREE *)((char *)ptr + size);
-        list_remove( &pNext->entry );
+        HEAP_DeleteFreeBlock( subheap->heap, pNext );
         size += (pNext->size & ARENA_SIZE_MASK) + sizeof(*pNext);
         mark_block_free( pNext, sizeof(ARENA_FREE), flags );
     }
@@ -655,7 +702,7 @@ static void HEAP_MakeInUseBlockFree( SUB
         pFree = *((ARENA_FREE **)pArena - 1);
         size += (pFree->size & ARENA_SIZE_MASK) + sizeof(ARENA_FREE);
         /* Remove it from the free list */
-        list_remove( &pFree->entry );
+        HEAP_DeleteFreeBlock( heap, pFree );
     }
     else pFree = (ARENA_FREE *)pArena;
 
@@ -675,7 +722,7 @@ static void HEAP_MakeInUseBlockFree( SUB
 
         size = 0;
         /* Remove the free block from the list */
-        list_remove( &pFree->entry );
+        HEAP_DeleteFreeBlock( heap, pFree );
         /* Remove the subheap from the list */
         list_remove( &subheap->entry );
         /* Free the memory */
@@ -867,6 +914,21 @@ static BOOL validate_large_arena( HEAP *
     return TRUE;
 }
 
+/* get arena size for an rb tree entry */
+static inline DWORD get_arena_size( const struct wine_rb_entry *entry )
+{
+    ARENA_FREE *arena = WINE_RB_ENTRY_VALUE( entry, ARENA_FREE, tree_entry );
+    return (arena->size & ARENA_SIZE_MASK);
+}
+
+static inline int arena_free_compare( const void *key, const struct wine_rb_entry *entry )
+{
+    DWORD arena_size = get_arena_size( entry );
+    if (*(DWORD *)key > arena_size) return 1;
+    else if (*(DWORD *)key < arena_size) return -1;
+    else return entry->left ? 1 : -1;
+}
+
 
 /***********************************************************************
  *           HEAP_CreateSubHeap
@@ -948,6 +1010,10 @@ static SUBHEAP *HEAP_CreateSubHeap( HEAP
             if (i) list_add_after( &pEntry[-1].arena.entry, &pEntry->arena.entry );
         }
 
+        /* Initialize the free tree */
+
+        wine_rb_init( &heap->freeTree, arena_free_compare );
+
         /* Initialize critical section */
 
         if (!processHeap)  /* do it by hand to avoid memory allocations */
@@ -989,6 +1055,34 @@ static SUBHEAP *HEAP_CreateSubHeap( HEAP
 }
 
 
+/* helper function for HEAP_FindFreeBlock */
+static struct wine_rb_entry *find_free_block( struct wine_rb_entry *entry, DWORD arena_size )
+{
+    for (;;)
+    {
+        if (!entry) return NULL;
+        if (get_arena_size( entry ) >= arena_size) break;
+        entry = entry->right;
+    }
+
+    for (;;)
+    {
+        if (!entry->left) return entry;
+        if (get_arena_size( entry->left ) < arena_size) break;
+        entry = entry->left;
+    }
+
+    if (entry->left->right)
+    {
+        struct wine_rb_entry *ret;
+        if ((ret = find_free_block( entry->left->right, arena_size )))
+            return ret;
+    }
+
+    return entry;
+}
+
+
 /***********************************************************************
  *           HEAP_FindFreeBlock
  *
@@ -1000,26 +1094,40 @@ static ARENA_FREE *HEAP_FindFreeBlock( H
 {
     SUBHEAP *subheap;
     struct list *ptr;
-    SIZE_T total_size;
-    FREE_LIST_ENTRY *pEntry = heap->freeList + get_freelist_index( size + sizeof(ARENA_INUSE) );
+    struct wine_rb_entry *entry;
+    SIZE_T total_size, index = get_freelist_index( size + sizeof(ARENA_INUSE) );
 
     /* Find a suitable free list, and in it find a block large enough */
 
-    ptr = &pEntry->arena.entry;
-    while ((ptr = list_next( &heap->freeList[0].arena.entry, ptr )))
+    if (index < HEAP_NB_FREE_LISTS)
     {
-        ARENA_FREE *pArena = LIST_ENTRY( ptr, ARENA_FREE, entry );
-        SIZE_T arena_size = (pArena->size & ARENA_SIZE_MASK) +
-                            sizeof(ARENA_FREE) - sizeof(ARENA_INUSE);
-        if (arena_size >= size)
-        {
-            subheap = HEAP_FindSubHeap( heap, pArena );
-            if (!HEAP_Commit( subheap, (ARENA_INUSE *)pArena, size )) return NULL;
-            *ppSubHeap = subheap;
-            return pArena;
+        ptr = &heap->freeList[index].arena.entry;
+        while ((ptr = list_next( &heap->freeList[0].arena.entry, ptr )))
+        {
+            ARENA_FREE *pArena = LIST_ENTRY( ptr, ARENA_FREE, entry );
+            SIZE_T arena_size = (pArena->size & ARENA_SIZE_MASK) +
+                                sizeof(ARENA_FREE) - sizeof(ARENA_INUSE);
+            if (arena_size >= size)
+            {
+                subheap = HEAP_FindSubHeap( heap, pArena );
+                if (!HEAP_Commit( subheap, (ARENA_INUSE *)pArena, size )) return NULL;
+                *ppSubHeap = subheap;
+                return pArena;
+            }
         }
     }
 
+    /* Find a suitable block from the free tree */
+
+    if ((entry = find_free_block( heap->freeTree.root, size + sizeof(ARENA_INUSE) - sizeof(ARENA_FREE) )))
+    {
+        ARENA_FREE *pArena = WINE_RB_ENTRY_VALUE( entry, ARENA_FREE, tree_entry );
+        subheap = HEAP_FindSubHeap( heap, pArena );
+        if (!HEAP_Commit( subheap, (ARENA_INUSE *)pArena, size )) return NULL;
+        *ppSubHeap = subheap;
+        return pArena;
+    }
+
     /* If no block was found, attempt to grow the heap */
 
     if (!(heap->flags & HEAP_GROWABLE))
@@ -1080,8 +1188,8 @@ static BOOL HEAP_IsValidArenaPtr( const
 static BOOL HEAP_ValidateFreeArena( SUBHEAP *subheap, ARENA_FREE *pArena )
 {
     DWORD flags = subheap->heap->flags;
-    SIZE_T size;
-    ARENA_FREE *prev, *next;
+    SIZE_T size, index;
+    ARENA_FREE *prev = NULL, *next = NULL;
     char *heapEnd = (char *)subheap->base + subheap->size;
 
     /* Check for unaligned pointers */
@@ -1112,31 +1220,38 @@ static BOOL HEAP_ValidateFreeArena( SUBH
         ERR("Heap %p: bad size %08lx for free arena %p\n", subheap->heap, size, pArena );
         return FALSE;
     }
+    index = get_freelist_index( size + sizeof(*pArena) );
+    if (index < HEAP_NB_FREE_LISTS)
+        next = LIST_ENTRY( pArena->entry.next, ARENA_FREE, entry );
+    else if (pArena->tree_entry.right)
+        next = WINE_RB_ENTRY_VALUE( pArena->tree_entry.right, ARENA_FREE, tree_entry );
     /* Check that next pointer is valid */
-    next = LIST_ENTRY( pArena->entry.next, ARENA_FREE, entry );
-    if (!HEAP_IsValidArenaPtr( subheap->heap, next ))
+    if (next && !HEAP_IsValidArenaPtr( subheap->heap, next ))
     {
         ERR("Heap %p: bad next ptr %p for arena %p\n",
             subheap->heap, next, pArena );
         return FALSE;
     }
     /* Check that next arena is free */
-    if (!(next->size & ARENA_FLAG_FREE) || (next->magic != ARENA_FREE_MAGIC))
+    if (next && (!(next->size & ARENA_FLAG_FREE) || (next->magic != ARENA_FREE_MAGIC)))
     {
         ERR("Heap %p: next arena %p invalid for %p\n",
             subheap->heap, next, pArena );
         return FALSE;
     }
+    if (index < HEAP_NB_FREE_LISTS)
+        prev = LIST_ENTRY( pArena->entry.prev, ARENA_FREE, entry );
+    else if (pArena->tree_entry.left)
+        prev = WINE_RB_ENTRY_VALUE( pArena->tree_entry.left, ARENA_FREE, tree_entry );
     /* Check that prev pointer is valid */
-    prev = LIST_ENTRY( pArena->entry.prev, ARENA_FREE, entry );
-    if (!HEAP_IsValidArenaPtr( subheap->heap, prev ))
+    if (prev && !HEAP_IsValidArenaPtr( subheap->heap, prev ))
     {
         ERR("Heap %p: bad prev ptr %p for arena %p\n",
             subheap->heap, prev, pArena );
         return FALSE;
     }
     /* Check that prev arena is free */
-    if (!(prev->size & ARENA_FLAG_FREE) || (prev->magic != ARENA_FREE_MAGIC))
+    if (prev && (!(prev->size & ARENA_FLAG_FREE) || (prev->magic != ARENA_FREE_MAGIC)))
     {
 	/* this often means that the prev arena got overwritten
 	 * by a memory write before that prev arena */
@@ -1693,7 +1808,7 @@ NTSTATUS HEAP_std_allocate( HANDLE heap,
 
     /* Remove the arena from the free list */
 
-    list_remove( &pArena->entry );
+    HEAP_DeleteFreeBlock( heapPtr, pArena );
 
     /* Build the in-use arena */
 
@@ -1885,7 +2000,7 @@ NTSTATUS HEAP_std_reallocate( HANDLE hea
         {
             /* The next block is free and large enough */
             ARENA_FREE *pFree = (ARENA_FREE *)pNext;
-            list_remove( &pFree->entry );
+            HEAP_DeleteFreeBlock( heapPtr, pFree );
             pArena->size += (pFree->size & ARENA_SIZE_MASK) + sizeof(*pFree);
             if (!HEAP_Commit( subheap, pArena, rounded_size )) return STATUS_NO_MEMORY;
             notify_realloc( pArena + 1, oldActualSize, size );
@@ -1903,7 +2018,7 @@ NTSTATUS HEAP_std_reallocate( HANDLE hea
 
             /* Build the in-use arena */
 
-            list_remove( &pNew->entry );
+            HEAP_DeleteFreeBlock( heapPtr, pNew );
             pInUse = (ARENA_INUSE *)pNew;
             pInUse->size = (pInUse->size & ~ARENA_FLAG_FREE)
                            + sizeof(ARENA_FREE) - sizeof(ARENA_INUSE);

-- 
2.26.1


