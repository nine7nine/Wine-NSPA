From 373d7d21d1ca9409fe08b5289e5952793238537f Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?R=C3=A9mi=20Bernon?= <rbernon@codeweavers.com>
Date: Thu, 24 Dec 2020 16:41:43 +0100
Subject: [PATCH] ntdll: Implement client-side keyed events on top of futexes.

Because RtlWaitOnAddress needs a special treatment, and already has
a fast path, we only enable this keyed event fast path when keyed
event handle is 0.
---
 dlls/ntdll/unix/sync.c | 164 ++++++++++++++++++++++++++++++++++++++---
 1 file changed, 152 insertions(+), 12 deletions(-)

diff --git a/dlls/ntdll/unix/sync.c b/dlls/ntdll/unix/sync.c
index d830c9295d3..8ccdbe6017a 100644
--- a/dlls/ntdll/unix/sync.c
+++ b/dlls/ntdll/unix/sync.c
@@ -158,6 +158,8 @@ static inline ULONGLONG monotonic_counter(void)
 
 #define FUTEX_WAIT 0
 #define FUTEX_WAKE 1
+#define FUTEX_WAIT_BITSET 9
+#define FUTEX_WAKE_BITSET 10
 
 static int futex_private = 128;
 
@@ -171,6 +173,21 @@ static inline int futex_wake( const int *addr, int val )
     return syscall( __NR_futex, addr, FUTEX_WAKE | futex_private, val, NULL, 0, 0 );
 }
 
+static inline int futex_wait_abs( const int *addr, int val, struct timespec *timeout )
+{
+    return syscall( __NR_futex, addr, FUTEX_WAIT_BITSET | futex_private, val, timeout, 0, 0xffffffff );
+}
+
+static inline int futex_wait_bitset( const int *addr, int val, struct timespec *timeout, int mask )
+{
+    return syscall( __NR_futex, addr, FUTEX_WAIT_BITSET | futex_private, val, timeout, 0, mask );
+}
+
+static inline int futex_wake_bitset( const int *addr, int val, int mask )
+{
+    return syscall( __NR_futex, addr, FUTEX_WAKE_BITSET | futex_private, val, NULL, 0, mask );
+}
+
 static inline int use_futexes(void)
 {
     static int supported = -1;
@@ -1740,6 +1757,9 @@ NTSTATUS WINAPI NtOpenKeyedEvent( HANDLE *handle, ACCESS_MASK access, const OBJE
     return ret;
 }
 
+static inline NTSTATUS fast_wait_for_keyed_event( struct keyed_entry *entry, const LARGE_INTEGER *timeout );
+static inline NTSTATUS fast_release_keyed_event( struct keyed_entry *entry, const LARGE_INTEGER *timeout );
+
 /******************************************************************************
  *              NtWaitForKeyedEvent (NTDLL.@)
  */
@@ -1753,12 +1773,15 @@ NTSTATUS WINAPI NtWaitForKeyedEvent( HANDLE handle, const void *key,
 
     if ((ULONG_PTR)key & 1) return STATUS_INVALID_PARAMETER_1;
     entry = keyed_entry_acquire( handle, wine_server_client_ptr( key ), alertable );
-    if (!handle) handle = keyed_event;
-    if (alertable) flags |= SELECT_ALERTABLE;
-    select_op.keyed_event.op     = SELECT_KEYED_EVENT_WAIT;
-    select_op.keyed_event.handle = wine_server_obj_handle( handle );
-    select_op.keyed_event.key    = wine_server_client_ptr( key );
-    status = server_wait( &select_op, sizeof(select_op.keyed_event), flags, timeout );
+    if ((status = fast_wait_for_keyed_event( entry, timeout )) == STATUS_NOT_IMPLEMENTED)
+    {
+        if (!handle) handle = keyed_event;
+        if (alertable) flags |= SELECT_ALERTABLE;
+        select_op.keyed_event.op     = SELECT_KEYED_EVENT_WAIT;
+        select_op.keyed_event.handle = wine_server_obj_handle( handle );
+        select_op.keyed_event.key    = wine_server_client_ptr( key );
+        status = server_wait( &select_op, sizeof(select_op.keyed_event), flags, timeout );
+    }
     keyed_entry_release( entry );
     return status;
 }
@@ -1777,12 +1800,15 @@ NTSTATUS WINAPI NtReleaseKeyedEvent( HANDLE handle, const void *key,
 
     if ((ULONG_PTR)key & 1) return STATUS_INVALID_PARAMETER_1;
     entry = keyed_entry_acquire( handle, wine_server_client_ptr( key ), alertable );
-    if (!handle) handle = keyed_event;
-    if (alertable) flags |= SELECT_ALERTABLE;
-    select_op.keyed_event.op     = SELECT_KEYED_EVENT_RELEASE;
-    select_op.keyed_event.handle = wine_server_obj_handle( handle );
-    select_op.keyed_event.key    = wine_server_client_ptr( key );
-    status = server_wait( &select_op, sizeof(select_op.keyed_event), flags, timeout );
+    if ((status = fast_release_keyed_event( entry, timeout )) == STATUS_NOT_IMPLEMENTED)
+    {
+        if (!handle) handle = keyed_event;
+        if (alertable) flags |= SELECT_ALERTABLE;
+        select_op.keyed_event.op     = SELECT_KEYED_EVENT_RELEASE;
+        select_op.keyed_event.handle = wine_server_obj_handle( handle );
+        select_op.keyed_event.key    = wine_server_client_ptr( key );
+        status = server_wait( &select_op, sizeof(select_op.keyed_event), flags, timeout );
+    }
     keyed_entry_release( entry );
     return status;
 }
@@ -3821,6 +3847,120 @@ NTSTATUS WINAPI NtWaitForAlertByThreadId
 }
 
 #endif
+
+#ifdef __linux__
+
+struct fast_keyed_entry
+{
+    int wait_cs; /* 0: unlocked, 1: locked, 2: contested */
+    int wake_cs; /* 0: unlocked, 1: locked, 2: contested */
+    int signal; /* 0: not signaled, 1: signaled, 2: acked */
+};
+
+static struct fast_keyed_entry fast_keyed_table[256];
+
+static int futex_cs_enter( int *futex, struct timespec *timespec )
+{
+    NTSTATUS status = STATUS_SUCCESS;
+    int ret;
+    if (InterlockedCompareExchange( futex, 1, 0 ) == 0) return STATUS_SUCCESS;
+    do
+    {
+        if (*futex != 2 && InterlockedCompareExchange( futex, 2, 1 ) == 0) continue;
+        if (!(ret = futex_wait_abs( futex, 2, timespec ))) continue;
+        else if (ret == -1 && errno == ETIMEDOUT) status = STATUS_TIMEOUT;
+        else if (ret == -1 && errno != EAGAIN) ERR("futex_wait_abs unexpectedly failed, errno: %d\n", errno);
+    }
+    while (!status && InterlockedCompareExchange( futex, 2, 0 ) != 0);
+    return status;
+}
+
+static void futex_cs_leave( int *futex )
+{
+    if (InterlockedExchange( futex, 0 ) == 2) futex_wake( futex, 1 );
+}
+
+static struct timespec *nt_timeout_to_timespec( struct timespec *timespec, const LARGE_INTEGER timeout )
+{
+    LARGE_INTEGER diff;
+    struct timespec now;
+    if (!timeout) return NULL;
+
+    if (timeout->QuadPart > 0)
+    {
+        NtQuerySystemTime( &diff );
+        diff.QuadPart -= timeout->QuadPart;
+    }
+    else diff = *timeout;
+
+    clock_gettime(CLOCK_MONOTONIC, &now);
+    timespec->tv_sec  = now.tv_sec + (now.tv_nsec / 100 - diff.QuadPart) / TICKSPERSEC;
+    timespec->tv_nsec = (now.tv_nsec / 100 - diff.QuadPart) % TICKSPERSEC * 100;
+    return timespec;
+}
+
+static inline NTSTATUS fast_wait_for_keyed_event( struct keyed_entry *entry, const LARGE_INTEGER timeout )
+{
+    struct fast_keyed_entry *fast = &fast_keyed_table[entry - keyed_entries];
+    struct timespec time, *timespec = nt_timeout_to_timespec( &time, timeout );
+    NTSTATUS status = STATUS_SUCCESS;
+    int ret;
+
+    if (!use_futexes() || entry->handle || entry->alertable) return STATUS_NOT_IMPLEMENTED;
+
+    if ((status = futex_cs_enter( &fast->wait_cs, timespec ))) return status;
+    /* wait for signal, and ack it */
+    while (!status && InterlockedCompareExchange( &fast->signal, 2, 1 ) != 1)
+    {
+        if (!(ret = futex_wait_abs( &fast->signal, 0, timespec ))) continue;
+        else if (ret == -1 && errno == ETIMEDOUT) status = STATUS_TIMEOUT;
+        else if (ret == -1 && errno != EAGAIN) ERR("futex_wait_abs unexpectedly failed, errno: %d\n", errno);
+    }
+    /* if we acked, wake the signaler */
+    if (!status) futex_wake( &fast->signal, 1 );
+    futex_cs_leave( &fast->wait_cs );
+    return status;
+}
+
+static inline NTSTATUS fast_release_keyed_event( struct keyed_entry *entry, const LARGE_INTEGER timeout )
+{
+    struct fast_keyed_entry *fast = &fast_keyed_table[entry - keyed_entries];
+    struct timespec time, *timespec = nt_timeout_to_timespec( &time, timeout );
+    NTSTATUS status = STATUS_SUCCESS;
+    int ret;
+
+    if (!use_futexes() || entry->handle || entry->alertable) return STATUS_NOT_IMPLEMENTED;
+
+    if ((status = futex_cs_enter( &fast->wake_cs, timespec ))) return status;
+    /* signal and wake waiter */
+    InterlockedExchange( &fast->signal, 1 );
+    futex_wake( &fast->signal, 1 );
+    /* wait for ack, and reset */
+    while (!status && InterlockedCompareExchange( &fast->signal, 0, 2 ) == 1)
+    {
+        if (!(ret = futex_wait_abs( &fast->signal, 1, timespec ))) continue;
+        else if (ret == -1 && errno == ETIMEDOUT) status = STATUS_TIMEOUT;
+        else if (ret == -1 && errno != EAGAIN) ERR("futex_wait_abs unexpectedly failed, errno: %d\n", errno);
+    }
+    /* if we timedout, reset and check ack */
+    if (status == STATUS_TIMEOUT && InterlockedExchange( &fast->signal, 0 ) == 2) status = STATUS_SUCCESS;
+    futex_cs_leave( &fast->wake_cs );
+    return status;
+}
+
+#else
+
+static inline NTSTATUS fast_wait_for_keyed_event( struct keyed_entry *entry, const LARGE_INTEGER timeout )
+{
+    return STATUS_NOT_IMPLEMENTED;
+}
+
+static inline NTSTATUS fast_release_keyed_event( struct keyed_entry *entry, const LARGE_INTEGER timeout )
+{
+    return STATUS_NOT_IMPLEMENTED;
+}
+
+#endif
 
 /* Notify direct completion of async and close the wait handle if it is no longer needed.
  * This function is a no-op (returns status as-is) if the supplied handle is NULL.

