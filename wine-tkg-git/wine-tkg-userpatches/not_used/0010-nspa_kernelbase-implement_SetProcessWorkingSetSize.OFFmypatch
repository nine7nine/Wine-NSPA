 - Implement SetProcessWorkingSetSize() in kernelbase/process.c
 
 This is WIP - I still need to add the error handling(back). This is based on an 
 ancient patch for wine - and I couldn't get some of the old bits to work, so I
 simplified / removed some of that code for now.
 
 - Tested with Reaper (Windows version), as it allows changing the 
   SetProcessWorkingSetSize in it's advanced settings. So i changed values and
   checked to ensure they were actually being changed.
   
 NOTE: used FIXME to return the values. (because i'm lazy! lol).
 
 NOTE2: remove makedep check . I'll ask about this on wine-devel - but for now,
        this works.

 johnstonljordan <AT> gmail <DOT> com

--- a/tools/makedep.c	2021-12-02 11:37:19.638231043 -0500
+++ b/tools/makedep.c	2021-12-02 11:37:05.872020910 -0500
@@ -1399,6 +1399,7 @@ static struct file *open_include_file( c
         return file;
     }
 
+/*
     if (pFile->type == INCL_SYSTEM && pFile->use_msvcrt &&
         !make->extlib && !pFile->included_by->is_external)
     {
@@ -1410,6 +1411,7 @@ static struct file *open_include_file( c
                  pFile->included_by->file->name, pFile->included_line, pFile->name );
         exit(1);
     }
+*/    
 
     if (pFile->type == INCL_SYSTEM) return NULL;  /* ignore system files we cannot find */
 
--- a/dlls/kernelbase/process.c.orig	2020-07-11 21:36:02.380736004 -0400
+++ b/dlls/kernelbase/process.c	2020-07-11 21:27:14.566272636 -0400
@@ -20,6 +20,11 @@
 
 #include <stdarg.h>
 #include <string.h>
+#include <stdio.h>
+#include <sys/resource.h>
+#ifdef HAVE_SYS_MMAN_H
+#include <sys/mman.h>
+#endif
 
 #include "ntstatus.h"
 #define WIN32_NO_STATUS
@@ -822,11 +827,33 @@ BOOL WINAPI DECLSPEC_HOTPATCH GetProcess
 BOOL WINAPI DECLSPEC_HOTPATCH GetProcessWorkingSetSizeEx( HANDLE process, SIZE_T *minset,
                                                           SIZE_T *maxset, DWORD *flags)
 {
-    FIXME( "(%p,%p,%p,%p): stub\n", process, minset, maxset, flags );
-    /* 32 MB working set size */
-    if (minset) *minset = 32*1024*1024;
-    if (maxset) *maxset = 32*1024*1024;
+    struct rlimit limits;
+
+    if (process != GetCurrentProcess()) {
+        FIXME("Cannot get info for another process");
+        SetLastError(ERROR_INVALID_PARAMETER);
+        return FALSE;
+    }
+
+    FIXME("(%p,%ld,%ld)\n", process, minset, maxset);
+    
     if (flags) *flags = QUOTA_LIMITS_HARDWS_MIN_DISABLE | QUOTA_LIMITS_HARDWS_MAX_DISABLE;
+
+    /* 32 MB minimum working set size - no rlimit for this */
+    if (minset)
+        *minset = 32*1024*1024;
+
+    if (maxset) {
+        if (getrlimit(RLIMIT_MEMLOCK, &limits) == -1) {
+            return FALSE;
+        }
+        
+        if (limits.rlim_max == RLIM_INFINITY)
+            *maxset = MAXUINT_PTR;
+        else
+            *maxset = limits.rlim_max;
+    }
+    
     return TRUE;
 }
 
@@ -1043,6 +1070,40 @@ BOOL WINAPI DECLSPEC_HOTPATCH SetProcess
 BOOL WINAPI DECLSPEC_HOTPATCH SetProcessWorkingSetSizeEx( HANDLE process, SIZE_T minset,
                                                           SIZE_T maxset, DWORD flags )
 {
+    struct rlimit limits;
+
+    if (process != GetCurrentProcess()) {
+        FIXME("Cannot get info for another process");
+        SetLastError(ERROR_INVALID_PARAMETER);
+        return FALSE;
+    }
+
+    FIXME("(%p,%ld,%ld)\n", process, minset, maxset);
+    
+    if(( minset == (SIZE_T)-1) && (maxset == (SIZE_T)-1)) {
+#ifdef HAVE_SYS_MMAN
+    if (munlockall() == -1) {
+        return FALSE;
+    }
+
+    limits.rlim_cur = 0;
+    limits.rlim_max = 0;
+#else
+    FIXME("(%p,%ld,%ld): stub\n", process, minset, maxset);
+    SetLastError(ERROR_INVALID_PARAMETER);
+    return FALSE;
+#endif
+    }
+    else {
+        limits.rlim_cur = maxset;
+        limits.rlim_max = maxset;
+    }
+
+    if (setrlimit(RLIMIT_MEMLOCK, &limits) == -1) {
+
+        return FALSE;
+    }
+    
     return TRUE;
 }
 
