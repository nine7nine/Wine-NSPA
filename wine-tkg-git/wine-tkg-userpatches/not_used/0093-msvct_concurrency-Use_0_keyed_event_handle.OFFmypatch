--- a/dlls/msvcrt/concurrency.c	2021-12-30 22:21:01.343853652 -0500
+++ b/dlls/msvcrt/concurrency.c	2021-12-30 22:20:47.114767202 -0500
@@ -364,8 +364,6 @@ static CRITICAL_SECTION default_schedule
 static SchedulerPolicy default_scheduler_policy;
 static ThreadScheduler *default_scheduler;
 
-static HANDLE keyed_event;
-
 static void create_default_scheduler(void);
 
 /* ??0improper_lock@Concurrency@@QAE@PBD@Z */
@@ -1767,14 +1765,6 @@ critical_section* __thiscall critical_se
 {
     TRACE("(%p)\n", this);
 
-    if(!keyed_event) {
-        HANDLE event;
-
-        NtCreateKeyedEvent(&event, GENERIC_READ|GENERIC_WRITE, NULL, 0);
-        if(InterlockedCompareExchangePointer(&keyed_event, event, NULL) != NULL)
-            NtClose(event);
-    }
-
     this->unk_thread_id = 0;
     this->head = this->tail = NULL;
     return this;
@@ -1827,7 +1817,7 @@ static inline void cs_lock(critical_sect
     last = InterlockedExchangePointer(&cs->tail, q);
     if(last) {
         last->next = q;
-        NtWaitForKeyedEvent(keyed_event, q, 0, NULL);
+        NtWaitForKeyedEvent(0, q, 0, NULL);
     }
 
     cs_set_head(cs, q);
@@ -1904,7 +1894,7 @@ void __thiscall critical_section_unlock(
     }
 #endif
 
-    NtReleaseKeyedEvent(keyed_event, this->unk_active.next, 0, NULL);
+    NtReleaseKeyedEvent( 0, this->unk_active.next, 0, NULL);
 }
 
 /* ?native_handle@critical_section@Concurrency@@QAEAAV12@XZ */
@@ -1946,13 +1936,13 @@ bool __thiscall critical_section_try_loc
         GetSystemTimeAsFileTime(&ft);
         to.QuadPart = ((LONGLONG)ft.dwHighDateTime << 32) +
             ft.dwLowDateTime + (LONGLONG)timeout * TICKSPERMSEC;
-        status = NtWaitForKeyedEvent(keyed_event, q, 0, &to);
+        status = NtWaitForKeyedEvent(0, q, 0, &to);
         if(status == STATUS_TIMEOUT) {
             if(!InterlockedExchange(&q->free, TRUE))
                 return FALSE;
             /* A thread has signaled the event and is block waiting. */
             /* We need to catch the event to wake the thread.        */
-            NtWaitForKeyedEvent(keyed_event, q, 0, NULL);
+             NtWaitForKeyedEvent(0, q, 0, NULL);
         }
     }
 
@@ -2198,10 +2188,10 @@ static size_t evt_wait(thread_wait *wait
     if(!evt_transition(&wait->signaled, EVT_RUNNING, EVT_WAITING))
         return evt_end_wait(wait, events, count);
 
-    status = NtWaitForKeyedEvent(keyed_event, wait, 0, evt_timeout(&ntto, timeout));
+    status = NtWaitForKeyedEvent(0, wait, 0, evt_timeout(&ntto, timeout));
 
     if(status && !evt_transition(&wait->signaled, EVT_WAITING, EVT_RUNNING))
-        NtWaitForKeyedEvent(keyed_event, wait, 0, NULL);
+        NtWaitForKeyedEvent(0, wait, 0, NULL);
 
     return evt_end_wait(wait, events, count);
 }
@@ -2277,7 +2267,7 @@ void __thiscall event_set(event *this)
     for(entry=wakeup; entry; entry=next) {
         next = entry->next;
         entry->next = entry->prev = NULL;
-        NtReleaseKeyedEvent(keyed_event, entry->wait, 0, NULL);
+        NtReleaseKeyedEvent( 0, entry->wait, 0, NULL);
     }
 }
 
@@ -2482,14 +2472,6 @@ reader_writer_lock* __thiscall reader_wr
 {
     TRACE("(%p)\n", this);
 
-    if (!keyed_event) {
-        HANDLE event;
-
-        NtCreateKeyedEvent(&event, GENERIC_READ|GENERIC_WRITE, NULL, 0);
-        if (InterlockedCompareExchangePointer(&keyed_event, event, NULL) != NULL)
-            NtClose(event);
-    }
-
     memset(this, 0, sizeof(*this));
     return this;
 }
@@ -2536,11 +2518,11 @@ void __thiscall reader_writer_lock_lock(
     last = InterlockedExchangePointer((void**)&this->writer_tail, &q);
     if (last) {
         last->next = &q;
-        NtWaitForKeyedEvent(keyed_event, &q, 0, NULL);
+        NtWaitForKeyedEvent(0, &q, 0, NULL);
     } else {
         this->writer_head = &q;
         if (InterlockedOr(&this->count, WRITER_WAITING))
-            NtWaitForKeyedEvent(keyed_event, &q, 0, NULL);
+            NtWaitForKeyedEvent(0, &q, 0, NULL);
     }
 
     this->thread_id = GetCurrentThreadId();
@@ -2579,17 +2561,17 @@ void __thiscall reader_writer_lock_lock_
             if (InterlockedCompareExchange(&this->count, count+1, count) == count) break;
 
         if (count & WRITER_WAITING)
-            NtWaitForKeyedEvent(keyed_event, &q, 0, NULL);
+            NtWaitForKeyedEvent(0, &q, 0, NULL);
 
         head = InterlockedExchangePointer((void**)&this->reader_head, NULL);
         while(head && head != &q) {
             rwl_queue *next = head->next;
             InterlockedIncrement(&this->count);
-            NtReleaseKeyedEvent(keyed_event, head, 0, NULL);
+            NtReleaseKeyedEvent( 0, head, 0, NULL);
             head = next;
         }
     } else {
-        NtWaitForKeyedEvent(keyed_event, &q, 0, NULL);
+        NtWaitForKeyedEvent(0, &q, 0, NULL);
     }
 }
 
@@ -2660,14 +2642,14 @@ void __thiscall reader_writer_lock_unloc
         count = InterlockedDecrement(&this->count);
         if (count != WRITER_WAITING)
             return;
-        NtReleaseKeyedEvent(keyed_event, this->writer_head, 0, NULL);
+        NtReleaseKeyedEvent( 0, this->writer_head, 0, NULL);
         return;
     }
 
     this->thread_id = 0;
     next = this->writer_head->next;
     if (next) {
-        NtReleaseKeyedEvent(keyed_event, next, 0, NULL);
+        NtReleaseKeyedEvent( 0, next, 0, NULL);
         return;
     }
     InterlockedAnd(&this->count, ~WRITER_WAITING);
@@ -2675,7 +2657,7 @@ void __thiscall reader_writer_lock_unloc
     while (head) {
         next = head->next;
         InterlockedIncrement(&this->count);
-        NtReleaseKeyedEvent(keyed_event, head, 0, NULL);
+        NtReleaseKeyedEvent( 0, head, 0, NULL);
         head = next;
     }
 
@@ -3001,8 +2983,6 @@ void msvcrt_free_concurrency(void)
         operator_delete(default_scheduler);
     }
 
-    if(keyed_event)
-      NtClose(keyed_event);
 }
 
 void msvcrt_free_scheduler_thread(void)

