--- a/server/thread.c	2022-11-18 08:26:46.729589269 -0500
+++ b/server/thread.c	2022-11-18 10:19:56.441086441 -0500
@@ -1157,14 +1157,14 @@ static int get_unix_priority( int priori
 
 static int wine_rt_policy = -1;
 
-int set_thread_priority( struct thread* thread, int priority_class, int priority )
+int set_thread_priority( struct thread* thread, int priority )
 {
     // Get RT policy
     const char *policyStr = getenv("WINE_RT_POLICY");
     // Set Min, Max Priority 
     int max = THREAD_PRIORITY_HIGHEST;
     int min = THREAD_PRIORITY_LOWEST;
-    if (priority_class == PROCESS_PRIOCLASS_REALTIME)
+    if (thread->process->priority == PROCESS_PRIOCLASS_REALTIME)
     {
         max = THREAD_PRIORITY_REALTIME_HIGHEST;
         min = THREAD_PRIORITY_REALTIME_LOWEST;
@@ -1186,8 +1186,9 @@ int set_thread_priority( struct thread*
     thread->priority = priority;
     thread->priority_applied = 0;
     if (thread->unix_tid == -1)
-        return 0;
-
+    if (thread->fsync_idx == -1)
+            return 0;
+    
     // Set the RT policy      
     if (policyStr) {
         if (strcmp(policyStr, "RR")==0)
@@ -1197,20 +1198,27 @@ int set_thread_priority( struct thread*
     } 
 
 #ifdef __linux__
-    if (priority_class == PROCESS_PRIOCLASS_REALTIME)
+    if (thread->process->priority == PROCESS_PRIOCLASS_REALTIME)
     {
 #ifdef HAVE_SCHED_SETSCHEDULER
         struct sched_param param;
         if (sched_getparam( thread->unix_tid, &param ) != 0)
-            return 0; /* ignore errors for now */
+            return 0;
+        if (sched_getparam( thread->fsync_idx, &param ) != 0)
+            return 0;
 
-        param.sched_priority = get_unix_priority( priority_class, priority );
+        param.sched_priority = get_unix_priority( thread->process->priority, priority );
         if (sched_setscheduler( thread->unix_tid, wine_rt_policy|SCHED_RESET_ON_FORK, &param ) == 0)
             return 0;
+        if (sched_setscheduler( thread->fsync_idx, wine_rt_policy|SCHED_RESET_ON_FORK, &param ) == 0)
+            return 0;
 #endif
 #ifdef HAVE_DBUS_DBUS_H
         if (rtkit_set_realtime( thread->unix_pid, thread->unix_tid,
-                                get_unix_priority( priority_class, priority ) ) == 0)
+                                get_unix_priority( thread->process->priority, priority ) ) == 0)
+            return 0;
+        if (rtkit_set_realtime( thread->fsync_idx, thread->unix_tid,
+                                get_unix_priority( thread->process->priority, priority ) ) == 0)
             return 0;
 #endif
     }
@@ -1218,12 +1226,18 @@ int set_thread_priority( struct thread*
     {
 #ifdef HAVE_SETPRIORITY
         if (setpriority( PRIO_PROCESS, thread->unix_tid,
-                         get_unix_priority( priority_class, priority ) ) == 0)
+                         get_unix_priority( thread->process->priority, priority ) ) == 0)
+            return 0;
+        if (setpriority( PRIO_PROCESS, thread->fsync_idx,
+                         get_unix_priority( thread->process->priority, priority ) ) == 0)
             return 0;
 #endif
 #ifdef HAVE_DBUS_DBUS_H
         if (rtkit_set_niceness( thread->unix_pid, thread->unix_tid,
-                                get_unix_priority( priority_class, priority ) ) == 0)
+                                get_unix_priority( thread->process->priority, priority ) ) == 0)
+            return 0;
+        if (rtkit_set_niceness( thread->fsync_idx, thread->fsync_idx,
+                                get_unix_priority( thread->process->priority, priority ) ) == 0)
             return 0;
 #endif
     }
@@ -1253,7 +1267,7 @@ static void set_thread_info( struct thre
             // set RT threads. see: scheduler.c
             set_scheduler_priority( thread );
         }         
-        if (set_thread_priority( thread, thread->process->priority, req->priority ))
+        if (set_thread_priority( thread, req->priority ))
             file_set_error();
     }
     if (req->mask & SET_THREAD_INFO_AFFINITY)
@@ -2118,6 +2132,7 @@ done:
 
 static int init_thread( struct thread *thread, int reply_fd, int wait_fd )
 {
+    struct process *process = current->process;
     if ((reply_fd = thread_get_inflight_fd( thread, reply_fd )) == -1)
     {
         set_error( STATUS_TOO_MANY_OPENED_FILES );
@@ -2160,6 +2175,7 @@ DECL_HANDLER(init_first_thread)
     if (!process->parent_id)
         process->affinity = current->affinity = get_thread_affinity( current );
     set_thread_affinity( current, current->affinity );
+    set_thread_priority( current, current->priority );
 
     _debug_level = max( debug_level, req->_debug_level );
 
@@ -2194,7 +2210,7 @@ DECL_HANDLER(init_thread)
 
     init_thread_context( current );
     generate_debug_event( current, DbgCreateThreadStateChange, &req->entry );
-    set_thread_priority( current, current->process->priority, current->priority );
+    set_thread_priority( current, current->priority );
     set_thread_affinity( current, current->affinity );
 
     reply->suspend = (current->suspend || current->process->suspend || current->context != NULL);

--- a/server/thread.c	2022-11-18 10:26:29.404312242 -0500
+++ b/server/thread.c	2022-11-18 10:26:18.429194781 -0500
@@ -1178,8 +1178,7 @@ int set_thread_priority( struct thread*
         return -1;
     }
 
-    if (thread->process->priority == priority_class &&
-        thread->priority == priority &&
+    if (thread->priority == priority &&
         thread->priority_applied)
         return 0;
 
--- a/server/thread.h	2022-11-18 10:31:10.599314730 -0500
+++ b/server/thread.h	2022-11-18 10:31:01.143213944 -0500
@@ -153,7 +153,7 @@ extern void thread_cancel_apc( struct th
 extern int thread_add_inflight_fd( struct thread *thread, int client, int server );
 extern int thread_get_inflight_fd( struct thread *thread, int client );
 extern struct token *thread_get_impersonation_token( struct thread *thread );
-extern int set_thread_priority( struct thread *thread, int priority_class, int priority );
+extern int set_thread_priority( struct thread *thread, int priority );
 extern int set_thread_affinity( struct thread *thread, affinity_t affinity );
 extern int suspend_thread( struct thread *thread );
 extern int resume_thread( struct thread *thread );

--- a/server/process.c	2022-11-18 10:37:25.579304633 -0500
+++ b/server/process.c	2022-11-18 10:35:59.669391480 -0500
@@ -1691,7 +1691,7 @@ static void set_process_priority( struct
 
     LIST_FOR_EACH_ENTRY( thread, &process->thread_list, struct thread, proc_entry )
     {
-        set_thread_priority( thread, priority, thread->priority );
+        set_thread_priority( thread, thread->priority );
     }
 
     process->priority = priority;

--- a/server/thread.c	2022-11-25 21:02:43.876829002 -0500
+++ b/server/thread.c	2022-11-25 21:02:24.669671045 -0500
@@ -2173,8 +2173,11 @@ DECL_HANDLER(init_first_thread)
 
     if (!process->parent_id)
         process->affinity = current->affinity = get_thread_affinity( current );
-    set_thread_affinity( current, current->affinity );
-    set_thread_priority( current, current->priority );
+    else
+    {
+        set_thread_affinity( current, current->affinity );
+        set_thread_priority( current, current->priority );
+    }
 
     _debug_level = max( debug_level, req->_debug_level );
 

