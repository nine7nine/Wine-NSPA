--- a/server/thread.c	2022-01-10 17:13:29.289137176 -0500
+++ b/server/thread.c	2022-01-10 17:13:00.769662570 -0500
@@ -76,77 +76,6 @@ static int get_priority( const char *var
     return -1;
 }
 
-#ifdef HAVE_DBUS_DBUS_H
-#include <dbus/dbus.h>
-
-static int dbus_error_to_errno( DBusError* err )
-{
-    if (!err)
-        return EINVAL;
-    if (strcmp(err->name, DBUS_ERROR_NO_MEMORY) == 0)
-        return ENOMEM;
-    if (strcmp(err->name, DBUS_ERROR_SERVICE_UNKNOWN) == 0 ||
-        strcmp(err->name, DBUS_ERROR_NAME_HAS_NO_OWNER) == 0)
-        return ENOENT;
-    if (strcmp(err->name, DBUS_ERROR_ACCESS_DENIED) == 0 ||
-        strcmp(err->name, DBUS_ERROR_AUTH_FAILED) == 0)
-        return EACCES;
-    return EIO;
-}
-
-static int rtkit_set_niceness( dbus_uint64_t process, dbus_uint64_t thread, dbus_int32_t niceness )
-{
-    DBusConnection* dbus = NULL;
-    DBusMessage *msg = NULL, *rep = NULL;
-    DBusError err;
-    int ret = -1;
-
-    dbus_error_init(&err);
-
-    dbus = dbus_bus_get_private(DBUS_BUS_SYSTEM, &err);
-    if (dbus_error_is_set(&err))
-        goto error;
-
-    dbus_connection_set_exit_on_disconnect(dbus, 0);
-
-    if (!(msg = dbus_message_new_method_call("org.freedesktop.RealtimeKit1",
-                                            "/org/freedesktop/RealtimeKit1",
-                                            "org.freedesktop.RealtimeKit1",
-                                            "MakeThreadHighPriorityWithPID")))
-        goto error;
-
-    if (!dbus_message_append_args(msg,
-                                  DBUS_TYPE_UINT64, &process,
-                                  DBUS_TYPE_UINT64, &thread,
-                                  DBUS_TYPE_INT32, &niceness,
-                                  DBUS_TYPE_INVALID))
-        goto error;
-
-    if (!(rep = dbus_connection_send_with_reply_and_block(dbus, msg, -1, &err)))
-        goto error;
-
-    if (dbus_error_is_set(&err))
-        goto error;
-
-    if (dbus_set_error_from_message(&err, rep))
-        goto error;
-
-    ret = 0;
-
-error:
-    if (ret) errno = dbus_error_to_errno(&err);
-    if (rep) dbus_message_unref(rep);
-    if (msg) dbus_message_unref(msg);
-    if (dbus)
-    {
-        dbus_connection_close(dbus);
-        dbus_connection_unref(dbus);
-    }
-    dbus_error_free(&err);
-    return ret;
-}
-#endif
-
 /* thread queues */
 
 struct thread_wait
@@ -453,8 +382,6 @@ struct thread *create_thread( int fd, st
     thread->process = (struct process *)grab_object( process );
     thread->desktop = 0;
     thread->affinity = process->affinity;
-    // return the priority here for get_unix_priority() to work.
-    thread->priority = process->priority;
     if (!current) current = thread;
 
     list_add_tail( &thread_list, &thread->entry );
@@ -774,206 +701,9 @@ affinity_t get_thread_affinity( struct t
     return mask;
 }
 
-#if defined(HAVE_SCHED_SETSCHEDULER) || defined(HAVE_SETPRIORITY) || \
-    defined(HAVE_DBUS_DBUS_H)
-static int get_unix_priority( int priority_class, int priority )
-{
-    int min, max, base_priority;
-
-    min = sched_get_priority_min( SCHED_FIFO );
-    max = sched_get_priority_max( SCHED_FIFO );
-
-    // RT priority for threads must be below kernel-mode APC, TIME_CRITICAL threads and Wineserver.
-    if ((base_priority = get_priority( "WINE_RT_PRIO", min, max )) != -1)
-    {
-        thread_base_priority = base_priority - 1;
-    }
-           
-    // SCHED_FIFO/SCHED_RR:
-    //
-    // We don't care about anything except for PROCESS_PRIOCLASS_REALTIME. Setting other 
-    // threads RT will only munge/chew the threading in apps.
-    //  
-    // SCHED_OTHER: 
-    //
-    // We set the thread priority / niceness ( eg: 0, -20 ). 
-    //
-    // normal threads use Relative steps for Niceness.
-    
-    switch (priority_class) {
-    case PROCESS_PRIOCLASS_IDLE:
-        switch (priority) {
-        case THREAD_PRIORITY_IDLE: return 15;
-        case THREAD_PRIORITY_LOWEST: return 10;
-        case THREAD_PRIORITY_BELOW_NORMAL: return 8;
-        case THREAD_PRIORITY_NORMAL: return 6;
-        case THREAD_PRIORITY_ABOVE_NORMAL: return 4;
-        case THREAD_PRIORITY_HIGHEST: return 2;
-        case THREAD_PRIORITY_TIME_CRITICAL: return -15;
-        }
-    case PROCESS_PRIOCLASS_BELOW_NORMAL:
-        switch (priority) {
-        case THREAD_PRIORITY_IDLE: return 15;
-        case THREAD_PRIORITY_LOWEST: return 8;
-        case THREAD_PRIORITY_BELOW_NORMAL: return 6;
-        case THREAD_PRIORITY_NORMAL: return 4;
-        case THREAD_PRIORITY_ABOVE_NORMAL: return 2;
-        case THREAD_PRIORITY_HIGHEST: return 0;
-        case THREAD_PRIORITY_TIME_CRITICAL: return -15;
-        }
-    case PROCESS_PRIOCLASS_NORMAL:
-        switch (priority) {
-        case THREAD_PRIORITY_IDLE: return 15;
-        case THREAD_PRIORITY_LOWEST: return 4;
-        case THREAD_PRIORITY_BELOW_NORMAL: return 2;
-        case THREAD_PRIORITY_NORMAL: return 0;
-        case THREAD_PRIORITY_ABOVE_NORMAL: return -2;
-        case THREAD_PRIORITY_HIGHEST: return -4;
-        case THREAD_PRIORITY_TIME_CRITICAL: return -15;
-        }
-    case PROCESS_PRIOCLASS_ABOVE_NORMAL:
-        switch (priority) {
-        case THREAD_PRIORITY_IDLE: return 15;
-        case THREAD_PRIORITY_LOWEST: return 0;
-        case THREAD_PRIORITY_BELOW_NORMAL: return -2;
-        case THREAD_PRIORITY_NORMAL: return -4;
-        case THREAD_PRIORITY_ABOVE_NORMAL: return -6 ;
-        case THREAD_PRIORITY_HIGHEST: return -8;
-        case THREAD_PRIORITY_TIME_CRITICAL: return -15;
-        }
-    case PROCESS_PRIOCLASS_HIGH:
-        switch (priority) {
-        case THREAD_PRIORITY_IDLE: return 15;
-        case THREAD_PRIORITY_LOWEST: return -2;
-        case THREAD_PRIORITY_BELOW_NORMAL: return -4;
-        case THREAD_PRIORITY_NORMAL: return -6;
-        case THREAD_PRIORITY_ABOVE_NORMAL: return -8;
-        case THREAD_PRIORITY_HIGHEST: return -10;
-        case THREAD_PRIORITY_TIME_CRITICAL: return -15;
-        }
-    // PROCESS_PRIOCLASS_REALTIME => SCHED_FIFO:
-    //
-    // We can hook thread->unix_tid and thread->fsync_idx.
-    // 
-    // WINE_RT_PRIO value is a MAX value. we decrement priorities. The idea is
-    // to ignore most threads, as we only caring about the most critical. With these; 
-    // I am finding it's actually better to get set all of the threads at the same
-    // priority...
-    //
-    // priorities can be modified, as shown below. 
-    
-    case PROCESS_PRIOCLASS_REALTIME:
-        switch (priority) {
-        case THREAD_PRIORITY_IDLE: return 0;
-        case -7: return 0;
-        case -5: return 0;
-        case -4: return 0;
-        case -3: return 0;
-        case THREAD_PRIORITY_LOWEST: return -10 + thread_base_priority;
-        case THREAD_PRIORITY_BELOW_NORMAL: return -8 + thread_base_priority;
-        case THREAD_PRIORITY_NORMAL: return -6 + thread_base_priority;
-        case THREAD_PRIORITY_ABOVE_NORMAL: return -4 + thread_base_priority;
-        case THREAD_PRIORITY_HIGHEST: return -2 + thread_base_priority;
-        case 3: return -1 + thread_base_priority;
-        case 4: return -1 + thread_base_priority;
-        case 5: return -1 + thread_base_priority;
-        case 6: return -1 + thread_base_priority;  
-        case THREAD_PRIORITY_TIME_CRITICAL: return thread_base_priority;
-        }
-    }
-    return 0;
-}
-#endif
-
 #define THREAD_PRIORITY_REALTIME_HIGHEST 6
 #define THREAD_PRIORITY_REALTIME_LOWEST -7
 
-static int wine_rt_policy = -1;
-
-// set thread priority uses get_unix_priority() to get the unix values.
-int set_thread_priority( struct thread* thread, int priority )
-{
-    // Get RT policy
-    const char *policyStr = getenv("WINE_RT_POLICY");
-    // Set Min, Max Priority 
-    int max = THREAD_PRIORITY_HIGHEST;
-    int min = THREAD_PRIORITY_LOWEST;
-    // Set Min, Max Priority for WINAPI RT
-    if (thread->process->priority == PROCESS_PRIOCLASS_REALTIME)
-    {
-       min = THREAD_PRIORITY_REALTIME_LOWEST;
-       max = THREAD_PRIORITY_REALTIME_HIGHEST;  
-    }
-
-    if ((priority < min || priority > max) &&
-        priority != THREAD_PRIORITY_IDLE &&
-        priority != THREAD_PRIORITY_TIME_CRITICAL)
-    {
-        errno = EINVAL;
-        return -1;
-    }
-
-    thread->priority = priority;
-    if (thread->unix_tid == -1)
-    if (thread->fsync_idx == -1)
-            return 0;
-    
-    // Set the RT policy      
-    if (policyStr) {
-        if (strcmp(policyStr, "RR")==0)
-            wine_rt_policy = SCHED_RR;
-        else if (strcmp(policyStr, "FF")==0)
-            wine_rt_policy = SCHED_FIFO;
-    }            
-
-    // We only care about PROCESS_PRIOCLASS_REALTIME processes/threads.
-    // Set the SCHED_FIFO/RR Priorities mapped from get_unix_priority()
-    //
-    // No setting anything below THREAD_PRIORITY_HIGHEST as RT. 
-    //
-    // NOTE: for other windows prioclasses, we set the priorities + niceness 
-    // for their corresponding SCHED_OTHER threads.
-
-    if (thread->process->priority == PROCESS_PRIOCLASS_REALTIME)
-    {
-#ifdef HAVE_SCHED_SETSCHEDULER
-        struct sched_param param;
-        if (sched_getparam( thread->unix_tid, &param ) != 0)
-            goto error;
-        if (sched_getparam( thread->fsync_idx, &param ) != 0)
-            goto error;
-	 
-        param.sched_priority = get_unix_priority( thread->process->priority, priority );
-        if (sched_setscheduler( thread->unix_tid, wine_rt_policy|SCHED_RESET_ON_FORK, &param ) == 0)
-            return 0;
-        if (sched_setscheduler( thread->fsync_idx, wine_rt_policy|SCHED_RESET_ON_FORK, &param ) == 0)
-            return 0;
-#endif
-    }
-    else
-    {
-#ifdef HAVE_SETPRIORITY
-        if (setpriority( PRIO_PROCESS, thread->unix_tid,
-                         get_unix_priority( thread->process->priority, priority ) ) == 0)
-            return 0;
-        if (setpriority( PRIO_PROCESS, thread->fsync_idx,
-                         get_unix_priority( thread->process->priority, priority ) ) == 0)
-            return 0;
-#endif
-#ifdef HAVE_DBUS_DBUS_H
-        if (rtkit_set_niceness( thread->unix_pid, thread->unix_tid,
-                                get_unix_priority( thread->process->priority, priority ) ) == 0)
-            return 0;
-        if (rtkit_set_niceness( thread->fsync_idx, thread->fsync_idx,
-                                get_unix_priority( thread->process->priority, priority ) ) == 0)
-            return 0;
-#endif
-    }
-
-error:
-    return 0;
-}
-
 /* set all information about a thread */
 static void set_thread_info( struct thread *thread,
                              const struct set_thread_info_request *req )
@@ -995,8 +725,8 @@ static void set_thread_info( struct thre
             // set RT threads. see: scheduler.c
             set_scheduler_priority( thread );
         }         
-        if (set_thread_priority( thread, req->priority ))
-            file_set_error();
+        else
+            set_error( STATUS_INVALID_PARAMETER );
     }
     if (req->mask & SET_THREAD_INFO_AFFINITY)
     {
@@ -1837,7 +1567,6 @@ DECL_HANDLER(init_thread)
 
     init_thread_context( current );
     generate_debug_event( current, DbgCreateThreadStateChange, &req->entry );
-    set_thread_priority( current, current->priority );
     set_thread_affinity( current, current->affinity );
 
     reply->suspend = (current->suspend || current->process->suspend || current->context != NULL);

