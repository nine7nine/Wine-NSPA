From 02453537d5b801ea62870b745e90cebcfc75a50f Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?R=C3=A9mi=20Bernon?= <rbernon@codeweavers.com>
Date: Fri, 13 Mar 2020 16:00:56 +0100
Subject: [PATCH 1/4] server: Don't reallocate a buffer for every request.

---
 server/request.c | 14 ++++++++------
 server/thread.c  |  1 +
 server/thread.h  |  1 +
 3 files changed, 10 insertions(+), 6 deletions(-)

diff --git a/server/request.c b/server/request.c
index 11111111111..11111111111 100644
--- a/server/request.c
+++ b/server/request.c
@@ -342,11 +342,15 @@ void read_request( struct thread *thread )
             call_req_handler( thread );
             return;
         }
-        if (!(thread->req_data = malloc( thread->req_toread )))
+        if (thread->req_data_size < thread->req_toread)
         {
-            fatal_protocol_error( thread, "no memory for %u bytes request %d\n",
-                                  thread->req_toread, thread->req.request_header.req );
-            return;
+            thread->req_data_size = thread->req_toread;
+            if (!(thread->req_data = realloc( thread->req_data, thread->req_data_size )))
+            {
+                fatal_protocol_error( thread, "no memory for %u bytes request %d\n",
+                                      thread->req_toread, thread->req.request_header.req );
+                return;
+            }
         }
     }
 
@@ -361,8 +365,6 @@ void read_request( struct thread *thread )
         if (!(thread->req_toread -= ret))
         {
             call_req_handler( thread );
-            free( thread->req_data );
-            thread->req_data = NULL;
             return;
         }
     }
diff --git a/server/thread.c b/server/thread.c
index 11111111111..11111111111 100644
--- a/server/thread.c
+++ b/server/thread.c
@@ -329,6 +329,7 @@ static inline void init_thread_structure( struct thread *thread )
     thread->wait            = NULL;
     thread->error           = 0;
     thread->req_data        = NULL;
+    thread->req_data_size   = 0;
     thread->req_toread      = 0;
     thread->reply_data      = NULL;
     thread->reply_towrite   = 0;
diff --git a/server/thread.h b/server/thread.h
index 11111111111..11111111111 100644
--- a/server/thread.h
+++ b/server/thread.h
@@ -67,6 +67,7 @@ struct thread
     unsigned int           error;         /* current error code */
     union generic_request  req;           /* current request */
     void                  *req_data;      /* variable-size data for request */
+    unsigned int           req_data_size;
     unsigned int           req_toread;    /* amount of data still to read in request */
     void                  *reply_data;    /* variable-size data for reply */
     unsigned int           reply_size;    /* size of reply data */
From 8c9be738edf2a5ea207a4f3174ce92f4b658391b Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?R=C3=A9mi=20Bernon?= <rbernon@codeweavers.com>
Date: Fri, 13 Mar 2020 16:32:56 +0100
Subject: [PATCH 2/4] server: Don't reallocate reply when size changes.

---
 server/request.c | 12 +++++++++---
 server/thread.c  |  6 +++++-
 server/thread.h  |  2 ++
 3 files changed, 16 insertions(+), 4 deletions(-)

diff --git a/server/request.c b/server/request.c
index 11111111111..11111111111 100644
--- a/server/request.c
+++ b/server/request.c
@@ -160,7 +160,13 @@ void fatal_error( const char *err, ... )
 void *set_reply_data_size( data_size_t size )
 {
     assert( size <= get_reply_max_size() );
-    if (size && !(current->reply_data = mem_alloc( size ))) size = 0;
+    if (size > current->rep_data_size)
+    {
+        if (current->rep_data) free(current->rep_data);
+        if (!(current->rep_data = mem_alloc( size ))) size = 0;
+        current->rep_data_size = size;
+    }
+    current->reply_data = current->rep_data;
     current->reply_size = size;
     return current->reply_data;
 }
@@ -235,7 +241,7 @@ void write_reply( struct thread *thread )
     {
         if (!(thread->reply_towrite -= ret))
         {
-            free( thread->reply_data );
+            if (thread->reply_data != thread->rep_data) free( thread->reply_data );
             thread->reply_data = NULL;
             /* sent everything, can go back to waiting for requests */
             set_fd_events( thread->request_fd, POLLIN );
@@ -278,7 +284,7 @@ static void send_reply( union generic_reply *reply )
             return;
         }
     }
-    free( current->reply_data );
+    if (current->reply_data != current->rep_data) free( current->reply_data );
     current->reply_data = NULL;
     return;
 
diff --git a/server/thread.c b/server/thread.c
index 11111111111..11111111111 100644
--- a/server/thread.c
+++ b/server/thread.c
@@ -331,6 +331,8 @@ static inline void init_thread_structure( struct thread *thread )
     thread->req_data        = NULL;
     thread->req_data_size   = 0;
     thread->req_toread      = 0;
+    thread->rep_data        = NULL;
+    thread->rep_data_size   = 0;
     thread->reply_data      = NULL;
     thread->reply_towrite   = 0;
     thread->request_fd      = NULL;
@@ -604,7 +606,8 @@ static void cleanup_thread( struct thread *thread )
     clear_apc_queue( &thread->system_apc );
     clear_apc_queue( &thread->user_apc );
     free( thread->req_data );
-    free( thread->reply_data );
+    free( thread->rep_data );
+    if (thread->reply_data != thread->rep_data) free( thread->reply_data );
     if (thread->request_fd) release_object( thread->request_fd );
     if (thread->reply_fd) release_object( thread->reply_fd );
     if (thread->wait_fd) release_object( thread->wait_fd );
@@ -626,6 +629,7 @@ static void cleanup_thread( struct thread *thread )
     if (thread->input_shared_mapping) release_object( thread->input_shared_mapping );
     thread->input_shared_mapping = NULL;
     thread->req_data = NULL;
+    thread->rep_data = NULL;
     thread->reply_data = NULL;
     thread->request_fd = NULL;
     thread->reply_fd = NULL;
diff --git a/server/thread.h b/server/thread.h
index 11111111111..11111111111 100644
--- a/server/thread.h
+++ b/server/thread.h
@@ -69,6 +69,8 @@ struct thread
     void                  *req_data;      /* variable-size data for request */
     unsigned int           req_data_size;
     unsigned int           req_toread;    /* amount of data still to read in request */
+    void                  *rep_data;      /* variable-size data for reply */
+    unsigned int           rep_data_size; /* size of reply data */
     void                  *reply_data;    /* variable-size data for reply */
     unsigned int           reply_size;    /* size of reply data */
     unsigned int           reply_towrite; /* amount of data still to write in reply */
From eaa41f8fcf0b31d0b08993d70a5ce11f0e5dc11c Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?R=C3=A9mi=20Bernon?= <rbernon@codeweavers.com>
Date: Thu, 19 Mar 2020 12:08:33 +0100
Subject: [PATCH 3/4] server: Always send replies with writev.

---
 server/request.c | 35 ++++++++++++++---------------------
 1 file changed, 14 insertions(+), 21 deletions(-)

diff --git a/server/request.c b/server/request.c
index 11111111111..11111111111 100644
--- a/server/request.c
+++ b/server/request.c
@@ -256,34 +256,27 @@ void write_reply( struct thread *thread )
 }
 
 /* send a reply to the current thread */
-static void send_reply( union generic_reply *reply )
+void send_reply( union generic_reply *reply )
 {
     int ret;
 
-    if (!current->reply_size)
-    {
-        if ((ret = write( get_unix_fd( current->reply_fd ),
-                          reply, sizeof(*reply) )) != sizeof(*reply)) goto error;
-    }
-    else
-    {
-        struct iovec vec[2];
+    struct iovec vec[2];
 
-        vec[0].iov_base = (void *)reply;
-        vec[0].iov_len  = sizeof(*reply);
-        vec[1].iov_base = current->reply_data;
-        vec[1].iov_len  = current->reply_size;
+    vec[0].iov_base = (void *)reply;
+    vec[0].iov_len  = sizeof(*reply);
+    vec[1].iov_base = current->reply_data;
+    vec[1].iov_len  = current->reply_size;
 
-        if ((ret = writev( get_unix_fd( current->reply_fd ), vec, 2 )) < sizeof(*reply)) goto error;
+    if ((ret = writev( get_unix_fd( current->reply_fd ), vec, 2 )) < sizeof(*reply)) goto error;
 
-        if ((current->reply_towrite = current->reply_size - (ret - sizeof(*reply))))
-        {
-            /* couldn't write it all, wait for POLLOUT */
-            set_fd_events( current->reply_fd, POLLOUT );
-            set_fd_events( current->request_fd, 0 );
-            return;
-        }
+    if ((current->reply_towrite = current->reply_size - (ret - sizeof(*reply))))
+    {
+        /* couldn't write it all, wait for POLLOUT */
+        set_fd_events( current->reply_fd, POLLOUT );
+        set_fd_events( current->request_fd, 0 );
+        return;
     }
+
     if (current->reply_data != current->rep_data) free( current->reply_data );
     current->reply_data = NULL;
     return;
From 016b15925a0ad462983a061a0ec6a09ad34b226d Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?R=C3=A9mi=20Bernon?= <rbernon@codeweavers.com>
Date: Fri, 13 Mar 2020 17:12:14 +0100
Subject: [PATCH 4/4] server: Use a pool for small (most) thread_wait allocs.

---
 server/thread.c | 47 +++++++++++++++++++++++++++++++++++++++++++++--
 1 file changed, 45 insertions(+), 2 deletions(-)

diff --git a/server/thread.c b/server/thread.c
index 11111111111..11111111111 100644
--- a/server/thread.c
+++ b/server/thread.c
@@ -138,6 +138,7 @@ struct thread_wait
 {
     struct thread_wait     *next;       /* next wait structure for this thread */
     struct thread          *thread;     /* owner thread */
+    int                     capacity;   /* size of objects */
     int                     count;      /* count of objects */
     int                     flags;
     int                     abandoned;
@@ -1104,6 +1105,47 @@ void set_wait_status( struct wait_queue_entry *entry, int status )
     entry->wait->status = status;
 }
 
+static struct thread_wait *wait_free_pool;
+
+static struct thread_wait *thread_wait_alloc(unsigned int count)
+{
+    struct thread_wait *wait, *pool;
+    unsigned int i;
+
+    if (count > 2)
+        return mem_alloc( FIELD_OFFSET(struct thread_wait, queues[count]) );
+
+    if (!(wait = wait_free_pool))
+    {
+        unsigned int size = FIELD_OFFSET( struct thread_wait, queues[2] );
+        if (!(pool = calloc( 64, size )))
+            return NULL;
+
+        for (i = 0; i < 64; ++i)
+        {
+            wait = (struct thread_wait *)((char*)pool + size * i);
+            wait->next = wait_free_pool;
+            wait_free_pool = wait;
+        }
+    }
+
+    wait_free_pool = wait->next;
+    assert(wait);
+    return wait;
+}
+
+static void thread_wait_free(struct thread_wait *wait)
+{
+    if (wait->capacity > 2)
+    {
+        free(wait);
+        return;
+    }
+
+    wait->next = wait_free_pool;
+    wait_free_pool = wait;
+}
+
 /* finish waiting */
 static unsigned int end_wait( struct thread *thread, unsigned int status )
 {
@@ -1133,7 +1175,7 @@ static unsigned int end_wait( struct thread *thread, unsigned int status )
     for (i = 0, entry = wait->queues; i < wait->count; i++, entry++)
         entry->obj->ops->remove_queue( entry->obj, entry );
     if (wait->user) remove_timeout_user( wait->user );
-    free( wait );
+    thread_wait_free( wait );
     return status;
 }
 
@@ -1145,9 +1187,10 @@ static int wait_on( const select_op_t *select_op, unsigned int count, struct obj
     struct wait_queue_entry *entry;
     unsigned int i;
 
-    if (!(wait = mem_alloc( FIELD_OFFSET(struct thread_wait, queues[count]) ))) return 0;
+    if (!(wait = thread_wait_alloc( count ))) { assert(0); return 0; }
     wait->next    = current->wait;
     wait->thread  = current;
+    wait->capacity = count;
     wait->count   = count;
     wait->flags   = flags;
     wait->select  = select_op->op;
