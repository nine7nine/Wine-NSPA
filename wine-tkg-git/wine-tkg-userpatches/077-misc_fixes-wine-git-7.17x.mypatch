From d5f583473504e75cb4f5a53cb21da864857eafc9 Mon Sep 17 00:00:00 2001
From: Jinoh Kang <jinoh.kang.kr@gmail.com>
Date: Thu, 2 Jun 2022 03:07:39 +0900
Subject: [PATCH] include: Define atomic read/write helpers for 32-bit
 integers.

Based on the corresponding functions from Windows SDK header files.

Signed-off-by: Jinoh Kang <jinoh.kang.kr@gmail.com>
---
 include/winnt.h | 92 +++++++++++++++++++++++++++++++++++++++++++++++++
 1 file changed, 92 insertions(+)

diff --git a/include/winnt.h b/include/winnt.h
index 76aee026d84..c0599a5f757 100644
--- a/include/winnt.h
+++ b/include/winnt.h
@@ -6379,6 +6379,61 @@ static FORCEINLINE void MemoryBarrier(vo
 
 #endif /* __i386__ */
 
+/* Since Visual Studio 2012, volatile accesses do not always imply acquire and
+ * release semantics.  We explicitly use ISO volatile semantics, manually
+ * placing barriers as appropriate.
+ */
+#if _MSC_VER >= 1700
+#pragma intrinsic(__iso_volatile_load32)
+#pragma intrinsic(__iso_volatile_store32)
+#define __WINE_LOAD32_NO_FENCE(src) (__iso_volatile_load32(src))
+#define __WINE_STORE32_NO_FENCE(dest, value) (__iso_volatile_store32(dest, value))
+#else  /* _MSC_VER >= 1700 */
+#define __WINE_LOAD32_NO_FENCE(src) (*(src))
+#define __WINE_STORE32_NO_FENCE(dest, value) ((void)(*(dest) = (value)))
+#endif  /* _MSC_VER >= 1700 */
+
+#if defined(__i386__) || defined(__x86_64__)
+#pragma intrinsic(_ReadWriteBarrier)
+void _ReadWriteBarrier(void);
+#endif  /* defined(__i386__) || defined(__x86_64__) */
+
+static void __wine_memory_barrier_acq_rel(void)
+{
+#if defined(__i386__) || defined(__x86_64__)
+#pragma warning(suppress:4996)
+    _ReadWriteBarrier();
+#elif defined(__arm__)
+    __dmb(_ARM_BARRIER_ISH);
+#elif defined(__aarch64__)
+    __dmb(_ARM64_BARRIER_ISH);
+#endif  /* defined(__i386__) || defined(__x86_64__) */
+}
+
+static FORCEINLINE LONG ReadAcquire( LONG const volatile *src )
+{
+    LONG value = __WINE_LOAD32_NO_FENCE( (int const volatile *)src );
+    __wine_memory_barrier_acq_rel();
+    return value;
+}
+
+static FORCEINLINE LONG ReadNoFence( LONG const volatile *src )
+{
+    LONG value = __WINE_LOAD32_NO_FENCE( (int const volatile *)src );
+    return value;
+}
+
+static FORCEINLINE void WriteRelease( LONG volatile *dest, LONG value )
+{
+    __wine_memory_barrier_acq_rel();
+    __WINE_STORE32_NO_FENCE( (int volatile *)dest, value );
+}
+
+static FORCEINLINE void WriteNoFence( LONG volatile *dest, LONG value )
+{
+    __WINE_STORE32_NO_FENCE( (int volatile *)dest, value );
+}
+
 #elif defined(__GNUC__)
 
 static FORCEINLINE BOOLEAN WINAPI BitScanForward(DWORD *index, DWORD mask)
@@ -6492,6 +6547,43 @@ static FORCEINLINE void MemoryBarrier(vo
     __sync_synchronize();
 }
 
+#if defined(__x86_64__) || defined(__i386__)
+/* On x86, Support old GCC with either no or buggy (GCC BZ#81316) __atomic_* support */
+#define __WINE_ATOMIC_LOAD_ACQUIRE(ptr, ret) do { *(ret) = *(ptr); __asm__ __volatile__( "" ::: "memory" ); } while (0)
+#define __WINE_ATOMIC_LOAD_RELAXED(ptr, ret) do { *(ret) = *(ptr); } while (0)
+#define __WINE_ATOMIC_STORE_RELEASE(ptr, val) do { __asm__ __volatile__( "" ::: "memory" ); *(ptr) = *(val); } while (0)
+#define __WINE_ATOMIC_STORE_RELAXED(ptr, val) do { *(ptr) = *(val); } while (0)
+#else
+#define __WINE_ATOMIC_LOAD_ACQUIRE(ptr, ret) __atomic_load(ptr, ret, __ATOMIC_ACQUIRE)
+#define __WINE_ATOMIC_LOAD_RELAXED(ptr, ret) __atomic_load(ptr, ret, __ATOMIC_RELAXED)
+#define __WINE_ATOMIC_STORE_RELEASE(ptr, val) __atomic_store(ptr, val, __ATOMIC_RELEASE)
+#define __WINE_ATOMIC_STORE_RELAXED(ptr, val) __atomic_store(ptr, val, __ATOMIC_RELAXED)
+#endif  /* defined(__x86_64__) || defined(__i386__) */
+
+static FORCEINLINE LONG ReadAcquire( LONG const volatile *src )
+{
+    LONG value;
+    __WINE_ATOMIC_LOAD_ACQUIRE( src, &value );
+    return value;
+}
+
+static FORCEINLINE LONG ReadNoFence( LONG const volatile *src )
+{
+    LONG value;
+    __WINE_ATOMIC_LOAD_RELAXED( src, &value );
+    return value;
+}
+
+static FORCEINLINE void WriteRelease( LONG volatile *dest, LONG value )
+{
+    __WINE_ATOMIC_STORE_RELEASE( dest, &value );
+}
+
+static FORCEINLINE void WriteNoFence( LONG volatile *dest, LONG value )
+{
+    __WINE_ATOMIC_STORE_RELAXED( dest, &value );
+}
+
 #endif  /* __GNUC__ */
 
 #ifdef _WIN64
-- 
GitLab

From ee7794073b31fccf8f69f6f813781b406fcbdf1e Mon Sep 17 00:00:00 2001
From: Nikolay Sivov <nsivov@codeweavers.com>
Date: Thu, 1 Sep 2022 13:11:57 +0300
Subject: [PATCH 1/2] msvcrt: Use size_t for the size in wcsdup().

Signed-off-by: Nikolay Sivov <nsivov@codeweavers.com>
---
 dlls/msvcrt/wcs.c | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

diff --git a/dlls/msvcrt/wcs.c b/dlls/msvcrt/wcs.c
index a438449342e..6942ecf3534 100644
--- a/dlls/msvcrt/wcs.c
+++ b/dlls/msvcrt/wcs.c
@@ -79,7 +79,7 @@ wchar_t* CDECL _wcsdup( const wchar_t* str )
   wchar_t* ret = NULL;
   if (str)
   {
-    int size = (wcslen(str) + 1) * sizeof(wchar_t);
+    size_t size = (wcslen(str) + 1) * sizeof(wchar_t);
     ret = malloc( size );
     if (ret) memcpy( ret, str, size );
   }
-- 
GitLab


From b007ee923498c55a1a06b5fcd22a2a822dc70c83 Mon Sep 17 00:00:00 2001
From: Nikolay Sivov <nsivov@codeweavers.com>
Date: Thu, 1 Sep 2022 13:13:37 +0300
Subject: [PATCH 2/2] msvcrt: Remove mention of obsolete libwine function.

Signed-off-by: Nikolay Sivov <nsivov@codeweavers.com>
---
 dlls/msvcrt/wcs.c | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

diff --git a/dlls/msvcrt/wcs.c b/dlls/msvcrt/wcs.c
index 6942ecf3534..971c04c0f6c 100644
--- a/dlls/msvcrt/wcs.c
+++ b/dlls/msvcrt/wcs.c
@@ -2519,7 +2519,7 @@ static int wctoint(WCHAR c, int base)
     else if ('a' <= c && c <= 'z')
         v = c - 'a' + 10;
     else {
-        /* NOTE: wine_fold_string(MAP_FOLDDIGITS) supports too many things. */
+        /* NOTE: MAP_FOLDDIGITS supports too many things. */
         /* Unicode points that contain digits 0-9; keep this sorted! */
         static const WCHAR zeros[] = {
             0x660, 0x6f0, 0x966, 0x9e6, 0xa66, 0xae6, 0xb66, 0xc66, 0xce6,
-- 
GitLab

From 6c346f8c03152d6df6be8f2c2d3c5a8790e34d7d Mon Sep 17 00:00:00 2001
From: Shaun Ren <sren@codeweavers.com>
Date: Tue, 6 Sep 2022 14:59:05 -0400
Subject: [PATCH] msvcrt: Fix strncmp return value.

Some programs, such as Final Fantasy IV (3D remake), expect strncmp
to return exactly +/-1 when the strings are not equal.

Signed-off-by: Shaun Ren <sren@codeweavers.com>
---
 dlls/msvcrt/string.c           |  7 +++
 14 files changed, 449 insertions(+), 3 deletions(-)

diff --git a/dlls/msvcrt/string.c b/dlls/msvcrt/string.c
index dd392abd203..d1bdf73d209 100644
--- a/dlls/msvcrt/string.c
+++ b/dlls/msvcrt/string.c
@@ -3289,7 +3289,14 @@ int __cdecl strncmp(const char *str1, const char *str2, size_t len)
 {
     if (!len) return 0;
     while (--len && *str1 && *str1 == *str2) { str1++; str2++; }
+
+#if defined(_WIN64) || defined(_UCRT) || _MSVCR_VER == 70 || _MSVCR_VER == 71 || _MSVCR_VER >= 110
+    if ((unsigned char)*str1 > (unsigned char)*str2) return 1;
+    if ((unsigned char)*str1 < (unsigned char)*str2) return -1;
+    return 0;
+#else
     return (unsigned char)*str1 - (unsigned char)*str2;
+#endif
 }
 
 /*********************************************************************
-- 
GitLab

From 69251fed50c969bf0eda57511726c0ec84ba75f2 Mon Sep 17 00:00:00 2001
From: Jinoh Kang <jinoh.kang.kr@gmail.com>
Date: Sun, 11 Sep 2022 03:04:16 +0900
Subject: [PATCH 2/2] ntdll: Fix integer overflow in RtlUniform.

The integer overflow bug in RtlUniform has been fixed since Windows
Vista.  Synchronize Wine's version accordingly.
---
 dlls/ntdll/rtl.c       | 52 ++++++++++++++++++++++++------------------
 dlls/ntdll/tests/rtl.c |  6 -----
 2 files changed, 30 insertions(+), 28 deletions(-)

diff --git a/dlls/ntdll/rtl.c b/dlls/ntdll/rtl.c
index 11067f44941..11b346796aa 100644
--- a/dlls/ntdll/rtl.c
+++ b/dlls/ntdll/rtl.c
@@ -706,7 +706,7 @@ __ASM_GLOBAL_FUNC(NTDLL_RtlUshortByteSwap,
 /*************************************************************************
  * RtlUniform   [NTDLL.@]
  *
- * Generates an uniform random number
+ * Generates a uniform random number
  *
  * PARAMS
  *  seed [O] The seed of the Random function
@@ -715,12 +715,7 @@ __ASM_GLOBAL_FUNC(NTDLL_RtlUshortByteSwap,
  *  It returns a random number uniformly distributed over [0..MAXLONG-1].
  *
  * NOTES
- *  Generates an uniform random number using D.H. Lehmer's 1948 algorithm.
- *  In our case the algorithm is:
- *
- *|  result = (*seed * 0x7fffffed + 0x7fffffc3) % MAXLONG;
- *|
- *|  *seed = result;
+ *  Generates a uniform random number using a linear congruential generator.
  *
  * DIFFERENCES
  *  The native documentation states that the random number is
@@ -730,23 +725,36 @@ __ASM_GLOBAL_FUNC(NTDLL_RtlUshortByteSwap,
  */
 ULONG WINAPI RtlUniform (PULONG seed)
 {
+    ULONGLONG product;
     ULONG result;
 
-   /*
-    * Instead of the algorithm stated above, we use the algorithm
-    * below, which is totally equivalent (see the tests), but does
-    * not use a division and therefore is faster.
-    */
-    result = *seed * 0xffffffed + 0x7fffffc3;
-    if (result == 0xffffffff || result == 0x7ffffffe) {
-	result = (result + 2) & MAXLONG;
-    } else if (result == 0x7fffffff) {
-	result = 0;
-    } else if ((result & 0x80000000) == 0) {
-	result = result + (~result & 1);
-    } else {
-	result = (result + (result & 1)) & MAXLONG;
-    } /* if */
+    product = (ULONGLONG)*seed * 0x7fffffed + 0x7fffffc3;
+
+    /*
+     * The following is equivalent to:
+     *
+     *   result = (product & ((1ui64 << 63) - 1)) % ((1u << 31) - 1);
+     *
+     * Since product is never greater than 2^63, it is the same as:
+     *
+     *   result = product % ((1u << 31) - 1);
+     *
+     * This is due to the following identity:
+     *
+     *   a * (2^31) + b = a + b  (mod 2^31 - 1)
+     *
+     * because 2^31 is congruent to 1 (mod 2^31 - 1).
+     */
+
+    /* The 1st iteration produces an integer in the range [0, 0xffffffff]. */
+    result = ((ULONG)product & 0x7fffffff) + (ULONG)(product >> 31);
+
+    /* The 2nd iteration produces an integer in the range [0, 0x80000000]. */
+    result = (result & 0x7fffffff) + (result >> 31);
+
+    /* The 3rd iteration produces an integer in the range [0, 0x7fffffff]. */
+    result = (result & 0x7fffffff) + (result >> 31);
+
     *seed = result;
     return result;
 }
-- 
GitLab

From 701be6f7fefc099064828898cb2341c1b57d9698 Mon Sep 17 00:00:00 2001
From: Jinoh Kang <jinoh.kang.kr@gmail.com>
Date: Sun, 18 Sep 2022 22:48:26 +0900
Subject: [PATCH] kernelbase: Fix reading stale information from IOSB.

Ensure IOSB Information (InternalHigh) is loaded after Status (Internal)
to avoid reading stale value from the Information (InternalHigh) field.
---
 dlls/kernelbase/file.c | 10 ++++++++--
 1 file changed, 8 insertions(+), 2 deletions(-)

diff --git a/dlls/kernelbase/file.c b/dlls/kernelbase/file.c
index 5ba7e0be419..11dbcdeac4a 100644
--- a/dlls/kernelbase/file.c
+++ b/dlls/kernelbase/file.c
@@ -3133,7 +3133,7 @@ BOOL WINAPI DECLSPEC_HOTPATCH GetOverlappedResultEx( HANDLE file, OVERLAPPED *ov
 
     TRACE( "(%p %p %p %lu %d)\n", file, overlapped, result, timeout, alertable );
 
-    status = overlapped->Internal;
+    status = ReadAcquire( (volatile LONG *)&overlapped->Internal );
     if (status == STATUS_PENDING)
     {
         if (!timeout)
@@ -3150,7 +3150,13 @@ BOOL WINAPI DECLSPEC_HOTPATCH GetOverlappedResultEx( HANDLE file, OVERLAPPED *ov
             return FALSE;
         }
 
-        status = overlapped->Internal;
+        /* Normally this does not require an atomic load, since the wait above
+         * acts as a barrier as long as the caller supplied the correct handle
+         * and nothing else interfered with signalling of I/O completion.
+         * However, we do it anyway for consistency and extra safety in case
+         * Windows takes the same precaution for misbehaving applications.
+         */
+        status = ReadAcquire( (volatile LONG *)&overlapped->Internal );
         if (status == STATUS_PENDING) status = STATUS_SUCCESS;
     }
 
-- 
GitLab

From 8c041a1ac7d9d15d63df39c9fbd05d6730c6fd13 Mon Sep 17 00:00:00 2001
From: Jinoh Kang <jinoh.kang.kr@gmail.com>
Date: Sun, 18 Sep 2022 23:31:19 +0900
Subject: [PATCH 1/2] concrt140: Use atomic write for releasing
 threadsafe_queue spin lock.

This fixes data race in ARM/ARM64 platforms, and prevents potential
memory access reordering by the compiler.
---
 dlls/concrt140/details.c | 4 ++--
 1 file changed, 2 insertions(+), 2 deletions(-)

diff --git a/dlls/concrt140/details.c b/dlls/concrt140/details.c
index e6711db6983..fb9e2a700eb 100644
--- a/dlls/concrt140/details.c
+++ b/dlls/concrt140/details.c
@@ -225,7 +225,7 @@ static void threadsafe_queue_push(threadsafe_queue *queue, size_t id,
         queue->tail = p;
         if(!queue->head)
             queue->head = p;
-        queue->lock = 0;
+        WriteRelease(&queue->lock, 0);
     }
     else
     {
@@ -275,7 +275,7 @@ static BOOL threadsafe_queue_pop(threadsafe_queue *queue, size_t id,
         queue->head = p->_Next;
         if(!queue->head)
             queue->tail = NULL;
-        queue->lock = 0;
+        WriteRelease(&queue->lock, 0);
 
         /* TODO: Add exception handling */
         call__Concurrent_queue_base_v4__Deallocate_page(parent, p);
-- 
GitLab


From 0e0da6643469150aa5fc5f84b3104efba935bf24 Mon Sep 17 00:00:00 2001
From: Jinoh Kang <jinoh.kang.kr@gmail.com>
Date: Mon, 19 Sep 2022 00:34:47 +0900
Subject: [PATCH 2/2] msvcp90: Use atomic write for releasing threadsafe_queue
 spin lock.

This fixes data race in ARM/ARM64 platforms, and prevents potential
memory access reordering by the compiler.
---
 dlls/msvcp90/details.c | 4 ++--
 1 file changed, 2 insertions(+), 2 deletions(-)

diff --git a/dlls/msvcp90/details.c b/dlls/msvcp90/details.c
index 767b20b2334..8df9cbe563f 100644
--- a/dlls/msvcp90/details.c
+++ b/dlls/msvcp90/details.c
@@ -239,7 +239,7 @@ static void threadsafe_queue_push(threadsafe_queue *queue, size_t id,
         queue->tail = p;
         if(!queue->head)
             queue->head = p;
-        queue->lock = 0;
+        WriteRelease(&queue->lock, 0);
     }
     else
     {
@@ -289,7 +289,7 @@ static BOOL threadsafe_queue_pop(threadsafe_queue *queue, size_t id,
         queue->head = p->_Next;
         if(!queue->head)
             queue->tail = NULL;
-        queue->lock = 0;
+        WriteRelease(&queue->lock, 0);
 
         /* TODO: Add exception handling */
         call__Concurrent_queue_base_v4__Deallocate_page(parent, p);
-- 
GitLab

From 40d0e55d4c03be43a7b5a5906496a588f61ca00c Mon Sep 17 00:00:00 2001
From: Nikolay Sivov <nsivov@codeweavers.com>
Date: Sun, 18 Sep 2022 15:50:47 +0300
Subject: [PATCH 1/3] kernelbase: Add OpenFileMappingFromApp().

Signed-off-by: Nikolay Sivov <nsivov@codeweavers.com>
---
 dlls/kernelbase/kernelbase.spec |  2 +-
 dlls/kernelbase/sync.c          | 18 ++++++++++++++++++
 include/winbase.h               |  1 +
 4 files changed, 47 insertions(+), 1 deletion(-)

diff --git a/dlls/kernelbase/kernelbase.spec b/dlls/kernelbase/kernelbase.spec
index feb1fce8f7a..961c2bf45ee 100644
--- a/dlls/kernelbase/kernelbase.spec
+++ b/dlls/kernelbase/kernelbase.spec
@@ -1015,7 +1015,7 @@
 @ stdcall OpenEventA(long long str)
 @ stdcall OpenEventW(long long wstr)
 @ stdcall OpenFileById(long ptr long long ptr long)
-# @ stub OpenFileMappingFromApp
+@ stdcall OpenFileMappingFromApp(long long wstr)
 @ stdcall OpenFileMappingW(long long wstr)
 # @ stub OpenGlobalizationUserSettingsKey
 @ stdcall OpenMutexW(long long wstr)
diff --git a/dlls/kernelbase/sync.c b/dlls/kernelbase/sync.c
index 5c4fb76536f..1526db25f33 100644
--- a/dlls/kernelbase/sync.c
+++ b/dlls/kernelbase/sync.c
@@ -971,6 +971,24 @@ HANDLE WINAPI DECLSPEC_HOTPATCH OpenFileMappingW( DWORD access, BOOL inherit, LP
 }
 
 
+/***********************************************************************
+ *             OpenFileMappingFromApp   (kernelbase.@)
+ */
+HANDLE WINAPI DECLSPEC_HOTPATCH OpenFileMappingFromApp( ULONG access, BOOL inherit, LPCWSTR name )
+{
+    OBJECT_ATTRIBUTES attr;
+    UNICODE_STRING nameW;
+    HANDLE ret;
+
+    if (!get_open_object_attributes( &attr, &nameW, inherit, name )) return 0;
+
+    if (access == FILE_MAP_COPY) access = SECTION_MAP_READ;
+
+    if (!set_ntstatus( NtOpenSection( &ret, access, &attr ))) return 0;
+    return ret;
+}
+
+
 /***********************************************************************
  * Condition variables
  ***********************************************************************/
diff --git a/include/winbase.h b/include/winbase.h
index 0a8409c10e1..83282ec8af5 100644
--- a/include/winbase.h
+++ b/include/winbase.h
@@ -2537,6 +2537,7 @@ WINBASEAPI HFILE       WINAPI OpenFile(LPCSTR,OFSTRUCT*,UINT);
 WINBASEAPI HANDLE      WINAPI OpenFileMappingA(DWORD,BOOL,LPCSTR);
 WINBASEAPI HANDLE      WINAPI OpenFileMappingW(DWORD,BOOL,LPCWSTR);
 #define                       OpenFileMapping WINELIB_NAME_AW(OpenFileMapping)
+WINBASEAPI HANDLE      WINAPI OpenFileMappingFromApp(ULONG,BOOL,LPCWSTR);
 WINBASEAPI HANDLE      WINAPI OpenJobObjectA(DWORD,BOOL,LPCSTR);
 WINBASEAPI HANDLE      WINAPI OpenJobObjectW(DWORD,BOOL,LPCWSTR);
 #define                       OpenJobObject WINELIB_NAME_AW(OpenJobObject)
-- 
GitLab


From 3ede82e2a8dedcd90f4a2098581e2b74d8d84093 Mon Sep 17 00:00:00 2001
From: Nikolay Sivov <nsivov@codeweavers.com>
Date: Sun, 18 Sep 2022 17:26:32 +0300
Subject: [PATCH 2/3] kernelbase: Add CreateFileMappingFromApp().

Signed-off-by: Nikolay Sivov <nsivov@codeweavers.com>
---
 dlls/kernelbase/kernelbase.spec |  2 +-
 dlls/kernelbase/sync.c          | 10 +++++++-
 include/winbase.h               |  1 +
 4 files changed, 54 insertions(+), 2 deletions(-)

diff --git a/dlls/kernelbase/kernelbase.spec b/dlls/kernelbase/kernelbase.spec
index 961c2bf45ee..0e9f0d7febd 100644
--- a/dlls/kernelbase/kernelbase.spec
+++ b/dlls/kernelbase/kernelbase.spec
@@ -190,7 +190,7 @@
 @ stdcall CreateFiberEx(long long long ptr ptr)
 @ stdcall CreateFile2(wstr long long long ptr)
 @ stdcall CreateFileA(str long long ptr long long long)
-# @ stub CreateFileMappingFromApp
+@ stdcall CreateFileMappingFromApp(long ptr long int64 wstr)
 @ stdcall CreateFileMappingNumaW(long ptr long long long wstr long)
 @ stdcall CreateFileMappingW(long ptr long long long wstr)
 @ stdcall CreateFileW(wstr long long ptr long long long)
diff --git a/dlls/kernelbase/sync.c b/dlls/kernelbase/sync.c
index 1526db25f33..60b33af99c3 100644
--- a/dlls/kernelbase/sync.c
+++ b/dlls/kernelbase/sync.c
@@ -879,7 +879,6 @@ BOOL WINAPI DECLSPEC_HOTPATCH InitializeCriticalSectionEx( CRITICAL_SECTION *cri
  * File mappings
  ***********************************************************************/
 
-
 /***********************************************************************
  *             CreateFileMappingW   (kernelbase.@)
  */
@@ -947,6 +946,15 @@ HANDLE WINAPI DECLSPEC_HOTPATCH CreateFileMappingW( HANDLE file, LPSECURITY_ATTR
 }
 
 
+/***********************************************************************
+ *             CreateFileMappingFromApp   (kernelbase.@)
+ */
+HANDLE WINAPI DECLSPEC_HOTPATCH CreateFileMappingFromApp( HANDLE file, LPSECURITY_ATTRIBUTES sa, ULONG protect,
+        ULONG64 size, LPCWSTR name )
+{
+    return CreateFileMappingW( file, sa, protect, size << 32, size, name );
+}
+
 /***********************************************************************
  *             OpenFileMappingW   (kernelbase.@)
  */
diff --git a/include/winbase.h b/include/winbase.h
index 83282ec8af5..ff96fc1072f 100644
--- a/include/winbase.h
+++ b/include/winbase.h
@@ -1876,6 +1876,7 @@ WINBASEAPI HANDLE      WINAPI CreateFileW(LPCWSTR,DWORD,DWORD,LPSECURITY_ATTRIBU
 WINBASEAPI HANDLE      WINAPI CreateFileMappingA(HANDLE,LPSECURITY_ATTRIBUTES,DWORD,DWORD,DWORD,LPCSTR);
 WINBASEAPI HANDLE      WINAPI CreateFileMappingW(HANDLE,LPSECURITY_ATTRIBUTES,DWORD,DWORD,DWORD,LPCWSTR);
 #define                       CreateFileMapping WINELIB_NAME_AW(CreateFileMapping)
+WINBASEAPI HANDLE      WINAPI CreateFileMappingFromApp(HANDLE,PSECURITY_ATTRIBUTES,ULONG,ULONG64,PCWSTR);
 WINBASEAPI HANDLE      WINAPI CreateIoCompletionPort(HANDLE,HANDLE,ULONG_PTR,DWORD);
 WINBASEAPI HANDLE      WINAPI CreateJobObjectA(LPSECURITY_ATTRIBUTES,LPCSTR);
 WINBASEAPI HANDLE      WINAPI CreateJobObjectW(LPSECURITY_ATTRIBUTES,LPCWSTR);
-- 
GitLab


From 1ceba3533e498d070aedba812b6605d41bc20782 Mon Sep 17 00:00:00 2001
From: Nikolay Sivov <nsivov@codeweavers.com>
Date: Sun, 18 Sep 2022 18:15:37 +0300
Subject: [PATCH 3/3] kernelbase: Add MapViewOfFileFromApp().

Signed-off-by: Nikolay Sivov <nsivov@codeweavers.com>
---
 dlls/kernelbase/kernelbase.spec |  2 +-
 dlls/kernelbase/memory.c        |  9 ++++++++
 include/winbase.h               |  1 +
 4 files changed, 48 insertions(+), 1 deletion(-)

diff --git a/dlls/kernelbase/kernelbase.spec b/dlls/kernelbase/kernelbase.spec
index 0e9f0d7febd..c9b8649c800 100644
--- a/dlls/kernelbase/kernelbase.spec
+++ b/dlls/kernelbase/kernelbase.spec
@@ -984,7 +984,7 @@
 @ stdcall MapViewOfFile3(long long ptr int64 long long long ptr long)
 @ stdcall MapViewOfFileEx(long long long long long ptr)
 @ stdcall MapViewOfFileExNuma(long long long long long ptr long)
-# @ stub MapViewOfFileFromApp
+@ stdcall MapViewOfFileFromApp(long long int64 long)
 @ stdcall MoveFileExW(wstr wstr long)
 # @ stub MoveFileWithProgressTransactedW
 @ stdcall MoveFileWithProgressW(wstr wstr ptr ptr long)
diff --git a/dlls/kernelbase/memory.c b/dlls/kernelbase/memory.c
index 14d8c4817a5..412d80f5cfd 100644
--- a/dlls/kernelbase/memory.c
+++ b/dlls/kernelbase/memory.c
@@ -237,6 +237,15 @@ LPVOID WINAPI DECLSPEC_HOTPATCH MapViewOfFileEx( HANDLE handle, DWORD access, DW
     return addr;
 }
 
+
+/***********************************************************************
+ *             MapViewOfFileFromApp   (kernelbase.@)
+ */
+LPVOID WINAPI DECLSPEC_HOTPATCH MapViewOfFileFromApp( HANDLE handle, ULONG access, ULONG64 offset, SIZE_T size )
+{
+    return MapViewOfFile( handle, access, offset << 32, offset, size );
+}
+
 /***********************************************************************
  *             MapViewOfFile3   (kernelbase.@)
  */
-- 
GitLab

From 6914a3d67703cbdc10b06bf3527a8707d08bd468 Mon Sep 17 00:00:00 2001
From: Zebediah Figura <zfigura@codeweavers.com>
Date: Mon, 19 Sep 2022 23:31:43 -0500
Subject: [PATCH] ntdll: Add a fast path for
 NtDeviceIoControlFile(INVALID_HANDLE_VALUE).

Wine-Bug: https://bugs.winehq.org/show_bug.cgi?id=53706
---
 dlls/ntdll/unix/file.c | 5 +++++
 1 file changed, 5 insertions(+)

diff --git a/dlls/ntdll/unix/file.c b/dlls/ntdll/unix/file.c
index b31ce4fbb3d..7eb8dbe7ad4 100644
--- a/dlls/ntdll/unix/file.c
+++ b/dlls/ntdll/unix/file.c
@@ -5760,6 +5760,11 @@ NTSTATUS WINAPI NtDeviceIoControlFile( HANDLE handle, HANDLE event, PIO_APC_ROUT
     TRACE( "(%p,%p,%p,%p,%p,0x%08x,%p,0x%08x,%p,0x%08x)\n",
            handle, event, apc, apc_context, io, code, in_buffer, in_size, out_buffer, out_size );
 
+    /* some broken applications call this frequently with INVALID_HANDLE_VALUE,
+     * and run slowly if we make a server call every time */
+    if (HandleToLong( handle ) == ~0)
+        return STATUS_INVALID_HANDLE;
+
     switch (device)
     {
     case FILE_DEVICE_BEEP:
-- 
GitLab

