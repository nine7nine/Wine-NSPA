--- a/server/thread.c	2022-05-18 21:58:25.617775209 -0500
+++ b/server/thread.c	2022-05-18 21:56:56.713379111 -0500
@@ -830,25 +830,16 @@ static void apply_thread_priority( struc
             return;
     
     // Set RT for realtime process threads
-    if ((priority_class == PROCESS_PRIOCLASS_REALTIME) && (priority >= THREAD_PRIORITY_TIME_CRITICAL || THREAD_PRIORITY_HIGHEST))
+    if ((priority_class == PROCESS_PRIOCLASS_REALTIME))
     {
         param.sched_priority = get_rtpc_priority( thread->process->priority, priority );
         if (sched_setscheduler( thread->unix_tid, SCHED_FIFO|SCHED_RESET_ON_FORK, &param ) == 0)
             return;
     }
-    else if ((priority_class == PROCESS_PRIOCLASS_REALTIME) && (priority <= THREAD_PRIORITY_TIME_CRITICAL || THREAD_PRIORITY_HIGHEST))
-    {
-        param.sched_priority = get_rtpc_priority( thread->process->priority, priority );
-        if (sched_setscheduler( thread->unix_tid, wine_rt_policy|SCHED_RESET_ON_FORK, &param ) == 0)
-            return;
-    }
-    else
-    {
     // set niceness      
-        niceness = get_unix_niceness( get_base_priority( priority_class, priority ), limit );
-        if (setpriority( PRIO_PROCESS, thread->unix_tid, niceness ) != 0)
-            return;
-    }
+    niceness = get_unix_niceness( get_base_priority( priority_class, priority ), limit );
+    if (setpriority( PRIO_PROCESS, thread->unix_tid, niceness ) != 0)
+        return;
 }
 
 int set_thread_priority( struct thread *thread, int priority_class, int priority )
@@ -1762,7 +1753,6 @@ DECL_HANDLER(init_thread)
 
     init_thread_context( current );
     generate_debug_event( current, DbgCreateThreadStateChange, &req->entry );
-    set_thread_priority( current, current->priority );
     if (!process->cpu_override.cpu_count)
         set_thread_affinity( current, current->affinity );
     set_thread_priority( current, current->process->priority, current->priority );

