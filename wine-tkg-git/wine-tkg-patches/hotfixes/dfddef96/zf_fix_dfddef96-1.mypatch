diff --git a/dlls/ntdll/sync.c b/dlls/ntdll/sync.c
index a3abe271b04..2b47b7593da 100644
--- a/dlls/ntdll/sync.c
+++ b/dlls/ntdll/sync.c
@@ -638,6 +638,17 @@ NTSTATUS WINAPI RtlWaitOnAddress( const void *addr, const void *cmp, SIZE_T size
 
     InterlockedExchangePointer( &entry->addr, (void *)addr );
 
+    /* Ensure that the compare-and-swap above is ordered before the comparison
+     * below.
+     *
+     * We don't need to do this before storing NULL on return, because the
+     * atomic instruction has release semantics and therefore implicitly
+     * prevents sinking of compare_addr().
+     *
+     * FIXME: Is this even necessary? Does the cmpxchg above already provide
+     * the memory ordering we need? */
+    __atomic_thread_fence( __ATOMIC_SEQ_CST );
+
     if (!compare_addr( addr, cmp, size ))
     {
         InterlockedExchangePointer( &entry->addr, NULL );
@@ -662,6 +673,25 @@ void WINAPI RtlWakeAddressAll( const void *addr )
 
     if (!addr) return;
 
+    /* Ensure that all memory stores are ordered before this function. Given the
+     * following (example) sequence, where thread B calls RtlWaitOnAddress() and
+     * thread A calls one of the wake functions:
+     *
+     * Thread A                 Thread B
+     * ---------------------------------
+     * x = 1;
+     * if (addr[b_tid] == &x)
+     *                          addr[b_tid] = &x;
+     *                          if (x == 0)
+     *                          sleep
+     *
+     * We must prevent the store "x = 1" from being ordered after the comparison
+     * in thread A, or else it's possible for thread A to see NULL (and not wake
+     * up thread B) while thread B sees x == 0 (and goes to sleep), resulting in
+     * a deadlock.
+     */
+    __atomic_thread_fence( __ATOMIC_SEQ_CST );
+
     for (array = &first_addr_wait_array; array != NULL; array = array->next)
     {
         for (i = 0; i < ARRAY_SIZE(array->entries); ++i)
@@ -684,6 +714,8 @@ void WINAPI RtlWakeAddressSingle( const void *addr )
 
     if (!addr) return;
 
+    __atomic_thread_fence( __ATOMIC_SEQ_CST );
+
     for (array = &first_addr_wait_array; array != NULL; array = array->next)
     {
         for (i = 0; i < ARRAY_SIZE(array->entries); ++i)
 
