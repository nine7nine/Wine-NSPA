From b116bcc5c294697eb537255bb2ddffa1e7dad5c0 Mon Sep 17 00:00:00 2001
From: Derek Lesho <dlesho@codeweavers.com>
Date: Thu, 11 Mar 2021 12:58:32 -0500
Subject: [PATCH] winegstreamer: Implement ::SetOutputType for decode
 transform.

Signed-off-by: Derek Lesho <dlesho@codeweavers.com>
---
 dlls/winegstreamer/decode_transform.c | 76 +++++++++++++++++++++++++--
 1 file changed, 73 insertions(+), 3 deletions(-)

diff --git a/dlls/winegstreamer/decode_transform.c b/dlls/winegstreamer/decode_transform.c
index f709ef32fc1..0848cb47c9d 100644
--- a/dlls/winegstreamer/decode_transform.c
+++ b/dlls/winegstreamer/decode_transform.c
@@ -56,7 +56,7 @@ struct mf_decoder
     IMFTransform IMFTransform_iface;
     LONG refcount;
     enum decoder_type type;
-    IMFMediaType *input_type;
+    IMFMediaType *input_type, *output_type;
     CRITICAL_SECTION cs;
 };
 
@@ -107,6 +107,12 @@ static ULONG WINAPI mf_decoder_Release(IMFTransform *iface)
             decoder->input_type = NULL;
         }
 
+        if (decoder->output_type)
+        {
+            IMFMediaType_Release(decoder->output_type);
+            decoder->output_type = NULL;
+        }
+
         DeleteCriticalSection(&decoder->cs);
 
         heap_free(decoder);
@@ -336,9 +342,73 @@ static HRESULT WINAPI mf_decoder_SetInputType(IMFTransform *iface, DWORD id, IMF
 
 static HRESULT WINAPI mf_decoder_SetOutputType(IMFTransform *iface, DWORD id, IMFMediaType *type, DWORD flags)
 {
-    FIXME("%p, %u, %p, %#x.\n", iface, id, type, flags);
+    struct mf_decoder *decoder = impl_mf_decoder_from_IMFTransform(iface);
+    struct wg_format output_format;
+    GUID major_type, subtype;
+    HRESULT hr;
+    unsigned int i;
 
-    return E_NOTIMPL;
+    TRACE("%p, %u, %p, %#x.\n", decoder, id, type, flags);
+
+    if (id != 0)
+        return MF_E_INVALIDSTREAMNUMBER;
+
+    if (!type)
+    {
+        if (flags & MFT_SET_TYPE_TEST_ONLY)
+            return S_OK;
+
+        EnterCriticalSection(&decoder->cs);
+
+        if (decoder->output_type)
+        {
+            IMFMediaType_Release(decoder->output_type);
+            decoder->output_type = NULL;
+        }
+
+        LeaveCriticalSection(&decoder->cs);
+
+        return S_OK;
+    }
+
+    if (FAILED(IMFMediaType_GetGUID(type, &MF_MT_MAJOR_TYPE, &major_type)))
+        return MF_E_INVALIDTYPE;
+    if (FAILED(IMFMediaType_GetGUID(type, &MF_MT_SUBTYPE, &subtype)))
+        return MF_E_INVALIDTYPE;
+
+    if (!(IsEqualGUID(&major_type, decoder_descs[decoder->type].major_type)))
+        return MF_E_INVALIDTYPE;
+
+    for (i = 0; i < decoder_descs[decoder->type].output_types_count; i++)
+    {
+        if (IsEqualGUID(&subtype, decoder_descs[decoder->type].output_types[i]))
+            break;
+        if (i == decoder_descs[decoder->type].output_types_count)
+            return MF_E_INVALIDTYPE;
+    }
+
+    mf_media_type_to_wg_format(type, &output_format);
+    if (!output_format.major_type)
+        return MF_E_INVALIDTYPE;
+
+    if (flags & MFT_SET_TYPE_TEST_ONLY)
+        return S_OK;
+
+    EnterCriticalSection(&decoder->cs);
+
+    hr = S_OK;
+
+    if (!decoder->output_type)
+        hr = MFCreateMediaType(&decoder->output_type);
+
+    if (SUCCEEDED(hr) && FAILED(hr = IMFMediaType_CopyAllItems(type, (IMFAttributes*) decoder->output_type)))
+    {
+        IMFMediaType_Release(decoder->output_type);
+        decoder->output_type = NULL;
+    }
+
+    LeaveCriticalSection(&decoder->cs);
+    return hr;
 }
 
 static HRESULT WINAPI mf_decoder_GetInputCurrentType(IMFTransform *iface, DWORD id, IMFMediaType **type)
-- 
2.30.2

