From 855ce2096c36de51d227cb07a88a73e51c34d3a9 Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?R=C3=A9mi=20Bernon?= <rbernon@codeweavers.com>
Date: Fri, 21 Jan 2022 14:24:27 +0100
Subject: [PATCH 60/88] winegstreamer: Lookup, create and link a decoder
 element.

Wine-Bug: https://bugs.winehq.org/show_bug.cgi?id=51931
Wine-Bug: https://bugs.winehq.org/show_bug.cgi?id=52391
CW-Bug-Id: #19854
---
 dlls/winegstreamer/wg_transform.c | 140 +++++++++++++++++++++++++++++-
 1 file changed, 138 insertions(+), 2 deletions(-)

diff --git a/dlls/winegstreamer/wg_transform.c b/dlls/winegstreamer/wg_transform.c
index 146cdd87ae7..a436d8316dd 100644
--- a/dlls/winegstreamer/wg_transform.c
+++ b/dlls/winegstreamer/wg_transform.c
@@ -42,7 +42,9 @@ GST_DEBUG_CATEGORY_EXTERN(wine);
 
 struct wg_transform
 {
+    GstElement *container;
     GstPad *my_src, *my_sink;
+    GstPad *their_sink, *their_src;
 };
 
 static GstCaps *wg_format_to_caps_xwma(const struct wg_encoded_format *format)
@@ -108,6 +110,22 @@ NTSTATUS wg_transform_destroy(void *args)
 {
     struct wg_transform *transform = args;
 
+    if (transform->container)
+        gst_element_set_state(transform->container, GST_STATE_NULL);
+
+    if (transform->their_src && transform->my_sink)
+        gst_pad_unlink(transform->their_src, transform->my_sink);
+    if (transform->their_sink && transform->my_src)
+        gst_pad_unlink(transform->my_src, transform->their_sink);
+
+    if (transform->their_sink)
+        g_object_unref(transform->their_sink);
+    if (transform->their_src)
+        g_object_unref(transform->their_src);
+
+    if (transform->container)
+        g_object_unref(transform->container);
+
     if (transform->my_sink)
         g_object_unref(transform->my_sink);
     if (transform->my_src)
@@ -117,14 +135,85 @@ NTSTATUS wg_transform_destroy(void *args)
     return S_OK;
 }
 
+static GstElement *try_create_transform(GstCaps *src_caps, GstCaps *sink_caps)
+{
+    GstElement *element = NULL;
+    GList *tmp, *transforms;
+    gchar *type;
+
+    transforms = gst_element_factory_list_get_elements(GST_ELEMENT_FACTORY_TYPE_ANY,
+            GST_RANK_MARGINAL);
+
+    tmp = gst_element_factory_list_filter(transforms, src_caps, GST_PAD_SINK, FALSE);
+    gst_plugin_feature_list_free(transforms);
+    transforms = tmp;
+
+    tmp = gst_element_factory_list_filter(transforms, sink_caps, GST_PAD_SRC, FALSE);
+    gst_plugin_feature_list_free(transforms);
+    transforms = tmp;
+
+    transforms = g_list_sort(transforms, gst_plugin_feature_rank_compare_func);
+    for (tmp = transforms; tmp != NULL && element == NULL; tmp = tmp->next)
+    {
+        type = gst_plugin_feature_get_name(GST_PLUGIN_FEATURE(tmp->data));
+        element = gst_element_factory_create(GST_ELEMENT_FACTORY(tmp->data), NULL);
+        if (!element)
+            GST_WARNING("Failed to create %s element.", type);
+    }
+    gst_plugin_feature_list_free(transforms);
+
+    if (element)
+        GST_INFO("Created %s element %p.", type, element);
+    else
+    {
+        gchar *src_str = gst_caps_to_string(src_caps), *sink_str = gst_caps_to_string(sink_caps);
+        GST_WARNING("Failed to create transform matching caps %s / %s.", src_str, sink_str);
+        g_free(sink_str);
+        g_free(src_str);
+    }
+
+    return element;
+}
+
+static bool transform_append_element(struct wg_transform *transform, GstElement *element,
+        GstElement **first, GstElement **last)
+{
+    gchar *name = gst_element_get_name(element);
+
+    if (!gst_bin_add(GST_BIN(transform->container), element))
+    {
+        GST_ERROR("Failed to add %s element to bin.", name);
+        g_free(name);
+        return false;
+    }
+
+    if (*last && !gst_element_link(*last, element))
+    {
+        GST_ERROR("Failed to link %s element.", name);
+        g_free(name);
+        return false;
+    }
+
+    GST_INFO("Created %s element %p.", name, element);
+    g_free(name);
+
+    if (!*first)
+        *first = element;
+
+    *last = element;
+    return true;
+}
+
 NTSTATUS wg_transform_create(void *args)
 {
     struct wg_transform_create_params *params = args;
     struct wg_encoded_format input_format = *params->input_format;
     struct wg_format output_format = *params->output_format;
-    GstCaps *src_caps, *sink_caps;
+    GstElement *first = NULL, *last = NULL, *element;
     struct wg_transform *transform;
+    GstCaps *src_caps, *sink_caps;
     GstPadTemplate *template;
+    int ret;
 
     if (!init_gstreamer())
         return E_FAIL;
@@ -137,6 +226,24 @@ NTSTATUS wg_transform_create(void *args)
     sink_caps = wg_format_to_caps(&output_format);
     assert(sink_caps);
 
+    transform->container = gst_bin_new("wg_transform");
+    assert(transform->container);
+
+    if (!(element = try_create_transform(src_caps, sink_caps)) ||
+            !transform_append_element(transform, element, &first, &last))
+        goto failed;
+
+    if (!(transform->their_sink = gst_element_get_static_pad(first, "sink")))
+    {
+        GST_ERROR("Failed to find target sink pad.");
+        goto failed;
+    }
+    if (!(transform->their_src = gst_element_get_static_pad(last, "src")))
+    {
+        GST_ERROR("Failed to find target src pad.");
+        goto failed;
+    }
+
     template = gst_pad_template_new("src", GST_PAD_SRC, GST_PAD_ALWAYS, src_caps);
     assert(template);
     transform->my_src = gst_pad_new_from_template(template, "src");
@@ -152,11 +259,40 @@ NTSTATUS wg_transform_create(void *args)
     gst_pad_set_element_private(transform->my_sink, transform);
     gst_pad_set_chain_function(transform->my_sink, transform_sink_chain_cb);
 
+    if ((ret = gst_pad_link(transform->my_src, transform->their_sink)) < 0)
+    {
+        GST_ERROR("Failed to link sink pads, error %d.", ret);
+        goto failed;
+    }
+    if ((ret = gst_pad_link(transform->their_src, transform->my_sink)) < 0)
+    {
+        GST_ERROR("Failed to link source pads, error %d.", ret);
+        goto failed;
+    }
+
+    if (!(ret = gst_pad_set_active(transform->my_sink, 1)))
+        GST_WARNING("Failed to activate my_sink.");
+    if (!(ret = gst_pad_set_active(transform->my_src, 1)))
+        GST_WARNING("Failed to activate my_src.");
+
+    gst_element_set_state(transform->container, GST_STATE_PAUSED);
+    ret = gst_element_get_state(transform->container, NULL, NULL, -1);
+    if (ret == GST_STATE_CHANGE_FAILURE)
+    {
+        GST_ERROR("Failed to play stream.\n");
+        goto failed;
+    }
+
     GST_INFO("Created winegstreamer transform %p.", transform);
     params->transform = transform;
 
+failed:
     gst_caps_unref(src_caps);
     gst_caps_unref(sink_caps);
 
-    return S_OK;
+    if (params->transform)
+        return S_OK;
+
+    wg_transform_destroy(transform);
+    return E_FAIL;
 }
-- 
2.34.1

