From 7a63ae845a7d1d630ae838ddebc25a20c54df889 Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?R=C3=A9mi=20Bernon?= <rbernon@codeweavers.com>
Date: Wed, 15 Dec 2021 10:25:48 +0100
Subject: [PATCH 45/88] winegstreamer: Implement unseekable stream support.

---
 dlls/winegstreamer/gst_private.h |   2 +
 dlls/winegstreamer/main.c        |  14 +++
 dlls/winegstreamer/unixlib.h     |   9 ++
 dlls/winegstreamer/wg_parser.c   | 197 ++++++++++++++++++++++++++++---
 4 files changed, 203 insertions(+), 19 deletions(-)

diff --git a/dlls/winegstreamer/gst_private.h b/dlls/winegstreamer/gst_private.h
index c156d87450c..6e7c53782c8 100644
--- a/dlls/winegstreamer/gst_private.h
+++ b/dlls/winegstreamer/gst_private.h
@@ -68,6 +68,8 @@ struct wg_parser *wg_parser_create(enum wg_parser_type type, bool unlimited_buff
 void wg_parser_destroy(struct wg_parser *parser);
 
 HRESULT wg_parser_connect(struct wg_parser *parser, uint64_t file_size);
+HRESULT wg_parser_connect_unseekable(struct wg_parser *parser, const struct wg_format *in_format,
+            uint32_t stream_count, const struct wg_format *out_formats);
 void wg_parser_disconnect(struct wg_parser *parser);
 
 void wg_parser_begin_flush(struct wg_parser *parser);
diff --git a/dlls/winegstreamer/main.c b/dlls/winegstreamer/main.c
index db05594f464..316becdbc97 100644
--- a/dlls/winegstreamer/main.c
+++ b/dlls/winegstreamer/main.c
@@ -91,6 +91,20 @@ HRESULT wg_parser_connect(struct wg_parser *parser, uint64_t file_size)
     return __wine_unix_call(unix_handle, unix_wg_parser_connect, &params);
 }
 
+HRESULT wg_parser_connect_unseekable(struct wg_parser *parser, const struct wg_format *in_format,
+        uint32_t stream_count, const struct wg_format *out_formats)
+{
+    struct wg_parser_connect_unseekable_params params =
+    {
+        .parser = parser,
+        .in_format = in_format,
+        .stream_count = stream_count,
+        .out_formats = out_formats,
+    };
+
+    return __wine_unix_call(unix_handle, unix_wg_parser_connect_unseekable, &params);
+}
+
 void wg_parser_disconnect(struct wg_parser *parser)
 {
     __wine_unix_call(unix_handle, unix_wg_parser_disconnect, parser);
diff --git a/dlls/winegstreamer/unixlib.h b/dlls/winegstreamer/unixlib.h
index f20ee5bb52f..e5d87716734 100644
--- a/dlls/winegstreamer/unixlib.h
+++ b/dlls/winegstreamer/unixlib.h
@@ -175,6 +175,14 @@ struct wg_parser_connect_params
     UINT64 file_size;
 };
 
+struct wg_parser_connect_unseekable_params
+{
+    struct wg_parser *parser;
+    const struct wg_format *in_format;
+    UINT32 stream_count;
+    const struct wg_format *out_formats;
+};
+
 struct wg_parser_get_next_read_offset_params
 {
     struct wg_parser *parser;
@@ -258,6 +266,7 @@ enum unix_funcs
     unix_wg_parser_destroy,
 
     unix_wg_parser_connect,
+    unix_wg_parser_connect_unseekable,
     unix_wg_parser_disconnect,
 
     unix_wg_parser_begin_flush,
diff --git a/dlls/winegstreamer/wg_parser.c b/dlls/winegstreamer/wg_parser.c
index 0b67a6836c4..ab850b899f3 100644
--- a/dlls/winegstreamer/wg_parser.c
+++ b/dlls/winegstreamer/wg_parser.c
@@ -61,7 +61,7 @@ struct wg_parser
     init_gst_cb init_gst;
 
     struct wg_parser_stream **streams;
-    unsigned int stream_count;
+    unsigned int stream_count, expected_stream_count;
 
     GstElement *container, *decodebin;
     GstBus *bus;
@@ -75,7 +75,7 @@ struct wg_parser
     pthread_mutex_t mutex;
 
     pthread_cond_t init_cond;
-    bool no_more_pads, has_duration, error, pull_mode;
+    bool no_more_pads, has_duration, error, pull_mode, seekable;
 
     pthread_cond_t read_cond, read_done_cond;
     struct
@@ -90,6 +90,7 @@ struct wg_parser
     bool flushing, sink_connected, draining;
 
     bool unlimited_buffering;
+    struct wg_format input_format;
 };
 
 struct wg_parser_stream
@@ -600,6 +601,9 @@ static NTSTATUS wg_parser_begin_flush(void *args)
     struct wg_parser *parser = args;
     unsigned int i;
 
+    if (!parser->seekable)
+        return S_OK;
+
     pthread_mutex_lock(&parser->mutex);
     parser->flushing = true;
     pthread_mutex_unlock(&parser->mutex);
@@ -617,6 +621,9 @@ static NTSTATUS wg_parser_end_flush(void *args)
 {
     struct wg_parser *parser = args;
 
+    if (!parser->seekable)
+        return S_OK;
+
     pthread_mutex_lock(&parser->mutex);
     parser->flushing = false;
     pthread_mutex_unlock(&parser->mutex);
@@ -711,7 +718,9 @@ static NTSTATUS wg_parser_stream_get_preferred_format(void *args)
 {
     const struct wg_parser_stream_get_preferred_format_params *params = args;
 
-    *params->format = params->stream->preferred_format;
+    if (params->stream->has_caps)
+        *params->format = params->stream->preferred_format;
+
     return S_OK;
 }
 
@@ -721,6 +730,9 @@ static NTSTATUS wg_parser_stream_enable(void *args)
     struct wg_parser_stream *stream = params->stream;
     const struct wg_format *format = params->format;
 
+    if (!stream->parser->seekable)
+        return S_OK;
+
     stream->current_format = *format;
     stream->enabled = true;
 
@@ -867,6 +879,9 @@ static NTSTATUS wg_parser_stream_seek(void *args)
     DWORD stop_flags = params->stop_flags;
     GstSeekFlags flags = 0;
 
+    if (!params->stream->parser->seekable)
+        return E_FAIL;
+
     if (start_flags & AM_SEEKING_SeekToKeyFrame)
         flags |= GST_SEEK_FLAG_KEY_UNIT;
     if (start_flags & AM_SEEKING_Segment)
@@ -1246,14 +1261,27 @@ static GstElement *create_element(const char *name, const char *plugin_set)
 static struct wg_parser_stream *create_stream(struct wg_parser *parser)
 {
     struct wg_parser_stream *stream, **new_array;
+    unsigned int i;
     char pad_name[19];
 
-    if (!(new_array = realloc(parser->streams, (parser->stream_count + 1) * sizeof(*parser->streams))))
-        return NULL;
-    parser->streams = new_array;
+    for (i = 0; i < parser->expected_stream_count; i++)
+    {
+        if (!parser->streams[i]->parser)
+        {
+            stream = parser->streams[i];
+            break;
+        }
+    }
 
-    if (!(stream = calloc(1, sizeof(*stream))))
-        return NULL;
+    if (i == parser->expected_stream_count)
+    {
+        if (!(new_array = realloc(parser->streams, (parser->stream_count + 1) * sizeof(*parser->streams))))
+            return NULL;
+        parser->streams = new_array;
+
+        if (!(stream = calloc(1, sizeof(*stream))))
+            return NULL;
+    }
 
     gst_segment_init(&stream->segment, GST_FORMAT_UNDEFINED);
 
@@ -1575,7 +1603,7 @@ static gboolean src_query_cb(GstPad *pad, GstObject *parent, GstQuery *query)
                 gst_query_set_duration(query, GST_FORMAT_PERCENT, GST_FORMAT_PERCENT_MAX);
                 return TRUE;
             }
-            else if (format == GST_FORMAT_BYTES)
+            else if (format == GST_FORMAT_BYTES && parser->seekable)
             {
                 gst_query_set_duration(query, GST_FORMAT_BYTES, parser->file_size);
                 return TRUE;
@@ -1589,15 +1617,42 @@ static gboolean src_query_cb(GstPad *pad, GstObject *parent, GstQuery *query)
                 GST_WARNING("Cannot seek using format \"%s\".", gst_format_get_name(format));
                 return FALSE;
             }
+            if (!parser->seekable)
+                return FALSE;
             gst_query_set_seeking(query, GST_FORMAT_BYTES, 1, 0, parser->file_size);
             return TRUE;
 
         case GST_QUERY_SCHEDULING:
-            gst_query_set_scheduling(query, GST_SCHEDULING_FLAG_SEEKABLE, 1, -1, 0);
+            gst_query_set_scheduling(query, parser->seekable ? GST_SCHEDULING_FLAG_SEEKABLE : GST_SCHEDULING_FLAG_SEQUENTIAL, 1, -1, 0);
             gst_query_add_scheduling_mode(query, GST_PAD_MODE_PUSH);
             gst_query_add_scheduling_mode(query, GST_PAD_MODE_PULL);
             return TRUE;
 
+        case GST_QUERY_CAPS:
+        {
+            GstCaps *caps, *filter, *temp;
+
+            gst_query_parse_caps(query, &filter);
+
+            if (parser->input_format.major_type)
+                caps = wg_format_to_caps(&parser->input_format);
+            else
+                caps = gst_caps_new_any();
+            if (!caps)
+                return FALSE;
+
+            if (filter)
+            {
+                temp = gst_caps_intersect(caps, filter);
+                gst_caps_unref(caps);
+                caps = temp;
+            }
+
+            gst_query_set_caps_result(query, caps);
+            gst_caps_unref(caps);
+            return TRUE;
+        }
+
         default:
             GST_WARNING("Unhandled query type %s.", GST_QUERY_TYPE_NAME(query));
             return FALSE;
@@ -1607,16 +1662,31 @@ static gboolean src_query_cb(GstPad *pad, GstObject *parent, GstQuery *query)
 static void *push_data(void *arg)
 {
     struct wg_parser *parser = arg;
+    ULONG alloc_size = 16384;
+    GstCaps *caps = NULL;
     GstSegment *segment;
     GstBuffer *buffer;
+    unsigned int i;
     guint max_size;
 
     GST_DEBUG("Starting push thread.");
 
+    if (parser->input_format.major_type)
+        caps = wg_format_to_caps(&parser->input_format);
+
+    if (parser->input_format.major_type == WG_MAJOR_TYPE_VIDEO)
+    {
+        GstVideoInfo info;
+        gst_video_info_from_caps(&info, caps);
+        alloc_size = info.size;
+    }
+
     max_size = parser->stop_offset ? parser->stop_offset : parser->file_size;
 
     gst_pad_push_event(parser->my_src, gst_event_new_stream_start("wg_stream"));
 
+    if (caps) gst_pad_push_event(parser->my_src, gst_event_new_caps(caps));
+
     segment = gst_segment_new();
     gst_segment_init(segment, GST_FORMAT_BYTES);
     gst_pad_push_event(parser->my_src, gst_event_new_segment(segment));
@@ -1626,13 +1696,47 @@ static void *push_data(void *arg)
         ULONG size;
         int ret;
 
-        if (parser->next_offset >= max_size)
+        if (parser->seekable && parser->next_offset >= max_size)
             break;
-        size = min(16384, max_size - parser->next_offset);
+        size = parser->seekable ? min(alloc_size, max_size - parser->next_offset) : alloc_size;
 
         buffer = NULL;
-        if ((ret = src_getrange_cb(parser->my_src, NULL, parser->next_offset, size, &buffer)) < 0)
+        if ((ret = src_getrange_cb(parser->my_src, NULL, parser->next_offset, size, &buffer) < 0))
         {
+            /* When we are in unseekable push mode, the pushing pad is responsible for handling flushing.  */
+            if (!parser->seekable && ret == GST_FLOW_FLUSHING)
+            {
+                gst_pad_push_event(parser->my_src, gst_event_new_seek(1.0f,
+                    GST_FORMAT_BYTES, GST_SEEK_FLAG_FLUSH, GST_SEEK_TYPE_NONE, 0, GST_SEEK_TYPE_NONE, 0));
+                continue;
+            }
+
+            if (!parser->seekable && ret == GST_FLOW_EOS)
+            {
+                gst_pad_push_event(parser->my_src, gst_event_new_eos());
+                pthread_mutex_lock(&parser->mutex);
+                for (i = 0; i < parser->stream_count; i++)
+                {
+                    if (!parser->streams[i]->enabled)
+                        continue;
+                    while (!parser->streams[i]->flushing && !parser->streams[i]->eos)
+                        pthread_cond_wait(&parser->streams[i]->event_empty_cond, &parser->mutex);
+                    parser->streams[i]->eos = false;
+                }
+
+                if (parser->flushing)
+                {
+                    pthread_mutex_unlock(&parser->mutex);
+                    continue;
+                }
+                pthread_mutex_unlock(&parser->mutex);
+
+                segment = gst_segment_new();
+                gst_segment_init(segment, GST_FORMAT_BYTES);
+                gst_pad_push_event(parser->my_src, gst_event_new_segment(segment));
+                continue;
+            }
+
             GST_ERROR("Failed to read data, ret %s.", gst_flow_get_name(ret));
             break;
         }
@@ -1827,16 +1931,11 @@ static gboolean src_event_cb(GstPad *pad, GstObject *parent, GstEvent *event)
     return ret;
 }
 
-static NTSTATUS wg_parser_connect(void *args)
+static HRESULT wg_parser_connect_inner(struct wg_parser *parser)
 {
     GstStaticPadTemplate src_template = GST_STATIC_PAD_TEMPLATE("wine_src",
             GST_PAD_SRC, GST_PAD_ALWAYS, GST_STATIC_CAPS_ANY);
-    const struct wg_parser_connect_params *params = args;
-    struct wg_parser *parser = params->parser;
-    unsigned int i;
-    int ret;
 
-    parser->file_size = params->file_size;
     parser->sink_connected = true;
 
     if (!parser->bus)
@@ -1859,6 +1958,23 @@ static NTSTATUS wg_parser_connect(void *args)
     parser->next_pull_offset = 0;
     parser->error = false;
 
+    return S_OK;
+}
+
+static NTSTATUS wg_parser_connect(void *args)
+{
+    const struct wg_parser_connect_params *params = args;
+    struct wg_parser *parser = params->parser;
+    unsigned int i;
+    HRESULT hr;
+    int ret;
+
+    parser->seekable = true;
+    parser->file_size = params->file_size;
+
+    if ((hr = wg_parser_connect_inner(parser)))
+        return hr;
+
     if (!parser->init_gst(parser))
         goto out;
 
@@ -1988,6 +2104,45 @@ out:
     return E_FAIL;
 }
 
+static NTSTATUS wg_parser_connect_unseekable(void *args)
+{
+    const struct wg_parser_connect_unseekable_params *params = args;
+    const struct wg_format *out_formats = params->out_formats;
+    const struct wg_format *in_format = params->in_format;
+    uint32_t stream_count = params->stream_count;
+    struct wg_parser *parser = params->parser;
+    unsigned int i;
+    HRESULT hr;
+
+    parser->seekable = false;
+    parser->flushing = false;
+    /* since typefind is not available here, we must have an input_format */
+    parser->input_format = *in_format;
+
+    if ((hr = wg_parser_connect_inner(parser)))
+        return hr;
+
+    parser->stop_offset = -1;
+
+    parser->expected_stream_count = stream_count;
+    parser->streams = calloc(stream_count, sizeof(*parser->streams));
+
+    for (i = 0; i < stream_count; i++)
+    {
+        parser->streams[i] = calloc(1, sizeof(*parser->streams[i]));
+        parser->streams[i]->current_format = out_formats[i];
+        parser->streams[i]->enabled = true;
+    }
+
+    if (!parser->init_gst(parser))
+        return E_FAIL;
+
+    if (parser->stream_count < parser->expected_stream_count)
+        return E_FAIL;
+
+    return S_OK;
+}
+
 static NTSTATUS wg_parser_disconnect(void *args)
 {
     struct wg_parser *parser = args;
@@ -2037,6 +2192,9 @@ static BOOL decodebin_parser_init_gst(struct wg_parser *parser)
     if (!(element = create_element("decodebin", "base")))
         return FALSE;
 
+    if (parser->input_format.major_type)
+        g_object_set(G_OBJECT(element), "sink-caps", wg_format_to_caps(&parser->input_format), NULL);
+
     gst_bin_add(GST_BIN(parser->container), element);
     parser->decodebin = element;
 
@@ -2262,6 +2420,7 @@ const unixlib_entry_t __wine_unix_call_funcs[] =
     X(wg_parser_destroy),
 
     X(wg_parser_connect),
+    X(wg_parser_connect_unseekable),
     X(wg_parser_disconnect),
 
     X(wg_parser_begin_flush),
-- 
2.34.1

