diff --git a/dlls/ntdll/unix/file.c b/dlls/ntdll/unix/file.c
index e2e2d0feaeb..cc6c8b6a737 100644
--- a/dlls/ntdll/unix/file.c
+++ b/dlls/ntdll/unix/file.c
@@ -177,9 +177,6 @@ typedef struct
 
 #define IS_SEPARATOR(ch)   ((ch) == '\\' || (ch) == '/')
 
-#define INVALID_NT_CHARS   '*','?','<','>','|','"'
-#define INVALID_DOS_CHARS  INVALID_NT_CHARS,'+','=',',',';','[',']',' ','\345'
-
 #define MAX_DIR_ENTRY_LEN 255  /* max length of a directory entry in chars */
 
 #define MAX_IGNORED_FILES 4
@@ -426,9 +423,38 @@ static int mkdir_p( int dirfd, const cha
 /* check if a given Unicode char is OK in a DOS short name */
 static inline BOOL is_invalid_dos_char( WCHAR ch )
 {
-    static const WCHAR invalid_chars[] = { INVALID_DOS_CHARS,'~','.',0 };
-    if (ch > 0x7f) return TRUE;
-    return wcschr( invalid_chars, ch ) != NULL;
+    static const char is_invalid[0x7f] =
+    {
+        ['*'] = 1, ['?'] = 1, ['<'] = 1, ['>'] = 1, ['|'] = 1, ['"'] = 1, ['+'] = 1, ['='] = 1,
+        [','] = 1, [';'] = 1, ['['] = 1, [']'] = 1, [' '] = 1, ['~'] = 1, ['.'] = 1,
+    };
+    return ch <= 0x7f ? is_invalid[ch] : TRUE;
+}
+
+static inline BOOL is_invalid_8dot3_char( WCHAR ch )
+{
+    static const char is_invalid[0x7f] =
+    {
+        ['*'] = 1, ['?'] = 1, ['<'] = 1, ['>'] = 1, ['|'] = 1, ['"'] = 1, ['+'] = 1, ['='] = 1,
+        [','] = 1, [';'] = 1, ['['] = 1, [']'] = 1, [' '] = 1, [':'] = 1, ['/'] = 1, ['\\'] = 1,
+    };
+    return ch <= 0x7f ? is_invalid[ch] : TRUE;
+}
+
+static inline BOOL is_invalid_nt_char( WCHAR ch )
+{
+    static const char is_invalid[0x7f] =
+    {
+        1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
+        ['*'] = 1, ['?'] = 1, ['<'] = 1, ['>'] = 1, ['|'] = 1, ['"'] = 1,
+    };
+    return ch <= 0x7f ? is_invalid[ch] : FALSE;
+}
+
+static inline BOOL is_invalid_unix_char( WCHAR ch )
+{
+    if (ch == '/') return TRUE;
+    return is_invalid_nt_char( ch );
 }
 
 /* check if the device can be a mounted volume */
@@ -1495,29 +1521,31 @@ static ULONG hash_short_file_name( const
 {
     static const char hash_chars[32] = "ABCDEFGHIJKLMNOPQRSTUVWXYZ012345";
 
+    UINT64 hash_name[(MAX_DIR_ENTRY_LEN + 1) / 4];
+    WCHAR *hash_end = (WCHAR *)hash_name + length;
     LPCWSTR p, ext, end = name + length;
+    UINT64 hash, *tmp;
     LPWSTR dst;
-    unsigned short hash;
     int i;
 
     /* Compute the hash code of the file name */
     /* If you know something about hash functions, feel free to */
     /* insert a better algorithm here... */
-    if (!is_case_sensitive)
-    {
-        for (p = name, hash = 0xbeef; p < end - 1; p++)
-            hash = (hash<<3) ^ (hash>>5) ^ towlower(*p) ^ (towlower(p[1]) << 8);
-        hash = (hash<<3) ^ (hash>>5) ^ towlower(*p); /* Last character */
-    }
-    else
-    {
-        for (p = name, hash = 0xbeef; p < end - 1; p++)
-            hash = (hash << 3) ^ (hash >> 5) ^ *p ^ (p[1] << 8);
-        hash = (hash << 3) ^ (hash >> 5) ^ *p;  /* Last character */
-    }
+    if (is_case_sensitive)
+        memcpy( hash_name, name, length );
+    else for (p = name, dst = (WCHAR *)hash_name; p < end; p++, dst++)
+        *dst = towlower(*p);
+
+    memset( hash_end, 0, min( hash_name + ARRAY_SIZE(hash_name) - (UINT64 *)hash_end, 15 ) );
+    for (tmp = (UINT64 *)hash_name, hash = 0xbeef; tmp < (UINT64 *)(hash_end - 1); tmp++)
+        hash = (hash << 13) ^ (hash >> 19) ^ *tmp ^ (tmp[1] << 32);
+    hash = (hash << 13) ^ (hash >> 19) ^ *tmp;
+    hash = (hash >> 32) ^ (hash & 0xffffffff);
+    hash = (hash >> 16) ^ (hash & 0xffff);
 
     /* Find last dot for start of the extension */
-    for (p = name + 1, ext = NULL; p < end - 1; p++) if (*p == '.') ext = p;
+    for (ext = end - 2; ext > name; ext--) if (*ext == '.') break;
+    if (ext == name) ext = NULL;
 
     /* Copy first 4 chars, replacing invalid chars with '_' */
     for (i = 4, p = name, dst = buffer; i > 0; i--, p++)
@@ -1634,7 +1662,6 @@ static BOOLEAN match_filename( const WCH
  */
 static BOOLEAN is_legal_8dot3_name( const WCHAR *name, int len )
 {
-    static const WCHAR invalid_chars[] = { INVALID_DOS_CHARS,':','/','\\',0 };
     int i, dot = -1;
 
     if (len > 12) return FALSE;
@@ -1644,8 +1671,7 @@ static BOOLEAN is_legal_8dot3_name( cons
 
     for (i = 0; i < len; i++)
     {
-        if (name[i] > 0x7f) return FALSE;
-        if (wcschr( invalid_chars, name[i] )) return FALSE;
+        if (is_invalid_8dot3_char( name[i] )) return FALSE;
         if (name[i] == '.')
         {
             if (dot != -1) return FALSE;
@@ -4238,7 +4264,6 @@ static NTSTATUS lookup_unix_name( FILE_O
                                   char **buffer, int unix_len, int pos, UINT disposition,
                                   BOOL is_unix )
 {
-    static const WCHAR invalid_charsW[] = { INVALID_NT_CHARS, '/', 0 };
     const WCHAR *fullname = fileobj->FileName.Buffer;
     NTSTATUS status;
     int ret;
@@ -4266,7 +4291,7 @@ static NTSTATUS lookup_unix_name( FILE_O
         {
             if (!*ptr) return STATUS_OBJECT_NAME_INVALID;
             if (is_unix) continue;
-            if (*ptr < 32 || wcschr( invalid_charsW, *ptr )) return STATUS_OBJECT_NAME_INVALID;
+            if (is_invalid_unix_char( *ptr )) return STATUS_OBJECT_NAME_INVALID;
         }
     }
 
@@ -4384,7 +4409,6 @@ static NTSTATUS nt_to_unix_file_name_no_
                                               UINT disposition )
 {
     static const WCHAR unixW[] = {'u','n','i','x'};
-    static const WCHAR invalid_charsW[] = { INVALID_NT_CHARS, 0 };
     const UNICODE_STRING *nameW = &fileobj->FileName;
     NTSTATUS status = STATUS_SUCCESS;
     const WCHAR *name;
@@ -4411,8 +4435,7 @@ static NTSTATUS nt_to_unix_file_name_no_
     for (pos = 0; pos < name_len && pos <= MAX_DIR_ENTRY_LEN; pos++)
     {
         if (name[pos] == '\\') break;
-        if (name[pos] < 32 || wcschr( invalid_charsW, name[pos] ))
-            return STATUS_OBJECT_NAME_INVALID;
+        if (is_invalid_nt_char( name[pos] )) return STATUS_OBJECT_NAME_INVALID;
         prefix[pos] = (name[pos] >= 'A' && name[pos] <= 'Z') ? name[pos] + 'a' - 'A' : name[pos];
     }
     if (pos > MAX_DIR_ENTRY_LEN) return STATUS_OBJECT_NAME_INVALID;
