From 5c6859860b4121848546dd1e86123a330195b178 Mon Sep 17 00:00:00 2001
From: Torge Matthies <openglfreak@googlemail.com>
Date: Sat, 26 Nov 2022 21:24:03 +0100
Subject: [PATCH 1/2] kernelbase: Optimize free_sortkey_state.

---
 dlls/kernelbase/locale.c | 22 ++++++++++++++--------
 1 file changed, 14 insertions(+), 8 deletions(-)

diff --git a/dlls/kernelbase/locale.c b/dlls/kernelbase/locale.c
index 11111111111..11111111111 100644
--- a/dlls/kernelbase/locale.c
+++ b/dlls/kernelbase/locale.c
@@ -3640,16 +3640,22 @@ static BOOL remove_unneeded_weights( const struct sortguid *sortid, struct sortk
     return TRUE;
 }
 
+static inline void free_buff( void *buf )
+{
+    if (buf)
+        RtlFreeHeap( GetProcessHeap(), 0, buf );
+}
+
 static void free_sortkey_state( struct sortkey_state *s )
 {
-    RtlFreeHeap( GetProcessHeap(), 0, s->key_primary.new_buf );
-    RtlFreeHeap( GetProcessHeap(), 0, s->key_diacritic.new_buf );
-    RtlFreeHeap( GetProcessHeap(), 0, s->key_case.new_buf );
-    RtlFreeHeap( GetProcessHeap(), 0, s->key_special.new_buf );
-    RtlFreeHeap( GetProcessHeap(), 0, s->key_extra[0].new_buf );
-    RtlFreeHeap( GetProcessHeap(), 0, s->key_extra[1].new_buf );
-    RtlFreeHeap( GetProcessHeap(), 0, s->key_extra[2].new_buf );
-    RtlFreeHeap( GetProcessHeap(), 0, s->key_extra[3].new_buf );
+    free_buff( s->key_primary.new_buf );
+    free_buff( s->key_diacritic.new_buf );
+    free_buff( s->key_case.new_buf );
+    free_buff( s->key_special.new_buf );
+    free_buff( s->key_extra[0].new_buf );
+    free_buff( s->key_extra[1].new_buf );
+    free_buff( s->key_extra[2].new_buf );
+    free_buff( s->key_extra[3].new_buf );
 }
 
 static int append_weights( const struct sortguid *sortid, DWORD flags,
-- 
2.40.0

From de08512c9c50983279d1979542c51db1bf031bda Mon Sep 17 00:00:00 2001
From: Torge Matthies <openglfreak@googlemail.com>
Date: Sat, 26 Nov 2022 21:44:45 +0100
Subject: [PATCH 2/2] kernelbase: Increase buffer size in compare_string.

---
 dlls/kernelbase/locale.c | 4 ++--
 1 file changed, 2 insertions(+), 2 deletions(-)

diff --git a/dlls/kernelbase/locale.c b/dlls/kernelbase/locale.c
index 11111111111..11111111111 100644
--- a/dlls/kernelbase/locale.c
+++ b/dlls/kernelbase/locale.c
@@ -3829,8 +3829,8 @@ static int compare_string( const struct sortguid *sortid, DWORD flags,
 {
     struct sortkey_state s1;
     struct sortkey_state s2;
-    BYTE primary1[32];
-    BYTE primary2[32];
+    BYTE primary1[256];
+    BYTE primary2[256];
     int i, ret, len, pos1 = 0, pos2 = 0;
     BOOL have_extra1, have_extra2;
     BYTE case_mask = 0x3f;
-- 
2.40.0

From 08fba3115ad459fe0566c044f802672cfd2a4051 Mon Sep 17 00:00:00 2001
From: Torge Matthies <tmatthies@codeweavers.com>
Date: Thu, 8 Dec 2022 20:33:30 +0100
Subject: [PATCH 1/5] include: Add SYSCALL calling convention.

---
 include/windef.h | 2 ++
 1 file changed, 2 insertions(+)

diff --git a/include/windef.h b/include/windef.h
index 11111111111..11111111111 100644
--- a/include/windef.h
+++ b/include/windef.h
@@ -200,6 +200,8 @@ extern "C" {
 #define APIENTRY    WINAPI
 #define CONST       __ONLY_IN_WINELIB(const)
 
+#define SYSCALL WINAPI
+
 /* Misc. constants. */
 
 #ifndef NULL
-- 
2.40.0

From bcc0971f9925d42365ef9e5a8c8ee7f482086775 Mon Sep 17 00:00:00 2001
From: Torge Matthies <tmatthies@codeweavers.com>
Date: Thu, 8 Dec 2022 20:39:37 +0100
Subject: [PATCH 2/5] ntdll: Make syscalls use the SYSCALL calling convention.

---
 dlls/ntdll/unix/debug.c         |   6 +-
 dlls/ntdll/unix/env.c           |  14 +-
 dlls/ntdll/unix/file.c          | 144 +++++-----
 dlls/ntdll/unix/process.c       |  36 +--
 dlls/ntdll/unix/registry.c      |  92 +++---
 dlls/ntdll/unix/security.c      |  72 ++---
 dlls/ntdll/unix/server.c        |  12 +-
 dlls/ntdll/unix/signal_arm.c    |   8 +-
 dlls/ntdll/unix/signal_arm64.c  |   8 +-
 dlls/ntdll/unix/signal_i386.c   |   8 +-
 dlls/ntdll/unix/signal_x86_64.c |   8 +-
 dlls/ntdll/unix/sync.c          | 232 ++++++++--------
 dlls/ntdll/unix/system.c        |  48 ++--
 dlls/ntdll/unix/thread.c        |  48 ++--
 dlls/ntdll/unix/virtual.c       |  98 +++----
 include/winternl.h              | 478 ++++++++++++++++----------------
 16 files changed, 656 insertions(+), 656 deletions(-)

diff --git a/dlls/ntdll/unix/debug.c b/dlls/ntdll/unix/debug.c
index 11111111111..11111111111 100644
--- a/dlls/ntdll/unix/debug.c
+++ b/dlls/ntdll/unix/debug.c
@@ -365,8 +365,8 @@ void dbg_init(void)
 /***********************************************************************
  *              NtTraceControl  (NTDLL.@)
  */
-NTSTATUS WINAPI NtTraceControl( ULONG code, void *inbuf, ULONG inbuf_len,
-                                void *outbuf, ULONG outbuf_len, ULONG *size )
+NTSTATUS SYSCALL NtTraceControl( ULONG code, void *inbuf, ULONG inbuf_len,
+                                 void *outbuf, ULONG outbuf_len, ULONG *size )
 {
     FIXME( "code %u, inbuf %p, inbuf_len %u, outbuf %p, outbuf_len %u, size %p\n",
            (int)code, inbuf, (int)inbuf_len, outbuf, (int)outbuf_len, size );
@@ -377,7 +377,7 @@ NTSTATUS WINAPI NtTraceControl( ULONG code, void *inbuf, ULONG inbuf_len,
 /***********************************************************************
  *              NtSetDebugFilterState  (NTDLL.@)
  */
-NTSTATUS WINAPI NtSetDebugFilterState( ULONG component_id, ULONG level, BOOLEAN state )
+NTSTATUS SYSCALL NtSetDebugFilterState( ULONG component_id, ULONG level, BOOLEAN state )
 {
     FIXME( "component_id %#x, level %u, state %#x stub.\n", (int)component_id, (int)level, state );
 
diff --git a/dlls/ntdll/unix/env.c b/dlls/ntdll/unix/env.c
index 11111111111..11111111111 100644
--- a/dlls/ntdll/unix/env.c
+++ b/dlls/ntdll/unix/env.c
@@ -2155,7 +2155,7 @@ void *create_startup_info( const UNICODE_STRING *nt_image, const RTL_USER_PROCES
 /**************************************************************************
  *      NtGetNlsSectionPtr  (NTDLL.@)
  */
-NTSTATUS WINAPI NtGetNlsSectionPtr( ULONG type, ULONG id, void *unknown, void **ptr, SIZE_T *size )
+NTSTATUS SYSCALL NtGetNlsSectionPtr( ULONG type, ULONG id, void *unknown, void **ptr, SIZE_T *size )
 {
     static const WCHAR sortdirW[] = {'\\','?','?','\\','C',':','\\','w','i','n','d','o','w','s','\\',
                                      'g','l','o','b','a','l','i','z','a','t','i','o','n','\\',
@@ -2195,7 +2195,7 @@ NTSTATUS WINAPI NtGetNlsSectionPtr( ULONG type, ULONG id, void *unknown, void **
 /**************************************************************************
  *      NtInitializeNlsFiles  (NTDLL.@)
  */
-NTSTATUS WINAPI NtInitializeNlsFiles( void **ptr, LCID *lcid, LARGE_INTEGER *size )
+NTSTATUS SYSCALL NtInitializeNlsFiles( void **ptr, LCID *lcid, LARGE_INTEGER *size )
 {
     const char *dir = build_dir ? build_dir : data_dir;
     char *path;
@@ -2226,7 +2226,7 @@ NTSTATUS WINAPI NtInitializeNlsFiles( void **ptr, LCID *lcid, LARGE_INTEGER *siz
 /**********************************************************************
  *      NtQueryDefaultLocale  (NTDLL.@)
  */
-NTSTATUS WINAPI NtQueryDefaultLocale( BOOLEAN user, LCID *lcid )
+NTSTATUS SYSCALL NtQueryDefaultLocale( BOOLEAN user, LCID *lcid )
 {
     *lcid = user ? user_lcid : system_lcid;
     return STATUS_SUCCESS;
@@ -2236,7 +2236,7 @@ NTSTATUS WINAPI NtQueryDefaultLocale( BOOLEAN user, LCID *lcid )
 /**********************************************************************
  *      NtSetDefaultLocale  (NTDLL.@)
  */
-NTSTATUS WINAPI NtSetDefaultLocale( BOOLEAN user, LCID lcid )
+NTSTATUS SYSCALL NtSetDefaultLocale( BOOLEAN user, LCID lcid )
 {
     if (user) user_lcid = lcid;
     else system_lcid = lcid;
@@ -2247,7 +2247,7 @@ NTSTATUS WINAPI NtSetDefaultLocale( BOOLEAN user, LCID lcid )
 /**********************************************************************
  *      NtQueryDefaultUILanguage  (NTDLL.@)
  */
-NTSTATUS WINAPI NtQueryDefaultUILanguage( LANGID *lang )
+NTSTATUS SYSCALL NtQueryDefaultUILanguage( LANGID *lang )
 {
     *lang = user_ui_language;
     return STATUS_SUCCESS;
@@ -2257,7 +2257,7 @@ NTSTATUS WINAPI NtQueryDefaultUILanguage( LANGID *lang )
 /**********************************************************************
  *      NtSetDefaultUILanguage  (NTDLL.@)
  */
-NTSTATUS WINAPI NtSetDefaultUILanguage( LANGID lang )
+NTSTATUS SYSCALL NtSetDefaultUILanguage( LANGID lang )
 {
     user_ui_language = lang;
     return STATUS_SUCCESS;
@@ -2267,7 +2267,7 @@ NTSTATUS WINAPI NtSetDefaultUILanguage( LANGID lang )
 /**********************************************************************
  *      NtQueryInstallUILanguage  (NTDLL.@)
  */
-NTSTATUS WINAPI NtQueryInstallUILanguage( LANGID *lang )
+NTSTATUS SYSCALL NtQueryInstallUILanguage( LANGID *lang )
 {
     *lang = LANGIDFROMLCID(system_lcid); /* there is no separate call to set it */
     return STATUS_SUCCESS;
diff --git a/dlls/ntdll/unix/file.c b/dlls/ntdll/unix/file.c
index 11111111111..11111111111 100644
--- a/dlls/ntdll/unix/file.c
+++ b/dlls/ntdll/unix/file.c
@@ -2858,10 +2858,10 @@ static unsigned int get_cached_dir_data( HANDLE handle, struct dir_data **data_r
 /******************************************************************************
  *              NtQueryDirectoryFile   (NTDLL.@)
  */
-NTSTATUS WINAPI NtQueryDirectoryFile( HANDLE handle, HANDLE event, PIO_APC_ROUTINE apc_routine,
-                                      void *apc_context, IO_STATUS_BLOCK *io, void *buffer, ULONG length,
-                                      FILE_INFORMATION_CLASS info_class, BOOLEAN single_entry,
-                                      UNICODE_STRING *mask, BOOLEAN restart_scan )
+NTSTATUS SYSCALL NtQueryDirectoryFile( HANDLE handle, HANDLE event, PIO_APC_ROUTINE apc_routine,
+                                       void *apc_context, IO_STATUS_BLOCK *io, void *buffer, ULONG length,
+                                       FILE_INFORMATION_CLASS info_class, BOOLEAN single_entry,
+                                       UNICODE_STRING *mask, BOOLEAN restart_scan )
 {
     int cwd, fd, needs_close;
     enum server_fd_type type;
@@ -4763,8 +4763,8 @@ NTSTATUS nt_to_unix_file_name( const OBJECT_ATTRIBUTES *attr, char **name_ret, U
  * element doesn't have to exist; in that case STATUS_NO_SUCH_FILE is
  * returned, but the unix name is still filled in properly.
  */
-NTSTATUS WINAPI wine_nt_to_unix_file_name( const OBJECT_ATTRIBUTES *attr, char *nameA, ULONG *size,
-                                          UINT disposition )
+NTSTATUS SYSCALL wine_nt_to_unix_file_name( const OBJECT_ATTRIBUTES *attr, char *nameA, ULONG *size,
+                                           UINT disposition )
 {
     char *buffer = NULL;
     NTSTATUS status;
@@ -4918,7 +4918,7 @@ NTSTATUS unix_to_nt_file_name( const char *name, WCHAR **nt )
 /******************************************************************
  *           wine_unix_to_nt_file_name
  */
-NTSTATUS WINAPI wine_unix_to_nt_file_name( const char *name, WCHAR *buffer, ULONG *size )
+NTSTATUS SYSCALL wine_unix_to_nt_file_name( const char *name, WCHAR *buffer, ULONG *size )
 {
     WCHAR *nt_name = NULL;
     NTSTATUS status;
@@ -5122,10 +5122,10 @@ NTSTATUS open_unix_file( HANDLE *handle, const char *unix_name, ACCESS_MASK acce
 /******************************************************************************
  *              NtCreateFile   (NTDLL.@)
  */
-NTSTATUS WINAPI NtCreateFile( HANDLE *handle, ACCESS_MASK access, OBJECT_ATTRIBUTES *attr,
-                              IO_STATUS_BLOCK *io, LARGE_INTEGER *alloc_size,
-                              ULONG attributes, ULONG sharing, ULONG disposition,
-                              ULONG options, void *ea_buffer, ULONG ea_length )
+NTSTATUS SYSCALL NtCreateFile( HANDLE *handle, ACCESS_MASK access, OBJECT_ATTRIBUTES *attr,
+                               IO_STATUS_BLOCK *io, LARGE_INTEGER *alloc_size,
+                               ULONG attributes, ULONG sharing, ULONG disposition,
+                               ULONG options, void *ea_buffer, ULONG ea_length )
 {
     OBJECT_ATTRIBUTES new_attr;
     UNICODE_STRING nt_name;
@@ -5283,8 +5283,8 @@ NTSTATUS WINAPI NtCreateFile( HANDLE *handle, ACCESS_MASK access, OBJECT_ATTRIBU
 /******************************************************************************
  *              NtOpenFile   (NTDLL.@)
  */
-NTSTATUS WINAPI NtOpenFile( HANDLE *handle, ACCESS_MASK access, OBJECT_ATTRIBUTES *attr,
-                            IO_STATUS_BLOCK *io, ULONG sharing, ULONG options )
+NTSTATUS SYSCALL NtOpenFile( HANDLE *handle, ACCESS_MASK access, OBJECT_ATTRIBUTES *attr,
+                             IO_STATUS_BLOCK *io, ULONG sharing, ULONG options )
 {
     return NtCreateFile( handle, access, attr, io, NULL, 0, sharing, FILE_OPEN, options, NULL, 0 );
 }
@@ -5293,9 +5293,9 @@ NTSTATUS WINAPI NtOpenFile( HANDLE *handle, ACCESS_MASK access, OBJECT_ATTRIBUTE
 /******************************************************************************
  *		NtCreateMailslotFile    (NTDLL.@)
  */
-NTSTATUS WINAPI NtCreateMailslotFile( HANDLE *handle, ULONG access, OBJECT_ATTRIBUTES *attr,
-                                      IO_STATUS_BLOCK *io, ULONG options, ULONG quota, ULONG msg_size,
-                                      LARGE_INTEGER *timeout )
+NTSTATUS SYSCALL NtCreateMailslotFile( HANDLE *handle, ULONG access, OBJECT_ATTRIBUTES *attr,
+                                       IO_STATUS_BLOCK *io, ULONG options, ULONG quota, ULONG msg_size,
+                                       LARGE_INTEGER *timeout )
 {
     unsigned int status;
     data_size_t len;
@@ -5326,11 +5326,11 @@ NTSTATUS WINAPI NtCreateMailslotFile( HANDLE *handle, ULONG access, OBJECT_ATTRI
 /******************************************************************
  *		NtCreateNamedPipeFile    (NTDLL.@)
  */
-NTSTATUS WINAPI NtCreateNamedPipeFile( HANDLE *handle, ULONG access, OBJECT_ATTRIBUTES *attr,
-                                       IO_STATUS_BLOCK *io, ULONG sharing, ULONG dispo, ULONG options,
-                                       ULONG pipe_type, ULONG read_mode, ULONG completion_mode,
-                                       ULONG max_inst, ULONG inbound_quota, ULONG outbound_quota,
-                                       LARGE_INTEGER *timeout )
+NTSTATUS SYSCALL NtCreateNamedPipeFile( HANDLE *handle, ULONG access, OBJECT_ATTRIBUTES *attr,
+                                        IO_STATUS_BLOCK *io, ULONG sharing, ULONG dispo, ULONG options,
+                                        ULONG pipe_type, ULONG read_mode, ULONG completion_mode,
+                                        ULONG max_inst, ULONG inbound_quota, ULONG outbound_quota,
+                                        LARGE_INTEGER *timeout )
 {
     unsigned int status;
     data_size_t len;
@@ -5380,7 +5380,7 @@ NTSTATUS WINAPI NtCreateNamedPipeFile( HANDLE *handle, ULONG access, OBJECT_ATTR
 /******************************************************************
  *              NtDeleteFile   (NTDLL.@)
  */
-NTSTATUS WINAPI NtDeleteFile( OBJECT_ATTRIBUTES *attr )
+NTSTATUS SYSCALL NtDeleteFile( OBJECT_ATTRIBUTES *attr )
 {
     HANDLE handle;
     NTSTATUS status;
@@ -5405,8 +5405,8 @@ NTSTATUS WINAPI NtDeleteFile( OBJECT_ATTRIBUTES *attr )
 /******************************************************************************
  *              NtQueryFullAttributesFile   (NTDLL.@)
  */
-NTSTATUS WINAPI NtQueryFullAttributesFile( const OBJECT_ATTRIBUTES *attr,
-                                           FILE_NETWORK_OPEN_INFORMATION *info )
+NTSTATUS SYSCALL NtQueryFullAttributesFile( const OBJECT_ATTRIBUTES *attr,
+                                            FILE_NETWORK_OPEN_INFORMATION *info )
 {
     char *unix_name;
     unsigned int status;
@@ -5450,7 +5450,7 @@ NTSTATUS WINAPI NtQueryFullAttributesFile( const OBJECT_ATTRIBUTES *attr,
 /******************************************************************************
  *              NtQueryAttributesFile   (NTDLL.@)
  */
-NTSTATUS WINAPI NtQueryAttributesFile( const OBJECT_ATTRIBUTES *attr, FILE_BASIC_INFORMATION *info )
+NTSTATUS SYSCALL NtQueryAttributesFile( const OBJECT_ATTRIBUTES *attr, FILE_BASIC_INFORMATION *info )
 {
     char *unix_name;
     unsigned int status;
@@ -5480,8 +5480,8 @@ NTSTATUS WINAPI NtQueryAttributesFile( const OBJECT_ATTRIBUTES *attr, FILE_BASIC
 /******************************************************************************
  *              NtQueryInformationFile   (NTDLL.@)
  */
-NTSTATUS WINAPI NtQueryInformationFile( HANDLE handle, IO_STATUS_BLOCK *io,
-                                        void *ptr, ULONG len, FILE_INFORMATION_CLASS class )
+NTSTATUS SYSCALL NtQueryInformationFile( HANDLE handle, IO_STATUS_BLOCK *io,
+                                         void *ptr, ULONG len, FILE_INFORMATION_CLASS class )
 {
     static const size_t info_sizes[] =
     {
@@ -5784,8 +5784,8 @@ NTSTATUS WINAPI NtQueryInformationFile( HANDLE handle, IO_STATUS_BLOCK *io,
 /******************************************************************************
  *              NtSetInformationFile   (NTDLL.@)
  */
-NTSTATUS WINAPI NtSetInformationFile( HANDLE handle, IO_STATUS_BLOCK *io,
-                                      void *ptr, ULONG len, FILE_INFORMATION_CLASS class )
+NTSTATUS SYSCALL NtSetInformationFile( HANDLE handle, IO_STATUS_BLOCK *io,
+                                       void *ptr, ULONG len, FILE_INFORMATION_CLASS class )
 {
     int fd, needs_close;
     unsigned int status = STATUS_SUCCESS;
@@ -6839,9 +6839,9 @@ static NTSTATUS cancel_async_file_read( HANDLE handle, IO_STATUS_BLOCK *io )
 /******************************************************************************
  *              NtReadFile   (NTDLL.@)
  */
-NTSTATUS WINAPI NtReadFile( HANDLE handle, HANDLE event, PIO_APC_ROUTINE apc, void *apc_user,
-                            IO_STATUS_BLOCK *io, void *buffer, ULONG length,
-                            LARGE_INTEGER *offset, ULONG *key )
+NTSTATUS SYSCALL NtReadFile( HANDLE handle, HANDLE event, PIO_APC_ROUTINE apc, void *apc_user,
+                             IO_STATUS_BLOCK *io, void *buffer, ULONG length,
+                             LARGE_INTEGER *offset, ULONG *key )
 {
     int result, unix_handle, needs_close;
     unsigned int options;
@@ -7054,9 +7054,9 @@ err:
 /******************************************************************************
  *              NtReadFileScatter   (NTDLL.@)
  */
-NTSTATUS WINAPI NtReadFileScatter( HANDLE file, HANDLE event, PIO_APC_ROUTINE apc, void *apc_user,
-                                   IO_STATUS_BLOCK *io, FILE_SEGMENT_ELEMENT *segments,
-                                   ULONG length, LARGE_INTEGER *offset, ULONG *key )
+NTSTATUS SYSCALL NtReadFileScatter( HANDLE file, HANDLE event, PIO_APC_ROUTINE apc, void *apc_user,
+                                    IO_STATUS_BLOCK *io, FILE_SEGMENT_ELEMENT *segments,
+                                    ULONG length, LARGE_INTEGER *offset, ULONG *key )
 {
     int result, unix_handle, needs_close;
     unsigned int options, status;
@@ -7131,9 +7131,9 @@ error:
 /******************************************************************************
  *              NtWriteFile   (NTDLL.@)
  */
-NTSTATUS WINAPI NtWriteFile( HANDLE handle, HANDLE event, PIO_APC_ROUTINE apc, void *apc_user,
-                             IO_STATUS_BLOCK *io, const void *buffer, ULONG length,
-                             LARGE_INTEGER *offset, ULONG *key )
+NTSTATUS SYSCALL NtWriteFile( HANDLE handle, HANDLE event, PIO_APC_ROUTINE apc, void *apc_user,
+                              IO_STATUS_BLOCK *io, const void *buffer, ULONG length,
+                              LARGE_INTEGER *offset, ULONG *key )
 {
     int result, unix_handle, needs_close;
     unsigned int options;
@@ -7361,9 +7361,9 @@ err:
 /******************************************************************************
  *              NtWriteFileGather   (NTDLL.@)
  */
-NTSTATUS WINAPI NtWriteFileGather( HANDLE file, HANDLE event, PIO_APC_ROUTINE apc, void *apc_user,
-                                   IO_STATUS_BLOCK *io, FILE_SEGMENT_ELEMENT *segments,
-                                   ULONG length, LARGE_INTEGER *offset, ULONG *key )
+NTSTATUS SYSCALL NtWriteFileGather( HANDLE file, HANDLE event, PIO_APC_ROUTINE apc, void *apc_user,
+                                    IO_STATUS_BLOCK *io, FILE_SEGMENT_ELEMENT *segments,
+                                    ULONG length, LARGE_INTEGER *offset, ULONG *key )
 {
     int result, unix_handle, needs_close;
     unsigned int options, status;
@@ -7564,9 +7564,9 @@ copychunk_out:
 /******************************************************************************
  *              NtDeviceIoControlFile   (NTDLL.@)
  */
-NTSTATUS WINAPI NtDeviceIoControlFile( HANDLE handle, HANDLE event, PIO_APC_ROUTINE apc, void *apc_context,
-                                       IO_STATUS_BLOCK *io, ULONG code, void *in_buffer, ULONG in_size,
-                                       void *out_buffer, ULONG out_size )
+NTSTATUS SYSCALL NtDeviceIoControlFile( HANDLE handle, HANDLE event, PIO_APC_ROUTINE apc, void *apc_context,
+                                        IO_STATUS_BLOCK *io, ULONG code, void *in_buffer, ULONG in_size,
+                                        void *out_buffer, ULONG out_size )
 {
     ULONG device = (code >> 16);
     NTSTATUS status = STATUS_NOT_SUPPORTED;
@@ -7645,9 +7645,9 @@ static void ignore_server_ioctl_struct_holes( ULONG code, const void *in_buffer,
 /******************************************************************************
  *              NtFsControlFile   (NTDLL.@)
  */
-NTSTATUS WINAPI NtFsControlFile( HANDLE handle, HANDLE event, PIO_APC_ROUTINE apc, void *apc_context,
-                                 IO_STATUS_BLOCK *io, ULONG code, void *in_buffer, ULONG in_size,
-                                 void *out_buffer, ULONG out_size )
+NTSTATUS SYSCALL NtFsControlFile( HANDLE handle, HANDLE event, PIO_APC_ROUTINE apc, void *apc_context,
+                                  IO_STATUS_BLOCK *io, ULONG code, void *in_buffer, ULONG in_size,
+                                  void *out_buffer, ULONG out_size )
 {
     NTSTATUS status;
 
@@ -7764,7 +7764,7 @@ NTSTATUS WINAPI NtFsControlFile( HANDLE handle, HANDLE event, PIO_APC_ROUTINE ap
 /******************************************************************************
  *              NtFlushBuffersFile   (NTDLL.@)
  */
-NTSTATUS WINAPI NtFlushBuffersFile( HANDLE handle, IO_STATUS_BLOCK *io )
+NTSTATUS SYSCALL NtFlushBuffersFile( HANDLE handle, IO_STATUS_BLOCK *io )
 {
     NTSTATUS ret;
     HANDLE wait_handle;
@@ -7822,7 +7822,7 @@ NTSTATUS WINAPI NtFlushBuffersFile( HANDLE handle, IO_STATUS_BLOCK *io )
 /**************************************************************************
  *           NtCancelIoFile   (NTDLL.@)
  */
-NTSTATUS WINAPI NtCancelIoFile( HANDLE handle, IO_STATUS_BLOCK *io_status )
+NTSTATUS SYSCALL NtCancelIoFile( HANDLE handle, IO_STATUS_BLOCK *io_status )
 {
     unsigned int status;
 
@@ -7850,7 +7850,7 @@ NTSTATUS WINAPI NtCancelIoFile( HANDLE handle, IO_STATUS_BLOCK *io_status )
 /**************************************************************************
  *           NtCancelIoFileEx   (NTDLL.@)
  */
-NTSTATUS WINAPI NtCancelIoFileEx( HANDLE handle, IO_STATUS_BLOCK *io, IO_STATUS_BLOCK *io_status )
+NTSTATUS SYSCALL NtCancelIoFileEx( HANDLE handle, IO_STATUS_BLOCK *io, IO_STATUS_BLOCK *io_status )
 {
     unsigned int status;
 
@@ -7878,7 +7878,7 @@ NTSTATUS WINAPI NtCancelIoFileEx( HANDLE handle, IO_STATUS_BLOCK *io, IO_STATUS_
 /**************************************************************************
  *           NtCancelSynchronousIoFile (NTDLL.@)
  */
-NTSTATUS WINAPI NtCancelSynchronousIoFile( HANDLE handle, IO_STATUS_BLOCK *io, IO_STATUS_BLOCK *io_status )
+NTSTATUS SYSCALL NtCancelSynchronousIoFile( HANDLE handle, IO_STATUS_BLOCK *io, IO_STATUS_BLOCK *io_status )
 {
     unsigned int status;
 
@@ -7900,9 +7900,9 @@ NTSTATUS WINAPI NtCancelSynchronousIoFile( HANDLE handle, IO_STATUS_BLOCK *io, I
 /******************************************************************
  *           NtLockFile   (NTDLL.@)
  */
-NTSTATUS WINAPI NtLockFile( HANDLE file, HANDLE event, PIO_APC_ROUTINE apc, void* apc_user,
-                            IO_STATUS_BLOCK *io_status, LARGE_INTEGER *offset,
-                            LARGE_INTEGER *count, ULONG *key, BOOLEAN dont_wait, BOOLEAN exclusive )
+NTSTATUS SYSCALL NtLockFile( HANDLE file, HANDLE event, PIO_APC_ROUTINE apc, void* apc_user,
+                             IO_STATUS_BLOCK *io_status, LARGE_INTEGER *offset,
+                             LARGE_INTEGER *count, ULONG *key, BOOLEAN dont_wait, BOOLEAN exclusive )
 {
     static int warn;
     unsigned int ret;
@@ -7959,8 +7959,8 @@ NTSTATUS WINAPI NtLockFile( HANDLE file, HANDLE event, PIO_APC_ROUTINE apc, void
 /******************************************************************
  *           NtUnlockFile   (NTDLL.@)
  */
-NTSTATUS WINAPI NtUnlockFile( HANDLE handle, IO_STATUS_BLOCK *io_status, LARGE_INTEGER *offset,
-                              LARGE_INTEGER *count, ULONG *key )
+NTSTATUS SYSCALL NtUnlockFile( HANDLE handle, IO_STATUS_BLOCK *io_status, LARGE_INTEGER *offset,
+                               LARGE_INTEGER *count, ULONG *key )
 {
     unsigned int status;
 
@@ -8070,9 +8070,9 @@ static BOOL read_changes_apc( void *user, ULONG_PTR *info, unsigned int *status
 /******************************************************************************
  *              NtNotifyChangeDirectoryFile   (NTDLL.@)
  */
-NTSTATUS WINAPI NtNotifyChangeDirectoryFile( HANDLE handle, HANDLE event, PIO_APC_ROUTINE apc,
-                                             void *apc_context, IO_STATUS_BLOCK *iosb, void *buffer,
-                                             ULONG buffer_size, ULONG filter, BOOLEAN subtree )
+NTSTATUS SYSCALL NtNotifyChangeDirectoryFile( HANDLE handle, HANDLE event, PIO_APC_ROUTINE apc,
+                                              void *apc_context, IO_STATUS_BLOCK *iosb, void *buffer,
+                                              ULONG buffer_size, ULONG filter, BOOLEAN subtree )
 {
     struct async_fileio_read_changes *fileio;
     unsigned int status;
@@ -8313,9 +8313,9 @@ NTSTATUS get_device_info( int fd, FILE_FS_DEVICE_INFORMATION *info )
 /******************************************************************************
  *              NtQueryVolumeInformationFile   (NTDLL.@)
  */
-NTSTATUS WINAPI NtQueryVolumeInformationFile( HANDLE handle, IO_STATUS_BLOCK *io,
-                                              void *buffer, ULONG length,
-                                              FS_INFORMATION_CLASS info_class )
+NTSTATUS SYSCALL NtQueryVolumeInformationFile( HANDLE handle, IO_STATUS_BLOCK *io,
+                                               void *buffer, ULONG length,
+                                               FS_INFORMATION_CLASS info_class )
 {
     int fd, needs_close;
     unsigned int status;
@@ -8435,8 +8435,8 @@ NTSTATUS WINAPI NtQueryVolumeInformationFile( HANDLE handle, IO_STATUS_BLOCK *io
 /******************************************************************************
  *              NtSetVolumeInformationFile   (NTDLL.@)
  */
-NTSTATUS WINAPI NtSetVolumeInformationFile( HANDLE handle, IO_STATUS_BLOCK *io, void *info,
-                                            ULONG length, FS_INFORMATION_CLASS class )
+NTSTATUS SYSCALL NtSetVolumeInformationFile( HANDLE handle, IO_STATUS_BLOCK *io, void *info,
+                                             ULONG length, FS_INFORMATION_CLASS class )
 {
     FIXME( "(%p,%p,%p,0x%08x,0x%08x) stub\n", handle, io, info, (int)length, class );
     return STATUS_SUCCESS;
@@ -8446,9 +8446,9 @@ NTSTATUS WINAPI NtSetVolumeInformationFile( HANDLE handle, IO_STATUS_BLOCK *io,
 /******************************************************************
  *           NtQueryEaFile   (NTDLL.@)
  */
-NTSTATUS WINAPI NtQueryEaFile( HANDLE handle, IO_STATUS_BLOCK *io, void *buffer, ULONG length,
-                               BOOLEAN single_entry, void *list, ULONG list_len,
-                               ULONG *index, BOOLEAN restart )
+NTSTATUS SYSCALL NtQueryEaFile( HANDLE handle, IO_STATUS_BLOCK *io, void *buffer, ULONG length,
+                                BOOLEAN single_entry, void *list, ULONG list_len,
+                                ULONG *index, BOOLEAN restart )
 {
     int fd, needs_close;
     NTSTATUS status;
@@ -8470,7 +8470,7 @@ NTSTATUS WINAPI NtQueryEaFile( HANDLE handle, IO_STATUS_BLOCK *io, void *buffer,
 /******************************************************************
  *           NtSetEaFile   (NTDLL.@)
  */
-NTSTATUS WINAPI NtSetEaFile( HANDLE handle, IO_STATUS_BLOCK *io, void *buffer, ULONG length )
+NTSTATUS SYSCALL NtSetEaFile( HANDLE handle, IO_STATUS_BLOCK *io, void *buffer, ULONG length )
 {
     FIXME( "(%p,%p,%p,%d) stub\n", handle, io, buffer, (int)length );
     return STATUS_ACCESS_DENIED;
@@ -8504,8 +8504,8 @@ static void *put_object_type_info( OBJECT_TYPE_INFORMATION *p, struct object_typ
 /**************************************************************************
  *           NtQueryObject   (NTDLL.@)
  */
-NTSTATUS WINAPI NtQueryObject( HANDLE handle, OBJECT_INFORMATION_CLASS info_class,
-                               void *ptr, ULONG len, ULONG *used_len )
+NTSTATUS SYSCALL NtQueryObject( HANDLE handle, OBJECT_INFORMATION_CLASS info_class,
+                                void *ptr, ULONG len, ULONG *used_len )
 {
     unsigned int status;
 
@@ -8703,8 +8703,8 @@ NTSTATUS WINAPI NtQueryObject( HANDLE handle, OBJECT_INFORMATION_CLASS info_clas
 /**************************************************************************
  *           NtSetInformationObject   (NTDLL.@)
  */
-NTSTATUS WINAPI NtSetInformationObject( HANDLE handle, OBJECT_INFORMATION_CLASS info_class,
-                                        void *ptr, ULONG len )
+NTSTATUS SYSCALL NtSetInformationObject( HANDLE handle, OBJECT_INFORMATION_CLASS info_class,
+                                         void *ptr, ULONG len )
 {
     unsigned int status;
 
diff --git a/dlls/ntdll/unix/process.c b/dlls/ntdll/unix/process.c
index 11111111111..11111111111 100644
--- a/dlls/ntdll/unix/process.c
+++ b/dlls/ntdll/unix/process.c
@@ -489,7 +489,7 @@ static NTSTATUS spawn_process( const RTL_USER_PROCESS_PARAMETERS *params, int so
 /***********************************************************************
  *           __wine_unix_spawnvp
  */
-NTSTATUS WINAPI __wine_unix_spawnvp( char * const argv[], int wait )
+NTSTATUS SYSCALL __wine_unix_spawnvp( char * const argv[], int wait )
 {
     pid_t pid, wret;
     int fd[2], status, err;
@@ -712,12 +712,12 @@ static NTSTATUS alloc_handle_list( const PS_ATTRIBUTE *handles_attr, obj_handle_
 /**********************************************************************
  *           NtCreateUserProcess  (NTDLL.@)
  */
-NTSTATUS WINAPI NtCreateUserProcess( HANDLE *process_handle_ptr, HANDLE *thread_handle_ptr,
-                                     ACCESS_MASK process_access, ACCESS_MASK thread_access,
-                                     OBJECT_ATTRIBUTES *process_attr, OBJECT_ATTRIBUTES *thread_attr,
-                                     ULONG process_flags, ULONG thread_flags,
-                                     RTL_USER_PROCESS_PARAMETERS *params, PS_CREATE_INFO *info,
-                                     PS_ATTRIBUTE_LIST *ps_attr )
+NTSTATUS SYSCALL NtCreateUserProcess( HANDLE *process_handle_ptr, HANDLE *thread_handle_ptr,
+                                      ACCESS_MASK process_access, ACCESS_MASK thread_access,
+                                      OBJECT_ATTRIBUTES *process_attr, OBJECT_ATTRIBUTES *thread_attr,
+                                      ULONG process_flags, ULONG thread_flags,
+                                      RTL_USER_PROCESS_PARAMETERS *params, PS_CREATE_INFO *info,
+                                      PS_ATTRIBUTE_LIST *ps_attr )
 {
     unsigned int status;
     BOOL success = FALSE;
@@ -981,7 +981,7 @@ done:
 /******************************************************************************
  *              NtTerminateProcess  (NTDLL.@)
  */
-NTSTATUS WINAPI NtTerminateProcess( HANDLE handle, LONG exit_code )
+NTSTATUS SYSCALL NtTerminateProcess( HANDLE handle, LONG exit_code )
 {
     unsigned int ret;
     BOOL self;
@@ -1126,8 +1126,8 @@ static ULONG get_process_cookie( void )
 /**********************************************************************
  *           NtQueryInformationProcess  (NTDLL.@)
  */
-NTSTATUS WINAPI NtQueryInformationProcess( HANDLE handle, PROCESSINFOCLASS class, void *info,
-                                           ULONG size, ULONG *ret_len )
+NTSTATUS SYSCALL NtQueryInformationProcess( HANDLE handle, PROCESSINFOCLASS class, void *info,
+                                            ULONG size, ULONG *ret_len )
 {
     unsigned int ret = STATUS_SUCCESS;
     ULONG len = 0;
@@ -1639,7 +1639,7 @@ NTSTATUS WINAPI NtQueryInformationProcess( HANDLE handle, PROCESSINFOCLASS class
 /**********************************************************************
  *           NtSetInformationProcess  (NTDLL.@)
  */
-NTSTATUS WINAPI NtSetInformationProcess( HANDLE handle, PROCESSINFOCLASS class, void *info, ULONG size )
+NTSTATUS SYSCALL NtSetInformationProcess( HANDLE handle, PROCESSINFOCLASS class, void *info, ULONG size )
 {
     unsigned int ret = STATUS_SUCCESS;
 
@@ -1765,8 +1765,8 @@ NTSTATUS WINAPI NtSetInformationProcess( HANDLE handle, PROCESSINFOCLASS class,
 /**********************************************************************
  *           NtOpenProcess  (NTDLL.@)
  */
-NTSTATUS WINAPI NtOpenProcess( HANDLE *handle, ACCESS_MASK access,
-                               const OBJECT_ATTRIBUTES *attr, const CLIENT_ID *id )
+NTSTATUS SYSCALL NtOpenProcess( HANDLE *handle, ACCESS_MASK access,
+                                const OBJECT_ATTRIBUTES *attr, const CLIENT_ID *id )
 {
     unsigned int status;
 
@@ -1788,7 +1788,7 @@ NTSTATUS WINAPI NtOpenProcess( HANDLE *handle, ACCESS_MASK access,
 /**********************************************************************
  *           NtSuspendProcess  (NTDLL.@)
  */
-NTSTATUS WINAPI NtSuspendProcess( HANDLE handle )
+NTSTATUS SYSCALL NtSuspendProcess( HANDLE handle )
 {
     unsigned int ret;
 
@@ -1805,7 +1805,7 @@ NTSTATUS WINAPI NtSuspendProcess( HANDLE handle )
 /**********************************************************************
  *           NtResumeProcess  (NTDLL.@)
  */
-NTSTATUS WINAPI NtResumeProcess( HANDLE handle )
+NTSTATUS SYSCALL NtResumeProcess( HANDLE handle )
 {
     unsigned int ret;
 
@@ -1822,7 +1822,7 @@ NTSTATUS WINAPI NtResumeProcess( HANDLE handle )
 /**********************************************************************
  *           NtDebugActiveProcess  (NTDLL.@)
  */
-NTSTATUS WINAPI NtDebugActiveProcess( HANDLE process, HANDLE debug )
+NTSTATUS SYSCALL NtDebugActiveProcess( HANDLE process, HANDLE debug )
 {
     unsigned int ret;
 
@@ -1841,7 +1841,7 @@ NTSTATUS WINAPI NtDebugActiveProcess( HANDLE process, HANDLE debug )
 /**********************************************************************
  *           NtRemoveProcessDebug  (NTDLL.@)
  */
-NTSTATUS WINAPI NtRemoveProcessDebug( HANDLE process, HANDLE debug )
+NTSTATUS SYSCALL NtRemoveProcessDebug( HANDLE process, HANDLE debug )
 {
     unsigned int ret;
 
@@ -1860,7 +1860,7 @@ NTSTATUS WINAPI NtRemoveProcessDebug( HANDLE process, HANDLE debug )
 /**********************************************************************
  *           NtDebugContinue  (NTDLL.@)
  */
-NTSTATUS WINAPI NtDebugContinue( HANDLE handle, CLIENT_ID *client, NTSTATUS status )
+NTSTATUS SYSCALL NtDebugContinue( HANDLE handle, CLIENT_ID *client, NTSTATUS status )
 {
     unsigned int ret;
 
diff --git a/dlls/ntdll/unix/registry.c b/dlls/ntdll/unix/registry.c
index 11111111111..11111111111 100644
--- a/dlls/ntdll/unix/registry.c
+++ b/dlls/ntdll/unix/registry.c
@@ -72,8 +72,8 @@ NTSTATUS open_hkcu_key( const char *path, HANDLE *key )
 /******************************************************************************
  *              NtCreateKey  (NTDLL.@)
  */
-NTSTATUS WINAPI NtCreateKey( HANDLE *key, ACCESS_MASK access, const OBJECT_ATTRIBUTES *attr,
-                             ULONG index, const UNICODE_STRING *class, ULONG options, ULONG *dispos )
+NTSTATUS SYSCALL NtCreateKey( HANDLE *key, ACCESS_MASK access, const OBJECT_ATTRIBUTES *attr,
+                              ULONG index, const UNICODE_STRING *class, ULONG options, ULONG *dispos )
 {
     unsigned int ret;
     data_size_t len;
@@ -118,9 +118,9 @@ NTSTATUS WINAPI NtCreateKey( HANDLE *key, ACCESS_MASK access, const OBJECT_ATTRI
 /******************************************************************************
  *              NtCreateKeyTransacted  (NTDLL.@)
  */
-NTSTATUS WINAPI NtCreateKeyTransacted( HANDLE *key, ACCESS_MASK access, const OBJECT_ATTRIBUTES *attr,
-                                       ULONG index, const UNICODE_STRING *class, ULONG options,
-                                       HANDLE transacted, ULONG *dispos )
+NTSTATUS SYSCALL NtCreateKeyTransacted( HANDLE *key, ACCESS_MASK access, const OBJECT_ATTRIBUTES *attr,
+                                        ULONG index, const UNICODE_STRING *class, ULONG options,
+                                        HANDLE transacted, ULONG *dispos )
 {
     FIXME( "(%p,%s,%s,%x,%x,%p,%p)\n", attr->RootDirectory, debugstr_us(attr->ObjectName),
            debugstr_us(class), (int)options, (int)access, transacted, key );
@@ -131,7 +131,7 @@ NTSTATUS WINAPI NtCreateKeyTransacted( HANDLE *key, ACCESS_MASK access, const OB
 /******************************************************************************
  *              NtOpenKeyEx  (NTDLL.@)
  */
-NTSTATUS WINAPI NtOpenKeyEx( HANDLE *key, ACCESS_MASK access, const OBJECT_ATTRIBUTES *attr, ULONG options )
+NTSTATUS SYSCALL NtOpenKeyEx( HANDLE *key, ACCESS_MASK access, const OBJECT_ATTRIBUTES *attr, ULONG options )
 {
     unsigned int ret;
     ULONG attributes;
@@ -164,7 +164,7 @@ NTSTATUS WINAPI NtOpenKeyEx( HANDLE *key, ACCESS_MASK access, const OBJECT_ATTRI
 /******************************************************************************
  *              NtOpenKey  (NTDLL.@)
  */
-NTSTATUS WINAPI NtOpenKey( HANDLE *key, ACCESS_MASK access, const OBJECT_ATTRIBUTES *attr )
+NTSTATUS SYSCALL NtOpenKey( HANDLE *key, ACCESS_MASK access, const OBJECT_ATTRIBUTES *attr )
 {
     return NtOpenKeyEx( key, access, attr, 0 );
 }
@@ -173,8 +173,8 @@ NTSTATUS WINAPI NtOpenKey( HANDLE *key, ACCESS_MASK access, const OBJECT_ATTRIBU
 /******************************************************************************
  *              NtOpenKeyTransactedEx  (NTDLL.@)
  */
-NTSTATUS WINAPI NtOpenKeyTransactedEx( HANDLE *key, ACCESS_MASK access, const OBJECT_ATTRIBUTES *attr,
-                                       ULONG options, HANDLE transaction )
+NTSTATUS SYSCALL NtOpenKeyTransactedEx( HANDLE *key, ACCESS_MASK access, const OBJECT_ATTRIBUTES *attr,
+                                        ULONG options, HANDLE transaction )
 {
     FIXME( "(%p %x %p %x %p)\n", key, (int)access, attr, (int)options, transaction );
     return STATUS_NOT_IMPLEMENTED;
@@ -184,8 +184,8 @@ NTSTATUS WINAPI NtOpenKeyTransactedEx( HANDLE *key, ACCESS_MASK access, const OB
 /******************************************************************************
  *              NtOpenKeyTransacted  (NTDLL.@)
  */
-NTSTATUS WINAPI NtOpenKeyTransacted( HANDLE *key, ACCESS_MASK access, const OBJECT_ATTRIBUTES *attr,
-                                     HANDLE transaction )
+NTSTATUS SYSCALL NtOpenKeyTransacted( HANDLE *key, ACCESS_MASK access, const OBJECT_ATTRIBUTES *attr,
+                                      HANDLE transaction )
 {
     return NtOpenKeyTransactedEx( key, access, attr, 0, transaction );
 }
@@ -194,7 +194,7 @@ NTSTATUS WINAPI NtOpenKeyTransacted( HANDLE *key, ACCESS_MASK access, const OBJE
 /******************************************************************************
  *              NtDeleteKey  (NTDLL.@)
  */
-NTSTATUS WINAPI NtDeleteKey( HANDLE key )
+NTSTATUS SYSCALL NtDeleteKey( HANDLE key )
 {
     unsigned int ret;
 
@@ -213,7 +213,7 @@ NTSTATUS WINAPI NtDeleteKey( HANDLE key )
 /******************************************************************************
  *              NtRenameKey  (NTDLL.@)
  */
-NTSTATUS WINAPI NtRenameKey( HANDLE key, UNICODE_STRING *name )
+NTSTATUS SYSCALL NtRenameKey( HANDLE key, UNICODE_STRING *name )
 {
     unsigned int ret;
 
@@ -355,8 +355,8 @@ static NTSTATUS enumerate_key( HANDLE handle, int index, KEY_INFORMATION_CLASS i
 /******************************************************************************
  *              NtEnumerateKey  (NTDLL.@)
  */
-NTSTATUS WINAPI NtEnumerateKey( HANDLE handle, ULONG index, KEY_INFORMATION_CLASS info_class,
-                                void *info, DWORD length, DWORD *result_len )
+NTSTATUS SYSCALL NtEnumerateKey( HANDLE handle, ULONG index, KEY_INFORMATION_CLASS info_class,
+                                 void *info, DWORD length, DWORD *result_len )
 {
     /* -1 means query key, so avoid it here */
     if (index == (ULONG)-1) return STATUS_NO_MORE_ENTRIES;
@@ -367,8 +367,8 @@ NTSTATUS WINAPI NtEnumerateKey( HANDLE handle, ULONG index, KEY_INFORMATION_CLAS
 /******************************************************************************
  *              NtQueryKey  (NTDLL.@)
  */
-NTSTATUS WINAPI NtQueryKey( HANDLE handle, KEY_INFORMATION_CLASS info_class,
-                            void *info, DWORD length, DWORD *result_len )
+NTSTATUS SYSCALL NtQueryKey( HANDLE handle, KEY_INFORMATION_CLASS info_class,
+                             void *info, DWORD length, DWORD *result_len )
 {
     return enumerate_key( handle, -1, info_class, info, length, result_len );
 }
@@ -377,7 +377,7 @@ NTSTATUS WINAPI NtQueryKey( HANDLE handle, KEY_INFORMATION_CLASS info_class,
 /******************************************************************************
  *              NtSetInformationKey  (NTDLL.@)
  */
-NTSTATUS WINAPI NtSetInformationKey( HANDLE key, int class, void *info, ULONG length )
+NTSTATUS SYSCALL NtSetInformationKey( HANDLE key, int class, void *info, ULONG length )
 {
     FIXME( "(%p,0x%08x,%p,0x%08x) stub\n", key, class, info, (int)length );
     return STATUS_SUCCESS;
@@ -434,8 +434,8 @@ static void copy_key_value_info( KEY_VALUE_INFORMATION_CLASS info_class, void *i
 /******************************************************************************
  *              NtEnumerateValueKey  (NTDLL.@)
  */
-NTSTATUS WINAPI NtEnumerateValueKey( HANDLE handle, ULONG index, KEY_VALUE_INFORMATION_CLASS info_class,
-                                     void *info, DWORD length, DWORD *result_len )
+NTSTATUS SYSCALL NtEnumerateValueKey( HANDLE handle, ULONG index, KEY_VALUE_INFORMATION_CLASS info_class,
+                                      void *info, DWORD length, DWORD *result_len )
 {
     unsigned int ret;
     void *ptr;
@@ -477,9 +477,9 @@ NTSTATUS WINAPI NtEnumerateValueKey( HANDLE handle, ULONG index, KEY_VALUE_INFOR
 /******************************************************************************
  *              NtQueryValueKey  (NTDLL.@)
  */
-NTSTATUS WINAPI NtQueryValueKey( HANDLE handle, const UNICODE_STRING *name,
-                                 KEY_VALUE_INFORMATION_CLASS info_class,
-                                 void *info, DWORD length, DWORD *result_len )
+NTSTATUS SYSCALL NtQueryValueKey( HANDLE handle, const UNICODE_STRING *name,
+                                  KEY_VALUE_INFORMATION_CLASS info_class,
+                                  void *info, DWORD length, DWORD *result_len )
 {
     unsigned int ret;
     UCHAR *data_ptr;
@@ -546,8 +546,8 @@ NTSTATUS WINAPI NtQueryValueKey( HANDLE handle, const UNICODE_STRING *name,
 /******************************************************************************
  *              NtQueryMultipleValueKey  (NTDLL.@)
  */
-NTSTATUS WINAPI NtQueryMultipleValueKey( HANDLE key, KEY_MULTIPLE_VALUE_INFORMATION *info,
-                                         ULONG count, void *buffer, ULONG length, ULONG *retlen )
+NTSTATUS SYSCALL NtQueryMultipleValueKey( HANDLE key, KEY_MULTIPLE_VALUE_INFORMATION *info,
+                                          ULONG count, void *buffer, ULONG length, ULONG *retlen )
 {
     FIXME( "(%p,%p,0x%08x,%p,0x%08x,%p) stub!\n", key, info, (int)count, buffer, (int)length, retlen );
     return STATUS_SUCCESS;
@@ -557,8 +557,8 @@ NTSTATUS WINAPI NtQueryMultipleValueKey( HANDLE key, KEY_MULTIPLE_VALUE_INFORMAT
 /******************************************************************************
  *              NtSetValueKey  (NTDLL.@)
  */
-NTSTATUS WINAPI NtSetValueKey( HANDLE key, const UNICODE_STRING *name, ULONG index,
-                               ULONG type, const void *data, ULONG count )
+NTSTATUS SYSCALL NtSetValueKey( HANDLE key, const UNICODE_STRING *name, ULONG index,
+                                ULONG type, const void *data, ULONG count )
 {
     unsigned int ret;
 
@@ -583,7 +583,7 @@ NTSTATUS WINAPI NtSetValueKey( HANDLE key, const UNICODE_STRING *name, ULONG ind
 /******************************************************************************
  *              NtDeleteValueKey  (NTDLL.@)
  */
-NTSTATUS WINAPI NtDeleteValueKey( HANDLE key, const UNICODE_STRING *name )
+NTSTATUS SYSCALL NtDeleteValueKey( HANDLE key, const UNICODE_STRING *name )
 {
     unsigned int ret;
 
@@ -605,10 +605,10 @@ NTSTATUS WINAPI NtDeleteValueKey( HANDLE key, const UNICODE_STRING *name )
 /******************************************************************************
  *              NtNotifyChangeMultipleKeys  (NTDLL.@)
  */
-NTSTATUS WINAPI NtNotifyChangeMultipleKeys( HANDLE key, ULONG count, OBJECT_ATTRIBUTES *attr,
-                                            HANDLE event, PIO_APC_ROUTINE apc, void *apc_context,
-                                            IO_STATUS_BLOCK *io, ULONG filter, BOOLEAN subtree,
-                                            void *buffer, ULONG length, BOOLEAN async )
+NTSTATUS SYSCALL NtNotifyChangeMultipleKeys( HANDLE key, ULONG count, OBJECT_ATTRIBUTES *attr,
+                                             HANDLE event, PIO_APC_ROUTINE apc, void *apc_context,
+                                             IO_STATUS_BLOCK *io, ULONG filter, BOOLEAN subtree,
+                                             void *buffer, ULONG length, BOOLEAN async )
 {
     unsigned int ret;
 
@@ -649,9 +649,9 @@ NTSTATUS WINAPI NtNotifyChangeMultipleKeys( HANDLE key, ULONG count, OBJECT_ATTR
 /******************************************************************************
  *              NtNotifyChangeKey  (NTDLL.@)
  */
-NTSTATUS WINAPI NtNotifyChangeKey( HANDLE key, HANDLE event, PIO_APC_ROUTINE apc, void *apc_context,
-                                   IO_STATUS_BLOCK *io, ULONG filter, BOOLEAN subtree,
-                                   void *buffer, ULONG length, BOOLEAN async )
+NTSTATUS SYSCALL NtNotifyChangeKey( HANDLE key, HANDLE event, PIO_APC_ROUTINE apc, void *apc_context,
+                                    IO_STATUS_BLOCK *io, ULONG filter, BOOLEAN subtree,
+                                    void *buffer, ULONG length, BOOLEAN async )
 {
     return NtNotifyChangeMultipleKeys( key, 0, NULL, event, apc, apc_context,
                                        io, filter, subtree, buffer, length, async );
@@ -661,7 +661,7 @@ NTSTATUS WINAPI NtNotifyChangeKey( HANDLE key, HANDLE event, PIO_APC_ROUTINE apc
 /******************************************************************************
  *              NtFlushKey  (NTDLL.@)
  */
-NTSTATUS WINAPI NtFlushKey( HANDLE key )
+NTSTATUS SYSCALL NtFlushKey( HANDLE key )
 {
     unsigned int ret;
 
@@ -680,7 +680,7 @@ NTSTATUS WINAPI NtFlushKey( HANDLE key )
 /******************************************************************************
  *              NtLoadKey  (NTDLL.@)
  */
-NTSTATUS WINAPI NtLoadKey( const OBJECT_ATTRIBUTES *attr, OBJECT_ATTRIBUTES *file )
+NTSTATUS SYSCALL NtLoadKey( const OBJECT_ATTRIBUTES *attr, OBJECT_ATTRIBUTES *file )
 {
     TRACE( "(%p,%p)\n", attr, file );
     return NtLoadKeyEx( attr, file, 0, 0, 0, 0, NULL, NULL );
@@ -689,7 +689,7 @@ NTSTATUS WINAPI NtLoadKey( const OBJECT_ATTRIBUTES *attr, OBJECT_ATTRIBUTES *fil
 /******************************************************************************
  *              NtLoadKey2  (NTDLL.@)
  */
-NTSTATUS WINAPI NtLoadKey2( const OBJECT_ATTRIBUTES *attr, OBJECT_ATTRIBUTES *file, ULONG flags )
+NTSTATUS SYSCALL NtLoadKey2( const OBJECT_ATTRIBUTES *attr, OBJECT_ATTRIBUTES *file, ULONG flags )
 {
     return NtLoadKeyEx( attr, file, flags, 0, 0, 0, NULL, NULL );
 }
@@ -697,8 +697,8 @@ NTSTATUS WINAPI NtLoadKey2( const OBJECT_ATTRIBUTES *attr, OBJECT_ATTRIBUTES *fi
 /******************************************************************************
  *              NtLoadKeyEx  (NTDLL.@)
  */
-NTSTATUS WINAPI NtLoadKeyEx( const OBJECT_ATTRIBUTES *attr, OBJECT_ATTRIBUTES *file, ULONG flags, HANDLE trustkey,
-                             HANDLE event, ACCESS_MASK access, HANDLE *roothandle, IO_STATUS_BLOCK *iostatus )
+NTSTATUS SYSCALL NtLoadKeyEx( const OBJECT_ATTRIBUTES *attr, OBJECT_ATTRIBUTES *file, ULONG flags, HANDLE trustkey,
+                              HANDLE event, ACCESS_MASK access, HANDLE *roothandle, IO_STATUS_BLOCK *iostatus )
 {
     unsigned int ret;
     HANDLE key;
@@ -749,7 +749,7 @@ NTSTATUS WINAPI NtLoadKeyEx( const OBJECT_ATTRIBUTES *attr, OBJECT_ATTRIBUTES *f
 /******************************************************************************
  *              NtUnloadKey  (NTDLL.@)
  */
-NTSTATUS WINAPI NtUnloadKey( OBJECT_ATTRIBUTES *attr )
+NTSTATUS SYSCALL NtUnloadKey( OBJECT_ATTRIBUTES *attr )
 {
     unsigned int ret;
 
@@ -774,7 +774,7 @@ NTSTATUS WINAPI NtUnloadKey( OBJECT_ATTRIBUTES *attr )
 /******************************************************************************
  *              NtSaveKey  (NTDLL.@)
  */
-NTSTATUS WINAPI NtSaveKey( HANDLE key, HANDLE file )
+NTSTATUS SYSCALL NtSaveKey( HANDLE key, HANDLE file )
 {
     unsigned int ret;
 
@@ -794,7 +794,7 @@ NTSTATUS WINAPI NtSaveKey( HANDLE key, HANDLE file )
 /******************************************************************************
  *              NtRestoreKey  (NTDLL.@)
  */
-NTSTATUS WINAPI NtRestoreKey( HANDLE key, HANDLE file, ULONG flags )
+NTSTATUS SYSCALL NtRestoreKey( HANDLE key, HANDLE file, ULONG flags )
 {
     FIXME( "(%p,%p,0x%08x) stub\n", key, file, (int)flags );
     return STATUS_SUCCESS;
@@ -804,7 +804,7 @@ NTSTATUS WINAPI NtRestoreKey( HANDLE key, HANDLE file, ULONG flags )
 /******************************************************************************
  *              NtReplaceKey  (NTDLL.@)
  */
-NTSTATUS WINAPI NtReplaceKey( OBJECT_ATTRIBUTES *attr, HANDLE key, OBJECT_ATTRIBUTES *replace )
+NTSTATUS SYSCALL NtReplaceKey( OBJECT_ATTRIBUTES *attr, HANDLE key, OBJECT_ATTRIBUTES *replace )
 {
     FIXME( "(%s,%p,%s),stub!\n", debugstr_us(attr->ObjectName), key, debugstr_us(replace->ObjectName) );
     return STATUS_SUCCESS;
@@ -818,8 +818,8 @@ NTSTATUS WINAPI NtReplaceKey( OBJECT_ATTRIBUTES *attr, HANDLE key, OBJECT_ATTRIB
  *  unless there is some app which explicitly depends on that, there is
  *  no good reason to reproduce that.
  */
-NTSTATUS WINAPI NtQueryLicenseValue( const UNICODE_STRING *name, ULONG *type,
-                                     void *data, ULONG length, ULONG *retlen )
+NTSTATUS SYSCALL NtQueryLicenseValue( const UNICODE_STRING *name, ULONG *type,
+                                      void *data, ULONG length, ULONG *retlen )
 {
     static const WCHAR nameW[] = {'\\','R','e','g','i','s','t','r','y','\\',
                                   'M','a','c','h','i','n','e','\\',
diff --git a/dlls/ntdll/unix/security.c b/dlls/ntdll/unix/security.c
index 11111111111..11111111111 100644
--- a/dlls/ntdll/unix/security.c
+++ b/dlls/ntdll/unix/security.c
@@ -40,7 +40,7 @@ WINE_DEFAULT_DEBUG_CHANNEL(ntdll);
 /***********************************************************************
  *             NtOpenProcessToken  (NTDLL.@)
  */
-NTSTATUS WINAPI NtOpenProcessToken( HANDLE process, DWORD access, HANDLE *handle )
+NTSTATUS SYSCALL NtOpenProcessToken( HANDLE process, DWORD access, HANDLE *handle )
 {
     return NtOpenProcessTokenEx( process, access, 0, handle );
 }
@@ -49,7 +49,7 @@ NTSTATUS WINAPI NtOpenProcessToken( HANDLE process, DWORD access, HANDLE *handle
 /***********************************************************************
  *             NtOpenProcessTokenEx  (NTDLL.@)
  */
-NTSTATUS WINAPI NtOpenProcessTokenEx( HANDLE process, DWORD access, DWORD attributes, HANDLE *handle )
+NTSTATUS SYSCALL NtOpenProcessTokenEx( HANDLE process, DWORD access, DWORD attributes, HANDLE *handle )
 {
     unsigned int ret;
 
@@ -74,7 +74,7 @@ NTSTATUS WINAPI NtOpenProcessTokenEx( HANDLE process, DWORD access, DWORD attrib
 /***********************************************************************
  *             NtOpenThreadToken  (NTDLL.@)
  */
-NTSTATUS WINAPI NtOpenThreadToken( HANDLE thread, DWORD access, BOOLEAN self, HANDLE *handle )
+NTSTATUS SYSCALL NtOpenThreadToken( HANDLE thread, DWORD access, BOOLEAN self, HANDLE *handle )
 {
     return NtOpenThreadTokenEx( thread, access, self, 0, handle );
 }
@@ -83,8 +83,8 @@ NTSTATUS WINAPI NtOpenThreadToken( HANDLE thread, DWORD access, BOOLEAN self, HA
 /***********************************************************************
  *             NtOpenThreadTokenEx  (NTDLL.@)
  */
-NTSTATUS WINAPI NtOpenThreadTokenEx( HANDLE thread, DWORD access, BOOLEAN self, DWORD attributes,
-                                     HANDLE *handle )
+NTSTATUS SYSCALL NtOpenThreadTokenEx( HANDLE thread, DWORD access, BOOLEAN self, DWORD attributes,
+                                      HANDLE *handle )
 {
     unsigned int ret;
 
@@ -110,8 +110,8 @@ NTSTATUS WINAPI NtOpenThreadTokenEx( HANDLE thread, DWORD access, BOOLEAN self,
 /***********************************************************************
  *             NtDuplicateToken  (NTDLL.@)
  */
-NTSTATUS WINAPI NtDuplicateToken( HANDLE token, ACCESS_MASK access, OBJECT_ATTRIBUTES *attr,
-                                  SECURITY_IMPERSONATION_LEVEL level, TOKEN_TYPE type, HANDLE *handle )
+NTSTATUS SYSCALL NtDuplicateToken( HANDLE token, ACCESS_MASK access, OBJECT_ATTRIBUTES *attr,
+                                   SECURITY_IMPERSONATION_LEVEL level, TOKEN_TYPE type, HANDLE *handle )
 {
     unsigned int status;
     data_size_t len;
@@ -148,8 +148,8 @@ NTSTATUS WINAPI NtDuplicateToken( HANDLE token, ACCESS_MASK access, OBJECT_ATTRI
 /***********************************************************************
  *             NtQueryInformationToken  (NTDLL.@)
  */
-NTSTATUS WINAPI NtQueryInformationToken( HANDLE token, TOKEN_INFORMATION_CLASS class,
-                                         void *info, ULONG length, ULONG *retlen )
+NTSTATUS SYSCALL NtQueryInformationToken( HANDLE token, TOKEN_INFORMATION_CLASS class,
+                                          void *info, ULONG length, ULONG *retlen )
 {
     static const ULONG info_len [] =
     {
@@ -489,8 +489,8 @@ NTSTATUS WINAPI NtQueryInformationToken( HANDLE token, TOKEN_INFORMATION_CLASS c
 /***********************************************************************
  *             NtSetInformationToken  (NTDLL.@)
  */
-NTSTATUS WINAPI NtSetInformationToken( HANDLE token, TOKEN_INFORMATION_CLASS class,
-                                       void *info, ULONG length )
+NTSTATUS SYSCALL NtSetInformationToken( HANDLE token, TOKEN_INFORMATION_CLASS class,
+                                        void *info, ULONG length )
 {
     unsigned int ret = STATUS_NOT_IMPLEMENTED;
 
@@ -554,9 +554,9 @@ NTSTATUS WINAPI NtSetInformationToken( HANDLE token, TOKEN_INFORMATION_CLASS cla
 /***********************************************************************
  *             NtCreateLowBoxToken  (NTDLL.@)
  */
-NTSTATUS WINAPI NtCreateLowBoxToken( HANDLE *token_handle, HANDLE token, ACCESS_MASK access,
-                                     OBJECT_ATTRIBUTES *attr, SID *sid, ULONG count,
-                                     SID_AND_ATTRIBUTES *capabilities, ULONG handle_count, HANDLE *handle )
+NTSTATUS SYSCALL NtCreateLowBoxToken( HANDLE *token_handle, HANDLE token, ACCESS_MASK access,
+                                      OBJECT_ATTRIBUTES *attr, SID *sid, ULONG count,
+                                      SID_AND_ATTRIBUTES *capabilities, ULONG handle_count, HANDLE *handle )
 {
     FIXME("(%p, %p, %x, %p, %p, %u, %p, %u, %p): stub\n",
           token_handle, token, (int)access, attr, sid,
@@ -571,8 +571,8 @@ NTSTATUS WINAPI NtCreateLowBoxToken( HANDLE *token_handle, HANDLE token, ACCESS_
 /***********************************************************************
  *             NtAdjustGroupsToken  (NTDLL.@)
  */
-NTSTATUS WINAPI NtAdjustGroupsToken( HANDLE token, BOOLEAN reset, TOKEN_GROUPS *groups,
-                                     ULONG length, TOKEN_GROUPS *prev, ULONG *retlen )
+NTSTATUS SYSCALL NtAdjustGroupsToken( HANDLE token, BOOLEAN reset, TOKEN_GROUPS *groups,
+                                      ULONG length, TOKEN_GROUPS *prev, ULONG *retlen )
 {
     FIXME( "%p %d %p %u %p %p\n", token, reset, groups, (int)length, prev, retlen );
     return STATUS_NOT_IMPLEMENTED;
@@ -582,8 +582,8 @@ NTSTATUS WINAPI NtAdjustGroupsToken( HANDLE token, BOOLEAN reset, TOKEN_GROUPS *
 /***********************************************************************
  *             NtAdjustPrivilegesToken  (NTDLL.@)
  */
-NTSTATUS WINAPI NtAdjustPrivilegesToken( HANDLE token, BOOLEAN disable, TOKEN_PRIVILEGES *privs,
-                                         DWORD length, TOKEN_PRIVILEGES *prev, DWORD *retlen )
+NTSTATUS SYSCALL NtAdjustPrivilegesToken( HANDLE token, BOOLEAN disable, TOKEN_PRIVILEGES *privs,
+                                          DWORD length, TOKEN_PRIVILEGES *prev, DWORD *retlen )
 {
     unsigned int ret;
 
@@ -615,8 +615,8 @@ NTSTATUS WINAPI NtAdjustPrivilegesToken( HANDLE token, BOOLEAN disable, TOKEN_PR
 /***********************************************************************
  *             NtFilterToken  (NTDLL.@)
  */
-NTSTATUS WINAPI NtFilterToken( HANDLE token, ULONG flags, TOKEN_GROUPS *disable_sids,
-                               TOKEN_PRIVILEGES *privileges, TOKEN_GROUPS *restrict_sids, HANDLE *new_token )
+NTSTATUS SYSCALL NtFilterToken( HANDLE token, ULONG flags, TOKEN_GROUPS *disable_sids,
+                                TOKEN_PRIVILEGES *privileges, TOKEN_GROUPS *restrict_sids, HANDLE *new_token )
 {
     data_size_t privileges_len = 0;
     data_size_t sids_len = 0;
@@ -678,7 +678,7 @@ NTSTATUS WINAPI NtFilterToken( HANDLE token, ULONG flags, TOKEN_GROUPS *disable_
 /***********************************************************************
  *             NtPrivilegeCheck  (NTDLL.@)
  */
-NTSTATUS WINAPI NtPrivilegeCheck( HANDLE token, PRIVILEGE_SET *privs, BOOLEAN *res )
+NTSTATUS SYSCALL NtPrivilegeCheck( HANDLE token, PRIVILEGE_SET *privs, BOOLEAN *res )
 {
     unsigned int status;
 
@@ -699,7 +699,7 @@ NTSTATUS WINAPI NtPrivilegeCheck( HANDLE token, PRIVILEGE_SET *privs, BOOLEAN *r
 /***********************************************************************
  *             NtImpersonateAnonymousToken  (NTDLL.@)
  */
-NTSTATUS WINAPI NtImpersonateAnonymousToken( HANDLE thread )
+NTSTATUS SYSCALL NtImpersonateAnonymousToken( HANDLE thread )
 {
     FIXME( "(%p): stub\n", thread );
     return STATUS_NOT_IMPLEMENTED;
@@ -709,9 +709,9 @@ NTSTATUS WINAPI NtImpersonateAnonymousToken( HANDLE thread )
 /***********************************************************************
  *             NtAccessCheck  (NTDLL.@)
  */
-NTSTATUS WINAPI NtAccessCheck( PSECURITY_DESCRIPTOR descr, HANDLE token, ACCESS_MASK access,
-                               GENERIC_MAPPING *mapping, PRIVILEGE_SET *privs, ULONG *retlen,
-                               ULONG *access_granted, NTSTATUS *access_status)
+NTSTATUS SYSCALL NtAccessCheck( PSECURITY_DESCRIPTOR descr, HANDLE token, ACCESS_MASK access,
+                                GENERIC_MAPPING *mapping, PRIVILEGE_SET *privs, ULONG *retlen,
+                                ULONG *access_granted, NTSTATUS *access_status)
 {
     struct object_attributes *objattr;
     data_size_t len;
@@ -763,12 +763,12 @@ NTSTATUS WINAPI NtAccessCheck( PSECURITY_DESCRIPTOR descr, HANDLE token, ACCESS_
 /***********************************************************************
  *             NtAccessCheckAndAuditAlarm  (NTDLL.@)
  */
-NTSTATUS WINAPI NtAccessCheckAndAuditAlarm( UNICODE_STRING *subsystem, HANDLE handle,
-                                            UNICODE_STRING *typename, UNICODE_STRING *objectname,
-                                            PSECURITY_DESCRIPTOR descr, ACCESS_MASK access,
-                                            GENERIC_MAPPING *mapping, BOOLEAN creation,
-                                            ACCESS_MASK *access_granted, BOOLEAN *access_status,
-                                            BOOLEAN *onclose )
+NTSTATUS SYSCALL NtAccessCheckAndAuditAlarm( UNICODE_STRING *subsystem, HANDLE handle,
+                                             UNICODE_STRING *typename, UNICODE_STRING *objectname,
+                                             PSECURITY_DESCRIPTOR descr, ACCESS_MASK access,
+                                             GENERIC_MAPPING *mapping, BOOLEAN creation,
+                                             ACCESS_MASK *access_granted, BOOLEAN *access_status,
+                                             BOOLEAN *onclose )
 {
     FIXME( "(%s, %p, %s, %p, 0x%08x, %p, %d, %p, %p, %p), stub\n",
            debugstr_us(subsystem), handle, debugstr_us(typename), descr, (int)access,
@@ -780,8 +780,8 @@ NTSTATUS WINAPI NtAccessCheckAndAuditAlarm( UNICODE_STRING *subsystem, HANDLE ha
 /***********************************************************************
  *             NtQuerySecurityObject  (NTDLL.@)
  */
-NTSTATUS WINAPI NtQuerySecurityObject( HANDLE handle, SECURITY_INFORMATION info,
-                                       PSECURITY_DESCRIPTOR descr, ULONG length, ULONG *retlen )
+NTSTATUS SYSCALL NtQuerySecurityObject( HANDLE handle, SECURITY_INFORMATION info,
+                                        PSECURITY_DESCRIPTOR descr, ULONG length, ULONG *retlen )
 {
     SECURITY_DESCRIPTOR_RELATIVE *psd = descr;
     unsigned int status;
@@ -840,7 +840,7 @@ NTSTATUS WINAPI NtQuerySecurityObject( HANDLE handle, SECURITY_INFORMATION info,
 /***********************************************************************
  *             NtSetSecurityObject  (NTDLL.@)
  */
-NTSTATUS WINAPI NtSetSecurityObject( HANDLE handle, SECURITY_INFORMATION info, PSECURITY_DESCRIPTOR descr )
+NTSTATUS SYSCALL NtSetSecurityObject( HANDLE handle, SECURITY_INFORMATION info, PSECURITY_DESCRIPTOR descr )
 {
     struct object_attributes *objattr;
     struct security_descriptor *sd;
@@ -885,7 +885,7 @@ NTSTATUS WINAPI NtSetSecurityObject( HANDLE handle, SECURITY_INFORMATION info, P
 /***********************************************************************
  *             NtAllocateLocallyUniqueId  (NTDLL.@)
  */
-NTSTATUS WINAPI NtAllocateLocallyUniqueId( LUID *luid )
+NTSTATUS SYSCALL NtAllocateLocallyUniqueId( LUID *luid )
 {
     unsigned int status;
 
@@ -910,7 +910,7 @@ NTSTATUS WINAPI NtAllocateLocallyUniqueId( LUID *luid )
 /***********************************************************************
  *             NtAllocateUuids  (NTDLL.@)
  */
-NTSTATUS WINAPI NtAllocateUuids( ULARGE_INTEGER *time, ULONG *delta, ULONG *sequence, UCHAR *seed )
+NTSTATUS SYSCALL NtAllocateUuids( ULARGE_INTEGER *time, ULONG *delta, ULONG *sequence, UCHAR *seed )
 {
     FIXME( "(%p,%p,%p,%p), stub.\n", time, delta, sequence, seed );
     return STATUS_SUCCESS;
diff --git a/dlls/ntdll/unix/server.c b/dlls/ntdll/unix/server.c
index 11111111111..11111111111 100644
--- a/dlls/ntdll/unix/server.c
+++ b/dlls/ntdll/unix/server.c
@@ -888,7 +888,7 @@ unsigned int server_wait_for_object( HANDLE handle, BOOL alertable, const LARGE_
 /***********************************************************************
  *              NtContinue  (NTDLL.@)
  */
-NTSTATUS WINAPI NtContinue( CONTEXT *context, BOOLEAN alertable )
+NTSTATUS SYSCALL NtContinue( CONTEXT *context, BOOLEAN alertable )
 {
     user_apc_t apc;
     NTSTATUS status;
@@ -905,7 +905,7 @@ NTSTATUS WINAPI NtContinue( CONTEXT *context, BOOLEAN alertable )
 /***********************************************************************
  *              NtTestAlert  (NTDLL.@)
  */
-NTSTATUS WINAPI NtTestAlert(void)
+NTSTATUS SYSCALL NtTestAlert(void)
 {
     user_apc_t apc;
     NTSTATUS status;
@@ -1938,8 +1938,8 @@ void server_init_thread( void *entry_point, BOOL *suspend )
 /******************************************************************************
  *           NtDuplicateObject
  */
-NTSTATUS WINAPI NtDuplicateObject( HANDLE source_process, HANDLE source, HANDLE dest_process, HANDLE *dest,
-                                   ACCESS_MASK access, ULONG attributes, ULONG options )
+NTSTATUS SYSCALL NtDuplicateObject( HANDLE source_process, HANDLE source, HANDLE dest_process, HANDLE *dest,
+                                    ACCESS_MASK access, ULONG attributes, ULONG options )
 {
     sigset_t sigset;
     unsigned int ret;
@@ -2005,7 +2005,7 @@ NTSTATUS WINAPI NtDuplicateObject( HANDLE source_process, HANDLE source, HANDLE
 /**************************************************************************
  *           NtCompareObjects   (NTDLL.@)
  */
-NTSTATUS WINAPI NtCompareObjects( HANDLE first, HANDLE second )
+NTSTATUS SYSCALL NtCompareObjects( HANDLE first, HANDLE second )
 {
     unsigned int status;
 
@@ -2024,7 +2024,7 @@ NTSTATUS WINAPI NtCompareObjects( HANDLE first, HANDLE second )
 /**************************************************************************
  *           NtClose
  */
-NTSTATUS WINAPI NtClose( HANDLE handle )
+NTSTATUS SYSCALL NtClose( HANDLE handle )
 {
     sigset_t sigset;
     HANDLE port;
diff --git a/dlls/ntdll/unix/signal_arm.c b/dlls/ntdll/unix/signal_arm.c
index 11111111111..11111111111 100644
--- a/dlls/ntdll/unix/signal_arm.c
+++ b/dlls/ntdll/unix/signal_arm.c
@@ -902,7 +902,7 @@ void *get_wow_context( CONTEXT *context )
  *              NtSetContextThread  (NTDLL.@)
  *              ZwSetContextThread  (NTDLL.@)
  */
-NTSTATUS WINAPI NtSetContextThread( HANDLE handle, const CONTEXT *context )
+NTSTATUS SYSCALL NtSetContextThread( HANDLE handle, const CONTEXT *context )
 {
     NTSTATUS ret;
     struct syscall_frame *frame = arm_thread_data()->syscall_frame;
@@ -952,7 +952,7 @@ NTSTATUS WINAPI NtSetContextThread( HANDLE handle, const CONTEXT *context )
  *              NtGetContextThread  (NTDLL.@)
  *              ZwGetContextThread  (NTDLL.@)
  */
-NTSTATUS WINAPI NtGetContextThread( HANDLE handle, CONTEXT *context )
+NTSTATUS SYSCALL NtGetContextThread( HANDLE handle, CONTEXT *context )
 {
     struct syscall_frame *frame = arm_thread_data()->syscall_frame;
     DWORD needed_flags = context->ContextFlags & ~CONTEXT_ARM;
@@ -1237,7 +1237,7 @@ NTSTATUS WINAPI KeUserModeCallback( ULONG id, const void *args, ULONG len, void
 /***********************************************************************
  *           NtCallbackReturn  (NTDLL.@)
  */
-NTSTATUS WINAPI NtCallbackReturn( void *ret_ptr, ULONG ret_len, NTSTATUS status )
+NTSTATUS SYSCALL NtCallbackReturn( void *ret_ptr, ULONG ret_len, NTSTATUS status )
 {
     if (!arm_thread_data()->syscall_frame->prev_frame) return STATUS_NO_CALLBACK_ACTIVE;
     user_mode_callback_return( ret_ptr, ret_len, status, NtCurrentTeb() );
@@ -1516,7 +1516,7 @@ NTSTATUS get_thread_ldt_entry( HANDLE handle, void *data, ULONG len, ULONG *ret_
  *           NtSetLdtEntries   (NTDLL.@)
  *           ZwSetLdtEntries   (NTDLL.@)
  */
-NTSTATUS WINAPI NtSetLdtEntries( ULONG sel1, LDT_ENTRY entry1, ULONG sel2, LDT_ENTRY entry2 )
+NTSTATUS SYSCALL NtSetLdtEntries( ULONG sel1, LDT_ENTRY entry1, ULONG sel2, LDT_ENTRY entry2 )
 {
     return STATUS_NOT_IMPLEMENTED;
 }
diff --git a/dlls/ntdll/unix/signal_arm64.c b/dlls/ntdll/unix/signal_arm64.c
index 11111111111..11111111111 100644
--- a/dlls/ntdll/unix/signal_arm64.c
+++ b/dlls/ntdll/unix/signal_arm64.c
@@ -596,7 +596,7 @@ void *get_wow_context( CONTEXT *context )
  *              NtSetContextThread  (NTDLL.@)
  *              ZwSetContextThread  (NTDLL.@)
  */
-NTSTATUS WINAPI NtSetContextThread( HANDLE handle, const CONTEXT *context )
+NTSTATUS SYSCALL NtSetContextThread( HANDLE handle, const CONTEXT *context )
 {
     struct syscall_frame *frame = arm64_thread_data()->syscall_frame;
     NTSTATUS ret = STATUS_SUCCESS;
@@ -645,7 +645,7 @@ NTSTATUS WINAPI NtSetContextThread( HANDLE handle, const CONTEXT *context )
  *              NtGetContextThread  (NTDLL.@)
  *              ZwGetContextThread  (NTDLL.@)
  */
-NTSTATUS WINAPI NtGetContextThread( HANDLE handle, CONTEXT *context )
+NTSTATUS SYSCALL NtGetContextThread( HANDLE handle, CONTEXT *context )
 {
     struct syscall_frame *frame = arm64_thread_data()->syscall_frame;
     DWORD needed_flags = context->ContextFlags & ~CONTEXT_ARM64;
@@ -1193,7 +1193,7 @@ NTSTATUS WINAPI KeUserModeCallback( ULONG id, const void *args, ULONG len, void
 /***********************************************************************
  *           NtCallbackReturn  (NTDLL.@)
  */
-NTSTATUS WINAPI NtCallbackReturn( void *ret_ptr, ULONG ret_len, NTSTATUS status )
+NTSTATUS SYSCALL NtCallbackReturn( void *ret_ptr, ULONG ret_len, NTSTATUS status )
 {
     if (!arm64_thread_data()->syscall_frame->prev_frame) return STATUS_NO_CALLBACK_ACTIVE;
     user_mode_callback_return( ret_ptr, ret_len, status, NtCurrentTeb() );
@@ -1526,7 +1526,7 @@ NTSTATUS get_thread_ldt_entry( HANDLE handle, void *data, ULONG len, ULONG *ret_
  *           NtSetLdtEntries   (NTDLL.@)
  *           ZwSetLdtEntries   (NTDLL.@)
  */
-NTSTATUS WINAPI NtSetLdtEntries( ULONG sel1, LDT_ENTRY entry1, ULONG sel2, LDT_ENTRY entry2 )
+NTSTATUS SYSCALL NtSetLdtEntries( ULONG sel1, LDT_ENTRY entry1, ULONG sel2, LDT_ENTRY entry2 )
 {
     return STATUS_NOT_IMPLEMENTED;
 }
diff --git a/dlls/ntdll/unix/signal_i386.c b/dlls/ntdll/unix/signal_i386.c
index 11111111111..11111111111 100644
--- a/dlls/ntdll/unix/signal_i386.c
+++ b/dlls/ntdll/unix/signal_i386.c
@@ -887,7 +887,7 @@ void *get_wow_context( CONTEXT *context )
  *              NtSetContextThread  (NTDLL.@)
  *              ZwSetContextThread  (NTDLL.@)
  */
-NTSTATUS WINAPI NtSetContextThread( HANDLE handle, const CONTEXT *context )
+NTSTATUS SYSCALL NtSetContextThread( HANDLE handle, const CONTEXT *context )
 {
     NTSTATUS ret = STATUS_SUCCESS;
     struct syscall_frame *frame = x86_thread_data()->syscall_frame;
@@ -1002,7 +1002,7 @@ NTSTATUS WINAPI NtSetContextThread( HANDLE handle, const CONTEXT *context )
  * Note: we use a small assembly wrapper to save the necessary registers
  *       in case we are fetching the context of the current thread.
  */
-NTSTATUS WINAPI NtGetContextThread( HANDLE handle, CONTEXT *context )
+NTSTATUS SYSCALL NtGetContextThread( HANDLE handle, CONTEXT *context )
 {
     struct syscall_frame *frame = x86_thread_data()->syscall_frame;
     DWORD needed_flags = context->ContextFlags & ~CONTEXT_i386;
@@ -1694,7 +1694,7 @@ NTSTATUS WINAPI KeUserModeCallback( ULONG id, const void *args, ULONG len, void
 /***********************************************************************
  *           NtCallbackReturn  (NTDLL.@)
  */
-NTSTATUS WINAPI NtCallbackReturn( void *ret_ptr, ULONG ret_len, NTSTATUS status )
+NTSTATUS SYSCALL NtCallbackReturn( void *ret_ptr, ULONG ret_len, NTSTATUS status )
 {
     if (!x86_thread_data()->syscall_frame->prev_frame) return STATUS_NO_CALLBACK_ACTIVE;
     user_mode_callback_return( ret_ptr, ret_len, status, NtCurrentTeb() );
@@ -2322,7 +2322,7 @@ NTSTATUS get_thread_ldt_entry( HANDLE handle, void *data, ULONG len, ULONG *ret_
  *           NtSetLdtEntries   (NTDLL.@)
  *           ZwSetLdtEntries   (NTDLL.@)
  */
-NTSTATUS WINAPI NtSetLdtEntries( ULONG sel1, LDT_ENTRY entry1, ULONG sel2, LDT_ENTRY entry2 )
+NTSTATUS SYSCALL NtSetLdtEntries( ULONG sel1, LDT_ENTRY entry1, ULONG sel2, LDT_ENTRY entry2 )
 {
     sigset_t sigset;
 
diff --git a/dlls/ntdll/unix/signal_x86_64.c b/dlls/ntdll/unix/signal_x86_64.c
index 11111111111..11111111111 100644
--- a/dlls/ntdll/unix/signal_x86_64.c
+++ b/dlls/ntdll/unix/signal_x86_64.c
@@ -977,7 +977,7 @@ void *get_wow_context( CONTEXT *context )
  *              NtSetContextThread  (NTDLL.@)
  *              ZwSetContextThread  (NTDLL.@)
  */
-NTSTATUS WINAPI NtSetContextThread( HANDLE handle, const CONTEXT *context )
+NTSTATUS SYSCALL NtSetContextThread( HANDLE handle, const CONTEXT *context )
 {
     NTSTATUS ret = STATUS_SUCCESS;
     DWORD flags = context->ContextFlags & ~CONTEXT_AMD64;
@@ -1087,7 +1087,7 @@ NTSTATUS WINAPI NtSetContextThread( HANDLE handle, const CONTEXT *context )
  *              NtGetContextThread  (NTDLL.@)
  *              ZwGetContextThread  (NTDLL.@)
  */
-NTSTATUS WINAPI NtGetContextThread( HANDLE handle, CONTEXT *context )
+NTSTATUS SYSCALL NtGetContextThread( HANDLE handle, CONTEXT *context )
 {
     struct syscall_frame *frame = amd64_thread_data()->syscall_frame;
     DWORD needed_flags = context->ContextFlags & ~CONTEXT_AMD64;
@@ -1771,7 +1771,7 @@ NTSTATUS WINAPI KeUserModeCallback( ULONG id, const void *args, ULONG len, void
 /***********************************************************************
  *           NtCallbackReturn  (NTDLL.@)
  */
-NTSTATUS WINAPI NtCallbackReturn( void *ret_ptr, ULONG ret_len, NTSTATUS status )
+NTSTATUS SYSCALL NtCallbackReturn( void *ret_ptr, ULONG ret_len, NTSTATUS status )
 {
     if (!amd64_thread_data()->syscall_frame->prev_frame) return STATUS_NO_CALLBACK_ACTIVE;
     user_mode_callback_return( ret_ptr, ret_len, status, NtCurrentTeb() );
@@ -2533,7 +2533,7 @@ NTSTATUS get_thread_ldt_entry( HANDLE handle, void *data, ULONG len, ULONG *ret_
  *           NtSetLdtEntries   (NTDLL.@)
  *           ZwSetLdtEntries   (NTDLL.@)
  */
-NTSTATUS WINAPI NtSetLdtEntries( ULONG sel1, LDT_ENTRY entry1, ULONG sel2, LDT_ENTRY entry2 )
+NTSTATUS SYSCALL NtSetLdtEntries( ULONG sel1, LDT_ENTRY entry1, ULONG sel2, LDT_ENTRY entry2 )
 {
     return STATUS_NOT_IMPLEMENTED;
 }
diff --git a/dlls/ntdll/unix/sync.c b/dlls/ntdll/unix/sync.c
index 11111111111..11111111111 100644
--- a/dlls/ntdll/unix/sync.c
+++ b/dlls/ntdll/unix/sync.c
@@ -1342,8 +1342,8 @@ static NTSTATUS fast_signal_and_wait( HANDLE signal, HANDLE wait,
 /******************************************************************************
  *              NtCreateSemaphore (NTDLL.@)
  */
-NTSTATUS WINAPI NtCreateSemaphore( HANDLE *handle, ACCESS_MASK access, const OBJECT_ATTRIBUTES *attr,
-                                   LONG initial, LONG max )
+NTSTATUS SYSCALL NtCreateSemaphore( HANDLE *handle, ACCESS_MASK access, const OBJECT_ATTRIBUTES *attr,
+                                    LONG initial, LONG max )
 {
     unsigned int ret;
     data_size_t len;
@@ -1378,7 +1378,7 @@ NTSTATUS WINAPI NtCreateSemaphore( HANDLE *handle, ACCESS_MASK access, const OBJ
 /******************************************************************************
  *              NtOpenSemaphore (NTDLL.@)
  */
-NTSTATUS WINAPI NtOpenSemaphore( HANDLE *handle, ACCESS_MASK access, const OBJECT_ATTRIBUTES *attr )
+NTSTATUS SYSCALL NtOpenSemaphore( HANDLE *handle, ACCESS_MASK access, const OBJECT_ATTRIBUTES *attr )
 {
     unsigned int ret;
 
@@ -1410,8 +1410,8 @@ NTSTATUS WINAPI NtOpenSemaphore( HANDLE *handle, ACCESS_MASK access, const OBJEC
 /******************************************************************************
  *              NtQuerySemaphore (NTDLL.@)
  */
-NTSTATUS WINAPI NtQuerySemaphore( HANDLE handle, SEMAPHORE_INFORMATION_CLASS class,
-                                  void *info, ULONG len, ULONG *ret_len )
+NTSTATUS SYSCALL NtQuerySemaphore( HANDLE handle, SEMAPHORE_INFORMATION_CLASS class,
+                                   void *info, ULONG len, ULONG *ret_len )
 {
     unsigned int ret;
     SEMAPHORE_BASIC_INFORMATION *out = info;
@@ -1456,7 +1456,7 @@ NTSTATUS WINAPI NtQuerySemaphore( HANDLE handle, SEMAPHORE_INFORMATION_CLASS cla
 /******************************************************************************
  *              NtReleaseSemaphore (NTDLL.@)
  */
-NTSTATUS WINAPI NtReleaseSemaphore( HANDLE handle, ULONG count, ULONG *previous )
+NTSTATUS SYSCALL NtReleaseSemaphore( HANDLE handle, ULONG count, ULONG *previous )
 {
     unsigned int ret;
 
@@ -1486,8 +1486,8 @@ NTSTATUS WINAPI NtReleaseSemaphore( HANDLE handle, ULONG count, ULONG *previous
 /**************************************************************************
  *              NtCreateEvent (NTDLL.@)
  */
-NTSTATUS WINAPI NtCreateEvent( HANDLE *handle, ACCESS_MASK access, const OBJECT_ATTRIBUTES *attr,
-                               EVENT_TYPE type, BOOLEAN state )
+NTSTATUS SYSCALL NtCreateEvent( HANDLE *handle, ACCESS_MASK access, const OBJECT_ATTRIBUTES *attr,
+                                EVENT_TYPE type, BOOLEAN state )
 {
     unsigned int ret;
     data_size_t len;
@@ -1523,7 +1523,7 @@ NTSTATUS WINAPI NtCreateEvent( HANDLE *handle, ACCESS_MASK access, const OBJECT_
 /******************************************************************************
  *              NtOpenEvent (NTDLL.@)
  */
-NTSTATUS WINAPI NtOpenEvent( HANDLE *handle, ACCESS_MASK access, const OBJECT_ATTRIBUTES *attr )
+NTSTATUS SYSCALL NtOpenEvent( HANDLE *handle, ACCESS_MASK access, const OBJECT_ATTRIBUTES *attr )
 {
     unsigned int ret;
 
@@ -1554,7 +1554,7 @@ NTSTATUS WINAPI NtOpenEvent( HANDLE *handle, ACCESS_MASK access, const OBJECT_AT
 /******************************************************************************
  *              NtSetEvent (NTDLL.@)
  */
-NTSTATUS WINAPI NtSetEvent( HANDLE handle, LONG *prev_state )
+NTSTATUS SYSCALL NtSetEvent( HANDLE handle, LONG *prev_state )
 {
     /* This comment is a dummy to make sure this patch applies in the right place. */
     unsigned int ret;
@@ -1583,7 +1583,7 @@ NTSTATUS WINAPI NtSetEvent( HANDLE handle, LONG *prev_state )
 /******************************************************************************
  *              NtResetEvent (NTDLL.@)
  */
-NTSTATUS WINAPI NtResetEvent( HANDLE handle, LONG *prev_state )
+NTSTATUS SYSCALL NtResetEvent( HANDLE handle, LONG *prev_state )
 {
     /* This comment is a dummy to make sure this patch applies in the right place. */
     unsigned int ret;
@@ -1613,7 +1613,7 @@ NTSTATUS WINAPI NtResetEvent( HANDLE handle, LONG *prev_state )
 /******************************************************************************
  *              NtClearEvent (NTDLL.@)
  */
-NTSTATUS WINAPI NtClearEvent( HANDLE handle )
+NTSTATUS SYSCALL NtClearEvent( HANDLE handle )
 {
     /* FIXME: same as NtResetEvent ??? */
     return NtResetEvent( handle, NULL );
@@ -1623,7 +1623,7 @@ NTSTATUS WINAPI NtClearEvent( HANDLE handle )
 /******************************************************************************
  *              NtPulseEvent (NTDLL.@)
  */
-NTSTATUS WINAPI NtPulseEvent( HANDLE handle, LONG *prev_state )
+NTSTATUS SYSCALL NtPulseEvent( HANDLE handle, LONG *prev_state )
 {
     unsigned int ret;
 
@@ -1651,8 +1651,8 @@ NTSTATUS WINAPI NtPulseEvent( HANDLE handle, LONG *prev_state )
 /******************************************************************************
  *              NtQueryEvent (NTDLL.@)
  */
-NTSTATUS WINAPI NtQueryEvent( HANDLE handle, EVENT_INFORMATION_CLASS class,
-                              void *info, ULONG len, ULONG *ret_len )
+NTSTATUS SYSCALL NtQueryEvent( HANDLE handle, EVENT_INFORMATION_CLASS class,
+                               void *info, ULONG len, ULONG *ret_len )
 {
     unsigned int ret;
     EVENT_BASIC_INFORMATION *out = info;
@@ -1697,8 +1697,8 @@ NTSTATUS WINAPI NtQueryEvent( HANDLE handle, EVENT_INFORMATION_CLASS class,
 /******************************************************************************
  *              NtCreateMutant (NTDLL.@)
  */
-NTSTATUS WINAPI NtCreateMutant( HANDLE *handle, ACCESS_MASK access, const OBJECT_ATTRIBUTES *attr,
-                                BOOLEAN owned )
+NTSTATUS SYSCALL NtCreateMutant( HANDLE *handle, ACCESS_MASK access, const OBJECT_ATTRIBUTES *attr,
+                                 BOOLEAN owned )
 {
     unsigned int ret;
     data_size_t len;
@@ -1732,7 +1732,7 @@ NTSTATUS WINAPI NtCreateMutant( HANDLE *handle, ACCESS_MASK access, const OBJECT
 /**************************************************************************
  *              NtOpenMutant (NTDLL.@)
  */
-NTSTATUS WINAPI NtOpenMutant( HANDLE *handle, ACCESS_MASK access, const OBJECT_ATTRIBUTES *attr )
+NTSTATUS SYSCALL NtOpenMutant( HANDLE *handle, ACCESS_MASK access, const OBJECT_ATTRIBUTES *attr )
 {
     unsigned int ret;
 
@@ -1763,7 +1763,7 @@ NTSTATUS WINAPI NtOpenMutant( HANDLE *handle, ACCESS_MASK access, const OBJECT_A
 /**************************************************************************
  *              NtReleaseMutant (NTDLL.@)
  */
-NTSTATUS WINAPI NtReleaseMutant( HANDLE handle, LONG *prev_count )
+NTSTATUS SYSCALL NtReleaseMutant( HANDLE handle, LONG *prev_count )
 {
     unsigned int ret;
 
@@ -1790,8 +1790,8 @@ NTSTATUS WINAPI NtReleaseMutant( HANDLE handle, LONG *prev_count )
 /******************************************************************
  *              NtQueryMutant (NTDLL.@)
  */
-NTSTATUS WINAPI NtQueryMutant( HANDLE handle, MUTANT_INFORMATION_CLASS class,
-                               void *info, ULONG len, ULONG *ret_len )
+NTSTATUS SYSCALL NtQueryMutant( HANDLE handle, MUTANT_INFORMATION_CLASS class,
+                                void *info, ULONG len, ULONG *ret_len )
 {
     unsigned int ret;
     MUTANT_BASIC_INFORMATION *out = info;
@@ -1837,7 +1837,7 @@ NTSTATUS WINAPI NtQueryMutant( HANDLE handle, MUTANT_INFORMATION_CLASS class,
 /**************************************************************************
  *		NtCreateJobObject (NTDLL.@)
  */
-NTSTATUS WINAPI NtCreateJobObject( HANDLE *handle, ACCESS_MASK access, const OBJECT_ATTRIBUTES *attr )
+NTSTATUS SYSCALL NtCreateJobObject( HANDLE *handle, ACCESS_MASK access, const OBJECT_ATTRIBUTES *attr )
 {
     unsigned int ret;
     data_size_t len;
@@ -1862,7 +1862,7 @@ NTSTATUS WINAPI NtCreateJobObject( HANDLE *handle, ACCESS_MASK access, const OBJ
 /**************************************************************************
  *		NtOpenJobObject (NTDLL.@)
  */
-NTSTATUS WINAPI NtOpenJobObject( HANDLE *handle, ACCESS_MASK access, const OBJECT_ATTRIBUTES *attr )
+NTSTATUS SYSCALL NtOpenJobObject( HANDLE *handle, ACCESS_MASK access, const OBJECT_ATTRIBUTES *attr )
 {
     unsigned int ret;
 
@@ -1887,7 +1887,7 @@ NTSTATUS WINAPI NtOpenJobObject( HANDLE *handle, ACCESS_MASK access, const OBJEC
 /**************************************************************************
  *		NtTerminateJobObject (NTDLL.@)
  */
-NTSTATUS WINAPI NtTerminateJobObject( HANDLE handle, NTSTATUS status )
+NTSTATUS SYSCALL NtTerminateJobObject( HANDLE handle, NTSTATUS status )
 {
     unsigned int ret;
 
@@ -1908,8 +1908,8 @@ NTSTATUS WINAPI NtTerminateJobObject( HANDLE handle, NTSTATUS status )
 /**************************************************************************
  *		NtQueryInformationJobObject (NTDLL.@)
  */
-NTSTATUS WINAPI NtQueryInformationJobObject( HANDLE handle, JOBOBJECTINFOCLASS class, void *info,
-                                             ULONG len, ULONG *ret_len )
+NTSTATUS SYSCALL NtQueryInformationJobObject( HANDLE handle, JOBOBJECTINFOCLASS class, void *info,
+                                              ULONG len, ULONG *ret_len )
 {
     unsigned int ret;
 
@@ -2003,7 +2003,7 @@ NTSTATUS WINAPI NtQueryInformationJobObject( HANDLE handle, JOBOBJECTINFOCLASS c
 /**************************************************************************
  *		NtSetInformationJobObject (NTDLL.@)
  */
-NTSTATUS WINAPI NtSetInformationJobObject( HANDLE handle, JOBOBJECTINFOCLASS class, void *info, ULONG len )
+NTSTATUS SYSCALL NtSetInformationJobObject( HANDLE handle, JOBOBJECTINFOCLASS class, void *info, ULONG len )
 {
     unsigned int status = STATUS_NOT_IMPLEMENTED;
     JOBOBJECT_BASIC_LIMIT_INFORMATION *basic_limit;
@@ -2058,7 +2058,7 @@ NTSTATUS WINAPI NtSetInformationJobObject( HANDLE handle, JOBOBJECTINFOCLASS cla
 /**************************************************************************
  *		NtIsProcessInJob (NTDLL.@)
  */
-NTSTATUS WINAPI NtIsProcessInJob( HANDLE process, HANDLE job )
+NTSTATUS SYSCALL NtIsProcessInJob( HANDLE process, HANDLE job )
 {
     unsigned int status;
 
@@ -2078,7 +2078,7 @@ NTSTATUS WINAPI NtIsProcessInJob( HANDLE process, HANDLE job )
 /**************************************************************************
  *		NtAssignProcessToJobObject (NTDLL.@)
  */
-NTSTATUS WINAPI NtAssignProcessToJobObject( HANDLE job, HANDLE process )
+NTSTATUS SYSCALL NtAssignProcessToJobObject( HANDLE job, HANDLE process )
 {
     unsigned int status;
 
@@ -2098,8 +2098,8 @@ NTSTATUS WINAPI NtAssignProcessToJobObject( HANDLE job, HANDLE process )
 /**********************************************************************
  *           NtCreateDebugObject  (NTDLL.@)
  */
-NTSTATUS WINAPI NtCreateDebugObject( HANDLE *handle, ACCESS_MASK access,
-                                     OBJECT_ATTRIBUTES *attr, ULONG flags )
+NTSTATUS SYSCALL NtCreateDebugObject( HANDLE *handle, ACCESS_MASK access,
+                                      OBJECT_ATTRIBUTES *attr, ULONG flags )
 {
     unsigned int ret;
     data_size_t len;
@@ -2126,8 +2126,8 @@ NTSTATUS WINAPI NtCreateDebugObject( HANDLE *handle, ACCESS_MASK access,
 /**********************************************************************
  *           NtSetInformationDebugObject  (NTDLL.@)
  */
-NTSTATUS WINAPI NtSetInformationDebugObject( HANDLE handle, DEBUGOBJECTINFOCLASS class,
-                                             void *info, ULONG len, ULONG *ret_len )
+NTSTATUS SYSCALL NtSetInformationDebugObject( HANDLE handle, DEBUGOBJECTINFOCLASS class,
+                                              void *info, ULONG len, ULONG *ret_len )
 {
     unsigned int ret;
     ULONG flags;
@@ -2256,8 +2256,8 @@ static NTSTATUS get_image_machine( HANDLE handle, USHORT *machine )
 /**********************************************************************
  *           NtWaitForDebugEvent  (NTDLL.@)
  */
-NTSTATUS WINAPI NtWaitForDebugEvent( HANDLE handle, BOOLEAN alertable, LARGE_INTEGER *timeout,
-                                     DBGUI_WAIT_STATE_CHANGE *state )
+NTSTATUS SYSCALL NtWaitForDebugEvent( HANDLE handle, BOOLEAN alertable, LARGE_INTEGER *timeout,
+                                      DBGUI_WAIT_STATE_CHANGE *state )
 {
     debug_event_t data;
     unsigned int ret;
@@ -2310,7 +2310,7 @@ NTSTATUS WINAPI NtWaitForDebugEvent( HANDLE handle, BOOLEAN alertable, LARGE_INT
 /**************************************************************************
  *           NtCreateDirectoryObject   (NTDLL.@)
  */
-NTSTATUS WINAPI NtCreateDirectoryObject( HANDLE *handle, ACCESS_MASK access, OBJECT_ATTRIBUTES *attr )
+NTSTATUS SYSCALL NtCreateDirectoryObject( HANDLE *handle, ACCESS_MASK access, OBJECT_ATTRIBUTES *attr )
 {
     unsigned int ret;
     data_size_t len;
@@ -2335,7 +2335,7 @@ NTSTATUS WINAPI NtCreateDirectoryObject( HANDLE *handle, ACCESS_MASK access, OBJ
 /**************************************************************************
  *           NtOpenDirectoryObject   (NTDLL.@)
  */
-NTSTATUS WINAPI NtOpenDirectoryObject( HANDLE *handle, ACCESS_MASK access, const OBJECT_ATTRIBUTES *attr )
+NTSTATUS SYSCALL NtOpenDirectoryObject( HANDLE *handle, ACCESS_MASK access, const OBJECT_ATTRIBUTES *attr )
 {
     unsigned int ret;
 
@@ -2360,9 +2360,9 @@ NTSTATUS WINAPI NtOpenDirectoryObject( HANDLE *handle, ACCESS_MASK access, const
 /**************************************************************************
  *           NtQueryDirectoryObject   (NTDLL.@)
  */
-NTSTATUS WINAPI NtQueryDirectoryObject( HANDLE handle, DIRECTORY_BASIC_INFORMATION *info,
-                                        ULONG size, BOOLEAN single_entry, BOOLEAN restart,
-                                        ULONG *context, ULONG *ret_size )
+NTSTATUS SYSCALL NtQueryDirectoryObject( HANDLE handle, DIRECTORY_BASIC_INFORMATION *info,
+                                         ULONG size, BOOLEAN single_entry, BOOLEAN restart,
+                                         ULONG *context, ULONG *ret_size )
 {
     unsigned int i, count, total_len, pos, used_size, used_count, status;
     ULONG index = restart ? 0 : *context;
@@ -2454,8 +2454,8 @@ NTSTATUS WINAPI NtQueryDirectoryObject( HANDLE handle, DIRECTORY_BASIC_INFORMATI
 /**************************************************************************
  *           NtCreateSymbolicLinkObject   (NTDLL.@)
  */
-NTSTATUS WINAPI NtCreateSymbolicLinkObject( HANDLE *handle, ACCESS_MASK access,
-                                            OBJECT_ATTRIBUTES *attr, UNICODE_STRING *target )
+NTSTATUS SYSCALL NtCreateSymbolicLinkObject( HANDLE *handle, ACCESS_MASK access,
+                                             OBJECT_ATTRIBUTES *attr, UNICODE_STRING *target )
 {
     unsigned int ret;
     data_size_t len;
@@ -2483,8 +2483,8 @@ NTSTATUS WINAPI NtCreateSymbolicLinkObject( HANDLE *handle, ACCESS_MASK access,
 /**************************************************************************
  *           NtOpenSymbolicLinkObject   (NTDLL.@)
  */
-NTSTATUS WINAPI NtOpenSymbolicLinkObject( HANDLE *handle, ACCESS_MASK access,
-                                          const OBJECT_ATTRIBUTES *attr )
+NTSTATUS SYSCALL NtOpenSymbolicLinkObject( HANDLE *handle, ACCESS_MASK access,
+                                           const OBJECT_ATTRIBUTES *attr )
 {
     unsigned int ret;
 
@@ -2509,7 +2509,7 @@ NTSTATUS WINAPI NtOpenSymbolicLinkObject( HANDLE *handle, ACCESS_MASK access,
 /**************************************************************************
  *           NtQuerySymbolicLinkObject   (NTDLL.@)
  */
-NTSTATUS WINAPI NtQuerySymbolicLinkObject( HANDLE handle, UNICODE_STRING *target, ULONG *length )
+NTSTATUS SYSCALL NtQuerySymbolicLinkObject( HANDLE handle, UNICODE_STRING *target, ULONG *length )
 {
     unsigned int ret;
 
@@ -2536,7 +2536,7 @@ NTSTATUS WINAPI NtQuerySymbolicLinkObject( HANDLE handle, UNICODE_STRING *target
 /**************************************************************************
  *		NtMakeTemporaryObject (NTDLL.@)
  */
-NTSTATUS WINAPI NtMakeTemporaryObject( HANDLE handle )
+NTSTATUS SYSCALL NtMakeTemporaryObject( HANDLE handle )
 {
     unsigned int ret;
 
@@ -2555,8 +2555,8 @@ NTSTATUS WINAPI NtMakeTemporaryObject( HANDLE handle )
 /**************************************************************************
  *		NtCreateTimer (NTDLL.@)
  */
-NTSTATUS WINAPI NtCreateTimer( HANDLE *handle, ACCESS_MASK access, const OBJECT_ATTRIBUTES *attr,
-                               TIMER_TYPE type )
+NTSTATUS SYSCALL NtCreateTimer( HANDLE *handle, ACCESS_MASK access, const OBJECT_ATTRIBUTES *attr,
+                                TIMER_TYPE type )
 {
     unsigned int ret;
     data_size_t len;
@@ -2585,7 +2585,7 @@ NTSTATUS WINAPI NtCreateTimer( HANDLE *handle, ACCESS_MASK access, const OBJECT_
 /**************************************************************************
  *		NtOpenTimer (NTDLL.@)
  */
-NTSTATUS WINAPI NtOpenTimer( HANDLE *handle, ACCESS_MASK access, const OBJECT_ATTRIBUTES *attr )
+NTSTATUS SYSCALL NtOpenTimer( HANDLE *handle, ACCESS_MASK access, const OBJECT_ATTRIBUTES *attr )
 {
     unsigned int ret;
 
@@ -2610,8 +2610,8 @@ NTSTATUS WINAPI NtOpenTimer( HANDLE *handle, ACCESS_MASK access, const OBJECT_AT
 /**************************************************************************
  *		NtSetTimer (NTDLL.@)
  */
-NTSTATUS WINAPI NtSetTimer( HANDLE handle, const LARGE_INTEGER *when, PTIMER_APC_ROUTINE callback,
-                            void *arg, BOOLEAN resume, ULONG period, BOOLEAN *state )
+NTSTATUS SYSCALL NtSetTimer( HANDLE handle, const LARGE_INTEGER *when, PTIMER_APC_ROUTINE callback,
+                             void *arg, BOOLEAN resume, ULONG period, BOOLEAN *state )
 {
     unsigned int ret = STATUS_SUCCESS;
 
@@ -2638,7 +2638,7 @@ NTSTATUS WINAPI NtSetTimer( HANDLE handle, const LARGE_INTEGER *when, PTIMER_APC
 /**************************************************************************
  *		NtCancelTimer (NTDLL.@)
  */
-NTSTATUS WINAPI NtCancelTimer( HANDLE handle, BOOLEAN *state )
+NTSTATUS SYSCALL NtCancelTimer( HANDLE handle, BOOLEAN *state )
 {
     unsigned int ret;
 
@@ -2656,8 +2656,8 @@ NTSTATUS WINAPI NtCancelTimer( HANDLE handle, BOOLEAN *state )
 /******************************************************************************
  *		NtQueryTimer (NTDLL.@)
  */
-NTSTATUS WINAPI NtQueryTimer( HANDLE handle, TIMER_INFORMATION_CLASS class,
-                              void *info, ULONG len, ULONG *ret_len )
+NTSTATUS SYSCALL NtQueryTimer( HANDLE handle, TIMER_INFORMATION_CLASS class,
+                               void *info, ULONG len, ULONG *ret_len )
 {
     TIMER_BASIC_INFORMATION *basic_info = info;
     unsigned int ret;
@@ -2705,8 +2705,8 @@ NTSTATUS WINAPI NtQueryTimer( HANDLE handle, TIMER_INFORMATION_CLASS class,
 /******************************************************************
  *		NtWaitForMultipleObjects (NTDLL.@)
  */
-NTSTATUS WINAPI NtWaitForMultipleObjects( DWORD count, const HANDLE *handles, BOOLEAN wait_any,
-                                          BOOLEAN alertable, const LARGE_INTEGER *timeout )
+NTSTATUS SYSCALL NtWaitForMultipleObjects( DWORD count, const HANDLE *handles, BOOLEAN wait_any,
+                                           BOOLEAN alertable, const LARGE_INTEGER *timeout )
 {
     select_op_t select_op;
     UINT i, flags = SELECT_INTERRUPTIBLE;
@@ -2741,7 +2741,7 @@ NTSTATUS WINAPI NtWaitForMultipleObjects( DWORD count, const HANDLE *handles, BO
 /******************************************************************
  *		NtWaitForSingleObject (NTDLL.@)
  */
-NTSTATUS WINAPI NtWaitForSingleObject( HANDLE handle, BOOLEAN alertable, const LARGE_INTEGER *timeout )
+NTSTATUS SYSCALL NtWaitForSingleObject( HANDLE handle, BOOLEAN alertable, const LARGE_INTEGER *timeout )
 {
     return NtWaitForMultipleObjects( 1, &handle, FALSE, alertable, timeout );
 }
@@ -2750,8 +2750,8 @@ NTSTATUS WINAPI NtWaitForSingleObject( HANDLE handle, BOOLEAN alertable, const L
 /******************************************************************
  *		NtSignalAndWaitForSingleObject (NTDLL.@)
  */
-NTSTATUS WINAPI NtSignalAndWaitForSingleObject( HANDLE signal, HANDLE wait,
-                                                BOOLEAN alertable, const LARGE_INTEGER *timeout )
+NTSTATUS SYSCALL NtSignalAndWaitForSingleObject( HANDLE signal, HANDLE wait,
+                                                 BOOLEAN alertable, const LARGE_INTEGER *timeout )
 {
     select_op_t select_op;
     UINT flags = SELECT_INTERRUPTIBLE;
@@ -2779,7 +2779,7 @@ NTSTATUS WINAPI NtSignalAndWaitForSingleObject( HANDLE signal, HANDLE wait,
 /******************************************************************
  *		NtYieldExecution (NTDLL.@)
  */
-NTSTATUS WINAPI NtYieldExecution(void)
+NTSTATUS SYSCALL NtYieldExecution(void)
 {
 #ifdef HAVE_SCHED_YIELD
     sched_yield();
@@ -2793,7 +2793,7 @@ NTSTATUS WINAPI NtYieldExecution(void)
 /******************************************************************
  *		NtDelayExecution (NTDLL.@)
  */
-NTSTATUS WINAPI NtDelayExecution( BOOLEAN alertable, const LARGE_INTEGER *timeout )
+NTSTATUS SYSCALL NtDelayExecution( BOOLEAN alertable, const LARGE_INTEGER *timeout )
 {
     /* if alertable, we need to query the server */
     if (alertable)
@@ -2852,7 +2852,7 @@ NTSTATUS WINAPI NtDelayExecution( BOOLEAN alertable, const LARGE_INTEGER *timeou
 /******************************************************************************
  *              NtQueryPerformanceCounter (NTDLL.@)
  */
-NTSTATUS WINAPI NtQueryPerformanceCounter( LARGE_INTEGER *counter, LARGE_INTEGER *frequency )
+NTSTATUS SYSCALL NtQueryPerformanceCounter( LARGE_INTEGER *counter, LARGE_INTEGER *frequency )
 {
     counter->QuadPart = monotonic_counter();
     if (frequency) frequency->QuadPart = TICKSPERSEC;
@@ -2863,7 +2863,7 @@ NTSTATUS WINAPI NtQueryPerformanceCounter( LARGE_INTEGER *counter, LARGE_INTEGER
 /***********************************************************************
  *              NtQuerySystemTime (NTDLL.@)
  */
-NTSTATUS WINAPI NtQuerySystemTime( LARGE_INTEGER *time )
+NTSTATUS SYSCALL NtQuerySystemTime( LARGE_INTEGER *time )
 {
 #ifdef HAVE_CLOCK_GETTIME
     struct timespec ts;
@@ -2901,7 +2901,7 @@ NTSTATUS WINAPI NtQuerySystemTime( LARGE_INTEGER *time )
 /***********************************************************************
  *              NtSetSystemTime (NTDLL.@)
  */
-NTSTATUS WINAPI NtSetSystemTime( const LARGE_INTEGER *new, LARGE_INTEGER *old )
+NTSTATUS SYSCALL NtSetSystemTime( const LARGE_INTEGER *new, LARGE_INTEGER *old )
 {
     LARGE_INTEGER now;
     LONGLONG diff;
@@ -2918,7 +2918,7 @@ NTSTATUS WINAPI NtSetSystemTime( const LARGE_INTEGER *new, LARGE_INTEGER *old )
 /***********************************************************************
  *              NtQueryTimerResolution (NTDLL.@)
  */
-NTSTATUS WINAPI NtQueryTimerResolution( ULONG *min_res, ULONG *max_res, ULONG *current_res )
+NTSTATUS SYSCALL NtQueryTimerResolution( ULONG *min_res, ULONG *max_res, ULONG *current_res )
 {
     TRACE( "(%p,%p,%p)\n", min_res, max_res, current_res );
     *max_res = *current_res = 10000; /* See NtSetTimerResolution() */
@@ -2930,7 +2930,7 @@ NTSTATUS WINAPI NtQueryTimerResolution( ULONG *min_res, ULONG *max_res, ULONG *c
 /***********************************************************************
  *              NtSetTimerResolution (NTDLL.@)
  */
-NTSTATUS WINAPI NtSetTimerResolution( ULONG res, BOOLEAN set, ULONG *current_res )
+NTSTATUS SYSCALL NtSetTimerResolution( ULONG res, BOOLEAN set, ULONG *current_res )
 {
     static BOOL has_request = FALSE;
 
@@ -2958,7 +2958,7 @@ NTSTATUS WINAPI NtSetTimerResolution( ULONG res, BOOLEAN set, ULONG *current_res
 /******************************************************************************
  *              NtSetIntervalProfile (NTDLL.@)
  */
-NTSTATUS WINAPI NtSetIntervalProfile( ULONG interval, KPROFILE_SOURCE source )
+NTSTATUS SYSCALL NtSetIntervalProfile( ULONG interval, KPROFILE_SOURCE source )
 {
     FIXME( "%u,%d\n", (int)interval, source );
     return STATUS_SUCCESS;
@@ -3000,8 +3000,8 @@ NTSTATUS system_time_precise( void *args )
 /******************************************************************************
  *              NtCreateKeyedEvent (NTDLL.@)
  */
-NTSTATUS WINAPI NtCreateKeyedEvent( HANDLE *handle, ACCESS_MASK access,
-                                    const OBJECT_ATTRIBUTES *attr, ULONG flags )
+NTSTATUS SYSCALL NtCreateKeyedEvent( HANDLE *handle, ACCESS_MASK access,
+                                     const OBJECT_ATTRIBUTES *attr, ULONG flags )
 {
     unsigned int ret;
     data_size_t len;
@@ -3027,7 +3027,7 @@ NTSTATUS WINAPI NtCreateKeyedEvent( HANDLE *handle, ACCESS_MASK access,
 /******************************************************************************
  *              NtOpenKeyedEvent (NTDLL.@)
  */
-NTSTATUS WINAPI NtOpenKeyedEvent( HANDLE *handle, ACCESS_MASK access, const OBJECT_ATTRIBUTES *attr )
+NTSTATUS SYSCALL NtOpenKeyedEvent( HANDLE *handle, ACCESS_MASK access, const OBJECT_ATTRIBUTES *attr )
 {
     unsigned int ret;
 
@@ -3054,8 +3054,8 @@ static inline NTSTATUS fast_release_keyed_event( struct keyed_entry *entry, cons
 /******************************************************************************
  *              NtWaitForKeyedEvent (NTDLL.@)
  */
-NTSTATUS WINAPI NtWaitForKeyedEvent( HANDLE handle, const void *key,
-                                     BOOLEAN alertable, const LARGE_INTEGER *timeout )
+NTSTATUS SYSCALL NtWaitForKeyedEvent( HANDLE handle, const void *key,
+                                      BOOLEAN alertable, const LARGE_INTEGER *timeout )
 {
     struct keyed_entry *entry;
     select_op_t select_op;
@@ -3081,8 +3081,8 @@ NTSTATUS WINAPI NtWaitForKeyedEvent( HANDLE handle, const void *key,
 /******************************************************************************
  *              NtReleaseKeyedEvent (NTDLL.@)
  */
-NTSTATUS WINAPI NtReleaseKeyedEvent( HANDLE handle, const void *key,
-                                     BOOLEAN alertable, const LARGE_INTEGER *timeout )
+NTSTATUS SYSCALL NtReleaseKeyedEvent( HANDLE handle, const void *key,
+                                      BOOLEAN alertable, const LARGE_INTEGER *timeout )
 {
     struct keyed_entry *entry;
     select_op_t select_op;
@@ -3108,8 +3108,8 @@ NTSTATUS WINAPI NtReleaseKeyedEvent( HANDLE handle, const void *key,
 /***********************************************************************
  *             NtCreateIoCompletion (NTDLL.@)
  */
-NTSTATUS WINAPI NtCreateIoCompletion( HANDLE *handle, ACCESS_MASK access, OBJECT_ATTRIBUTES *attr,
-                                      ULONG threads )
+NTSTATUS SYSCALL NtCreateIoCompletion( HANDLE *handle, ACCESS_MASK access, OBJECT_ATTRIBUTES *attr,
+                                       ULONG threads )
 {
     unsigned int status;
     data_size_t len;
@@ -3137,7 +3137,7 @@ NTSTATUS WINAPI NtCreateIoCompletion( HANDLE *handle, ACCESS_MASK access, OBJECT
 /***********************************************************************
  *             NtOpenIoCompletion (NTDLL.@)
  */
-NTSTATUS WINAPI NtOpenIoCompletion( HANDLE *handle, ACCESS_MASK access, const OBJECT_ATTRIBUTES *attr )
+NTSTATUS SYSCALL NtOpenIoCompletion( HANDLE *handle, ACCESS_MASK access, const OBJECT_ATTRIBUTES *attr )
 {
     unsigned int status;
 
@@ -3162,8 +3162,8 @@ NTSTATUS WINAPI NtOpenIoCompletion( HANDLE *handle, ACCESS_MASK access, const OB
 /***********************************************************************
  *             NtSetIoCompletion (NTDLL.@)
  */
-NTSTATUS WINAPI NtSetIoCompletion( HANDLE handle, ULONG_PTR key, ULONG_PTR value,
-                                   NTSTATUS status, SIZE_T count )
+NTSTATUS SYSCALL NtSetIoCompletion( HANDLE handle, ULONG_PTR key, ULONG_PTR value,
+                                    NTSTATUS status, SIZE_T count )
 {
     unsigned int ret;
 
@@ -3186,8 +3186,8 @@ NTSTATUS WINAPI NtSetIoCompletion( HANDLE handle, ULONG_PTR key, ULONG_PTR value
 /***********************************************************************
  *             NtRemoveIoCompletion (NTDLL.@)
  */
-NTSTATUS WINAPI NtRemoveIoCompletion( HANDLE handle, ULONG_PTR *key, ULONG_PTR *value,
-                                      IO_STATUS_BLOCK *io, LARGE_INTEGER *timeout )
+NTSTATUS SYSCALL NtRemoveIoCompletion( HANDLE handle, ULONG_PTR *key, ULONG_PTR *value,
+                                       IO_STATUS_BLOCK *io, LARGE_INTEGER *timeout )
 {
     unsigned int status;
 
@@ -3217,8 +3217,8 @@ NTSTATUS WINAPI NtRemoveIoCompletion( HANDLE handle, ULONG_PTR *key, ULONG_PTR *
 /***********************************************************************
  *             NtRemoveIoCompletionEx (NTDLL.@)
  */
-NTSTATUS WINAPI NtRemoveIoCompletionEx( HANDLE handle, FILE_IO_COMPLETION_INFORMATION *info, ULONG count,
-                                        ULONG *written, LARGE_INTEGER *timeout, BOOLEAN alertable )
+NTSTATUS SYSCALL NtRemoveIoCompletionEx( HANDLE handle, FILE_IO_COMPLETION_INFORMATION *info, ULONG count,
+                                         ULONG *written, LARGE_INTEGER *timeout, BOOLEAN alertable )
 {
     unsigned int status;
     ULONG i = 0;
@@ -3260,8 +3260,8 @@ NTSTATUS WINAPI NtRemoveIoCompletionEx( HANDLE handle, FILE_IO_COMPLETION_INFORM
 /***********************************************************************
  *             NtQueryIoCompletion (NTDLL.@)
  */
-NTSTATUS WINAPI NtQueryIoCompletion( HANDLE handle, IO_COMPLETION_INFORMATION_CLASS class,
-                                     void *buffer, ULONG len, ULONG *ret_len )
+NTSTATUS SYSCALL NtQueryIoCompletion( HANDLE handle, IO_COMPLETION_INFORMATION_CLASS class,
+                                      void *buffer, ULONG len, ULONG *ret_len )
 {
     unsigned int status;
 
@@ -3297,9 +3297,9 @@ NTSTATUS WINAPI NtQueryIoCompletion( HANDLE handle, IO_COMPLETION_INFORMATION_CL
 /***********************************************************************
  *             NtCreateSection (NTDLL.@)
  */
-NTSTATUS WINAPI NtCreateSection( HANDLE *handle, ACCESS_MASK access, const OBJECT_ATTRIBUTES *attr,
-                                 const LARGE_INTEGER *size, ULONG protect,
-                                 ULONG sec_flags, HANDLE file )
+NTSTATUS SYSCALL NtCreateSection( HANDLE *handle, ACCESS_MASK access, const OBJECT_ATTRIBUTES *attr,
+                                  const LARGE_INTEGER *size, ULONG protect,
+                                  ULONG sec_flags, HANDLE file )
 {
     unsigned int ret;
     unsigned int file_access;
@@ -3352,7 +3352,7 @@ NTSTATUS WINAPI NtCreateSection( HANDLE *handle, ACCESS_MASK access, const OBJEC
 /***********************************************************************
  *             NtOpenSection (NTDLL.@)
  */
-NTSTATUS WINAPI NtOpenSection( HANDLE *handle, ACCESS_MASK access, const OBJECT_ATTRIBUTES *attr )
+NTSTATUS SYSCALL NtOpenSection( HANDLE *handle, ACCESS_MASK access, const OBJECT_ATTRIBUTES *attr )
 {
     unsigned int ret;
 
@@ -3377,8 +3377,8 @@ NTSTATUS WINAPI NtOpenSection( HANDLE *handle, ACCESS_MASK access, const OBJECT_
 /***********************************************************************
  *             NtCreatePort (NTDLL.@)
  */
-NTSTATUS WINAPI NtCreatePort( HANDLE *handle, OBJECT_ATTRIBUTES *attr, ULONG info_len,
-                              ULONG data_len, ULONG *reserved )
+NTSTATUS SYSCALL NtCreatePort( HANDLE *handle, OBJECT_ATTRIBUTES *attr, ULONG info_len,
+                               ULONG data_len, ULONG *reserved )
 {
     FIXME( "(%p,%p,%u,%u,%p),stub!\n", handle, attr, (int)info_len, (int)data_len, reserved );
     return STATUS_NOT_IMPLEMENTED;
@@ -3388,9 +3388,9 @@ NTSTATUS WINAPI NtCreatePort( HANDLE *handle, OBJECT_ATTRIBUTES *attr, ULONG inf
 /***********************************************************************
  *             NtConnectPort (NTDLL.@)
  */
-NTSTATUS WINAPI NtConnectPort( HANDLE *handle, UNICODE_STRING *name, SECURITY_QUALITY_OF_SERVICE *qos,
-                               LPC_SECTION_WRITE *write, LPC_SECTION_READ *read, ULONG *max_len,
-                               void *info, ULONG *info_len )
+NTSTATUS SYSCALL NtConnectPort( HANDLE *handle, UNICODE_STRING *name, SECURITY_QUALITY_OF_SERVICE *qos,
+                                LPC_SECTION_WRITE *write, LPC_SECTION_READ *read, ULONG *max_len,
+                                void *info, ULONG *info_len )
 {
     FIXME( "(%p,%s,%p,%p,%p,%p,%p,%p),stub!\n", handle, debugstr_us(name), qos,
            write, read, max_len, info, info_len );
@@ -3402,9 +3402,9 @@ NTSTATUS WINAPI NtConnectPort( HANDLE *handle, UNICODE_STRING *name, SECURITY_QU
 /***********************************************************************
  *             NtSecureConnectPort (NTDLL.@)
  */
-NTSTATUS WINAPI NtSecureConnectPort( HANDLE *handle, UNICODE_STRING *name, SECURITY_QUALITY_OF_SERVICE *qos,
-                                     LPC_SECTION_WRITE *write, PSID sid, LPC_SECTION_READ *read,
-                                     ULONG *max_len, void *info, ULONG *info_len )
+NTSTATUS SYSCALL NtSecureConnectPort( HANDLE *handle, UNICODE_STRING *name, SECURITY_QUALITY_OF_SERVICE *qos,
+                                      LPC_SECTION_WRITE *write, PSID sid, LPC_SECTION_READ *read,
+                                      ULONG *max_len, void *info, ULONG *info_len )
 {
     FIXME( "(%p,%s,%p,%p,%p,%p,%p,%p,%p),stub!\n", handle, debugstr_us(name), qos,
            write, sid, read, max_len, info, info_len );
@@ -3415,7 +3415,7 @@ NTSTATUS WINAPI NtSecureConnectPort( HANDLE *handle, UNICODE_STRING *name, SECUR
 /***********************************************************************
  *             NtListenPort (NTDLL.@)
  */
-NTSTATUS WINAPI NtListenPort( HANDLE handle, LPC_MESSAGE *msg )
+NTSTATUS SYSCALL NtListenPort( HANDLE handle, LPC_MESSAGE *msg )
 {
     FIXME("(%p,%p),stub!\n", handle, msg );
     return STATUS_NOT_IMPLEMENTED;
@@ -3425,8 +3425,8 @@ NTSTATUS WINAPI NtListenPort( HANDLE handle, LPC_MESSAGE *msg )
 /***********************************************************************
  *             NtAcceptConnectPort (NTDLL.@)
  */
-NTSTATUS WINAPI NtAcceptConnectPort( HANDLE *handle, ULONG id, LPC_MESSAGE *msg, BOOLEAN accept,
-                                     LPC_SECTION_WRITE *write, LPC_SECTION_READ *read )
+NTSTATUS SYSCALL NtAcceptConnectPort( HANDLE *handle, ULONG id, LPC_MESSAGE *msg, BOOLEAN accept,
+                                      LPC_SECTION_WRITE *write, LPC_SECTION_READ *read )
 {
     FIXME("(%p,%u,%p,%d,%p,%p),stub!\n", handle, (int)id, msg, accept, write, read );
     return STATUS_NOT_IMPLEMENTED;
@@ -3436,7 +3436,7 @@ NTSTATUS WINAPI NtAcceptConnectPort( HANDLE *handle, ULONG id, LPC_MESSAGE *msg,
 /***********************************************************************
  *             NtCompleteConnectPort (NTDLL.@)
  */
-NTSTATUS WINAPI NtCompleteConnectPort( HANDLE handle )
+NTSTATUS SYSCALL NtCompleteConnectPort( HANDLE handle )
 {
     FIXME( "(%p),stub!\n", handle );
     return STATUS_NOT_IMPLEMENTED;
@@ -3446,7 +3446,7 @@ NTSTATUS WINAPI NtCompleteConnectPort( HANDLE handle )
 /***********************************************************************
  *             NtRegisterThreadTerminatePort (NTDLL.@)
  */
-NTSTATUS WINAPI NtRegisterThreadTerminatePort( HANDLE handle )
+NTSTATUS SYSCALL NtRegisterThreadTerminatePort( HANDLE handle )
 {
     FIXME( "(%p),stub!\n", handle );
     return STATUS_NOT_IMPLEMENTED;
@@ -3456,7 +3456,7 @@ NTSTATUS WINAPI NtRegisterThreadTerminatePort( HANDLE handle )
 /***********************************************************************
  *             NtRequestWaitReplyPort (NTDLL.@)
  */
-NTSTATUS WINAPI NtRequestWaitReplyPort( HANDLE handle, LPC_MESSAGE *msg_in, LPC_MESSAGE *msg_out )
+NTSTATUS SYSCALL NtRequestWaitReplyPort( HANDLE handle, LPC_MESSAGE *msg_in, LPC_MESSAGE *msg_out )
 {
     FIXME( "(%p,%p,%p),stub!\n", handle, msg_in, msg_out );
     if (msg_in)
@@ -3471,7 +3471,7 @@ NTSTATUS WINAPI NtRequestWaitReplyPort( HANDLE handle, LPC_MESSAGE *msg_in, LPC_
 /***********************************************************************
  *             NtReplyWaitReceivePort (NTDLL.@)
  */
-NTSTATUS WINAPI NtReplyWaitReceivePort( HANDLE handle, ULONG *id, LPC_MESSAGE *reply, LPC_MESSAGE *msg )
+NTSTATUS SYSCALL NtReplyWaitReceivePort( HANDLE handle, ULONG *id, LPC_MESSAGE *reply, LPC_MESSAGE *msg )
 {
     FIXME("(%p,%p,%p,%p),stub!\n", handle, id, reply, msg );
     return STATUS_NOT_IMPLEMENTED;
@@ -3528,7 +3528,7 @@ static ULONG integral_atom_name( WCHAR *buffer, ULONG len, RTL_ATOM atom )
 /***********************************************************************
  *             NtAddAtom (NTDLL.@)
  */
-NTSTATUS WINAPI NtAddAtom( const WCHAR *name, ULONG length, RTL_ATOM *atom )
+NTSTATUS SYSCALL NtAddAtom( const WCHAR *name, ULONG length, RTL_ATOM *atom )
 {
     unsigned int status = is_integral_atom( name, length / sizeof(WCHAR), atom );
 
@@ -3550,7 +3550,7 @@ NTSTATUS WINAPI NtAddAtom( const WCHAR *name, ULONG length, RTL_ATOM *atom )
 /***********************************************************************
  *             NtDeleteAtom (NTDLL.@)
  */
-NTSTATUS WINAPI NtDeleteAtom( RTL_ATOM atom )
+NTSTATUS SYSCALL NtDeleteAtom( RTL_ATOM atom )
 {
     unsigned int status;
 
@@ -3567,7 +3567,7 @@ NTSTATUS WINAPI NtDeleteAtom( RTL_ATOM atom )
 /***********************************************************************
  *             NtFindAtom (NTDLL.@)
  */
-NTSTATUS WINAPI NtFindAtom( const WCHAR *name, ULONG length, RTL_ATOM *atom )
+NTSTATUS SYSCALL NtFindAtom( const WCHAR *name, ULONG length, RTL_ATOM *atom )
 {
     unsigned int status = is_integral_atom( name, length / sizeof(WCHAR), atom );
 
@@ -3589,8 +3589,8 @@ NTSTATUS WINAPI NtFindAtom( const WCHAR *name, ULONG length, RTL_ATOM *atom )
 /***********************************************************************
  *             NtQueryInformationAtom (NTDLL.@)
  */
-NTSTATUS WINAPI NtQueryInformationAtom( RTL_ATOM atom, ATOM_INFORMATION_CLASS class,
-                                        void *ptr, ULONG size, ULONG *retsize )
+NTSTATUS SYSCALL NtQueryInformationAtom( RTL_ATOM atom, ATOM_INFORMATION_CLASS class,
+                                         void *ptr, ULONG size, ULONG *retsize )
 {
     unsigned int status;
 
@@ -3735,7 +3735,7 @@ static union tid_alert_entry *get_tid_alert_entry( HANDLE tid )
 /***********************************************************************
  *             NtAlertThreadByThreadId (NTDLL.@)
  */
-NTSTATUS WINAPI NtAlertThreadByThreadId( HANDLE tid )
+NTSTATUS SYSCALL NtAlertThreadByThreadId( HANDLE tid )
 {
     union tid_alert_entry *entry = get_tid_alert_entry( tid );
 
@@ -3790,7 +3790,7 @@ static LONGLONG update_timeout( ULONGLONG end )
 /***********************************************************************
  *             NtWaitForAlertByThreadId (NTDLL.@)
  */
-NTSTATUS WINAPI NtWaitForAlertByThreadId( const void *address, const LARGE_INTEGER *timeout )
+NTSTATUS SYSCALL NtWaitForAlertByThreadId( const void *address, const LARGE_INTEGER *timeout )
 {
     union tid_alert_entry *entry = get_tid_alert_entry( NtCurrentTeb()->ClientId.UniqueThread );
     semaphore_t sem;
@@ -3839,7 +3839,7 @@ NTSTATUS WINAPI NtWaitForAlertByThreadId( const void *address, const LARGE_INTEG
 /***********************************************************************
  *             NtWaitForAlertByThreadId (NTDLL.@)
  */
-NTSTATUS WINAPI NtWaitForAlertByThreadId( const void *address, const LARGE_INTEGER *timeout )
+NTSTATUS SYSCALL NtWaitForAlertByThreadId( const void *address, const LARGE_INTEGER *timeout )
 {
     union tid_alert_entry *entry = get_tid_alert_entry( NtCurrentTeb()->ClientId.UniqueThread );
     NTSTATUS status;
@@ -3921,8 +3921,8 @@ void set_async_direct_result( HANDLE *async_handle, NTSTATUS status, ULONG_PTR i
 /***********************************************************************
  *           NtCreateTransaction (NTDLL.@)
  */
-NTSTATUS WINAPI NtCreateTransaction( HANDLE *handle, ACCESS_MASK mask, OBJECT_ATTRIBUTES *obj_attr, GUID *guid, HANDLE tm,
-        ULONG options, ULONG isol_level, ULONG isol_flags, PLARGE_INTEGER timeout, UNICODE_STRING *description )
+NTSTATUS SYSCALL NtCreateTransaction( HANDLE *handle, ACCESS_MASK mask, OBJECT_ATTRIBUTES *obj_attr, GUID *guid, HANDLE tm,
+         ULONG options, ULONG isol_level, ULONG isol_flags, PLARGE_INTEGER timeout, UNICODE_STRING *description )
 {
     FIXME( "%p, %#x, %p, %s, %p, 0x%08x, 0x%08x, 0x%08x, %p, %p stub.\n", handle, (int)mask, obj_attr, debugstr_guid(guid), tm,
             (int)options, (int)isol_level, (int)isol_flags, timeout, description );
@@ -3935,7 +3935,7 @@ NTSTATUS WINAPI NtCreateTransaction( HANDLE *handle, ACCESS_MASK mask, OBJECT_AT
 /***********************************************************************
  *           NtCommitTransaction (NTDLL.@)
  */
-NTSTATUS WINAPI NtCommitTransaction( HANDLE transaction, BOOLEAN wait )
+NTSTATUS SYSCALL NtCommitTransaction( HANDLE transaction, BOOLEAN wait )
 {
     FIXME( "%p, %d stub.\n", transaction, wait );
 
@@ -3945,7 +3945,7 @@ NTSTATUS WINAPI NtCommitTransaction( HANDLE transaction, BOOLEAN wait )
 /***********************************************************************
  *           NtRollbackTransaction (NTDLL.@)
  */
-NTSTATUS WINAPI NtRollbackTransaction( HANDLE transaction, BOOLEAN wait )
+NTSTATUS SYSCALL NtRollbackTransaction( HANDLE transaction, BOOLEAN wait )
 {
     FIXME( "%p, %d stub.\n", transaction, wait );
 
diff --git a/dlls/ntdll/unix/system.c b/dlls/ntdll/unix/system.c
index 11111111111..11111111111 100644
--- a/dlls/ntdll/unix/system.c
+++ b/dlls/ntdll/unix/system.c
@@ -2708,8 +2708,8 @@ C_ASSERT( sizeof(struct process_info) <= sizeof(SYSTEM_PROCESS_INFORMATION) );
 /******************************************************************************
  *              NtQuerySystemInformation  (NTDLL.@)
  */
-NTSTATUS WINAPI NtQuerySystemInformation( SYSTEM_INFORMATION_CLASS class,
-                                          void *info, ULONG size, ULONG *ret_size )
+NTSTATUS SYSCALL NtQuerySystemInformation( SYSTEM_INFORMATION_CLASS class,
+                                           void *info, ULONG size, ULONG *ret_size )
 {
     unsigned int ret = STATUS_SUCCESS;
     ULONG len = 0;
@@ -3399,9 +3399,9 @@ NTSTATUS WINAPI NtQuerySystemInformation( SYSTEM_INFORMATION_CLASS class,
 /******************************************************************************
  *              NtQuerySystemInformationEx  (NTDLL.@)
  */
-NTSTATUS WINAPI NtQuerySystemInformationEx( SYSTEM_INFORMATION_CLASS class,
-                                            void *query, ULONG query_len,
-                                            void *info, ULONG size, ULONG *ret_size )
+NTSTATUS SYSCALL NtQuerySystemInformationEx( SYSTEM_INFORMATION_CLASS class,
+                                             void *query, ULONG query_len,
+                                             void *info, ULONG size, ULONG *ret_size )
 {
     ULONG len = 0;
     unsigned int ret = STATUS_NOT_IMPLEMENTED;
@@ -3518,7 +3518,7 @@ NTSTATUS WINAPI NtQuerySystemInformationEx( SYSTEM_INFORMATION_CLASS class,
 /******************************************************************************
  *              NtSetSystemInformation  (NTDLL.@)
  */
-NTSTATUS WINAPI NtSetSystemInformation( SYSTEM_INFORMATION_CLASS class, void *info, ULONG length )
+NTSTATUS SYSCALL NtSetSystemInformation( SYSTEM_INFORMATION_CLASS class, void *info, ULONG length )
 {
     FIXME( "(0x%08x,%p,0x%08x) stub\n", class, info, (int)length );
     return STATUS_SUCCESS;
@@ -3528,8 +3528,8 @@ NTSTATUS WINAPI NtSetSystemInformation( SYSTEM_INFORMATION_CLASS class, void *in
 /******************************************************************************
  *              NtQuerySystemEnvironmentValue  (NTDLL.@)
  */
-NTSTATUS WINAPI NtQuerySystemEnvironmentValue( UNICODE_STRING *name, WCHAR *buffer, ULONG length,
-                                               ULONG *retlen )
+NTSTATUS SYSCALL NtQuerySystemEnvironmentValue( UNICODE_STRING *name, WCHAR *buffer, ULONG length,
+                                                ULONG *retlen )
 {
     FIXME( "(%s, %p, %u, %p), stub\n", debugstr_us(name), buffer, (int)length, retlen );
     return STATUS_NOT_IMPLEMENTED;
@@ -3539,8 +3539,8 @@ NTSTATUS WINAPI NtQuerySystemEnvironmentValue( UNICODE_STRING *name, WCHAR *buff
 /******************************************************************************
  *              NtQuerySystemEnvironmentValueEx  (NTDLL.@)
  */
-NTSTATUS WINAPI NtQuerySystemEnvironmentValueEx( UNICODE_STRING *name, GUID *vendor, void *buffer,
-                                                 ULONG *retlen, ULONG *attrib )
+NTSTATUS SYSCALL NtQuerySystemEnvironmentValueEx( UNICODE_STRING *name, GUID *vendor, void *buffer,
+                                                  ULONG *retlen, ULONG *attrib )
 {
     FIXME( "(%s, %s, %p, %p, %p), stub\n", debugstr_us(name),
            debugstr_guid(vendor), buffer, retlen, attrib );
@@ -3551,8 +3551,8 @@ NTSTATUS WINAPI NtQuerySystemEnvironmentValueEx( UNICODE_STRING *name, GUID *ven
 /******************************************************************************
  *              NtSystemDebugControl  (NTDLL.@)
  */
-NTSTATUS WINAPI NtSystemDebugControl( SYSDBG_COMMAND command, void *in_buff, ULONG in_len,
-                                      void *out_buff, ULONG out_len, ULONG *retlen )
+NTSTATUS SYSCALL NtSystemDebugControl( SYSDBG_COMMAND command, void *in_buff, ULONG in_len,
+                                       void *out_buff, ULONG out_len, ULONG *retlen )
 {
     FIXME( "(%d, %p, %d, %p, %d, %p), stub\n",
            command, in_buff, (int)in_len, out_buff, (int)out_len, retlen );
@@ -3563,7 +3563,7 @@ NTSTATUS WINAPI NtSystemDebugControl( SYSDBG_COMMAND command, void *in_buff, ULO
 /******************************************************************************
  *              NtShutdownSystem  (NTDLL.@)
  */
-NTSTATUS WINAPI NtShutdownSystem( SHUTDOWN_ACTION action )
+NTSTATUS SYSCALL NtShutdownSystem( SHUTDOWN_ACTION action )
 {
     FIXME( "%d\n", action );
     return STATUS_SUCCESS;
@@ -3806,8 +3806,8 @@ static NTSTATUS fill_battery_state( SYSTEM_BATTERY_STATE *bs )
 /******************************************************************************
  *              NtPowerInformation  (NTDLL.@)
  */
-NTSTATUS WINAPI NtPowerInformation( POWER_INFORMATION_LEVEL level, void *input, ULONG in_size,
-                                    void *output, ULONG out_size )
+NTSTATUS SYSCALL NtPowerInformation( POWER_INFORMATION_LEVEL level, void *input, ULONG in_size,
+                                     void *output, ULONG out_size )
 {
     TRACE( "(%d,%p,%d,%p,%d)\n", level, input, (int)in_size, output, (int)out_size );
     switch (level)
@@ -3993,7 +3993,7 @@ NTSTATUS WINAPI NtPowerInformation( POWER_INFORMATION_LEVEL level, void *input,
 /******************************************************************************
  *              NtLoadDriver  (NTDLL.@)
  */
-NTSTATUS WINAPI NtLoadDriver( const UNICODE_STRING *name )
+NTSTATUS SYSCALL NtLoadDriver( const UNICODE_STRING *name )
 {
     FIXME( "(%s), stub!\n", debugstr_us(name) );
     return STATUS_NOT_IMPLEMENTED;
@@ -4003,7 +4003,7 @@ NTSTATUS WINAPI NtLoadDriver( const UNICODE_STRING *name )
 /******************************************************************************
  *              NtUnloadDriver  (NTDLL.@)
  */
-NTSTATUS WINAPI NtUnloadDriver( const UNICODE_STRING *name )
+NTSTATUS SYSCALL NtUnloadDriver( const UNICODE_STRING *name )
 {
     FIXME( "(%s), stub!\n", debugstr_us(name) );
     return STATUS_NOT_IMPLEMENTED;
@@ -4013,7 +4013,7 @@ NTSTATUS WINAPI NtUnloadDriver( const UNICODE_STRING *name )
 /******************************************************************************
  *              NtDisplayString  (NTDLL.@)
  */
-NTSTATUS WINAPI NtDisplayString( UNICODE_STRING *string )
+NTSTATUS SYSCALL NtDisplayString( UNICODE_STRING *string )
 {
     ERR( "%s\n", debugstr_us(string) );
     return STATUS_SUCCESS;
@@ -4023,9 +4023,9 @@ NTSTATUS WINAPI NtDisplayString( UNICODE_STRING *string )
 /******************************************************************************
  *              NtRaiseHardError  (NTDLL.@)
  */
-NTSTATUS WINAPI NtRaiseHardError( NTSTATUS status, ULONG count,
-                                  UNICODE_STRING *params_mask, void **params,
-                                  HARDERROR_RESPONSE_OPTION option, HARDERROR_RESPONSE *response )
+NTSTATUS SYSCALL NtRaiseHardError( NTSTATUS status, ULONG count,
+                                   UNICODE_STRING *params_mask, void **params,
+                                   HARDERROR_RESPONSE_OPTION option, HARDERROR_RESPONSE *response )
 {
     FIXME( "%08x stub\n", (int)status );
     return STATUS_NOT_IMPLEMENTED;
@@ -4035,8 +4035,8 @@ NTSTATUS WINAPI NtRaiseHardError( NTSTATUS status, ULONG count,
 /******************************************************************************
  *              NtInitiatePowerAction  (NTDLL.@)
  */
-NTSTATUS WINAPI NtInitiatePowerAction( POWER_ACTION action, SYSTEM_POWER_STATE state,
-                                       ULONG flags, BOOLEAN async )
+NTSTATUS SYSCALL NtInitiatePowerAction( POWER_ACTION action, SYSTEM_POWER_STATE state,
+                                        ULONG flags, BOOLEAN async )
 {
     FIXME( "(%d,%d,0x%08x,%d),stub\n", action, state, (int)flags, async );
     return STATUS_NOT_IMPLEMENTED;
@@ -4046,7 +4046,7 @@ NTSTATUS WINAPI NtInitiatePowerAction( POWER_ACTION action, SYSTEM_POWER_STATE s
 /******************************************************************************
  *              NtSetThreadExecutionState  (NTDLL.@)
  */
-NTSTATUS WINAPI NtSetThreadExecutionState( EXECUTION_STATE new_state, EXECUTION_STATE *old_state )
+NTSTATUS SYSCALL NtSetThreadExecutionState( EXECUTION_STATE new_state, EXECUTION_STATE *old_state )
 {
     static EXECUTION_STATE current = ES_SYSTEM_REQUIRED | ES_DISPLAY_REQUIRED | ES_USER_PRESENT;
 
diff --git a/dlls/ntdll/unix/thread.c b/dlls/ntdll/unix/thread.c
index 11111111111..11111111111 100644
--- a/dlls/ntdll/unix/thread.c
+++ b/dlls/ntdll/unix/thread.c
@@ -1305,9 +1305,9 @@ static void update_attr_list( PS_ATTRIBUTE_LIST *attr, const CLIENT_ID *id, TEB
 /***********************************************************************
  *              NtCreateThread   (NTDLL.@)
  */
-NTSTATUS WINAPI NtCreateThread( HANDLE *handle, ACCESS_MASK access, OBJECT_ATTRIBUTES *attr,
-                                HANDLE process, CLIENT_ID *id, CONTEXT *ctx, INITIAL_TEB *teb,
-                                BOOLEAN suspended )
+NTSTATUS SYSCALL NtCreateThread( HANDLE *handle, ACCESS_MASK access, OBJECT_ATTRIBUTES *attr,
+                                 HANDLE process, CLIENT_ID *id, CONTEXT *ctx, INITIAL_TEB *teb,
+                                 BOOLEAN suspended )
 {
     FIXME( "%p %d %p %p %p %p %p %d, stub!\n",
            handle, (int)access, attr, process, id, ctx, teb, suspended );
@@ -1317,10 +1317,10 @@ NTSTATUS WINAPI NtCreateThread( HANDLE *handle, ACCESS_MASK access, OBJECT_ATTRI
 /***********************************************************************
  *              NtCreateThreadEx   (NTDLL.@)
  */
-NTSTATUS WINAPI NtCreateThreadEx( HANDLE *handle, ACCESS_MASK access, OBJECT_ATTRIBUTES *attr,
-                                  HANDLE process, PRTL_THREAD_START_ROUTINE start, void *param,
-                                  ULONG flags, ULONG_PTR zero_bits, SIZE_T stack_commit,
-                                  SIZE_T stack_reserve, PS_ATTRIBUTE_LIST *attr_list )
+NTSTATUS SYSCALL NtCreateThreadEx( HANDLE *handle, ACCESS_MASK access, OBJECT_ATTRIBUTES *attr,
+                                   HANDLE process, PRTL_THREAD_START_ROUTINE start, void *param,
+                                   ULONG flags, ULONG_PTR zero_bits, SIZE_T stack_commit,
+                                   SIZE_T stack_reserve, PS_ATTRIBUTE_LIST *attr_list )
 {
     static const ULONG supported_flags = THREAD_CREATE_FLAGS_CREATE_SUSPENDED | THREAD_CREATE_FLAGS_HIDE_FROM_DEBUGGER;
     sigset_t sigset;
@@ -1609,7 +1609,7 @@ NTSTATUS send_debug_event( EXCEPTION_RECORD *rec, CONTEXT *context, BOOL first_c
 /*******************************************************************
  *		NtRaiseException (NTDLL.@)
  */
-NTSTATUS WINAPI NtRaiseException( EXCEPTION_RECORD *rec, CONTEXT *context, BOOL first_chance )
+NTSTATUS SYSCALL NtRaiseException( EXCEPTION_RECORD *rec, CONTEXT *context, BOOL first_chance )
 {
     NTSTATUS status = send_debug_event( rec, context, first_chance );
 
@@ -1643,8 +1643,8 @@ TEB * WINAPI NtCurrentTeb(void)
 /***********************************************************************
  *              NtOpenThread   (NTDLL.@)
  */
-NTSTATUS WINAPI NtOpenThread( HANDLE *handle, ACCESS_MASK access,
-                              const OBJECT_ATTRIBUTES *attr, const CLIENT_ID *id )
+NTSTATUS SYSCALL NtOpenThread( HANDLE *handle, ACCESS_MASK access,
+                               const OBJECT_ATTRIBUTES *attr, const CLIENT_ID *id )
 {
     unsigned int ret;
 
@@ -1666,7 +1666,7 @@ NTSTATUS WINAPI NtOpenThread( HANDLE *handle, ACCESS_MASK access,
 /******************************************************************************
  *              NtSuspendThread   (NTDLL.@)
  */
-NTSTATUS WINAPI NtSuspendThread( HANDLE handle, ULONG *count )
+NTSTATUS SYSCALL NtSuspendThread( HANDLE handle, ULONG *count )
 {
     unsigned int ret;
 
@@ -1686,7 +1686,7 @@ NTSTATUS WINAPI NtSuspendThread( HANDLE handle, ULONG *count )
 /******************************************************************************
  *              NtResumeThread   (NTDLL.@)
  */
-NTSTATUS WINAPI NtResumeThread( HANDLE handle, ULONG *count )
+NTSTATUS SYSCALL NtResumeThread( HANDLE handle, ULONG *count )
 {
     unsigned int ret;
 
@@ -1706,7 +1706,7 @@ NTSTATUS WINAPI NtResumeThread( HANDLE handle, ULONG *count )
 /******************************************************************************
  *              NtAlertResumeThread   (NTDLL.@)
  */
-NTSTATUS WINAPI NtAlertResumeThread( HANDLE handle, ULONG *count )
+NTSTATUS SYSCALL NtAlertResumeThread( HANDLE handle, ULONG *count )
 {
     FIXME( "stub: should alert thread %p\n", handle );
     return NtResumeThread( handle, count );
@@ -1716,7 +1716,7 @@ NTSTATUS WINAPI NtAlertResumeThread( HANDLE handle, ULONG *count )
 /******************************************************************************
  *              NtAlertThread   (NTDLL.@)
  */
-NTSTATUS WINAPI NtAlertThread( HANDLE handle )
+NTSTATUS SYSCALL NtAlertThread( HANDLE handle )
 {
     FIXME( "stub: %p\n", handle );
     return STATUS_NOT_IMPLEMENTED;
@@ -1726,7 +1726,7 @@ NTSTATUS WINAPI NtAlertThread( HANDLE handle )
 /******************************************************************************
  *              NtTerminateThread  (NTDLL.@)
  */
-NTSTATUS WINAPI NtTerminateThread( HANDLE handle, LONG exit_code )
+NTSTATUS SYSCALL NtTerminateThread( HANDLE handle, LONG exit_code )
 {
     unsigned int ret;
     BOOL self;
@@ -1752,8 +1752,8 @@ NTSTATUS WINAPI NtTerminateThread( HANDLE handle, LONG exit_code )
 /******************************************************************************
  *              NtQueueApcThread  (NTDLL.@)
  */
-NTSTATUS WINAPI NtQueueApcThread( HANDLE handle, PNTAPCFUNC func, ULONG_PTR arg1,
-                                  ULONG_PTR arg2, ULONG_PTR arg3 )
+NTSTATUS SYSCALL NtQueueApcThread( HANDLE handle, PNTAPCFUNC func, ULONG_PTR arg1,
+                                   ULONG_PTR arg2, ULONG_PTR arg3 )
 {
     unsigned int ret;
 
@@ -2062,8 +2062,8 @@ static BOOL is_process_wow64( const CLIENT_ID *id )
 /******************************************************************************
  *              NtQueryInformationThread  (NTDLL.@)
  */
-NTSTATUS WINAPI NtQueryInformationThread( HANDLE handle, THREADINFOCLASS class,
-                                          void *data, ULONG length, ULONG *ret_len )
+NTSTATUS SYSCALL NtQueryInformationThread( HANDLE handle, THREADINFOCLASS class,
+                                           void *data, ULONG length, ULONG *ret_len )
 {
     unsigned int status;
 
@@ -2340,8 +2340,8 @@ NTSTATUS WINAPI NtQueryInformationThread( HANDLE handle, THREADINFOCLASS class,
 /******************************************************************************
  *              NtSetInformationThread  (NTDLL.@)
  */
-NTSTATUS WINAPI NtSetInformationThread( HANDLE handle, THREADINFOCLASS class,
-                                        const void *data, ULONG length )
+NTSTATUS SYSCALL NtSetInformationThread( HANDLE handle, THREADINFOCLASS class,
+                                         const void *data, ULONG length )
 {
     unsigned int status;
 
@@ -2553,7 +2553,7 @@ NTSTATUS WINAPI NtSetInformationThread( HANDLE handle, THREADINFOCLASS class,
 /******************************************************************************
  *              NtGetCurrentProcessorNumber  (NTDLL.@)
  */
-ULONG WINAPI NtGetCurrentProcessorNumber(void)
+ULONG SYSCALL NtGetCurrentProcessorNumber(void)
 {
     ULONG processor;
 
@@ -2603,8 +2603,8 @@ ULONG WINAPI NtGetCurrentProcessorNumber(void)
 /******************************************************************************
  *              NtGetNextThread  (NTDLL.@)
  */
-NTSTATUS WINAPI NtGetNextThread( HANDLE process, HANDLE thread, ACCESS_MASK access, ULONG attributes,
-                                 ULONG flags, HANDLE *handle )
+NTSTATUS SYSCALL NtGetNextThread( HANDLE process, HANDLE thread, ACCESS_MASK access, ULONG attributes,
+                                  ULONG flags, HANDLE *handle )
 {
     HANDLE ret_handle = 0;
     unsigned int ret;
diff --git a/dlls/ntdll/unix/virtual.c b/dlls/ntdll/unix/virtual.c
index 11111111111..11111111111 100644
--- a/dlls/ntdll/unix/virtual.c
+++ b/dlls/ntdll/unix/virtual.c
@@ -4184,8 +4184,8 @@ static NTSTATUS allocate_virtual_memory( void **ret, SIZE_T *size_ptr, ULONG typ
  *             NtAllocateVirtualMemory   (NTDLL.@)
  *             ZwAllocateVirtualMemory   (NTDLL.@)
  */
-NTSTATUS WINAPI NtAllocateVirtualMemory( HANDLE process, PVOID *ret, ULONG_PTR zero_bits,
-                                         SIZE_T *size_ptr, ULONG type, ULONG protect )
+NTSTATUS SYSCALL NtAllocateVirtualMemory( HANDLE process, PVOID *ret, ULONG_PTR zero_bits,
+                                          SIZE_T *size_ptr, ULONG type, ULONG protect )
 {
     static const ULONG type_mask = MEM_COMMIT | MEM_RESERVE | MEM_TOP_DOWN | MEM_WRITE_WATCH | MEM_RESET;
     ULONG_PTR limit;
@@ -4259,9 +4259,9 @@ NTSTATUS WINAPI NtAllocateVirtualMemory( HANDLE process, PVOID *ret, ULONG_PTR z
  *             NtAllocateVirtualMemoryEx   (NTDLL.@)
  *             ZwAllocateVirtualMemoryEx   (NTDLL.@)
  */
-NTSTATUS WINAPI NtAllocateVirtualMemoryEx( HANDLE process, PVOID *ret, SIZE_T *size_ptr, ULONG type,
-                                           ULONG protect, MEM_EXTENDED_PARAMETER *parameters,
-                                           ULONG count )
+NTSTATUS SYSCALL NtAllocateVirtualMemoryEx( HANDLE process, PVOID *ret, SIZE_T *size_ptr, ULONG type,
+                                            ULONG protect, MEM_EXTENDED_PARAMETER *parameters,
+                                            ULONG count )
 {
     static const ULONG type_mask = MEM_COMMIT | MEM_RESERVE | MEM_TOP_DOWN | MEM_WRITE_WATCH
                                    | MEM_RESET | MEM_RESERVE_PLACEHOLDER | MEM_REPLACE_PLACEHOLDER;
@@ -4363,7 +4363,7 @@ NTSTATUS WINAPI NtAllocateVirtualMemoryEx( HANDLE process, PVOID *ret, SIZE_T *s
  *             NtFreeVirtualMemory   (NTDLL.@)
  *             ZwFreeVirtualMemory   (NTDLL.@)
  */
-NTSTATUS WINAPI NtFreeVirtualMemory( HANDLE process, PVOID *addr_ptr, SIZE_T *size_ptr, ULONG type )
+NTSTATUS SYSCALL NtFreeVirtualMemory( HANDLE process, PVOID *addr_ptr, SIZE_T *size_ptr, ULONG type )
 {
     struct file_view *view;
     char *base;
@@ -4559,8 +4559,8 @@ NTSTATUS WINAPI NtFreeVirtualMemory( HANDLE process, PVOID *addr_ptr, SIZE_T *si
  *             NtProtectVirtualMemory   (NTDLL.@)
  *             ZwProtectVirtualMemory   (NTDLL.@)
  */
-NTSTATUS WINAPI NtProtectVirtualMemory( HANDLE process, PVOID *addr_ptr, SIZE_T *size_ptr,
-                                        ULONG new_prot, ULONG *old_prot )
+NTSTATUS SYSCALL NtProtectVirtualMemory( HANDLE process, PVOID *addr_ptr, SIZE_T *size_ptr,
+                                         ULONG new_prot, ULONG *old_prot )
 {
     struct file_view *view;
     sigset_t sigset;
@@ -5063,9 +5063,9 @@ static unsigned int get_memory_section_name( HANDLE process, LPCVOID addr,
  *             NtQueryVirtualMemory   (NTDLL.@)
  *             ZwQueryVirtualMemory   (NTDLL.@)
  */
-NTSTATUS WINAPI NtQueryVirtualMemory( HANDLE process, LPCVOID addr,
-                                      MEMORY_INFORMATION_CLASS info_class,
-                                      PVOID buffer, SIZE_T len, SIZE_T *res_len )
+NTSTATUS SYSCALL NtQueryVirtualMemory( HANDLE process, LPCVOID addr,
+                                       MEMORY_INFORMATION_CLASS info_class,
+                                       PVOID buffer, SIZE_T len, SIZE_T *res_len )
 {
     NTSTATUS status;
 
@@ -5112,7 +5112,7 @@ NTSTATUS WINAPI NtQueryVirtualMemory( HANDLE process, LPCVOID addr,
  *             NtLockVirtualMemory   (NTDLL.@)
  *             ZwLockVirtualMemory   (NTDLL.@)
  */
-NTSTATUS WINAPI NtLockVirtualMemory( HANDLE process, PVOID *addr, SIZE_T *size, ULONG unknown )
+NTSTATUS SYSCALL NtLockVirtualMemory( HANDLE process, PVOID *addr, SIZE_T *size, ULONG unknown )
 {
     unsigned int status = STATUS_SUCCESS;
 
@@ -5149,7 +5149,7 @@ NTSTATUS WINAPI NtLockVirtualMemory( HANDLE process, PVOID *addr, SIZE_T *size,
  *             NtUnlockVirtualMemory   (NTDLL.@)
  *             ZwUnlockVirtualMemory   (NTDLL.@)
  */
-NTSTATUS WINAPI NtUnlockVirtualMemory( HANDLE process, PVOID *addr, SIZE_T *size, ULONG unknown )
+NTSTATUS SYSCALL NtUnlockVirtualMemory( HANDLE process, PVOID *addr, SIZE_T *size, ULONG unknown )
 {
     unsigned int status = STATUS_SUCCESS;
 
@@ -5186,9 +5186,9 @@ NTSTATUS WINAPI NtUnlockVirtualMemory( HANDLE process, PVOID *addr, SIZE_T *size
  *             NtMapViewOfSection   (NTDLL.@)
  *             ZwMapViewOfSection   (NTDLL.@)
  */
-NTSTATUS WINAPI NtMapViewOfSection( HANDLE handle, HANDLE process, PVOID *addr_ptr, ULONG_PTR zero_bits,
-                                    SIZE_T commit_size, const LARGE_INTEGER *offset_ptr, SIZE_T *size_ptr,
-                                    SECTION_INHERIT inherit, ULONG alloc_type, ULONG protect )
+NTSTATUS SYSCALL NtMapViewOfSection( HANDLE handle, HANDLE process, PVOID *addr_ptr, ULONG_PTR zero_bits,
+                                     SIZE_T commit_size, const LARGE_INTEGER *offset_ptr, SIZE_T *size_ptr,
+                                     SECTION_INHERIT inherit, ULONG alloc_type, ULONG protect )
 {
     unsigned int res;
     SIZE_T mask = granularity_mask;
@@ -5260,8 +5260,8 @@ NTSTATUS WINAPI NtMapViewOfSection( HANDLE handle, HANDLE process, PVOID *addr_p
  *             NtMapViewOfSectionEx   (NTDLL.@)
  *             ZwMapViewOfSectionEx   (NTDLL.@)
  */
-NTSTATUS WINAPI NtMapViewOfSectionEx( HANDLE handle, HANDLE process, PVOID *addr_ptr, const LARGE_INTEGER *offset_ptr,
-        SIZE_T *size_ptr, ULONG alloc_type, ULONG protect, MEM_EXTENDED_PARAMETER *params, ULONG params_count )
+NTSTATUS SYSCALL NtMapViewOfSectionEx( HANDLE handle, HANDLE process, PVOID *addr_ptr, const LARGE_INTEGER *offset_ptr,
+         SIZE_T *size_ptr, ULONG alloc_type, ULONG protect, MEM_EXTENDED_PARAMETER *params, ULONG params_count )
 {
     if (params)
         FIXME("Ignoring extended parameters.\n");
@@ -5347,7 +5347,7 @@ done:
  *             NtUnmapViewOfSection   (NTDLL.@)
  *             ZwUnmapViewOfSection   (NTDLL.@)
  */
-NTSTATUS WINAPI NtUnmapViewOfSection( HANDLE process, PVOID addr )
+NTSTATUS SYSCALL NtUnmapViewOfSection( HANDLE process, PVOID addr )
 {
     return unmap_view_of_section( process, addr, 0 );
 }
@@ -5356,7 +5356,7 @@ NTSTATUS WINAPI NtUnmapViewOfSection( HANDLE process, PVOID addr )
  *             NtUnmapViewOfSectionEx   (NTDLL.@)
  *             ZwUnmapViewOfSectionEx   (NTDLL.@)
  */
-NTSTATUS WINAPI NtUnmapViewOfSectionEx( HANDLE process, PVOID addr, ULONG flags )
+NTSTATUS SYSCALL NtUnmapViewOfSectionEx( HANDLE process, PVOID addr, ULONG flags )
 {
     if (flags) FIXME("Ignoring flags %#x.\n", (int)flags);
     return unmap_view_of_section( process, addr, flags );
@@ -5400,8 +5400,8 @@ void virtual_fill_image_information( const pe_image_info_t *pe_info, SECTION_IMA
  *             NtQuerySection   (NTDLL.@)
  *             ZwQuerySection   (NTDLL.@)
  */
-NTSTATUS WINAPI NtQuerySection( HANDLE handle, SECTION_INFORMATION_CLASS class, void *ptr,
-                                SIZE_T size, SIZE_T *ret_size )
+NTSTATUS SYSCALL NtQuerySection( HANDLE handle, SECTION_INFORMATION_CLASS class, void *ptr,
+                                 SIZE_T size, SIZE_T *ret_size )
 {
     unsigned int status;
     pe_image_info_t image_info;
@@ -5454,8 +5454,8 @@ NTSTATUS WINAPI NtQuerySection( HANDLE handle, SECTION_INFORMATION_CLASS class,
  *             NtFlushVirtualMemory   (NTDLL.@)
  *             ZwFlushVirtualMemory   (NTDLL.@)
  */
-NTSTATUS WINAPI NtFlushVirtualMemory( HANDLE process, LPCVOID *addr_ptr,
-                                      SIZE_T *size_ptr, ULONG unknown )
+NTSTATUS SYSCALL NtFlushVirtualMemory( HANDLE process, LPCVOID *addr_ptr,
+                                       SIZE_T *size_ptr, ULONG unknown )
 {
     struct file_view *view;
     unsigned int status = STATUS_SUCCESS;
@@ -5502,8 +5502,8 @@ NTSTATUS WINAPI NtFlushVirtualMemory( HANDLE process, LPCVOID *addr_ptr,
  *             NtGetWriteWatch   (NTDLL.@)
  *             ZwGetWriteWatch   (NTDLL.@)
  */
-NTSTATUS WINAPI NtGetWriteWatch( HANDLE process, ULONG flags, PVOID base, SIZE_T size, PVOID *addresses,
-                                 ULONG_PTR *count, ULONG *granularity )
+NTSTATUS SYSCALL NtGetWriteWatch( HANDLE process, ULONG flags, PVOID base, SIZE_T size, PVOID *addresses,
+                                  ULONG_PTR *count, ULONG *granularity )
 {
     NTSTATUS status = STATUS_SUCCESS;
     sigset_t sigset;
@@ -5548,7 +5548,7 @@ NTSTATUS WINAPI NtGetWriteWatch( HANDLE process, ULONG flags, PVOID base, SIZE_T
  *             NtResetWriteWatch   (NTDLL.@)
  *             ZwResetWriteWatch   (NTDLL.@)
  */
-NTSTATUS WINAPI NtResetWriteWatch( HANDLE process, PVOID base, SIZE_T size )
+NTSTATUS SYSCALL NtResetWriteWatch( HANDLE process, PVOID base, SIZE_T size )
 {
     NTSTATUS status = STATUS_SUCCESS;
     sigset_t sigset;
@@ -5576,8 +5576,8 @@ NTSTATUS WINAPI NtResetWriteWatch( HANDLE process, PVOID base, SIZE_T size )
  *             NtReadVirtualMemory   (NTDLL.@)
  *             ZwReadVirtualMemory   (NTDLL.@)
  */
-NTSTATUS WINAPI NtReadVirtualMemory( HANDLE process, const void *addr, void *buffer,
-                                     SIZE_T size, SIZE_T *bytes_read )
+NTSTATUS SYSCALL NtReadVirtualMemory( HANDLE process, const void *addr, void *buffer,
+                                      SIZE_T size, SIZE_T *bytes_read )
 {
     unsigned int status;
 #ifdef linux
@@ -5670,8 +5670,8 @@ done:
  *             NtWriteVirtualMemory   (NTDLL.@)
  *             ZwWriteVirtualMemory   (NTDLL.@)
  */
-NTSTATUS WINAPI NtWriteVirtualMemory( HANDLE process, void *addr, const void *buffer,
-                                      SIZE_T size, SIZE_T *bytes_written )
+NTSTATUS SYSCALL NtWriteVirtualMemory( HANDLE process, void *addr, const void *buffer,
+                                       SIZE_T size, SIZE_T *bytes_written )
 {
     unsigned int status;
 
@@ -5700,7 +5700,7 @@ NTSTATUS WINAPI NtWriteVirtualMemory( HANDLE process, void *addr, const void *bu
  *             NtAreMappedFilesTheSame   (NTDLL.@)
  *             ZwAreMappedFilesTheSame   (NTDLL.@)
  */
-NTSTATUS WINAPI NtAreMappedFilesTheSame(PVOID addr1, PVOID addr2)
+NTSTATUS SYSCALL NtAreMappedFilesTheSame(PVOID addr1, PVOID addr2)
 {
     struct file_view *view1, *view2;
     unsigned int status;
@@ -5772,10 +5772,10 @@ static NTSTATUS prefetch_memory( HANDLE process, ULONG_PTR count,
  *           NtSetInformationVirtualMemory   (NTDLL.@)
  *           ZwSetInformationVirtualMemory   (NTDLL.@)
  */
-NTSTATUS WINAPI NtSetInformationVirtualMemory( HANDLE process,
-                                               VIRTUAL_MEMORY_INFORMATION_CLASS info_class,
-                                               ULONG_PTR count, PMEMORY_RANGE_ENTRY addresses,
-                                               PVOID ptr, ULONG size )
+NTSTATUS SYSCALL NtSetInformationVirtualMemory( HANDLE process,
+                                                VIRTUAL_MEMORY_INFORMATION_CLASS info_class,
+                                                ULONG_PTR count, PMEMORY_RANGE_ENTRY addresses,
+                                                PVOID ptr, ULONG size )
 {
     TRACE("(%p, info_class=%d, %lu, %p, %p, %u)\n",
           process, info_class, count, addresses, ptr, (int)size);
@@ -5799,7 +5799,7 @@ NTSTATUS WINAPI NtSetInformationVirtualMemory( HANDLE process,
 /**********************************************************************
  *           NtFlushInstructionCache  (NTDLL.@)
  */
-NTSTATUS WINAPI NtFlushInstructionCache( HANDLE handle, const void *addr, SIZE_T size )
+NTSTATUS SYSCALL NtFlushInstructionCache( HANDLE handle, const void *addr, SIZE_T size )
 {
 #if defined(__x86_64__) || defined(__i386__)
     /* no-op */
@@ -5971,7 +5971,7 @@ static void do_apc_memorybarrier( void )
 /**********************************************************************
  *           NtFlushProcessWriteBuffers  (NTDLL.@)
  */
-void WINAPI NtFlushProcessWriteBuffers(void)
+void SYSCALL NtFlushProcessWriteBuffers(void)
 {
     if (try_mach_tgrpvs())
         return;
@@ -5986,8 +5986,8 @@ void WINAPI NtFlushProcessWriteBuffers(void)
 /**********************************************************************
  *           NtCreatePagingFile  (NTDLL.@)
  */
-NTSTATUS WINAPI NtCreatePagingFile( UNICODE_STRING *name, LARGE_INTEGER *min_size,
-                                    LARGE_INTEGER *max_size, LARGE_INTEGER *actual_size )
+NTSTATUS SYSCALL NtCreatePagingFile( UNICODE_STRING *name, LARGE_INTEGER *min_size,
+                                     LARGE_INTEGER *max_size, LARGE_INTEGER *actual_size )
 {
     FIXME( "(%s %p %p %p) stub\n", debugstr_us(name), min_size, max_size, actual_size );
     return STATUS_SUCCESS;
@@ -5999,8 +5999,8 @@ NTSTATUS WINAPI NtCreatePagingFile( UNICODE_STRING *name, LARGE_INTEGER *min_siz
  *             NtWow64AllocateVirtualMemory64   (NTDLL.@)
  *             ZwWow64AllocateVirtualMemory64   (NTDLL.@)
  */
-NTSTATUS WINAPI NtWow64AllocateVirtualMemory64( HANDLE process, ULONG64 *ret, ULONG64 zero_bits,
-                                                ULONG64 *size_ptr, ULONG type, ULONG protect )
+NTSTATUS SYSCALL NtWow64AllocateVirtualMemory64( HANDLE process, ULONG64 *ret, ULONG64 zero_bits,
+                                                 ULONG64 *size_ptr, ULONG type, ULONG protect )
 {
     void *base;
     SIZE_T size;
@@ -6056,8 +6056,8 @@ NTSTATUS WINAPI NtWow64AllocateVirtualMemory64( HANDLE process, ULONG64 *ret, UL
  *             NtWow64ReadVirtualMemory64   (NTDLL.@)
  *             ZwWow64ReadVirtualMemory64   (NTDLL.@)
  */
-NTSTATUS WINAPI NtWow64ReadVirtualMemory64( HANDLE process, ULONG64 addr, void *buffer,
-                                            ULONG64 size, ULONG64 *bytes_read )
+NTSTATUS SYSCALL NtWow64ReadVirtualMemory64( HANDLE process, ULONG64 addr, void *buffer,
+                                             ULONG64 size, ULONG64 *bytes_read )
 {
     unsigned int status;
 
@@ -6088,8 +6088,8 @@ NTSTATUS WINAPI NtWow64ReadVirtualMemory64( HANDLE process, ULONG64 addr, void *
  *             NtWow64WriteVirtualMemory64   (NTDLL.@)
  *             ZwWow64WriteVirtualMemory64   (NTDLL.@)
  */
-NTSTATUS WINAPI NtWow64WriteVirtualMemory64( HANDLE process, ULONG64 addr, const void *buffer,
-                                             ULONG64 size, ULONG64 *bytes_written )
+NTSTATUS SYSCALL NtWow64WriteVirtualMemory64( HANDLE process, ULONG64 addr, const void *buffer,
+                                              ULONG64 size, ULONG64 *bytes_written )
 {
     unsigned int status;
 
@@ -6120,8 +6120,8 @@ NTSTATUS WINAPI NtWow64WriteVirtualMemory64( HANDLE process, ULONG64 addr, const
  *             NtWow64GetNativeSystemInformation   (NTDLL.@)
  *             ZwWow64GetNativeSystemInformation   (NTDLL.@)
  */
-NTSTATUS WINAPI NtWow64GetNativeSystemInformation( SYSTEM_INFORMATION_CLASS class, void *info,
-                                                   ULONG len, ULONG *retlen )
+NTSTATUS SYSCALL NtWow64GetNativeSystemInformation( SYSTEM_INFORMATION_CLASS class, void *info,
+                                                    ULONG len, ULONG *retlen )
 {
     NTSTATUS status;
 
@@ -6153,7 +6153,7 @@ NTSTATUS WINAPI NtWow64GetNativeSystemInformation( SYSTEM_INFORMATION_CLASS clas
  *             NtWow64IsProcessorFeaturePresent   (NTDLL.@)
  *             ZwWow64IsProcessorFeaturePresent   (NTDLL.@)
  */
-NTSTATUS WINAPI NtWow64IsProcessorFeaturePresent( UINT feature )
+NTSTATUS SYSCALL NtWow64IsProcessorFeaturePresent( UINT feature )
 {
     return feature < PROCESSOR_FEATURE_MAX && user_shared_data->ProcessorFeatures[feature];
 }
diff --git a/include/winternl.h b/include/winternl.h
index 11111111111..11111111111 100644
--- a/include/winternl.h
+++ b/include/winternl.h
@@ -4003,277 +4003,277 @@ NTSYSAPI void      WINAPI LdrShutdownThread(void);
 NTSYSAPI NTSTATUS  WINAPI LdrUnloadDll(HMODULE);
 NTSYSAPI NTSTATUS  WINAPI LdrUnlockLoaderLock(ULONG,ULONG_PTR);
 NTSYSAPI NTSTATUS  WINAPI LdrUnregisterDllNotification(void*);
-NTSYSAPI NTSTATUS  WINAPI NtAcceptConnectPort(PHANDLE,ULONG,PLPC_MESSAGE,BOOLEAN,PLPC_SECTION_WRITE,PLPC_SECTION_READ);
-NTSYSAPI NTSTATUS  WINAPI NtAccessCheck(PSECURITY_DESCRIPTOR,HANDLE,ACCESS_MASK,PGENERIC_MAPPING,PPRIVILEGE_SET,PULONG,PULONG,NTSTATUS*);
-NTSYSAPI NTSTATUS  WINAPI NtAccessCheckAndAuditAlarm(PUNICODE_STRING,HANDLE,PUNICODE_STRING,PUNICODE_STRING,PSECURITY_DESCRIPTOR,ACCESS_MASK,PGENERIC_MAPPING,BOOLEAN,PACCESS_MASK,PBOOLEAN,PBOOLEAN);
-NTSYSAPI NTSTATUS  WINAPI NtAddAtom(const WCHAR*,ULONG,RTL_ATOM*);
-NTSYSAPI NTSTATUS  WINAPI NtAdjustGroupsToken(HANDLE,BOOLEAN,PTOKEN_GROUPS,ULONG,PTOKEN_GROUPS,PULONG);
-NTSYSAPI NTSTATUS  WINAPI NtAdjustPrivilegesToken(HANDLE,BOOLEAN,PTOKEN_PRIVILEGES,DWORD,PTOKEN_PRIVILEGES,PDWORD);
-NTSYSAPI NTSTATUS  WINAPI NtAlertResumeThread(HANDLE,PULONG);
-NTSYSAPI NTSTATUS  WINAPI NtAlertThread(HANDLE ThreadHandle);
-NTSYSAPI NTSTATUS  WINAPI NtAlertThreadByThreadId(HANDLE);
-NTSYSAPI NTSTATUS  WINAPI NtAllocateLocallyUniqueId(PLUID lpLuid);
-NTSYSAPI NTSTATUS  WINAPI NtAllocateUuids(PULARGE_INTEGER,PULONG,PULONG,PUCHAR);
-NTSYSAPI NTSTATUS  WINAPI NtAllocateVirtualMemory(HANDLE,PVOID*,ULONG_PTR,SIZE_T*,ULONG,ULONG);
-NTSYSAPI NTSTATUS  WINAPI NtAllocateVirtualMemoryEx(HANDLE,PVOID*,SIZE_T*,ULONG,ULONG,MEM_EXTENDED_PARAMETER*,ULONG);
-NTSYSAPI NTSTATUS  WINAPI NtAreMappedFilesTheSame(PVOID,PVOID);
-NTSYSAPI NTSTATUS  WINAPI NtAssignProcessToJobObject(HANDLE,HANDLE);
-NTSYSAPI NTSTATUS  WINAPI NtCallbackReturn(PVOID,ULONG,NTSTATUS);
-NTSYSAPI NTSTATUS  WINAPI NtCancelIoFile(HANDLE,PIO_STATUS_BLOCK);
-NTSYSAPI NTSTATUS  WINAPI NtCancelIoFileEx(HANDLE,PIO_STATUS_BLOCK,PIO_STATUS_BLOCK);
-NTSYSAPI NTSTATUS  WINAPI NtCancelSynchronousIoFile(HANDLE,PIO_STATUS_BLOCK,PIO_STATUS_BLOCK);
-NTSYSAPI NTSTATUS  WINAPI NtCancelTimer(HANDLE, BOOLEAN*);
-NTSYSAPI NTSTATUS  WINAPI NtClearEvent(HANDLE);
-NTSYSAPI NTSTATUS  WINAPI NtClose(HANDLE);
+NTSYSAPI NTSTATUS  SYSCALL NtAcceptConnectPort(PHANDLE,ULONG,PLPC_MESSAGE,BOOLEAN,PLPC_SECTION_WRITE,PLPC_SECTION_READ);
+NTSYSAPI NTSTATUS  SYSCALL NtAccessCheck(PSECURITY_DESCRIPTOR,HANDLE,ACCESS_MASK,PGENERIC_MAPPING,PPRIVILEGE_SET,PULONG,PULONG,NTSTATUS*);
+NTSYSAPI NTSTATUS  SYSCALL NtAccessCheckAndAuditAlarm(PUNICODE_STRING,HANDLE,PUNICODE_STRING,PUNICODE_STRING,PSECURITY_DESCRIPTOR,ACCESS_MASK,PGENERIC_MAPPING,BOOLEAN,PACCESS_MASK,PBOOLEAN,PBOOLEAN);
+NTSYSAPI NTSTATUS  SYSCALL NtAddAtom(const WCHAR*,ULONG,RTL_ATOM*);
+NTSYSAPI NTSTATUS  SYSCALL NtAdjustGroupsToken(HANDLE,BOOLEAN,PTOKEN_GROUPS,ULONG,PTOKEN_GROUPS,PULONG);
+NTSYSAPI NTSTATUS  SYSCALL NtAdjustPrivilegesToken(HANDLE,BOOLEAN,PTOKEN_PRIVILEGES,DWORD,PTOKEN_PRIVILEGES,PDWORD);
+NTSYSAPI NTSTATUS  SYSCALL NtAlertResumeThread(HANDLE,PULONG);
+NTSYSAPI NTSTATUS  SYSCALL NtAlertThread(HANDLE ThreadHandle);
+NTSYSAPI NTSTATUS  SYSCALL NtAlertThreadByThreadId(HANDLE);
+NTSYSAPI NTSTATUS  SYSCALL NtAllocateLocallyUniqueId(PLUID lpLuid);
+NTSYSAPI NTSTATUS  SYSCALL NtAllocateUuids(PULARGE_INTEGER,PULONG,PULONG,PUCHAR);
+NTSYSAPI NTSTATUS  SYSCALL NtAllocateVirtualMemory(HANDLE,PVOID*,ULONG_PTR,SIZE_T*,ULONG,ULONG);
+NTSYSAPI NTSTATUS  SYSCALL NtAllocateVirtualMemoryEx(HANDLE,PVOID*,SIZE_T*,ULONG,ULONG,MEM_EXTENDED_PARAMETER*,ULONG);
+NTSYSAPI NTSTATUS  SYSCALL NtAreMappedFilesTheSame(PVOID,PVOID);
+NTSYSAPI NTSTATUS  SYSCALL NtAssignProcessToJobObject(HANDLE,HANDLE);
+NTSYSAPI NTSTATUS  SYSCALL NtCallbackReturn(PVOID,ULONG,NTSTATUS);
+NTSYSAPI NTSTATUS  SYSCALL NtCancelIoFile(HANDLE,PIO_STATUS_BLOCK);
+NTSYSAPI NTSTATUS  SYSCALL NtCancelIoFileEx(HANDLE,PIO_STATUS_BLOCK,PIO_STATUS_BLOCK);
+NTSYSAPI NTSTATUS  SYSCALL NtCancelSynchronousIoFile(HANDLE,PIO_STATUS_BLOCK,PIO_STATUS_BLOCK);
+NTSYSAPI NTSTATUS  SYSCALL NtCancelTimer(HANDLE, BOOLEAN*);
+NTSYSAPI NTSTATUS  SYSCALL NtClearEvent(HANDLE);
+NTSYSAPI NTSTATUS  SYSCALL NtClose(HANDLE);
 NTSYSAPI NTSTATUS  WINAPI NtCloseObjectAuditAlarm(PUNICODE_STRING,HANDLE,BOOLEAN);
-NTSYSAPI NTSTATUS  WINAPI NtCommitTransaction(HANDLE,BOOLEAN);
-NTSYSAPI NTSTATUS  WINAPI NtCompareObjects(HANDLE,HANDLE);
-NTSYSAPI NTSTATUS  WINAPI NtCompleteConnectPort(HANDLE);
-NTSYSAPI NTSTATUS  WINAPI NtConnectPort(PHANDLE,PUNICODE_STRING,PSECURITY_QUALITY_OF_SERVICE,PLPC_SECTION_WRITE,PLPC_SECTION_READ,PULONG,PVOID,PULONG);
-NTSYSAPI NTSTATUS  WINAPI NtContinue(PCONTEXT,BOOLEAN);
-NTSYSAPI NTSTATUS  WINAPI NtCreateDebugObject(HANDLE*,ACCESS_MASK,OBJECT_ATTRIBUTES*,ULONG);
-NTSYSAPI NTSTATUS  WINAPI NtCreateDirectoryObject(PHANDLE,ACCESS_MASK,POBJECT_ATTRIBUTES);
-NTSYSAPI NTSTATUS  WINAPI NtCreateEvent(PHANDLE,ACCESS_MASK,const OBJECT_ATTRIBUTES *,EVENT_TYPE,BOOLEAN);
+NTSYSAPI NTSTATUS  SYSCALL NtCommitTransaction(HANDLE,BOOLEAN);
+NTSYSAPI NTSTATUS  SYSCALL NtCompareObjects(HANDLE,HANDLE);
+NTSYSAPI NTSTATUS  SYSCALL NtCompleteConnectPort(HANDLE);
+NTSYSAPI NTSTATUS  SYSCALL NtConnectPort(PHANDLE,PUNICODE_STRING,PSECURITY_QUALITY_OF_SERVICE,PLPC_SECTION_WRITE,PLPC_SECTION_READ,PULONG,PVOID,PULONG);
+NTSYSAPI NTSTATUS  SYSCALL NtContinue(PCONTEXT,BOOLEAN);
+NTSYSAPI NTSTATUS  SYSCALL NtCreateDebugObject(HANDLE*,ACCESS_MASK,OBJECT_ATTRIBUTES*,ULONG);
+NTSYSAPI NTSTATUS  SYSCALL NtCreateDirectoryObject(PHANDLE,ACCESS_MASK,POBJECT_ATTRIBUTES);
+NTSYSAPI NTSTATUS  SYSCALL NtCreateEvent(PHANDLE,ACCESS_MASK,const OBJECT_ATTRIBUTES *,EVENT_TYPE,BOOLEAN);
 NTSYSAPI NTSTATUS  WINAPI NtCreateEventPair(PHANDLE,ACCESS_MASK,POBJECT_ATTRIBUTES);
-NTSYSAPI NTSTATUS  WINAPI NtCreateFile(PHANDLE,ACCESS_MASK,POBJECT_ATTRIBUTES,PIO_STATUS_BLOCK,PLARGE_INTEGER,ULONG,ULONG,ULONG,ULONG,PVOID,ULONG);
-NTSYSAPI NTSTATUS  WINAPI NtCreateIoCompletion(PHANDLE,ACCESS_MASK,POBJECT_ATTRIBUTES,ULONG);
-NTSYSAPI NTSTATUS  WINAPI NtCreateJobObject(PHANDLE,ACCESS_MASK,const OBJECT_ATTRIBUTES*);
-NTSYSAPI NTSTATUS  WINAPI NtCreateKey(PHANDLE,ACCESS_MASK,const OBJECT_ATTRIBUTES*,ULONG,const UNICODE_STRING*,ULONG,PULONG);
-NTSYSAPI NTSTATUS  WINAPI NtCreateKeyTransacted(PHANDLE,ACCESS_MASK,const OBJECT_ATTRIBUTES*,ULONG,const UNICODE_STRING*,ULONG,HANDLE,ULONG*);
-NTSYSAPI NTSTATUS  WINAPI NtCreateKeyedEvent(HANDLE*,ACCESS_MASK,const OBJECT_ATTRIBUTES*,ULONG);
-NTSYSAPI NTSTATUS  WINAPI NtCreateLowBoxToken(HANDLE*,HANDLE,ACCESS_MASK,OBJECT_ATTRIBUTES*,SID*,ULONG,SID_AND_ATTRIBUTES*,ULONG,HANDLE*);
-NTSYSAPI NTSTATUS  WINAPI NtCreateMailslotFile(PHANDLE,ACCESS_MASK,POBJECT_ATTRIBUTES,PIO_STATUS_BLOCK,ULONG,ULONG,ULONG,PLARGE_INTEGER);
-NTSYSAPI NTSTATUS  WINAPI NtCreateMutant(HANDLE*,ACCESS_MASK,const OBJECT_ATTRIBUTES*,BOOLEAN);
-NTSYSAPI NTSTATUS  WINAPI NtCreateNamedPipeFile(PHANDLE,ULONG,POBJECT_ATTRIBUTES,PIO_STATUS_BLOCK,ULONG,ULONG,ULONG,ULONG,ULONG,ULONG,ULONG,ULONG,ULONG,PLARGE_INTEGER);
-NTSYSAPI NTSTATUS  WINAPI NtCreatePagingFile(PUNICODE_STRING,PLARGE_INTEGER,PLARGE_INTEGER,PLARGE_INTEGER);
-NTSYSAPI NTSTATUS  WINAPI NtCreatePort(PHANDLE,POBJECT_ATTRIBUTES,ULONG,ULONG,PULONG);
+NTSYSAPI NTSTATUS  SYSCALL NtCreateFile(PHANDLE,ACCESS_MASK,POBJECT_ATTRIBUTES,PIO_STATUS_BLOCK,PLARGE_INTEGER,ULONG,ULONG,ULONG,ULONG,PVOID,ULONG);
+NTSYSAPI NTSTATUS  SYSCALL NtCreateIoCompletion(PHANDLE,ACCESS_MASK,POBJECT_ATTRIBUTES,ULONG);
+NTSYSAPI NTSTATUS  SYSCALL NtCreateJobObject(PHANDLE,ACCESS_MASK,const OBJECT_ATTRIBUTES*);
+NTSYSAPI NTSTATUS  SYSCALL NtCreateKey(PHANDLE,ACCESS_MASK,const OBJECT_ATTRIBUTES*,ULONG,const UNICODE_STRING*,ULONG,PULONG);
+NTSYSAPI NTSTATUS  SYSCALL NtCreateKeyTransacted(PHANDLE,ACCESS_MASK,const OBJECT_ATTRIBUTES*,ULONG,const UNICODE_STRING*,ULONG,HANDLE,ULONG*);
+NTSYSAPI NTSTATUS  SYSCALL NtCreateKeyedEvent(HANDLE*,ACCESS_MASK,const OBJECT_ATTRIBUTES*,ULONG);
+NTSYSAPI NTSTATUS  SYSCALL NtCreateLowBoxToken(HANDLE*,HANDLE,ACCESS_MASK,OBJECT_ATTRIBUTES*,SID*,ULONG,SID_AND_ATTRIBUTES*,ULONG,HANDLE*);
+NTSYSAPI NTSTATUS  SYSCALL NtCreateMailslotFile(PHANDLE,ACCESS_MASK,POBJECT_ATTRIBUTES,PIO_STATUS_BLOCK,ULONG,ULONG,ULONG,PLARGE_INTEGER);
+NTSYSAPI NTSTATUS  SYSCALL NtCreateMutant(HANDLE*,ACCESS_MASK,const OBJECT_ATTRIBUTES*,BOOLEAN);
+NTSYSAPI NTSTATUS  SYSCALL NtCreateNamedPipeFile(PHANDLE,ULONG,POBJECT_ATTRIBUTES,PIO_STATUS_BLOCK,ULONG,ULONG,ULONG,ULONG,ULONG,ULONG,ULONG,ULONG,ULONG,PLARGE_INTEGER);
+NTSYSAPI NTSTATUS  SYSCALL NtCreatePagingFile(PUNICODE_STRING,PLARGE_INTEGER,PLARGE_INTEGER,PLARGE_INTEGER);
+NTSYSAPI NTSTATUS  SYSCALL NtCreatePort(PHANDLE,POBJECT_ATTRIBUTES,ULONG,ULONG,PULONG);
 NTSYSAPI NTSTATUS  WINAPI NtCreateProcess(PHANDLE,ACCESS_MASK,POBJECT_ATTRIBUTES,HANDLE,BOOLEAN,HANDLE,HANDLE,HANDLE);
 NTSYSAPI NTSTATUS  WINAPI NtCreateProfile(PHANDLE,HANDLE,PVOID,ULONG,ULONG,PVOID,ULONG,KPROFILE_SOURCE,KAFFINITY);
-NTSYSAPI NTSTATUS  WINAPI NtCreateSection(HANDLE*,ACCESS_MASK,const OBJECT_ATTRIBUTES*,const LARGE_INTEGER*,ULONG,ULONG,HANDLE);
-NTSYSAPI NTSTATUS  WINAPI NtCreateSemaphore(PHANDLE,ACCESS_MASK,const OBJECT_ATTRIBUTES*,LONG,LONG);
-NTSYSAPI NTSTATUS  WINAPI NtCreateSymbolicLinkObject(PHANDLE,ACCESS_MASK,POBJECT_ATTRIBUTES,PUNICODE_STRING);
-NTSYSAPI NTSTATUS  WINAPI NtCreateThread(PHANDLE,ACCESS_MASK,POBJECT_ATTRIBUTES,HANDLE,PCLIENT_ID,PCONTEXT,PINITIAL_TEB,BOOLEAN);
-NTSYSAPI NTSTATUS  WINAPI NtCreateThreadEx(HANDLE*,ACCESS_MASK,OBJECT_ATTRIBUTES*,HANDLE,PRTL_THREAD_START_ROUTINE,void*,ULONG,ULONG_PTR,SIZE_T,SIZE_T,PS_ATTRIBUTE_LIST*);
-NTSYSAPI NTSTATUS  WINAPI NtCreateTimer(HANDLE*, ACCESS_MASK, const OBJECT_ATTRIBUTES*, TIMER_TYPE);
+NTSYSAPI NTSTATUS  SYSCALL NtCreateSection(HANDLE*,ACCESS_MASK,const OBJECT_ATTRIBUTES*,const LARGE_INTEGER*,ULONG,ULONG,HANDLE);
+NTSYSAPI NTSTATUS  SYSCALL NtCreateSemaphore(PHANDLE,ACCESS_MASK,const OBJECT_ATTRIBUTES*,LONG,LONG);
+NTSYSAPI NTSTATUS  SYSCALL NtCreateSymbolicLinkObject(PHANDLE,ACCESS_MASK,POBJECT_ATTRIBUTES,PUNICODE_STRING);
+NTSYSAPI NTSTATUS  SYSCALL NtCreateThread(PHANDLE,ACCESS_MASK,POBJECT_ATTRIBUTES,HANDLE,PCLIENT_ID,PCONTEXT,PINITIAL_TEB,BOOLEAN);
+NTSYSAPI NTSTATUS  SYSCALL NtCreateThreadEx(HANDLE*,ACCESS_MASK,OBJECT_ATTRIBUTES*,HANDLE,PRTL_THREAD_START_ROUTINE,void*,ULONG,ULONG_PTR,SIZE_T,SIZE_T,PS_ATTRIBUTE_LIST*);
+NTSYSAPI NTSTATUS  SYSCALL NtCreateTimer(HANDLE*, ACCESS_MASK, const OBJECT_ATTRIBUTES*, TIMER_TYPE);
 NTSYSAPI NTSTATUS  WINAPI NtCreateToken(PHANDLE,ACCESS_MASK,POBJECT_ATTRIBUTES,TOKEN_TYPE,PLUID,PLARGE_INTEGER,PTOKEN_USER,PTOKEN_GROUPS,PTOKEN_PRIVILEGES,PTOKEN_OWNER,PTOKEN_PRIMARY_GROUP,PTOKEN_DEFAULT_DACL,PTOKEN_SOURCE);
-NTSYSAPI NTSTATUS  WINAPI NtCreateTransaction(PHANDLE,ACCESS_MASK,POBJECT_ATTRIBUTES,LPGUID,HANDLE,ULONG,ULONG,ULONG,PLARGE_INTEGER,PUNICODE_STRING);
-NTSYSAPI NTSTATUS  WINAPI NtCreateUserProcess(HANDLE*,HANDLE*,ACCESS_MASK,ACCESS_MASK,OBJECT_ATTRIBUTES*,OBJECT_ATTRIBUTES*,ULONG,ULONG,RTL_USER_PROCESS_PARAMETERS*,PS_CREATE_INFO*,PS_ATTRIBUTE_LIST*);
-NTSYSAPI NTSTATUS  WINAPI NtDebugActiveProcess(HANDLE,HANDLE);
-NTSYSAPI NTSTATUS  WINAPI NtDebugContinue(HANDLE,CLIENT_ID*,NTSTATUS);
-NTSYSAPI NTSTATUS  WINAPI NtDelayExecution(BOOLEAN,const LARGE_INTEGER*);
-NTSYSAPI NTSTATUS  WINAPI NtDeleteAtom(RTL_ATOM);
-NTSYSAPI NTSTATUS  WINAPI NtDeleteFile(POBJECT_ATTRIBUTES);
-NTSYSAPI NTSTATUS  WINAPI NtDeleteKey(HANDLE);
-NTSYSAPI NTSTATUS  WINAPI NtDeleteValueKey(HANDLE,const UNICODE_STRING *);
-NTSYSAPI NTSTATUS  WINAPI NtDeviceIoControlFile(HANDLE,HANDLE,PIO_APC_ROUTINE,PVOID,PIO_STATUS_BLOCK,ULONG,PVOID,ULONG,PVOID,ULONG);
-NTSYSAPI NTSTATUS  WINAPI NtDisplayString(PUNICODE_STRING);
-NTSYSAPI NTSTATUS  WINAPI NtDuplicateObject(HANDLE,HANDLE,HANDLE,PHANDLE,ACCESS_MASK,ULONG,ULONG);
-NTSYSAPI NTSTATUS  WINAPI NtDuplicateToken(HANDLE,ACCESS_MASK,POBJECT_ATTRIBUTES,SECURITY_IMPERSONATION_LEVEL,TOKEN_TYPE,PHANDLE);
-NTSYSAPI NTSTATUS  WINAPI NtEnumerateKey(HANDLE,ULONG,KEY_INFORMATION_CLASS,void *,DWORD,DWORD *);
-NTSYSAPI NTSTATUS  WINAPI NtEnumerateValueKey(HANDLE,ULONG,KEY_VALUE_INFORMATION_CLASS,PVOID,ULONG,PULONG);
+NTSYSAPI NTSTATUS  SYSCALL NtCreateTransaction(PHANDLE,ACCESS_MASK,POBJECT_ATTRIBUTES,LPGUID,HANDLE,ULONG,ULONG,ULONG,PLARGE_INTEGER,PUNICODE_STRING);
+NTSYSAPI NTSTATUS  SYSCALL NtCreateUserProcess(HANDLE*,HANDLE*,ACCESS_MASK,ACCESS_MASK,OBJECT_ATTRIBUTES*,OBJECT_ATTRIBUTES*,ULONG,ULONG,RTL_USER_PROCESS_PARAMETERS*,PS_CREATE_INFO*,PS_ATTRIBUTE_LIST*);
+NTSYSAPI NTSTATUS  SYSCALL NtDebugActiveProcess(HANDLE,HANDLE);
+NTSYSAPI NTSTATUS  SYSCALL NtDebugContinue(HANDLE,CLIENT_ID*,NTSTATUS);
+NTSYSAPI NTSTATUS  SYSCALL NtDelayExecution(BOOLEAN,const LARGE_INTEGER*);
+NTSYSAPI NTSTATUS  SYSCALL NtDeleteAtom(RTL_ATOM);
+NTSYSAPI NTSTATUS  SYSCALL NtDeleteFile(POBJECT_ATTRIBUTES);
+NTSYSAPI NTSTATUS  SYSCALL NtDeleteKey(HANDLE);
+NTSYSAPI NTSTATUS  SYSCALL NtDeleteValueKey(HANDLE,const UNICODE_STRING *);
+NTSYSAPI NTSTATUS  SYSCALL NtDeviceIoControlFile(HANDLE,HANDLE,PIO_APC_ROUTINE,PVOID,PIO_STATUS_BLOCK,ULONG,PVOID,ULONG,PVOID,ULONG);
+NTSYSAPI NTSTATUS  SYSCALL NtDisplayString(PUNICODE_STRING);
+NTSYSAPI NTSTATUS  SYSCALL NtDuplicateObject(HANDLE,HANDLE,HANDLE,PHANDLE,ACCESS_MASK,ULONG,ULONG);
+NTSYSAPI NTSTATUS  SYSCALL NtDuplicateToken(HANDLE,ACCESS_MASK,POBJECT_ATTRIBUTES,SECURITY_IMPERSONATION_LEVEL,TOKEN_TYPE,PHANDLE);
+NTSYSAPI NTSTATUS  SYSCALL NtEnumerateKey(HANDLE,ULONG,KEY_INFORMATION_CLASS,void *,DWORD,DWORD *);
+NTSYSAPI NTSTATUS  SYSCALL NtEnumerateValueKey(HANDLE,ULONG,KEY_VALUE_INFORMATION_CLASS,PVOID,ULONG,PULONG);
 NTSYSAPI NTSTATUS  WINAPI NtExtendSection(HANDLE,PLARGE_INTEGER);
-NTSYSAPI NTSTATUS  WINAPI NtFilterToken(HANDLE,ULONG,TOKEN_GROUPS*,TOKEN_PRIVILEGES*,TOKEN_GROUPS*,HANDLE*);
-NTSYSAPI NTSTATUS  WINAPI NtFindAtom(const WCHAR*,ULONG,RTL_ATOM*);
-NTSYSAPI NTSTATUS  WINAPI NtFlushBuffersFile(HANDLE,IO_STATUS_BLOCK*);
-NTSYSAPI NTSTATUS  WINAPI NtFlushInstructionCache(HANDLE,LPCVOID,SIZE_T);
-NTSYSAPI NTSTATUS  WINAPI NtFlushKey(HANDLE);
-NTSYSAPI void      WINAPI NtFlushProcessWriteBuffers(void);
-NTSYSAPI NTSTATUS  WINAPI NtFlushVirtualMemory(HANDLE,LPCVOID*,SIZE_T*,ULONG);
+NTSYSAPI NTSTATUS  SYSCALL NtFilterToken(HANDLE,ULONG,TOKEN_GROUPS*,TOKEN_PRIVILEGES*,TOKEN_GROUPS*,HANDLE*);
+NTSYSAPI NTSTATUS  SYSCALL NtFindAtom(const WCHAR*,ULONG,RTL_ATOM*);
+NTSYSAPI NTSTATUS  SYSCALL NtFlushBuffersFile(HANDLE,IO_STATUS_BLOCK*);
+NTSYSAPI NTSTATUS  SYSCALL NtFlushInstructionCache(HANDLE,LPCVOID,SIZE_T);
+NTSYSAPI NTSTATUS  SYSCALL NtFlushKey(HANDLE);
+NTSYSAPI void      SYSCALL NtFlushProcessWriteBuffers(void);
+NTSYSAPI NTSTATUS  SYSCALL NtFlushVirtualMemory(HANDLE,LPCVOID*,SIZE_T*,ULONG);
 NTSYSAPI NTSTATUS  WINAPI NtFlushWriteBuffer(VOID);
-NTSYSAPI NTSTATUS  WINAPI NtFreeVirtualMemory(HANDLE,PVOID*,SIZE_T*,ULONG);
-NTSYSAPI NTSTATUS  WINAPI NtFsControlFile(HANDLE,HANDLE,PIO_APC_ROUTINE,PVOID,PIO_STATUS_BLOCK,ULONG,PVOID,ULONG,PVOID,ULONG);
-NTSYSAPI NTSTATUS  WINAPI NtGetContextThread(HANDLE,CONTEXT*);
-NTSYSAPI ULONG     WINAPI NtGetCurrentProcessorNumber(void);
-NTSYSAPI NTSTATUS  WINAPI NtGetNextThread(HANDLE,HANDLE,ACCESS_MASK,ULONG,ULONG,HANDLE*);
-NTSYSAPI NTSTATUS  WINAPI NtGetNlsSectionPtr(ULONG,ULONG,void*,void**,SIZE_T*);
+NTSYSAPI NTSTATUS  SYSCALL NtFreeVirtualMemory(HANDLE,PVOID*,SIZE_T*,ULONG);
+NTSYSAPI NTSTATUS  SYSCALL NtFsControlFile(HANDLE,HANDLE,PIO_APC_ROUTINE,PVOID,PIO_STATUS_BLOCK,ULONG,PVOID,ULONG,PVOID,ULONG);
+NTSYSAPI NTSTATUS  SYSCALL NtGetContextThread(HANDLE,CONTEXT*);
+NTSYSAPI ULONG     SYSCALL NtGetCurrentProcessorNumber(void);
+NTSYSAPI NTSTATUS  SYSCALL NtGetNextThread(HANDLE,HANDLE,ACCESS_MASK,ULONG,ULONG,HANDLE*);
+NTSYSAPI NTSTATUS  SYSCALL NtGetNlsSectionPtr(ULONG,ULONG,void*,void**,SIZE_T*);
 NTSYSAPI NTSTATUS  WINAPI NtGetPlugPlayEvent(ULONG,ULONG,PVOID,ULONG);
 NTSYSAPI ULONG     WINAPI NtGetTickCount(VOID);
-NTSYSAPI NTSTATUS  WINAPI NtGetWriteWatch(HANDLE,ULONG,PVOID,SIZE_T,PVOID*,ULONG_PTR*,ULONG*);
-NTSYSAPI NTSTATUS  WINAPI NtImpersonateAnonymousToken(HANDLE);
+NTSYSAPI NTSTATUS  SYSCALL NtGetWriteWatch(HANDLE,ULONG,PVOID,SIZE_T,PVOID*,ULONG_PTR*,ULONG*);
+NTSYSAPI NTSTATUS  SYSCALL NtImpersonateAnonymousToken(HANDLE);
 NTSYSAPI NTSTATUS  WINAPI NtImpersonateClientOfPort(HANDLE,PPORT_MESSAGE);
 NTSYSAPI NTSTATUS  WINAPI NtImpersonateThread(HANDLE,HANDLE,PSECURITY_QUALITY_OF_SERVICE);
-NTSYSAPI NTSTATUS  WINAPI NtInitializeNlsFiles(void**,LCID*,LARGE_INTEGER*);
+NTSYSAPI NTSTATUS  SYSCALL NtInitializeNlsFiles(void**,LCID*,LARGE_INTEGER*);
 NTSYSAPI NTSTATUS  WINAPI NtInitializeRegistry(BOOLEAN);
-NTSYSAPI NTSTATUS  WINAPI NtInitiatePowerAction(POWER_ACTION,SYSTEM_POWER_STATE,ULONG,BOOLEAN);
-NTSYSAPI NTSTATUS  WINAPI NtIsProcessInJob(HANDLE,HANDLE);
-NTSYSAPI NTSTATUS  WINAPI NtListenPort(HANDLE,PLPC_MESSAGE);
-NTSYSAPI NTSTATUS  WINAPI NtLoadDriver(const UNICODE_STRING *);
-NTSYSAPI NTSTATUS  WINAPI NtLoadKey(const OBJECT_ATTRIBUTES *,OBJECT_ATTRIBUTES *);
-NTSYSAPI NTSTATUS  WINAPI NtLoadKey2(const OBJECT_ATTRIBUTES *,OBJECT_ATTRIBUTES *,ULONG);
-NTSYSAPI NTSTATUS  WINAPI NtLoadKeyEx(const OBJECT_ATTRIBUTES *,OBJECT_ATTRIBUTES *,ULONG,HANDLE,HANDLE,ACCESS_MASK,HANDLE *,IO_STATUS_BLOCK *);
-NTSYSAPI NTSTATUS  WINAPI NtLockFile(HANDLE,HANDLE,PIO_APC_ROUTINE,void*,PIO_STATUS_BLOCK,PLARGE_INTEGER,PLARGE_INTEGER,ULONG*,BOOLEAN,BOOLEAN);
-NTSYSAPI NTSTATUS  WINAPI NtLockVirtualMemory(HANDLE,PVOID*,SIZE_T*,ULONG);
-NTSYSAPI NTSTATUS  WINAPI NtMakeTemporaryObject(HANDLE);
-NTSYSAPI NTSTATUS  WINAPI NtMapViewOfSection(HANDLE,HANDLE,PVOID*,ULONG_PTR,SIZE_T,const LARGE_INTEGER*,SIZE_T*,SECTION_INHERIT,ULONG,ULONG);
-NTSYSAPI NTSTATUS  WINAPI NtMapViewOfSectionEx(HANDLE,HANDLE,PVOID*,const LARGE_INTEGER*,SIZE_T*,ULONG,ULONG,MEM_EXTENDED_PARAMETER*,ULONG);
-NTSYSAPI NTSTATUS  WINAPI NtNotifyChangeDirectoryFile(HANDLE,HANDLE,PIO_APC_ROUTINE,PVOID,PIO_STATUS_BLOCK,PVOID,ULONG,ULONG,BOOLEAN);
-NTSYSAPI NTSTATUS  WINAPI NtNotifyChangeKey(HANDLE,HANDLE,PIO_APC_ROUTINE,PVOID,PIO_STATUS_BLOCK,ULONG,BOOLEAN,PVOID,ULONG,BOOLEAN);
-NTSYSAPI NTSTATUS  WINAPI NtNotifyChangeMultipleKeys(HANDLE,ULONG,OBJECT_ATTRIBUTES*,HANDLE,PIO_APC_ROUTINE,PVOID,PIO_STATUS_BLOCK,ULONG,BOOLEAN,PVOID,ULONG,BOOLEAN);
-NTSYSAPI NTSTATUS  WINAPI NtOpenDirectoryObject(PHANDLE,ACCESS_MASK,const OBJECT_ATTRIBUTES*);
-NTSYSAPI NTSTATUS  WINAPI NtOpenEvent(PHANDLE,ACCESS_MASK,const OBJECT_ATTRIBUTES *);
+NTSYSAPI NTSTATUS  SYSCALL NtInitiatePowerAction(POWER_ACTION,SYSTEM_POWER_STATE,ULONG,BOOLEAN);
+NTSYSAPI NTSTATUS  SYSCALL NtIsProcessInJob(HANDLE,HANDLE);
+NTSYSAPI NTSTATUS  SYSCALL NtListenPort(HANDLE,PLPC_MESSAGE);
+NTSYSAPI NTSTATUS  SYSCALL NtLoadDriver(const UNICODE_STRING *);
+NTSYSAPI NTSTATUS  SYSCALL NtLoadKey(const OBJECT_ATTRIBUTES *,OBJECT_ATTRIBUTES *);
+NTSYSAPI NTSTATUS  SYSCALL NtLoadKey2(const OBJECT_ATTRIBUTES *,OBJECT_ATTRIBUTES *,ULONG);
+NTSYSAPI NTSTATUS  SYSCALL NtLoadKeyEx(const OBJECT_ATTRIBUTES *,OBJECT_ATTRIBUTES *,ULONG,HANDLE,HANDLE,ACCESS_MASK,HANDLE *,IO_STATUS_BLOCK *);
+NTSYSAPI NTSTATUS  SYSCALL NtLockFile(HANDLE,HANDLE,PIO_APC_ROUTINE,void*,PIO_STATUS_BLOCK,PLARGE_INTEGER,PLARGE_INTEGER,ULONG*,BOOLEAN,BOOLEAN);
+NTSYSAPI NTSTATUS  SYSCALL NtLockVirtualMemory(HANDLE,PVOID*,SIZE_T*,ULONG);
+NTSYSAPI NTSTATUS  SYSCALL NtMakeTemporaryObject(HANDLE);
+NTSYSAPI NTSTATUS  SYSCALL NtMapViewOfSection(HANDLE,HANDLE,PVOID*,ULONG_PTR,SIZE_T,const LARGE_INTEGER*,SIZE_T*,SECTION_INHERIT,ULONG,ULONG);
+NTSYSAPI NTSTATUS  SYSCALL NtMapViewOfSectionEx(HANDLE,HANDLE,PVOID*,const LARGE_INTEGER*,SIZE_T*,ULONG,ULONG,MEM_EXTENDED_PARAMETER*,ULONG);
+NTSYSAPI NTSTATUS  SYSCALL NtNotifyChangeDirectoryFile(HANDLE,HANDLE,PIO_APC_ROUTINE,PVOID,PIO_STATUS_BLOCK,PVOID,ULONG,ULONG,BOOLEAN);
+NTSYSAPI NTSTATUS  SYSCALL NtNotifyChangeKey(HANDLE,HANDLE,PIO_APC_ROUTINE,PVOID,PIO_STATUS_BLOCK,ULONG,BOOLEAN,PVOID,ULONG,BOOLEAN);
+NTSYSAPI NTSTATUS  SYSCALL NtNotifyChangeMultipleKeys(HANDLE,ULONG,OBJECT_ATTRIBUTES*,HANDLE,PIO_APC_ROUTINE,PVOID,PIO_STATUS_BLOCK,ULONG,BOOLEAN,PVOID,ULONG,BOOLEAN);
+NTSYSAPI NTSTATUS  SYSCALL NtOpenDirectoryObject(PHANDLE,ACCESS_MASK,const OBJECT_ATTRIBUTES*);
+NTSYSAPI NTSTATUS  SYSCALL NtOpenEvent(PHANDLE,ACCESS_MASK,const OBJECT_ATTRIBUTES *);
 NTSYSAPI NTSTATUS  WINAPI NtOpenEventPair(PHANDLE,ACCESS_MASK,const OBJECT_ATTRIBUTES*);
-NTSYSAPI NTSTATUS  WINAPI NtOpenFile(PHANDLE,ACCESS_MASK,POBJECT_ATTRIBUTES,PIO_STATUS_BLOCK,ULONG,ULONG);
-NTSYSAPI NTSTATUS  WINAPI NtOpenIoCompletion(PHANDLE,ACCESS_MASK,const OBJECT_ATTRIBUTES*);
-NTSYSAPI NTSTATUS  WINAPI NtOpenJobObject(PHANDLE,ACCESS_MASK,const OBJECT_ATTRIBUTES*);
-NTSYSAPI NTSTATUS  WINAPI NtOpenKey(PHANDLE,ACCESS_MASK,const OBJECT_ATTRIBUTES *);
-NTSYSAPI NTSTATUS  WINAPI NtOpenKeyEx(PHANDLE,ACCESS_MASK,const OBJECT_ATTRIBUTES*,ULONG);
-NTSYSAPI NTSTATUS  WINAPI NtOpenKeyTransacted(PHANDLE,ACCESS_MASK,const OBJECT_ATTRIBUTES*,HANDLE);
-NTSYSAPI NTSTATUS  WINAPI NtOpenKeyTransactedEx(PHANDLE,ACCESS_MASK,const OBJECT_ATTRIBUTES*,ULONG,HANDLE);
-NTSYSAPI NTSTATUS  WINAPI NtOpenKeyedEvent(HANDLE*,ACCESS_MASK,const OBJECT_ATTRIBUTES*);
-NTSYSAPI NTSTATUS  WINAPI NtOpenMutant(PHANDLE,ACCESS_MASK,const OBJECT_ATTRIBUTES*);
+NTSYSAPI NTSTATUS  SYSCALL NtOpenFile(PHANDLE,ACCESS_MASK,POBJECT_ATTRIBUTES,PIO_STATUS_BLOCK,ULONG,ULONG);
+NTSYSAPI NTSTATUS  SYSCALL NtOpenIoCompletion(PHANDLE,ACCESS_MASK,const OBJECT_ATTRIBUTES*);
+NTSYSAPI NTSTATUS  SYSCALL NtOpenJobObject(PHANDLE,ACCESS_MASK,const OBJECT_ATTRIBUTES*);
+NTSYSAPI NTSTATUS  SYSCALL NtOpenKey(PHANDLE,ACCESS_MASK,const OBJECT_ATTRIBUTES *);
+NTSYSAPI NTSTATUS  SYSCALL NtOpenKeyEx(PHANDLE,ACCESS_MASK,const OBJECT_ATTRIBUTES*,ULONG);
+NTSYSAPI NTSTATUS  SYSCALL NtOpenKeyTransacted(PHANDLE,ACCESS_MASK,const OBJECT_ATTRIBUTES*,HANDLE);
+NTSYSAPI NTSTATUS  SYSCALL NtOpenKeyTransactedEx(PHANDLE,ACCESS_MASK,const OBJECT_ATTRIBUTES*,ULONG,HANDLE);
+NTSYSAPI NTSTATUS  SYSCALL NtOpenKeyedEvent(HANDLE*,ACCESS_MASK,const OBJECT_ATTRIBUTES*);
+NTSYSAPI NTSTATUS  SYSCALL NtOpenMutant(PHANDLE,ACCESS_MASK,const OBJECT_ATTRIBUTES*);
 NTSYSAPI NTSTATUS  WINAPI NtOpenObjectAuditAlarm(PUNICODE_STRING,PHANDLE,PUNICODE_STRING,PUNICODE_STRING,PSECURITY_DESCRIPTOR,HANDLE,ACCESS_MASK,ACCESS_MASK,PPRIVILEGE_SET,BOOLEAN,BOOLEAN,PBOOLEAN);
-NTSYSAPI NTSTATUS  WINAPI NtOpenProcess(PHANDLE,ACCESS_MASK,const OBJECT_ATTRIBUTES*,const CLIENT_ID*);
-NTSYSAPI NTSTATUS  WINAPI NtOpenProcessToken(HANDLE,DWORD,HANDLE *);
-NTSYSAPI NTSTATUS  WINAPI NtOpenProcessTokenEx(HANDLE,DWORD,DWORD,HANDLE *);
-NTSYSAPI NTSTATUS  WINAPI NtOpenSection(HANDLE*,ACCESS_MASK,const OBJECT_ATTRIBUTES*);
-NTSYSAPI NTSTATUS  WINAPI NtOpenSemaphore(PHANDLE,ACCESS_MASK,const OBJECT_ATTRIBUTES*);
-NTSYSAPI NTSTATUS  WINAPI NtOpenSymbolicLinkObject(PHANDLE,ACCESS_MASK,const OBJECT_ATTRIBUTES*);
-NTSYSAPI NTSTATUS  WINAPI NtOpenThread(HANDLE*,ACCESS_MASK,const OBJECT_ATTRIBUTES*,const CLIENT_ID*);
-NTSYSAPI NTSTATUS  WINAPI NtOpenThreadToken(HANDLE,DWORD,BOOLEAN,HANDLE *);
-NTSYSAPI NTSTATUS  WINAPI NtOpenThreadTokenEx(HANDLE,DWORD,BOOLEAN,DWORD,HANDLE *);
-NTSYSAPI NTSTATUS  WINAPI NtOpenTimer(HANDLE*, ACCESS_MASK, const OBJECT_ATTRIBUTES*);
-NTSYSAPI NTSTATUS  WINAPI NtPowerInformation(POWER_INFORMATION_LEVEL,PVOID,ULONG,PVOID,ULONG);
-NTSYSAPI NTSTATUS  WINAPI NtPrivilegeCheck(HANDLE,PPRIVILEGE_SET,PBOOLEAN);
+NTSYSAPI NTSTATUS  SYSCALL NtOpenProcess(PHANDLE,ACCESS_MASK,const OBJECT_ATTRIBUTES*,const CLIENT_ID*);
+NTSYSAPI NTSTATUS  SYSCALL NtOpenProcessToken(HANDLE,DWORD,HANDLE *);
+NTSYSAPI NTSTATUS  SYSCALL NtOpenProcessTokenEx(HANDLE,DWORD,DWORD,HANDLE *);
+NTSYSAPI NTSTATUS  SYSCALL NtOpenSection(HANDLE*,ACCESS_MASK,const OBJECT_ATTRIBUTES*);
+NTSYSAPI NTSTATUS  SYSCALL NtOpenSemaphore(PHANDLE,ACCESS_MASK,const OBJECT_ATTRIBUTES*);
+NTSYSAPI NTSTATUS  SYSCALL NtOpenSymbolicLinkObject(PHANDLE,ACCESS_MASK,const OBJECT_ATTRIBUTES*);
+NTSYSAPI NTSTATUS  SYSCALL NtOpenThread(HANDLE*,ACCESS_MASK,const OBJECT_ATTRIBUTES*,const CLIENT_ID*);
+NTSYSAPI NTSTATUS  SYSCALL NtOpenThreadToken(HANDLE,DWORD,BOOLEAN,HANDLE *);
+NTSYSAPI NTSTATUS  SYSCALL NtOpenThreadTokenEx(HANDLE,DWORD,BOOLEAN,DWORD,HANDLE *);
+NTSYSAPI NTSTATUS  SYSCALL NtOpenTimer(HANDLE*, ACCESS_MASK, const OBJECT_ATTRIBUTES*);
+NTSYSAPI NTSTATUS  SYSCALL NtPowerInformation(POWER_INFORMATION_LEVEL,PVOID,ULONG,PVOID,ULONG);
+NTSYSAPI NTSTATUS  SYSCALL NtPrivilegeCheck(HANDLE,PPRIVILEGE_SET,PBOOLEAN);
 NTSYSAPI NTSTATUS  WINAPI NtPrivilegeObjectAuditAlarm(PUNICODE_STRING,HANDLE,HANDLE,ULONG,PPRIVILEGE_SET,BOOLEAN);
 NTSYSAPI NTSTATUS  WINAPI NtPrivilegedServiceAuditAlarm(PUNICODE_STRING,PUNICODE_STRING,HANDLE,PPRIVILEGE_SET,BOOLEAN);
-NTSYSAPI NTSTATUS  WINAPI NtProtectVirtualMemory(HANDLE,PVOID*,SIZE_T*,ULONG,ULONG*);
-NTSYSAPI NTSTATUS  WINAPI NtPulseEvent(HANDLE,LONG*);
-NTSYSAPI NTSTATUS  WINAPI NtQueueApcThread(HANDLE,PNTAPCFUNC,ULONG_PTR,ULONG_PTR,ULONG_PTR);
-NTSYSAPI NTSTATUS  WINAPI NtQueryAttributesFile(const OBJECT_ATTRIBUTES*,FILE_BASIC_INFORMATION*);
-NTSYSAPI NTSTATUS  WINAPI NtQueryDefaultLocale(BOOLEAN,LCID*);
-NTSYSAPI NTSTATUS  WINAPI NtQueryDefaultUILanguage(LANGID*);
-NTSYSAPI NTSTATUS  WINAPI NtQueryDirectoryFile(HANDLE,HANDLE,PIO_APC_ROUTINE,PVOID,PIO_STATUS_BLOCK,PVOID,ULONG,FILE_INFORMATION_CLASS,BOOLEAN,PUNICODE_STRING,BOOLEAN);
-NTSYSAPI NTSTATUS  WINAPI NtQueryDirectoryObject(HANDLE,PDIRECTORY_BASIC_INFORMATION,ULONG,BOOLEAN,BOOLEAN,PULONG,PULONG);
-NTSYSAPI NTSTATUS  WINAPI NtQueryEaFile(HANDLE,PIO_STATUS_BLOCK,PVOID,ULONG,BOOLEAN,PVOID,ULONG,PULONG,BOOLEAN);
-NTSYSAPI NTSTATUS  WINAPI NtQueryEvent(HANDLE,EVENT_INFORMATION_CLASS,PVOID,ULONG,PULONG);
-NTSYSAPI NTSTATUS  WINAPI NtQueryFullAttributesFile(const OBJECT_ATTRIBUTES*,FILE_NETWORK_OPEN_INFORMATION*);
-NTSYSAPI NTSTATUS  WINAPI NtQueryInformationAtom(RTL_ATOM,ATOM_INFORMATION_CLASS,PVOID,ULONG,ULONG*);
-NTSYSAPI NTSTATUS  WINAPI NtQueryInformationFile(HANDLE,PIO_STATUS_BLOCK,PVOID,ULONG,FILE_INFORMATION_CLASS);
-NTSYSAPI NTSTATUS  WINAPI NtQueryInformationJobObject(HANDLE,JOBOBJECTINFOCLASS,PVOID,ULONG,PULONG);
+NTSYSAPI NTSTATUS  SYSCALL NtProtectVirtualMemory(HANDLE,PVOID*,SIZE_T*,ULONG,ULONG*);
+NTSYSAPI NTSTATUS  SYSCALL NtPulseEvent(HANDLE,LONG*);
+NTSYSAPI NTSTATUS  SYSCALL NtQueueApcThread(HANDLE,PNTAPCFUNC,ULONG_PTR,ULONG_PTR,ULONG_PTR);
+NTSYSAPI NTSTATUS  SYSCALL NtQueryAttributesFile(const OBJECT_ATTRIBUTES*,FILE_BASIC_INFORMATION*);
+NTSYSAPI NTSTATUS  SYSCALL NtQueryDefaultLocale(BOOLEAN,LCID*);
+NTSYSAPI NTSTATUS  SYSCALL NtQueryDefaultUILanguage(LANGID*);
+NTSYSAPI NTSTATUS  SYSCALL NtQueryDirectoryFile(HANDLE,HANDLE,PIO_APC_ROUTINE,PVOID,PIO_STATUS_BLOCK,PVOID,ULONG,FILE_INFORMATION_CLASS,BOOLEAN,PUNICODE_STRING,BOOLEAN);
+NTSYSAPI NTSTATUS  SYSCALL NtQueryDirectoryObject(HANDLE,PDIRECTORY_BASIC_INFORMATION,ULONG,BOOLEAN,BOOLEAN,PULONG,PULONG);
+NTSYSAPI NTSTATUS  SYSCALL NtQueryEaFile(HANDLE,PIO_STATUS_BLOCK,PVOID,ULONG,BOOLEAN,PVOID,ULONG,PULONG,BOOLEAN);
+NTSYSAPI NTSTATUS  SYSCALL NtQueryEvent(HANDLE,EVENT_INFORMATION_CLASS,PVOID,ULONG,PULONG);
+NTSYSAPI NTSTATUS  SYSCALL NtQueryFullAttributesFile(const OBJECT_ATTRIBUTES*,FILE_NETWORK_OPEN_INFORMATION*);
+NTSYSAPI NTSTATUS  SYSCALL NtQueryInformationAtom(RTL_ATOM,ATOM_INFORMATION_CLASS,PVOID,ULONG,ULONG*);
+NTSYSAPI NTSTATUS  SYSCALL NtQueryInformationFile(HANDLE,PIO_STATUS_BLOCK,PVOID,ULONG,FILE_INFORMATION_CLASS);
+NTSYSAPI NTSTATUS  SYSCALL NtQueryInformationJobObject(HANDLE,JOBOBJECTINFOCLASS,PVOID,ULONG,PULONG);
 NTSYSAPI NTSTATUS  WINAPI NtQueryInformationPort(HANDLE,PORT_INFORMATION_CLASS,PVOID,ULONG,PULONG);
-NTSYSAPI NTSTATUS  WINAPI NtQueryInformationProcess(HANDLE,PROCESSINFOCLASS,PVOID,ULONG,PULONG);
-NTSYSAPI NTSTATUS  WINAPI NtQueryInformationThread(HANDLE,THREADINFOCLASS,PVOID,ULONG,PULONG);
-NTSYSAPI NTSTATUS  WINAPI NtQueryInformationToken(HANDLE,TOKEN_INFORMATION_CLASS,PVOID,ULONG,PULONG);
-NTSYSAPI NTSTATUS  WINAPI NtQueryInstallUILanguage(LANGID*);
+NTSYSAPI NTSTATUS  SYSCALL NtQueryInformationProcess(HANDLE,PROCESSINFOCLASS,PVOID,ULONG,PULONG);
+NTSYSAPI NTSTATUS  SYSCALL NtQueryInformationThread(HANDLE,THREADINFOCLASS,PVOID,ULONG,PULONG);
+NTSYSAPI NTSTATUS  SYSCALL NtQueryInformationToken(HANDLE,TOKEN_INFORMATION_CLASS,PVOID,ULONG,PULONG);
+NTSYSAPI NTSTATUS  SYSCALL NtQueryInstallUILanguage(LANGID*);
 NTSYSAPI NTSTATUS  WINAPI NtQueryIntervalProfile(KPROFILE_SOURCE,PULONG);
-NTSYSAPI NTSTATUS  WINAPI NtQueryIoCompletion(HANDLE,IO_COMPLETION_INFORMATION_CLASS,PVOID,ULONG,PULONG);
-NTSYSAPI NTSTATUS  WINAPI NtQueryKey(HANDLE,KEY_INFORMATION_CLASS,void *,DWORD,DWORD *);
-NTSYSAPI NTSTATUS  WINAPI NtQueryMultipleValueKey(HANDLE,PKEY_MULTIPLE_VALUE_INFORMATION,ULONG,PVOID,ULONG,PULONG);
-NTSYSAPI NTSTATUS  WINAPI NtQueryMutant(HANDLE,MUTANT_INFORMATION_CLASS,PVOID,ULONG,PULONG);
-NTSYSAPI NTSTATUS  WINAPI NtQueryObject(HANDLE, OBJECT_INFORMATION_CLASS, PVOID, ULONG, PULONG);
+NTSYSAPI NTSTATUS  SYSCALL NtQueryIoCompletion(HANDLE,IO_COMPLETION_INFORMATION_CLASS,PVOID,ULONG,PULONG);
+NTSYSAPI NTSTATUS  SYSCALL NtQueryKey(HANDLE,KEY_INFORMATION_CLASS,void *,DWORD,DWORD *);
+NTSYSAPI NTSTATUS  SYSCALL NtQueryMultipleValueKey(HANDLE,PKEY_MULTIPLE_VALUE_INFORMATION,ULONG,PVOID,ULONG,PULONG);
+NTSYSAPI NTSTATUS  SYSCALL NtQueryMutant(HANDLE,MUTANT_INFORMATION_CLASS,PVOID,ULONG,PULONG);
+NTSYSAPI NTSTATUS  SYSCALL NtQueryObject(HANDLE, OBJECT_INFORMATION_CLASS, PVOID, ULONG, PULONG);
 NTSYSAPI NTSTATUS  WINAPI NtQueryOpenSubKeys(POBJECT_ATTRIBUTES,PULONG);
-NTSYSAPI NTSTATUS  WINAPI NtQueryPerformanceCounter(PLARGE_INTEGER, PLARGE_INTEGER);
-NTSYSAPI NTSTATUS  WINAPI NtQuerySecurityObject(HANDLE,SECURITY_INFORMATION,PSECURITY_DESCRIPTOR,ULONG,PULONG);
-NTSYSAPI NTSTATUS  WINAPI NtQuerySection(HANDLE,SECTION_INFORMATION_CLASS,PVOID,SIZE_T,SIZE_T*);
-NTSYSAPI NTSTATUS  WINAPI NtQuerySemaphore(HANDLE,SEMAPHORE_INFORMATION_CLASS,PVOID,ULONG,PULONG);
-NTSYSAPI NTSTATUS  WINAPI NtQuerySymbolicLinkObject(HANDLE,PUNICODE_STRING,PULONG);
-NTSYSAPI NTSTATUS  WINAPI NtQuerySystemEnvironmentValue(PUNICODE_STRING,PWCHAR,ULONG,PULONG);
-NTSYSAPI NTSTATUS  WINAPI NtQuerySystemEnvironmentValueEx(PUNICODE_STRING,GUID*,void*,ULONG*,ULONG*);
-NTSYSAPI NTSTATUS  WINAPI NtQuerySystemInformation(SYSTEM_INFORMATION_CLASS,PVOID,ULONG,PULONG);
-NTSYSAPI NTSTATUS  WINAPI NtQuerySystemInformationEx(SYSTEM_INFORMATION_CLASS,void*,ULONG,void*,ULONG,ULONG*);
-NTSYSAPI NTSTATUS  WINAPI NtQuerySystemTime(PLARGE_INTEGER);
-NTSYSAPI NTSTATUS  WINAPI NtQueryTimer(HANDLE,TIMER_INFORMATION_CLASS,PVOID,ULONG,PULONG);
-NTSYSAPI NTSTATUS  WINAPI NtQueryTimerResolution(PULONG,PULONG,PULONG);
-NTSYSAPI NTSTATUS  WINAPI NtQueryValueKey(HANDLE,const UNICODE_STRING *,KEY_VALUE_INFORMATION_CLASS,void *,DWORD,DWORD *);
-NTSYSAPI NTSTATUS  WINAPI NtQueryLicenseValue(const UNICODE_STRING *,ULONG *,PVOID,ULONG,ULONG *);
-NTSYSAPI NTSTATUS  WINAPI NtQueryVirtualMemory(HANDLE,LPCVOID,MEMORY_INFORMATION_CLASS,PVOID,SIZE_T,SIZE_T*);
-NTSYSAPI NTSTATUS  WINAPI NtQueryVolumeInformationFile(HANDLE,PIO_STATUS_BLOCK,PVOID,ULONG,FS_INFORMATION_CLASS);
-NTSYSAPI NTSTATUS  WINAPI NtRaiseException(PEXCEPTION_RECORD,PCONTEXT,BOOL);
-NTSYSAPI NTSTATUS  WINAPI NtRaiseHardError(NTSTATUS,ULONG,PUNICODE_STRING,PVOID*,HARDERROR_RESPONSE_OPTION,PHARDERROR_RESPONSE);
-NTSYSAPI NTSTATUS  WINAPI NtReadFile(HANDLE,HANDLE,PIO_APC_ROUTINE,PVOID,PIO_STATUS_BLOCK,PVOID,ULONG,PLARGE_INTEGER,PULONG);
-NTSYSAPI NTSTATUS  WINAPI NtReadFileScatter(HANDLE,HANDLE,PIO_APC_ROUTINE,PVOID,PIO_STATUS_BLOCK,FILE_SEGMENT_ELEMENT*,ULONG,PLARGE_INTEGER,PULONG);
+NTSYSAPI NTSTATUS  SYSCALL NtQueryPerformanceCounter(PLARGE_INTEGER, PLARGE_INTEGER);
+NTSYSAPI NTSTATUS  SYSCALL NtQuerySecurityObject(HANDLE,SECURITY_INFORMATION,PSECURITY_DESCRIPTOR,ULONG,PULONG);
+NTSYSAPI NTSTATUS  SYSCALL NtQuerySection(HANDLE,SECTION_INFORMATION_CLASS,PVOID,SIZE_T,SIZE_T*);
+NTSYSAPI NTSTATUS  SYSCALL NtQuerySemaphore(HANDLE,SEMAPHORE_INFORMATION_CLASS,PVOID,ULONG,PULONG);
+NTSYSAPI NTSTATUS  SYSCALL NtQuerySymbolicLinkObject(HANDLE,PUNICODE_STRING,PULONG);
+NTSYSAPI NTSTATUS  SYSCALL NtQuerySystemEnvironmentValue(PUNICODE_STRING,PWCHAR,ULONG,PULONG);
+NTSYSAPI NTSTATUS  SYSCALL NtQuerySystemEnvironmentValueEx(PUNICODE_STRING,GUID*,void*,ULONG*,ULONG*);
+NTSYSAPI NTSTATUS  SYSCALL NtQuerySystemInformation(SYSTEM_INFORMATION_CLASS,PVOID,ULONG,PULONG);
+NTSYSAPI NTSTATUS  SYSCALL NtQuerySystemInformationEx(SYSTEM_INFORMATION_CLASS,void*,ULONG,void*,ULONG,ULONG*);
+NTSYSAPI NTSTATUS  SYSCALL NtQuerySystemTime(PLARGE_INTEGER);
+NTSYSAPI NTSTATUS  SYSCALL NtQueryTimer(HANDLE,TIMER_INFORMATION_CLASS,PVOID,ULONG,PULONG);
+NTSYSAPI NTSTATUS  SYSCALL NtQueryTimerResolution(PULONG,PULONG,PULONG);
+NTSYSAPI NTSTATUS  SYSCALL NtQueryValueKey(HANDLE,const UNICODE_STRING *,KEY_VALUE_INFORMATION_CLASS,void *,DWORD,DWORD *);
+NTSYSAPI NTSTATUS  SYSCALL NtQueryLicenseValue(const UNICODE_STRING *,ULONG *,PVOID,ULONG,ULONG *);
+NTSYSAPI NTSTATUS  SYSCALL NtQueryVirtualMemory(HANDLE,LPCVOID,MEMORY_INFORMATION_CLASS,PVOID,SIZE_T,SIZE_T*);
+NTSYSAPI NTSTATUS  SYSCALL NtQueryVolumeInformationFile(HANDLE,PIO_STATUS_BLOCK,PVOID,ULONG,FS_INFORMATION_CLASS);
+NTSYSAPI NTSTATUS  SYSCALL NtRaiseException(PEXCEPTION_RECORD,PCONTEXT,BOOL);
+NTSYSAPI NTSTATUS  SYSCALL NtRaiseHardError(NTSTATUS,ULONG,PUNICODE_STRING,PVOID*,HARDERROR_RESPONSE_OPTION,PHARDERROR_RESPONSE);
+NTSYSAPI NTSTATUS  SYSCALL NtReadFile(HANDLE,HANDLE,PIO_APC_ROUTINE,PVOID,PIO_STATUS_BLOCK,PVOID,ULONG,PLARGE_INTEGER,PULONG);
+NTSYSAPI NTSTATUS  SYSCALL NtReadFileScatter(HANDLE,HANDLE,PIO_APC_ROUTINE,PVOID,PIO_STATUS_BLOCK,FILE_SEGMENT_ELEMENT*,ULONG,PLARGE_INTEGER,PULONG);
 NTSYSAPI NTSTATUS  WINAPI NtReadRequestData(HANDLE,PLPC_MESSAGE,ULONG,PVOID,ULONG,PULONG);
-NTSYSAPI NTSTATUS  WINAPI NtReadVirtualMemory(HANDLE,const void*,void*,SIZE_T,SIZE_T*);
-NTSYSAPI NTSTATUS  WINAPI NtRegisterThreadTerminatePort(HANDLE);
-NTSYSAPI NTSTATUS  WINAPI NtReleaseKeyedEvent(HANDLE,const void*,BOOLEAN,const LARGE_INTEGER*);
-NTSYSAPI NTSTATUS  WINAPI NtReleaseMutant(HANDLE,PLONG);
-NTSYSAPI NTSTATUS  WINAPI NtReleaseSemaphore(HANDLE,ULONG,PULONG);
-NTSYSAPI NTSTATUS  WINAPI NtRemoveIoCompletion(HANDLE,PULONG_PTR,PULONG_PTR,PIO_STATUS_BLOCK,PLARGE_INTEGER);
-NTSYSAPI NTSTATUS  WINAPI NtRemoveIoCompletionEx(HANDLE,FILE_IO_COMPLETION_INFORMATION*,ULONG,ULONG*,LARGE_INTEGER*,BOOLEAN);
-NTSYSAPI NTSTATUS  WINAPI NtRemoveProcessDebug(HANDLE,HANDLE);
-NTSYSAPI NTSTATUS  WINAPI NtRenameKey(HANDLE,UNICODE_STRING*);
-NTSYSAPI NTSTATUS  WINAPI NtReplaceKey(POBJECT_ATTRIBUTES,HANDLE,POBJECT_ATTRIBUTES);
+NTSYSAPI NTSTATUS  SYSCALL NtReadVirtualMemory(HANDLE,const void*,void*,SIZE_T,SIZE_T*);
+NTSYSAPI NTSTATUS  SYSCALL NtRegisterThreadTerminatePort(HANDLE);
+NTSYSAPI NTSTATUS  SYSCALL NtReleaseKeyedEvent(HANDLE,const void*,BOOLEAN,const LARGE_INTEGER*);
+NTSYSAPI NTSTATUS  SYSCALL NtReleaseMutant(HANDLE,PLONG);
+NTSYSAPI NTSTATUS  SYSCALL NtReleaseSemaphore(HANDLE,ULONG,PULONG);
+NTSYSAPI NTSTATUS  SYSCALL NtRemoveIoCompletion(HANDLE,PULONG_PTR,PULONG_PTR,PIO_STATUS_BLOCK,PLARGE_INTEGER);
+NTSYSAPI NTSTATUS  SYSCALL NtRemoveIoCompletionEx(HANDLE,FILE_IO_COMPLETION_INFORMATION*,ULONG,ULONG*,LARGE_INTEGER*,BOOLEAN);
+NTSYSAPI NTSTATUS  SYSCALL NtRemoveProcessDebug(HANDLE,HANDLE);
+NTSYSAPI NTSTATUS  SYSCALL NtRenameKey(HANDLE,UNICODE_STRING*);
+NTSYSAPI NTSTATUS  SYSCALL NtReplaceKey(POBJECT_ATTRIBUTES,HANDLE,POBJECT_ATTRIBUTES);
 NTSYSAPI NTSTATUS  WINAPI NtReplyPort(HANDLE,PLPC_MESSAGE);
-NTSYSAPI NTSTATUS  WINAPI NtReplyWaitReceivePort(HANDLE,PULONG,PLPC_MESSAGE,PLPC_MESSAGE);
+NTSYSAPI NTSTATUS  SYSCALL NtReplyWaitReceivePort(HANDLE,PULONG,PLPC_MESSAGE,PLPC_MESSAGE);
 NTSYSAPI NTSTATUS  WINAPI NtReplyWaitReceivePortEx(HANDLE,PVOID*,PPORT_MESSAGE,PPORT_MESSAGE,PLARGE_INTEGER);
 NTSYSAPI NTSTATUS  WINAPI NtReplyWaitReplyPort(HANDLE,PLPC_MESSAGE);
 NTSYSAPI NTSTATUS  WINAPI NtRequestPort(HANDLE,PLPC_MESSAGE);
-NTSYSAPI NTSTATUS  WINAPI NtRequestWaitReplyPort(HANDLE,PLPC_MESSAGE,PLPC_MESSAGE);
-NTSYSAPI NTSTATUS  WINAPI NtResetEvent(HANDLE,LONG*);
-NTSYSAPI NTSTATUS  WINAPI NtResetWriteWatch(HANDLE,PVOID,SIZE_T);
-NTSYSAPI NTSTATUS  WINAPI NtRestoreKey(HANDLE,HANDLE,ULONG);
-NTSYSAPI NTSTATUS  WINAPI NtResumeProcess(HANDLE);
-NTSYSAPI NTSTATUS  WINAPI NtResumeThread(HANDLE,PULONG);
-NTSYSAPI NTSTATUS  WINAPI NtRollbackTransaction(HANDLE,BOOLEAN);
-NTSYSAPI NTSTATUS  WINAPI NtSaveKey(HANDLE,HANDLE);
-NTSYSAPI NTSTATUS  WINAPI NtSecureConnectPort(PHANDLE,PUNICODE_STRING,PSECURITY_QUALITY_OF_SERVICE,PLPC_SECTION_WRITE,PSID,PLPC_SECTION_READ,PULONG,PVOID,PULONG);
-NTSYSAPI NTSTATUS  WINAPI NtSetContextThread(HANDLE,const CONTEXT*);
-NTSYSAPI NTSTATUS  WINAPI NtSetDebugFilterState(ULONG,ULONG,BOOLEAN);
+NTSYSAPI NTSTATUS  SYSCALL NtRequestWaitReplyPort(HANDLE,PLPC_MESSAGE,PLPC_MESSAGE);
+NTSYSAPI NTSTATUS  SYSCALL NtResetEvent(HANDLE,LONG*);
+NTSYSAPI NTSTATUS  SYSCALL NtResetWriteWatch(HANDLE,PVOID,SIZE_T);
+NTSYSAPI NTSTATUS  SYSCALL NtRestoreKey(HANDLE,HANDLE,ULONG);
+NTSYSAPI NTSTATUS  SYSCALL NtResumeProcess(HANDLE);
+NTSYSAPI NTSTATUS  SYSCALL NtResumeThread(HANDLE,PULONG);
+NTSYSAPI NTSTATUS  SYSCALL NtRollbackTransaction(HANDLE,BOOLEAN);
+NTSYSAPI NTSTATUS  SYSCALL NtSaveKey(HANDLE,HANDLE);
+NTSYSAPI NTSTATUS  SYSCALL NtSecureConnectPort(PHANDLE,PUNICODE_STRING,PSECURITY_QUALITY_OF_SERVICE,PLPC_SECTION_WRITE,PSID,PLPC_SECTION_READ,PULONG,PVOID,PULONG);
+NTSYSAPI NTSTATUS  SYSCALL NtSetContextThread(HANDLE,const CONTEXT*);
+NTSYSAPI NTSTATUS  SYSCALL NtSetDebugFilterState(ULONG,ULONG,BOOLEAN);
 NTSYSAPI NTSTATUS  WINAPI NtSetDefaultHardErrorPort(HANDLE);
-NTSYSAPI NTSTATUS  WINAPI NtSetDefaultLocale(BOOLEAN,LCID);
-NTSYSAPI NTSTATUS  WINAPI NtSetDefaultUILanguage(LANGID);
-NTSYSAPI NTSTATUS  WINAPI NtSetEaFile(HANDLE,PIO_STATUS_BLOCK,PVOID,ULONG);
-NTSYSAPI NTSTATUS  WINAPI NtSetEvent(HANDLE,LONG*);
+NTSYSAPI NTSTATUS  SYSCALL NtSetDefaultLocale(BOOLEAN,LCID);
+NTSYSAPI NTSTATUS  SYSCALL NtSetDefaultUILanguage(LANGID);
+NTSYSAPI NTSTATUS  SYSCALL NtSetEaFile(HANDLE,PIO_STATUS_BLOCK,PVOID,ULONG);
+NTSYSAPI NTSTATUS  SYSCALL NtSetEvent(HANDLE,LONG*);
 NTSYSAPI NTSTATUS  WINAPI NtSetHighEventPair(HANDLE);
 NTSYSAPI NTSTATUS  WINAPI NtSetHighWaitLowEventPair(HANDLE);
 NTSYSAPI NTSTATUS  WINAPI NtSetHighWaitLowThread(VOID);
-NTSYSAPI NTSTATUS  WINAPI NtSetInformationDebugObject(HANDLE,DEBUGOBJECTINFOCLASS,PVOID,ULONG,ULONG*);
-NTSYSAPI NTSTATUS  WINAPI NtSetInformationFile(HANDLE,PIO_STATUS_BLOCK,PVOID,ULONG,FILE_INFORMATION_CLASS);
-NTSYSAPI NTSTATUS  WINAPI NtSetInformationJobObject(HANDLE,JOBOBJECTINFOCLASS,PVOID,ULONG);
-NTSYSAPI NTSTATUS  WINAPI NtSetInformationKey(HANDLE,const int,PVOID,ULONG);
-NTSYSAPI NTSTATUS  WINAPI NtSetInformationObject(HANDLE, OBJECT_INFORMATION_CLASS, PVOID, ULONG);
-NTSYSAPI NTSTATUS  WINAPI NtSetInformationProcess(HANDLE,PROCESSINFOCLASS,PVOID,ULONG);
-NTSYSAPI NTSTATUS  WINAPI NtSetInformationThread(HANDLE,THREADINFOCLASS,LPCVOID,ULONG);
-NTSYSAPI NTSTATUS  WINAPI NtSetInformationToken(HANDLE,TOKEN_INFORMATION_CLASS,PVOID,ULONG);
-NTSYSAPI NTSTATUS  WINAPI NtSetInformationVirtualMemory(HANDLE,VIRTUAL_MEMORY_INFORMATION_CLASS,ULONG_PTR,PMEMORY_RANGE_ENTRY,PVOID,ULONG);
-NTSYSAPI NTSTATUS  WINAPI NtSetIntervalProfile(ULONG,KPROFILE_SOURCE);
-NTSYSAPI NTSTATUS  WINAPI NtSetIoCompletion(HANDLE,ULONG_PTR,ULONG_PTR,NTSTATUS,SIZE_T);
-NTSYSAPI NTSTATUS  WINAPI NtSetLdtEntries(ULONG,LDT_ENTRY,ULONG,LDT_ENTRY);
+NTSYSAPI NTSTATUS  SYSCALL NtSetInformationDebugObject(HANDLE,DEBUGOBJECTINFOCLASS,PVOID,ULONG,ULONG*);
+NTSYSAPI NTSTATUS  SYSCALL NtSetInformationFile(HANDLE,PIO_STATUS_BLOCK,PVOID,ULONG,FILE_INFORMATION_CLASS);
+NTSYSAPI NTSTATUS  SYSCALL NtSetInformationJobObject(HANDLE,JOBOBJECTINFOCLASS,PVOID,ULONG);
+NTSYSAPI NTSTATUS  SYSCALL NtSetInformationKey(HANDLE,const int,PVOID,ULONG);
+NTSYSAPI NTSTATUS  SYSCALL NtSetInformationObject(HANDLE, OBJECT_INFORMATION_CLASS, PVOID, ULONG);
+NTSYSAPI NTSTATUS  SYSCALL NtSetInformationProcess(HANDLE,PROCESSINFOCLASS,PVOID,ULONG);
+NTSYSAPI NTSTATUS  SYSCALL NtSetInformationThread(HANDLE,THREADINFOCLASS,LPCVOID,ULONG);
+NTSYSAPI NTSTATUS  SYSCALL NtSetInformationToken(HANDLE,TOKEN_INFORMATION_CLASS,PVOID,ULONG);
+NTSYSAPI NTSTATUS  SYSCALL NtSetInformationVirtualMemory(HANDLE,VIRTUAL_MEMORY_INFORMATION_CLASS,ULONG_PTR,PMEMORY_RANGE_ENTRY,PVOID,ULONG);
+NTSYSAPI NTSTATUS  SYSCALL NtSetIntervalProfile(ULONG,KPROFILE_SOURCE);
+NTSYSAPI NTSTATUS  SYSCALL NtSetIoCompletion(HANDLE,ULONG_PTR,ULONG_PTR,NTSTATUS,SIZE_T);
+NTSYSAPI NTSTATUS  SYSCALL NtSetLdtEntries(ULONG,LDT_ENTRY,ULONG,LDT_ENTRY);
 NTSYSAPI NTSTATUS  WINAPI NtSetLowEventPair(HANDLE);
 NTSYSAPI NTSTATUS  WINAPI NtSetLowWaitHighEventPair(HANDLE);
 NTSYSAPI NTSTATUS  WINAPI NtSetLowWaitHighThread(VOID);
-NTSYSAPI NTSTATUS  WINAPI NtSetSecurityObject(HANDLE,SECURITY_INFORMATION,PSECURITY_DESCRIPTOR);
+NTSYSAPI NTSTATUS  SYSCALL NtSetSecurityObject(HANDLE,SECURITY_INFORMATION,PSECURITY_DESCRIPTOR);
 NTSYSAPI NTSTATUS  WINAPI NtSetSystemEnvironmentValue(PUNICODE_STRING,PUNICODE_STRING);
-NTSYSAPI NTSTATUS  WINAPI NtSetSystemInformation(SYSTEM_INFORMATION_CLASS,PVOID,ULONG);
+NTSYSAPI NTSTATUS  SYSCALL NtSetSystemInformation(SYSTEM_INFORMATION_CLASS,PVOID,ULONG);
 NTSYSAPI NTSTATUS  WINAPI NtSetSystemPowerState(POWER_ACTION,SYSTEM_POWER_STATE,ULONG);
-NTSYSAPI NTSTATUS  WINAPI NtSetSystemTime(const LARGE_INTEGER*,LARGE_INTEGER*);
-NTSYSAPI NTSTATUS  WINAPI NtSetThreadExecutionState(EXECUTION_STATE,EXECUTION_STATE*);
-NTSYSAPI NTSTATUS  WINAPI NtSetTimer(HANDLE, const LARGE_INTEGER*, PTIMER_APC_ROUTINE, PVOID, BOOLEAN, ULONG, BOOLEAN*);
-NTSYSAPI NTSTATUS  WINAPI NtSetTimerResolution(ULONG,BOOLEAN,PULONG);
-NTSYSAPI NTSTATUS  WINAPI NtSetValueKey(HANDLE,const UNICODE_STRING *,ULONG,ULONG,const void *,ULONG);
-NTSYSAPI NTSTATUS  WINAPI NtSetVolumeInformationFile(HANDLE,PIO_STATUS_BLOCK,PVOID,ULONG,FS_INFORMATION_CLASS);
-NTSYSAPI NTSTATUS  WINAPI NtSignalAndWaitForSingleObject(HANDLE,HANDLE,BOOLEAN,const LARGE_INTEGER*);
-NTSYSAPI NTSTATUS  WINAPI NtShutdownSystem(SHUTDOWN_ACTION);
+NTSYSAPI NTSTATUS  SYSCALL NtSetSystemTime(const LARGE_INTEGER*,LARGE_INTEGER*);
+NTSYSAPI NTSTATUS  SYSCALL NtSetThreadExecutionState(EXECUTION_STATE,EXECUTION_STATE*);
+NTSYSAPI NTSTATUS  SYSCALL NtSetTimer(HANDLE, const LARGE_INTEGER*, PTIMER_APC_ROUTINE, PVOID, BOOLEAN, ULONG, BOOLEAN*);
+NTSYSAPI NTSTATUS  SYSCALL NtSetTimerResolution(ULONG,BOOLEAN,PULONG);
+NTSYSAPI NTSTATUS  SYSCALL NtSetValueKey(HANDLE,const UNICODE_STRING *,ULONG,ULONG,const void *,ULONG);
+NTSYSAPI NTSTATUS  SYSCALL NtSetVolumeInformationFile(HANDLE,PIO_STATUS_BLOCK,PVOID,ULONG,FS_INFORMATION_CLASS);
+NTSYSAPI NTSTATUS  SYSCALL NtSignalAndWaitForSingleObject(HANDLE,HANDLE,BOOLEAN,const LARGE_INTEGER*);
+NTSYSAPI NTSTATUS  SYSCALL NtShutdownSystem(SHUTDOWN_ACTION);
 NTSYSAPI NTSTATUS  WINAPI NtStartProfile(HANDLE);
 NTSYSAPI NTSTATUS  WINAPI NtStopProfile(HANDLE);
-NTSYSAPI NTSTATUS  WINAPI NtSuspendProcess(HANDLE);
-NTSYSAPI NTSTATUS  WINAPI NtSuspendThread(HANDLE,PULONG);
-NTSYSAPI NTSTATUS  WINAPI NtSystemDebugControl(SYSDBG_COMMAND,PVOID,ULONG,PVOID,ULONG,PULONG);
-NTSYSAPI NTSTATUS  WINAPI NtTerminateJobObject(HANDLE,NTSTATUS);
-NTSYSAPI NTSTATUS  WINAPI NtTerminateProcess(HANDLE,LONG);
-NTSYSAPI NTSTATUS  WINAPI NtTerminateThread(HANDLE,LONG);
-NTSYSAPI NTSTATUS  WINAPI NtTestAlert(VOID);
-NTSYSAPI NTSTATUS  WINAPI NtTraceControl(ULONG,void*,ULONG,void*,ULONG,ULONG*);
-NTSYSAPI NTSTATUS  WINAPI NtUnloadDriver(const UNICODE_STRING *);
-NTSYSAPI NTSTATUS  WINAPI NtUnloadKey(POBJECT_ATTRIBUTES);
+NTSYSAPI NTSTATUS  SYSCALL NtSuspendProcess(HANDLE);
+NTSYSAPI NTSTATUS  SYSCALL NtSuspendThread(HANDLE,PULONG);
+NTSYSAPI NTSTATUS  SYSCALL NtSystemDebugControl(SYSDBG_COMMAND,PVOID,ULONG,PVOID,ULONG,PULONG);
+NTSYSAPI NTSTATUS  SYSCALL NtTerminateJobObject(HANDLE,NTSTATUS);
+NTSYSAPI NTSTATUS  SYSCALL NtTerminateProcess(HANDLE,LONG);
+NTSYSAPI NTSTATUS  SYSCALL NtTerminateThread(HANDLE,LONG);
+NTSYSAPI NTSTATUS  SYSCALL NtTestAlert(VOID);
+NTSYSAPI NTSTATUS  SYSCALL NtTraceControl(ULONG,void*,ULONG,void*,ULONG,ULONG*);
+NTSYSAPI NTSTATUS  SYSCALL NtUnloadDriver(const UNICODE_STRING *);
+NTSYSAPI NTSTATUS  SYSCALL NtUnloadKey(POBJECT_ATTRIBUTES);
 NTSYSAPI NTSTATUS  WINAPI NtUnloadKeyEx(POBJECT_ATTRIBUTES,HANDLE);
-NTSYSAPI NTSTATUS  WINAPI NtUnlockFile(HANDLE,PIO_STATUS_BLOCK,PLARGE_INTEGER,PLARGE_INTEGER,PULONG);
-NTSYSAPI NTSTATUS  WINAPI NtUnlockVirtualMemory(HANDLE,PVOID*,SIZE_T*,ULONG);
-NTSYSAPI NTSTATUS  WINAPI NtUnmapViewOfSection(HANDLE,PVOID);
-NTSYSAPI NTSTATUS  WINAPI NtUnmapViewOfSectionEx(HANDLE,PVOID,ULONG);
+NTSYSAPI NTSTATUS  SYSCALL NtUnlockFile(HANDLE,PIO_STATUS_BLOCK,PLARGE_INTEGER,PLARGE_INTEGER,PULONG);
+NTSYSAPI NTSTATUS  SYSCALL NtUnlockVirtualMemory(HANDLE,PVOID*,SIZE_T*,ULONG);
+NTSYSAPI NTSTATUS  SYSCALL NtUnmapViewOfSection(HANDLE,PVOID);
+NTSYSAPI NTSTATUS  SYSCALL NtUnmapViewOfSectionEx(HANDLE,PVOID,ULONG);
 NTSYSAPI NTSTATUS  WINAPI NtVdmControl(ULONG,PVOID);
-NTSYSAPI NTSTATUS  WINAPI NtWaitForAlertByThreadId(const void*,const LARGE_INTEGER*);
-NTSYSAPI NTSTATUS  WINAPI NtWaitForDebugEvent(HANDLE,BOOLEAN,LARGE_INTEGER*,DBGUI_WAIT_STATE_CHANGE*);
-NTSYSAPI NTSTATUS  WINAPI NtWaitForKeyedEvent(HANDLE,const void*,BOOLEAN,const LARGE_INTEGER*);
-NTSYSAPI NTSTATUS  WINAPI NtWaitForSingleObject(HANDLE,BOOLEAN,const LARGE_INTEGER*);
-NTSYSAPI NTSTATUS  WINAPI NtWaitForMultipleObjects(ULONG,const HANDLE*,BOOLEAN,BOOLEAN,const LARGE_INTEGER*);
+NTSYSAPI NTSTATUS  SYSCALL NtWaitForAlertByThreadId(const void*,const LARGE_INTEGER*);
+NTSYSAPI NTSTATUS  SYSCALL NtWaitForDebugEvent(HANDLE,BOOLEAN,LARGE_INTEGER*,DBGUI_WAIT_STATE_CHANGE*);
+NTSYSAPI NTSTATUS  SYSCALL NtWaitForKeyedEvent(HANDLE,const void*,BOOLEAN,const LARGE_INTEGER*);
+NTSYSAPI NTSTATUS  SYSCALL NtWaitForSingleObject(HANDLE,BOOLEAN,const LARGE_INTEGER*);
+NTSYSAPI NTSTATUS  SYSCALL NtWaitForMultipleObjects(ULONG,const HANDLE*,BOOLEAN,BOOLEAN,const LARGE_INTEGER*);
 NTSYSAPI NTSTATUS  WINAPI NtWaitHighEventPair(HANDLE);
 NTSYSAPI NTSTATUS  WINAPI NtWaitLowEventPair(HANDLE);
-NTSYSAPI NTSTATUS  WINAPI NtWriteFile(HANDLE,HANDLE,PIO_APC_ROUTINE,PVOID,PIO_STATUS_BLOCK,const void*,ULONG,PLARGE_INTEGER,PULONG);
-NTSYSAPI NTSTATUS  WINAPI NtWriteFileGather(HANDLE,HANDLE,PIO_APC_ROUTINE,PVOID,PIO_STATUS_BLOCK,FILE_SEGMENT_ELEMENT*,ULONG,PLARGE_INTEGER,PULONG);
+NTSYSAPI NTSTATUS  SYSCALL NtWriteFile(HANDLE,HANDLE,PIO_APC_ROUTINE,PVOID,PIO_STATUS_BLOCK,const void*,ULONG,PLARGE_INTEGER,PULONG);
+NTSYSAPI NTSTATUS  SYSCALL NtWriteFileGather(HANDLE,HANDLE,PIO_APC_ROUTINE,PVOID,PIO_STATUS_BLOCK,FILE_SEGMENT_ELEMENT*,ULONG,PLARGE_INTEGER,PULONG);
 NTSYSAPI NTSTATUS  WINAPI NtWriteRequestData(HANDLE,PLPC_MESSAGE,ULONG,PVOID,ULONG,PULONG);
-NTSYSAPI NTSTATUS  WINAPI NtWriteVirtualMemory(HANDLE,void*,const void*,SIZE_T,SIZE_T*);
-NTSYSAPI NTSTATUS  WINAPI NtYieldExecution(void);
+NTSYSAPI NTSTATUS  SYSCALL NtWriteVirtualMemory(HANDLE,void*,const void*,SIZE_T,SIZE_T*);
+NTSYSAPI NTSTATUS  SYSCALL NtYieldExecution(void);
 NTSYSAPI NTSTATUS  WINAPI RtlAbsoluteToSelfRelativeSD(PSECURITY_DESCRIPTOR,PSECURITY_DESCRIPTOR,PULONG);
 NTSYSAPI void      WINAPI RtlAcquirePebLock(void);
 NTSYSAPI BYTE      WINAPI RtlAcquireResourceExclusive(LPRTL_RWLOCK,BYTE);
@@ -4736,11 +4736,11 @@ NTSYSAPI NTSTATUS  WINAPI RtlWow64GetThreadContext(HANDLE,WOW64_CONTEXT*);
 NTSYSAPI NTSTATUS  WINAPI RtlWow64GetThreadSelectorEntry(HANDLE,THREAD_DESCRIPTOR_INFORMATION*,ULONG,ULONG*);
 NTSYSAPI NTSTATUS  WINAPI RtlWow64SetThreadContext(HANDLE,const WOW64_CONTEXT*);
 #else
-NTSYSAPI NTSTATUS  WINAPI NtWow64AllocateVirtualMemory64(HANDLE,ULONG64*,ULONG64,ULONG64*,ULONG,ULONG);
-NTSYSAPI NTSTATUS  WINAPI NtWow64GetNativeSystemInformation(SYSTEM_INFORMATION_CLASS,void*,ULONG,ULONG*);
-NTSYSAPI NTSTATUS  WINAPI NtWow64IsProcessorFeaturePresent(UINT);
-NTSYSAPI NTSTATUS  WINAPI NtWow64ReadVirtualMemory64(HANDLE,ULONG64,void*,ULONG64,ULONG64*);
-NTSYSAPI NTSTATUS  WINAPI NtWow64WriteVirtualMemory64(HANDLE,ULONG64,const void*,ULONG64,ULONG64*);
+NTSYSAPI NTSTATUS  SYSCALL NtWow64AllocateVirtualMemory64(HANDLE,ULONG64*,ULONG64,ULONG64*,ULONG,ULONG);
+NTSYSAPI NTSTATUS  SYSCALL NtWow64GetNativeSystemInformation(SYSTEM_INFORMATION_CLASS,void*,ULONG,ULONG*);
+NTSYSAPI NTSTATUS  SYSCALL NtWow64IsProcessorFeaturePresent(UINT);
+NTSYSAPI NTSTATUS  SYSCALL NtWow64ReadVirtualMemory64(HANDLE,ULONG64,void*,ULONG64,ULONG64*);
+NTSYSAPI NTSTATUS  SYSCALL NtWow64WriteVirtualMemory64(HANDLE,ULONG64,const void*,ULONG64,ULONG64*);
 NTSYSAPI LONGLONG  WINAPI RtlConvertLongToLargeInteger(LONG);
 NTSYSAPI ULONGLONG WINAPI RtlConvertUlongToLargeInteger(ULONG);
 NTSYSAPI LONGLONG  WINAPI RtlEnlargedIntegerMultiply(INT,INT);
@@ -4762,9 +4762,9 @@ NTSYSAPI NTSTATUS  WINAPI RtlLargeIntegerToChar(const ULONGLONG *,ULONG,ULONG,PC
 
 /* Wine internal functions */
 
-NTSYSAPI NTSTATUS WINAPI wine_nt_to_unix_file_name( const OBJECT_ATTRIBUTES *attr, char *nameA, ULONG *size,
+NTSYSAPI NTSTATUS SYSCALL wine_nt_to_unix_file_name( const OBJECT_ATTRIBUTES *attr, char *nameA, ULONG *size,
                                                     UINT disposition );
-NTSYSAPI NTSTATUS WINAPI wine_unix_to_nt_file_name( const char *name, WCHAR *buffer, ULONG *size );
+NTSYSAPI NTSTATUS SYSCALL wine_unix_to_nt_file_name( const char *name, WCHAR *buffer, ULONG *size );
 
 
 /***********************************************************************
@@ -4854,7 +4854,7 @@ static inline PLIST_ENTRY RemoveTailList(PLIST_ENTRY le)
 
 /* Wine internal functions */
 
-extern NTSTATUS WINAPI __wine_unix_spawnvp( char * const argv[], int wait );
+extern NTSTATUS SYSCALL __wine_unix_spawnvp( char * const argv[], int wait );
 
 /* The thread information for 16-bit threads */
 /* NtCurrentTeb()->SubSystemTib points to this */
-- 
2.40.0

From 33d6a7242a61ec2e721a15864b51478a9034e6bf Mon Sep 17 00:00:00 2001
From: Torge Matthies <tmatthies@codeweavers.com>
Date: Thu, 8 Dec 2022 20:40:31 +0100
Subject: [PATCH 3/5] win32u: Make syscalls use the SYSCALL calling convention.

---
 dlls/win32u/bitmap.c     |  36 ++--
 dlls/win32u/brush.c      |  10 +-
 dlls/win32u/class.c      |  30 +--
 dlls/win32u/clipboard.c  |  36 ++--
 dlls/win32u/clipping.c   |   2 +-
 dlls/win32u/cursoricon.c |  30 +--
 dlls/win32u/dc.c         |  10 +-
 dlls/win32u/dce.c        |  32 +--
 dlls/win32u/defwnd.c     |   2 +-
 dlls/win32u/dib.c        |   6 +-
 dlls/win32u/driver.c     |   8 +-
 dlls/win32u/font.c       |  28 +--
 dlls/win32u/gdiobj.c     |  14 +-
 dlls/win32u/hook.c       |  20 +-
 dlls/win32u/imm.c        |  14 +-
 dlls/win32u/input.c      |  74 +++----
 dlls/win32u/mapping.c    |   8 +-
 dlls/win32u/menu.c       |  48 ++---
 dlls/win32u/message.c    |  32 +--
 dlls/win32u/painting.c   |   8 +-
 dlls/win32u/palette.c    |  10 +-
 dlls/win32u/path.c       |   6 +-
 dlls/win32u/pen.c        |  10 +-
 dlls/win32u/printdrv.c   |   4 +-
 dlls/win32u/rawinput.c   |  12 +-
 dlls/win32u/region.c     |  26 +--
 dlls/win32u/scroll.c     |   8 +-
 dlls/win32u/sysparams.c  |  44 ++--
 dlls/win32u/window.c     |  88 ++++----
 dlls/win32u/winstation.c |  34 +--
 include/ntgdi.h          | 130 ++++++------
 include/ntuser.h         | 432 +++++++++++++++++++--------------------
 32 files changed, 626 insertions(+), 626 deletions(-)

diff --git a/dlls/win32u/bitmap.c b/dlls/win32u/bitmap.c
index 11111111111..11111111111 100644
--- a/dlls/win32u/bitmap.c
+++ b/dlls/win32u/bitmap.c
@@ -94,8 +94,8 @@ HBITMAP WINAPI NtGdiCreateCompatibleBitmap( HDC hdc, INT width, INT height )
  *
  * Creates a bitmap with the specified info.
  */
-HBITMAP WINAPI NtGdiCreateBitmap( INT width, INT height, UINT planes,
-                                  UINT bpp, const void *bits )
+HBITMAP SYSCALL NtGdiCreateBitmap( INT width, INT height, UINT planes,
+                                   UINT bpp, const void *bits )
 {
     BITMAPOBJ *bmpobj;
     HBITMAP hbitmap;
@@ -191,10 +191,10 @@ HBITMAP WINAPI NtGdiCreateBitmap( INT width, INT height, UINT planes,
  *    Success: Number of bytes copied
  *    Failure: 0
  */
-LONG WINAPI NtGdiGetBitmapBits(
-    HBITMAP hbitmap, /* [in]  Handle to bitmap */
-    LONG count,        /* [in]  Number of bytes to copy */
-    LPVOID bits)       /* [out] Pointer to buffer to receive bits */
+LONG SYSCALL NtGdiGetBitmapBits(
+     HBITMAP hbitmap, /* [in]  Handle to bitmap */
+     LONG count,        /* [in]  Number of bytes to copy */
+     LPVOID bits)       /* [out] Pointer to buffer to receive bits */
 {
     char buffer[FIELD_OFFSET( BITMAPINFO, bmiColors[256] )];
     BITMAPINFO *info = (BITMAPINFO *)buffer;
@@ -260,10 +260,10 @@ done:
  *    Success: Number of bytes used in setting the bitmap bits
  *    Failure: 0
  */
-LONG WINAPI NtGdiSetBitmapBits(
-    HBITMAP hbitmap, /* [in] Handle to bitmap */
-    LONG count,        /* [in] Number of bytes in bitmap array */
-    LPCVOID bits)      /* [in] Address of array with bitmap bits */
+LONG SYSCALL NtGdiSetBitmapBits(
+     HBITMAP hbitmap, /* [in] Handle to bitmap */
+     LONG count,        /* [in] Number of bytes in bitmap array */
+     LPCVOID bits)      /* [in] Address of array with bitmap bits */
 {
     char buffer[FIELD_OFFSET( BITMAPINFO, bmiColors[256] )];
     BITMAPINFO *info = (BITMAPINFO *)buffer;
@@ -488,9 +488,9 @@ static INT BITMAP_GetObject( HGDIOBJ handle, INT count, LPVOID buffer )
  *    Success: TRUE
  *    Failure: FALSE
  */
-BOOL WINAPI NtGdiGetBitmapDimension(
-    HBITMAP hbitmap, /* [in]  Handle to bitmap */
-    LPSIZE size)     /* [out] Address of struct receiving dimensions */
+BOOL SYSCALL NtGdiGetBitmapDimension(
+     HBITMAP hbitmap, /* [in]  Handle to bitmap */
+     LPSIZE size)     /* [out] Address of struct receiving dimensions */
 {
     BITMAPOBJ * bmp = GDI_GetObjPtr( hbitmap, NTGDI_OBJ_BITMAP );
     if (!bmp) return FALSE;
@@ -511,11 +511,11 @@ BOOL WINAPI NtGdiGetBitmapDimension(
  *    Success: TRUE
  *    Failure: FALSE
  */
-BOOL WINAPI NtGdiSetBitmapDimension(
-    HBITMAP hbitmap, /* [in]  Handle to bitmap */
-    INT x,           /* [in]  Bitmap width */
-    INT y,           /* [in]  Bitmap height */
-    LPSIZE prevSize) /* [out] Address of structure for orig dims */
+BOOL SYSCALL NtGdiSetBitmapDimension(
+     HBITMAP hbitmap, /* [in]  Handle to bitmap */
+     INT x,           /* [in]  Bitmap width */
+     INT y,           /* [in]  Bitmap height */
+     LPSIZE prevSize) /* [out] Address of structure for orig dims */
 {
     BITMAPOBJ * bmp = GDI_GetObjPtr( hbitmap, NTGDI_OBJ_BITMAP );
     if (!bmp) return FALSE;
diff --git a/dlls/win32u/brush.c b/dlls/win32u/brush.c
index 11111111111..11111111111 100644
--- a/dlls/win32u/brush.c
+++ b/dlls/win32u/brush.c
@@ -217,7 +217,7 @@ HBRUSH create_brush( const LOGBRUSH *brush )
  *
  * Create a logical brush with a hatched pattern.
  */
-HBRUSH WINAPI NtGdiCreateHatchBrushInternal( INT style, COLORREF color, BOOL pen )
+HBRUSH SYSCALL NtGdiCreateHatchBrushInternal( INT style, COLORREF color, BOOL pen )
 {
     LOGBRUSH logbrush;
 
@@ -236,7 +236,7 @@ HBRUSH WINAPI NtGdiCreateHatchBrushInternal( INT style, COLORREF color, BOOL pen
  *
  * Create a logical brush with a pattern from a bitmap.
  */
-HBRUSH WINAPI NtGdiCreatePatternBrushInternal( HBITMAP bitmap, BOOL pen, BOOL is_8x8 )
+HBRUSH SYSCALL NtGdiCreatePatternBrushInternal( HBITMAP bitmap, BOOL pen, BOOL is_8x8 )
 {
     LOGBRUSH logbrush = { BS_PATTERN, 0, 0 };
 
@@ -252,8 +252,8 @@ HBRUSH WINAPI NtGdiCreatePatternBrushInternal( HBITMAP bitmap, BOOL pen, BOOL is
  *
  * Create a logical brush with a pattern from a DIB.
  */
-HBRUSH WINAPI NtGdiCreateDIBBrush( const void *data, UINT coloruse, UINT size,
-                                   BOOL is_8x8, BOOL pen, const void *client )
+HBRUSH SYSCALL NtGdiCreateDIBBrush( const void *data, UINT coloruse, UINT size,
+                                    BOOL is_8x8, BOOL pen, const void *client )
 {
     const BITMAPINFO *info = data;
     LOGBRUSH logbrush;
@@ -277,7 +277,7 @@ HBRUSH WINAPI NtGdiCreateDIBBrush( const void *data, UINT coloruse, UINT size,
  *
  * Create a logical brush consisting of a single colour.
  */
-HBRUSH WINAPI NtGdiCreateSolidBrush( COLORREF color, HBRUSH brush )
+HBRUSH SYSCALL NtGdiCreateSolidBrush( COLORREF color, HBRUSH brush )
 {
     LOGBRUSH logbrush;
 
diff --git a/dlls/win32u/class.c b/dlls/win32u/class.c
index 11111111111..11111111111 100644
--- a/dlls/win32u/class.c
+++ b/dlls/win32u/class.c
@@ -257,9 +257,9 @@ static void init_user(void)
 /***********************************************************************
  *	     NtUserInitializeClientPfnArrays   (win32u.@)
  */
-NTSTATUS WINAPI NtUserInitializeClientPfnArrays( const struct user_client_procs *client_procsA,
-                                                 const struct user_client_procs *client_procsW,
-                                                 const void *client_workers, HINSTANCE user_module )
+NTSTATUS SYSCALL NtUserInitializeClientPfnArrays( const struct user_client_procs *client_procsA,
+                                                  const struct user_client_procs *client_procsW,
+                                                  const void *client_workers, HINSTANCE user_module )
 {
     static pthread_once_t init_once = PTHREAD_ONCE_INIT;
 
@@ -410,9 +410,9 @@ struct dce *set_class_dce( CLASS *class, struct dce *dce )
 /***********************************************************************
  *	     NtUserRegisterClassExWOW   (win32u.@)
  */
-ATOM WINAPI NtUserRegisterClassExWOW( const WNDCLASSEXW *wc, UNICODE_STRING *name, UNICODE_STRING *version,
-                                      struct client_menu_name *client_menu_name, DWORD fnid,
-                                      DWORD flags, DWORD *wow )
+ATOM SYSCALL NtUserRegisterClassExWOW( const WNDCLASSEXW *wc, UNICODE_STRING *name, UNICODE_STRING *version,
+                                       struct client_menu_name *client_menu_name, DWORD fnid,
+                                       DWORD flags, DWORD *wow )
 {
     const BOOL is_builtin = fnid, ansi = flags;
     HINSTANCE instance;
@@ -516,8 +516,8 @@ ATOM WINAPI NtUserRegisterClassExWOW( const WNDCLASSEXW *wc, UNICODE_STRING *nam
 /***********************************************************************
  *	     NtUserUnregisterClass   (win32u.@)
  */
-BOOL WINAPI NtUserUnregisterClass( UNICODE_STRING *name, HINSTANCE instance,
-                                   struct client_menu_name *client_menu_name )
+BOOL SYSCALL NtUserUnregisterClass( UNICODE_STRING *name, HINSTANCE instance,
+                                    struct client_menu_name *client_menu_name )
 {
     CLASS *class = NULL;
 
@@ -551,8 +551,8 @@ BOOL WINAPI NtUserUnregisterClass( UNICODE_STRING *name, HINSTANCE instance,
 /***********************************************************************
  *	     NtUserGetClassInfo   (win32u.@)
  */
-ATOM WINAPI NtUserGetClassInfoEx( HINSTANCE instance, UNICODE_STRING *name, WNDCLASSEXW *wc,
-                                  struct client_menu_name *menu_name, BOOL ansi )
+ATOM SYSCALL NtUserGetClassInfoEx( HINSTANCE instance, UNICODE_STRING *name, WNDCLASSEXW *wc,
+                                   struct client_menu_name *menu_name, BOOL ansi )
 {
     static const WCHAR messageW[] = {'M','e','s','s','a','g','e'};
     CLASS *class;
@@ -590,7 +590,7 @@ ATOM WINAPI NtUserGetClassInfoEx( HINSTANCE instance, UNICODE_STRING *name, WNDC
 /***********************************************************************
  *	     NtUserGetAtomName   (win32u.@)
  */
-ULONG WINAPI NtUserGetAtomName( ATOM atom, UNICODE_STRING *name )
+ULONG SYSCALL NtUserGetAtomName( ATOM atom, UNICODE_STRING *name )
 {
     char buf[sizeof(ATOM_BASIC_INFORMATION) + MAX_ATOM_LEN * sizeof(WCHAR)];
     ATOM_BASIC_INFORMATION *abi = (ATOM_BASIC_INFORMATION *)buf;
@@ -615,7 +615,7 @@ ULONG WINAPI NtUserGetAtomName( ATOM atom, UNICODE_STRING *name )
 /***********************************************************************
  *	     NtUserGetClassName   (win32u.@)
  */
-INT WINAPI NtUserGetClassName( HWND hwnd, BOOL real, UNICODE_STRING *name )
+INT SYSCALL NtUserGetClassName( HWND hwnd, BOOL real, UNICODE_STRING *name )
 {
     CLASS *class;
     int ret;
@@ -852,7 +852,7 @@ static ULONG_PTR set_class_long( HWND hwnd, INT offset, LONG_PTR newval, UINT si
 /***********************************************************************
  *	     NtUserSetClassLong   (win32u.@)
  */
-DWORD WINAPI NtUserSetClassLong( HWND hwnd, INT offset, LONG newval, BOOL ansi )
+DWORD SYSCALL NtUserSetClassLong( HWND hwnd, INT offset, LONG newval, BOOL ansi )
 {
     return set_class_long( hwnd, offset, newval, sizeof(LONG), ansi );
 }
@@ -860,7 +860,7 @@ DWORD WINAPI NtUserSetClassLong( HWND hwnd, INT offset, LONG newval, BOOL ansi )
 /***********************************************************************
  *	     NtUserSetClassLongPtr   (win32u.@)
  */
-ULONG_PTR WINAPI NtUserSetClassLongPtr( HWND hwnd, INT offset, LONG_PTR newval, BOOL ansi )
+ULONG_PTR SYSCALL NtUserSetClassLongPtr( HWND hwnd, INT offset, LONG_PTR newval, BOOL ansi )
 {
     return set_class_long( hwnd, offset, newval, sizeof(LONG_PTR), ansi );
 }
@@ -868,7 +868,7 @@ ULONG_PTR WINAPI NtUserSetClassLongPtr( HWND hwnd, INT offset, LONG_PTR newval,
 /***********************************************************************
  *	     NtUserSetClassWord   (win32u.@)
  */
-WORD WINAPI NtUserSetClassWord( HWND hwnd, INT offset, WORD newval )
+WORD SYSCALL NtUserSetClassWord( HWND hwnd, INT offset, WORD newval )
 {
     CLASS *class;
     WORD retval = 0;
diff --git a/dlls/win32u/clipboard.c b/dlls/win32u/clipboard.c
index 11111111111..11111111111 100644
--- a/dlls/win32u/clipboard.c
+++ b/dlls/win32u/clipboard.c
@@ -169,7 +169,7 @@ static void invalidate_memory_formats( struct list *free_list )
 /**************************************************************************
  *           NtUserOpenClipboard    (win32u.@)
  */
-BOOL WINAPI NtUserOpenClipboard( HWND hwnd, ULONG unk )
+BOOL SYSCALL NtUserOpenClipboard( HWND hwnd, ULONG unk )
 {
     struct list free_list = LIST_INIT( free_list );
     BOOL ret;
@@ -199,7 +199,7 @@ BOOL WINAPI NtUserOpenClipboard( HWND hwnd, ULONG unk )
 /**************************************************************************
  *           NtUserCloseClipboard    (win32u.@)
  */
-BOOL WINAPI NtUserCloseClipboard(void)
+BOOL SYSCALL NtUserCloseClipboard(void)
 {
     HWND viewer = 0, owner = 0;
     BOOL ret;
@@ -224,7 +224,7 @@ BOOL WINAPI NtUserCloseClipboard(void)
 /**************************************************************************
  *           NtUserEmptyClipboard    (win32u.@)
  */
-BOOL WINAPI NtUserEmptyClipboard(void)
+BOOL SYSCALL NtUserEmptyClipboard(void)
 {
     BOOL ret;
     HWND owner = NtUserGetClipboardOwner();
@@ -257,7 +257,7 @@ BOOL WINAPI NtUserEmptyClipboard(void)
 /**************************************************************************
  *           NtUserCountClipboardFormats    (win32u.@)
  */
-INT WINAPI NtUserCountClipboardFormats(void)
+INT SYSCALL NtUserCountClipboardFormats(void)
 {
     INT count = 0;
 
@@ -277,7 +277,7 @@ INT WINAPI NtUserCountClipboardFormats(void)
 /**************************************************************************
  *	     NtUserIsClipboardFormatAvailable    (win32u.@)
  */
-BOOL WINAPI NtUserIsClipboardFormatAvailable( UINT format )
+BOOL SYSCALL NtUserIsClipboardFormatAvailable( UINT format )
 {
     BOOL ret = FALSE;
 
@@ -298,7 +298,7 @@ BOOL WINAPI NtUserIsClipboardFormatAvailable( UINT format )
 /**************************************************************************
  *	     NtUserGetUpdatedClipboardFormats    (win32u.@)
  */
-BOOL WINAPI NtUserGetUpdatedClipboardFormats( UINT *formats, UINT size, UINT *out_size )
+BOOL SYSCALL NtUserGetUpdatedClipboardFormats( UINT *formats, UINT size, UINT *out_size )
 {
     BOOL ret;
 
@@ -326,7 +326,7 @@ BOOL WINAPI NtUserGetUpdatedClipboardFormats( UINT *formats, UINT size, UINT *ou
 /**************************************************************************
  *	     NtUserGetPriorityClipboardFormat    (win32u.@)
  */
-INT WINAPI NtUserGetPriorityClipboardFormat( UINT *list, INT count )
+INT SYSCALL NtUserGetPriorityClipboardFormat( UINT *list, INT count )
 {
     int i;
 
@@ -345,7 +345,7 @@ INT WINAPI NtUserGetPriorityClipboardFormat( UINT *list, INT count )
 /**************************************************************************
  *	     NtUserGetClipboardFormatName    (win32u.@)
  */
-INT WINAPI NtUserGetClipboardFormatName( UINT format, WCHAR *buffer, INT maxlen )
+INT SYSCALL NtUserGetClipboardFormatName( UINT format, WCHAR *buffer, INT maxlen )
 {
     char buf[sizeof(ATOM_BASIC_INFORMATION) + MAX_ATOM_LEN * sizeof(WCHAR)];
     ATOM_BASIC_INFORMATION *abi = (ATOM_BASIC_INFORMATION *)buf;
@@ -370,7 +370,7 @@ INT WINAPI NtUserGetClipboardFormatName( UINT format, WCHAR *buffer, INT maxlen
 /**************************************************************************
  *	     NtUserGetClipboardOwner    (win32u.@)
  */
-HWND WINAPI NtUserGetClipboardOwner(void)
+HWND SYSCALL NtUserGetClipboardOwner(void)
 {
     HWND owner = 0;
 
@@ -387,7 +387,7 @@ HWND WINAPI NtUserGetClipboardOwner(void)
 /**************************************************************************
  *           NtUserSetClipboardViewer    (win32u.@)
  */
-HWND WINAPI NtUserSetClipboardViewer( HWND hwnd )
+HWND SYSCALL NtUserSetClipboardViewer( HWND hwnd )
 {
     HWND prev = 0, owner = 0;
 
@@ -413,7 +413,7 @@ HWND WINAPI NtUserSetClipboardViewer( HWND hwnd )
 /**************************************************************************
  *           NtUserGetClipboardViewer    (win32u.@)
  */
-HWND WINAPI NtUserGetClipboardViewer(void)
+HWND SYSCALL NtUserGetClipboardViewer(void)
 {
     HWND viewer = 0;
 
@@ -430,7 +430,7 @@ HWND WINAPI NtUserGetClipboardViewer(void)
 /**************************************************************************
  *           NtUserChangeClipboardChain    (win32u.@)
  */
-BOOL WINAPI NtUserChangeClipboardChain( HWND hwnd, HWND next )
+BOOL SYSCALL NtUserChangeClipboardChain( HWND hwnd, HWND next )
 {
     NTSTATUS status;
     HWND viewer;
@@ -456,7 +456,7 @@ BOOL WINAPI NtUserChangeClipboardChain( HWND hwnd, HWND next )
 /**************************************************************************
  *	     NtUserGetOpenClipboardWindow    (win32u.@)
  */
-HWND WINAPI NtUserGetOpenClipboardWindow(void)
+HWND SYSCALL NtUserGetOpenClipboardWindow(void)
 {
     HWND window = 0;
 
@@ -473,7 +473,7 @@ HWND WINAPI NtUserGetOpenClipboardWindow(void)
 /**************************************************************************
  *	     NtUserGetClipboardSequenceNumber    (win32u.@)
  */
-DWORD WINAPI NtUserGetClipboardSequenceNumber(void)
+DWORD SYSCALL NtUserGetClipboardSequenceNumber(void)
 {
     unsigned int seqno = 0;
 
@@ -510,7 +510,7 @@ UINT enum_clipboard_formats( UINT format )
 /**************************************************************************
  *	     NtUserAddClipboardFormatListener    (win32u.@)
  */
-BOOL WINAPI NtUserAddClipboardFormatListener( HWND hwnd )
+BOOL SYSCALL NtUserAddClipboardFormatListener( HWND hwnd )
 {
     BOOL ret;
 
@@ -526,7 +526,7 @@ BOOL WINAPI NtUserAddClipboardFormatListener( HWND hwnd )
 /**************************************************************************
  *	     NtUserRemoveClipboardFormatListener    (win32u.@)
  */
-BOOL WINAPI NtUserRemoveClipboardFormatListener( HWND hwnd )
+BOOL SYSCALL NtUserRemoveClipboardFormatListener( HWND hwnd )
 {
     BOOL ret;
 
@@ -567,7 +567,7 @@ void release_clipboard_owner( HWND hwnd )
 /**************************************************************************
  *           NtUserSetClipboardData    (win32u.@)
  */
-NTSTATUS WINAPI NtUserSetClipboardData( UINT format, HANDLE data, struct set_clipboard_params *params )
+NTSTATUS SYSCALL NtUserSetClipboardData( UINT format, HANDLE data, struct set_clipboard_params *params )
 {
     struct cached_format *cache = NULL, *prev = NULL;
     LCID lcid;
@@ -638,7 +638,7 @@ done:
 /**************************************************************************
  *           NtUserGetClipboardData    (win32u.@)
  */
-HANDLE WINAPI NtUserGetClipboardData( UINT format, struct get_clipboard_params *params )
+HANDLE SYSCALL NtUserGetClipboardData( UINT format, struct get_clipboard_params *params )
 {
     struct cached_format *cache = NULL;
     unsigned int status;
diff --git a/dlls/win32u/clipping.c b/dlls/win32u/clipping.c
index 11111111111..11111111111 100644
--- a/dlls/win32u/clipping.c
+++ b/dlls/win32u/clipping.c
@@ -466,7 +466,7 @@ INT WINAPI NtGdiGetRandomRgn( HDC hDC, HRGN hRgn, INT iCode )
 /***********************************************************************
  *           NtGdiSetMetaRgn    (win32u.@)
  */
-INT WINAPI NtGdiSetMetaRgn( HDC hdc )
+INT SYSCALL NtGdiSetMetaRgn( HDC hdc )
 {
     INT ret;
     RECT dummy;
diff --git a/dlls/win32u/cursoricon.c b/dlls/win32u/cursoricon.c
index 11111111111..11111111111 100644
--- a/dlls/win32u/cursoricon.c
+++ b/dlls/win32u/cursoricon.c
@@ -77,7 +77,7 @@ static struct cursoricon_object *get_icon_ptr( HICON handle )
 /***********************************************************************
  *	     NtUserShowCursor    (win32u.@)
  */
-INT WINAPI NtUserShowCursor( BOOL show )
+INT SYSCALL NtUserShowCursor( BOOL show )
 {
     HCURSOR cursor;
     int increment = show ? 1 : -1;
@@ -104,7 +104,7 @@ INT WINAPI NtUserShowCursor( BOOL show )
 /***********************************************************************
  *	     NtUserSetCursor (win32u.@)
  */
-HCURSOR WINAPI NtUserSetCursor( HCURSOR cursor )
+HCURSOR SYSCALL NtUserSetCursor( HCURSOR cursor )
 {
     struct cursoricon_object *obj;
     HCURSOR old_cursor;
@@ -136,7 +136,7 @@ HCURSOR WINAPI NtUserSetCursor( HCURSOR cursor )
 /***********************************************************************
  *	     NtUserGetCursor (win32u.@)
  */
-HCURSOR WINAPI NtUserGetCursor(void)
+HCURSOR SYSCALL NtUserGetCursor(void)
 {
     HCURSOR ret;
 
@@ -153,7 +153,7 @@ HCURSOR WINAPI NtUserGetCursor(void)
 /***********************************************************************
  *	     NtUserClipCursor (win32u.@)
  */
-BOOL WINAPI NtUserClipCursor( const RECT *rect )
+BOOL SYSCALL NtUserClipCursor( const RECT *rect )
 {
     UINT dpi;
     BOOL ret;
@@ -300,7 +300,7 @@ static BOOL free_icon_handle( HICON handle )
 /***********************************************************************
  *	     NtUserDestroyCursor (win32u.@)
  */
-BOOL WINAPI NtUserDestroyCursor( HCURSOR cursor, ULONG arg )
+BOOL SYSCALL NtUserDestroyCursor( HCURSOR cursor, ULONG arg )
 {
     struct cursoricon_object *obj;
     BOOL shared, ret;
@@ -318,8 +318,8 @@ BOOL WINAPI NtUserDestroyCursor( HCURSOR cursor, ULONG arg )
 /***********************************************************************
  *	     NtUserSetCursorIconData (win32u.@)
  */
-BOOL WINAPI NtUserSetCursorIconData( HCURSOR cursor, UNICODE_STRING *module, UNICODE_STRING *res_name,
-                                     struct cursoricon_desc *desc )
+BOOL SYSCALL NtUserSetCursorIconData( HCURSOR cursor, UNICODE_STRING *module, UNICODE_STRING *res_name,
+                                      struct cursoricon_desc *desc )
 {
     struct cursoricon_object *obj;
     UINT i, j;
@@ -422,7 +422,7 @@ BOOL WINAPI NtUserSetCursorIconData( HCURSOR cursor, UNICODE_STRING *module, UNI
 /***********************************************************************
  *	     NtUserFindExistingCursorIcon (win32u.@)
  */
-HICON WINAPI NtUserFindExistingCursorIcon( UNICODE_STRING *module, UNICODE_STRING *res_name, void *desc )
+HICON SYSCALL NtUserFindExistingCursorIcon( UNICODE_STRING *module, UNICODE_STRING *res_name, void *desc )
 {
     struct cursoricon_object *ptr;
     HICON ret = 0;
@@ -444,7 +444,7 @@ HICON WINAPI NtUserFindExistingCursorIcon( UNICODE_STRING *module, UNICODE_STRIN
 /***********************************************************************
  *	     NtUserGetIconSize (win32u.@)
  */
-BOOL WINAPI NtUserGetIconSize( HICON handle, UINT step, LONG *width, LONG *height )
+BOOL SYSCALL NtUserGetIconSize( HICON handle, UINT step, LONG *width, LONG *height )
 {
     struct cursoricon_object *obj;
 
@@ -463,8 +463,8 @@ BOOL WINAPI NtUserGetIconSize( HICON handle, UINT step, LONG *width, LONG *heigh
 /**********************************************************************
  *           NtUserGetCursorFrameInfo (win32u.@)
  */
-HCURSOR WINAPI NtUserGetCursorFrameInfo( HCURSOR cursor, DWORD istep, DWORD *rate_jiffies,
-                                         DWORD *num_steps )
+HCURSOR SYSCALL NtUserGetCursorFrameInfo( HCURSOR cursor, DWORD istep, DWORD *rate_jiffies,
+                                          DWORD *num_steps )
 {
     struct cursoricon_object *obj;
     HCURSOR ret = 0;
@@ -547,8 +547,8 @@ static HBITMAP copy_bitmap( HBITMAP bitmap )
 /**********************************************************************
  *           NtUserGetIconInfo (win32u.@)
  */
-BOOL WINAPI NtUserGetIconInfo( HICON icon, ICONINFO *info, UNICODE_STRING *module,
-                               UNICODE_STRING *res_name, DWORD *bpp, LONG unk )
+BOOL SYSCALL NtUserGetIconInfo( HICON icon, ICONINFO *info, UNICODE_STRING *module,
+                                UNICODE_STRING *res_name, DWORD *bpp, LONG unk )
 {
     struct cursoricon_object *obj, *frame_obj;
     BOOL ret = TRUE;
@@ -617,8 +617,8 @@ BOOL WINAPI NtUserGetIconInfo( HICON icon, ICONINFO *info, UNICODE_STRING *modul
 /******************************************************************************
  *	     NtUserDrawIconEx (win32u.@)
  */
-BOOL WINAPI NtUserDrawIconEx( HDC hdc, INT x0, INT y0, HICON icon, INT width,
-                              INT height, UINT step, HBRUSH brush, UINT flags )
+BOOL SYSCALL NtUserDrawIconEx( HDC hdc, INT x0, INT y0, HICON icon, INT width,
+                               INT height, UINT step, HBRUSH brush, UINT flags )
 {
     struct cursoricon_object *obj;
     HBITMAP offscreen_bitmap = 0;
diff --git a/dlls/win32u/dc.c b/dlls/win32u/dc.c
index 11111111111..11111111111 100644
--- a/dlls/win32u/dc.c
+++ b/dlls/win32u/dc.c
@@ -531,7 +531,7 @@ static BOOL DC_DeleteObject( HGDIOBJ handle )
 /***********************************************************************
  *           NtGdiSaveDC    (win32u.@)
  */
-INT WINAPI NtGdiSaveDC( HDC hdc )
+INT SYSCALL NtGdiSaveDC( HDC hdc )
 {
     DC *dc, *newdc;
     INT ret;
@@ -988,7 +988,7 @@ BOOL WINAPI NtGdiGetAndSetDCDword( HDC hdc, UINT method, DWORD value, DWORD *pre
 /***********************************************************************
  *           NtGdiGetDCDword    (win32u.@)
  */
-BOOL WINAPI NtGdiGetDCDword( HDC hdc, UINT method, DWORD *result )
+BOOL SYSCALL NtGdiGetDCDword( HDC hdc, UINT method, DWORD *result )
 {
     BOOL ret = TRUE;
     DC *dc;
@@ -1055,7 +1055,7 @@ BOOL WINAPI NtGdiGetDCDword( HDC hdc, UINT method, DWORD *result )
 /***********************************************************************
  *           NtGdiGetDCPoint    (win32u.@)
  */
-BOOL WINAPI NtGdiGetDCPoint( HDC hdc, UINT method, POINT *result )
+BOOL SYSCALL NtGdiGetDCPoint( HDC hdc, UINT method, POINT *result )
 {
     BOOL ret = TRUE;
     DC *dc;
@@ -1091,7 +1091,7 @@ BOOL WINAPI NtGdiGetDCPoint( HDC hdc, UINT method, POINT *result )
 /***********************************************************************
  *           NtGdiSetBrushOrg    (win32u.@)
  */
-BOOL WINAPI NtGdiSetBrushOrg( HDC hdc, INT x, INT y, POINT *oldorg )
+BOOL SYSCALL NtGdiSetBrushOrg( HDC hdc, INT x, INT y, POINT *oldorg )
 {
     DC *dc;
 
@@ -1134,7 +1134,7 @@ BOOL set_viewport_org( HDC hdc, INT x, INT y, POINT *point )
  *    xform [O] The xform.
  *
  */
-BOOL WINAPI NtGdiGetTransform( HDC hdc, DWORD which, XFORM *xform )
+BOOL SYSCALL NtGdiGetTransform( HDC hdc, DWORD which, XFORM *xform )
 {
     BOOL ret = TRUE;
     DC *dc = get_dc_ptr( hdc );
diff --git a/dlls/win32u/dce.c b/dlls/win32u/dce.c
index 11111111111..11111111111 100644
--- a/dlls/win32u/dce.c
+++ b/dlls/win32u/dce.c
@@ -877,7 +877,7 @@ static INT release_dc( HWND hwnd, HDC hdc, BOOL end_paint )
 /***********************************************************************
  *           NtUserGetDCEx (win32u.@)
  */
-HDC WINAPI NtUserGetDCEx( HWND hwnd, HRGN clip_rgn, DWORD flags )
+HDC SYSCALL NtUserGetDCEx( HWND hwnd, HRGN clip_rgn, DWORD flags )
 {
     const DWORD clip_flags = DCX_PARENTCLIP | DCX_CLIPSIBLINGS | DCX_CLIPCHILDREN | DCX_WINDOW;
     const DWORD user_flags = clip_flags | DCX_NORESETATTRS; /* flags that can be set by user */
@@ -1031,7 +1031,7 @@ INT WINAPI NtUserReleaseDC( HWND hwnd, HDC hdc )
 /***********************************************************************
  *           NtUserGetDC (win32u.@)
  */
-HDC WINAPI NtUserGetDC( HWND hwnd )
+HDC SYSCALL NtUserGetDC( HWND hwnd )
 {
     if (!hwnd) return NtUserGetDCEx( 0, 0, DCX_CACHE | DCX_WINDOW );
     return NtUserGetDCEx( hwnd, 0, DCX_USESTYLE );
@@ -1040,7 +1040,7 @@ HDC WINAPI NtUserGetDC( HWND hwnd )
 /***********************************************************************
  *           NtUserGetWindowDC (win32u.@)
  */
-HDC WINAPI NtUserGetWindowDC( HWND hwnd )
+HDC SYSCALL NtUserGetWindowDC( HWND hwnd )
 {
     return NtUserGetDCEx( hwnd, 0, DCX_USESTYLE | DCX_WINDOW );
 }
@@ -1048,7 +1048,7 @@ HDC WINAPI NtUserGetWindowDC( HWND hwnd )
 /**********************************************************************
  *           NtUserWindowFromDC (win32u.@)
  */
-HWND WINAPI NtUserWindowFromDC( HDC hdc )
+HWND SYSCALL NtUserWindowFromDC( HDC hdc )
 {
     struct dce *dce;
     HWND hwnd = 0;
@@ -1348,7 +1348,7 @@ void move_window_bits_parent( HWND hwnd, HWND parent, const RECT *window_rect, c
 /***********************************************************************
  *           NtUserBeginPaint (win32u.@)
  */
-HDC WINAPI NtUserBeginPaint( HWND hwnd, PAINTSTRUCT *ps )
+HDC SYSCALL NtUserBeginPaint( HWND hwnd, PAINTSTRUCT *ps )
 {
     HRGN hrgn;
     HDC hdc;
@@ -1446,7 +1446,7 @@ static void update_now( HWND hwnd, UINT rdw_flags )
 /***********************************************************************
  *           NtUserRedrawWindow (win32u.@)
  */
-BOOL WINAPI NtUserRedrawWindow( HWND hwnd, const RECT *rect, HRGN hrgn, UINT flags )
+BOOL SYSCALL NtUserRedrawWindow( HWND hwnd, const RECT *rect, HRGN hrgn, UINT flags )
 {
     static const RECT empty;
     BOOL ret;
@@ -1511,7 +1511,7 @@ BOOL WINAPI NtUserRedrawWindow( HWND hwnd, const RECT *rect, HRGN hrgn, UINT fla
 /***********************************************************************
  *           NtUserValidateRect (win32u.@)
  */
-BOOL WINAPI NtUserValidateRect( HWND hwnd, const RECT *rect )
+BOOL SYSCALL NtUserValidateRect( HWND hwnd, const RECT *rect )
 {
     UINT flags = RDW_VALIDATE;
 
@@ -1527,7 +1527,7 @@ BOOL WINAPI NtUserValidateRect( HWND hwnd, const RECT *rect )
 /***********************************************************************
  *           NtUserGetUpdateRgn (win32u.@)
  */
-INT WINAPI NtUserGetUpdateRgn( HWND hwnd, HRGN hrgn, BOOL erase )
+INT SYSCALL NtUserGetUpdateRgn( HWND hwnd, HRGN hrgn, BOOL erase )
 {
     DPI_AWARENESS_CONTEXT context;
     INT retval = ERROR;
@@ -1556,7 +1556,7 @@ INT WINAPI NtUserGetUpdateRgn( HWND hwnd, HRGN hrgn, BOOL erase )
 /***********************************************************************
  *           NtUserGetUpdateRect (win32u.@)
  */
-BOOL WINAPI NtUserGetUpdateRect( HWND hwnd, RECT *rect, BOOL erase )
+BOOL SYSCALL NtUserGetUpdateRect( HWND hwnd, RECT *rect, BOOL erase )
 {
     UINT flags = UPDATE_NOCHILDREN;
     HRGN update_rgn;
@@ -1612,7 +1612,7 @@ INT WINAPI NtUserExcludeUpdateRgn( HDC hdc, HWND hwnd )
 /***********************************************************************
  *           NtUserInvalidateRgn (win32u.@)
  */
-BOOL WINAPI NtUserInvalidateRgn( HWND hwnd, HRGN hrgn, BOOL erase )
+BOOL SYSCALL NtUserInvalidateRgn( HWND hwnd, HRGN hrgn, BOOL erase )
 {
     if (!hwnd)
     {
@@ -1626,7 +1626,7 @@ BOOL WINAPI NtUserInvalidateRgn( HWND hwnd, HRGN hrgn, BOOL erase )
 /***********************************************************************
  *           NtUserInvalidateRect (win32u.@)
  */
-BOOL WINAPI NtUserInvalidateRect( HWND hwnd, const RECT *rect, BOOL erase )
+BOOL SYSCALL NtUserInvalidateRect( HWND hwnd, const RECT *rect, BOOL erase )
 {
     UINT flags = RDW_INVALIDATE | (erase ? RDW_ERASE : 0);
 
@@ -1642,7 +1642,7 @@ BOOL WINAPI NtUserInvalidateRect( HWND hwnd, const RECT *rect, BOOL erase )
 /***********************************************************************
  *           NtUserLockWindowUpdate (win32u.@)
  */
-BOOL WINAPI NtUserLockWindowUpdate( HWND hwnd )
+BOOL SYSCALL NtUserLockWindowUpdate( HWND hwnd )
 {
     static HWND locked_hwnd;
 
@@ -1713,9 +1713,9 @@ static HWND fix_caret( HWND hwnd, const RECT *scroll_rect, INT dx, INT dy,
  * Note: contrary to what the doc says, pixels that are scrolled from the
  *      outside of clipRect to the inside are NOT painted.
  */
-INT WINAPI NtUserScrollWindowEx( HWND hwnd, INT dx, INT dy, const RECT *rect,
-                                 const RECT *clip_rect, HRGN update_rgn,
-                                 RECT *update_rect, UINT flags )
+INT SYSCALL NtUserScrollWindowEx( HWND hwnd, INT dx, INT dy, const RECT *rect,
+                                  const RECT *clip_rect, HRGN update_rgn,
+                                  RECT *update_rect, UINT flags )
 {
     BOOL update = update_rect || update_rgn || flags & (SW_INVALIDATE | SW_ERASE);
     BOOL own_rgn = TRUE, move_caret = FALSE;
@@ -1866,7 +1866,7 @@ INT WINAPI NtUserScrollWindowEx( HWND hwnd, INT dx, INT dy, const RECT *rect,
 /************************************************************************
  *           NtUserPrintWindow (win32u.@)
  */
-BOOL WINAPI NtUserPrintWindow( HWND hwnd, HDC hdc, UINT flags )
+BOOL SYSCALL NtUserPrintWindow( HWND hwnd, HDC hdc, UINT flags )
 {
     UINT prf_flags = PRF_CHILDREN | PRF_ERASEBKGND | PRF_OWNED | PRF_CLIENT;
     if (!(flags & PW_CLIENTONLY)) prf_flags |= PRF_NONCLIENT;
diff --git a/dlls/win32u/defwnd.c b/dlls/win32u/defwnd.c
index 11111111111..11111111111 100644
--- a/dlls/win32u/defwnd.c
+++ b/dlls/win32u/defwnd.c
@@ -2999,7 +2999,7 @@ LRESULT desktop_window_proc( HWND hwnd, UINT msg, WPARAM wparam, LPARAM lparam )
 /***********************************************************************
  *           NtUserGetTitleBarInfo   (win32u.@)
  */
-BOOL WINAPI NtUserGetTitleBarInfo( HWND hwnd, TITLEBARINFO *info )
+BOOL SYSCALL NtUserGetTitleBarInfo( HWND hwnd, TITLEBARINFO *info )
 {
     DWORD style, ex_style;
 
diff --git a/dlls/win32u/dib.c b/dlls/win32u/dib.c
index 11111111111..11111111111 100644
--- a/dlls/win32u/dib.c
+++ b/dlls/win32u/dib.c
@@ -1467,9 +1467,9 @@ HBITMAP WINAPI NtGdiCreateDIBitmapInternal( HDC hdc, INT width, INT height, DWOR
 /***********************************************************************
  *           NtGdiCreateDIBSection    (win32u.@)
  */
-HBITMAP WINAPI NtGdiCreateDIBSection( HDC hdc, HANDLE section, DWORD offset, const BITMAPINFO *bmi,
-                                      UINT usage, UINT header_size, ULONG flags,
-                                      ULONG_PTR color_space, void **bits )
+HBITMAP SYSCALL NtGdiCreateDIBSection( HDC hdc, HANDLE section, DWORD offset, const BITMAPINFO *bmi,
+                                       UINT usage, UINT header_size, ULONG flags,
+                                       ULONG_PTR color_space, void **bits )
 {
     char buffer[FIELD_OFFSET( BITMAPINFO, bmiColors[256] )];
     BITMAPINFO *info = (BITMAPINFO *)buffer;
diff --git a/dlls/win32u/driver.c b/dlls/win32u/driver.c
index 11111111111..11111111111 100644
--- a/dlls/win32u/driver.c
+++ b/dlls/win32u/driver.c
@@ -1360,7 +1360,7 @@ INT WINAPI NtGdiExtEscape( HDC hdc, WCHAR *driver, int driver_id, INT escape, IN
 /******************************************************************************
  *           NtGdiDdDDIOpenAdapterFromHdc    (win32u.@)
  */
-NTSTATUS WINAPI NtGdiDdDDIOpenAdapterFromHdc( D3DKMT_OPENADAPTERFROMHDC *desc )
+NTSTATUS SYSCALL NtGdiDdDDIOpenAdapterFromHdc( D3DKMT_OPENADAPTERFROMHDC *desc )
 {
     FIXME( "(%p): stub\n", desc );
     return STATUS_NO_MEMORY;
@@ -1451,7 +1451,7 @@ NTSTATUS WINAPI NtGdiDdDDIOpenAdapterFromLuid( D3DKMT_OPENADAPTERFROMLUID *desc
 /******************************************************************************
  *           NtGdiDdDDICreateDevice    (win32u.@)
  */
-NTSTATUS WINAPI NtGdiDdDDICreateDevice( D3DKMT_CREATEDEVICE *desc )
+NTSTATUS SYSCALL NtGdiDdDDICreateDevice( D3DKMT_CREATEDEVICE *desc )
 {
     static D3DKMT_HANDLE handle_start = 0;
     struct d3dkmt_adapter *adapter;
@@ -1529,7 +1529,7 @@ NTSTATUS WINAPI NtGdiDdDDIDestroyDevice( const D3DKMT_DESTROYDEVICE *desc )
 /******************************************************************************
  *           NtGdiDdDDIQueryStatistics    (win32u.@)
  */
-NTSTATUS WINAPI NtGdiDdDDIQueryStatistics( D3DKMT_QUERYSTATISTICS *stats )
+NTSTATUS SYSCALL NtGdiDdDDIQueryStatistics( D3DKMT_QUERYSTATISTICS *stats )
 {
     FIXME("(%p): stub\n", stats);
     return STATUS_SUCCESS;
@@ -1569,7 +1569,7 @@ NTSTATUS WINAPI NtGdiDdDDIQueryVideoMemoryInfo( D3DKMT_QUERYVIDEOMEMORYINFO *des
 /******************************************************************************
  *           NtGdiDdDDISetQueuedLimit    (win32u.@)
  */
-NTSTATUS WINAPI NtGdiDdDDISetQueuedLimit( D3DKMT_SETQUEUEDLIMIT *desc )
+NTSTATUS SYSCALL NtGdiDdDDISetQueuedLimit( D3DKMT_SETQUEUEDLIMIT *desc )
 {
     FIXME( "(%p): stub\n", desc );
     return STATUS_NOT_IMPLEMENTED;
diff --git a/dlls/win32u/font.c b/dlls/win32u/font.c
index 11111111111..11111111111 100644
--- a/dlls/win32u/font.c
+++ b/dlls/win32u/font.c
@@ -5066,8 +5066,8 @@ UINT WINAPI NtGdiGetTextCharsetInfo( HDC hdc, FONTSIGNATURE *fs, DWORD flags )
 /***********************************************************************
  *           NtGdiHfontCreate   (win32u.@)
  */
-HFONT WINAPI NtGdiHfontCreate( const void *logfont, ULONG size, ULONG type,
-                               ULONG flags, void *data )
+HFONT SYSCALL NtGdiHfontCreate( const void *logfont, ULONG size, ULONG type,
+                                ULONG flags, void *data )
 {
     HFONT hFont;
     FONTOBJ *fontPtr;
@@ -5346,7 +5346,7 @@ BOOL WINAPI NtGdiEnumFonts( HDC hdc, ULONG type, ULONG win32_compat, ULONG face_
 /***********************************************************************
  *           NtGdiSetTextJustification    (win32u.@)
  */
-BOOL WINAPI NtGdiSetTextJustification( HDC hdc, INT extra, INT breaks )
+BOOL SYSCALL NtGdiSetTextJustification( HDC hdc, INT extra, INT breaks )
 {
     DC *dc;
 
@@ -6892,8 +6892,8 @@ static void font_init(void)
 /***********************************************************************
  *           NtGdiAddFontResourceW    (win32u.@)
  */
-INT WINAPI NtGdiAddFontResourceW( const WCHAR *str, ULONG size, ULONG files, DWORD flags,
-                                  DWORD tid, void *dv )
+INT SYSCALL NtGdiAddFontResourceW( const WCHAR *str, ULONG size, ULONG files, DWORD flags,
+                                   DWORD tid, void *dv )
 {
     pthread_once( &font_init_once, font_init );
     if (!font_funcs) return 1;
@@ -6903,8 +6903,8 @@ INT WINAPI NtGdiAddFontResourceW( const WCHAR *str, ULONG size, ULONG files, DWO
 /***********************************************************************
  *           NtGdiAddFontMemResourceEx    (win32u.@)
  */
-HANDLE WINAPI NtGdiAddFontMemResourceEx( void *ptr, DWORD size, void *dv, ULONG dv_size,
-                                         DWORD *count )
+HANDLE SYSCALL NtGdiAddFontMemResourceEx( void *ptr, DWORD size, void *dv, ULONG dv_size,
+                                          DWORD *count )
 {
     HANDLE ret;
     DWORD num_fonts;
@@ -6953,7 +6953,7 @@ HANDLE WINAPI NtGdiAddFontMemResourceEx( void *ptr, DWORD size, void *dv, ULONG
 /***********************************************************************
  *           NtGdiRemoveFontMemResourceEx    (win32u.@)
  */
-BOOL WINAPI NtGdiRemoveFontMemResourceEx( HANDLE handle )
+BOOL SYSCALL NtGdiRemoveFontMemResourceEx( HANDLE handle )
 {
     FIXME( "(%p) stub\n", handle );
     return TRUE;
@@ -6962,8 +6962,8 @@ BOOL WINAPI NtGdiRemoveFontMemResourceEx( HANDLE handle )
 /***********************************************************************
  *           NtGdiRemoveFontResourceW    (win32u.@)
  */
-BOOL WINAPI NtGdiRemoveFontResourceW( const WCHAR *str, ULONG size, ULONG files, DWORD flags,
-                                      DWORD tid, void *dv )
+BOOL SYSCALL NtGdiRemoveFontResourceW( const WCHAR *str, ULONG size, ULONG files, DWORD flags,
+                                       DWORD tid, void *dv )
 {
     pthread_once( &font_init_once, font_init );
     if (!font_funcs) return TRUE;
@@ -7054,8 +7054,8 @@ BOOL WINAPI NtGdiGetRasterizerCaps( RASTERIZER_STATUS *status, UINT size )
 /*************************************************************************
  *             NtGdiGetFontFileData   (win32u.@)
  */
-BOOL WINAPI NtGdiGetFontFileData( DWORD instance_id, DWORD file_index, UINT64 *offset,
-                                  void *buff, DWORD buff_size )
+BOOL SYSCALL NtGdiGetFontFileData( DWORD instance_id, DWORD file_index, UINT64 *offset,
+                                   void *buff, DWORD buff_size )
 {
     struct gdi_font *font;
     DWORD tag = 0, size;
@@ -7080,8 +7080,8 @@ BOOL WINAPI NtGdiGetFontFileData( DWORD instance_id, DWORD file_index, UINT64 *o
 /*************************************************************************
  *             NtGdiGetFontFileInfo   (win32u.@)
  */
-BOOL WINAPI NtGdiGetFontFileInfo( DWORD instance_id, DWORD file_index, struct font_fileinfo *info,
-                                  SIZE_T size, SIZE_T *needed )
+BOOL SYSCALL NtGdiGetFontFileInfo( DWORD instance_id, DWORD file_index, struct font_fileinfo *info,
+                                   SIZE_T size, SIZE_T *needed )
 {
     SIZE_T required_size = 0;
     struct gdi_font *font;
diff --git a/dlls/win32u/gdiobj.c b/dlls/win32u/gdiobj.c
index 11111111111..11111111111 100644
--- a/dlls/win32u/gdiobj.c
+++ b/dlls/win32u/gdiobj.c
@@ -896,7 +896,7 @@ BOOL WINAPI NtGdiDeleteObjectApp( HGDIOBJ obj )
 /***********************************************************************
  *           NtGdiCreateClientObj    (win32u.@)
  */
-HANDLE WINAPI NtGdiCreateClientObj( ULONG type )
+HANDLE SYSCALL NtGdiCreateClientObj( ULONG type )
 {
     struct gdi_obj_header *obj;
     HGDIOBJ handle;
@@ -912,7 +912,7 @@ HANDLE WINAPI NtGdiCreateClientObj( ULONG type )
 /***********************************************************************
  *           NtGdiDeleteClientObj    (win32u.@)
  */
-BOOL WINAPI NtGdiDeleteClientObj( HGDIOBJ handle )
+BOOL SYSCALL NtGdiDeleteClientObj( HGDIOBJ handle )
 {
     void *obj;
     if (!(obj = free_gdi_handle( handle ))) return FALSE;
@@ -924,7 +924,7 @@ BOOL WINAPI NtGdiDeleteClientObj( HGDIOBJ handle )
 /***********************************************************************
  *           NtGdiExtGetObjectW    (win32u.@)
  */
-INT WINAPI NtGdiExtGetObjectW( HGDIOBJ handle, INT count, void *buffer )
+INT SYSCALL NtGdiExtGetObjectW( HGDIOBJ handle, INT count, void *buffer )
 {
     GDI_HANDLE_ENTRY *entry;
     const struct gdi_obj_funcs *funcs = NULL;
@@ -955,7 +955,7 @@ INT WINAPI NtGdiExtGetObjectW( HGDIOBJ handle, INT count, void *buffer )
  *
  * Get the currently selected object of a given type in a device context.
  */
-HANDLE WINAPI NtGdiGetDCObject( HDC hdc, UINT type )
+HANDLE SYSCALL NtGdiGetDCObject( HDC hdc, UINT type )
 {
     HGDIOBJ ret = 0;
     DC *dc;
@@ -1003,7 +1003,7 @@ BOOL WINAPI NtGdiUnrealizeObject( HGDIOBJ obj )
 /***********************************************************************
  *           NtGdiFlush    (win32u.@)
  */
-BOOL WINAPI NtGdiFlush(void)
+BOOL SYSCALL NtGdiFlush(void)
 {
     return TRUE;  /* FIXME */
 }
@@ -1012,7 +1012,7 @@ BOOL WINAPI NtGdiFlush(void)
 /*******************************************************************
  *           NtGdiGetColorAdjustment    (win32u.@)
  */
-BOOL WINAPI NtGdiGetColorAdjustment( HDC hdc, COLORADJUSTMENT *ca )
+BOOL SYSCALL NtGdiGetColorAdjustment( HDC hdc, COLORADJUSTMENT *ca )
 {
     FIXME( "stub\n" );
     return FALSE;
@@ -1021,7 +1021,7 @@ BOOL WINAPI NtGdiGetColorAdjustment( HDC hdc, COLORADJUSTMENT *ca )
 /*******************************************************************
  *           NtGdiSetColorAdjustment    (win32u.@)
  */
-BOOL WINAPI NtGdiSetColorAdjustment( HDC hdc, const COLORADJUSTMENT *ca )
+BOOL SYSCALL NtGdiSetColorAdjustment( HDC hdc, const COLORADJUSTMENT *ca )
 {
     FIXME( "stub\n" );
     return FALSE;
diff --git a/dlls/win32u/hook.c b/dlls/win32u/hook.c
index 11111111111..11111111111 100644
--- a/dlls/win32u/hook.c
+++ b/dlls/win32u/hook.c
@@ -108,8 +108,8 @@ BOOL is_hooked( INT id )
 /***********************************************************************
  *           NtUserSetWindowsHookEx   (win32u.@)
  */
-HHOOK WINAPI NtUserSetWindowsHookEx( HINSTANCE inst, UNICODE_STRING *module, DWORD tid, INT id,
-                                     HOOKPROC proc, BOOL ansi )
+HHOOK SYSCALL NtUserSetWindowsHookEx( HINSTANCE inst, UNICODE_STRING *module, DWORD tid, INT id,
+                                      HOOKPROC proc, BOOL ansi )
 {
     HHOOK handle = 0;
 
@@ -173,7 +173,7 @@ HHOOK WINAPI NtUserSetWindowsHookEx( HINSTANCE inst, UNICODE_STRING *module, DWO
 /***********************************************************************
  *	     NtUserUnhookWindowsHookEx   (win32u.@)
  */
-BOOL WINAPI NtUserUnhookWindowsHookEx( HHOOK handle )
+BOOL SYSCALL NtUserUnhookWindowsHookEx( HHOOK handle )
 {
     NTSTATUS status;
 
@@ -212,7 +212,7 @@ BOOL unhook_windows_hook( INT id, HOOKPROC proc )
 /***********************************************************************
  *           NtUserCallMsgFilter (win32u.@)
  */
-BOOL WINAPI NtUserCallMsgFilter( MSG *msg, INT code )
+BOOL SYSCALL NtUserCallMsgFilter( MSG *msg, INT code )
 {
     /* FIXME: We should use NtCallbackReturn instead of passing (potentially kernel) pointer
      * like that, but we need to consequently use syscall thunks first for that to work. */
@@ -374,7 +374,7 @@ static LRESULT call_hook( struct win_hook_params *info, const WCHAR *module )
 /***********************************************************************
  *	     NtUserCallNextHookEx (win32u.@)
  */
-LRESULT WINAPI NtUserCallNextHookEx( HHOOK hhook, INT code, WPARAM wparam, LPARAM lparam )
+LRESULT SYSCALL NtUserCallNextHookEx( HHOOK hhook, INT code, WPARAM wparam, LPARAM lparam )
 {
     struct user_thread_info *thread_info = get_user_thread_info();
     struct win_hook_params info;
@@ -497,9 +497,9 @@ LRESULT call_hooks( INT id, INT code, WPARAM wparam, LPARAM lparam, size_t lpara
 /***********************************************************************
  *           NtUserSetWinEventHook   (win32u.@)
  */
-HWINEVENTHOOK WINAPI NtUserSetWinEventHook( DWORD event_min, DWORD event_max, HMODULE inst,
-                                            UNICODE_STRING *module, WINEVENTPROC proc,
-                                            DWORD pid, DWORD tid, DWORD flags )
+HWINEVENTHOOK SYSCALL NtUserSetWinEventHook( DWORD event_min, DWORD event_max, HMODULE inst,
+                                             UNICODE_STRING *module, WINEVENTPROC proc,
+                                             DWORD pid, DWORD tid, DWORD flags )
 {
     HWINEVENTHOOK handle = 0;
 
@@ -549,7 +549,7 @@ HWINEVENTHOOK WINAPI NtUserSetWinEventHook( DWORD event_min, DWORD event_max, HM
 /***********************************************************************
  *           NtUserUnhookWinEvent   (win32u.@)
  */
-BOOL WINAPI NtUserUnhookWinEvent( HWINEVENTHOOK handle )
+BOOL SYSCALL NtUserUnhookWinEvent( HWINEVENTHOOK handle )
 {
     BOOL ret;
 
@@ -567,7 +567,7 @@ BOOL WINAPI NtUserUnhookWinEvent( HWINEVENTHOOK handle )
 /***********************************************************************
  *           NtUserNotifyWinEvent   (win32u.@)
  */
-void WINAPI NtUserNotifyWinEvent( DWORD event, HWND hwnd, LONG object_id, LONG child_id )
+void SYSCALL NtUserNotifyWinEvent( DWORD event, HWND hwnd, LONG object_id, LONG child_id )
 {
     struct user_thread_info *thread_info = get_user_thread_info();
     struct win_event_hook_params info;
diff --git a/dlls/win32u/imm.c b/dlls/win32u/imm.c
index 11111111111..11111111111 100644
--- a/dlls/win32u/imm.c
+++ b/dlls/win32u/imm.c
@@ -72,7 +72,7 @@ static void release_imc_ptr( struct imc *imc )
 /******************************************************************************
  *           NtUserCreateInputContext   (win32u.@)
  */
-HIMC WINAPI NtUserCreateInputContext( UINT_PTR client_ptr )
+HIMC SYSCALL NtUserCreateInputContext( UINT_PTR client_ptr )
 {
     struct imc *imc;
     HIMC handle;
@@ -93,7 +93,7 @@ HIMC WINAPI NtUserCreateInputContext( UINT_PTR client_ptr )
 /******************************************************************************
  *           NtUserDestroyInputContext   (win32u.@)
  */
-BOOL WINAPI NtUserDestroyInputContext( HIMC handle )
+BOOL SYSCALL NtUserDestroyInputContext( HIMC handle )
 {
     struct imc *imc;
 
@@ -112,7 +112,7 @@ BOOL WINAPI NtUserDestroyInputContext( HIMC handle )
 /******************************************************************************
  *           NtUserUpdateInputContext   (win32u.@)
  */
-BOOL WINAPI NtUserUpdateInputContext( HIMC handle, UINT attr, UINT_PTR value )
+BOOL SYSCALL NtUserUpdateInputContext( HIMC handle, UINT attr, UINT_PTR value )
 {
     struct imc *imc;
     BOOL ret = TRUE;
@@ -139,7 +139,7 @@ BOOL WINAPI NtUserUpdateInputContext( HIMC handle, UINT attr, UINT_PTR value )
 /******************************************************************************
  *           NtUserQueryInputContext   (win32u.@)
  */
-UINT_PTR WINAPI NtUserQueryInputContext( HIMC handle, UINT attr )
+UINT_PTR SYSCALL NtUserQueryInputContext( HIMC handle, UINT attr )
 {
     struct imc *imc;
     UINT_PTR ret;
@@ -168,7 +168,7 @@ UINT_PTR WINAPI NtUserQueryInputContext( HIMC handle, UINT attr )
 /******************************************************************************
  *           NtUserAssociateInputContext   (win32u.@)
  */
-UINT WINAPI NtUserAssociateInputContext( HWND hwnd, HIMC ctx, ULONG flags )
+UINT SYSCALL NtUserAssociateInputContext( HWND hwnd, HIMC ctx, ULONG flags )
 {
     WND *win;
     UINT ret = AICR_OK;
@@ -317,7 +317,7 @@ void unregister_imm_window( HWND hwnd )
 /***********************************************************************
  *           NtUserDisableThreadIme (win32u.@)
  */
-BOOL WINAPI NtUserDisableThreadIme( DWORD thread_id )
+BOOL SYSCALL NtUserDisableThreadIme( DWORD thread_id )
 {
     struct imm_thread_data *thread_data;
 
@@ -398,7 +398,7 @@ void cleanup_imm_thread(void)
 /*****************************************************************************
  *           NtUserBuildHimcList (win32u.@)
  */
-NTSTATUS WINAPI NtUserBuildHimcList( UINT thread_id, UINT count, HIMC *buffer, UINT *size )
+NTSTATUS SYSCALL NtUserBuildHimcList( UINT thread_id, UINT count, HIMC *buffer, UINT *size )
 {
     HANDLE handle = 0;
     struct imc *imc;
diff --git a/dlls/win32u/input.c b/dlls/win32u/input.c
index 11111111111..11111111111 100644
--- a/dlls/win32u/input.c
+++ b/dlls/win32u/input.c
@@ -538,7 +538,7 @@ static WCHAR kbd_tables_vkey_to_wchar( const KBDTABLES *tables, UINT vkey, const
 /*******************************************************************
  *           NtUserGetForegroundWindow  (win32u.@)
  */
-HWND WINAPI NtUserGetForegroundWindow(void)
+HWND SYSCALL NtUserGetForegroundWindow(void)
 {
     volatile struct input_shared_memory *shared = (void *)NtUserCallNoParam( NtUserGetForegroundSharedMemory );
     HWND ret = 0;
@@ -579,7 +579,7 @@ HWND get_focus(void)
 /**********************************************************************
  *	     NtUserAttachThreadInput    (win32u.@)
  */
-BOOL WINAPI NtUserAttachThreadInput( DWORD from, DWORD to, BOOL attach )
+BOOL SYSCALL NtUserAttachThreadInput( DWORD from, DWORD to, BOOL attach )
 {
     BOOL ret;
 
@@ -650,7 +650,7 @@ static void update_mouse_coords( INPUT *input )
 /***********************************************************************
  *           NtUserSendInput  (win32u.@)
  */
-UINT WINAPI NtUserSendInput( UINT count, INPUT *inputs, int size )
+UINT SYSCALL NtUserSendInput( UINT count, INPUT *inputs, int size )
 {
     UINT i;
     NTSTATUS status = STATUS_SUCCESS;
@@ -704,7 +704,7 @@ UINT WINAPI NtUserSendInput( UINT count, INPUT *inputs, int size )
 /***********************************************************************
  *	     NtUserSetCursorPos (win32u.@)
  */
-BOOL WINAPI NtUserSetCursorPos( INT x, INT y )
+BOOL SYSCALL NtUserSetCursorPos( INT x, INT y )
 {
     volatile struct desktop_shared_memory *shared = get_desktop_shared_memory();
     DWORD last_change;
@@ -781,7 +781,7 @@ BOOL get_cursor_pos( POINT *pt )
 /***********************************************************************
  *	     NtUserGetCursorInfo (win32u.@)
  */
-BOOL WINAPI NtUserGetCursorInfo( CURSORINFO *info )
+BOOL SYSCALL NtUserGetCursorInfo( CURSORINFO *info )
 {
     volatile struct input_shared_memory *shared = get_foreground_shared_memory();
     BOOL ret;
@@ -809,7 +809,7 @@ static void check_for_events( UINT flags )
 /**********************************************************************
  *           GetAsyncKeyState (win32u.@)
  */
-SHORT WINAPI NtUserGetAsyncKeyState( INT key )
+SHORT SYSCALL NtUserGetAsyncKeyState( INT key )
 {
     volatile struct desktop_shared_memory *shared = get_desktop_shared_memory();
     BYTE state;
@@ -830,7 +830,7 @@ SHORT WINAPI NtUserGetAsyncKeyState( INT key )
 /***********************************************************************
  *           NtUserGetQueueStatus (win32u.@)
  */
-DWORD WINAPI NtUserGetQueueStatus( UINT flags )
+DWORD SYSCALL NtUserGetQueueStatus( UINT flags )
 {
     DWORD ret;
 
@@ -913,7 +913,7 @@ static HKL get_locale_kbd_layout(void)
  * Device handle for keyboard layout defaulted to
  * the language id. This is the way Windows default works.
  */
-HKL WINAPI NtUserGetKeyboardLayout( DWORD thread_id )
+HKL SYSCALL NtUserGetKeyboardLayout( DWORD thread_id )
 {
     struct user_thread_info *thread = get_user_thread_info();
     HKL layout = thread->kbd_layout;
@@ -932,7 +932,7 @@ HKL WINAPI NtUserGetKeyboardLayout( DWORD thread_id )
  * keyboard-input message.  This function retrieves the state of the key
  * at the time the input message was generated.
  */
-SHORT WINAPI NtUserGetKeyState( INT vkey )
+SHORT SYSCALL NtUserGetKeyState( INT vkey )
 {
     volatile struct input_shared_memory *shared = get_input_shared_memory();
     volatile struct desktop_shared_memory *desktop_shared;
@@ -975,7 +975,7 @@ SHORT WINAPI NtUserGetKeyState( INT vkey )
 /**********************************************************************
  *	     NtUserGetKeyboardState    (win32u.@)
  */
-BOOL WINAPI NtUserGetKeyboardState( BYTE *state )
+BOOL SYSCALL NtUserGetKeyboardState( BYTE *state )
 {
     volatile struct input_shared_memory *shared = get_input_shared_memory();
     BOOL skip = TRUE;
@@ -1009,7 +1009,7 @@ BOOL WINAPI NtUserGetKeyboardState( BYTE *state )
 /**********************************************************************
  *	     NtUserSetKeyboardState    (win32u.@)
  */
-BOOL WINAPI NtUserSetKeyboardState( BYTE *state )
+BOOL SYSCALL NtUserSetKeyboardState( BYTE *state )
 {
     BOOL ret;
 
@@ -1025,7 +1025,7 @@ BOOL WINAPI NtUserSetKeyboardState( BYTE *state )
 /******************************************************************************
  *	     NtUserVkKeyScanEx    (win32u.@)
  */
-WORD WINAPI NtUserVkKeyScanEx( WCHAR chr, HKL layout )
+WORD SYSCALL NtUserVkKeyScanEx( WCHAR chr, HKL layout )
 {
     const KBDTABLES *kbd_tables = &kbdus_tables;
     SHORT ret;
@@ -1043,7 +1043,7 @@ WORD WINAPI NtUserVkKeyScanEx( WCHAR chr, HKL layout )
 /******************************************************************************
  *	     NtUserMapVirtualKeyEx    (win32u.@)
  */
-UINT WINAPI NtUserMapVirtualKeyEx( UINT code, UINT type, HKL layout )
+UINT SYSCALL NtUserMapVirtualKeyEx( UINT code, UINT type, HKL layout )
 {
     const KBDTABLES *kbd_tables = &kbdus_tables;
     BYTE vsc2vk[0x300], vk2char[0x100];
@@ -1121,7 +1121,7 @@ UINT WINAPI NtUserMapVirtualKeyEx( UINT code, UINT type, HKL layout )
 /****************************************************************************
  *	     NtUserGetKeyNameText    (win32u.@)
  */
-INT WINAPI NtUserGetKeyNameText( LONG lparam, WCHAR *buffer, INT size )
+INT SYSCALL NtUserGetKeyNameText( LONG lparam, WCHAR *buffer, INT size )
 {
     INT code = ((lparam >> 16) & 0x1ff), vkey, len;
     const KBDTABLES *kbd_tables = &kbdus_tables;
@@ -1173,8 +1173,8 @@ INT WINAPI NtUserGetKeyNameText( LONG lparam, WCHAR *buffer, INT size )
 /****************************************************************************
  *	     NtUserToUnicodeEx    (win32u.@)
  */
-INT WINAPI NtUserToUnicodeEx( UINT virt, UINT scan, const BYTE *state,
-                              WCHAR *str, int size, UINT flags, HKL layout )
+INT SYSCALL NtUserToUnicodeEx( UINT virt, UINT scan, const BYTE *state,
+                               WCHAR *str, int size, UINT flags, HKL layout )
 {
     const KBDTABLES *kbd_tables = &kbdus_tables;
     WCHAR buffer[2] = {0};
@@ -1202,7 +1202,7 @@ INT WINAPI NtUserToUnicodeEx( UINT virt, UINT scan, const BYTE *state,
 /**********************************************************************
  *	     NtUserActivateKeyboardLayout    (win32u.@)
  */
-HKL WINAPI NtUserActivateKeyboardLayout( HKL layout, UINT flags )
+HKL SYSCALL NtUserActivateKeyboardLayout( HKL layout, UINT flags )
 {
     struct user_thread_info *info = get_user_thread_info();
     HKL old_layout;
@@ -1268,7 +1268,7 @@ HKL WINAPI NtUserActivateKeyboardLayout( HKL layout, UINT flags )
  * Return number of values available if either input parm is
  *  0, per MS documentation.
  */
-UINT WINAPI NtUserGetKeyboardLayoutList( INT size, HKL *layouts )
+UINT SYSCALL NtUserGetKeyboardLayoutList( INT size, HKL *layouts )
 {
     DWORD count;
     HKL layout;
@@ -1292,7 +1292,7 @@ UINT WINAPI NtUserGetKeyboardLayoutList( INT size, HKL *layouts )
 /****************************************************************************
  *	     NtUserGetKeyboardLayoutName    (win32u.@)
  */
-BOOL WINAPI NtUserGetKeyboardLayoutName( WCHAR *name )
+BOOL SYSCALL NtUserGetKeyboardLayoutName( WCHAR *name )
 {
     struct user_thread_info *info = get_user_thread_info();
     char buffer[4096];
@@ -1358,7 +1358,7 @@ BOOL WINAPI NtUserGetKeyboardLayoutName( WCHAR *name )
 /***********************************************************************
  *	     NtUserRegisterHotKey (win32u.@)
  */
-BOOL WINAPI NtUserRegisterHotKey( HWND hwnd, INT id, UINT modifiers, UINT vk )
+BOOL SYSCALL NtUserRegisterHotKey( HWND hwnd, INT id, UINT modifiers, UINT vk )
 {
     BOOL ret;
     int replaced = 0;
@@ -1393,7 +1393,7 @@ BOOL WINAPI NtUserRegisterHotKey( HWND hwnd, INT id, UINT modifiers, UINT vk )
 /***********************************************************************
  *	     NtUserUnregisterHotKey    (win32u.@)
  */
-BOOL WINAPI NtUserUnregisterHotKey( HWND hwnd, INT id )
+BOOL SYSCALL NtUserUnregisterHotKey( HWND hwnd, INT id )
 {
     BOOL ret;
     UINT modifiers, vk;
@@ -1421,8 +1421,8 @@ BOOL WINAPI NtUserUnregisterHotKey( HWND hwnd, INT id )
 /***********************************************************************
  *           NtUserGetMouseMovePointsEx    (win32u.@)
  */
-int WINAPI NtUserGetMouseMovePointsEx( UINT size, MOUSEMOVEPOINT *ptin, MOUSEMOVEPOINT *ptout,
-                                       int count, DWORD resolution )
+int SYSCALL NtUserGetMouseMovePointsEx( UINT size, MOUSEMOVEPOINT *ptin, MOUSEMOVEPOINT *ptout,
+                                        int count, DWORD resolution )
 {
     cursor_pos_t *pos, positions[64];
     int copied;
@@ -1613,7 +1613,7 @@ void update_mouse_tracking_info( HWND hwnd )
 /***********************************************************************
  *           NtUserTrackMouseEvent    (win32u.@)
  */
-BOOL WINAPI NtUserTrackMouseEvent( TRACKMOUSEEVENT *info )
+BOOL SYSCALL NtUserTrackMouseEvent( TRACKMOUSEEVENT *info )
 {
     DWORD hover_time;
     int hittest;
@@ -1739,7 +1739,7 @@ BOOL set_capture_window( HWND hwnd, UINT gui_flags, HWND *prev_ret )
 /**********************************************************************
  *           NtUserSetCapture (win32u.@)
  */
-HWND WINAPI NtUserSetCapture( HWND hwnd )
+HWND SYSCALL NtUserSetCapture( HWND hwnd )
 {
     HWND previous = 0;
 
@@ -1993,7 +1993,7 @@ clear_flags:
 /**********************************************************************
  *           NtUserSetActiveWindow    (win32u.@)
  */
-HWND WINAPI NtUserSetActiveWindow( HWND hwnd )
+HWND SYSCALL NtUserSetActiveWindow( HWND hwnd )
 {
     HWND prev;
 
@@ -2022,7 +2022,7 @@ HWND WINAPI NtUserSetActiveWindow( HWND hwnd )
 /*****************************************************************
  *           NtUserSetFocus  (win32u.@)
  */
-HWND WINAPI NtUserSetFocus( HWND hwnd )
+HWND SYSCALL NtUserSetFocus( HWND hwnd )
 {
     HWND hwndTop = hwnd;
     HWND previous = get_focus();
@@ -2166,7 +2166,7 @@ static unsigned int get_caret_registry_timeout(void)
 /*****************************************************************
  *           NtUserCreateCaret  (win32u.@)
  */
-BOOL WINAPI NtUserCreateCaret( HWND hwnd, HBITMAP bitmap, int width, int height )
+BOOL SYSCALL NtUserCreateCaret( HWND hwnd, HBITMAP bitmap, int width, int height )
 {
     HBITMAP caret_bitmap = 0;
     int old_state = 0;
@@ -2301,7 +2301,7 @@ BOOL destroy_caret(void)
 /*****************************************************************
  *           NtUserGetCaretBlinkTime  (win32u.@)
  */
-UINT WINAPI NtUserGetCaretBlinkTime(void)
+UINT SYSCALL NtUserGetCaretBlinkTime(void)
 {
     return caret.timeout;
 }
@@ -2321,7 +2321,7 @@ BOOL set_caret_blink_time( unsigned int time )
 /*****************************************************************
  *           NtUserGetCaretPos  (win32u.@)
  */
-BOOL WINAPI NtUserGetCaretPos( POINT *pt )
+BOOL SYSCALL NtUserGetCaretPos( POINT *pt )
 {
     BOOL ret;
 
@@ -2393,7 +2393,7 @@ BOOL set_caret_pos( int x, int y )
 /*****************************************************************
  *           NtUserShowCaret  (win32u.@)
  */
-BOOL WINAPI NtUserShowCaret( HWND hwnd )
+BOOL SYSCALL NtUserShowCaret( HWND hwnd )
 {
     int hidden = 0;
     BOOL ret;
@@ -2431,7 +2431,7 @@ BOOL WINAPI NtUserShowCaret( HWND hwnd )
 /*****************************************************************
  *           NtUserHideCaret  (win32u.@)
  */
-BOOL WINAPI NtUserHideCaret( HWND hwnd )
+BOOL SYSCALL NtUserHideCaret( HWND hwnd )
 {
     int old_state = 0;
     int hidden = 0;
@@ -2500,7 +2500,7 @@ void toggle_caret( HWND hwnd )
 /**********************************************************************
  *       NtUserEnableMouseInPointer    (win32u.@)
  */
-BOOL WINAPI NtUserEnableMouseInPointer( BOOL enable )
+BOOL SYSCALL NtUserEnableMouseInPointer( BOOL enable )
 {
     FIXME( "enable %u stub!\n", enable );
     RtlSetLastWin32Error( ERROR_CALL_NOT_IMPLEMENTED );
@@ -2510,7 +2510,7 @@ BOOL WINAPI NtUserEnableMouseInPointer( BOOL enable )
 /**********************************************************************
  *       NtUserIsMouseInPointerEnabled    (win32u.@)
  */
-BOOL WINAPI NtUserIsMouseInPointerEnabled(void)
+BOOL SYSCALL NtUserIsMouseInPointerEnabled(void)
 {
     FIXME( "stub!\n" );
     RtlSetLastWin32Error( ERROR_CALL_NOT_IMPLEMENTED );
@@ -2520,8 +2520,8 @@ BOOL WINAPI NtUserIsMouseInPointerEnabled(void)
 /**********************************************************************
  *       NtUserGetPointerInfoList    (win32u.@)
  */
-BOOL WINAPI NtUserGetPointerInfoList( UINT32 id, POINTER_INPUT_TYPE type, UINT_PTR unk0, UINT_PTR unk1, SIZE_T size,
-                                      UINT32 *entry_count, UINT32 *pointer_count, void *pointer_info )
+BOOL SYSCALL NtUserGetPointerInfoList( UINT32 id, POINTER_INPUT_TYPE type, UINT_PTR unk0, UINT_PTR unk1, SIZE_T size,
+                                       UINT32 *entry_count, UINT32 *pointer_count, void *pointer_info )
 {
     FIXME( "id %#x, type %#x, unk0 %#zx, unk1 %#zx, size %#zx, entry_count %p, pointer_count %p, pointer_info %p stub!\n",
            id, (int)type, (size_t)unk0, (size_t)unk1, (size_t)size, entry_count, pointer_count, pointer_info );
@@ -2547,7 +2547,7 @@ HWND get_shell_window(void)
 /***********************************************************************
 *            NtUserSetShellWindowEx (win32u.@)
 */
-BOOL WINAPI NtUserSetShellWindowEx( HWND shell, HWND list_view )
+BOOL SYSCALL NtUserSetShellWindowEx( HWND shell, HWND list_view )
 {
     BOOL ret;
 
diff --git a/dlls/win32u/mapping.c b/dlls/win32u/mapping.c
index 11111111111..11111111111 100644
--- a/dlls/win32u/mapping.c
+++ b/dlls/win32u/mapping.c
@@ -205,8 +205,8 @@ BOOL dp_to_lp( DC *dc, POINT *points, INT count )
 /***********************************************************************
  *           NtGdiTransformPoints    (win32u.@)
  */
-BOOL WINAPI NtGdiTransformPoints( HDC hdc, const POINT *points_in, POINT *points_out,
-                                  INT count, UINT mode )
+BOOL SYSCALL NtGdiTransformPoints( HDC hdc, const POINT *points_in, POINT *points_out,
+                                   INT count, UINT mode )
 {
     DC *dc = get_dc_ptr( hdc );
     int i = 0;
@@ -429,8 +429,8 @@ BOOL WINAPI NtGdiModifyWorldTransform( HDC hdc, const XFORM *xform, DWORD mode )
  *    Calling with the last four params equal to zero sets the values
  *    back to their defaults obtained by calls to NtGdiGetDeviceCaps.
  */
-BOOL WINAPI NtGdiSetVirtualResolution( HDC hdc, DWORD horz_res, DWORD vert_res,
-                                       DWORD horz_size, DWORD vert_size )
+BOOL SYSCALL NtGdiSetVirtualResolution( HDC hdc, DWORD horz_res, DWORD vert_res,
+                                        DWORD horz_size, DWORD vert_size )
 {
     DC * dc;
     TRACE("(%p %d %d %d %d)\n", hdc, (int)horz_res, (int)vert_res, (int)horz_size, (int)vert_size);
diff --git a/dlls/win32u/menu.c b/dlls/win32u/menu.c
index 11111111111..11111111111 100644
--- a/dlls/win32u/menu.c
+++ b/dlls/win32u/menu.c
@@ -164,7 +164,7 @@ static UINT od_item_height; /* default owner drawn item height */
 /**********************************************************************
  *           NtUserCopyAcceleratorTable   (win32u.@)
  */
-INT WINAPI NtUserCopyAcceleratorTable( HACCEL src, ACCEL *dst, INT count )
+INT SYSCALL NtUserCopyAcceleratorTable( HACCEL src, ACCEL *dst, INT count )
 {
     struct accelerator *accel;
     int i;
@@ -193,7 +193,7 @@ INT WINAPI NtUserCopyAcceleratorTable( HACCEL src, ACCEL *dst, INT count )
 /*********************************************************************
  *           NtUserCreateAcceleratorTable   (win32u.@)
  */
-HACCEL WINAPI NtUserCreateAcceleratorTable( ACCEL *table, INT count )
+HACCEL SYSCALL NtUserCreateAcceleratorTable( ACCEL *table, INT count )
 {
     struct accelerator *accel;
     HACCEL handle;
@@ -216,7 +216,7 @@ HACCEL WINAPI NtUserCreateAcceleratorTable( ACCEL *table, INT count )
 /******************************************************************************
  *           NtUserDestroyAcceleratorTable   (win32u.@)
  */
-BOOL WINAPI NtUserDestroyAcceleratorTable( HACCEL handle )
+BOOL SYSCALL NtUserDestroyAcceleratorTable( HACCEL handle )
 {
     struct accelerator *accel;
 
@@ -614,7 +614,7 @@ HMENU create_menu( BOOL is_popup )
 /**********************************************************************
  *         NtUserDestroyMenu   (win32u.@)
  */
-BOOL WINAPI NtUserDestroyMenu( HMENU handle )
+BOOL SYSCALL NtUserDestroyMenu( HMENU handle )
 {
     struct menu *menu;
 
@@ -687,7 +687,7 @@ BOOL set_window_menu( HWND hwnd, HMENU handle )
 /**********************************************************************
  *           NtUserSetMenu    (win32u.@)
  */
-BOOL WINAPI NtUserSetMenu( HWND hwnd, HMENU menu )
+BOOL SYSCALL NtUserSetMenu( HWND hwnd, HMENU menu )
 {
     if (!set_window_menu( hwnd, menu ))
         return FALSE;
@@ -700,7 +700,7 @@ BOOL WINAPI NtUserSetMenu( HWND hwnd, HMENU menu )
 /*******************************************************************
  *           NtUserCheckMenuItem    (win32u.@)
  */
-DWORD WINAPI NtUserCheckMenuItem( HMENU handle, UINT id, UINT flags )
+DWORD SYSCALL NtUserCheckMenuItem( HMENU handle, UINT id, UINT flags )
 {
     struct menu_item *item;
     struct menu *menu;
@@ -721,7 +721,7 @@ DWORD WINAPI NtUserCheckMenuItem( HMENU handle, UINT id, UINT flags )
 /**********************************************************************
  *           NtUserEnableMenuItem    (win32u.@)
  */
-BOOL WINAPI NtUserEnableMenuItem( HMENU handle, UINT id, UINT flags )
+BOOL SYSCALL NtUserEnableMenuItem( HMENU handle, UINT id, UINT flags )
 {
     UINT oldflags, pos;
     struct menu *menu;
@@ -790,7 +790,7 @@ BOOL draw_menu_bar( HWND hwnd )
 /**********************************************************************
  *           NtUserGetMenuItemRect    (win32u.@)
  */
-BOOL WINAPI NtUserGetMenuItemRect( HWND hwnd, HMENU handle, UINT item, RECT *rect )
+BOOL SYSCALL NtUserGetMenuItemRect( HWND hwnd, HMENU handle, UINT item, RECT *rect )
 {
     struct menu *menu;
     UINT pos;
@@ -855,7 +855,7 @@ static BOOL set_menu_info( HMENU handle, const MENUINFO *info )
 /**********************************************************************
  *           NtUserThunkedMenuInfo    (win32u.@)
  */
-BOOL WINAPI NtUserThunkedMenuInfo( HMENU menu, const MENUINFO *info )
+BOOL SYSCALL NtUserThunkedMenuInfo( HMENU menu, const MENUINFO *info )
 {
     TRACE( "(%p %p)\n", menu, info );
 
@@ -1257,8 +1257,8 @@ static UINT get_menu_default_item( HMENU handle, UINT bypos, UINT flags )
 /**********************************************************************
  *           NtUserThunkedMenuItemInfo    (win32u.@)
  */
-UINT WINAPI NtUserThunkedMenuItemInfo( HMENU handle, UINT pos, UINT flags, UINT method,
-                                       MENUITEMINFOW *info, UNICODE_STRING *str )
+UINT SYSCALL NtUserThunkedMenuItemInfo( HMENU handle, UINT pos, UINT flags, UINT method,
+                                        MENUITEMINFOW *info, UNICODE_STRING *str )
 {
     struct menu *menu;
     UINT i;
@@ -1353,7 +1353,7 @@ INT get_menu_item_count( HMENU handle )
 /**********************************************************************
  *           NtUserRemoveMenu    (win32u.@)
  */
-BOOL WINAPI NtUserRemoveMenu( HMENU handle, UINT id, UINT flags )
+BOOL SYSCALL NtUserRemoveMenu( HMENU handle, UINT id, UINT flags )
 {
     struct menu *menu;
     UINT pos;
@@ -1396,7 +1396,7 @@ BOOL WINAPI NtUserRemoveMenu( HMENU handle, UINT id, UINT flags )
 /**********************************************************************
  *         NtUserDeleteMenu    (win32u.@)
  */
-BOOL WINAPI NtUserDeleteMenu( HMENU handle, UINT id, UINT flags )
+BOOL SYSCALL NtUserDeleteMenu( HMENU handle, UINT id, UINT flags )
 {
     struct menu *menu;
     UINT pos;
@@ -1415,7 +1415,7 @@ BOOL WINAPI NtUserDeleteMenu( HMENU handle, UINT id, UINT flags )
 /**********************************************************************
  *           NtUserSetMenuContextHelpId    (win32u.@)
  */
-BOOL WINAPI NtUserSetMenuContextHelpId( HMENU handle, DWORD id )
+BOOL SYSCALL NtUserSetMenuContextHelpId( HMENU handle, DWORD id )
 {
     struct menu *menu;
 
@@ -1553,7 +1553,7 @@ static HMENU get_sys_menu( HWND hwnd, HMENU popup_menu )
 /**********************************************************************
  *           NtUserMenuItemFromPoint    (win32u.@)
  */
-INT WINAPI NtUserMenuItemFromPoint( HWND hwnd, HMENU handle, int x, int y )
+INT SYSCALL NtUserMenuItemFromPoint( HWND hwnd, HMENU handle, int x, int y )
 {
     POINT pt = { .x = x, .y = y };
     struct menu *menu;
@@ -1568,7 +1568,7 @@ INT WINAPI NtUserMenuItemFromPoint( HWND hwnd, HMENU handle, int x, int y )
 /**********************************************************************
  *           NtUserGetSystemMenu    (win32u.@)
  */
-HMENU WINAPI NtUserGetSystemMenu( HWND hwnd, BOOL revert )
+HMENU SYSCALL NtUserGetSystemMenu( HWND hwnd, BOOL revert )
 {
     WND *win = get_win_ptr( hwnd );
     HMENU retvalue = 0;
@@ -1611,7 +1611,7 @@ HMENU WINAPI NtUserGetSystemMenu( HWND hwnd, BOOL revert )
 /**********************************************************************
  *           NtUserSetSystemMenu    (win32u.@)
  */
-BOOL WINAPI NtUserSetSystemMenu( HWND hwnd, HMENU menu )
+BOOL SYSCALL NtUserSetSystemMenu( HWND hwnd, HMENU menu )
 {
     WND *win = get_win_ptr( hwnd );
 
@@ -1637,7 +1637,7 @@ HMENU get_window_sys_sub_menu( HWND hwnd )
 /**********************************************************************
  *           NtUserSetMenuDefaultItem    (win32u.@)
  */
-BOOL WINAPI NtUserSetMenuDefaultItem( HMENU handle, UINT item, UINT bypos )
+BOOL SYSCALL NtUserSetMenuDefaultItem( HMENU handle, UINT item, UINT bypos )
 {
     struct menu_item *menu_item;
     struct menu *menu;
@@ -1851,7 +1851,7 @@ found:
 /**********************************************************************
  *           NtUserTranslateAccelerator     (win32u.@)
  */
-INT WINAPI NtUserTranslateAccelerator( HWND hwnd, HACCEL accel, MSG *msg )
+INT SYSCALL NtUserTranslateAccelerator( HWND hwnd, HACCEL accel, MSG *msg )
 {
     ACCEL data[32], *ptr = data;
     int i, count;
@@ -4483,8 +4483,8 @@ track_menu:
 /**********************************************************************
  *           NtUserTrackPopupMenuEx   (win32u.@)
  */
-BOOL WINAPI NtUserTrackPopupMenuEx( HMENU handle, UINT flags, INT x, INT y, HWND hwnd,
-                                    TPMPARAMS *params )
+BOOL SYSCALL NtUserTrackPopupMenuEx( HMENU handle, UINT flags, INT x, INT y, HWND hwnd,
+                                     TPMPARAMS *params )
 {
     struct menu *menu;
     BOOL ret = FALSE;
@@ -4540,7 +4540,7 @@ BOOL WINAPI NtUserTrackPopupMenuEx( HMENU handle, UINT flags, INT x, INT y, HWND
 /**********************************************************************
  *           NtUserHiliteMenuItem    (win32u.@)
  */
-BOOL WINAPI NtUserHiliteMenuItem( HWND hwnd, HMENU handle, UINT item, UINT hilite )
+BOOL SYSCALL NtUserHiliteMenuItem( HWND hwnd, HMENU handle, UINT item, UINT hilite )
 {
     HMENU handle_menu;
     UINT focused_item;
@@ -4566,7 +4566,7 @@ BOOL WINAPI NtUserHiliteMenuItem( HWND hwnd, HMENU handle, UINT item, UINT hilit
 /**********************************************************************
  *           NtUserGetMenuBarInfo    (win32u.@)
  */
-BOOL WINAPI NtUserGetMenuBarInfo( HWND hwnd, LONG id, LONG item, MENUBARINFO *info )
+BOOL SYSCALL NtUserGetMenuBarInfo( HWND hwnd, LONG id, LONG item, MENUBARINFO *info )
 {
     HMENU hmenu = NULL;
     struct menu *menu;
@@ -4658,7 +4658,7 @@ BOOL WINAPI NtUserGetMenuBarInfo( HWND hwnd, LONG id, LONG item, MENUBARINFO *in
 /***********************************************************************
  *           NtUserEndMenu   (win32u.@)
  */
-BOOL WINAPI NtUserEndMenu(void)
+BOOL SYSCALL NtUserEndMenu(void)
 {
     /* if we are in the menu code, and it is active, terminate the menu handling code */
     if (!exit_menu && top_popup)
diff --git a/dlls/win32u/message.c b/dlls/win32u/message.c
index 11111111111..11111111111 100644
--- a/dlls/win32u/message.c
+++ b/dlls/win32u/message.c
@@ -1295,7 +1295,7 @@ static LRESULT handle_internal_message( HWND hwnd, UINT msg, WPARAM wparam, LPAR
 /**********************************************************************
  *           NtUserGetGUIThreadInfo  (win32u.@)
  */
-BOOL WINAPI NtUserGetGUIThreadInfo( DWORD id, GUITHREADINFO *info )
+BOOL SYSCALL NtUserGetGUIThreadInfo( DWORD id, GUITHREADINFO *info )
 {
     volatile struct input_shared_memory *shared;
     BOOL ret;
@@ -2292,8 +2292,8 @@ DWORD CDECL __wine_msg_wait_objects( DWORD count, const HANDLE *handles,
 /***********************************************************************
  *           NtUserMsgWaitForMultipleObjectsEx   (win32u.@)
  */
-DWORD WINAPI NtUserMsgWaitForMultipleObjectsEx( DWORD count, const HANDLE *handles,
-                                                DWORD timeout, DWORD mask, DWORD flags )
+DWORD SYSCALL NtUserMsgWaitForMultipleObjectsEx( DWORD count, const HANDLE *handles,
+                                                 DWORD timeout, DWORD mask, DWORD flags )
 {
     LARGE_INTEGER time;
     return __wine_msg_wait_objects( count, handles, get_nt_timeout( &time, timeout ),
@@ -2303,7 +2303,7 @@ DWORD WINAPI NtUserMsgWaitForMultipleObjectsEx( DWORD count, const HANDLE *handl
 /***********************************************************************
  *           NtUserWaitForInputIdle (win32u.@)
  */
-DWORD WINAPI NtUserWaitForInputIdle( HANDLE process, DWORD timeout, BOOL wow )
+DWORD SYSCALL NtUserWaitForInputIdle( HANDLE process, DWORD timeout, BOOL wow )
 {
     DWORD start_time, elapsed, ret;
     HANDLE handles[2];
@@ -2355,7 +2355,7 @@ DWORD WINAPI NtUserWaitForInputIdle( HANDLE process, DWORD timeout, BOOL wow )
 /***********************************************************************
  *           NtUserWaitMessage (win32u.@)
  */
-BOOL WINAPI NtUserWaitMessage(void)
+BOOL SYSCALL NtUserWaitMessage(void)
 {
     return NtUserMsgWaitForMultipleObjectsEx( 0, NULL, INFINITE, QS_ALLINPUT, 0 ) != WAIT_FAILED;
 }
@@ -2363,7 +2363,7 @@ BOOL WINAPI NtUserWaitMessage(void)
 /***********************************************************************
  *           NtUserPeekMessage  (win32u.@)
  */
-BOOL WINAPI NtUserPeekMessage( MSG *msg_out, HWND hwnd, UINT first, UINT last, UINT flags )
+BOOL SYSCALL NtUserPeekMessage( MSG *msg_out, HWND hwnd, UINT first, UINT last, UINT flags )
 {
     static LARGE_INTEGER zero_timeout;
     struct user_thread_info *thread_info = get_user_thread_info();
@@ -2406,7 +2406,7 @@ BOOL WINAPI NtUserPeekMessage( MSG *msg_out, HWND hwnd, UINT first, UINT last, U
 /***********************************************************************
  *           NtUserGetMessage  (win32u.@)
  */
-BOOL WINAPI NtUserGetMessage( MSG *msg, HWND hwnd, UINT first, UINT last )
+BOOL SYSCALL NtUserGetMessage( MSG *msg, HWND hwnd, UINT first, UINT last )
 {
     HANDLE server_queue = get_server_queue_handle();
     unsigned int mask = QS_POSTMESSAGE | QS_SENDMESSAGE;  /* Always selected */
@@ -2797,7 +2797,7 @@ NTSTATUS send_hardware_message( HWND hwnd, const INPUT *input, const RAWINPUT *r
 /**********************************************************************
  *           NtUserDispatchMessage  (win32u.@)
  */
-LRESULT WINAPI NtUserDispatchMessage( const MSG *msg )
+LRESULT SYSCALL NtUserDispatchMessage( const MSG *msg )
 {
     struct win_proc_params params;
     LRESULT retval = 0;
@@ -3280,7 +3280,7 @@ static BOOL process_message( struct send_message_info *info, DWORD_PTR *res_ptr,
 /***********************************************************************
  *           NtUserSetTimer (win32u.@)
  */
-UINT_PTR WINAPI NtUserSetTimer( HWND hwnd, UINT_PTR id, UINT timeout, TIMERPROC proc, ULONG tolerance )
+UINT_PTR SYSCALL NtUserSetTimer( HWND hwnd, UINT_PTR id, UINT timeout, TIMERPROC proc, ULONG tolerance )
 {
     UINT_PTR ret;
     WNDPROC winproc = 0;
@@ -3312,7 +3312,7 @@ UINT_PTR WINAPI NtUserSetTimer( HWND hwnd, UINT_PTR id, UINT timeout, TIMERPROC
 /***********************************************************************
  *           NtUserSetSystemTimer (win32u.@)
  */
-UINT_PTR WINAPI NtUserSetSystemTimer( HWND hwnd, UINT_PTR id, UINT timeout )
+UINT_PTR SYSCALL NtUserSetSystemTimer( HWND hwnd, UINT_PTR id, UINT timeout )
 {
     UINT_PTR ret;
 
@@ -3342,7 +3342,7 @@ UINT_PTR WINAPI NtUserSetSystemTimer( HWND hwnd, UINT_PTR id, UINT timeout )
 /***********************************************************************
  *           NtUserKillTimer (win32u.@)
  */
-BOOL WINAPI NtUserKillTimer( HWND hwnd, UINT_PTR id )
+BOOL SYSCALL NtUserKillTimer( HWND hwnd, UINT_PTR id )
 {
     BOOL ret;
 
@@ -3496,7 +3496,7 @@ static BOOL send_message_callback( HWND hwnd, UINT msg, WPARAM wparam, LPARAM lp
 /***********************************************************************
  *           NtUserPostMessage  (win32u.@)
  */
-BOOL WINAPI NtUserPostMessage( HWND hwnd, UINT msg, WPARAM wparam, LPARAM lparam )
+BOOL SYSCALL NtUserPostMessage( HWND hwnd, UINT msg, WPARAM wparam, LPARAM lparam )
 {
     struct send_message_info info;
 
@@ -3531,7 +3531,7 @@ BOOL WINAPI NtUserPostMessage( HWND hwnd, UINT msg, WPARAM wparam, LPARAM lparam
 /**********************************************************************
  *           NtUserPostThreadMessage  (win32u.@)
  */
-BOOL WINAPI NtUserPostThreadMessage( DWORD thread, UINT msg, WPARAM wparam, LPARAM lparam )
+BOOL SYSCALL NtUserPostThreadMessage( DWORD thread, UINT msg, WPARAM wparam, LPARAM lparam )
 {
     struct send_message_info info;
 
@@ -3553,8 +3553,8 @@ BOOL WINAPI NtUserPostThreadMessage( DWORD thread, UINT msg, WPARAM wparam, LPAR
     return put_message_in_queue( &info, NULL );
 }
 
-LRESULT WINAPI NtUserMessageCall( HWND hwnd, UINT msg, WPARAM wparam, LPARAM lparam,
-                                  void *result_info, DWORD type, BOOL ansi )
+LRESULT SYSCALL NtUserMessageCall( HWND hwnd, UINT msg, WPARAM wparam, LPARAM lparam,
+                                   void *result_info, DWORD type, BOOL ansi )
 {
     switch (type)
     {
@@ -3632,7 +3632,7 @@ LRESULT WINAPI NtUserMessageCall( HWND hwnd, UINT msg, WPARAM wparam, LPARAM lpa
 /***********************************************************************
  *           NtUserTranslateMessage (win32u.@)
  */
-BOOL WINAPI NtUserTranslateMessage( const MSG *msg, UINT flags )
+BOOL SYSCALL NtUserTranslateMessage( const MSG *msg, UINT flags )
 {
     UINT message;
     WCHAR wp[8];
diff --git a/dlls/win32u/painting.c b/dlls/win32u/painting.c
index 11111111111..11111111111 100644
--- a/dlls/win32u/painting.c
+++ b/dlls/win32u/painting.c
@@ -458,7 +458,7 @@ COLORREF WINAPI NtGdiGetPixel( HDC hdc, INT x, INT y )
  *
  * Probably not the correct semantics, it's supposed to be an internal backend for SetPixelFormat.
  */
-BOOL WINAPI NtGdiSetPixelFormat( HDC hdc, INT format )
+BOOL SYSCALL NtGdiSetPixelFormat( HDC hdc, INT format )
 {
     DC *dc;
     BOOL ret = TRUE;
@@ -475,7 +475,7 @@ BOOL WINAPI NtGdiSetPixelFormat( HDC hdc, INT format )
 /******************************************************************************
  *           NtGdiDescribePixelFormat  (win32u.@)
  */
-INT WINAPI NtGdiDescribePixelFormat( HDC hdc, INT format, UINT size, PIXELFORMATDESCRIPTOR *descr )
+INT SYSCALL NtGdiDescribePixelFormat( HDC hdc, INT format, UINT size, PIXELFORMATDESCRIPTOR *descr )
 {
     FIXME( "(%p,%d,%d,%p): stub\n", hdc, format, size, descr );
     return 0;
@@ -485,7 +485,7 @@ INT WINAPI NtGdiDescribePixelFormat( HDC hdc, INT format, UINT size, PIXELFORMAT
 /******************************************************************************
  *           NtGdiSwapBuffers  (win32u.@)
  */
-BOOL WINAPI NtGdiSwapBuffers( HDC hdc )
+BOOL SYSCALL NtGdiSwapBuffers( HDC hdc )
 {
     FIXME( "(%p): stub\n", hdc );
     return FALSE;
@@ -908,7 +908,7 @@ BOOL WINAPI NtGdiGradientFill( HDC hdc, TRIVERTEX *vert_array, ULONG nvert,
 /******************************************************************************
  *           NtGdiDrawStream   (win32u.@)
  */
-BOOL WINAPI NtGdiDrawStream( HDC hdc, ULONG in, void *pvin )
+BOOL SYSCALL NtGdiDrawStream( HDC hdc, ULONG in, void *pvin )
 {
     FIXME("stub: %p, %d, %p\n", hdc, (int)in, pvin);
     return FALSE;
diff --git a/dlls/win32u/palette.c b/dlls/win32u/palette.c
index 11111111111..11111111111 100644
--- a/dlls/win32u/palette.c
+++ b/dlls/win32u/palette.c
@@ -93,7 +93,7 @@ HPALETTE PALETTE_Init(void)
  *
  * Creates a logical color palette.
  */
-HPALETTE WINAPI NtGdiCreatePaletteInternal( const LOGPALETTE *palette, UINT count )
+HPALETTE SYSCALL NtGdiCreatePaletteInternal( const LOGPALETTE *palette, UINT count )
 {
     PALETTEOBJ * palettePtr;
     HPALETTE hpalette;
@@ -137,7 +137,7 @@ HPALETTE WINAPI NtGdiCreatePaletteInternal( const LOGPALETTE *palette, UINT coun
  *        of greater that 256 color. On a 256 color device the halftone
  *        palette will be different and this function will be incorrect
  */
-HPALETTE WINAPI NtGdiCreateHalftonePalette( HDC hdc )
+HPALETTE SYSCALL NtGdiCreateHalftonePalette( HDC hdc )
 {
     const RGBQUAD *entries = get_default_color_table( 8 );
     char buffer[FIELD_OFFSET( LOGPALETTE, palPalEntry[256] )];
@@ -320,7 +320,7 @@ UINT WINAPI NtGdiSetSystemPaletteUse( HDC hdc, UINT use )
  *
  * Gets state of system palette.
  */
-UINT WINAPI NtGdiGetSystemPaletteUse( HDC hdc )
+UINT SYSCALL NtGdiGetSystemPaletteUse( HDC hdc )
 {
     return SystemPaletteUse;
 }
@@ -361,7 +361,7 @@ UINT CDECL nulldrv_GetSystemPaletteEntries( PHYSDEV dev, UINT start, UINT count,
  *    Success: Index of entry in logical palette
  *    Failure: CLR_INVALID
  */
-UINT WINAPI NtGdiGetNearestPaletteIndex( HPALETTE hpalette, COLORREF color )
+UINT SYSCALL NtGdiGetNearestPaletteIndex( HPALETTE hpalette, COLORREF color )
 {
     PALETTEOBJ* palObj = GDI_GetObjPtr( hpalette, NTGDI_OBJ_PAL );
     UINT index  = 0;
@@ -614,7 +614,7 @@ BOOL WINAPI NtGdiUpdateColors( HDC hDC )
 /*********************************************************************
  *           NtGdiSetMagicColors   (win32u.@)
  */
-BOOL WINAPI NtGdiSetMagicColors( HDC hdc, DWORD magic, ULONG index )
+BOOL SYSCALL NtGdiSetMagicColors( HDC hdc, DWORD magic, ULONG index )
 {
     FIXME( "(%p 0x%08x 0x%08x): stub\n", hdc, (int)magic, (int)index );
     return TRUE;
diff --git a/dlls/win32u/path.c b/dlls/win32u/path.c
index 11111111111..11111111111 100644
--- a/dlls/win32u/path.c
+++ b/dlls/win32u/path.c
@@ -629,7 +629,7 @@ BOOL WINAPI NtGdiCloseFigure( HDC hdc )
 /***********************************************************************
  *           NtGdiGetPath    (win32u.@)
  */
-INT WINAPI NtGdiGetPath( HDC hdc, POINT *points, BYTE *types, INT size )
+INT SYSCALL NtGdiGetPath( HDC hdc, POINT *points, BYTE *types, INT size )
 {
     INT ret = -1;
     DC *dc = get_dc_ptr( hdc );
@@ -669,7 +669,7 @@ INT WINAPI NtGdiGetPath( HDC hdc, POINT *points, BYTE *types, INT size )
 /***********************************************************************
  *           NtGdiPathToRegion    (win32u.@)
  */
-HRGN WINAPI NtGdiPathToRegion( HDC hdc )
+HRGN SYSCALL NtGdiPathToRegion( HDC hdc )
 {
     HRGN ret = 0;
     DC *dc = get_dc_ptr( hdc );
@@ -1590,7 +1590,7 @@ static BOOL CDECL pathdrv_CloseFigure( PHYSDEV dev )
 /*******************************************************************
  *           NtGdiFlattenPath   (win32u.@)
  */
-BOOL WINAPI NtGdiFlattenPath( HDC hdc )
+BOOL SYSCALL NtGdiFlattenPath( HDC hdc )
 {
     struct gdi_path *path;
     BOOL ret = FALSE;
diff --git a/dlls/win32u/pen.c b/dlls/win32u/pen.c
index 11111111111..11111111111 100644
--- a/dlls/win32u/pen.c
+++ b/dlls/win32u/pen.c
@@ -93,7 +93,7 @@ HPEN create_pen( INT style, INT width, COLORREF color )
 /***********************************************************************
  *           NtGdiCreatePen    (win32u.@)
  */
-HPEN WINAPI NtGdiCreatePen( INT style, INT width, COLORREF color, HBRUSH brush )
+HPEN SYSCALL NtGdiCreatePen( INT style, INT width, COLORREF color, HBRUSH brush )
 {
     if (brush) FIXME( "brush not supported\n" );
     if (style == PS_NULL) return GetStockObject( NULL_PEN );
@@ -103,10 +103,10 @@ HPEN WINAPI NtGdiCreatePen( INT style, INT width, COLORREF color, HBRUSH brush )
 /***********************************************************************
  *           NtGdiExtCreatePen    (win32u.@)
  */
-HPEN WINAPI NtGdiExtCreatePen( DWORD style, DWORD width, ULONG brush_style, ULONG color,
-                               ULONG_PTR client_hatch, ULONG_PTR hatch, DWORD style_count,
-                               const DWORD *style_bits, ULONG dib_size, BOOL old_style,
-                               HBRUSH brush )
+HPEN SYSCALL NtGdiExtCreatePen( DWORD style, DWORD width, ULONG brush_style, ULONG color,
+                                ULONG_PTR client_hatch, ULONG_PTR hatch, DWORD style_count,
+                                const DWORD *style_bits, ULONG dib_size, BOOL old_style,
+                                HBRUSH brush )
 {
     PENOBJ *penPtr = NULL;
     HPEN hpen;
diff --git a/dlls/win32u/printdrv.c b/dlls/win32u/printdrv.c
index 11111111111..11111111111 100644
--- a/dlls/win32u/printdrv.c
+++ b/dlls/win32u/printdrv.c
@@ -41,7 +41,7 @@ WINE_DEFAULT_DEBUG_CHANNEL(print);
 /******************************************************************
  *           NtGdiGetSpoolMessage    (win32u.@)
  */
-DWORD WINAPI NtGdiGetSpoolMessage( void *ptr1, DWORD data2, void *ptr3, DWORD data4 )
+DWORD SYSCALL NtGdiGetSpoolMessage( void *ptr1, DWORD data2, void *ptr3, DWORD data4 )
 {
     LARGE_INTEGER time;
 
@@ -57,7 +57,7 @@ DWORD WINAPI NtGdiGetSpoolMessage( void *ptr1, DWORD data2, void *ptr3, DWORD da
 /******************************************************************
  *           NtGdiInitSpool    (win32u.@)
  */
-DWORD WINAPI NtGdiInitSpool(void)
+DWORD SYSCALL NtGdiInitSpool(void)
 {
     FIXME("stub\n");
     return TRUE;
diff --git a/dlls/win32u/rawinput.c b/dlls/win32u/rawinput.c
index 11111111111..11111111111 100644
--- a/dlls/win32u/rawinput.c
+++ b/dlls/win32u/rawinput.c
@@ -488,7 +488,7 @@ BOOL rawinput_device_get_usages( HANDLE handle, USAGE *usage_page, USAGE *usage,
 /**********************************************************************
  *         NtUserGetRawInputDeviceList   (win32u.@)
  */
-UINT WINAPI NtUserGetRawInputDeviceList( RAWINPUTDEVICELIST *device_list, UINT *device_count, UINT size )
+UINT SYSCALL NtUserGetRawInputDeviceList( RAWINPUTDEVICELIST *device_list, UINT *device_count, UINT size )
 {
     unsigned int count = 0, ticks = NtGetTickCount();
     static unsigned int last_check;
@@ -545,7 +545,7 @@ UINT WINAPI NtUserGetRawInputDeviceList( RAWINPUTDEVICELIST *device_list, UINT *
 /**********************************************************************
  *         NtUserGetRawInputDeviceInfo   (win32u.@)
  */
-UINT WINAPI NtUserGetRawInputDeviceInfo( HANDLE handle, UINT command, void *data, UINT *data_size )
+UINT SYSCALL NtUserGetRawInputDeviceInfo( HANDLE handle, UINT command, void *data, UINT *data_size )
 {
     const struct hid_preparsed_data *preparsed;
     struct device *device;
@@ -620,7 +620,7 @@ UINT WINAPI NtUserGetRawInputDeviceInfo( HANDLE handle, UINT command, void *data
 /**********************************************************************
  *         NtUserGetRawInputBuffer   (win32u.@)
  */
-UINT WINAPI NtUserGetRawInputBuffer( RAWINPUT *data, UINT *data_size, UINT header_size )
+UINT SYSCALL NtUserGetRawInputBuffer( RAWINPUT *data, UINT *data_size, UINT header_size )
 {
     unsigned int count = 0, remaining, rawinput_size, next_size, overhead;
     struct rawinput_thread_data *thread_data;
@@ -726,7 +726,7 @@ UINT WINAPI NtUserGetRawInputBuffer( RAWINPUT *data, UINT *data_size, UINT heade
 /**********************************************************************
  *         NtUserGetRawInputData   (win32u.@)
  */
-UINT WINAPI NtUserGetRawInputData( HRAWINPUT rawinput, UINT command, void *data, UINT *data_size, UINT header_size )
+UINT SYSCALL NtUserGetRawInputData( HRAWINPUT rawinput, UINT command, void *data, UINT *data_size, UINT header_size )
 {
     struct rawinput_thread_data *thread_data;
     UINT size;
@@ -841,7 +841,7 @@ static void register_rawinput_device( const RAWINPUTDEVICE *device )
 /**********************************************************************
  *         NtUserRegisterRawInputDevices   (win32u.@)
  */
-BOOL WINAPI NtUserRegisterRawInputDevices( const RAWINPUTDEVICE *devices, UINT device_count, UINT device_size )
+BOOL SYSCALL NtUserRegisterRawInputDevices( const RAWINPUTDEVICE *devices, UINT device_count, UINT device_size )
 {
     struct rawinput_device *server_devices;
     RAWINPUTDEVICE *new_registered_devices;
@@ -930,7 +930,7 @@ BOOL WINAPI NtUserRegisterRawInputDevices( const RAWINPUTDEVICE *devices, UINT d
 /**********************************************************************
  *         NtUserGetRegisteredRawInputDevices   (win32u.@)
  */
-UINT WINAPI NtUserGetRegisteredRawInputDevices( RAWINPUTDEVICE *devices, UINT *device_count, UINT device_size )
+UINT SYSCALL NtUserGetRegisteredRawInputDevices( RAWINPUTDEVICE *devices, UINT *device_count, UINT device_size )
 {
     SIZE_T size, capacity;
 
diff --git a/dlls/win32u/region.c b/dlls/win32u/region.c
index 11111111111..11111111111 100644
--- a/dlls/win32u/region.c
+++ b/dlls/win32u/region.c
@@ -538,7 +538,7 @@ static BOOL REGION_OffsetRegion( WINEREGION *rgn, WINEREGION *srcrgn, INT x, INT
  *                     one rectangle.
  *   Failure: ERROR
  */
-INT WINAPI NtGdiOffsetRgn( HRGN hrgn, INT x, INT y )
+INT SYSCALL NtGdiOffsetRgn( HRGN hrgn, INT x, INT y )
 {
     WINEREGION *obj = GDI_GetObjPtr( hrgn, NTGDI_OBJ_REGION );
     INT ret;
@@ -573,7 +573,7 @@ INT WINAPI NtGdiOffsetRgn( HRGN hrgn, INT x, INT y )
  *     COMPLEXREGION - The new region can only be represented by more than
  *                     one rectangle.
  */
-INT WINAPI NtGdiGetRgnBox( HRGN hrgn, RECT *rect )
+INT SYSCALL NtGdiGetRgnBox( HRGN hrgn, RECT *rect )
 {
     WINEREGION *obj = GDI_GetObjPtr( hrgn, NTGDI_OBJ_REGION );
     if (obj)
@@ -607,7 +607,7 @@ INT WINAPI NtGdiGetRgnBox( HRGN hrgn, RECT *rect )
  *   Success: Handle to region.
  *   Failure: NULL.
  */
-HRGN WINAPI NtGdiCreateRectRgn( INT left, INT top, INT right, INT bottom )
+HRGN SYSCALL NtGdiCreateRectRgn( INT left, INT top, INT right, INT bottom )
 {
     HRGN hrgn;
     WINEREGION *obj;
@@ -644,7 +644,7 @@ HRGN WINAPI NtGdiCreateRectRgn( INT left, INT top, INT right, INT bottom )
  * NOTES
  *   Allows either or both left and top to be greater than right or bottom.
  */
-BOOL WINAPI NtGdiSetRectRgn( HRGN hrgn, INT left, INT top, INT right, INT bottom )
+BOOL SYSCALL NtGdiSetRectRgn( HRGN hrgn, INT left, INT top, INT right, INT bottom )
 {
     WINEREGION *obj;
 
@@ -692,8 +692,8 @@ BOOL WINAPI NtGdiSetRectRgn( HRGN hrgn, INT left, INT top, INT right, INT bottom
  *   If ellipse_width or ellipse_height is less than 2 logical units then
  *   it is treated as though CreateRectRgn() was called instead.
  */
-HRGN WINAPI NtGdiCreateRoundRectRgn( INT left, INT top, INT right, INT bottom,
-                                     INT ellipse_width, INT ellipse_height )
+HRGN SYSCALL NtGdiCreateRoundRectRgn( INT left, INT top, INT right, INT bottom,
+                                      INT ellipse_width, INT ellipse_height )
 {
     WINEREGION *obj;
     HRGN hrgn = 0;
@@ -800,7 +800,7 @@ HRGN WINAPI NtGdiCreateRoundRectRgn( INT left, INT top, INT right, INT bottom,
  *   ellipse at each corner is equal to the width the rectangle and
  *   the same for the height.
  */
-HRGN WINAPI NtGdiCreateEllipticRgn( INT left, INT top, INT right, INT bottom )
+HRGN SYSCALL NtGdiCreateEllipticRgn( INT left, INT top, INT right, INT bottom )
 {
     return NtGdiCreateRoundRectRgn( left, top, right, bottom,
                                     right - left, bottom - top );
@@ -829,7 +829,7 @@ HRGN WINAPI NtGdiCreateEllipticRgn( INT left, INT top, INT right, INT bottom )
  *   is the array of RECT's that specify the region. The length of the array
  *   is specified by the nCount member of the region data header.
  */
-DWORD WINAPI NtGdiGetRegionData( HRGN hrgn, DWORD count, RGNDATA *rgndata )
+DWORD SYSCALL NtGdiGetRegionData( HRGN hrgn, DWORD count, RGNDATA *rgndata )
 {
     DWORD size;
     WINEREGION *obj = GDI_GetObjPtr( hrgn, NTGDI_OBJ_REGION );
@@ -894,7 +894,7 @@ static void translate( POINT *pt, UINT count, const XFORM *xform )
  * NOTES
  *   See GetRegionData().
  */
-HRGN WINAPI NtGdiExtCreateRegion( const XFORM *xform, DWORD count, const RGNDATA *rgndata )
+HRGN SYSCALL NtGdiExtCreateRegion( const XFORM *xform, DWORD count, const RGNDATA *rgndata )
 {
     HRGN hrgn = 0;
     WINEREGION *obj;
@@ -970,7 +970,7 @@ done:
  * RETURNS
  *   Non-zero if the point is inside the region or zero otherwise.
  */
-BOOL WINAPI NtGdiPtInRegion( HRGN hrgn, INT x, INT y )
+BOOL SYSCALL NtGdiPtInRegion( HRGN hrgn, INT x, INT y )
 {
     WINEREGION *obj;
     BOOL ret = FALSE;
@@ -998,7 +998,7 @@ BOOL WINAPI NtGdiPtInRegion( HRGN hrgn, INT x, INT y )
  *   Non-zero if the rectangle is partially inside the region or
  *   zero otherwise.
  */
-BOOL WINAPI NtGdiRectInRegion( HRGN hrgn, const RECT *rect )
+BOOL SYSCALL NtGdiRectInRegion( HRGN hrgn, const RECT *rect )
 {
     WINEREGION *obj;
     BOOL ret = FALSE;
@@ -1048,7 +1048,7 @@ BOOL WINAPI NtGdiRectInRegion( HRGN hrgn, const RECT *rect )
  * RETURNS
  *   Non-zero if both regions are identical or zero otherwise.
  */
-BOOL WINAPI NtGdiEqualRgn( HRGN hrgn1, HRGN hrgn2 )
+BOOL SYSCALL NtGdiEqualRgn( HRGN hrgn1, HRGN hrgn2 )
 {
     WINEREGION *obj1, *obj2;
     BOOL ret = FALSE;
@@ -1180,7 +1180,7 @@ done:
  *|  RGN_XOR - Unions of the regions minus any intersection.
  *|  RGN_DIFF - Difference (subtraction) of the regions.
  */
-INT WINAPI NtGdiCombineRgn( HRGN hDest, HRGN hSrc1, HRGN hSrc2, INT mode )
+INT SYSCALL NtGdiCombineRgn( HRGN hDest, HRGN hSrc1, HRGN hSrc2, INT mode )
 {
     WINEREGION *destObj = GDI_GetObjPtr( hDest, NTGDI_OBJ_REGION );
     INT result = ERROR;
diff --git a/dlls/win32u/scroll.c b/dlls/win32u/scroll.c
index 11111111111..11111111111 100644
--- a/dlls/win32u/scroll.c
+++ b/dlls/win32u/scroll.c
@@ -1448,7 +1448,7 @@ void set_standard_scroll_painted( HWND hwnd, int bar, BOOL painted )
 /*************************************************************************
  *           NtUserShowScrollBar   (win32u.@)
  */
-BOOL WINAPI NtUserShowScrollBar( HWND hwnd, INT bar, BOOL show )
+BOOL SYSCALL NtUserShowScrollBar( HWND hwnd, INT bar, BOOL show )
 {
     if (!hwnd) return FALSE;
 
@@ -1459,7 +1459,7 @@ BOOL WINAPI NtUserShowScrollBar( HWND hwnd, INT bar, BOOL show )
 /*************************************************************************
  *           NtUserGetScrollBarInfo   (win32u.@)
  */
-BOOL WINAPI NtUserGetScrollBarInfo( HWND hwnd, LONG id, SCROLLBARINFO *info )
+BOOL SYSCALL NtUserGetScrollBarInfo( HWND hwnd, LONG id, SCROLLBARINFO *info )
 {
     TRACE( "hwnd=%p id=%d info=%p\n", hwnd, (int)id, info );
 
@@ -1472,7 +1472,7 @@ BOOL WINAPI NtUserGetScrollBarInfo( HWND hwnd, LONG id, SCROLLBARINFO *info )
 /*************************************************************************
  *           NtUserEnableScrollBar   (win32u.@)
  */
-BOOL WINAPI NtUserEnableScrollBar( HWND hwnd, UINT bar, UINT flags )
+BOOL SYSCALL NtUserEnableScrollBar( HWND hwnd, UINT bar, UINT flags )
 {
     struct scroll_info *scroll;
     BOOL check_flags;
@@ -1508,7 +1508,7 @@ BOOL WINAPI NtUserEnableScrollBar( HWND hwnd, UINT bar, UINT flags )
 /*************************************************************************
  *           NtUserSetScrollInfo   (win32u.@)
  */
-INT WINAPI NtUserSetScrollInfo( HWND hwnd, int bar, const SCROLLINFO *info, BOOL redraw )
+INT SYSCALL NtUserSetScrollInfo( HWND hwnd, int bar, const SCROLLINFO *info, BOOL redraw )
 {
     TRACE( "hwnd=%p bar=%d info=%p, redraw=%d\n", hwnd, bar, info, redraw );
 
diff --git a/dlls/win32u/sysparams.c b/dlls/win32u/sysparams.c
index 11111111111..11111111111 100644
--- a/dlls/win32u/sysparams.c
+++ b/dlls/win32u/sysparams.c
@@ -2193,8 +2193,8 @@ RECT get_primary_monitor_rect( UINT dpi )
 /**********************************************************************
  *           NtUserGetDisplayConfigBufferSizes    (win32u.@)
  */
-LONG WINAPI NtUserGetDisplayConfigBufferSizes( UINT32 flags, UINT32 *num_path_info,
-                                               UINT32 *num_mode_info )
+LONG SYSCALL NtUserGetDisplayConfigBufferSizes( UINT32 flags, UINT32 *num_path_info,
+                                                UINT32 *num_mode_info )
 {
     volatile struct global_shared_memory *global_shared;
     struct monitor *monitor;
@@ -2304,8 +2304,8 @@ static struct adapter *find_adapter( UNICODE_STRING *name )
 /***********************************************************************
  *	     NtUserEnumDisplayDevices    (win32u.@)
  */
-NTSTATUS WINAPI NtUserEnumDisplayDevices( UNICODE_STRING *device, DWORD index,
-                                          DISPLAY_DEVICEW *info, DWORD flags )
+NTSTATUS SYSCALL NtUserEnumDisplayDevices( UNICODE_STRING *device, DWORD index,
+                                           DISPLAY_DEVICEW *info, DWORD flags )
 {
     struct display_device *found = NULL;
 
@@ -2792,8 +2792,8 @@ static LONG apply_display_settings( const WCHAR *devname, const DEVMODEW *devmod
 /***********************************************************************
  *	     NtUserChangeDisplaySettings    (win32u.@)
  */
-LONG WINAPI NtUserChangeDisplaySettings( UNICODE_STRING *devname, DEVMODEW *devmode, HWND hwnd,
-                                         DWORD flags, void *lparam )
+LONG SYSCALL NtUserChangeDisplaySettings( UNICODE_STRING *devname, DEVMODEW *devmode, HWND hwnd,
+                                          DWORD flags, void *lparam )
 {
     DEVMODEW full_mode = {.dmSize = sizeof(DEVMODEW)};
     int ret = DISP_CHANGE_SUCCESSFUL;
@@ -2852,7 +2852,7 @@ static BOOL adapter_enum_display_settings( const struct adapter *adapter, UINT i
 /***********************************************************************
  *	     NtUserEnumDisplaySettings    (win32u.@)
  */
-BOOL WINAPI NtUserEnumDisplaySettings( UNICODE_STRING *device, DWORD index, DEVMODEW *devmode, DWORD flags )
+BOOL SYSCALL NtUserEnumDisplaySettings( UNICODE_STRING *device, DWORD index, DEVMODEW *devmode, DWORD flags )
 {
     static const WCHAR wine_display_driverW[] = {'W','i','n','e',' ','D','i','s','p','l','a','y',' ','D','r','i','v','e','r',0};
     struct adapter *adapter;
@@ -2937,7 +2937,7 @@ INT get_display_depth( UNICODE_STRING *name )
 /***********************************************************************
  *	     NtUserEnumDisplayMonitors    (win32u.@)
  */
-BOOL WINAPI NtUserEnumDisplayMonitors( HDC hdc, RECT *rect, MONITORENUMPROC proc, LPARAM lparam )
+BOOL SYSCALL NtUserEnumDisplayMonitors( HDC hdc, RECT *rect, MONITORENUMPROC proc, LPARAM lparam )
 {
     struct monitor_enum_info enum_buf[8], *enum_info = enum_buf;
     struct enum_display_monitor_params params;
@@ -3155,7 +3155,7 @@ HMONITOR monitor_from_window( HWND hwnd, UINT flags, UINT dpi )
 /***********************************************************************
  *	     NtUserGetSystemDpiForProcess    (win32u.@)
  */
-ULONG WINAPI NtUserGetSystemDpiForProcess( HANDLE process )
+ULONG SYSCALL NtUserGetSystemDpiForProcess( HANDLE process )
 {
     if (process && process != GetCurrentProcess())
     {
@@ -3169,7 +3169,7 @@ ULONG WINAPI NtUserGetSystemDpiForProcess( HANDLE process )
 /***********************************************************************
  *           NtUserGetDpiForMonitor   (win32u.@)
  */
-BOOL WINAPI NtUserGetDpiForMonitor( HMONITOR monitor, UINT type, UINT *x, UINT *y )
+BOOL SYSCALL NtUserGetDpiForMonitor( HMONITOR monitor, UINT type, UINT *x, UINT *y )
 {
     if (type > 2)
     {
@@ -3193,7 +3193,7 @@ BOOL WINAPI NtUserGetDpiForMonitor( HMONITOR monitor, UINT type, UINT *x, UINT *
 /**********************************************************************
  *           LogicalToPhysicalPointForPerMonitorDPI   (win32u.@)
  */
-BOOL WINAPI NtUserLogicalToPerMonitorDPIPhysicalPoint( HWND hwnd, POINT *pt )
+BOOL SYSCALL NtUserLogicalToPerMonitorDPIPhysicalPoint( HWND hwnd, POINT *pt )
 {
     RECT rect;
 
@@ -3206,7 +3206,7 @@ BOOL WINAPI NtUserLogicalToPerMonitorDPIPhysicalPoint( HWND hwnd, POINT *pt )
 /**********************************************************************
  *           NtUserPerMonitorDPIPhysicalToLogicalPoint   (win32u.@)
  */
-BOOL WINAPI NtUserPerMonitorDPIPhysicalToLogicalPoint( HWND hwnd, POINT *pt )
+BOOL SYSCALL NtUserPerMonitorDPIPhysicalToLogicalPoint( HWND hwnd, POINT *pt )
 {
     RECT rect;
     BOOL ret = FALSE;
@@ -4265,7 +4265,7 @@ static BOOL update_desktop_wallpaper(void)
 /***********************************************************************
  *	     NtUserSystemParametersInfoForDpi   (win32u.@)
  */
-BOOL WINAPI NtUserSystemParametersInfoForDpi( UINT action, UINT val, PVOID ptr, UINT winini, UINT dpi )
+BOOL SYSCALL NtUserSystemParametersInfoForDpi( UINT action, UINT val, PVOID ptr, UINT winini, UINT dpi )
 {
     BOOL ret = FALSE;
 
@@ -4339,7 +4339,7 @@ BOOL WINAPI NtUserSystemParametersInfoForDpi( UINT action, UINT val, PVOID ptr,
  * Some SPI values can also be stored as Twips values in the registry,
  * don't forget the conversion!
  */
-BOOL WINAPI NtUserSystemParametersInfo( UINT action, UINT val, void *ptr, UINT winini )
+BOOL SYSCALL NtUserSystemParametersInfo( UINT action, UINT val, void *ptr, UINT winini )
 {
 #define WINE_SPI_FIXME(x) \
     case x: \
@@ -5587,7 +5587,7 @@ HPEN get_sys_color_pen( unsigned int index )
 /**********************************************************************
  *	     NtUserGetDoubleClickTime    (win32u.@)
  */
-UINT WINAPI NtUserGetDoubleClickTime(void)
+UINT SYSCALL NtUserGetDoubleClickTime(void)
 {
     UINT time = 0;
 
@@ -5599,7 +5599,7 @@ UINT WINAPI NtUserGetDoubleClickTime(void)
 /*************************************************************************
  *	     NtUserSetSysColors    (win32u.@)
  */
-BOOL WINAPI NtUserSetSysColors( INT count, const INT *colors, const COLORREF *values )
+BOOL SYSCALL NtUserSetSysColors( INT count, const INT *colors, const COLORREF *values )
 {
     int i;
 
@@ -5623,7 +5623,7 @@ static LONG dpi_awareness;
 /***********************************************************************
  *	     NtUserSetProcessDpiAwarenessContext    (win32u.@)
  */
-BOOL WINAPI NtUserSetProcessDpiAwarenessContext( ULONG awareness, ULONG unknown )
+BOOL SYSCALL NtUserSetProcessDpiAwarenessContext( ULONG awareness, ULONG unknown )
 {
     switch (awareness)
     {
@@ -5644,7 +5644,7 @@ BOOL WINAPI NtUserSetProcessDpiAwarenessContext( ULONG awareness, ULONG unknown
 /***********************************************************************
  *	     NtUserGetProcessDpiAwarenessContext    (win32u.@)
  */
-ULONG WINAPI NtUserGetProcessDpiAwarenessContext( HANDLE process )
+ULONG SYSCALL NtUserGetProcessDpiAwarenessContext( HANDLE process )
 {
     DPI_AWARENESS val;
 
@@ -5719,7 +5719,7 @@ static void thread_detach(void)
 /***********************************************************************
  *	     NtUserCallNoParam    (win32u.@)
  */
-ULONG_PTR WINAPI NtUserCallNoParam( ULONG code )
+ULONG_PTR SYSCALL NtUserCallNoParam( ULONG code )
 {
     switch(code)
     {
@@ -5780,7 +5780,7 @@ ULONG_PTR WINAPI NtUserCallNoParam( ULONG code )
 /***********************************************************************
  *	     NtUserCallOneParam    (win32u.@)
  */
-ULONG_PTR WINAPI NtUserCallOneParam( ULONG_PTR arg, ULONG code )
+ULONG_PTR SYSCALL NtUserCallOneParam( ULONG_PTR arg, ULONG code )
 {
     switch(code)
     {
@@ -5870,7 +5870,7 @@ ULONG_PTR WINAPI NtUserCallOneParam( ULONG_PTR arg, ULONG code )
 /***********************************************************************
  *	     NtUserCallTwoParam    (win32u.@)
  */
-ULONG_PTR WINAPI NtUserCallTwoParam( ULONG_PTR arg1, ULONG_PTR arg2, ULONG code )
+ULONG_PTR SYSCALL NtUserCallTwoParam( ULONG_PTR arg1, ULONG_PTR arg2, ULONG code )
 {
     switch(code)
     {
@@ -5911,7 +5911,7 @@ ULONG_PTR WINAPI NtUserCallTwoParam( ULONG_PTR arg1, ULONG_PTR arg2, ULONG code
 /***********************************************************************
  *           NtUserDisplayConfigGetDeviceInfo    (win32u.@)
  */
-NTSTATUS WINAPI NtUserDisplayConfigGetDeviceInfo( DISPLAYCONFIG_DEVICE_INFO_HEADER *packet )
+NTSTATUS SYSCALL NtUserDisplayConfigGetDeviceInfo( DISPLAYCONFIG_DEVICE_INFO_HEADER *packet )
 {
     NTSTATUS ret = STATUS_UNSUCCESSFUL;
 
diff --git a/dlls/win32u/window.c b/dlls/win32u/window.c
index 11111111111..11111111111 100644
--- a/dlls/win32u/window.c
+++ b/dlls/win32u/window.c
@@ -388,7 +388,7 @@ HWND get_parent( HWND hwnd )
 /*****************************************************************
  *           NtUserSetParent (win32u.@)
  */
-HWND WINAPI NtUserSetParent( HWND hwnd, HWND parent )
+HWND SYSCALL NtUserSetParent( HWND hwnd, HWND parent )
 {
     RECT window_rect, old_screen_rect, new_screen_rect;
     DPI_AWARENESS_CONTEXT context;
@@ -656,7 +656,7 @@ HWND *list_window_children( HDESK desktop, HWND hwnd, UNICODE_STRING *class, DWO
 /*****************************************************************
  *           NtUserGetAncestor (win32u.@)
  */
-HWND WINAPI NtUserGetAncestor( HWND hwnd, UINT type )
+HWND SYSCALL NtUserGetAncestor( HWND hwnd, UINT type )
 {
     HWND *list, ret = 0;
     WND *win;
@@ -1516,7 +1516,7 @@ LONG_PTR set_window_long( HWND hwnd, INT offset, UINT size, LONG_PTR newval, BOO
 /**********************************************************************
  *           NtUserSetWindowWord (win32u.@)
  */
-WORD WINAPI NtUserSetWindowWord( HWND hwnd, INT offset, WORD newval )
+WORD SYSCALL NtUserSetWindowWord( HWND hwnd, INT offset, WORD newval )
 {
     if (offset < 0 && offset != GWLP_USERDATA)
     {
@@ -1529,7 +1529,7 @@ WORD WINAPI NtUserSetWindowWord( HWND hwnd, INT offset, WORD newval )
 /**********************************************************************
  *           NtUserSetWindowLong (win32u.@)
  */
-LONG WINAPI NtUserSetWindowLong( HWND hwnd, INT offset, LONG newval, BOOL ansi )
+LONG SYSCALL NtUserSetWindowLong( HWND hwnd, INT offset, LONG newval, BOOL ansi )
 {
     return set_window_long( hwnd, offset, sizeof(LONG), newval, ansi );
 }
@@ -1537,7 +1537,7 @@ LONG WINAPI NtUserSetWindowLong( HWND hwnd, INT offset, LONG newval, BOOL ansi )
 /*****************************************************************************
  *           NtUserSetWindowLongPtr (win32u.@)
  */
-LONG_PTR WINAPI NtUserSetWindowLongPtr( HWND hwnd, INT offset, LONG_PTR newval, BOOL ansi )
+LONG_PTR SYSCALL NtUserSetWindowLongPtr( HWND hwnd, INT offset, LONG_PTR newval, BOOL ansi )
 {
     return set_window_long( hwnd, offset, sizeof(LONG_PTR), newval, ansi );
 }
@@ -1584,7 +1584,7 @@ int win32u_get_window_pixel_format( HWND hwnd )
  * NOTE Native allows only ATOMs as the second argument. We allow strings
  *      to save extra server call in GetPropW.
  */
-HANDLE WINAPI NtUserGetProp( HWND hwnd, const WCHAR *str )
+HANDLE SYSCALL NtUserGetProp( HWND hwnd, const WCHAR *str )
 {
     ULONG_PTR ret = 0;
 
@@ -1605,7 +1605,7 @@ HANDLE WINAPI NtUserGetProp( HWND hwnd, const WCHAR *str )
  * NOTE Native allows only ATOMs as the second argument. We allow strings
  *      to save extra server call in SetPropW.
  */
-BOOL WINAPI NtUserSetProp( HWND hwnd, const WCHAR *str, HANDLE handle )
+BOOL SYSCALL NtUserSetProp( HWND hwnd, const WCHAR *str, HANDLE handle )
 {
     BOOL ret;
 
@@ -1628,7 +1628,7 @@ BOOL WINAPI NtUserSetProp( HWND hwnd, const WCHAR *str, HANDLE handle )
  * NOTE Native allows only ATOMs as the second argument. We allow strings
  *      to save extra server call in RemovePropW.
  */
-HANDLE WINAPI NtUserRemoveProp( HWND hwnd, const WCHAR *str )
+HANDLE SYSCALL NtUserRemoveProp( HWND hwnd, const WCHAR *str )
 {
     ULONG_PTR ret = 0;
 
@@ -2047,7 +2047,7 @@ static BOOL apply_window_pos( HWND hwnd, HWND insert_after, UINT swp_flags,
 /*******************************************************************
  *           NtUserGetWindowRgnEx (win32u.@)
  */
-int WINAPI NtUserGetWindowRgnEx( HWND hwnd, HRGN hrgn, UINT unk )
+int SYSCALL NtUserGetWindowRgnEx( HWND hwnd, HRGN hrgn, UINT unk )
 {
     NTSTATUS status;
     HRGN win_rgn = 0;
@@ -2095,7 +2095,7 @@ int WINAPI NtUserGetWindowRgnEx( HWND hwnd, HRGN hrgn, UINT unk )
 /***********************************************************************
  *           NtUserSetWindowRgn (win32u.@)
  */
-int WINAPI NtUserSetWindowRgn( HWND hwnd, HRGN hrgn, BOOL redraw )
+int SYSCALL NtUserSetWindowRgn( HWND hwnd, HRGN hrgn, BOOL redraw )
 {
     static const RECT empty_rect;
     BOOL ret;
@@ -2151,7 +2151,7 @@ int WINAPI NtUserSetWindowRgn( HWND hwnd, HRGN hrgn, BOOL redraw )
 /***********************************************************************
  *           NtUserMoveWindow (win32u.@)
  */
-BOOL WINAPI NtUserMoveWindow( HWND hwnd, INT x, INT y, INT cx, INT cy, BOOL repaint )
+BOOL SYSCALL NtUserMoveWindow( HWND hwnd, INT x, INT y, INT cx, INT cy, BOOL repaint )
 {
     int flags = SWP_NOZORDER | SWP_NOACTIVATE;
     if (!repaint) flags |= SWP_NOREDRAW;
@@ -2162,7 +2162,7 @@ BOOL WINAPI NtUserMoveWindow( HWND hwnd, INT x, INT y, INT cx, INT cy, BOOL repa
 /*****************************************************************************
  *           NtUserGetLayeredWindowAttributes (win32u.@)
  */
-BOOL WINAPI NtUserGetLayeredWindowAttributes( HWND hwnd, COLORREF *key, BYTE *alpha, DWORD *flags )
+BOOL SYSCALL NtUserGetLayeredWindowAttributes( HWND hwnd, COLORREF *key, BYTE *alpha, DWORD *flags )
 {
     BOOL ret;
 
@@ -2184,7 +2184,7 @@ BOOL WINAPI NtUserGetLayeredWindowAttributes( HWND hwnd, COLORREF *key, BYTE *al
 /*****************************************************************************
  *           NtUserSetLayeredWindowAttributes (win32u.@)
  */
-BOOL WINAPI NtUserSetLayeredWindowAttributes( HWND hwnd, COLORREF key, BYTE alpha, DWORD flags )
+BOOL SYSCALL NtUserSetLayeredWindowAttributes( HWND hwnd, COLORREF key, BYTE alpha, DWORD flags )
 {
     BOOL ret;
 
@@ -2374,7 +2374,7 @@ HWND window_from_point( HWND hwnd, POINT pt, INT *hittest )
 /*******************************************************************
  *           NtUserWindowFromPoint (win32u.@)
  */
-HWND WINAPI NtUserWindowFromPoint( LONG x, LONG y )
+HWND SYSCALL NtUserWindowFromPoint( LONG x, LONG y )
 {
     POINT pt = { .x = x, .y = y };
     INT hittest;
@@ -2384,7 +2384,7 @@ HWND WINAPI NtUserWindowFromPoint( LONG x, LONG y )
 /*******************************************************************
  *           NtUserChildWindowFromPointEx (win32u.@)
  */
-HWND WINAPI NtUserChildWindowFromPointEx( HWND parent, LONG x, LONG y, UINT flags )
+HWND SYSCALL NtUserChildWindowFromPointEx( HWND parent, LONG x, LONG y, UINT flags )
 {
     POINT pt = { .x = x, .y = y }; /* in the client coordinates */
     HWND *list;
@@ -2421,7 +2421,7 @@ HWND WINAPI NtUserChildWindowFromPointEx( HWND parent, LONG x, LONG y, UINT flag
 /*******************************************************************
  *           NtUserRealChildWindowFromPoint (win32u.@)
  */
-HWND WINAPI NtUserRealChildWindowFromPoint( HWND parent, LONG x, LONG y )
+HWND SYSCALL NtUserRealChildWindowFromPoint( HWND parent, LONG x, LONG y )
 {
     return NtUserChildWindowFromPointEx( parent, x, y, CWP_SKIPTRANSPARENT | CWP_SKIPINVISIBLE );
 }
@@ -2499,7 +2499,7 @@ static BOOL empty_point( POINT pt )
 /***********************************************************************
  *           NtUserGetWindowPlacement (win32u.@)
  */
-BOOL WINAPI NtUserGetWindowPlacement( HWND hwnd, WINDOWPLACEMENT *placement )
+BOOL SYSCALL NtUserGetWindowPlacement( HWND hwnd, WINDOWPLACEMENT *placement )
 {
     RECT work_rect = get_maximized_work_rect( hwnd );
     WND *win = get_win_ptr( hwnd );
@@ -2620,7 +2620,7 @@ static void make_rect_onscreen( RECT *rect )
 /***********************************************************************
  *           NtUserGetInternalWindowPos (win32u.@)
  */
-UINT WINAPI NtUserGetInternalWindowPos( HWND hwnd, RECT *rect, POINT *pt )
+UINT SYSCALL NtUserGetInternalWindowPos( HWND hwnd, RECT *rect, POINT *pt )
 {
     WINDOWPLACEMENT placement;
 
@@ -2708,7 +2708,7 @@ static BOOL set_window_placement( HWND hwnd, const WINDOWPLACEMENT *wndpl, UINT
 /***********************************************************************
  *           NtUserSetWindowPlacement (win32u.@)
  */
-BOOL WINAPI NtUserSetWindowPlacement( HWND hwnd, const WINDOWPLACEMENT *wpl )
+BOOL SYSCALL NtUserSetWindowPlacement( HWND hwnd, const WINDOWPLACEMENT *wpl )
 {
     UINT flags = PLACE_MAX | PLACE_RECT;
     if (!wpl) return FALSE;
@@ -2724,8 +2724,8 @@ BOOL WINAPI NtUserSetWindowPlacement( HWND hwnd, const WINDOWPLACEMENT *wpl )
 /*****************************************************************************
  *           NtUserBuildHwndList (win32u.@)
  */
-NTSTATUS WINAPI NtUserBuildHwndList( HDESK desktop, ULONG unk2, ULONG unk3, ULONG unk4,
-                                     ULONG thread_id, ULONG count, HWND *buffer, ULONG *size )
+NTSTATUS SYSCALL NtUserBuildHwndList( HDESK desktop, ULONG unk2, ULONG unk3, ULONG unk4,
+                                      ULONG thread_id, ULONG count, HWND *buffer, ULONG *size )
 {
     user_handle_t *list = (user_handle_t *)buffer;
     int i;
@@ -2753,8 +2753,8 @@ NTSTATUS WINAPI NtUserBuildHwndList( HDESK desktop, ULONG unk2, ULONG unk3, ULON
 /***********************************************************************
  *           NtUserFindWindowEx (USER32.@)
  */
-HWND WINAPI NtUserFindWindowEx( HWND parent, HWND child, UNICODE_STRING *class, UNICODE_STRING *title,
-                                ULONG unk )
+HWND SYSCALL NtUserFindWindowEx( HWND parent, HWND child, UNICODE_STRING *class, UNICODE_STRING *title,
+                                 ULONG unk )
 {
     HWND *list;
     HWND retvalue = 0;
@@ -2822,7 +2822,7 @@ static data_size_t get_server_window_text( HWND hwnd, WCHAR *text, data_size_t c
 /*******************************************************************
  *           NtUserInternalGetWindowText (win32u.@)
  */
-INT WINAPI NtUserInternalGetWindowText( HWND hwnd, WCHAR *text, INT count )
+INT SYSCALL NtUserInternalGetWindowText( HWND hwnd, WCHAR *text, INT count )
 {
     WND *win;
 
@@ -3616,7 +3616,7 @@ done:
 /*******************************************************************
  *           NtUserSetWindowPos (win32u.@)
  */
-BOOL WINAPI NtUserSetWindowPos( HWND hwnd, HWND after, INT x, INT y, INT cx, INT cy, UINT flags )
+BOOL SYSCALL NtUserSetWindowPos( HWND hwnd, HWND after, INT x, INT y, INT cx, INT cy, UINT flags )
 {
     WINDOWPOS winpos;
 
@@ -3694,9 +3694,9 @@ HDWP begin_defer_window_pos( INT count )
 /***********************************************************************
  *           NtUserDeferWindowPosAndBand (win32u.@)
  */
-HDWP WINAPI NtUserDeferWindowPosAndBand( HDWP hdwp, HWND hwnd, HWND after,
-                                         INT x, INT y, INT cx, INT cy,
-                                         UINT flags, UINT unk1, UINT unk2 )
+HDWP SYSCALL NtUserDeferWindowPosAndBand( HDWP hdwp, HWND hwnd, HWND after,
+                                          INT x, INT y, INT cx, INT cy,
+                                          UINT flags, UINT unk1, UINT unk2 )
 {
     HDWP retvalue = hdwp;
     WINDOWPOS winpos;
@@ -3776,7 +3776,7 @@ done:
 /***********************************************************************
  *           NtUserEndDeferWindowPosEx (win32u.@)
  */
-BOOL WINAPI NtUserEndDeferWindowPosEx( HDWP hdwp, BOOL async )
+BOOL SYSCALL NtUserEndDeferWindowPosEx( HDWP hdwp, BOOL async )
 {
     WINDOWPOS *winpos;
     DWP *dwp;
@@ -3812,7 +3812,7 @@ BOOL WINAPI NtUserEndDeferWindowPosEx( HDWP hdwp, BOOL async )
 /***********************************************************************
  *           NtUserSetInternalWindowPos (win32u.@)
  */
-void WINAPI NtUserSetInternalWindowPos( HWND hwnd, UINT cmd, RECT *rect, POINT *pt )
+void SYSCALL NtUserSetInternalWindowPos( HWND hwnd, UINT cmd, RECT *rect, POINT *pt )
 {
     WINDOWPLACEMENT wndpl;
     UINT flags;
@@ -4531,7 +4531,7 @@ done:
  * doesn't wait; returns immediately.
  * used by threads to toggle windows in other (possibly hanging) threads
  */
-BOOL WINAPI NtUserShowWindowAsync( HWND hwnd, INT cmd )
+BOOL SYSCALL NtUserShowWindowAsync( HWND hwnd, INT cmd )
 {
     HWND full_handle;
 
@@ -4551,7 +4551,7 @@ BOOL WINAPI NtUserShowWindowAsync( HWND hwnd, INT cmd )
 /***********************************************************************
  *           NtUserShowWindow (win32u.@)
  */
-BOOL WINAPI NtUserShowWindow( HWND hwnd, INT cmd )
+BOOL SYSCALL NtUserShowWindow( HWND hwnd, INT cmd )
 {
     HWND full_handle;
 
@@ -4611,7 +4611,7 @@ BOOL show_owned_popups( HWND owner, BOOL show )
 /*******************************************************************
  *           NtUserFlashWindowEx (win32u.@)
  */
-BOOL WINAPI NtUserFlashWindowEx( FLASHWINFO *info )
+BOOL SYSCALL NtUserFlashWindowEx( FLASHWINFO *info )
 {
     WND *win;
 
@@ -4700,7 +4700,7 @@ static BOOL set_window_context_help_id( HWND hwnd, DWORD id )
 /***********************************************************************
  *           NtUserInternalGetWindowIcon   (win32u.@)
  */
-HICON WINAPI NtUserInternalGetWindowIcon( HWND hwnd, UINT type )
+HICON SYSCALL NtUserInternalGetWindowIcon( HWND hwnd, UINT type )
 {
     WND *win = get_win_ptr( hwnd );
     HICON ret;
@@ -4883,7 +4883,7 @@ LRESULT destroy_window( HWND hwnd )
 /***********************************************************************
  *           NtUserDestroyWindow (win32u.@)
  */
-BOOL WINAPI NtUserDestroyWindow( HWND hwnd )
+BOOL SYSCALL NtUserDestroyWindow( HWND hwnd )
 {
     BOOL is_child;
 
@@ -5191,11 +5191,11 @@ static void map_dpi_create_struct( CREATESTRUCTW *cs, UINT dpi_from, UINT dpi_to
 /***********************************************************************
  *           NtUserCreateWindowEx (win32u.@)
  */
-HWND WINAPI NtUserCreateWindowEx( DWORD ex_style, UNICODE_STRING *class_name,
-                                  UNICODE_STRING *version, UNICODE_STRING *window_name,
-                                  DWORD style, INT x, INT y, INT cx, INT cy,
-                                  HWND parent, HMENU menu, HINSTANCE instance, void *params,
-                                  DWORD flags, HINSTANCE client_instance, DWORD unk, BOOL ansi )
+HWND SYSCALL NtUserCreateWindowEx( DWORD ex_style, UNICODE_STRING *class_name,
+                                   UNICODE_STRING *version, UNICODE_STRING *window_name,
+                                   DWORD style, INT x, INT y, INT cx, INT cy,
+                                   HWND parent, HMENU menu, HINSTANCE instance, void *params,
+                                   DWORD flags, HINSTANCE client_instance, DWORD unk, BOOL ansi )
 {
     UINT win_dpi, thread_dpi = get_thread_dpi();
     DPI_AWARENESS_CONTEXT context;
@@ -5529,7 +5529,7 @@ static BOOL set_dialog_info( HWND hwnd, void *info )
 /*****************************************************************************
  *           NtUserCallHwnd (win32u.@)
  */
-ULONG_PTR WINAPI NtUserCallHwnd( HWND hwnd, DWORD code )
+ULONG_PTR SYSCALL NtUserCallHwnd( HWND hwnd, DWORD code )
 {
     switch (code)
     {
@@ -5614,7 +5614,7 @@ ULONG_PTR WINAPI NtUserCallHwnd( HWND hwnd, DWORD code )
 /*****************************************************************************
  *           NtUserCallHwndParam (win32u.@)
  */
-ULONG_PTR WINAPI NtUserCallHwndParam( HWND hwnd, DWORD_PTR param, DWORD code )
+ULONG_PTR SYSCALL NtUserCallHwndParam( HWND hwnd, DWORD_PTR param, DWORD code )
 {
     switch (code)
     {
@@ -5729,7 +5729,7 @@ ULONG_PTR WINAPI NtUserCallHwndParam( HWND hwnd, DWORD_PTR param, DWORD code )
 /*******************************************************************
  *           NtUserDragDetect (win32u.@)
  */
-BOOL WINAPI NtUserDragDetect( HWND hwnd, int x, int y )
+BOOL SYSCALL NtUserDragDetect( HWND hwnd, int x, int y )
 {
     WORD width, height;
     RECT rect;
@@ -5774,7 +5774,7 @@ BOOL WINAPI NtUserDragDetect( HWND hwnd, int x, int y )
 /*******************************************************************
  *           NtUserDragObject (win32u.@)
  */
-DWORD WINAPI NtUserDragObject( HWND parent, HWND hwnd, UINT fmt, ULONG_PTR data, HCURSOR cursor )
+DWORD SYSCALL NtUserDragObject( HWND parent, HWND hwnd, UINT fmt, ULONG_PTR data, HCURSOR cursor )
 {
     FIXME( "%p, %p, %u, %#lx, %p stub!\n", parent, hwnd, fmt, data, cursor );
 
diff --git a/dlls/win32u/winstation.c b/dlls/win32u/winstation.c
index 11111111111..11111111111 100644
--- a/dlls/win32u/winstation.c
+++ b/dlls/win32u/winstation.c
@@ -43,8 +43,8 @@ WINE_DECLARE_DEBUG_CHANNEL(win);
 /***********************************************************************
  *           NtUserCreateWindowStation  (win32u.@)
  */
-HWINSTA WINAPI NtUserCreateWindowStation( OBJECT_ATTRIBUTES *attr, ACCESS_MASK access, ULONG arg3,
-                                          ULONG arg4, ULONG arg5, ULONG arg6, ULONG arg7 )
+HWINSTA SYSCALL NtUserCreateWindowStation( OBJECT_ATTRIBUTES *attr, ACCESS_MASK access, ULONG arg3,
+                                           ULONG arg4, ULONG arg5, ULONG arg6, ULONG arg7 )
 {
     HANDLE ret;
 
@@ -71,7 +71,7 @@ HWINSTA WINAPI NtUserCreateWindowStation( OBJECT_ATTRIBUTES *attr, ACCESS_MASK a
 /******************************************************************************
  *           NtUserOpenWindowStation  (win32u.@)
  */
-HWINSTA WINAPI NtUserOpenWindowStation( OBJECT_ATTRIBUTES *attr, ACCESS_MASK access )
+HWINSTA SYSCALL NtUserOpenWindowStation( OBJECT_ATTRIBUTES *attr, ACCESS_MASK access )
 {
     HANDLE ret = 0;
 
@@ -90,7 +90,7 @@ HWINSTA WINAPI NtUserOpenWindowStation( OBJECT_ATTRIBUTES *attr, ACCESS_MASK acc
 /***********************************************************************
  *           NtUserCloseWindowStation  (win32u.@)
  */
-BOOL WINAPI NtUserCloseWindowStation( HWINSTA handle )
+BOOL SYSCALL NtUserCloseWindowStation( HWINSTA handle )
 {
     BOOL ret;
     SERVER_START_REQ( close_winstation )
@@ -105,7 +105,7 @@ BOOL WINAPI NtUserCloseWindowStation( HWINSTA handle )
 /***********************************************************************
  *           NtUSerGetProcessWindowStation  (win32u.@)
  */
-HWINSTA WINAPI NtUserGetProcessWindowStation(void)
+HWINSTA SYSCALL NtUserGetProcessWindowStation(void)
 {
     HWINSTA ret = 0;
 
@@ -121,7 +121,7 @@ HWINSTA WINAPI NtUserGetProcessWindowStation(void)
 /***********************************************************************
  *           NtUserSetProcessWindowStation  (win32u.@)
  */
-BOOL WINAPI NtUserSetProcessWindowStation( HWINSTA handle )
+BOOL SYSCALL NtUserSetProcessWindowStation( HWINSTA handle )
 {
     BOOL ret;
 
@@ -137,9 +137,9 @@ BOOL WINAPI NtUserSetProcessWindowStation( HWINSTA handle )
 /***********************************************************************
  *           NtUserCreateDesktopEx   (win32u.@)
  */
-HDESK WINAPI NtUserCreateDesktopEx( OBJECT_ATTRIBUTES *attr, UNICODE_STRING *device,
-                                    DEVMODEW *devmode, DWORD flags, ACCESS_MASK access,
-                                    ULONG heap_size )
+HDESK SYSCALL NtUserCreateDesktopEx( OBJECT_ATTRIBUTES *attr, UNICODE_STRING *device,
+                                     DEVMODEW *devmode, DWORD flags, ACCESS_MASK access,
+                                     ULONG heap_size )
 {
     HANDLE ret;
 
@@ -169,7 +169,7 @@ HDESK WINAPI NtUserCreateDesktopEx( OBJECT_ATTRIBUTES *attr, UNICODE_STRING *dev
 /***********************************************************************
  *           NtUserOpenDesktop   (win32u.@)
  */
-HDESK WINAPI NtUserOpenDesktop( OBJECT_ATTRIBUTES *attr, DWORD flags, ACCESS_MASK access )
+HDESK SYSCALL NtUserOpenDesktop( OBJECT_ATTRIBUTES *attr, DWORD flags, ACCESS_MASK access )
 {
     HANDLE ret = 0;
     if (attr->ObjectName->Length >= MAX_PATH * sizeof(WCHAR))
@@ -193,7 +193,7 @@ HDESK WINAPI NtUserOpenDesktop( OBJECT_ATTRIBUTES *attr, DWORD flags, ACCESS_MAS
 /***********************************************************************
  *           NtUserCloseDesktop  (win32u.@)
  */
-BOOL WINAPI NtUserCloseDesktop( HDESK handle )
+BOOL SYSCALL NtUserCloseDesktop( HDESK handle )
 {
     BOOL ret;
     SERVER_START_REQ( close_desktop )
@@ -208,7 +208,7 @@ BOOL WINAPI NtUserCloseDesktop( HDESK handle )
 /***********************************************************************
  *           NtUserGetThreadDesktop   (win32u.@)
  */
-HDESK WINAPI NtUserGetThreadDesktop( DWORD thread )
+HDESK SYSCALL NtUserGetThreadDesktop( DWORD thread )
 {
     HDESK ret = 0;
 
@@ -224,7 +224,7 @@ HDESK WINAPI NtUserGetThreadDesktop( DWORD thread )
 /***********************************************************************
  *           NtUserSetThreadDesktop   (win32u.@)
  */
-BOOL WINAPI NtUserSetThreadDesktop( HDESK handle )
+BOOL SYSCALL NtUserSetThreadDesktop( HDESK handle )
 {
     BOOL ret;
 
@@ -252,7 +252,7 @@ BOOL WINAPI NtUserSetThreadDesktop( HDESK handle )
 /***********************************************************************
  *           NtUserOpenInputDesktop   (win32u.@)
  */
-HDESK WINAPI NtUserOpenInputDesktop( DWORD flags, BOOL inherit, ACCESS_MASK access )
+HDESK SYSCALL NtUserOpenInputDesktop( DWORD flags, BOOL inherit, ACCESS_MASK access )
 {
     HANDLE ret = 0;
 
@@ -276,8 +276,8 @@ HDESK WINAPI NtUserOpenInputDesktop( DWORD flags, BOOL inherit, ACCESS_MASK acce
 /***********************************************************************
  *           NtUserGetObjectInformation   (win32u.@)
  */
-BOOL WINAPI NtUserGetObjectInformation( HANDLE handle, INT index, void *info,
-                                        DWORD len, DWORD *needed )
+BOOL SYSCALL NtUserGetObjectInformation( HANDLE handle, INT index, void *info,
+                                         DWORD len, DWORD *needed )
 {
     BOOL ret;
 
@@ -370,7 +370,7 @@ BOOL WINAPI NtUserGetObjectInformation( HANDLE handle, INT index, void *info,
 /***********************************************************************
  *           NtUserSetObjectInformation   (win32u.@)
  */
-BOOL WINAPI NtUserSetObjectInformation( HANDLE handle, INT index, void *info, DWORD len )
+BOOL SYSCALL NtUserSetObjectInformation( HANDLE handle, INT index, void *info, DWORD len )
 {
     BOOL ret;
     const USEROBJECTFLAGS *obj_flags = info;
diff --git a/include/ntgdi.h b/include/ntgdi.h
index 11111111111..11111111111 100644
--- a/include/ntgdi.h
+++ b/include/ntgdi.h
@@ -245,9 +245,9 @@ struct font_fileinfo
 
 INT      WINAPI NtGdiAbortDoc( HDC hdc );
 BOOL     WINAPI NtGdiAbortPath( HDC hdc );
-HANDLE   WINAPI NtGdiAddFontMemResourceEx( void *ptr, DWORD size, void *dv, ULONG dv_size,
+HANDLE   SYSCALL NtGdiAddFontMemResourceEx( void *ptr, DWORD size, void *dv, ULONG dv_size,
                                            DWORD *count );
-INT      WINAPI NtGdiAddFontResourceW( const WCHAR *str, ULONG size, ULONG files, DWORD flags,
+INT      SYSCALL NtGdiAddFontResourceW( const WCHAR *str, ULONG size, ULONG files, DWORD flags,
                                        DWORD tid, void *dv );
 BOOL     WINAPI NtGdiAlphaBlend( HDC hdc_dst, int x_dst, int y_dst, int width_dst, int height_dst,
                                  HDC hdc_src, int x_src, int y_src, int width_src, int height_src,
@@ -261,49 +261,49 @@ BOOL     WINAPI NtGdiBitBlt( HDC hdc_dst, INT x_dst, INT y_dst, INT width, INT h
                              INT x_src, INT y_src, DWORD rop, DWORD bk_color, FLONG fl );
 BOOL     WINAPI NtGdiCancelDC( HDC hdc );
 BOOL     WINAPI NtGdiCloseFigure( HDC hdc );
-INT      WINAPI NtGdiCombineRgn( HRGN dest, HRGN src1, HRGN src2, INT mode );
+INT      SYSCALL NtGdiCombineRgn( HRGN dest, HRGN src1, HRGN src2, INT mode );
 BOOL     WINAPI NtGdiComputeXformCoefficients( HDC hdc );
-HBITMAP  WINAPI NtGdiCreateBitmap( INT width, INT height, UINT planes,
+HBITMAP  SYSCALL NtGdiCreateBitmap( INT width, INT height, UINT planes,
                                    UINT bpp, const void *bits );
-HANDLE   WINAPI NtGdiCreateClientObj( ULONG type );
+HANDLE   SYSCALL NtGdiCreateClientObj( ULONG type );
 HBITMAP  WINAPI NtGdiCreateCompatibleBitmap( HDC hdc, INT width, INT height );
 HDC      WINAPI NtGdiCreateCompatibleDC( HDC hdc );
-HBRUSH   WINAPI NtGdiCreateDIBBrush( const void *data, UINT coloruse, UINT size,
+HBRUSH   SYSCALL NtGdiCreateDIBBrush( const void *data, UINT coloruse, UINT size,
                                      BOOL is_8x8, BOOL pen, const void *client );
-HBITMAP  WINAPI NtGdiCreateDIBSection( HDC hdc, HANDLE section, DWORD offset, const BITMAPINFO *bmi,
+HBITMAP  SYSCALL NtGdiCreateDIBSection( HDC hdc, HANDLE section, DWORD offset, const BITMAPINFO *bmi,
                                        UINT usage, UINT header_size, ULONG flags,
                                        ULONG_PTR color_space, void **bits );
 HBITMAP  WINAPI NtGdiCreateDIBitmapInternal( HDC hdc, INT width, INT height, DWORD init,
                                              const void *bits, const BITMAPINFO *data,
                                              UINT coloruse, UINT max_info, UINT max_bits,
                                              ULONG flags, HANDLE xform );
-HRGN     WINAPI NtGdiCreateEllipticRgn( INT left, INT top, INT right, INT bottom );
-HPALETTE WINAPI NtGdiCreateHalftonePalette( HDC hdc );
-HBRUSH   WINAPI NtGdiCreateHatchBrushInternal( INT style, COLORREF color, BOOL pen );
+HRGN     SYSCALL NtGdiCreateEllipticRgn( INT left, INT top, INT right, INT bottom );
+HPALETTE SYSCALL NtGdiCreateHalftonePalette( HDC hdc );
+HBRUSH   SYSCALL NtGdiCreateHatchBrushInternal( INT style, COLORREF color, BOOL pen );
 HDC      WINAPI NtGdiCreateMetafileDC( HDC hdc );
-HPALETTE WINAPI NtGdiCreatePaletteInternal( const LOGPALETTE *palette, UINT count );
-HBRUSH   WINAPI NtGdiCreatePatternBrushInternal( HBITMAP hbitmap, BOOL pen, BOOL is_8x8 );
-HPEN     WINAPI NtGdiCreatePen( INT style, INT width, COLORREF color, HBRUSH brush );
-HRGN     WINAPI NtGdiCreateRectRgn( INT left, INT top, INT right, INT bottom );
-HRGN     WINAPI NtGdiCreateRoundRectRgn( INT left, INT top, INT right, INT bottom,
+HPALETTE SYSCALL NtGdiCreatePaletteInternal( const LOGPALETTE *palette, UINT count );
+HBRUSH   SYSCALL NtGdiCreatePatternBrushInternal( HBITMAP hbitmap, BOOL pen, BOOL is_8x8 );
+HPEN     SYSCALL NtGdiCreatePen( INT style, INT width, COLORREF color, HBRUSH brush );
+HRGN     SYSCALL NtGdiCreateRectRgn( INT left, INT top, INT right, INT bottom );
+HRGN     SYSCALL NtGdiCreateRoundRectRgn( INT left, INT top, INT right, INT bottom,
                                          INT ellipse_width, INT ellipse_height );
-HBRUSH   WINAPI NtGdiCreateSolidBrush( COLORREF color, HBRUSH brush );
-BOOL     WINAPI NtGdiDeleteClientObj( HGDIOBJ obj );
+HBRUSH   SYSCALL NtGdiCreateSolidBrush( COLORREF color, HBRUSH brush );
+BOOL     SYSCALL NtGdiDeleteClientObj( HGDIOBJ obj );
 BOOL     WINAPI NtGdiDeleteObjectApp( HGDIOBJ obj );
-INT      WINAPI NtGdiDescribePixelFormat( HDC hdc, INT format, UINT size,
+INT      SYSCALL NtGdiDescribePixelFormat( HDC hdc, INT format, UINT size,
                                           PIXELFORMATDESCRIPTOR *descr );
 LONG     WINAPI NtGdiDoPalette( HGDIOBJ handle, WORD start, WORD count, void *entries,
                                 DWORD func, BOOL inbound );
-BOOL     WINAPI NtGdiDrawStream( HDC hdc, ULONG in, void *pvin );
+BOOL     SYSCALL NtGdiDrawStream( HDC hdc, ULONG in, void *pvin );
 BOOL     WINAPI NtGdiEllipse( HDC hdc, INT left, INT top, INT right, INT bottom );
 INT      WINAPI NtGdiEndDoc( HDC hdc );
 BOOL     WINAPI NtGdiEndPath( HDC hdc );
 INT      WINAPI NtGdiEndPage( HDC hdc );
 BOOL     WINAPI NtGdiEnumFonts( HDC hdc, ULONG type, ULONG win32_compat, ULONG face_name_len,
                                 const WCHAR *face_name, ULONG charset, ULONG *count, void *buf );
-BOOL     WINAPI NtGdiEqualRgn( HRGN hrgn1, HRGN hrgn2 );
+BOOL     SYSCALL NtGdiEqualRgn( HRGN hrgn1, HRGN hrgn2 );
 INT      WINAPI NtGdiExcludeClipRect( HDC hdc, INT left, INT top, INT right, INT bottom );
-HPEN     WINAPI NtGdiExtCreatePen( DWORD style, DWORD width, ULONG brush_style, ULONG color,
+HPEN     SYSCALL NtGdiExtCreatePen( DWORD style, DWORD width, ULONG brush_style, ULONG color,
                                    ULONG_PTR client_hatch, ULONG_PTR hatch, DWORD style_count,
                                    const DWORD *style_bits, ULONG dib_size, BOOL old_style,
                                    HBRUSH brush );
@@ -312,38 +312,38 @@ INT      WINAPI NtGdiExtEscape( HDC hdc, WCHAR *driver, INT driver_id, INT escap
 BOOL     WINAPI NtGdiExtFloodFill( HDC hdc, INT x, INT y, COLORREF color, UINT type );
 BOOL     WINAPI NtGdiExtTextOutW( HDC hdc, INT x, INT y, UINT flags, const RECT *rect,
                                   const WCHAR *str, UINT count, const INT *dx, DWORD cp );
-HRGN     WINAPI NtGdiExtCreateRegion( const XFORM *xform, DWORD count, const RGNDATA *data );
-INT      WINAPI NtGdiExtGetObjectW( HGDIOBJ handle, INT count, void *buffer );
+HRGN     SYSCALL NtGdiExtCreateRegion( const XFORM *xform, DWORD count, const RGNDATA *data );
+INT      SYSCALL NtGdiExtGetObjectW( HGDIOBJ handle, INT count, void *buffer );
 INT      WINAPI NtGdiExtSelectClipRgn( HDC hdc, HRGN region, INT mode );
 BOOL     WINAPI NtGdiFillPath( HDC hdc );
 BOOL     WINAPI NtGdiFillRgn( HDC hdc, HRGN hrgn, HBRUSH hbrush );
-BOOL     WINAPI NtGdiFlattenPath( HDC hdc );
+BOOL     SYSCALL NtGdiFlattenPath( HDC hdc );
 BOOL     WINAPI NtGdiFontIsLinked( HDC hdc );
-BOOL     WINAPI NtGdiFlush(void);
+BOOL     SYSCALL NtGdiFlush(void);
 BOOL     WINAPI NtGdiFrameRgn( HDC hdc, HRGN hrgn, HBRUSH brush, INT width, INT height );
 BOOL     WINAPI NtGdiGetAndSetDCDword( HDC hdc, UINT method, DWORD value, DWORD *result );
 INT      WINAPI NtGdiGetAppClipBox( HDC hdc, RECT *rect );
-LONG     WINAPI NtGdiGetBitmapBits( HBITMAP bitmap, LONG count, void *bits );
-BOOL     WINAPI NtGdiGetBitmapDimension( HBITMAP bitmap, SIZE *size );
+LONG     SYSCALL NtGdiGetBitmapBits( HBITMAP bitmap, LONG count, void *bits );
+BOOL     SYSCALL NtGdiGetBitmapDimension( HBITMAP bitmap, SIZE *size );
 UINT     WINAPI NtGdiGetBoundsRect( HDC hdc, RECT *rect, UINT flags );
 BOOL     WINAPI NtGdiGetCharABCWidthsW( HDC hdc, UINT first, UINT last, WCHAR *chars,
                                         ULONG flags, void *buffer );
 BOOL     WINAPI NtGdiGetCharWidthW( HDC hdc, UINT first_char, UINT last_char, WCHAR *chars,
                                     ULONG flags, void *buffer );
 BOOL     WINAPI NtGdiGetCharWidthInfo( HDC hdc, struct char_width_info *info );
-BOOL     WINAPI NtGdiGetColorAdjustment( HDC hdc, COLORADJUSTMENT *ca );
-BOOL     WINAPI NtGdiGetDCDword( HDC hdc, UINT method, DWORD *result );
-HANDLE   WINAPI NtGdiGetDCObject( HDC hdc, UINT type );
-BOOL     WINAPI NtGdiGetDCPoint( HDC hdc, UINT method, POINT *result );
+BOOL     SYSCALL NtGdiGetColorAdjustment( HDC hdc, COLORADJUSTMENT *ca );
+BOOL     SYSCALL NtGdiGetDCDword( HDC hdc, UINT method, DWORD *result );
+HANDLE   SYSCALL NtGdiGetDCObject( HDC hdc, UINT type );
+BOOL     SYSCALL NtGdiGetDCPoint( HDC hdc, UINT method, POINT *result );
 INT      WINAPI NtGdiGetDIBitsInternal( HDC hdc, HBITMAP hbitmap, UINT startscan, UINT lines,
                                         void *bits, BITMAPINFO *info, UINT coloruse,
                                         UINT max_bits, UINT max_info );
 INT      WINAPI NtGdiGetDeviceCaps( HDC hdc, INT cap );
 BOOL     WINAPI NtGdiGetDeviceGammaRamp( HDC hdc, void *ptr );
 DWORD    WINAPI NtGdiGetFontData( HDC hdc, DWORD table, DWORD offset, void *buffer, DWORD length );
-BOOL     WINAPI NtGdiGetFontFileData( DWORD instance_id, DWORD file_index, UINT64 *offset,
+BOOL     SYSCALL NtGdiGetFontFileData( DWORD instance_id, DWORD file_index, UINT64 *offset,
                                       void *buff, DWORD buff_size );
-BOOL     WINAPI NtGdiGetFontFileInfo( DWORD instance_id, DWORD file_index, struct font_fileinfo *info,
+BOOL     SYSCALL NtGdiGetFontFileInfo( DWORD instance_id, DWORD file_index, struct font_fileinfo *info,
                                       SIZE_T size, SIZE_T *needed );
 DWORD    WINAPI NtGdiGetFontUnicodeRanges( HDC hdc, GLYPHSET *lpgs );
 DWORD    WINAPI NtGdiGetGlyphIndicesW( HDC hdc, const WCHAR *str, INT count,
@@ -354,29 +354,29 @@ DWORD    WINAPI NtGdiGetGlyphOutline( HDC hdc, UINT ch, UINT format, GLYPHMETRIC
 DWORD    WINAPI NtGdiGetKerningPairs( HDC hdc, DWORD count, KERNINGPAIR *kern_pair );
 BOOL     WINAPI NtGdiGetMiterLimit( HDC hdc, FLOAT *limit );
 COLORREF WINAPI NtGdiGetNearestColor( HDC hdc, COLORREF color );
-UINT     WINAPI NtGdiGetNearestPaletteIndex( HPALETTE hpalette, COLORREF color );
+UINT     SYSCALL NtGdiGetNearestPaletteIndex( HPALETTE hpalette, COLORREF color );
 UINT     WINAPI NtGdiGetOutlineTextMetricsInternalW( HDC hdc, UINT cbData,
                                                      OUTLINETEXTMETRICW *otm, ULONG opts );
-INT      WINAPI NtGdiGetPath( HDC hdc, POINT *points, BYTE *types, INT size );
+INT      SYSCALL NtGdiGetPath( HDC hdc, POINT *points, BYTE *types, INT size );
 COLORREF WINAPI NtGdiGetPixel( HDC hdc, INT x, INT y );
 INT      WINAPI NtGdiGetRandomRgn( HDC hdc, HRGN region, INT code );
 BOOL     WINAPI NtGdiGetRasterizerCaps( RASTERIZER_STATUS *status, UINT size );
 BOOL     WINAPI NtGdiGetRealizationInfo( HDC hdc, struct font_realization_info *info );
-DWORD    WINAPI NtGdiGetRegionData( HRGN hrgn, DWORD count, RGNDATA *data );
-INT      WINAPI NtGdiGetRgnBox( HRGN hrgn, RECT *rect );
-DWORD    WINAPI NtGdiGetSpoolMessage( void *ptr1, DWORD data2, void *ptr3, DWORD data4 );
-UINT     WINAPI NtGdiGetSystemPaletteUse( HDC hdc );
+DWORD    SYSCALL NtGdiGetRegionData( HRGN hrgn, DWORD count, RGNDATA *data );
+INT      SYSCALL NtGdiGetRgnBox( HRGN hrgn, RECT *rect );
+DWORD    SYSCALL NtGdiGetSpoolMessage( void *ptr1, DWORD data2, void *ptr3, DWORD data4 );
+UINT     SYSCALL NtGdiGetSystemPaletteUse( HDC hdc );
 UINT     WINAPI NtGdiGetTextCharsetInfo( HDC hdc, FONTSIGNATURE *fs, DWORD flags );
 BOOL     WINAPI NtGdiGetTextExtentExW( HDC hdc, const WCHAR *str, INT count, INT max_ext,
                                        INT *nfit, INT *dxs, SIZE *size, UINT flags );
 INT      WINAPI NtGdiGetTextFaceW( HDC hdc, INT count, WCHAR *name, BOOL alias_name );
 BOOL     WINAPI NtGdiGetTextMetricsW( HDC hdc, TEXTMETRICW *metrics, ULONG flags );
-BOOL     WINAPI NtGdiGetTransform( HDC hdc, DWORD which, XFORM *xform );
+BOOL     SYSCALL NtGdiGetTransform( HDC hdc, DWORD which, XFORM *xform );
 BOOL     WINAPI NtGdiGradientFill( HDC hdc, TRIVERTEX *vert_array, ULONG nvert,
                                    void *grad_array, ULONG ngrad, ULONG mode );
-HFONT    WINAPI NtGdiHfontCreate( const void *logfont, ULONG unk2, ULONG unk3,
+HFONT    SYSCALL NtGdiHfontCreate( const void *logfont, ULONG unk2, ULONG unk3,
                                   ULONG unk4, void *data );
-DWORD    WINAPI NtGdiInitSpool(void);
+DWORD    SYSCALL NtGdiInitSpool(void);
 INT      WINAPI NtGdiIntersectClipRect( HDC hdc, INT left, INT top, INT right, INT bottom );
 BOOL     WINAPI NtGdiInvertRgn( HDC hdc, HRGN hrgn );
 BOOL     WINAPI NtGdiLineTo( HDC hdc, INT x, INT y );
@@ -386,25 +386,25 @@ BOOL     WINAPI NtGdiMaskBlt( HDC hdc, INT x_dst, INT y_dst, INT width_dst, INT
 BOOL     WINAPI NtGdiModifyWorldTransform( HDC hdc, const XFORM *xform, DWORD mode );
 BOOL     WINAPI NtGdiMoveTo( HDC hdc, INT x, INT y, POINT *pt );
 INT      WINAPI NtGdiOffsetClipRgn( HDC hdc, INT x, INT y );
-INT      WINAPI NtGdiOffsetRgn( HRGN hrgn, INT x, INT y );
+INT      SYSCALL NtGdiOffsetRgn( HRGN hrgn, INT x, INT y );
 HDC      WINAPI NtGdiOpenDCW( UNICODE_STRING *device, const DEVMODEW *devmode,
                               UNICODE_STRING *output, ULONG type, BOOL is_display,
                               HANDLE hspool, DRIVER_INFO_2W *driver_info, void *pdev );
 BOOL     WINAPI NtGdiPatBlt( HDC hdc, INT left, INT top, INT width, INT height, DWORD rop );
-HRGN     WINAPI NtGdiPathToRegion( HDC hdc );
+HRGN     SYSCALL NtGdiPathToRegion( HDC hdc );
 BOOL     WINAPI NtGdiPlgBlt( HDC hdc, const POINT *point, HDC hdc_src, INT x_src, INT y_src,
                              INT width, INT height, HBITMAP mask, INT x_mask, INT y_mask,
                              DWORD bk_color );
 BOOL     WINAPI NtGdiPolyDraw(HDC hdc, const POINT *points, const BYTE *types, DWORD count );
 ULONG    WINAPI NtGdiPolyPolyDraw( HDC hdc, const POINT *points, const ULONG *counts,
                                    DWORD count, UINT function );
-BOOL     WINAPI NtGdiPtInRegion( HRGN hrgn, INT x, INT y );
+BOOL     SYSCALL NtGdiPtInRegion( HRGN hrgn, INT x, INT y );
 BOOL     WINAPI NtGdiPtVisible( HDC hdc, INT x, INT y );
-BOOL     WINAPI NtGdiRectInRegion( HRGN hrgn, const RECT *rect );
+BOOL     SYSCALL NtGdiRectInRegion( HRGN hrgn, const RECT *rect );
 BOOL     WINAPI NtGdiRectVisible( HDC hdc, const RECT *rect );
 BOOL     WINAPI NtGdiRectangle( HDC hdc, INT left, INT top, INT right, INT bottom );
-BOOL     WINAPI NtGdiRemoveFontMemResourceEx( HANDLE handle );
-BOOL     WINAPI NtGdiRemoveFontResourceW( const WCHAR *str, ULONG size, ULONG files,
+BOOL     SYSCALL NtGdiRemoveFontMemResourceEx( HANDLE handle );
+BOOL     SYSCALL NtGdiRemoveFontResourceW( const WCHAR *str, ULONG size, ULONG files,
                                           DWORD flags, DWORD tid, void *dv );
 BOOL     WINAPI NtGdiResetDC( HDC hdc, const DEVMODEW *devmode, BOOL *banding,
                               DRIVER_INFO_2W *driver_info, void *dev );
@@ -412,7 +412,7 @@ BOOL     WINAPI NtGdiResizePalette( HPALETTE palette, UINT count );
 BOOL     WINAPI NtGdiRestoreDC( HDC hdc, INT level );
 BOOL     WINAPI NtGdiRoundRect( HDC hdc, INT left, INT top, INT right,
                                 INT bottom, INT ell_width, INT ell_height );
-INT      WINAPI NtGdiSaveDC( HDC hdc );
+INT      SYSCALL NtGdiSaveDC( HDC hdc );
 BOOL     WINAPI NtGdiScaleViewportExtEx( HDC hdc, INT x_num, INT x_denom,
                                         INT y_num, INT y_denom, SIZE *size );
 BOOL     WINAPI NtGdiScaleWindowExtEx( HDC hdc, INT x_num, INT x_denom,
@@ -422,11 +422,11 @@ HGDIOBJ  WINAPI NtGdiSelectBrush( HDC hdc, HGDIOBJ handle );
 BOOL     WINAPI NtGdiSelectClipPath( HDC hdc, INT mode );
 HGDIOBJ  WINAPI NtGdiSelectFont( HDC hdc, HGDIOBJ handle );
 HGDIOBJ  WINAPI NtGdiSelectPen( HDC hdc, HGDIOBJ handle );
-LONG     WINAPI NtGdiSetBitmapBits( HBITMAP hbitmap, LONG count, const void *bits );
-BOOL     WINAPI NtGdiSetBitmapDimension( HBITMAP hbitmap, INT x, INT y, SIZE *prev_size );
-BOOL     WINAPI NtGdiSetBrushOrg( HDC hdc, INT x, INT y, POINT *prev_org );
+LONG     SYSCALL NtGdiSetBitmapBits( HBITMAP hbitmap, LONG count, const void *bits );
+BOOL     SYSCALL NtGdiSetBitmapDimension( HBITMAP hbitmap, INT x, INT y, SIZE *prev_size );
+BOOL     SYSCALL NtGdiSetBrushOrg( HDC hdc, INT x, INT y, POINT *prev_org );
 UINT     WINAPI NtGdiSetBoundsRect( HDC hdc, const RECT *rect, UINT flags );
-BOOL     WINAPI NtGdiSetColorAdjustment( HDC hdc, const COLORADJUSTMENT *ca );
+BOOL     SYSCALL NtGdiSetColorAdjustment( HDC hdc, const COLORADJUSTMENT *ca );
 INT      WINAPI NtGdiSetDIBitsToDeviceInternal( HDC hdc, INT x_dst, INT y_dst, DWORD cx,
                                                 DWORD cy, INT x_src, INT y_src, UINT startscan,
                                                 UINT lines, const void *bits, const BITMAPINFO *bmi,
@@ -434,15 +434,15 @@ INT      WINAPI NtGdiSetDIBitsToDeviceInternal( HDC hdc, INT x_dst, INT y_dst, D
                                                 BOOL xform_coords, HANDLE xform );
 BOOL     WINAPI NtGdiSetDeviceGammaRamp( HDC hdc, void *ptr );
 DWORD    WINAPI NtGdiSetLayout( HDC hdc, LONG wox, DWORD layout );
-BOOL     WINAPI NtGdiSetMagicColors( HDC hdc, DWORD magic, ULONG index );
-INT      WINAPI NtGdiSetMetaRgn( HDC hdc );
+BOOL     SYSCALL NtGdiSetMagicColors( HDC hdc, DWORD magic, ULONG index );
+INT      SYSCALL NtGdiSetMetaRgn( HDC hdc );
 BOOL     WINAPI NtGdiSetMiterLimit( HDC hdc, FLOAT limit, FLOAT *prev_limit );
 COLORREF WINAPI NtGdiSetPixel( HDC hdc, INT x, INT y, COLORREF color );
-BOOL     WINAPI NtGdiSetPixelFormat( HDC hdc, INT format );
-BOOL     WINAPI NtGdiSetRectRgn( HRGN hrgn, INT left, INT top, INT right, INT bottom );
+BOOL     SYSCALL NtGdiSetPixelFormat( HDC hdc, INT format );
+BOOL     SYSCALL NtGdiSetRectRgn( HRGN hrgn, INT left, INT top, INT right, INT bottom );
 UINT     WINAPI NtGdiSetSystemPaletteUse( HDC hdc, UINT use );
-BOOL     WINAPI NtGdiSetTextJustification( HDC hdc, INT extra, INT breaks );
-BOOL     WINAPI NtGdiSetVirtualResolution( HDC hdc, DWORD horz_res, DWORD vert_res,
+BOOL     SYSCALL NtGdiSetTextJustification( HDC hdc, INT extra, INT breaks );
+BOOL     SYSCALL NtGdiSetVirtualResolution( HDC hdc, DWORD horz_res, DWORD vert_res,
                                            DWORD horz_size, DWORD vert_size );
 INT      WINAPI NtGdiStartDoc( HDC hdc, const DOCINFOW *doc, BOOL *banding, INT job );
 INT      WINAPI NtGdiStartPage( HDC hdc );
@@ -456,11 +456,11 @@ INT      WINAPI NtGdiStretchDIBitsInternal( HDC hdc, INT x_dst, INT y_dst, INT w
                                             HANDLE xform );
 BOOL     WINAPI NtGdiStrokeAndFillPath( HDC hdc );
 BOOL     WINAPI NtGdiStrokePath( HDC hdc );
-BOOL     WINAPI NtGdiSwapBuffers( HDC hdc );
+BOOL     SYSCALL NtGdiSwapBuffers( HDC hdc );
 BOOL     WINAPI NtGdiTransparentBlt( HDC hdc, int x_dst, int y_dst, int width_dst, int height_dst,
                                      HDC hdc_src, int x_src, int y_src, int width_src, int height_src,
                                      UINT color );
-BOOL     WINAPI NtGdiTransformPoints( HDC hdc, const POINT *points_in, POINT *points_out,
+BOOL     SYSCALL NtGdiTransformPoints( HDC hdc, const POINT *points_in, POINT *points_out,
                                       INT count, UINT mode );
 BOOL     WINAPI NtGdiUnrealizeObject( HGDIOBJ obj );
 BOOL     WINAPI NtGdiUpdateColors( HDC hdc );
@@ -469,16 +469,16 @@ BOOL     WINAPI NtGdiWidenPath( HDC hdc );
 NTSTATUS WINAPI NtGdiDdDDICheckVidPnExclusiveOwnership( const D3DKMT_CHECKVIDPNEXCLUSIVEOWNERSHIP *desc );
 NTSTATUS WINAPI NtGdiDdDDICloseAdapter( const D3DKMT_CLOSEADAPTER *desc );
 NTSTATUS WINAPI NtGdiDdDDICreateDCFromMemory( D3DKMT_CREATEDCFROMMEMORY *desc );
-NTSTATUS WINAPI NtGdiDdDDICreateDevice( D3DKMT_CREATEDEVICE *desc );
+NTSTATUS SYSCALL NtGdiDdDDICreateDevice( D3DKMT_CREATEDEVICE *desc );
 NTSTATUS WINAPI NtGdiDdDDIDestroyDCFromMemory( const D3DKMT_DESTROYDCFROMMEMORY *desc );
 NTSTATUS WINAPI NtGdiDdDDIDestroyDevice( const D3DKMT_DESTROYDEVICE *desc );
 NTSTATUS WINAPI NtGdiDdDDIEscape( const D3DKMT_ESCAPE *desc );
-NTSTATUS WINAPI NtGdiDdDDIOpenAdapterFromHdc( D3DKMT_OPENADAPTERFROMHDC *desc );
+NTSTATUS SYSCALL NtGdiDdDDIOpenAdapterFromHdc( D3DKMT_OPENADAPTERFROMHDC *desc );
 NTSTATUS WINAPI NtGdiDdDDIOpenAdapterFromDeviceName( D3DKMT_OPENADAPTERFROMDEVICENAME *desc );
 NTSTATUS WINAPI NtGdiDdDDIOpenAdapterFromLuid( D3DKMT_OPENADAPTERFROMLUID *desc );
-NTSTATUS WINAPI NtGdiDdDDIQueryStatistics( D3DKMT_QUERYSTATISTICS *stats );
+NTSTATUS SYSCALL NtGdiDdDDIQueryStatistics( D3DKMT_QUERYSTATISTICS *stats );
 NTSTATUS WINAPI NtGdiDdDDIQueryVideoMemoryInfo( D3DKMT_QUERYVIDEOMEMORYINFO *desc );
-NTSTATUS WINAPI NtGdiDdDDISetQueuedLimit( D3DKMT_SETQUEUEDLIMIT *desc );
+NTSTATUS SYSCALL NtGdiDdDDISetQueuedLimit( D3DKMT_SETQUEUEDLIMIT *desc );
 NTSTATUS WINAPI NtGdiDdDDISetVidPnSourceOwner( const D3DKMT_SETVIDPNSOURCEOWNER *desc );
 
 /* Wine extensions */
diff --git a/include/ntuser.h b/include/ntuser.h
index 11111111111..11111111111 100644
--- a/include/ntuser.h
+++ b/include/ntuser.h
@@ -655,270 +655,270 @@ struct packed_MDICREATESTRUCTW
 };
 
 
-HKL     WINAPI NtUserActivateKeyboardLayout( HKL layout, UINT flags );
-BOOL    WINAPI NtUserAddClipboardFormatListener( HWND hwnd );
-UINT    WINAPI NtUserAssociateInputContext( HWND hwnd, HIMC ctx, ULONG flags );
-BOOL    WINAPI NtUserAttachThreadInput( DWORD from, DWORD to, BOOL attach );
-HDC     WINAPI NtUserBeginPaint( HWND hwnd, PAINTSTRUCT *ps );
-NTSTATUS WINAPI NtUserBuildHimcList( UINT thread_id, UINT count, HIMC *buffer, UINT *size );
-NTSTATUS WINAPI NtUserBuildHwndList( HDESK desktop, ULONG unk2, ULONG unk3, ULONG unk4,
+HKL     SYSCALL NtUserActivateKeyboardLayout( HKL layout, UINT flags );
+BOOL    SYSCALL NtUserAddClipboardFormatListener( HWND hwnd );
+UINT    SYSCALL NtUserAssociateInputContext( HWND hwnd, HIMC ctx, ULONG flags );
+BOOL    SYSCALL NtUserAttachThreadInput( DWORD from, DWORD to, BOOL attach );
+HDC     SYSCALL NtUserBeginPaint( HWND hwnd, PAINTSTRUCT *ps );
+NTSTATUS SYSCALL NtUserBuildHimcList( UINT thread_id, UINT count, HIMC *buffer, UINT *size );
+NTSTATUS SYSCALL NtUserBuildHwndList( HDESK desktop, ULONG unk2, ULONG unk3, ULONG unk4,
                                      ULONG thread_id, ULONG count, HWND *buffer, ULONG *size );
-ULONG_PTR WINAPI NtUserCallHwnd( HWND hwnd, DWORD code );
-ULONG_PTR WINAPI NtUserCallHwndParam( HWND hwnd, DWORD_PTR param, DWORD code );
-LRESULT WINAPI NtUserCallNextHookEx( HHOOK hhook, INT code, WPARAM wparam, LPARAM lparam );
-BOOL    WINAPI NtUserCallMsgFilter( MSG *msg, INT code );
-ULONG_PTR WINAPI NtUserCallNoParam( ULONG code );
-ULONG_PTR WINAPI NtUserCallOneParam( ULONG_PTR arg, ULONG code );
-ULONG_PTR WINAPI NtUserCallTwoParam( ULONG_PTR arg1, ULONG_PTR arg2, ULONG code );
-BOOL    WINAPI NtUserChangeClipboardChain( HWND hwnd, HWND next );
-LONG    WINAPI NtUserChangeDisplaySettings( UNICODE_STRING *devname, DEVMODEW *devmode, HWND hwnd,
+ULONG_PTR SYSCALL NtUserCallHwnd( HWND hwnd, DWORD code );
+ULONG_PTR SYSCALL NtUserCallHwndParam( HWND hwnd, DWORD_PTR param, DWORD code );
+LRESULT SYSCALL NtUserCallNextHookEx( HHOOK hhook, INT code, WPARAM wparam, LPARAM lparam );
+BOOL    SYSCALL NtUserCallMsgFilter( MSG *msg, INT code );
+ULONG_PTR SYSCALL NtUserCallNoParam( ULONG code );
+ULONG_PTR SYSCALL NtUserCallOneParam( ULONG_PTR arg, ULONG code );
+ULONG_PTR SYSCALL NtUserCallTwoParam( ULONG_PTR arg1, ULONG_PTR arg2, ULONG code );
+BOOL    SYSCALL NtUserChangeClipboardChain( HWND hwnd, HWND next );
+LONG    SYSCALL NtUserChangeDisplaySettings( UNICODE_STRING *devname, DEVMODEW *devmode, HWND hwnd,
                                             DWORD flags, void *lparam );
-DWORD   WINAPI NtUserCheckMenuItem( HMENU handle, UINT id, UINT flags );
-HWND    WINAPI NtUserChildWindowFromPointEx( HWND parent, LONG x, LONG y, UINT flags );
-BOOL    WINAPI NtUserClipCursor( const RECT *rect );
-BOOL    WINAPI NtUserCloseClipboard(void);
-BOOL    WINAPI NtUserCloseDesktop( HDESK handle );
-BOOL    WINAPI NtUserCloseWindowStation( HWINSTA handle );
-INT     WINAPI NtUserCopyAcceleratorTable( HACCEL src, ACCEL *dst, INT count );
-INT     WINAPI NtUserCountClipboardFormats(void);
-HACCEL  WINAPI NtUserCreateAcceleratorTable( ACCEL *table, INT count );
-BOOL    WINAPI NtUserCreateCaret( HWND hwnd, HBITMAP bitmap, int width, int height );
-HDESK   WINAPI NtUserCreateDesktopEx( OBJECT_ATTRIBUTES *attr, UNICODE_STRING *device,
+DWORD   SYSCALL NtUserCheckMenuItem( HMENU handle, UINT id, UINT flags );
+HWND    SYSCALL NtUserChildWindowFromPointEx( HWND parent, LONG x, LONG y, UINT flags );
+BOOL    SYSCALL NtUserClipCursor( const RECT *rect );
+BOOL    SYSCALL NtUserCloseClipboard(void);
+BOOL    SYSCALL NtUserCloseDesktop( HDESK handle );
+BOOL    SYSCALL NtUserCloseWindowStation( HWINSTA handle );
+INT     SYSCALL NtUserCopyAcceleratorTable( HACCEL src, ACCEL *dst, INT count );
+INT     SYSCALL NtUserCountClipboardFormats(void);
+HACCEL  SYSCALL NtUserCreateAcceleratorTable( ACCEL *table, INT count );
+BOOL    SYSCALL NtUserCreateCaret( HWND hwnd, HBITMAP bitmap, int width, int height );
+HDESK   SYSCALL NtUserCreateDesktopEx( OBJECT_ATTRIBUTES *attr, UNICODE_STRING *device,
                                       DEVMODEW *devmode, DWORD flags, ACCESS_MASK access,
                                       ULONG heap_size );
-HIMC    WINAPI NtUserCreateInputContext( UINT_PTR client_ptr );
-HWND    WINAPI NtUserCreateWindowEx( DWORD ex_style, UNICODE_STRING *class_name,
+HIMC    SYSCALL NtUserCreateInputContext( UINT_PTR client_ptr );
+HWND    SYSCALL NtUserCreateWindowEx( DWORD ex_style, UNICODE_STRING *class_name,
                                      UNICODE_STRING *version, UNICODE_STRING *window_name,
                                      DWORD style, INT x, INT y, INT cx, INT cy,
                                      HWND parent, HMENU menu, HINSTANCE instance, void *params,
                                      DWORD flags, HINSTANCE client_instance, DWORD unk, BOOL ansi );
-HWINSTA WINAPI NtUserCreateWindowStation( OBJECT_ATTRIBUTES *attr, ACCESS_MASK mask, ULONG arg3,
+HWINSTA SYSCALL NtUserCreateWindowStation( OBJECT_ATTRIBUTES *attr, ACCESS_MASK mask, ULONG arg3,
                                           ULONG arg4, ULONG arg5, ULONG arg6, ULONG arg7 );
-HDWP    WINAPI NtUserDeferWindowPosAndBand( HDWP hdwp, HWND hwnd, HWND after, INT x, INT y,
+HDWP    SYSCALL NtUserDeferWindowPosAndBand( HDWP hdwp, HWND hwnd, HWND after, INT x, INT y,
                                             INT cx, INT cy, UINT flags, UINT unk1, UINT unk2 );
-BOOL    WINAPI NtUserDeleteMenu( HMENU menu, UINT id, UINT flags );
-BOOL    WINAPI NtUserDestroyAcceleratorTable( HACCEL handle );
-BOOL    WINAPI NtUserDestroyCursor( HCURSOR cursor, ULONG arg );
-BOOL    WINAPI NtUserDestroyInputContext( HIMC handle );
-BOOL    WINAPI NtUserDestroyMenu( HMENU menu );
-BOOL    WINAPI NtUserDestroyWindow( HWND hwnd );
-BOOL    WINAPI NtUserDisableThreadIme( DWORD thread_id );
-LRESULT WINAPI NtUserDispatchMessage( const MSG *msg );
-NTSTATUS WINAPI NtUserDisplayConfigGetDeviceInfo( DISPLAYCONFIG_DEVICE_INFO_HEADER *packet );
-BOOL    WINAPI NtUserDragDetect( HWND hwnd, int x, int y );
-DWORD   WINAPI NtUserDragObject( HWND parent, HWND hwnd, UINT fmt, ULONG_PTR data, HCURSOR cursor );
+BOOL    SYSCALL NtUserDeleteMenu( HMENU menu, UINT id, UINT flags );
+BOOL    SYSCALL NtUserDestroyAcceleratorTable( HACCEL handle );
+BOOL    SYSCALL NtUserDestroyCursor( HCURSOR cursor, ULONG arg );
+BOOL    SYSCALL NtUserDestroyInputContext( HIMC handle );
+BOOL    SYSCALL NtUserDestroyMenu( HMENU menu );
+BOOL    SYSCALL NtUserDestroyWindow( HWND hwnd );
+BOOL    SYSCALL NtUserDisableThreadIme( DWORD thread_id );
+LRESULT SYSCALL NtUserDispatchMessage( const MSG *msg );
+NTSTATUS SYSCALL NtUserDisplayConfigGetDeviceInfo( DISPLAYCONFIG_DEVICE_INFO_HEADER *packet );
+BOOL    SYSCALL NtUserDragDetect( HWND hwnd, int x, int y );
+DWORD   SYSCALL NtUserDragObject( HWND parent, HWND hwnd, UINT fmt, ULONG_PTR data, HCURSOR cursor );
 BOOL    WINAPI NtUserDrawCaptionTemp( HWND hwnd, HDC hdc, const RECT *rect, HFONT font,
                                       HICON icon, const WCHAR *str, UINT flags );
-BOOL    WINAPI NtUserDrawIconEx( HDC hdc, INT x0, INT y0, HICON icon, INT width,
+BOOL    SYSCALL NtUserDrawIconEx( HDC hdc, INT x0, INT y0, HICON icon, INT width,
                                  INT height, UINT istep, HBRUSH hbr, UINT flags );
 DWORD   WINAPI NtUserDrawMenuBarTemp( HWND hwnd, HDC hdc, RECT *rect, HMENU handle, HFONT font );
-BOOL    WINAPI NtUserEmptyClipboard(void);
-BOOL    WINAPI NtUserEnableMenuItem( HMENU handle, UINT id, UINT flags );
-BOOL    WINAPI NtUserEnableMouseInPointer( BOOL );
-BOOL    WINAPI NtUserEnableScrollBar( HWND hwnd, UINT bar, UINT flags );
-BOOL    WINAPI NtUserEndDeferWindowPosEx( HDWP hdwp, BOOL async );
-BOOL    WINAPI NtUserEndMenu(void);
+BOOL    SYSCALL NtUserEmptyClipboard(void);
+BOOL    SYSCALL NtUserEnableMenuItem( HMENU handle, UINT id, UINT flags );
+BOOL    SYSCALL NtUserEnableMouseInPointer( BOOL );
+BOOL    SYSCALL NtUserEnableScrollBar( HWND hwnd, UINT bar, UINT flags );
+BOOL    SYSCALL NtUserEndDeferWindowPosEx( HDWP hdwp, BOOL async );
+BOOL    SYSCALL NtUserEndMenu(void);
 BOOL    WINAPI NtUserEndPaint( HWND hwnd, const PAINTSTRUCT *ps );
-NTSTATUS WINAPI NtUserEnumDisplayDevices( UNICODE_STRING *device, DWORD index,
+NTSTATUS SYSCALL NtUserEnumDisplayDevices( UNICODE_STRING *device, DWORD index,
                                           DISPLAY_DEVICEW *info, DWORD flags );
-BOOL    WINAPI NtUserEnumDisplayMonitors( HDC hdc, RECT *rect, MONITORENUMPROC proc, LPARAM lp );
-BOOL    WINAPI NtUserEnumDisplaySettings( UNICODE_STRING *device, DWORD mode,
+BOOL    SYSCALL NtUserEnumDisplayMonitors( HDC hdc, RECT *rect, MONITORENUMPROC proc, LPARAM lp );
+BOOL    SYSCALL NtUserEnumDisplaySettings( UNICODE_STRING *device, DWORD mode,
                                           DEVMODEW *dev_mode, DWORD flags );
 INT     WINAPI NtUserExcludeUpdateRgn( HDC hdc, HWND hwnd );
-HICON   WINAPI NtUserFindExistingCursorIcon( UNICODE_STRING *module, UNICODE_STRING *res_name,
+HICON   SYSCALL NtUserFindExistingCursorIcon( UNICODE_STRING *module, UNICODE_STRING *res_name,
                                              void *desc );
-HWND    WINAPI NtUserFindWindowEx( HWND parent, HWND child, UNICODE_STRING *class,
+HWND    SYSCALL NtUserFindWindowEx( HWND parent, HWND child, UNICODE_STRING *class,
                                    UNICODE_STRING *title, ULONG unk );
-BOOL    WINAPI NtUserFlashWindowEx( FLASHWINFO *info );
-HWND    WINAPI NtUserGetAncestor( HWND hwnd, UINT type );
-SHORT   WINAPI NtUserGetAsyncKeyState( INT key );
-ULONG   WINAPI NtUserGetAtomName( ATOM atom, UNICODE_STRING *name );
-UINT    WINAPI NtUserGetCaretBlinkTime(void);
-BOOL    WINAPI NtUserGetCaretPos( POINT *point );
-ATOM    WINAPI NtUserGetClassInfoEx( HINSTANCE instance, UNICODE_STRING *name, WNDCLASSEXW *wc,
+BOOL    SYSCALL NtUserFlashWindowEx( FLASHWINFO *info );
+HWND    SYSCALL NtUserGetAncestor( HWND hwnd, UINT type );
+SHORT   SYSCALL NtUserGetAsyncKeyState( INT key );
+ULONG   SYSCALL NtUserGetAtomName( ATOM atom, UNICODE_STRING *name );
+UINT    SYSCALL NtUserGetCaretBlinkTime(void);
+BOOL    SYSCALL NtUserGetCaretPos( POINT *point );
+ATOM    SYSCALL NtUserGetClassInfoEx( HINSTANCE instance, UNICODE_STRING *name, WNDCLASSEXW *wc,
                                      struct client_menu_name *menu_name, BOOL ansi );
-INT     WINAPI NtUserGetClassName( HWND hwnd, BOOL real, UNICODE_STRING *name );
-HANDLE  WINAPI NtUserGetClipboardData( UINT format, struct get_clipboard_params *params );
-INT     WINAPI NtUserGetClipboardFormatName( UINT format, WCHAR *buffer, INT maxlen );
-HWND    WINAPI NtUserGetClipboardOwner(void);
-DWORD   WINAPI NtUserGetClipboardSequenceNumber(void);
-HWND    WINAPI NtUserGetClipboardViewer(void);
-HCURSOR WINAPI NtUserGetCursor(void);
-HCURSOR WINAPI NtUserGetCursorFrameInfo( HCURSOR hCursor, DWORD istep, DWORD *rate_jiffies,
+INT     SYSCALL NtUserGetClassName( HWND hwnd, BOOL real, UNICODE_STRING *name );
+HANDLE  SYSCALL NtUserGetClipboardData( UINT format, struct get_clipboard_params *params );
+INT     SYSCALL NtUserGetClipboardFormatName( UINT format, WCHAR *buffer, INT maxlen );
+HWND    SYSCALL NtUserGetClipboardOwner(void);
+DWORD   SYSCALL NtUserGetClipboardSequenceNumber(void);
+HWND    SYSCALL NtUserGetClipboardViewer(void);
+HCURSOR SYSCALL NtUserGetCursor(void);
+HCURSOR SYSCALL NtUserGetCursorFrameInfo( HCURSOR hCursor, DWORD istep, DWORD *rate_jiffies,
                                          DWORD *num_steps );
-BOOL    WINAPI NtUserGetCursorInfo( CURSORINFO *info );
-HDC     WINAPI NtUserGetDC( HWND hwnd );
-HDC     WINAPI NtUserGetDCEx( HWND hwnd, HRGN clip_rgn, DWORD flags );
-LONG    WINAPI NtUserGetDisplayConfigBufferSizes( UINT32 flags, UINT32 *num_path_info,
+BOOL    SYSCALL NtUserGetCursorInfo( CURSORINFO *info );
+HDC     SYSCALL NtUserGetDC( HWND hwnd );
+HDC     SYSCALL NtUserGetDCEx( HWND hwnd, HRGN clip_rgn, DWORD flags );
+LONG    SYSCALL NtUserGetDisplayConfigBufferSizes( UINT32 flags, UINT32 *num_path_info,
                                                   UINT32 *num_mode_info );
-UINT    WINAPI NtUserGetDoubleClickTime(void);
-BOOL    WINAPI NtUserGetDpiForMonitor( HMONITOR monitor, UINT type, UINT *x, UINT *y );
-HWND    WINAPI NtUserGetForegroundWindow(void);
-BOOL    WINAPI NtUserGetGUIThreadInfo( DWORD id, GUITHREADINFO *info );
-BOOL    WINAPI NtUserGetIconInfo( HICON icon, ICONINFO *info, UNICODE_STRING *module,
+UINT    SYSCALL NtUserGetDoubleClickTime(void);
+BOOL    SYSCALL NtUserGetDpiForMonitor( HMONITOR monitor, UINT type, UINT *x, UINT *y );
+HWND    SYSCALL NtUserGetForegroundWindow(void);
+BOOL    SYSCALL NtUserGetGUIThreadInfo( DWORD id, GUITHREADINFO *info );
+BOOL    SYSCALL NtUserGetIconInfo( HICON icon, ICONINFO *info, UNICODE_STRING *module,
                                   UNICODE_STRING *res_name, DWORD *bpp, LONG unk );
-BOOL    WINAPI NtUserGetIconSize( HICON handle, UINT step, LONG *width, LONG *height );
-UINT    WINAPI NtUserGetInternalWindowPos( HWND hwnd, RECT *rect, POINT *pt );
-INT     WINAPI NtUserGetKeyNameText( LONG lparam, WCHAR *buffer, INT size );
-SHORT   WINAPI NtUserGetKeyState( INT vkey );
-HKL     WINAPI NtUserGetKeyboardLayout( DWORD thread_id );
-UINT    WINAPI NtUserGetKeyboardLayoutList( INT size, HKL *layouts );
-BOOL    WINAPI NtUserGetKeyboardLayoutName( WCHAR *name );
-BOOL    WINAPI NtUserGetKeyboardState( BYTE *state );
-BOOL    WINAPI NtUserGetLayeredWindowAttributes( HWND hwnd, COLORREF *key, BYTE *alpha, DWORD *flags );
-BOOL    WINAPI NtUserGetMenuBarInfo( HWND hwnd, LONG id, LONG item, MENUBARINFO *info );
-BOOL    WINAPI NtUserGetMenuItemRect( HWND hwnd, HMENU menu, UINT item, RECT *rect );
-BOOL    WINAPI NtUserGetMessage( MSG *msg, HWND hwnd, UINT first, UINT last );
-int     WINAPI NtUserGetMouseMovePointsEx( UINT size, MOUSEMOVEPOINT *ptin, MOUSEMOVEPOINT *ptout,
+BOOL    SYSCALL NtUserGetIconSize( HICON handle, UINT step, LONG *width, LONG *height );
+UINT    SYSCALL NtUserGetInternalWindowPos( HWND hwnd, RECT *rect, POINT *pt );
+INT     SYSCALL NtUserGetKeyNameText( LONG lparam, WCHAR *buffer, INT size );
+SHORT   SYSCALL NtUserGetKeyState( INT vkey );
+HKL     SYSCALL NtUserGetKeyboardLayout( DWORD thread_id );
+UINT    SYSCALL NtUserGetKeyboardLayoutList( INT size, HKL *layouts );
+BOOL    SYSCALL NtUserGetKeyboardLayoutName( WCHAR *name );
+BOOL    SYSCALL NtUserGetKeyboardState( BYTE *state );
+BOOL    SYSCALL NtUserGetLayeredWindowAttributes( HWND hwnd, COLORREF *key, BYTE *alpha, DWORD *flags );
+BOOL    SYSCALL NtUserGetMenuBarInfo( HWND hwnd, LONG id, LONG item, MENUBARINFO *info );
+BOOL    SYSCALL NtUserGetMenuItemRect( HWND hwnd, HMENU menu, UINT item, RECT *rect );
+BOOL    SYSCALL NtUserGetMessage( MSG *msg, HWND hwnd, UINT first, UINT last );
+int     SYSCALL NtUserGetMouseMovePointsEx( UINT size, MOUSEMOVEPOINT *ptin, MOUSEMOVEPOINT *ptout,
                                            int count, DWORD resolution );
-BOOL    WINAPI NtUserGetObjectInformation( HANDLE handle, INT index, void *info,
+BOOL    SYSCALL NtUserGetObjectInformation( HANDLE handle, INT index, void *info,
                                            DWORD len, DWORD *needed );
-HWND    WINAPI NtUserGetOpenClipboardWindow(void);
-BOOL    WINAPI NtUserGetPointerInfoList( UINT32 id, POINTER_INPUT_TYPE type, UINT_PTR, UINT_PTR, SIZE_T size,
-                                         UINT32 *entry_count, UINT32 *pointer_count, void *pointer_info );
-INT     WINAPI NtUserGetPriorityClipboardFormat( UINT *list, INT count );
-HWINSTA WINAPI NtUserGetProcessWindowStation(void);
-HANDLE  WINAPI NtUserGetProp( HWND hwnd, const WCHAR *str );
-ULONG   WINAPI NtUserGetProcessDpiAwarenessContext( HANDLE process );
-DWORD   WINAPI NtUserGetQueueStatus( UINT flags );
-UINT    WINAPI NtUserGetRawInputBuffer( RAWINPUT *data, UINT *data_size, UINT header_size );
-UINT    WINAPI NtUserGetRawInputData( HRAWINPUT rawinput, UINT command, void *data, UINT *data_size, UINT header_size );
-UINT    WINAPI NtUserGetRawInputDeviceInfo( HANDLE handle, UINT command, void *data, UINT *data_size );
-UINT    WINAPI NtUserGetRawInputDeviceList( RAWINPUTDEVICELIST *devices, UINT *device_count, UINT size );
-UINT    WINAPI NtUserGetRegisteredRawInputDevices( RAWINPUTDEVICE *devices, UINT *device_count, UINT size );
-BOOL    WINAPI NtUserGetScrollBarInfo( HWND hwnd, LONG id, SCROLLBARINFO *info );
-ULONG   WINAPI NtUserGetSystemDpiForProcess( HANDLE process );
-HMENU   WINAPI NtUserGetSystemMenu( HWND hwnd, BOOL revert );
-HDESK   WINAPI NtUserGetThreadDesktop( DWORD thread );
-BOOL    WINAPI NtUserGetTitleBarInfo( HWND hwnd, TITLEBARINFO *info );
-INT     WINAPI NtUserGetUpdateRgn( HWND hwnd, HRGN hrgn, BOOL erase );
-BOOL    WINAPI NtUserGetUpdatedClipboardFormats( UINT *formats, UINT size, UINT *out_size );
-BOOL    WINAPI NtUserGetUpdateRect( HWND hwnd, RECT *rect, BOOL erase );
-HDC     WINAPI NtUserGetWindowDC( HWND hwnd );
-BOOL    WINAPI NtUserGetWindowPlacement( HWND hwnd, WINDOWPLACEMENT *placement );
-int     WINAPI NtUserGetWindowRgnEx( HWND hwnd, HRGN hrgn, UINT unk );
-BOOL    WINAPI NtUserHideCaret( HWND hwnd );
-BOOL    WINAPI NtUserHiliteMenuItem( HWND hwnd, HMENU handle, UINT item, UINT hilite );
-NTSTATUS WINAPI NtUserInitializeClientPfnArrays( const struct user_client_procs *client_procsA,
+HWND    SYSCALL NtUserGetOpenClipboardWindow(void);
+BOOL    SYSCALL NtUserGetPointerInfoList( UINT32 id, POINTER_INPUT_TYPE type, UINT_PTR, UINT_PTR, SIZE_T size,
+                                          UINT32 *entry_count, UINT32 *pointer_count, void *pointer_info );
+INT     SYSCALL NtUserGetPriorityClipboardFormat( UINT *list, INT count );
+HWINSTA SYSCALL NtUserGetProcessWindowStation(void);
+HANDLE  SYSCALL NtUserGetProp( HWND hwnd, const WCHAR *str );
+ULONG   SYSCALL NtUserGetProcessDpiAwarenessContext( HANDLE process );
+DWORD   SYSCALL NtUserGetQueueStatus( UINT flags );
+UINT    SYSCALL NtUserGetRawInputBuffer( RAWINPUT *data, UINT *data_size, UINT header_size );
+UINT    SYSCALL NtUserGetRawInputData( HRAWINPUT rawinput, UINT command, void *data, UINT *data_size, UINT header_size );
+UINT    SYSCALL NtUserGetRawInputDeviceInfo( HANDLE handle, UINT command, void *data, UINT *data_size );
+UINT    SYSCALL NtUserGetRawInputDeviceList( RAWINPUTDEVICELIST *devices, UINT *device_count, UINT size );
+UINT    SYSCALL NtUserGetRegisteredRawInputDevices( RAWINPUTDEVICE *devices, UINT *device_count, UINT size );
+BOOL    SYSCALL NtUserGetScrollBarInfo( HWND hwnd, LONG id, SCROLLBARINFO *info );
+ULONG   SYSCALL NtUserGetSystemDpiForProcess( HANDLE process );
+HMENU   SYSCALL NtUserGetSystemMenu( HWND hwnd, BOOL revert );
+HDESK   SYSCALL NtUserGetThreadDesktop( DWORD thread );
+BOOL    SYSCALL NtUserGetTitleBarInfo( HWND hwnd, TITLEBARINFO *info );
+INT     SYSCALL NtUserGetUpdateRgn( HWND hwnd, HRGN hrgn, BOOL erase );
+BOOL    SYSCALL NtUserGetUpdatedClipboardFormats( UINT *formats, UINT size, UINT *out_size );
+BOOL    SYSCALL NtUserGetUpdateRect( HWND hwnd, RECT *rect, BOOL erase );
+HDC     SYSCALL NtUserGetWindowDC( HWND hwnd );
+BOOL    SYSCALL NtUserGetWindowPlacement( HWND hwnd, WINDOWPLACEMENT *placement );
+int     SYSCALL NtUserGetWindowRgnEx( HWND hwnd, HRGN hrgn, UINT unk );
+BOOL    SYSCALL NtUserHideCaret( HWND hwnd );
+BOOL    SYSCALL NtUserHiliteMenuItem( HWND hwnd, HMENU handle, UINT item, UINT hilite );
+NTSTATUS SYSCALL NtUserInitializeClientPfnArrays( const struct user_client_procs *client_procsA,
                                                  const struct user_client_procs *client_procsW,
                                                  const void *client_workers, HINSTANCE user_module );
-HICON   WINAPI NtUserInternalGetWindowIcon( HWND hwnd, UINT type );
-INT     WINAPI NtUserInternalGetWindowText( HWND hwnd, WCHAR *text, INT count );
-BOOL    WINAPI NtUserIsClipboardFormatAvailable( UINT format );
-BOOL    WINAPI NtUserIsMouseInPointerEnabled(void);
-BOOL    WINAPI NtUserInvalidateRect( HWND hwnd, const RECT *rect, BOOL erase );
-BOOL    WINAPI NtUserInvalidateRgn( HWND hwnd, HRGN hrgn, BOOL erase );
-BOOL    WINAPI NtUserKillTimer( HWND hwnd, UINT_PTR id );
-BOOL    WINAPI NtUserLockWindowUpdate( HWND hwnd );
-BOOL    WINAPI NtUserLogicalToPerMonitorDPIPhysicalPoint( HWND hwnd, POINT *pt );
-UINT    WINAPI NtUserMapVirtualKeyEx( UINT code, UINT type, HKL layout );
-INT     WINAPI NtUserMenuItemFromPoint( HWND hwnd, HMENU handle, int x, int y );
-LRESULT WINAPI NtUserMessageCall( HWND hwnd, UINT msg, WPARAM wparam, LPARAM lparam,
+HICON   SYSCALL NtUserInternalGetWindowIcon( HWND hwnd, UINT type );
+INT     SYSCALL NtUserInternalGetWindowText( HWND hwnd, WCHAR *text, INT count );
+BOOL    SYSCALL NtUserIsClipboardFormatAvailable( UINT format );
+BOOL    SYSCALL NtUserIsMouseInPointerEnabled(void);
+BOOL    SYSCALL NtUserInvalidateRect( HWND hwnd, const RECT *rect, BOOL erase );
+BOOL    SYSCALL NtUserInvalidateRgn( HWND hwnd, HRGN hrgn, BOOL erase );
+BOOL    SYSCALL NtUserKillTimer( HWND hwnd, UINT_PTR id );
+BOOL    SYSCALL NtUserLockWindowUpdate( HWND hwnd );
+BOOL    SYSCALL NtUserLogicalToPerMonitorDPIPhysicalPoint( HWND hwnd, POINT *pt );
+UINT    SYSCALL NtUserMapVirtualKeyEx( UINT code, UINT type, HKL layout );
+INT     SYSCALL NtUserMenuItemFromPoint( HWND hwnd, HMENU handle, int x, int y );
+LRESULT SYSCALL NtUserMessageCall( HWND hwnd, UINT msg, WPARAM wparam, LPARAM lparam,
                                   void *result_info, DWORD type, BOOL ansi );
-BOOL    WINAPI NtUserMoveWindow( HWND hwnd, INT x, INT y, INT cx, INT cy, BOOL repaint );
-DWORD   WINAPI NtUserMsgWaitForMultipleObjectsEx( DWORD count, const HANDLE *handles,
+BOOL    SYSCALL NtUserMoveWindow( HWND hwnd, INT x, INT y, INT cx, INT cy, BOOL repaint );
+DWORD   SYSCALL NtUserMsgWaitForMultipleObjectsEx( DWORD count, const HANDLE *handles,
                                                   DWORD timeout, DWORD mask, DWORD flags );
-void    WINAPI NtUserNotifyWinEvent( DWORD event, HWND hwnd, LONG object_id, LONG child_id );
-HWINSTA WINAPI NtUserOpenWindowStation( OBJECT_ATTRIBUTES *attr, ACCESS_MASK access );
-BOOL    WINAPI NtUserOpenClipboard( HWND hwnd, ULONG unk );
-HDESK   WINAPI NtUserOpenDesktop( OBJECT_ATTRIBUTES *attr, DWORD flags, ACCESS_MASK access );
-HDESK   WINAPI NtUserOpenInputDesktop( DWORD flags, BOOL inherit, ACCESS_MASK access );
-BOOL    WINAPI NtUserPeekMessage( MSG *msg_out, HWND hwnd, UINT first, UINT last, UINT flags );
-BOOL    WINAPI NtUserPerMonitorDPIPhysicalToLogicalPoint( HWND hwnd, POINT *pt );
-BOOL    WINAPI NtUserPostMessage( HWND hwnd, UINT msg, WPARAM wparam, LPARAM lparam );
-BOOL    WINAPI NtUserPostThreadMessage( DWORD thread, UINT msg, WPARAM wparam, LPARAM lparam );
-BOOL    WINAPI NtUserPrintWindow( HWND hwnd, HDC hdc, UINT flags );
-UINT_PTR WINAPI NtUserQueryInputContext( HIMC handle, UINT attr );
-HWND    WINAPI NtUserRealChildWindowFromPoint( HWND parent, LONG x, LONG y );
-BOOL    WINAPI NtUserRedrawWindow( HWND hwnd, const RECT *rect, HRGN hrgn, UINT flags );
-ATOM    WINAPI NtUserRegisterClassExWOW( const WNDCLASSEXW *wc, UNICODE_STRING *name, UNICODE_STRING *version,
+void    SYSCALL NtUserNotifyWinEvent( DWORD event, HWND hwnd, LONG object_id, LONG child_id );
+HWINSTA SYSCALL NtUserOpenWindowStation( OBJECT_ATTRIBUTES *attr, ACCESS_MASK access );
+BOOL    SYSCALL NtUserOpenClipboard( HWND hwnd, ULONG unk );
+HDESK   SYSCALL NtUserOpenDesktop( OBJECT_ATTRIBUTES *attr, DWORD flags, ACCESS_MASK access );
+HDESK   SYSCALL NtUserOpenInputDesktop( DWORD flags, BOOL inherit, ACCESS_MASK access );
+BOOL    SYSCALL NtUserPeekMessage( MSG *msg_out, HWND hwnd, UINT first, UINT last, UINT flags );
+BOOL    SYSCALL NtUserPerMonitorDPIPhysicalToLogicalPoint( HWND hwnd, POINT *pt );
+BOOL    SYSCALL NtUserPostMessage( HWND hwnd, UINT msg, WPARAM wparam, LPARAM lparam );
+BOOL    SYSCALL NtUserPostThreadMessage( DWORD thread, UINT msg, WPARAM wparam, LPARAM lparam );
+BOOL    SYSCALL NtUserPrintWindow( HWND hwnd, HDC hdc, UINT flags );
+UINT_PTR SYSCALL NtUserQueryInputContext( HIMC handle, UINT attr );
+HWND    SYSCALL NtUserRealChildWindowFromPoint( HWND parent, LONG x, LONG y );
+BOOL    SYSCALL NtUserRedrawWindow( HWND hwnd, const RECT *rect, HRGN hrgn, UINT flags );
+ATOM    SYSCALL NtUserRegisterClassExWOW( const WNDCLASSEXW *wc, UNICODE_STRING *name, UNICODE_STRING *version,
                                          struct client_menu_name *client_menu_name, DWORD fnid, DWORD flags,
                                          DWORD *wow );
-BOOL    WINAPI NtUserRegisterHotKey( HWND hwnd, INT id, UINT modifiers, UINT vk );
-BOOL    WINAPI NtUserRegisterRawInputDevices( const RAWINPUTDEVICE *devices, UINT device_count, UINT size );
+BOOL    SYSCALL NtUserRegisterHotKey( HWND hwnd, INT id, UINT modifiers, UINT vk );
+BOOL    SYSCALL NtUserRegisterRawInputDevices( const RAWINPUTDEVICE *devices, UINT device_count, UINT size );
 INT     WINAPI NtUserReleaseDC( HWND hwnd, HDC hdc );
-BOOL    WINAPI NtUserRemoveClipboardFormatListener( HWND hwnd );
-BOOL    WINAPI NtUserRemoveMenu( HMENU menu, UINT id, UINT flags );
-HANDLE  WINAPI NtUserRemoveProp( HWND hwnd, const WCHAR *str );
+BOOL    SYSCALL NtUserRemoveClipboardFormatListener( HWND hwnd );
+BOOL    SYSCALL NtUserRemoveMenu( HMENU menu, UINT id, UINT flags );
+HANDLE  SYSCALL NtUserRemoveProp( HWND hwnd, const WCHAR *str );
 BOOL    WINAPI NtUserScrollDC( HDC hdc, INT dx, INT dy, const RECT *scroll, const RECT *clip,
                                HRGN ret_update_rgn, RECT *update_rect );
-INT     WINAPI NtUserScrollWindowEx( HWND hwnd, INT dx, INT dy, const RECT *rect,
+INT     SYSCALL NtUserScrollWindowEx( HWND hwnd, INT dx, INT dy, const RECT *rect,
                                      const RECT *clip_rect, HRGN update_rgn,
                                      RECT *update_rect, UINT flags ) DECLSPEC_HIDDEN;
 HPALETTE WINAPI NtUserSelectPalette( HDC hdc, HPALETTE palette, WORD force_background );
-UINT     WINAPI NtUserSendInput( UINT count, INPUT *inputs, int size );
-HWND     WINAPI NtUserSetActiveWindow( HWND hwnd );
-HWND     WINAPI NtUserSetCapture( HWND hwnd );
-DWORD    WINAPI NtUserSetClassLong( HWND hwnd, INT offset, LONG newval, BOOL ansi );
-ULONG_PTR WINAPI NtUserSetClassLongPtr( HWND hwnd, INT offset, LONG_PTR newval, BOOL ansi );
-WORD    WINAPI NtUserSetClassWord( HWND hwnd, INT offset, WORD newval );
-NTSTATUS WINAPI NtUserSetClipboardData( UINT format, HANDLE handle, struct set_clipboard_params *params );
-HWND    WINAPI NtUserSetClipboardViewer( HWND hwnd );
-HCURSOR WINAPI NtUserSetCursor( HCURSOR cursor );
-BOOL    WINAPI NtUserSetCursorIconData( HCURSOR cursor, UNICODE_STRING *module, UNICODE_STRING *res_name,
+UINT     SYSCALL NtUserSendInput( UINT count, INPUT *inputs, int size );
+HWND     SYSCALL NtUserSetActiveWindow( HWND hwnd );
+HWND     SYSCALL NtUserSetCapture( HWND hwnd );
+DWORD    SYSCALL NtUserSetClassLong( HWND hwnd, INT offset, LONG newval, BOOL ansi );
+ULONG_PTR SYSCALL NtUserSetClassLongPtr( HWND hwnd, INT offset, LONG_PTR newval, BOOL ansi );
+WORD    SYSCALL NtUserSetClassWord( HWND hwnd, INT offset, WORD newval );
+NTSTATUS SYSCALL NtUserSetClipboardData( UINT format, HANDLE handle, struct set_clipboard_params *params );
+HWND    SYSCALL NtUserSetClipboardViewer( HWND hwnd );
+HCURSOR SYSCALL NtUserSetCursor( HCURSOR cursor );
+BOOL    SYSCALL NtUserSetCursorIconData( HCURSOR cursor, UNICODE_STRING *module, UNICODE_STRING *res_name,
                                         struct cursoricon_desc *desc );
-BOOL    WINAPI NtUserSetCursorPos( INT x, INT y );
-HWND    WINAPI NtUserSetFocus( HWND hwnd );
-void    WINAPI NtUserSetInternalWindowPos( HWND hwnd, UINT cmd, RECT *rect, POINT *pt );
-BOOL    WINAPI NtUserSetKeyboardState( BYTE *state );
-BOOL    WINAPI NtUserSetLayeredWindowAttributes( HWND hwnd, COLORREF key, BYTE alpha, DWORD flags );
-BOOL    WINAPI NtUserSetMenu( HWND hwnd, HMENU menu );
-BOOL    WINAPI NtUserSetMenuContextHelpId( HMENU handle, DWORD id );
-BOOL    WINAPI NtUserSetMenuDefaultItem( HMENU handle, UINT item, UINT bypos );
-BOOL    WINAPI NtUserSetObjectInformation( HANDLE handle, INT index, void *info, DWORD len );
-HWND    WINAPI NtUserSetParent( HWND hwnd, HWND parent );
-BOOL    WINAPI NtUserSetProcessDpiAwarenessContext( ULONG awareness, ULONG unknown );
-BOOL    WINAPI NtUserSetProcessWindowStation( HWINSTA handle );
-BOOL    WINAPI NtUserSetProp( HWND hwnd, const WCHAR *str, HANDLE handle );
-INT     WINAPI NtUserSetScrollInfo( HWND hwnd, INT bar, const SCROLLINFO *info, BOOL redraw );
-BOOL    WINAPI NtUserSetShellWindowEx( HWND shell, HWND list_view );
-BOOL    WINAPI NtUserSetSysColors( INT count, const INT *colors, const COLORREF *values );
-BOOL    WINAPI NtUserSetSystemMenu( HWND hwnd, HMENU menu );
-UINT_PTR WINAPI NtUserSetSystemTimer( HWND hwnd, UINT_PTR id, UINT timeout );
-BOOL    WINAPI NtUserSetThreadDesktop( HDESK handle );
-UINT_PTR WINAPI NtUserSetTimer( HWND hwnd, UINT_PTR id, UINT timeout, TIMERPROC proc, ULONG tolerance );
-LONG    WINAPI NtUserSetWindowLong( HWND hwnd, INT offset, LONG newval, BOOL ansi );
-LONG_PTR WINAPI NtUserSetWindowLongPtr( HWND hwnd, INT offset, LONG_PTR newval, BOOL ansi );
-BOOL    WINAPI NtUserSetWindowPlacement( HWND hwnd, const WINDOWPLACEMENT *wpl );
-BOOL    WINAPI NtUserSetWindowPos( HWND hwnd, HWND after, INT x, INT y, INT cx, INT cy, UINT flags );
-int     WINAPI NtUserSetWindowRgn( HWND hwnd, HRGN hrgn, BOOL redraw );
-WORD    WINAPI NtUserSetWindowWord( HWND hwnd, INT offset, WORD newval );
-HHOOK   WINAPI NtUserSetWindowsHookEx( HINSTANCE inst, UNICODE_STRING *module, DWORD tid, INT id,
+BOOL    SYSCALL NtUserSetCursorPos( INT x, INT y );
+HWND    SYSCALL NtUserSetFocus( HWND hwnd );
+void    SYSCALL NtUserSetInternalWindowPos( HWND hwnd, UINT cmd, RECT *rect, POINT *pt );
+BOOL    SYSCALL NtUserSetKeyboardState( BYTE *state );
+BOOL    SYSCALL NtUserSetLayeredWindowAttributes( HWND hwnd, COLORREF key, BYTE alpha, DWORD flags );
+BOOL    SYSCALL NtUserSetMenu( HWND hwnd, HMENU menu );
+BOOL    SYSCALL NtUserSetMenuContextHelpId( HMENU handle, DWORD id );
+BOOL    SYSCALL NtUserSetMenuDefaultItem( HMENU handle, UINT item, UINT bypos );
+BOOL    SYSCALL NtUserSetObjectInformation( HANDLE handle, INT index, void *info, DWORD len );
+HWND    SYSCALL NtUserSetParent( HWND hwnd, HWND parent );
+BOOL    SYSCALL NtUserSetProcessDpiAwarenessContext( ULONG awareness, ULONG unknown );
+BOOL    SYSCALL NtUserSetProcessWindowStation( HWINSTA handle );
+BOOL    SYSCALL NtUserSetProp( HWND hwnd, const WCHAR *str, HANDLE handle );
+INT     SYSCALL NtUserSetScrollInfo( HWND hwnd, INT bar, const SCROLLINFO *info, BOOL redraw );
+BOOL    SYSCALL NtUserSetShellWindowEx( HWND shell, HWND list_view );
+BOOL    SYSCALL NtUserSetSysColors( INT count, const INT *colors, const COLORREF *values );
+BOOL    SYSCALL NtUserSetSystemMenu( HWND hwnd, HMENU menu );
+UINT_PTR SYSCALL NtUserSetSystemTimer( HWND hwnd, UINT_PTR id, UINT timeout );
+BOOL    SYSCALL NtUserSetThreadDesktop( HDESK handle );
+UINT_PTR SYSCALL NtUserSetTimer( HWND hwnd, UINT_PTR id, UINT timeout, TIMERPROC proc, ULONG tolerance );
+LONG    SYSCALL NtUserSetWindowLong( HWND hwnd, INT offset, LONG newval, BOOL ansi );
+LONG_PTR SYSCALL NtUserSetWindowLongPtr( HWND hwnd, INT offset, LONG_PTR newval, BOOL ansi );
+BOOL    SYSCALL NtUserSetWindowPlacement( HWND hwnd, const WINDOWPLACEMENT *wpl );
+BOOL    SYSCALL NtUserSetWindowPos( HWND hwnd, HWND after, INT x, INT y, INT cx, INT cy, UINT flags );
+int     SYSCALL NtUserSetWindowRgn( HWND hwnd, HRGN hrgn, BOOL redraw );
+WORD    SYSCALL NtUserSetWindowWord( HWND hwnd, INT offset, WORD newval );
+HHOOK   SYSCALL NtUserSetWindowsHookEx( HINSTANCE inst, UNICODE_STRING *module, DWORD tid, INT id,
                                        HOOKPROC proc, BOOL ansi );
-HWINEVENTHOOK WINAPI NtUserSetWinEventHook( DWORD event_min, DWORD event_max, HMODULE inst,
+HWINEVENTHOOK SYSCALL NtUserSetWinEventHook( DWORD event_min, DWORD event_max, HMODULE inst,
                                             UNICODE_STRING *module, WINEVENTPROC proc,
                                             DWORD pid, DWORD tid, DWORD flags );
-BOOL    WINAPI NtUserShowCaret( HWND hwnd );
-INT     WINAPI NtUserShowCursor( BOOL show );
-BOOL    WINAPI NtUserShowScrollBar( HWND hwnd, INT bar, BOOL show );
-BOOL    WINAPI NtUserShowWindow( HWND hwnd, INT cmd );
-BOOL    WINAPI NtUserShowWindowAsync( HWND hwnd, INT cmd );
-BOOL    WINAPI NtUserSystemParametersInfo( UINT action, UINT val, void *ptr, UINT winini );
-BOOL    WINAPI NtUserSystemParametersInfoForDpi( UINT action, UINT val, PVOID ptr, UINT winini, UINT dpi );
-BOOL    WINAPI NtUserThunkedMenuInfo( HMENU menu, const MENUINFO *info );
-UINT    WINAPI NtUserThunkedMenuItemInfo( HMENU menu, UINT pos, UINT flags, UINT method,
+BOOL    SYSCALL NtUserShowCaret( HWND hwnd );
+INT     SYSCALL NtUserShowCursor( BOOL show );
+BOOL    SYSCALL NtUserShowScrollBar( HWND hwnd, INT bar, BOOL show );
+BOOL    SYSCALL NtUserShowWindow( HWND hwnd, INT cmd );
+BOOL    SYSCALL NtUserShowWindowAsync( HWND hwnd, INT cmd );
+BOOL    SYSCALL NtUserSystemParametersInfo( UINT action, UINT val, void *ptr, UINT winini );
+BOOL    SYSCALL NtUserSystemParametersInfoForDpi( UINT action, UINT val, PVOID ptr, UINT winini, UINT dpi );
+BOOL    SYSCALL NtUserThunkedMenuInfo( HMENU menu, const MENUINFO *info );
+UINT    SYSCALL NtUserThunkedMenuItemInfo( HMENU menu, UINT pos, UINT flags, UINT method,
                                           MENUITEMINFOW *info, UNICODE_STRING *str );
-INT     WINAPI NtUserToUnicodeEx( UINT virt, UINT scan, const BYTE *state,
+INT     SYSCALL NtUserToUnicodeEx( UINT virt, UINT scan, const BYTE *state,
                                   WCHAR *str, int size, UINT flags, HKL layout );
-BOOL    WINAPI NtUserTrackMouseEvent( TRACKMOUSEEVENT *info );
-BOOL    WINAPI NtUserTrackPopupMenuEx( HMENU handle, UINT flags, INT x, INT y, HWND hwnd, TPMPARAMS *params );
-INT     WINAPI NtUserTranslateAccelerator( HWND hwnd, HACCEL accel, MSG *msg );
-BOOL    WINAPI NtUserTranslateMessage( const MSG *msg, UINT flags );
-BOOL    WINAPI NtUserUnhookWinEvent( HWINEVENTHOOK hEventHook );
-BOOL    WINAPI NtUserUnhookWindowsHookEx( HHOOK handle );
-BOOL    WINAPI NtUserUnregisterClass( UNICODE_STRING *name, HINSTANCE instance,
+BOOL    SYSCALL NtUserTrackMouseEvent( TRACKMOUSEEVENT *info );
+BOOL    SYSCALL NtUserTrackPopupMenuEx( HMENU handle, UINT flags, INT x, INT y, HWND hwnd, TPMPARAMS *params );
+INT     SYSCALL NtUserTranslateAccelerator( HWND hwnd, HACCEL accel, MSG *msg );
+BOOL    SYSCALL NtUserTranslateMessage( const MSG *msg, UINT flags );
+BOOL    SYSCALL NtUserUnhookWinEvent( HWINEVENTHOOK hEventHook );
+BOOL    SYSCALL NtUserUnhookWindowsHookEx( HHOOK handle );
+BOOL    SYSCALL NtUserUnregisterClass( UNICODE_STRING *name, HINSTANCE instance,
                                       struct client_menu_name *client_menu_name );
-BOOL    WINAPI NtUserUnregisterHotKey( HWND hwnd, INT id );
-BOOL    WINAPI NtUserUpdateInputContext( HIMC handle, UINT attr, UINT_PTR value );
+BOOL    SYSCALL NtUserUnregisterHotKey( HWND hwnd, INT id );
+BOOL    SYSCALL NtUserUpdateInputContext( HIMC handle, UINT attr, UINT_PTR value );
 BOOL    WINAPI NtUserUpdateLayeredWindow( HWND hwnd, HDC hdc_dst, const POINT *pts_dst, const SIZE *size,
                                           HDC hdc_src, const POINT *pts_src, COLORREF key,
                                           const BLENDFUNCTION *blend, DWORD flags, const RECT *dirty );
-BOOL    WINAPI NtUserValidateRect( HWND hwnd, const RECT *rect );
-WORD    WINAPI NtUserVkKeyScanEx( WCHAR chr, HKL layout );
-DWORD   WINAPI NtUserWaitForInputIdle( HANDLE process, DWORD timeout, BOOL wow );
-BOOL    WINAPI NtUserWaitMessage(void);
-HWND    WINAPI NtUserWindowFromDC( HDC hdc );
-HWND    WINAPI NtUserWindowFromPoint( LONG x, LONG y );
+BOOL    SYSCALL NtUserValidateRect( HWND hwnd, const RECT *rect );
+WORD    SYSCALL NtUserVkKeyScanEx( WCHAR chr, HKL layout );
+DWORD   SYSCALL NtUserWaitForInputIdle( HANDLE process, DWORD timeout, BOOL wow );
+BOOL    SYSCALL NtUserWaitMessage(void);
+HWND    SYSCALL NtUserWindowFromDC( HDC hdc );
+HWND    SYSCALL NtUserWindowFromPoint( LONG x, LONG y );
 
 /* NtUserCallNoParam codes, not compatible with Windows */
 enum
-- 
2.40.0

From e18a4286a1ede2b7a7a37464d125a6aaef7f8b60 Mon Sep 17 00:00:00 2001
From: Torge Matthies <tmatthies@codeweavers.com>
Date: Tue, 6 Dec 2022 09:14:23 +0100
Subject: [PATCH 5/5] ntdll: Make syscall functions sysv_abi on x64.

This doesn't support CDECL syscalls.
---
 dlls/ntdll/unix/signal_x86_64.c | 37 +++++++++++++++++++++++++++++----
 include/windef.h                |  4 ++++
 2 files changed, 37 insertions(+), 4 deletions(-)

diff --git a/dlls/ntdll/unix/signal_x86_64.c b/dlls/ntdll/unix/signal_x86_64.c
index 11111111111..11111111111 100644
--- a/dlls/ntdll/unix/signal_x86_64.c
+++ b/dlls/ntdll/unix/signal_x86_64.c
@@ -2949,6 +2949,18 @@ __ASM_GLOBAL_FUNC( __wine_syscall_dispatcher,
                    /* The xsavec instruction is not supported by
                     * binutils < 2.25. */
                    ".byte 0x48, 0x0f, 0xc7, 0xa1, 0xc0, 0x00, 0x00, 0x00\n\t" /* xsavec64 0xc0(%rcx) */
+                   "testq $2,0x2c0(%rcx)\n\t"          /* frame->xstate.Mask */
+                   "jnz 3f\n\t"
+                   "movdqa %xmm6,0x1c0(%rcx)\n\t"
+                   "movdqa %xmm7,0x1d0(%rcx)\n\t"
+                   "movdqa %xmm8,0x1e0(%rcx)\n\t"
+                   "movdqa %xmm9,0x1f0(%rcx)\n\t"
+                   "movdqa %xmm10,0x200(%rcx)\n\t"
+                   "movdqa %xmm11,0x210(%rcx)\n\t"
+                   "movdqa %xmm12,0x220(%rcx)\n\t"
+                   "movdqa %xmm13,0x230(%rcx)\n\t"
+                   "movdqa %xmm14,0x240(%rcx)\n\t"
+                   "movdqa %xmm15,0x250(%rcx)\n\t"
                    "jmp 3f\n"
                    "1:\txsave64 0xc0(%rcx)\n\t"
                    "jmp 3f\n"
@@ -2981,7 +2993,7 @@ __ASM_GLOBAL_FUNC( __wine_syscall_dispatcher,
                    "leaq -0x98(%rbp),%rcx\n"
                    "2:\n\t"
 #endif
-                   "leaq 0x28(%rsp),%rsi\n\t"      /* first argument */
+                   "leaq 0x38(%rsp),%rsi\n\t"      /* third argument */
                    "movq %rcx,%rsp\n\t"
                    "movq 0x00(%rcx),%rax\n\t"
                    "movq 0x18(%rcx),%rdx\n\t"
@@ -2995,7 +3007,7 @@ __ASM_GLOBAL_FUNC( __wine_syscall_dispatcher,
                    "jae 5f\n\t"
                    "movq 24(%rbx),%rcx\n\t"        /* table->ArgumentTable */
                    "movzbl (%rcx,%rax),%ecx\n\t"
-                   "subq $0x20,%rcx\n\t"
+                   "subq $0x30,%rcx\n\t"
                    "jbe 1f\n\t"
                    "subq %rcx,%rsp\n\t"
                    "shrq $3,%rcx\n\t"
@@ -3003,13 +3015,30 @@ __ASM_GLOBAL_FUNC( __wine_syscall_dispatcher,
                    "movq %rsp,%rdi\n\t"
                    "cld\n\t"
                    "rep; movsq\n"
-                   "1:\tmovq %r10,%rcx\n\t"
-                   "subq $0x20,%rsp\n\t"
+                   "1:\tmovq %r10,%rdi\n\t"
+                   "movq %rdx,%rsi\n\t"
+                   "movq %r8,%rdx\n\t"
+                   "movq %r9,%rcx\n\t"
+                   "movq -0x10(%rbp),%r9\n\t"      /* frame->rsp */
+                   "movq 0x28(%r9),%r8\n\t"
+                   "movq 0x30(%r9),%r9\n\t"
                    "movq (%rbx),%r10\n\t"          /* table->ServiceTable */
                    "callq *(%r10,%rax,8)\n\t"
                    "leaq -0x98(%rbp),%rcx\n\t"
                    /* $rcx is now pointing to "frame" again */
                    __ASM_CFI(".cfi_restore_state\n")
+                   "testl $0x8,0x94(%rcx)\n\t"     /* frame->restore_flags */
+                   "jnz " __ASM_LOCAL_LABEL("__wine_syscall_dispatcher_return") "\n\t"
+                   "movdqa 0x1c0(%rcx),%xmm6\n\t"
+                   "movdqa 0x1d0(%rcx),%xmm7\n\t"
+                   "movdqa 0x1e0(%rcx),%xmm8\n\t"
+                   "movdqa 0x1f0(%rcx),%xmm9\n\t"
+                   "movdqa 0x200(%rcx),%xmm10\n\t"
+                   "movdqa 0x210(%rcx),%xmm11\n\t"
+                   "movdqa 0x220(%rcx),%xmm12\n\t"
+                   "movdqa 0x230(%rcx),%xmm13\n\t"
+                   "movdqa 0x240(%rcx),%xmm14\n\t"
+                   "movdqa 0x250(%rcx),%xmm15\n\t"
                    __ASM_LOCAL_LABEL("__wine_syscall_dispatcher_return") ":\n\t"
                    "movl 0x94(%rcx),%edx\n\t"  /* frame->restore_flags */
 #ifdef __linux__
diff --git a/include/windef.h b/include/windef.h
index 11111111111..11111111111 100644
--- a/include/windef.h
+++ b/include/windef.h
@@ -200,7 +200,11 @@ extern "C" {
 #define APIENTRY    WINAPI
 #define CONST       __ONLY_IN_WINELIB(const)
 
+#if defined(_WIN64) && !defined(__WINE_PE_BUILD)
+#define SYSCALL
+#else
 #define SYSCALL WINAPI
+#endif
 
 /* Misc. constants. */
 
-- 
2.40.0

