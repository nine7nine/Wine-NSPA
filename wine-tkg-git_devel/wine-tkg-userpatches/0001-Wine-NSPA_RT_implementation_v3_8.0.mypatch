 Wine-NSPA RT Implementation v3 (Wine-7.5 builds)

 - Wine RT implementation that depends on Fsync & reverting
   some Fsync code && the existing Wine-rt patch from Staging.
 - other out-of-tree code, such as the Wineserver shmem per
   thread code should be used along with this code.  
  
 Features:
 
 - Allows setting RT threads from Ntdll and Winserver.
 - Splits the RT thread handling and allows treating types of 
   threads differently (APCs, Kernel Threads, User Threads, etc)
 - Allows setup of Scheduling Policies, per thread type.
 - Support CFS / Nice support (Linux-nspa supports latency.nice)
 - GetThreadPriority() RT hooking for TIME_CRITICAL threads
 - Env Variables / Runtime setup:

 # Wine User & Wiseserver Threads
 SRV_RT_POLICY=RR
 WINE_RT_POLICY="FF"
 WINE_RT_PRIO=80
 # Wine, Ntdll & kernel Threads
 NTDLL_RT_PRIO=5
 NTDLL_RT_POLICY="RR" 

 * based on patchwork from Jack Winter, Remi Bernon, the ancient
 Muse Receptor Patchwork & Jordan Johnston (Wine-NSPA dev).
 
 TODOs: 
 
 - Factor out sched_setscheduler(), make all pthread functions
 - Refactor Nice support, investigate ionice support.
 - Investigate improving on SCHED_RR support. 
  
diff -Npur a/configure.ac b/configure.ac
--- a/configure.ac	2022-12-03 21:20:31.055315703 -0500
+++ b/configure.ac	2022-12-03 21:09:09.728608844 -0500
@@ -1417,7 +1417,7 @@ dnl **** Check for libdbus ****
 if test "x$with_dbus" != "xno"
 then
     WINE_PACKAGE_FLAGS(DBUS,[dbus-1],,,,
-        [AC_CHECK_HEADER([dbus/dbus.h],
+        [AC_CHECK_HEADERS([dbus/dbus.h],
             [WINE_CHECK_SONAME(dbus-1, dbus_connection_close,,[DBUS_CFLAGS=""],[$DBUS_LIBS])],
             [DBUS_CFLAGS=""])])
 fi
@@ -2139,6 +2139,25 @@ then
   AC_DEFINE(HAVE_SCHED_SETAFFINITY, 1, [Define to 1 if you have the `sched_setaffinity' function.])
 fi
 
+AC_CACHE_CHECK([for sched_setscheduler],wine_cv_have_sched_setscheduler,
+                AC_LINK_IFELSE([AC_LANG_PROGRAM(
+[[#define _GNU_SOURCE
+#include <sched.h>]], [[sched_setscheduler(0, 0, 0);]])],[wine_cv_have_sched_setscheduler=yes],[wine_cv_have_sched_setscheduler=no]))
+if test "$wine_cv_have_sched_setscheduler" = "yes"
+then
+  AC_DEFINE(HAVE_SCHED_SETSCHEDULER, 1, [Define to 1 if you have the `sched_setscheduler' function.])
+fi
+
+AC_CACHE_CHECK([for setpriority],wine_cv_have_setpriority,
+                AC_LINK_IFELSE([AC_LANG_PROGRAM(
+[[#define _GNU_SOURCE
+#include <sys/resource.h>
+#include <sys/time.h>]], [[setpriority(0, 0, 0);]])],[wine_cv_have_setpriority=yes],[wine_cv_have_setpriority=no]))
+if test "$wine_cv_have_setpriority" = "yes"
+then
+  AC_DEFINE(HAVE_SETPRIORITY, 1, [Define to 1 if you have the `setpriority' function.])
+fi
+
 dnl **** Check for types ****
 
 AC_C_INLINE
diff -Npur a/dlls/avrt/main.c b/dlls/avrt/main.c
--- a/dlls/avrt/main.c	2022-12-03 21:18:11.386865670 -0500
+++ b/dlls/avrt/main.c	2022-12-03 21:08:58.877503319 -0500
@@ -71,6 +71,12 @@ HANDLE WINAPI AvSetMmThreadCharacteristi
         return NULL;
     }
 
+    if (!wcscmp(name, L"Audio") || !wcscmp(name, L"Pro Audio"))
+        SetThreadPriority(GetCurrentThread(), THREAD_PRIORITY_TIME_CRITICAL);
+        
+    if (!wcscmp(name, L"Window Manager"))
+        SetThreadPriority(GetCurrentThread(), THREAD_PRIORITY_LOWEST);
+        
     return (HANDLE)0x12345678;
 }
 
diff -Npur a/dlls/kernelbase/thread.c b/dlls/kernelbase/thread.c
--- a/dlls/kernelbase/thread.c	2022-12-03 21:15:28.945290867 -0500
+++ b/dlls/kernelbase/thread.c	2022-12-03 21:09:00.188516070 -0500
@@ -35,6 +35,12 @@
 #include "wine/asm.h"
 #include "wine/debug.h"
 #include "wine/heap.h"
+#define NSPA_RT_SYNC 1
+#if NSPA_RT_SYNC
+    #include <sched.h>
+    #include <pthread.h>
+    #include <errno.h>  
+#endif
 
 WINE_DEFAULT_DEBUG_CHANNEL(thread);
 
@@ -271,10 +277,19 @@ LCID WINAPI /* DECLSPEC_HOTPATCH */ GetT
 INT WINAPI DECLSPEC_HOTPATCH GetThreadPriority( HANDLE thread )
 {
     THREAD_BASIC_INFORMATION info;
-
+  
+#if NSPA_RT_SYNC
+    struct sched_param param;
+
+    if (sched_getparam( 0, &param ) == 0)
+        return(THREAD_PRIORITY_TIME_CRITICAL);
+     set_ntstatus( NtQueryInformationThread( thread, ThreadBasicInformation,
+                                       &info, sizeof(info), NULL ));
+#else
     if (!set_ntstatus( NtQueryInformationThread( thread, ThreadBasicInformation,
                                                  &info, sizeof(info), NULL )))
         return THREAD_PRIORITY_ERROR_RETURN;
+#endif
     return info.Priority;
 }
 
diff -Npur a/dlls/ntdll/unix/thread.c b/dlls/ntdll/unix/thread.c
--- a/dlls/ntdll/unix/thread.c	2022-12-03 21:23:52.315015762 -0500
+++ b/dlls/ntdll/unix/thread.c	2022-12-03 21:09:00.194516128 -0500
@@ -77,6 +77,90 @@ WINE_DEFAULT_DEBUG_CHANNEL(thread);
 WINE_DECLARE_DEBUG_CHANNEL(seh);
 WINE_DECLARE_DEBUG_CHANNEL(threadname);
 
+#define NSPA_RT_SYNC 1
+#if NSPA_RT_SYNC
+
+// We set the synchronization threads' RT priority from within Ntdll.
+static int thread_kapc_priority = -1;
+static int thread_p_priority = -1;
+
+/* gets the priority value from an environment variable */
+static int get_priority( const char *variable, int min, int max )
+{
+    const char *env;
+    int val;
+
+    env = getenv( variable );
+    if (!env) return -1;
+
+    val = atoi( env );
+    if (val >= min && val <= max) return val;
+    return -1;
+}
+
+static int fget_priority( const char *variable, int min, int max )
+{
+    const char *env;
+    int val;
+
+    env = getenv( variable );
+    if (!env) return -1;
+
+    val = atoi( env );
+    if (val >= min && val <= max) return val;
+    return -1;
+}
+
+static int priority;
+static int fpriority;
+
+int ntdll_set_sync_realtime (pthread_t pthread_id, int ntdll_rt_policy, int priority)
+{
+    // Get RT policy
+    const char *policyStr = getenv("NTDLL_RT_POLICY");
+    int min, max, p_priority;
+    min = sched_get_priority_min( SCHED_FIFO );
+    max = sched_get_priority_max( SCHED_FIFO );
+
+    if (policyStr) {
+        if (strcmp(policyStr, "RR")==0)
+            ntdll_rt_policy = SCHED_RR;
+        if (strcmp(policyStr, "FF")==0)
+            ntdll_rt_policy = SCHED_FIFO;
+        else if (strcmp(policyStr, "TS")==0)
+            ntdll_rt_policy = SCHED_OTHER;    
+    }
+   
+    if ((p_priority = get_priority( "NTDLL_RT_PRIO", min, max -1)) != -1)
+    {
+        thread_p_priority = p_priority;
+    }
+	struct sched_param param;	
+	param.sched_priority = thread_p_priority;
+
+	return pthread_setschedparam (pthread_id, ntdll_rt_policy, &param);
+}
+
+int ntdll_set_fsync_realtime (pthread_t pthread_id, int fifo, int fpriority)
+{
+    // RT policy is SCHED_FIFO
+    int min, max, kapc_priority;
+    min = sched_get_priority_min( SCHED_FIFO );
+    max = sched_get_priority_max( SCHED_FIFO );
+    fifo = SCHED_FIFO;
+   
+    if ((kapc_priority = fget_priority( "WINE_RT_PRIO", min, max -1)) != -1)
+    {
+        thread_kapc_priority = kapc_priority -1;
+    }
+	struct sched_param param;	
+	param.sched_priority = thread_kapc_priority;
+
+	return pthread_setschedparam (pthread_id, fifo, &param);
+}
+
+#endif
+
 pthread_key_t teb_key = 0;
 
 static LONG nb_threads = 1;
@@ -1267,6 +1351,13 @@ NTSTATUS WINAPI NtCreateThreadEx( HANDLE
     data_size_t len;
     struct object_attributes *objattr;
     struct ntdll_thread_data *thread_data;
+#if NSPA_RT_SYNC
+    // needed for setting RT for Sync threads
+    struct sched_param parm;
+    int ntdll_rt_policy = 0;
+    pthread_attr_setschedpolicy (&pthread_attr, ntdll_rt_policy);
+    pthread_attr_setschedparam (&pthread_attr, &parm);
+#endif
     DWORD tid = 0;
     int request_pipe[2];
     TEB *teb;
@@ -1382,6 +1473,47 @@ done:
         return status;
     }
     if (attr_list) update_attr_list( attr_list, &teb->ClientId, teb );
+    
+#if NSPA_RT_SYNC
+    // give pthread_create a chance to call start_thread (pthread_info.entry), 
+    // which sets gets the tid via pthread_functions.init_current_teb
+    // 
+    // Catch all Synchronization Threads;
+    pthread_t validPIDThread = (thread_data->pthread_id);
+    pthread_t validIDXThread = (thread_data->fsync_apc_idx);
+                                
+    if (validIDXThread || validPIDThread == 0) {
+        int i;
+        for (i = 0; i < 100; ++i) {
+            validIDXThread = (thread_data->fsync_apc_idx);
+            validPIDThread = (thread_data->pthread_id);
+                               
+            if (validIDXThread || validPIDThread == 0)
+                usleep(300);
+        }
+    }
+    if (validPIDThread != 0) {
+        // Fail on / filter out unsupported threads;
+        if (handle == GetCurrentThread() && (validPIDThread != thread_data->pthread_id)) { 
+            return status;
+        }
+
+        // set RT for most threads (low RT priority => NTDLL_RT_PRIO priority)
+        pthread_attr_setinheritsched(&pthread_attr, PTHREAD_EXPLICIT_SCHED);
+        ntdll_set_sync_realtime(validPIDThread, ntdll_rt_policy|SCHED_RESET_ON_FORK, priority);
+    }
+    else if (validIDXThread != 0) {
+        // Fail on / filter out unsupported threads;
+        if (handle == GetCurrentThread() && (validIDXThread != thread_data->fsync_apc_idx)) { 
+            return status;
+        }
+
+        // set RT for fsync threads (high RT Priority: Kernel APCs, threads, etc)
+        pthread_attr_setinheritsched(&pthread_attr, PTHREAD_EXPLICIT_SCHED);
+        // hardcoded to SCHED_FIFO (=> WINE_RT_PRIO priority)
+        ntdll_set_fsync_realtime(validIDXThread, SCHED_FIFO|SCHED_RESET_ON_FORK, fpriority);
+    }
+#endif
     return STATUS_SUCCESS;
 }
 
diff -Npur a/dlls/ntdll/unix/virtual.c b/dlls/ntdll/unix/virtual.c
--- a/dlls/ntdll/unix/virtual.c	2022-12-03 21:23:52.317016762 -0500
+++ b/dlls/ntdll/unix/virtual.c	2022-12-03 21:09:00.114515350 -0500
@@ -3099,8 +3099,10 @@ static TEB *init_teb( void *ptr, BOOL is
     teb->StaticUnicodeString.Buffer = teb->StaticUnicodeBuffer;
     teb->StaticUnicodeString.MaximumLength = sizeof(teb->StaticUnicodeBuffer);
     thread_data = (struct ntdll_thread_data *)&teb->GdiTebBatch;
-    thread_data->esync_apc_fd = -1;
+    // need to see this thread data for ntdll-rt
+    thread_data->esync_apc_fd = 0;
     thread_data->fsync_apc_idx = 0;
+    thread_data->pthread_id  =  0;
     thread_data->request_fd = -1;
     thread_data->reply_fd   = -1;
     thread_data->wait_fd[0] = -1;
diff -Npur a/server/main.c b/server/main.c
--- a/server/main.c	2022-12-03 21:24:19.335823199 -0500
+++ b/server/main.c	2022-12-03 21:08:59.683511158 -0500
@@ -244,6 +244,7 @@ int main( int argc, char *argv[] )
 
     if (debug_level) fprintf( stderr, "wineserver: starting (pid=%ld)\n", (long) getpid() );
     set_current_time();
+    init_scheduler();
     init_signals();
     init_directories( load_intl_file() );
     init_registry();
diff -Npur a/server/Makefile.in b/server/Makefile.in
--- a/server/Makefile.in	2022-12-03 21:24:19.335823199 -0500
+++ b/server/Makefile.in	2022-12-03 21:08:58.831502872 -0500
@@ -32,6 +32,7 @@ C_SRCS = \
 	region.c \
 	registry.c \
 	request.c \
+	scheduler.c \
 	semaphore.c \
 	serial.c \
 	signal.c \
@@ -51,6 +52,6 @@ MANPAGES = \
 	wineserver.fr.UTF-8.man.in \
 	wineserver.man.in
 
-UNIX_LIBS = $(LDEXECFLAGS) $(RT_LIBS) $(INOTIFY_LIBS) $(PROCSTAT_LIBS)
+UNIX_LIBS = $(LDEXECFLAGS) $(RT_LIBS) $(INOTIFY_LIBS) $(PROCSTAT_LIBS) $(DBUS_LIBS)
 
 unicode_EXTRADEFS = -DNLSDIR="\"${nlsdir}\"" -DBIN_TO_NLSDIR=\"`${MAKEDEP} -R ${bindir} ${nlsdir}`\"

diff -Npur a/server/process.c b/server/process.c
--- a/server/process.c	2022-12-03 21:20:31.056326604 -0500
+++ b/server/process.c	2022-12-03 21:09:00.150515700 -0500
@@ -1679,6 +1679,24 @@ DECL_HANDLER(get_process_vm_counters)
     release_object( process );
 }
 
+static void set_process_priority( struct process *process, int priority )
+{
+    struct thread *thread;
+
+    if (!process->running_threads)
+    {
+        set_error( STATUS_PROCESS_IS_TERMINATING );
+        return;
+    }
+
+    LIST_FOR_EACH_ENTRY( thread, &process->thread_list, struct thread, proc_entry )
+    {
+        set_thread_priority( thread, thread->priority );
+    }
+
+    process->priority = priority;
+}
+
 static void set_process_affinity( struct process *process, affinity_t affinity )
 {
     struct thread *thread;
@@ -1704,7 +1722,7 @@ DECL_HANDLER(set_process_info)
 
     if ((process = get_process_from_handle( req->handle, PROCESS_SET_INFORMATION )))
     {
-        if (req->mask & SET_PROCESS_INFO_PRIORITY) process->priority = req->priority;
+        if (req->mask & SET_PROCESS_INFO_PRIORITY) set_process_priority( process, req->priority );
         if (req->mask & SET_PROCESS_INFO_AFFINITY) set_process_affinity( process, req->affinity );
         release_object( process );
     }
diff -Npur a/server/scheduler.c b/server/scheduler.c
--- a/server/scheduler.c	1969-12-31 19:00:00.000000000 -0500
+++ b/server/scheduler.c	2022-12-03 21:09:00.199516176 -0500
@@ -0,0 +1,214 @@
+/*
+ * Scheduler priority management
+ *
+ * Copyright (C) 2015 Joakim Hernberg
+ * Copyright (C) 2015 Sebastian Lackner
+ * Copyright (C) 2020 Jordan Johnston
+ *
+ * This library is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU Lesser General Public
+ * License as published by the Free Software Foundation; either
+ * version 2.1 of the License, or (at your option) any later version.
+ *
+ * This library is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+ * Lesser General Public License for more details.
+ *
+ * You should have received a copy of the GNU Lesser General Public
+ * License along with this library; if not, write to the Free Software
+ * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301, USA
+ */
+
+#include "config.h"
+
+#define _GNU_SOURCE  /* for SCHED_BATCH, SCHED_IDLE */
+#include <assert.h>
+#include <stdio.h>
+#include <stdarg.h>
+#ifdef HAVE_SYS_RESOURCE_H
+# include <sys/resource.h>
+#endif
+#ifdef HAVE_SCHED_H
+# include <sched.h>
+#endif
+#ifndef SCHED_RESET_ON_FORK
+# define SCHED_RESET_ON_FORK 0x40000000
+#endif
+#ifndef SCHED_IDLE
+ #define SCHED_IDLE 5
+#endif
+
+#include "ntstatus.h"
+#define WIN32_NO_STATUS
+#include "winternl.h"
+#include "thread.h"
+#include <unistd.h>
+#include <pthread.h>
+
+#if defined(__linux__) && defined(HAVE_SYS_RESOURCE_H) && defined(HAVE_SCHED_H)
+
+// define these for RT code
+static int srv_rt_policy = -1;
+static int thread_base_priority = -1;
+static int wine_rt_policy = -1;
+
+/* gets the priority value from an environment variable */
+static int get_priority( const char *variable, int min, int max )
+{
+    const char *env;
+    int val;
+
+    env = getenv( variable );
+    if (!env) return -1;
+
+    val = atoi( env );
+    if (val >= min && val <= max) return val;
+    fprintf( stderr, "wineserver: %s should be between %d and %d\n", variable, min, max );
+    return -1;
+}
+
+/* initializes the scheduler */
+void init_scheduler( void )
+{
+    pthread_attr_t pthread_attr;
+    struct sched_param param;
+    // Get Wineserver RT policy
+    const char *policyStr = getenv("SRV_RT_POLICY");
+
+    // Set RT Priority min, max.
+    int min, max, priority;
+    min = sched_get_priority_min( SCHED_FIFO );
+    max = sched_get_priority_max( SCHED_FIFO );
+    if (min == -1 || max == -1)
+        return;
+ 
+    // Set RT policy.
+    if (policyStr) {
+        if (strcmp(policyStr, "RR")==0)
+            srv_rt_policy = SCHED_RR;
+        if (strcmp(policyStr, "FF")==0)
+            srv_rt_policy = SCHED_FIFO;
+        else if (strcmp(policyStr, "TS")==0)
+            srv_rt_policy = SCHED_OTHER;
+    } 
+    
+    /* change the wineserver nice priority */
+    setpriority( PRIO_PROCESS, getpid(), -14 );
+
+    /* change the wineserver priority */
+    if ((priority = get_priority( "WINE_RT_PRIO", min, max -1)) != -1)
+    {
+        // use pthread functionsm, instead of sched_setcheduler()
+        
+        memset( &param, 0, sizeof(param) );
+        param.sched_priority = priority -1;
+    
+        pthread_attr_init( &pthread_attr );
+        pthread_attr_setschedpolicy (&pthread_attr, srv_rt_policy);
+        pthread_attr_setschedparam (&pthread_attr, &param);
+        pthread_attr_setinheritsched (&pthread_attr, PTHREAD_EXPLICIT_SCHED);
+        pthread_attr_setscope( &pthread_attr, PTHREAD_SCOPE_SYSTEM ); 
+        
+        pthread_setschedparam (pthread_self(), srv_rt_policy, &param);
+    }    
+
+    /* determine base priority which will be used for all threads */
+    if ((priority = get_priority( "WINE_RT_PRIO", min, max )) != -1)
+    {
+        thread_base_priority = priority -1;
+
+        if (debug_level) fprintf( stderr, "wineserver: initialized max user thread priority to %d\n",
+                                  thread_base_priority );
+    }
+}
+
+/* sets the scheduler priority of a windows thread */
+void set_scheduler_priority( struct thread *thread )
+{
+    const char *policyStr = getenv("WINE_RT_POLICY");
+    struct sched_param param;
+
+    if (policyStr) {
+        if (strcmp(policyStr, "RR")==0)
+            wine_rt_policy = SCHED_RR;
+        else if (strcmp(policyStr, "FF")==0)
+            wine_rt_policy = SCHED_FIFO;
+    } 
+
+    if (thread_base_priority == -1) return;
+    if (thread->unix_tid == -1) return;
+    if (thread->fsync_idx == -1) return;
+ 
+    memset( &param, 0, sizeof(param) );
+    // Hardcoded to SCHED_FIFO just for TIME_CRITICAL threads.
+    if (thread->priority >= THREAD_PRIORITY_TIME_CRITICAL )
+    {
+        //wine_rt_policy = SCHED_FIFO;
+        param.sched_priority = thread_base_priority -2;
+    }
+    else if (thread->priority >= THREAD_PRIORITY_HIGHEST)
+    {
+        //wine_rt_policy = SCHED_FIFO;
+        param.sched_priority = thread_base_priority -4;
+    }
+    else if (thread->priority >= THREAD_PRIORITY_ABOVE_NORMAL)
+    {
+        param.sched_priority = thread_base_priority -6;
+    }
+    else if (thread->priority >= THREAD_PRIORITY_NORMAL)
+    {
+        param.sched_priority = thread_base_priority -8;
+    }
+    else if (thread->priority >= THREAD_PRIORITY_BELOW_NORMAL)
+    {
+        param.sched_priority = thread_base_priority -10;
+    } 
+    else if (thread->priority >= THREAD_PRIORITY_LOWEST)
+    {
+        param.sched_priority = thread_base_priority -12;
+    }   
+    else if (thread->priority >= THREAD_PRIORITY_IDLE)
+    {
+        param.sched_priority = thread_base_priority -14;
+    }
+    else
+    {
+        param.sched_priority = thread_base_priority -16;
+    }
+
+    if (sched_setscheduler(thread->unix_tid, wine_rt_policy | SCHED_RESET_ON_FORK, &param) == -1 &&
+        sched_setscheduler(thread->unix_tid, wine_rt_policy, &param) == -1)
+    {
+        static int once;
+        if (debug_level || !once++)
+            fprintf( stderr, "%04x: failed to change priority to %d/%d\n",
+                     thread->id, wine_rt_policy, param.sched_priority );
+        return;
+    }
+    // we care about the fsync_idx threads, if they come up.
+    if (sched_setscheduler(thread->fsync_idx, wine_rt_policy | SCHED_RESET_ON_FORK, &param) == -1 &&
+        sched_setscheduler(thread->fsync_idx, wine_rt_policy, &param) == -1)
+    {
+        static int once;
+        if (debug_level || !once++)
+            fprintf( stderr, "%04x: failed to change priority to %d/%d\n",
+                     thread->id, wine_rt_policy, param.sched_priority );
+        return;
+    }
+
+    if (debug_level) fprintf( stderr, "%04x: changed priority to %d/%d\n",
+                              thread->id, wine_rt_policy, param.sched_priority );
+}
+
+#else
+
+void init_scheduler( void )
+{
+}
+
+void set_scheduler_priority( struct thread *thread )
+{
+}
+
+#endif
diff -Npur a/server/thread.c b/server/thread.c
--- a/server/thread.c	2022-12-03 21:24:19.337817717 -0500
+++ b/server/thread.c	2022-12-03 21:09:00.194516128 -0500
@@ -37,6 +37,12 @@
 #define _WITH_CPU_SET_T
 #include <sched.h>
 #endif
+#include <sys/time.h>
+#include <sys/resource.h>
+
+#define HAVE_SCHED_SETSCHEDULER 1
+#define HAVE_DBUS_DBUS_H 1
+#define HAVE_SETPRIORITY 1
 
 #include "ntstatus.h"
 #define WIN32_NO_STATUS
@@ -53,6 +59,22 @@
 #include "esync.h"
 #include "fsync.h"
 
+static int thread_base_priority = -1;
+
+/* gets the priority value from an environment variable */
+static int get_priority( const char *variable, int min, int max )
+{
+    const char *env;
+    int val;
+
+    env = getenv( variable );
+    if (!env) return -1;
+
+    val = atoi( env );
+    if (val >= min && val <= max) return val;
+    fprintf( stderr, "wineserver: %s should be between %d and %d\n", variable, min, max );
+    return -1;
+}
 
 /* thread queues */
 
@@ -116,6 +138,77 @@ static const struct object_ops thread_ap
     thread_apc_destroy          /* destroy */
 };
 
+#ifdef HAVE_DBUS_DBUS_H
+//#include <dbus/dbus.h>
+
+static int rtkit_set_realtime( dbus_uint64_t process, dbus_uint64_t thread, dbus_uint32_t priority )
+{
+    DBusConnection* dbus;
+    DBusMessage *msg;
+    int ret = -1;
+
+    if ((dbus = dbus_bus_get(DBUS_BUS_SYSTEM, NULL)))
+    {
+        dbus_connection_set_exit_on_disconnect(dbus, 0);
+
+        if ((msg = dbus_message_new_method_call("org.freedesktop.RealtimeKit1",
+                                                "/org/freedesktop/RealtimeKit1",
+                                                "org.freedesktop.RealtimeKit1",
+                                                "MakeThreadRealtimeWithPID")))
+        {
+            dbus_message_set_no_reply(msg, 1);
+
+            if (dbus_message_append_args(msg,
+                                         DBUS_TYPE_UINT64, &process,
+                                         DBUS_TYPE_UINT64, &thread,
+                                         DBUS_TYPE_UINT32, &priority,
+                                         DBUS_TYPE_INVALID) &&
+                dbus_connection_send(dbus, msg, NULL))
+                ret = 0;
+
+            dbus_message_unref(msg);
+        }
+
+        dbus_connection_unref(dbus);
+    }
+
+    return ret;
+}
+
+static int rtkit_set_niceness( dbus_uint64_t process, dbus_uint64_t thread, dbus_int32_t niceness )
+{
+    DBusConnection* dbus;
+    DBusMessage *msg;
+    int ret = -1;
+
+    if ((dbus = dbus_bus_get(DBUS_BUS_SYSTEM, NULL)))
+    {
+        dbus_connection_set_exit_on_disconnect(dbus, 0);
+
+        if ((msg = dbus_message_new_method_call("org.freedesktop.RealtimeKit1",
+                                                "/org/freedesktop/RealtimeKit1",
+                                                "org.freedesktop.RealtimeKit1",
+                                                "MakeThreadHighPriorityWithPID")))
+        {
+            dbus_message_set_no_reply(msg, 1);
+
+            if (dbus_message_append_args(msg,
+                                         DBUS_TYPE_UINT64, &process,
+                                         DBUS_TYPE_UINT64, &thread,
+                                         DBUS_TYPE_INT32, &niceness,
+                                         DBUS_TYPE_INVALID) &&
+                dbus_connection_send(dbus, msg, NULL))
+                ret = 0;
+
+            dbus_message_unref(msg);
+        }
+
+        dbus_connection_unref(dbus);
+    }
+
+    return ret;
+}
+#endif
 
 /* thread CPU context */
 
@@ -256,6 +349,7 @@ static inline void init_thread_structure
     thread->state           = RUNNING;
     thread->exit_code       = 0;
     thread->priority        = 0;
+    thread->priority_applied = 0;
     thread->suspend         = 0;
     thread->dbg_hidden      = 0;
     thread->desktop_users   = 0;
@@ -355,6 +449,7 @@ struct thread *create_thread( int fd, st
     thread->process = (struct process *)grab_object( process );
     thread->desktop = 0;
     thread->affinity = process->affinity;
+    thread->priority = process->priority;
     if (!current) current = thread;
 
     list_add_tail( &thread_list, &thread->entry );
@@ -654,6 +749,187 @@ affinity_t get_thread_affinity( struct t
 #define THREAD_PRIORITY_REALTIME_HIGHEST 6
 #define THREAD_PRIORITY_REALTIME_LOWEST -7
 
+#if defined(HAVE_SCHED_SETSCHEDULER) || defined(HAVE_SETPRIORITY) || \
+    defined(HAVE_DBUS_DBUS_H)
+static int get_unix_priority( int priority_class, int priority )
+{
+    int min, max, base_priority;
+
+    min = sched_get_priority_min( SCHED_FIFO );
+    max = sched_get_priority_max( SCHED_FIFO );
+
+    // RT priority for threads must be below kernel-mode APC, TIME_CRITICAL threads and Wineserver.
+    if ((base_priority = get_priority( "WINE_RT_PRIO", min, max )) != -1)
+    {
+        thread_base_priority = base_priority - 3;
+    }
+    switch (priority_class) {
+    case PROCESS_PRIOCLASS_IDLE:
+        switch (priority) {
+        case THREAD_PRIORITY_IDLE: return 15;
+        case THREAD_PRIORITY_LOWEST: return 10;
+        case THREAD_PRIORITY_BELOW_NORMAL: return 8;
+        case THREAD_PRIORITY_NORMAL: return 6;
+        case THREAD_PRIORITY_ABOVE_NORMAL: return 4;
+        case THREAD_PRIORITY_HIGHEST: return 2;
+        case THREAD_PRIORITY_TIME_CRITICAL: return -15;
+        }
+    case PROCESS_PRIOCLASS_BELOW_NORMAL:
+        switch (priority) {
+        case THREAD_PRIORITY_IDLE: return 15;
+        case THREAD_PRIORITY_LOWEST: return 8;
+        case THREAD_PRIORITY_BELOW_NORMAL: return 6;
+        case THREAD_PRIORITY_NORMAL: return 4;
+        case THREAD_PRIORITY_ABOVE_NORMAL: return 2;
+        case THREAD_PRIORITY_HIGHEST: return 0;
+        case THREAD_PRIORITY_TIME_CRITICAL: return -15;
+        }
+    case PROCESS_PRIOCLASS_NORMAL:
+        switch (priority) {
+        case THREAD_PRIORITY_IDLE: return 15;
+        case THREAD_PRIORITY_LOWEST: return 4;
+        case THREAD_PRIORITY_BELOW_NORMAL: return 2;
+        case THREAD_PRIORITY_NORMAL: return 0;
+        case THREAD_PRIORITY_ABOVE_NORMAL: return -2;
+        case THREAD_PRIORITY_HIGHEST: return -4;
+        case THREAD_PRIORITY_TIME_CRITICAL: return -15;
+        }
+    case PROCESS_PRIOCLASS_ABOVE_NORMAL:
+        switch (priority) {
+        case THREAD_PRIORITY_IDLE: return 15;
+        case THREAD_PRIORITY_LOWEST: return 0;
+        case THREAD_PRIORITY_BELOW_NORMAL: return -2;
+        case THREAD_PRIORITY_NORMAL: return -4;
+        case THREAD_PRIORITY_ABOVE_NORMAL: return -6;
+        case THREAD_PRIORITY_HIGHEST: return -8;
+        case THREAD_PRIORITY_TIME_CRITICAL: return -15;
+        }
+    case PROCESS_PRIOCLASS_HIGH:
+        switch (priority) {
+        case THREAD_PRIORITY_IDLE: return 15;
+        case THREAD_PRIORITY_LOWEST: return -2;
+        case THREAD_PRIORITY_BELOW_NORMAL: return -4;
+        case THREAD_PRIORITY_NORMAL: return -6;
+        case THREAD_PRIORITY_ABOVE_NORMAL: return -8;
+        case THREAD_PRIORITY_HIGHEST: return -10;
+        case THREAD_PRIORITY_TIME_CRITICAL: return -15;
+        }
+    case PROCESS_PRIOCLASS_REALTIME:
+        switch (priority) {
+        case THREAD_PRIORITY_IDLE: return 0;
+        case -7: return 0;
+        case -5: return 0;
+        case -4: return 0;
+        case -3: return 0;
+        case THREAD_PRIORITY_LOWEST: return -10 + thread_base_priority;
+        case THREAD_PRIORITY_BELOW_NORMAL: return -8 + thread_base_priority;
+        case THREAD_PRIORITY_NORMAL: return -6 + thread_base_priority;
+        case THREAD_PRIORITY_ABOVE_NORMAL: return -4 + thread_base_priority;
+        case THREAD_PRIORITY_HIGHEST: return -2 + thread_base_priority;
+        case 3: return -1 + thread_base_priority;
+        case 4: return -1 + thread_base_priority;
+        case 5: return -1 + thread_base_priority;
+        case 6: return -1 + thread_base_priority;  
+        case THREAD_PRIORITY_TIME_CRITICAL: return thread_base_priority;
+        }
+    }
+    return 0;
+}
+#endif
+
+#define THREAD_PRIORITY_REALTIME_HIGHEST 6
+#define THREAD_PRIORITY_REALTIME_LOWEST -7
+
+static int wine_rt_policy = -1;
+
+int set_thread_priority( struct thread* thread, int priority )
+{
+    // Get RT policy
+    const char *policyStr = getenv("WINE_RT_POLICY");
+    // Set Min, Max Priority 
+    int max = THREAD_PRIORITY_HIGHEST;
+    int min = THREAD_PRIORITY_LOWEST;
+    if (thread->process->priority == PROCESS_PRIOCLASS_REALTIME)
+    {
+        max = THREAD_PRIORITY_REALTIME_HIGHEST;
+        min = THREAD_PRIORITY_REALTIME_LOWEST;
+    }
+
+    if ((priority < min || priority > max) &&
+        priority != THREAD_PRIORITY_IDLE &&
+        priority != THREAD_PRIORITY_TIME_CRITICAL)
+    {
+        errno = EINVAL;
+        return -1;
+    }
+
+    if (thread->priority == priority &&
+        thread->priority_applied)
+        return 0;
+
+    thread->priority = priority;
+    thread->priority_applied = 0;
+    if (thread->unix_tid == -1)
+    if (thread->fsync_idx == -1)
+            return 0;
+    
+    // Set the RT policy      
+    if (policyStr) {
+        if (strcmp(policyStr, "RR")==0)
+            wine_rt_policy = SCHED_RR;
+        else if (strcmp(policyStr, "FF")==0)
+            wine_rt_policy = SCHED_FIFO;
+    } 
+
+#ifdef __linux__
+    if (thread->process->priority == PROCESS_PRIOCLASS_REALTIME)
+    {
+#ifdef HAVE_SCHED_SETSCHEDULER
+        struct sched_param param;
+        if (sched_getparam( thread->unix_tid, &param ) != 0)
+            return 0;
+        if (sched_getparam( thread->fsync_idx, &param ) != 0)
+            return 0;
+
+        param.sched_priority = get_unix_priority( thread->process->priority, priority );
+        if (sched_setscheduler( thread->unix_tid, wine_rt_policy|SCHED_RESET_ON_FORK, &param ) == 0)
+            return 0;
+        if (sched_setscheduler( thread->fsync_idx, wine_rt_policy|SCHED_RESET_ON_FORK, &param ) == 0)
+            return 0;
+#endif
+#ifdef HAVE_DBUS_DBUS_H
+        if (rtkit_set_realtime( thread->unix_pid, thread->unix_tid,
+                                get_unix_priority( thread->process->priority, priority ) ) == 0)
+            return 0;
+        if (rtkit_set_realtime( thread->fsync_idx, thread->unix_tid,
+                                get_unix_priority( thread->process->priority, priority ) ) == 0)
+            return 0;
+#endif
+    }
+    else
+    {
+#ifdef HAVE_SETPRIORITY
+        if (setpriority( PRIO_PROCESS, thread->unix_tid,
+                         get_unix_priority( thread->process->priority, priority ) ) == 0)
+            return 0;
+        if (setpriority( PRIO_PROCESS, thread->fsync_idx,
+                         get_unix_priority( thread->process->priority, priority ) ) == 0)
+            return 0;
+#endif
+#ifdef HAVE_DBUS_DBUS_H
+        if (rtkit_set_niceness( thread->unix_pid, thread->unix_tid,
+                                get_unix_priority( thread->process->priority, priority ) ) == 0)
+            return 0;
+        if (rtkit_set_niceness( thread->fsync_idx, thread->fsync_idx,
+                                get_unix_priority( thread->process->priority, priority ) ) == 0)
+            return 0;
+#endif
+    }
+#endif
+
+    return 0; /* ignore errors for now */
+}
+
 /* set all information about a thread */
 static void set_thread_info( struct thread *thread,
                              const struct set_thread_info_request *req )
@@ -670,9 +946,13 @@ static void set_thread_info( struct thre
         if ((req->priority >= min && req->priority <= max) ||
             req->priority == THREAD_PRIORITY_IDLE ||
             req->priority == THREAD_PRIORITY_TIME_CRITICAL)
+        {    
             thread->priority = req->priority;
-        else
-            set_error( STATUS_INVALID_PARAMETER );
+            // set RT threads. see: scheduler.c
+            set_scheduler_priority( thread );
+        }         
+        if (set_thread_priority( thread, req->priority ))
+            file_set_error();
     }
     if (req->mask & SET_THREAD_INFO_AFFINITY)
     {
@@ -1468,6 +1748,7 @@ done:
 
 static int init_thread( struct thread *thread, int reply_fd, int wait_fd )
 {
+    struct process *process = current->process;
     if ((reply_fd = thread_get_inflight_fd( thread, reply_fd )) == -1)
     {
         set_error( STATUS_TOO_MANY_OPENED_FILES );
@@ -1510,7 +1791,10 @@ DECL_HANDLER(init_first_thread)
     if (!process->parent_id)
         process->affinity = current->affinity = get_thread_affinity( current );
     else
+    {
         set_thread_affinity( current, current->affinity );
+        set_thread_priority( current, current->priority );
+    }
 
     debug_level = max( debug_level, req->debug_level );
 
@@ -1541,6 +1825,7 @@ DECL_HANDLER(init_thread)
 
     init_thread_context( current );
     generate_debug_event( current, DbgCreateThreadStateChange, &req->entry );
+    set_thread_priority( current, current->priority );
     set_thread_affinity( current, current->affinity );
 
     reply->suspend = (current->suspend || current->process->suspend || current->context != NULL);

diff -Npur a/server/thread.h b/server/thread.h
--- a/server/thread.h	2022-12-03 21:24:19.339812234 -0500
+++ b/server/thread.h	2022-12-03 21:09:00.150515700 -0500
@@ -105,6 +105,7 @@ struct thread
     client_ptr_t           entry_point;   /* entry point (in client address space) */
     affinity_t             affinity;      /* affinity mask */
     int                    priority;      /* priority level */
+    int                    priority_applied;    /* priority level successfully applied status */
     int                    suspend;       /* suspend count */
     int                    dbg_hidden;    /* hidden from debugger */
     obj_handle_t           desktop;       /* desktop handle */
@@ -152,6 +153,7 @@ extern void thread_cancel_apc( struct th
 extern int thread_add_inflight_fd( struct thread *thread, int client, int server );
 extern int thread_get_inflight_fd( struct thread *thread, int client );
 extern struct token *thread_get_impersonation_token( struct thread *thread );
+extern int set_thread_priority( struct thread *thread, int priority );
 extern int set_thread_affinity( struct thread *thread, affinity_t affinity );
 extern int suspend_thread( struct thread *thread );
 extern int resume_thread( struct thread *thread );
@@ -175,4 +177,9 @@ static inline void set_win32_error( unsi
 
 static inline thread_id_t get_thread_id( struct thread *thread ) { return thread->id; }
 
+/* scheduler functions */
+
+extern void init_scheduler( void );
+extern void set_scheduler_priority( struct thread *thread );
+
 #endif  /* __WINE_SERVER_THREAD_H */

