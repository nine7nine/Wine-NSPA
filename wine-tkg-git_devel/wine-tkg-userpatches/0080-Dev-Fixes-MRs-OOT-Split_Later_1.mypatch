From: Piotr Caban <piotr@codeweavers.com>
Subject: [PATCH v2] server: Don't wait for low level hook result when queuing hardware message.
Message-Id: <daf382d3-924e-7c33-c876-5b8d6298c137@codeweavers.com>
Date: Tue, 21 Sep 2021 15:51:35 +0200


Without the change graphic drivers are blocking until low level hooks
are processed when injecting keyboard and mouse events. Causes 2-seconds 
(timeout) freeze in GtaV.

Signed-off-by: Piotr Caban <piotr@codeweavers.com>
---
v2:
  - don't specify sender in send_hook_ll_message to avoid queuing result

  server/queue.c | 16 +++++++++++++---
  1 file changed, 13 insertions(+), 3 deletions(-)

diff --git a/server/queue.c b/server/queue.c
index 11111111111..11111111111 100644
--- a/server/queue.c
+++ b/server/queue.c
@@ -2132,7 +2132,12 @@ static int queue_mouse_message( struct desktop *desktop, user_handle_t win, cons
         /* specify a sender only when sending the last message */
         if (!(flags & ((1 << ARRAY_SIZE( messages )) - 1)))
         {
-            if (!(wait = send_hook_ll_message( desktop, msg, input, sender )))
+            if (origin == IMO_HARDWARE)
+            {
+                if (!send_hook_ll_message( desktop, msg, input, NULL ))
+                    queue_hardware_message( desktop, msg, 0 );
+            }
+            else if (!(wait = send_hook_ll_message( desktop, msg, input, sender )))
                 queue_hardware_message( desktop, msg, 0 );
         }
         else if (!send_hook_ll_message( desktop, msg, input, NULL ))
@@ -2153,7 +2158,7 @@ static int queue_keyboard_message( struct desktop *desktop, user_handle_t win, c
     struct thread *foreground;
     unsigned char vkey = input->kbd.vkey;
     unsigned int message_code, time;
-    int wait;
+    int wait = 0;
 
     if (!(time = input->kbd.time)) time = get_tick_count();
 
@@ -2273,7 +2278,12 @@ static int queue_keyboard_message( struct desktop *desktop, user_handle_t win, c
         msg_data->flags |= (flags & (KF_EXTENDED | KF_ALTDOWN | KF_UP)) >> 8;
     }
 
-    if (!(wait = send_hook_ll_message( desktop, msg, input, sender )))
+    if (origin == IMO_HARDWARE)
+    {
+        if (!send_hook_ll_message( desktop, msg, input, NULL ))
+            queue_hardware_message( desktop, msg, 1 );
+    }
+    else if (!(wait = send_hook_ll_message( desktop, msg, input, sender )))
         queue_hardware_message( desktop, msg, 1 );
 
     return wait;
From: Keno Fischer <keno@juliacomputing.com>
Subject: [PATCH v2] ntdll: NtCurrentTeb: Remove unnecessary use of .byte
Message-Id: <20211216000953.GA1695242@juliacomputing.com>
Date: Wed, 15 Dec 2021 19:09:53 -0500

The definitions of `NtCurrentTeb` make use of an inline-assembly .byte
prefix to access the `fs` and `gs` prefixes. Given that the last-modify
date for this file is 23 and 13 years ago for i386 and x86_64
respectively, I assume the reason for this use of `.byte` is that the
assemblers of the time did not understand the %fs and %gs prefixes
in textual assembly. However, this is not the case anymore and modern
assemblers understand these just fine. Further, this doesn't reduce
the set of assembler versions capable of building wine either, since
wine elsewhere uses the `xsavec` instruction, which requires a
relatively recent assembler to assemble correctly. Certainly any
assembler that can assemble `xsavec` can also assemble `%fs` and
`%gs` prefixes properly.

The reason to change this is that gcc/gas generate bad DWARF line
tables for this particular inline assembly. This causes crashes
when debugging wine under GDB and accidentally stepping into a
function that makes use of NtCurrentTeb. Arguably this is a GAS
bug and I have filed an appropriate issue [1], but we might as
well fix this in wine also to make debugging more reliable.

See also [2] where I originally reduced this from the GDB crash.

[1] https://sourceware.org/bugzilla/show_bug.cgi?id=28699
[2] https://github.com/rr-debugger/rr/issues/3009

Signed-off-by: Keno Fischer <keno@juliacomputing.com>
---

v2: Fix signoff

 include/winnt.h | 4 ++--
 1 file changed, 2 insertions(+), 2 deletions(-)

diff --git a/include/winnt.h b/include/winnt.h
index 11111111111..11111111111 100644
--- a/include/winnt.h
+++ b/include/winnt.h
@@ -2267,7 +2267,7 @@ struct _TEB;
 static FORCEINLINE struct _TEB * WINAPI NtCurrentTeb(void)
 {
     struct _TEB *teb;
-    __asm__(".byte 0x64\n\tmovl (0x18),%0" : "=r" (teb));
+    __asm__("movl %%fs:0x18,%0" : "=r" (teb));
     return teb;
 }
 #elif defined(__i386__) && defined(_MSC_VER)
@@ -2282,7 +2282,7 @@ static FORCEINLINE struct _TEB * WINAPI NtCurrentTeb(void)
 static FORCEINLINE struct _TEB * WINAPI NtCurrentTeb(void)
 {
     struct _TEB *teb;
-    __asm__(".byte 0x65\n\tmovq (0x30),%0" : "=r" (teb));
+    __asm__("movq %%gs:0x30,%0" : "=r" (teb));
     return teb;
 }
 #elif defined(__x86_64__) && defined(_MSC_VER)

-- 
2.36.1

From: Keno Fischer <keno@juliacomputing.com>
Subject: [PATCH v2] ntdll/server: Make robust to spurious short writes
Message-Id: <20211216020935.GA1741897@juliacomputing.com>
Date: Wed, 15 Dec 2021 21:09:35 -0500

It is possible for the write/writev functions in send_request to
return short writes, even in non-error conditions. There are
several situations where this might happen. Examples are:
 - SIGSTOP/SIGCONT (either explicitly or via ptrace attach)
 - cgroup freezes and similar mechanisms
 - system suspends
 - External debuggers or profilers

In general, Linux makes very few guarantees about syscall restarts.
In some cases (in particular when no bytes have been transferred at all),
the linux kernel will automatically restart the system call, but once any
bytes have been transferred, the result will be a short write with
no automatic restart.

Make wine robust to this corner case by properly restarting a
short write with adjusted buffers.

Signed-off-by: Keno Fischer <keno@juliacomputing.com>
---

v2: Fix signoff, fix comment style, stop talking about SIGINT example
    in comments and commit message which, as Alexandre Julliard points
    out, is not applicable here.

 dlls/ntdll/unix/server.c | 41 +++++++++++++++++++++++++++++++++-------
 1 file changed, 34 insertions(+), 7 deletions(-)

diff --git a/dlls/ntdll/unix/server.c b/dlls/ntdll/unix/server.c
index 11111111111..11111111111 100644
--- a/dlls/ntdll/unix/server.c
+++ b/dlls/ntdll/unix/server.c
@@ -207,13 +207,25 @@ static DECLSPEC_NORETURN void server_protocol_perror( const char *err )
 static unsigned int send_request( const struct __server_request_info *req )
 {
     unsigned int i;
-    int ret;
+    int ret = 0;
 
+    int to_write = sizeof(req->u.req) + req->u.req.request_header.request_size;
     if (!req->u.req.request_header.request_size)
     {
-        if ((ret = write( ntdll_get_thread_data()->request_fd, &req->u.req,
-                          sizeof(req->u.req) )) == sizeof(req->u.req)) return STATUS_SUCCESS;
-
+        const char *write_ptr = (const char *)&req->u.req;
+        for (;;) {
+            ret = write( ntdll_get_thread_data()->request_fd, (void*)write_ptr,
+                         to_write );
+            if (ret == to_write) return STATUS_SUCCESS;
+            else if (ret < 0) break;
+            /* Short write. Most signals are blocked at this point, but it is
+               still possible to experience a syscall restart due to, e.g.
+               a SIGSTOP, cgroup freeze or external debug/profile tooling.
+               This is not an error. Simply adjust the remaining write length
+               and buffer and start again. */
+            to_write -= ret;
+            write_ptr += ret;
+        }
     }
     else
     {
@@ -226,11 +238,26 @@ static unsigned int send_request( const struct __server_request_info *req )
             vec[i+1].iov_base = (void *)req->data[i].ptr;
             vec[i+1].iov_len = req->data[i].size;
         }
-        if ((ret = writev( ntdll_get_thread_data()->request_fd, vec, i+1 )) ==
-            req->u.req.request_header.request_size + sizeof(req->u.req)) return STATUS_SUCCESS;
+
+        for (;;) {
+            ret = writev( ntdll_get_thread_data()->request_fd, vec, i+1 );
+            if (ret == to_write) return STATUS_SUCCESS;
+            else if (ret < 0) break;
+            /* Short write as above. Adjust buffer lengths and start again. */
+            to_write -= ret;
+            for (unsigned int j = 0; j < i+1; j++) {
+                if (ret >= vec[j].iov_len) {
+                    ret -= vec[j].iov_len;
+                    vec[j].iov_len = 0;
+                } else {
+                    vec[j].iov_base = (char *)vec[j].iov_base + ret;
+                    vec[j].iov_len -= ret;
+                    break;
+                }
+            }
+        }
     }
 
-    if (ret >= 0) server_protocol_error( "partial write %d\n", ret );
     if (errno == EPIPE) abort_thread(0);
     if (errno == EFAULT) return STATUS_ACCESS_VIOLATION;
     server_protocol_perror( "write" );

-- 
2.36.1

From: Haoyang Chen <chenhaoyang@uniontech.com>
#Subject: [PATCH] hidclass.sys: Fix a leak in hid_device_thread()
Message-Id: <c6af8e6f-a4cd-11a9-6afe-e175220354c3@uniontech.com>
Date: Wed, 9 Sep 2020 14:40:18 +0800

From daf4ffcceeb9b30c93b6808d3797c4d756d6251f Mon Sep 17 00:00:00 2001
From: Haoyang Chen <chenhaoyang@uniontech.com>
Date: Wed, 9 Sep 2020 14:35:58 +0800
Subject: [PATCH] hidclass.sys: Fix a leak in hid_device_thread().

Signed-off-by: Haoyang Chen <chenhaoyang@uniontech.com>
---
 dlls/hidclass.sys/device.c | 2 ++
 1 file changed, 2 insertions(+)

diff --git a/dlls/hidclass.sys/device.c b/dlls/hidclass.sys/device.c
index 11111111111..11111111111 100644
--- a/dlls/hidclass.sys/device.c
+++ b/dlls/hidclass.sys/device.c
@@ -364,6 +364,8 @@ static DWORD CALLBACK hid_device_thread(void *args)
         res = WaitForSingleObject(ext->u.pdo.halt_event, polled ? ext->u.pdo.poll_interval : 0);
     } while (res == WAIT_TIMEOUT);
 
+    HeapFree(GetProcessHeap(), 0, packet);
+
     TRACE( "device thread exiting, res %#lx\n", res );
     return 1;
 }
Subject: [PATCH] msi: Fix page fault when a patch does not contain a cabinet.

Taken from https://bugs.winehq.org/show_bug.cgi?id=50148

diff --git a/dlls/msi/files.c b/dlls/msi/files.c
index 11111111111..11111111111 100644
--- a/dlls/msi/files.c
+++ b/dlls/msi/files.c
@@ -827,7 +827,7 @@ UINT ACTION_PatchFiles( MSIPACKAGE *package )
             data.cb      = patchfiles_cb;
             data.user    = &cursor;
 
-            if (!msi_cabextract( package, mi, &data ))
+            if (mi->cabinet && !msi_cabextract( package, mi, &data ))
             {
                 ERR("Failed to extract cabinet: %s\n", debugstr_w(mi->cabinet));
                 rc = ERROR_INSTALL_FAILURE;
From: Myah Caron <qsniyg@protonmail.com>
Subject: [PATCH resend 1/3] ntdll: Use Vista's algorithm for RtlEncode/DecodePointer.
Message-Id: <t6E_KbjMO57JXjdT_S0DgMaDnoDBHGKG3Le0dXDYT9Jx5kb6maLOtD3xB3vIwzd4EUfXPipQs3pp_795_Kl-HHHTnrqdVbOzzZB20fuBMBQ=@protonmail.com>
Date: Thu, 11 Mar 2021 02:44:10 +0000

The algorithm is described here:
https://web.archive.org/web/20100603042315/http://blogs.msdn.com/b/michael_howard/archive/2006/08/16/702707.aspx

It still appears to be the same algorithm used in Windows 10.

Signed-off-by: Myah Caron <qsniyg@protonmail.com>
---
 dlls/ntdll/rtl.c | 34 ++++++++++++++++++++++++++++++++--
 1 file changed, 32 insertions(+), 2 deletions(-)

diff --git a/dlls/ntdll/rtl.c b/dlls/ntdll/rtl.c
index 11111111111..11111111111 100644
--- a/dlls/ntdll/rtl.c
+++ b/dlls/ntdll/rtl.c
@@ -1592,19 +1592,49 @@ static DWORD_PTR get_pointer_obfuscator( void )
     return pointer_obfuscator;
 }
 
+/***********************************************************************
+ * rotl_ptr (internal)
+ */
+#ifdef _WIN64
+#define ROT_BITS 64
+#else
+#define ROT_BITS 32
+#endif
+
+static DWORD_PTR rotl_ptr( DWORD_PTR num, int shift )
+{
+    shift &= ROT_BITS - 1;
+    return (num << shift) | (num >> (ROT_BITS-shift));
+}
+
+static DWORD_PTR rotr_ptr( DWORD_PTR num, int shift )
+{
+    shift &= ROT_BITS - 1;
+    return (num >> shift) | (num << (ROT_BITS-shift));
+}
+
+#undef ROT_BITS
+
 /*************************************************************************
  * RtlEncodePointer   [NTDLL.@]
  */
 PVOID WINAPI RtlEncodePointer( PVOID ptr )
 {
+
     DWORD_PTR ptrval = (DWORD_PTR) ptr;
-    return (PVOID)(ptrval ^ get_pointer_obfuscator());
+    DWORD_PTR cookie = get_pointer_obfuscator();
+
+    ptrval = (ptrval ^ cookie);
+    return (PVOID)rotr_ptr(ptrval, cookie);
 }
 
 PVOID WINAPI RtlDecodePointer( PVOID ptr )
 {
     DWORD_PTR ptrval = (DWORD_PTR) ptr;
-    return (PVOID)(ptrval ^ get_pointer_obfuscator());
+    DWORD_PTR cookie = get_pointer_obfuscator();
+
+    ptrval = rotl_ptr(ptrval, cookie);
+    return (PVOID)(ptrval ^ cookie);
 }
 
 /*************************************************************************
-- 
2.36.1

From: Myah Caron <qsniyg@protonmail.com>
Subject: [PATCH resend 2/3] ntdll: Implement ProcessCookie for NtQueryInformationProcess.
Message-Id: <kOZB-Qr3zAOzuV6t2aRc7ldQGANigaQuL58so2yBFj5AnoiD8ZeA85bXhsjGDyO1XeT00jJC68tA7a5kEkvEeBGuKandT7bwIdne1WbS-Mk=@protonmail.com>
Date: Thu, 11 Mar 2021 02:44:40 +0000

The entropy is based on
https://web.archive.org/web/20100603042315/http://blogs.msdn.com/b/michael_howard/archive/2006/08/16/702707.aspx

Signed-off-by: Myah Caron <qsniyg@protonmail.com>
---
I've opted not to include the rdtsc instruction for patch simplicity. It would require either intrinsics or inline assembly, and I'm not sure what's the right way to integrate this under wine.

Since the SystemCalls and PageFaults fields are not currently implemented under wine, the entropy currently isn't as good as it could be. I initially thought of (ab)using SystemInterruptInformation's getrandom usage, but I figured that would be even more of a hack. If this (or something else) would be preferred however, please let me know.

 dlls/ntdll/unix/process.c | 28 ++++++++++++++++++++++++++--
 1 file changed, 26 insertions(+), 2 deletions(-)

diff --git a/dlls/ntdll/unix/process.c b/dlls/ntdll/unix/process.c
index 11111111111..11111111111 100644
--- a/dlls/ntdll/unix/process.c
+++ b/dlls/ntdll/unix/process.c
@@ -65,6 +65,7 @@
 #include "windef.h"
 #include "winternl.h"
 #include "winioctl.h"
+#include "ddk/wdm.h"
 #include "unix_private.h"
 #include "wine/condrv.h"
 #include "wine/server.h"
@@ -1056,6 +1057,30 @@ void fill_vm_counters( VM_COUNTERS_EX *pvmi, int unix_pid )
 
 #endif
 
+static ULONG get_process_cookie( void )
+{
+    static ULONG process_cookie;
+
+    if (!process_cookie)
+    {
+        SYSTEM_PERFORMANCE_INFORMATION spi;
+
+        ULONG cookie = user_shared_data->TickCount.High1Time;
+        cookie ^= user_shared_data->TickCount.LowPart;
+        cookie ^= user_shared_data->InterruptTime.LowPart;
+
+        NtQuerySystemInformation( SystemPerformanceInformation, &spi, sizeof( spi ), NULL );
+        cookie ^= spi.SystemCalls;
+        cookie ^= spi.PageFaults;
+
+        /* cookie ^= (ULONG)rdtsc */
+
+        InterlockedExchange( (LONG*)&process_cookie, cookie );
+    }
+
+    return process_cookie;
+}
+
 #define UNIMPLEMENTED_INFO_CLASS(c) \
     case c: \
         FIXME( "(process=%p) Unimplemented information class: " #c "\n", handle); \
@@ -1498,11 +1523,10 @@ NTSTATUS WINAPI NtQueryInformationProces
         break;
 
     case ProcessCookie:
-        FIXME( "ProcessCookie (%p,%p,0x%08x,%p) stub\n", handle, info, (int)size, ret_len );
         if (handle == NtCurrentProcess())
         {
             len = sizeof(ULONG);
-            if (size == len) *(ULONG *)info = 0;
+            if (size == len) *(ULONG *)info = get_process_cookie();
             else ret = STATUS_INFO_LENGTH_MISMATCH;
         }
         else ret = STATUS_INVALID_PARAMETER;

-- 
2.36.1

From: Myah Caron <qsniyg@protonmail.com>
Subject: [PATCH resend 3/3] ntdll: Use ProcessCookie in RtlEncode/DecodePointer.
Message-Id: <Y-LCRs9OnrXxeFO0BFMHAFAaxb7EfqhOmo-_aY-O6t3B6WtiNGLX-RLiczvv7CAVX2hgv1BhxM7As4OYkB52JSPv8Jr8nWzxq6itDyf-jDA=@protonmail.com>
Date: Thu, 11 Mar 2021 02:45:08 +0000

Signed-off-by: Myah Caron <qsniyg@protonmail.com>
---
 dlls/ntdll/rtl.c | 30 +++++++++++-------------------
 1 file changed, 11 insertions(+), 19 deletions(-)

diff --git a/dlls/ntdll/rtl.c b/dlls/ntdll/rtl.c
index 11111111111..11111111111 100644
--- a/dlls/ntdll/rtl.c
+++ b/dlls/ntdll/rtl.c
@@ -1566,30 +1566,22 @@ WCHAR * WINAPI RtlIpv6AddressToStringW(const IN6_ADDR *address, WCHAR *str)
 }
 
 /***********************************************************************
- * get_pointer_obfuscator (internal)
+ * get_process_cookie (internal)
  */
-static DWORD_PTR get_pointer_obfuscator( void )
+static ULONG get_process_cookie( void )
 {
-    static DWORD_PTR pointer_obfuscator;
+    static ULONG process_cookie;
 
-    if (!pointer_obfuscator)
+    if (!process_cookie)
     {
-        ULONG seed = NtGetTickCount();
-        ULONG_PTR rand;
+        ULONG cookie;
+        NtQueryInformationProcess( NtCurrentProcess(), ProcessCookie, &cookie,
+                                   sizeof( cookie ), NULL );
 
-        /* generate a random value for the obfuscator */
-        rand = RtlUniform( &seed );
-
-        /* handle 64bit pointers */
-        rand ^= (ULONG_PTR)RtlUniform( &seed ) << ((sizeof (DWORD_PTR) - sizeof (ULONG))*8);
-
-        /* set the high bits so dereferencing obfuscated pointers will (usually) crash */
-        rand |= (ULONG_PTR)0xc0000000 << ((sizeof (DWORD_PTR) - sizeof (ULONG))*8);
-
-        InterlockedCompareExchangePointer( (void**) &pointer_obfuscator, (void*) rand, NULL );
+        InterlockedExchange( (LONG*)&process_cookie, cookie );
     }
 
-    return pointer_obfuscator;
+    return process_cookie;
 }
 
 /***********************************************************************
@@ -1622,7 +1614,7 @@ PVOID WINAPI RtlEncodePointer( PVOID ptr )
 {
 
     DWORD_PTR ptrval = (DWORD_PTR) ptr;
-    DWORD_PTR cookie = get_pointer_obfuscator();
+    DWORD_PTR cookie = (DWORD_PTR) get_process_cookie();
 
     ptrval = (ptrval ^ cookie);
     return (PVOID)rotr_ptr(ptrval, cookie);
@@ -1631,7 +1623,7 @@ PVOID WINAPI RtlEncodePointer( PVOID ptr )
 PVOID WINAPI RtlDecodePointer( PVOID ptr )
 {
     DWORD_PTR ptrval = (DWORD_PTR) ptr;
-    DWORD_PTR cookie = get_pointer_obfuscator();
+    DWORD_PTR cookie = (DWORD_PTR) get_process_cookie();
 
     ptrval = rotl_ptr(ptrval, cookie);
     return (PVOID)(ptrval ^ cookie);
-- 
2.36.1

From: "Jiangyi Chen" <cjy520lcy@163.com>
#Subject: [PATCH] shell32: Use CP_UTF8 in __SHCloneStrAtoW.
Message-Id: <26bf0c42.3726.178151abb94.Coremail.cjy520lcy@163.com>
Date: Tue, 9 Mar 2021 11:49:36 +0800 (CST)

From 55b69cbacc40a684b6abafee155aa8fa63218433 Mon Sep 17 00:00:00 2001
From: Jiangyi Chen <chenjiangyi@uniontech.com>
Date: Tue, 9 Mar 2021 11:46:53 +0800
Subject: [PATCH] shell32: Use CP_UTF8 in __SHCloneStrAtoW. Fix problem that
 some paths cannot be opened by ShellExecuteA or ShellExecuteExA.

Signed-off-by: Jiangyi Chen <chenjiangyi@uniontech.com>
---
 dlls/shell32/shell32_main.h | 4 ++--
 1 file changed, 2 insertions(+), 2 deletions(-)

diff --git a/dlls/shell32/shell32_main.h b/dlls/shell32/shell32_main.h
index 11111111111..11111111111 100644
--- a/dlls/shell32/shell32_main.h
+++ b/dlls/shell32/shell32_main.h
@@ -170,9 +170,9 @@ static inline BOOL SHELL_OsIsUnicode(void)
 
 static inline WCHAR * __SHCloneStrAtoW(WCHAR ** target, const char * source)
 {
-	int len = MultiByteToWideChar(CP_ACP, 0, source, -1, NULL, 0);
+	int len = MultiByteToWideChar(CP_UTF8, 0, source, -1, NULL, 0);
 	*target = SHAlloc(len*sizeof(WCHAR));
-	MultiByteToWideChar(CP_ACP, 0, source, -1, *target, len);
+	MultiByteToWideChar(CP_UTF8, 0, source, -1, *target, len);
 	return *target;
 }
 

-- 
2.36.1

From 7130d843a12757b75c5588a9e19f9f4a4b9ea7ae Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?R=C3=A9mi=20Bernon?= <rbernon@codeweavers.com>
Date: Tue, 8 Feb 2022 17:27:13 +0100
Subject: [PATCH] server: Seal shared memory mappings against future writes.

So that even if we leak console handles, we will, at least, stop messing
with these once and for all. This only prevents write(2) and mmap(2), as
we've already mmaped the writable pages we don't need it anymore.

This fixes Dead Cells hanging on launch, as it writes its DXVK logs to
one of the thread input shared memory handles, causing GetFocus to loop
forever as the sequence number got overwritten.

CW-Bug-Id: #20128
---
 configure.ac     |  1 +
 server/mapping.c | 24 ++++++++++++++++++++++++
 2 files changed, 25 insertions(+)

diff --git a/configure.ac b/configure.ac
index bc4f47d9889..22229880023 100644
--- a/configure.ac
+++ b/configure.ac
@@ -1994,6 +1994,7 @@ AC_CHECK_FUNCS(\
 	getrandom \
 	kqueue \
 	mach_continuous_time \
+	memfd_create \
 	pipe2 \
 	port_create \
 	posix_fadvise \
diff --git a/server/mapping.c b/server/mapping.c
index ecbfbee7ea1..4514a877177 100644
--- a/server/mapping.c
+++ b/server/mapping.c
@@ -268,6 +268,7 @@ int grow_file( int unix_fd, file_pos_t new_size )
     return 0;
 }
 
+#ifndef HAVE_MEMFD_CREATE
 /* simplified version of mkstemps() */
 static int make_temp_file( char name[16] )
 {
@@ -301,10 +302,23 @@ static int check_current_dir_for_exec(void)
     unlink( tmpfn );
     return (ret != MAP_FAILED);
 }
+#endif
 
 /* create a temp file for anonymous mappings */
 static int create_temp_file( file_pos_t size )
 {
+#ifdef HAVE_MEMFD_CREATE
+    int fd = memfd_create( "wine-mapping", MFD_ALLOW_SEALING );
+    if (fd != -1)
+    {
+        if (!grow_file( fd, size ))
+        {
+            close( fd );
+            fd = -1;
+        }
+    }
+    else file_set_error();
+#else
     static int temp_dir_fd = -1;
     char tmpfn[16];
     int fd;
@@ -337,6 +351,7 @@ static int create_temp_file( file_pos_t size )
     else file_set_error();
 
     if (temp_dir_fd != server_dir_fd) fchdir( server_dir_fd );
+#endif
     return fd;
 }
 
@@ -1103,6 +1118,10 @@ int get_page_size(void)
     return page_mask + 1;
 }
 
+#ifndef F_SEAL_FUTURE_WRITE
+#define F_SEAL_FUTURE_WRITE 0x0010  /* prevent future writes while mapped */
+#endif
+
 struct object *create_user_data_mapping( struct object *root, const struct unicode_str *name,
                                          unsigned int attr, const struct security_descriptor *sd )
 {
@@ -1112,6 +1131,7 @@ struct object *create_user_data_mapping( struct object *root, const struct unico
     if (!(mapping = create_mapping( root, name, attr, sizeof(KSHARED_USER_DATA),
                                     SEC_COMMIT, 0, FILE_READ_DATA | FILE_WRITE_DATA, sd ))) return NULL;
     ptr = mmap( NULL, mapping->size, PROT_WRITE, MAP_SHARED, get_unix_fd( mapping->fd ), 0 );
+
     if (ptr != MAP_FAILED)
     {
         user_shared_data = ptr;
@@ -1123,11 +1143,15 @@ struct object *create_user_data_mapping( struct object *root, const struct unico
 struct object *create_shared_mapping( struct object *root, const struct unicode_str *name,
                                       mem_size_t size, const struct security_descriptor *sd, void **ptr )
 {
+    static int seals = F_SEAL_FUTURE_WRITE | F_SEAL_SHRINK | F_SEAL_GROW | F_SEAL_SEAL;
     struct mapping *mapping;
 
     if (!(mapping = create_mapping( root, name, OBJ_OPENIF, size, SEC_COMMIT, 0,
                                     FILE_READ_DATA | FILE_WRITE_DATA, sd ))) return NULL;
     *ptr = mmap( NULL, mapping->size, PROT_WRITE, MAP_SHARED, get_unix_fd( mapping->fd ), 0 );
+
+    fcntl( get_unix_fd( mapping->fd ), F_ADD_SEALS, seals );
+
     if (*ptr == MAP_FAILED)
     {
         release_object( &mapping->obj );

From 911c647fbcdc4bb1222ac35707b1dd1ffc9d2809 Mon Sep 17 00:00:00 2001
From: Paul Gofman <pgofman@codeweavers.com>
Date: Thu, 16 Jun 2022 13:41:44 -0500
Subject: [PATCH 1/3] ntdll: Factor out validate_context_xstate() function.

Signed-off-by: Paul Gofman <pgofman@codeweavers.com>
---
 dlls/ntdll/unix/signal_i386.c   |  4 +---
 dlls/ntdll/unix/signal_x86_64.c |  4 +---
 dlls/ntdll/unix/thread.c        | 17 +++++++++++++++++
 dlls/ntdll/unix/unix_private.h  |  1 +
 4 files changed, 20 insertions(+), 6 deletions(-)

diff --git a/dlls/ntdll/unix/signal_i386.c b/dlls/ntdll/unix/signal_i386.c
index 7be0c39c424..a515b21cc2e 100644
--- a/dlls/ntdll/unix/signal_i386.c
+++ b/dlls/ntdll/unix/signal_i386.c
@@ -1098,9 +1098,7 @@ NTSTATUS WINAPI NtGetContextThread( HANDLE handle, CONTEXT *context )
             XSTATE *xstate = (XSTATE *)((char *)context_ex + context_ex->XState.Offset);
             unsigned int mask;
 
-            if (context_ex->XState.Length < offsetof(XSTATE, YmmContext)
-                || context_ex->XState.Length > sizeof(XSTATE))
-                return STATUS_INVALID_PARAMETER;
+            if (!validate_context_xstate( context )) return STATUS_INVALID_PARAMETER;
 
             mask = (xstate_compaction_enabled ? xstate->CompactionMask : xstate->Mask) & XSTATE_MASK_GSSE;
             xstate->Mask = frame->xstate.Mask & mask;
diff --git a/dlls/ntdll/unix/signal_x86_64.c b/dlls/ntdll/unix/signal_x86_64.c
index 6c87e347eac..3aac1bc3e75 100644
--- a/dlls/ntdll/unix/signal_x86_64.c
+++ b/dlls/ntdll/unix/signal_x86_64.c
@@ -1918,9 +1918,7 @@ NTSTATUS WINAPI NtGetContextThread( HANDLE handle, CONTEXT *context )
         XSTATE *xstate = (XSTATE *)((char *)context_ex + context_ex->XState.Offset);
         unsigned int mask;
 
-        if (context_ex->XState.Length < offsetof(XSTATE, YmmContext)
-            || context_ex->XState.Length > sizeof(XSTATE))
-            return STATUS_INVALID_PARAMETER;
+        if (!validate_context_xstate( context )) return STATUS_INVALID_PARAMETER;
 
         mask = (xstate_compaction_enabled ? xstate->CompactionMask : xstate->Mask) & XSTATE_MASK_GSSE;
         xstate->Mask = frame->xstate.Mask & mask;
diff --git a/dlls/ntdll/unix/thread.c b/dlls/ntdll/unix/thread.c
index ad47a5fce74..6289b8eadca 100644
--- a/dlls/ntdll/unix/thread.c
+++ b/dlls/ntdll/unix/thread.c
@@ -152,6 +152,23 @@ void fpu_to_fpux( XMM_SAVE_AREA32 *fpux, const I386_FLOATING_SAVE_AREA *fpu )
 }
 
 
+/***********************************************************************
+ *           validate_context_xstate
+ */
+BOOL validate_context_xstate( CONTEXT *context )
+{
+    CONTEXT_EX *context_ex;
+
+    context_ex = (CONTEXT_EX *)(context + 1);
+
+    if (context_ex->XState.Length < offsetof(XSTATE, YmmContext)
+        || context_ex->XState.Length > sizeof(XSTATE))
+        return FALSE;
+
+    return TRUE;
+}
+
+
 /***********************************************************************
  *           get_server_context_flags
  */
diff --git a/dlls/ntdll/unix/unix_private.h b/dlls/ntdll/unix/unix_private.h
index 795fc148479..5e101bbe363 100644
--- a/dlls/ntdll/unix/unix_private.h
+++ b/dlls/ntdll/unix/unix_private.h
@@ -185,6 +185,7 @@ extern void DECLSPEC_NORETURN abort_process( int status ) DECLSPEC_HIDDEN;
 extern void DECLSPEC_NORETURN exit_process( int status ) DECLSPEC_HIDDEN;
 extern void wait_suspend( CONTEXT *context ) DECLSPEC_HIDDEN;
 extern NTSTATUS send_debug_event( EXCEPTION_RECORD *rec, CONTEXT *context, BOOL first_chance ) DECLSPEC_HIDDEN;
+extern BOOL validate_context_xstate( CONTEXT *context ) DECLSPEC_HIDDEN;
 extern NTSTATUS set_thread_context( HANDLE handle, const void *context, BOOL *self, USHORT machine ) DECLSPEC_HIDDEN;
 extern NTSTATUS get_thread_context( HANDLE handle, void *context, BOOL *self, USHORT machine ) DECLSPEC_HIDDEN;
 extern NTSTATUS alloc_object_attributes( const OBJECT_ATTRIBUTES *attr, struct object_attributes **ret,
-- 
GitLab


From 9f36c3c40a0e838633cc2521502f9edd6e4bccd0 Mon Sep 17 00:00:00 2001
From: Paul Gofman <pgofman@codeweavers.com>
Date: Thu, 16 Jun 2022 13:50:10 -0500
Subject: [PATCH 2/3] ntdll: Validate context xstate at once in
 NtGetContextThread().

Signed-off-by: Paul Gofman <pgofman@codeweavers.com>
---
 dlls/ntdll/unix/signal_i386.c   | 4 ++--
 dlls/ntdll/unix/signal_x86_64.c | 4 ++--
 dlls/ntdll/unix/thread.c        | 2 ++
 3 files changed, 6 insertions(+), 4 deletions(-)

diff --git a/dlls/ntdll/unix/signal_i386.c b/dlls/ntdll/unix/signal_i386.c
index a515b21cc2e..95e7a69a6e1 100644
--- a/dlls/ntdll/unix/signal_i386.c
+++ b/dlls/ntdll/unix/signal_i386.c
@@ -1003,6 +1003,8 @@ NTSTATUS WINAPI NtGetContextThread( HANDLE handle, CONTEXT *context )
     BOOL self = (handle == GetCurrentThread());
     NTSTATUS ret;
 
+    if (!validate_context_xstate( context )) return STATUS_INVALID_PARAMETER;
+
     /* debug registers require a server call */
     if (needed_flags & CONTEXT_DEBUG_REGISTERS) self = FALSE;
 
@@ -1098,8 +1100,6 @@ NTSTATUS WINAPI NtGetContextThread( HANDLE handle, CONTEXT *context )
             XSTATE *xstate = (XSTATE *)((char *)context_ex + context_ex->XState.Offset);
             unsigned int mask;
 
-            if (!validate_context_xstate( context )) return STATUS_INVALID_PARAMETER;
-
             mask = (xstate_compaction_enabled ? xstate->CompactionMask : xstate->Mask) & XSTATE_MASK_GSSE;
             xstate->Mask = frame->xstate.Mask & mask;
             xstate->CompactionMask = xstate_compaction_enabled ? (0x8000000000000000 | mask) : 0;
diff --git a/dlls/ntdll/unix/signal_x86_64.c b/dlls/ntdll/unix/signal_x86_64.c
index 3aac1bc3e75..11e652e1dca 100644
--- a/dlls/ntdll/unix/signal_x86_64.c
+++ b/dlls/ntdll/unix/signal_x86_64.c
@@ -1832,6 +1832,8 @@ NTSTATUS WINAPI NtGetContextThread( HANDLE handle, CONTEXT *context )
     DWORD needed_flags = context->ContextFlags & ~CONTEXT_AMD64;
     BOOL self = (handle == GetCurrentThread());
 
+    if (!validate_context_xstate( context )) return STATUS_INVALID_PARAMETER;
+
     /* debug registers require a server call */
     if (needed_flags & CONTEXT_DEBUG_REGISTERS) self = FALSE;
 
@@ -1918,8 +1920,6 @@ NTSTATUS WINAPI NtGetContextThread( HANDLE handle, CONTEXT *context )
         XSTATE *xstate = (XSTATE *)((char *)context_ex + context_ex->XState.Offset);
         unsigned int mask;
 
-        if (!validate_context_xstate( context )) return STATUS_INVALID_PARAMETER;
-
         mask = (xstate_compaction_enabled ? xstate->CompactionMask : xstate->Mask) & XSTATE_MASK_GSSE;
         xstate->Mask = frame->xstate.Mask & mask;
         xstate->CompactionMask = xstate_compaction_enabled ? (0x8000000000000000 | mask) : 0;
diff --git a/dlls/ntdll/unix/thread.c b/dlls/ntdll/unix/thread.c
index 6289b8eadca..b393315e6fe 100644
--- a/dlls/ntdll/unix/thread.c
+++ b/dlls/ntdll/unix/thread.c
@@ -159,6 +159,8 @@ BOOL validate_context_xstate( CONTEXT *context )
 {
     CONTEXT_EX *context_ex;
 
+    if (!((context->ContextFlags & 0x40) && (cpu_info.ProcessorFeatureBits & CPU_FEATURE_AVX))) return TRUE;
+
     context_ex = (CONTEXT_EX *)(context + 1);
 
     if (context_ex->XState.Length < offsetof(XSTATE, YmmContext)
-- 
GitLab


From 69b11d38a44e9eed4894497d5bbb1ad9b6304ce4 Mon Sep 17 00:00:00 2001
From: Paul Gofman <pgofman@codeweavers.com>
Date: Thu, 16 Jun 2022 13:25:39 -0500
Subject: [PATCH 3/3] ntdll: Validate xstate alignment in
 validate_context_xstate().

Signed-off-by: Paul Gofman <pgofman@codeweavers.com>
---
 dlls/ntdll/tests/exception.c | 14 ++++++++++++++
 dlls/ntdll/unix/thread.c     |  2 ++
 2 files changed, 16 insertions(+)

diff --git a/dlls/ntdll/tests/exception.c b/dlls/ntdll/tests/exception.c
index 820e435bc1b..06a38756f80 100644
--- a/dlls/ntdll/tests/exception.c
+++ b/dlls/ntdll/tests/exception.c
@@ -9445,6 +9445,7 @@ static void test_extended_context(void)
     CONTEXT_EX *context_ex;
     CONTEXT *context;
     unsigned data[8];
+    NTSTATUS status;
     HANDLE thread;
     ULONG64 mask;
     XSTATE *xs;
@@ -10227,6 +10228,19 @@ static void test_extended_context(void)
     thread = CreateThread(NULL, 0, test_extended_context_thread, 0, CREATE_SUSPENDED, NULL);
     ok(!!thread, "Failed to create thread.\n");
 
+    /* Unaligned xstate. */
+    length = sizeof(context_buffer);
+    memset(context_buffer, 0xcc, sizeof(context_buffer));
+    bret = pInitializeContext(context_buffer, CONTEXT_FULL | CONTEXT_XSTATE | CONTEXT_FLOATING_POINT,
+            &context, &length);
+    ok(bret, "Got unexpected bret %#x.\n", bret);
+    context_ex = (CONTEXT_EX *)(context + 1);
+    context_ex->XState.Offset += 0x10;
+    status = pNtGetContextThread(thread, context);
+    ok(status == STATUS_INVALID_PARAMETER, "Unexpected status %#lx.\n", status);
+    status = pNtGetContextThread(GetCurrentThread(), context);
+    ok(status == STATUS_INVALID_PARAMETER, "Unexpected status %#lx.\n", status);
+
     bret = pInitializeContext(context_buffer, CONTEXT_FULL | CONTEXT_XSTATE | CONTEXT_FLOATING_POINT,
             &context, &length);
     ok(bret, "Got unexpected bret %#x.\n", bret);
diff --git a/dlls/ntdll/unix/thread.c b/dlls/ntdll/unix/thread.c
index b393315e6fe..00ee607a671 100644
--- a/dlls/ntdll/unix/thread.c
+++ b/dlls/ntdll/unix/thread.c
@@ -167,6 +167,8 @@ BOOL validate_context_xstate( CONTEXT *context )
         || context_ex->XState.Length > sizeof(XSTATE))
         return FALSE;
 
+    if (((ULONG_PTR)context_ex + context_ex->XState.Offset) & 63) return FALSE;
+
     return TRUE;
 }
 
-- 
GitLab

From e4264a5a266a5f9aa55336535ac7efbb985251a7 Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?R=C3=A9mi=20Bernon?= <rbernon@codeweavers.com>
Date: Thu, 17 Mar 2022 11:49:07 +0100
Subject: [PATCH] server: Reuse shared mapping's mmaped pointer and handle mmap
 failures.

Desktop and its shared mapping can be still alive and may be reused
after desktop is unlinked via close_desktop_timeout() but before all
references and handles are cleared.

On the re-use path the mmap(PROT_WRITE) is called on a write-sealed fd
which will fail returning MAP_FAILED. It would then be propagated up and
dereferenced causing the server to crash.

This fixes the crash + makes sure that we can recreate the desktop
successfully if needed.

This also correctly unmap the shared memory pointers whenever a mapping
is destroyed, fixing memory leaks when many threads are created.

Fixes: 653dab05664e ("server: Seal shared memory mappings against future writes.")
Fixes: 61521e371ac4 ("HACK: server: Close desktop immediately when last user is removed.")
CW-Bug-Id: #20266
CW-Bug-Id: #20297
---
 server/mapping.c    | 15 ++++++++++++---
 server/thread.c     |  4 ++--
 server/winstation.c |  5 +++--
 3 files changed, 17 insertions(+), 7 deletions(-)

diff --git a/server/mapping.c b/server/mapping.c
index 4514a877177..4c90673a5c5 100644
--- a/server/mapping.c
+++ b/server/mapping.c
@@ -29,6 +29,7 @@
 #include <sys/stat.h>
 #include <sys/mman.h>
 #include <unistd.h>
+#include <errno.h>
 
 #include "ntstatus.h"
 #define WIN32_NO_STATUS
@@ -165,6 +166,7 @@ struct mapping
     pe_image_info_t image;           /* image info (for PE image mapping) */
     struct ranges  *committed;       /* list of committed ranges in this mapping */
     struct shared_map *shared;       /* temp file for shared PE mapping */
+    void           *shared_ptr;      /* mmaped pointer for shared mappings */
 };
 
 static void mapping_dump( struct object *obj, int verbose );
@@ -905,6 +907,7 @@ static struct mapping *create_mapping( struct object *root, const struct unicode
     mapping->fd          = NULL;
     mapping->shared      = NULL;
     mapping->committed   = NULL;
+    mapping->shared_ptr  = MAP_FAILED;
 
     if (!(mapping->flags = get_mapping_flags( handle, flags ))) goto error;
 
@@ -1105,6 +1108,7 @@ static void mapping_destroy( struct object *obj )
     if (mapping->fd) release_object( mapping->fd );
     if (mapping->committed) release_object( mapping->committed );
     if (mapping->shared) release_object( mapping->shared );
+    if (mapping->shared_ptr != MAP_FAILED) munmap( mapping->shared_ptr, mapping->size );
 }
 
 static enum server_fd_type mapping_get_fd_type( struct fd *fd )
@@ -1148,16 +1152,21 @@ struct object *create_shared_mapping( struct object *root, const struct unicode_
 
     if (!(mapping = create_mapping( root, name, OBJ_OPENIF, size, SEC_COMMIT, 0,
                                     FILE_READ_DATA | FILE_WRITE_DATA, sd ))) return NULL;
-    *ptr = mmap( NULL, mapping->size, PROT_WRITE, MAP_SHARED, get_unix_fd( mapping->fd ), 0 );
 
-    fcntl( get_unix_fd( mapping->fd ), F_ADD_SEALS, seals );
+    if (mapping->shared_ptr == MAP_FAILED)
+        mapping->shared_ptr = mmap( NULL, mapping->size, PROT_WRITE, MAP_SHARED,
+                                    get_unix_fd( mapping->fd ), 0 );
 
-    if (*ptr == MAP_FAILED)
+    if (mapping->shared_ptr == MAP_FAILED)
     {
+        fprintf( stderr, "wine: Failed to map shared memory: %u %m\n", errno );
         release_object( &mapping->obj );
         return NULL;
     }
 
+    fcntl( get_unix_fd( mapping->fd ), F_ADD_SEALS, seals );
+    *ptr = mapping->shared_ptr;
+
     return &mapping->obj;
 }
 
diff --git a/server/thread.c b/server/thread.c
index 5163d540531..4cbc8b20f0c 100644
--- a/server/thread.c
+++ b/server/thread.c
@@ -363,7 +363,7 @@ static volatile void *init_queue_mapping( struct thread *thread )
     thread->queue_shared_mapping = create_shared_mapping( dir, &name, sizeof(struct queue_shared_memory),
                                                           NULL, (void **)&thread->queue_shared );
     release_object( dir );
-    if (thread->queue_shared)
+    if (thread->queue_shared_mapping)
     {
         memset( (void *)thread->queue_shared, 0, sizeof(*thread->queue_shared) );
         thread->queue_shared->input_tid = thread->id;
@@ -389,7 +389,7 @@ static volatile void *init_input_mapping( struct thread *thread )
     thread->input_shared_mapping = create_shared_mapping( dir, &name, sizeof(struct input_shared_memory),
                                                           NULL, (void **)&thread->input_shared );
     release_object( dir );
-    if (thread->input_shared)
+    if (thread->input_shared_mapping)
     {
         memset( (void *)thread->input_shared, 0, sizeof(*thread->input_shared) );
         thread->input_shared->tid = thread->id;
diff --git a/server/winstation.c b/server/winstation.c
index a9b161312dd..934c9bd0d89 100644
--- a/server/winstation.c
+++ b/server/winstation.c
@@ -232,7 +232,7 @@ static volatile void *init_desktop_mapping( struct desktop *desktop, const struc
     desktop->shared_mapping = create_shared_mapping( dir, name, sizeof(struct desktop_shared_memory),
                                                      NULL, (void **)&desktop->shared );
     release_object( dir );
-    if (desktop->shared) memset( (void *)desktop->shared, 0, sizeof(*desktop->shared) );
+    if (desktop->shared_mapping) memset( (void *)desktop->shared, 0, sizeof(*desktop->shared) );
     return desktop->shared;
 }
 
@@ -318,7 +318,8 @@ static void desktop_destroy( struct object *obj )
     if (desktop->msg_window) destroy_window( desktop->msg_window );
     if (desktop->global_hooks) release_object( desktop->global_hooks );
     list_remove( &desktop->entry );
-    release_object( desktop->shared_mapping );
+    if (desktop->shared_mapping) release_object( desktop->shared_mapping );
+    desktop->shared_mapping = NULL;
     release_object( desktop->winstation );
 }
 
From 05db2ac6ddf27ecc52ffd713aca59a264cc9fa72 Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?R=C3=A9mi=20Bernon?= <rbernon@codeweavers.com>
Date: Tue, 22 Mar 2022 16:18:08 +0100
Subject: [PATCH] server: Cleanup message queue on thread exit.

When threads are killed they don't get a chance to close their message
queue handle which is kept in user_thread_info->server_queue, and the
message queues are kept alive on the server side.

In this case, msg_queue_destroy and cleanup_results are never called,
leaving message results referencing the stale queue in other thread
message queues.

Later, when the messages from the other threads are cleaned up this
causes invalid shared memory access when we try to update the queue
bits from the message results.

This doesn't cause much trouble upstream because it only leaks queue
objects, which are always valid in memory, but it breaks with Proton
shared memory patches, and the recent unmap fixes, as the queue bits
are now in unmapped memory.

This is probably a hack because it should probably instead close the
handle on behalf of the dying thread, but this doesn't play well with
process handle caches we use for fsync / esync. The handle should be
closed on process exit anyway.

Fixes: 2f844caa49fd2efa ("server: Reuse shared mapping's mmaped pointer and handle mmap failures.")
CW-Bug-Id: #20266
CW-Bug-Id: #20297
---
 server/queue.c | 31 ++++++++++++++++++++-----------
 1 file changed, 20 insertions(+), 11 deletions(-)

diff --git a/server/queue.c b/server/queue.c
index 15c46aea3ab..b8ed9ee1a1d 100644
--- a/server/queue.c
+++ b/server/queue.c
@@ -122,6 +122,7 @@ struct msg_queue
     int                    quit_message;    /* is there a pending quit message? */
     int                    exit_code;       /* exit code of pending quit message */
     int                    cursor_count;    /* per-queue cursor show count */
+    int                    destroyed;       /* queue has been cleaned up */
     struct list            msg_list[NB_MSG_KINDS];  /* lists of messages */
     struct list            send_result;     /* stack of sent messages waiting for result */
     struct list            callback_result; /* list of callback messages waiting for result */
@@ -357,6 +358,7 @@ static struct msg_queue *create_msg_queue( struct thread *thread, struct thread_
         queue->hotkey_count    = 0;
         queue->quit_message    = 0;
         queue->cursor_count    = 0;
+        queue->destroyed       = 0;
         queue->recv_result     = NULL;
         queue->next_timer_id   = 0x7fff;
         queue->timeout         = NULL;
@@ -396,15 +398,6 @@ static struct msg_queue *create_msg_queue( struct thread *thread, struct thread_
     return queue;
 }
 
-/* free the message queue of a thread at thread exit */
-void free_msg_queue( struct thread *thread )
-{
-    remove_thread_hooks( thread );
-    if (!thread->queue) return;
-    release_object( thread->queue );
-    thread->queue = NULL;
-}
-
 /* synchronize thread input keystate with the desktop */
 static void sync_input_keystate( struct thread_input *input )
 {
@@ -1184,9 +1177,8 @@ static void msg_queue_satisfied( struct object *obj, struct wait_queue_entry *en
     SHARED_WRITE_END( &queue->shared->seq );
 }
 
-static void msg_queue_destroy( struct object *obj )
+static void cleanup_msg_queue( struct msg_queue *queue )
 {
-    struct msg_queue *queue = (struct msg_queue *)obj;
     struct list *ptr;
     struct hotkey *hotkey, *hotkey2;
     int i;
@@ -1228,6 +1220,23 @@ static void msg_queue_destroy( struct ob
     if (queue->fd) release_object( queue->fd );
     if (do_esync()) close( queue->esync_fd );
     if (queue->fsync_idx) fsync_free_shm_idx( queue->fsync_idx );
+    queue->destroyed = 1;
+}
+
+static void msg_queue_destroy( struct object *obj )
+{
+    struct msg_queue *queue = (struct msg_queue *)obj;
+    if (!queue->destroyed) cleanup_msg_queue( queue );
+}
+
+/* free the message queue of a thread at thread exit */
+void free_msg_queue( struct thread *thread )
+{
+    remove_thread_hooks( thread );
+    if (!thread->queue) return;
+    cleanup_msg_queue( thread->queue );
+    release_object( thread->queue );
+    thread->queue = NULL;
 }
 
 static void msg_queue_poll_event( struct fd *fd, int event )

From a81dbfb12686b28e1889c4cff7e271848b6b0fc4 Mon Sep 17 00:00:00 2001
From: Paul Gofman <pgofman@codeweavers.com>
Date: Thu, 10 Mar 2022 17:58:41 +0300
Subject: [PATCH] ntdll: HACK: Delay resuming thread after suspending self.

CW-Bug-Id: #20270

Fixes a random hang on exit in Little Nightmares 2.
---
 dlls/ntdll/unix/thread.c | 5 ++++-
 server/thread.c          | 6 +++++-
 2 files changed, 9 insertions(+), 2 deletions(-)

diff --git a/dlls/ntdll/unix/thread.c b/dlls/ntdll/unix/thread.c
index b091408c67d..23f3a955f40 100644
--- a/dlls/ntdll/unix/thread.c
+++ b/dlls/ntdll/unix/thread.c
@@ -1695,6 +1716,7 @@ NTSTATUS WINAPI NtOpenThread( HANDLE *ha
  */
 NTSTATUS WINAPI NtSuspendThread( HANDLE handle, ULONG *count )
 {
+    BOOL self = FALSE;
     unsigned int ret;
 
     SERVER_START_REQ( suspend_thread )
@@ -1588,10 +1589,12 @@ NTSTATUS WINAPI NtSuspendThread( HANDLE handle, ULONG *count )
         req->handle = wine_server_obj_handle( handle );
         if (!(ret = wine_server_call( req )))
         {
-            if (count) *count = reply->count;
+            self = reply->count & 0x80000000;
+            if (count) *count = reply->count & 0x7fffffff;
         }
     }
     SERVER_END_REQ;
+    if (self) usleep( 0 );
     return ret;
 }
 
diff --git a/server/thread.c b/server/thread.c
index 4cbc8b20f0c..ff3b805a2d6 100644
--- a/server/thread.c
+++ b/server/thread.c
@@ -924,7 +924,11 @@ int suspend_thread( struct thread *thread )
     int old_count = thread->suspend;
     if (thread->suspend < MAXIMUM_SUSPEND_COUNT)
     {
-        if (!(thread->process->suspend + thread->suspend++)) stop_thread( thread );
+        if (!(thread->process->suspend + thread->suspend++))
+        {
+            stop_thread( thread );
+            if (thread == current) return old_count | 0x80000000;
+        }
     }
     else set_error( STATUS_SUSPEND_COUNT_EXCEEDED );
     return old_count;

From 3390e52bb36310c6702843124a80509b5ee9e9ec Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?R=C3=A9mi=20Bernon?= <rbernon@codeweavers.com>
Date: Thu, 27 Jan 2022 18:26:41 +0100
Subject: [PATCH] server: Drop pending internal messages in set_active_window.

When changing the active window in the foreground thread.

CW-Bug-Id: #19612

 - ported to my wine-nspa tree .  function is moved.

---
 dlls/win32u/focus.c |  1 +
 server/protocol.def |  1 +
 server/queue.c      | 12 ++++++++++++
 3 files changed, 14 insertions(+)

diff -pur a/dlls/win32u/input.c b/dlls/win32u/input.c'
--- a/dlls/win32u/input.c	2022-06-26 19:17:03.596550994 -0500
+++ b/dlls/win32u/input.c	2022-06-26 19:16:54.028414809 -0500
@@ -1180,6 +1180,7 @@ static BOOL set_active_window( HWND hwnd
     SERVER_START_REQ( set_active_window )
     {
         req->handle = wine_server_user_handle( hwnd );
+        req->internal_msg = WM_WINE_SETACTIVEWINDOW;
         if ((ret = !wine_server_call_err( req )))
             previous = wine_server_ptr_handle( reply->previous );
     }

diff --git a/server/protocol.def b/server/protocol.def
index 86a36be2a45..d4c0accc389 100644
--- a/server/protocol.def
+++ b/server/protocol.def
@@ -2837,6 +2837,7 @@ enum coords_relative
 /* Set the current thread active window */
 @REQ(set_active_window)
     user_handle_t  handle;        /* handle to the active window */
+    unsigned int   internal_msg;  /* set active window internal message */
 @REPLY
     user_handle_t  previous;      /* handle to the previous active window */
 @END
diff --git a/server/queue.c b/server/queue.c
index b8ed9ee1a1d..48c8f3aa38b 100644
--- a/server/queue.c
+++ b/server/queue.c
@@ -3512,7 +3512,11 @@ DECL_HANDLER(set_focus_window)
 /* set the current thread active window */
 DECL_HANDLER(set_active_window)
 {
+    struct message *msg, *next;
     struct msg_queue *queue = get_current_queue();
+    struct desktop *desktop;
+
+    if (!(desktop = get_thread_desktop( current, 0 ))) return;
 
     reply->previous = 0;
     if (queue && check_queue_input_window( queue, req->handle ))
@@ -3523,9 +3527,17 @@ DECL_HANDLER(set_active_window)
             SHARED_WRITE_BEGIN( &queue->input->shared->seq );
             queue->input->shared->active = get_user_full_handle( req->handle );
             SHARED_WRITE_END( &queue->input->shared->seq );
+
+            if (desktop->foreground_input == queue->input && req->handle != reply->previous)
+            {
+                LIST_FOR_EACH_ENTRY_SAFE( msg, next, &queue->msg_list[POST_MESSAGE], struct message, entry )
+                    if (msg->msg == req->internal_msg) remove_queue_message( queue, msg, POST_MESSAGE );
+            }
         }
         else set_error( STATUS_INVALID_HANDLE );
     }
+
+    release_object( desktop );
 }
 
 

