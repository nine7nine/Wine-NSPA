
 - Default Period Settings in each audio driver:

 WineALSA DefaultPeriod = 100000;
 WineALSA MinimumPeriod = 50000;
 WineALSA EXTRA_SAFE_RT   40000

 WinePULSE DefaultPeriod = 100000;
 WinePULSE MinimumPeriod = 30000;

 Defaults:

 DEF_AUDIO_PERIOD=100000 
 MIN_AUDIO_PERIOD=50000 
 AUDIO_EXTRA_SAFE_RT=40000

 My Setup:
 
 DEF_AUDIO_PERIOD=50000 
 MIN_AUDIO_PERIOD=30000 
 AUDIO_EXTRA_SAFE_RT=20000 

--- a/dlls/winealsa.drv/alsa.c	2023-01-05 11:42:25.218552820 -0500
+++ b/dlls/winealsa.drv/alsa.c	2023-01-05 11:41:49.824481311 -0500
@@ -45,6 +45,14 @@
 
 WINE_DEFAULT_DEBUG_CHANNEL(alsa);
 
+int GetAudioEnv(char const* env, int def) {
+  char* val = getenv(env);
+  if (val) {
+    return atoi(val);
+  }
+  return def;
+}
+
 struct alsa_stream
 {
     snd_pcm_t *pcm_handle;
@@ -920,7 +928,7 @@ static NTSTATUS create_stream(void *args
     if(params->share == AUDCLNT_SHAREMODE_EXCLUSIVE)
         stream->bufsize_frames -= stream->bufsize_frames % stream->mmdev_period_frames;
     stream->hidden_frames = stream->alsa_period_frames + stream->mmdev_period_frames +
-        muldiv(params->fmt->nSamplesPerSec, EXTRA_SAFE_RT, 10000000);
+        muldiv(params->fmt->nSamplesPerSec, GetAudioEnv("AUDIO_EXTRA_SAFE_RT", EXTRA_SAFE_RT), 10000000);
     /* leave no less than about 1.33ms or 256 bytes of data after a rewind */
     stream->safe_rewind_frames = max(256 / params->fmt->nBlockAlign, muldiv(133, params->fmt->nSamplesPerSec, 100000));
 
--- a/dlls/winealsa.drv/mmdevdrv.c
+++ b/dlls/winealsa.drv/mmdevdrv.c
@@ -56,6 +56,14 @@ WINE_DEFAULT_DEBUG_CHANNEL(alsa);
 static const REFERENCE_TIME DefaultPeriod = 100000;
 static const REFERENCE_TIME MinimumPeriod = 50000;
 
+int GetAudioEnv(char const* env, int def) {
+  char* val = getenv(env);
+  if (val) {
+    return atoi(val);
+  }
+  return def;
+}
+
 static CRITICAL_SECTION g_sessions_lock;
 static CRITICAL_SECTION_DEBUG g_sessions_lock_debug =
 {
@@ -1271,7 +1279,7 @@ static HRESULT WINAPI AudioClient_Initialize(IAudioClient *iface,
     }
 
     if(mode == AUDCLNT_SHAREMODE_SHARED){
-        period = DefaultPeriod;
+        period = GetAudioEnv("DEF_AUDIO_PERIOD", DefaultPeriod);
         if( duration < 3 * period)
             duration = 3 * period;
     }else{
@@ -1282,8 +1290,8 @@ static HRESULT WINAPI AudioClient_Initialize(IAudioClient *iface,
         }
 
         if(!period)
-            period = DefaultPeriod; /* not minimum */
-        if(period < MinimumPeriod || period > 5000000)
+            period = GetAudioEnv("DEF_AUDIO_PERIOD", DefaultPeriod); /* not minimum */
+        if(period < GetAudioEnv("MIN_AUDIO_PERIOD", MinimumPeriod) || period > 5000000)
             return AUDCLNT_E_INVALID_DEVICE_PERIOD;
         if(duration > 20000000) /* the smaller the period, the lower this limit */
             return AUDCLNT_E_BUFFER_SIZE_ERROR;
@@ -1888,9 +1902,9 @@ static HRESULT WINAPI AudioClient_GetDevicePeriod(IAudioClient *iface,
         return E_POINTER;
 
     if(defperiod)
-        *defperiod = DefaultPeriod;
+        *defperiod = GetAudioEnv("DEF_AUDIO_PERIOD", DefaultPeriod);
     if(minperiod)
-        *minperiod = DefaultPeriod;
+        *minperiod = GetAudioEnv("MIN_AUDIO_PERIOD", MinimumPeriod);
 
     return S_OK;
 }
--- a/dlls/winepulse.drv/pulse.c
+++ b/dlls/winepulse.drv/pulse.c
@@ -105,6 +105,22 @@ static struct list g_phys_sources = LIST
 static const REFERENCE_TIME MinimumPeriod = 30000;
 static const REFERENCE_TIME DefaultPeriod = 100000;
 
+int GetAudioEnv(char const* env, int def) {
+  char* val = getenv(env);
+  if (val) {
+    return atoi(val);
+  }
+  return def;
+}
+
+int GetMinimumPeriod() {
+  return GetAudioEnv("MIN_AUDIO_PERIOD", MinimumPeriod);
+}
+
+int GetDefaultPeriod() {
+  return GetAudioEnv("DEF_AUDIO_PERIOD", DefaultPeriod);
+}
+
 static pthread_mutex_t pulse_mutex;
 static pthread_cond_t pulse_cond = PTHREAD_COND_INITIALIZER;
 
@@ -714,9 +730,9 @@ static void pulse_probe_settings(pa_main
         ret = -1;
     else if (render)
         ret = pa_stream_connect_playback(stream, pulse_name, &attr,
-        PA_STREAM_START_CORKED|PA_STREAM_FIX_RATE|PA_STREAM_FIX_CHANNELS|PA_STREAM_EARLY_REQUESTS, NULL, NULL);
+        PA_STREAM_START_CORKED|PA_STREAM_FIX_RATE|PA_STREAM_FIX_CHANNELS|PA_STREAM_EARLY_REQUESTS|PA_STREAM_ADJUST_LATENCY, NULL, NULL);
     else
-        ret = pa_stream_connect_record(stream, pulse_name, &attr, PA_STREAM_START_CORKED|PA_STREAM_FIX_RATE|PA_STREAM_FIX_CHANNELS|PA_STREAM_EARLY_REQUESTS);
+        ret = pa_stream_connect_record(stream, pulse_name, &attr, PA_STREAM_START_CORKED|PA_STREAM_FIX_RATE|PA_STREAM_FIX_CHANNELS|PA_STREAM_EARLY_REQUESTS|PA_STREAM_ADJUST_LATENCY);
     if (ret >= 0) {
         while (pa_mainloop_iterate(ml, 1, &ret) >= 0 &&
                 pa_stream_get_state(stream) == PA_STREAM_CREATING)
@@ -741,11 +757,11 @@ static void pulse_probe_settings(pa_main
     if (length)
         *def_period = *min_period = pa_bytes_to_usec(10 * length, &ss);
 
-    if (*min_period < MinimumPeriod)
-        *min_period = MinimumPeriod;
+    if (*min_period < GetMinimumPeriod)
+        *min_period = GetMinimumPeriod;
 
-    if (*def_period < DefaultPeriod)
-        *def_period = DefaultPeriod;
+    if (*def_period < GetDefaultPeriod)
+        *def_period = GetDefaultPeriod;
 
     wfx->wFormatTag = WAVE_FORMAT_EXTENSIBLE;
     wfx->cbSize = sizeof(WAVEFORMATEXTENSIBLE) - sizeof(WAVEFORMATEX);

--- a/dlls/mmdevapi/main.c	2023-04-27 23:37:07.935547009 -0500
+++ b/dlls/mmdevapi/main.c	2023-04-27 23:36:44.204589390 -0500
@@ -460,6 +460,7 @@ HRESULT WINAPI ActivateAudioInterfaceAsy
         op->result_iface = NULL;
 
     ht = CreateThread(NULL, 0, &activate_async_threadproc, op, 0, NULL);
+    // SetThreadPriority(ht, THREAD_PRIORITY_TIME_CRITICAL);
     CloseHandle(ht);
 
     *op_out = &op->IActivateAudioInterfaceAsyncOperation_iface;

