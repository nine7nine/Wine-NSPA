From: Tk-Glitch <ti3nou@gmail.com>
Date: Sat, 27 Apr 2019 12:59:10 +0100
Subject: esync fixup for wine 4.6+ (f534fbd)

diff --git a/0001-configure-Check-for-sys-eventfd.h-ppoll-and-shm_open.patch b/0001-configure-Check-for-sys-eventfd.h-ppoll-and-shm_open.patch
index 1138a2bd4..90b13697a 100644
--- a/0001-configure-Check-for-sys-eventfd.h-ppoll-and-shm_open.patch
+++ b/0001-configure-Check-for-sys-eventfd.h-ppoll-and-shm_open.patch
@@ -1,8 +1,7 @@
 From cd828e1fd80c74b0cebeb20ab0267b9ff8245f52 Mon Sep 17 00:00:00 2001
 From: Zebediah Figura <z.figura12@gmail.com>
 Date: Wed, 13 Jun 2018 10:44:49 -0500
-Subject: [PATCH 01/83] configure: Check for sys/eventfd.h, ppoll(), and
- shm_open().
+Subject: [PATCH] configure: Check for sys/eventfd.h, ppoll(), and shm_open().
 
 We use ppoll() instead of poll() for the better time granularity.
 
@@ -26,7 +25,7 @@ index 51e3d7fc14..eb0a11ca86 100755
 +	sys/eventfd.h \
  	sys/exec_elf.h \
  	sys/filio.h \
- 	sys/inotify.h \
+ 	sys/ioctl.h \ \
 @@ -16552,6 +16553,7 @@ for ac_func in \
  	poll \
  	popen \

diff --git a/0002-server-Create-server-objects-for-eventfd-based-synch.patch b/0002-server-Create-server-objects-for-eventfd-based-synch.patch
index df3cf9e38..cd4cf00e4 100644
--- a/0002-server-Create-server-objects-for-eventfd-based-synch.patch
+++ b/0002-server-Create-server-objects-for-eventfd-based-synch.patch
@@ -43,9 +43,9 @@ index 0e85d1a082..98470eca3c 100644
  {
      REQ_new_process,
 @@ -5950,6 +5966,7 @@ enum request
-     REQ_set_job_limits,
-     REQ_set_job_completion_port,
      REQ_terminate_job,
+     REQ_suspend_process,
+     REQ_resume_process,
 +    REQ_create_esync,
      REQ_NB_REQUESTS
  };
@@ -243,9 +243,9 @@ index 4610ca6868..242143d2c3 100644
 --- a/server/request.h
 +++ b/server/request.h
 @@ -403,6 +403,7 @@ DECL_HANDLER(process_in_job);
- DECL_HANDLER(set_job_limits);
- DECL_HANDLER(set_job_completion_port);
  DECL_HANDLER(terminate_job);
+ DECL_HANDLER(suspend_process);
+ DECL_HANDLER(resume_process);
 +DECL_HANDLER(create_esync);
  
  #ifdef WANT_REQUEST_HANDLERS
@@ -296,9 +296,9 @@ index 9a84067662..d29c16b495 100644
      (dump_func)dump_new_process_request,
      (dump_func)dump_exec_process_request,
 @@ -4833,6 +4846,7 @@ static const dump_func req_dumpers[REQ_NB_REQUESTS] = {
-     (dump_func)dump_set_job_limits_request,
-     (dump_func)dump_set_job_completion_port_request,
      (dump_func)dump_terminate_job_request,
+     (dump_func)dump_suspend_process_request,
+     (dump_func)dump_resume_process_request,
 +    (dump_func)dump_create_esync_request,
  };
  
diff --git a/0002-server-Create-server-objects-for-eventfd-based-synch.patch b/0002-server-Create-server-objects-for-eventfd-based-synch.patch
index cd4cf00e4..656b767ed 100644
--- a/0002-server-Create-server-objects-for-eventfd-based-synch.patch
+++ b/0002-server-Create-server-objects-for-eventfd-based-synch.patch
@@ -51,9 +51,9 @@ index 0e85d1a082..98470eca3c 100644
  };
  
 @@ -6248,6 +6265,7 @@ union generic_request
-     struct set_job_limits_request set_job_limits_request;
-     struct set_job_completion_port_request set_job_completion_port_request;
      struct terminate_job_request terminate_job_request;
+     struct suspend_process_request suspend_process_request;
+     struct resume_process_request resume_process_request;
 +    struct create_esync_request create_esync_request;
  };
  union generic_reply
@@ -251,9 +251,9 @@ index 4610ca6868..242143d2c3 100644
  #ifdef WANT_REQUEST_HANDLERS
  
 @@ -700,6 +701,7 @@ static const req_handler req_handlers[REQ_NB_REQUESTS] =
-     (req_handler)req_set_job_limits,
-     (req_handler)req_set_job_completion_port,
      (req_handler)req_terminate_job,
+     (req_handler)req_suspend_process,
+     (req_handler)req_resume_process,
 +    (req_handler)req_create_esync,
  };
  
@@ -312,9 +312,9 @@ index 9a84067662..d29c16b495 100644
  
  static const char * const req_names[REQ_NB_REQUESTS] = {
 @@ -5421,6 +5436,7 @@ static const char * const req_names[REQ_NB_REQUESTS] = {
-     "set_job_limits",
-     "set_job_completion_port",
      "terminate_job",
+     "suspend_process",
+     "resume_process",
 +    "create_esync",
  };
  
diff --git a/0002-server-Create-server-objects-for-eventfd-based-synch.patch b/0002-server-Create-server-objects-for-eventfd-based-synch.patch
index 656b767ed..1570f9e38 100644
--- a/0002-server-Create-server-objects-for-eventfd-based-synch.patch
+++ b/0002-server-Create-server-objects-for-eventfd-based-synch.patch
@@ -59,9 +59,9 @@ index 0e85d1a082..98470eca3c 100644
  union generic_reply
  {
 @@ -6544,6 +6562,7 @@ union generic_reply
-     struct set_job_limits_reply set_job_limits_reply;
-     struct set_job_completion_port_reply set_job_completion_port_reply;
      struct terminate_job_reply terminate_job_reply;
+     struct suspend_process_reply suspend_process_reply;
+     struct resume_process_reply resume_process_reply;
 +    struct create_esync_reply create_esync_reply;
  };
  
@@ -259,9 +259,9 @@ index 4610ca6868..242143d2c3 100644
  
  C_ASSERT( sizeof(affinity_t) == 8 );
 @@ -2406,6 +2408,12 @@ C_ASSERT( sizeof(struct set_job_completion_port_request) == 32 );
- C_ASSERT( FIELD_OFFSET(struct terminate_job_request, handle) == 12 );
- C_ASSERT( FIELD_OFFSET(struct terminate_job_request, status) == 16 );
- C_ASSERT( sizeof(struct terminate_job_request) == 24 );
+ C_ASSERT( sizeof(struct suspend_process_request) == 16 );
+ C_ASSERT( FIELD_OFFSET(struct resume_process_request, handle) == 12 );
+ C_ASSERT( sizeof(struct resume_process_request) == 16 );
 +C_ASSERT( FIELD_OFFSET(struct create_esync_request, access) == 12 );
 +C_ASSERT( FIELD_OFFSET(struct create_esync_request, initval) == 16 );
 +C_ASSERT( FIELD_OFFSET(struct create_esync_request, flags) == 20 );
 
diff --git a/0015-server-Create-eventfd-file-descriptors-for-process-o.patch b/0015-server-Create-eventfd-file-descriptors-for-process-o.patch
index 05074c838..cddd35e6f 100644
--- a/0015-server-Create-eventfd-file-descriptors-for-process-o.patch
+++ b/0015-server-Create-eventfd-file-descriptors-for-process-o.patch
@@ -105,8 +105,8 @@ index deb5b4643c..6a40da5527 100644
  /* process structure */
  
 @@ -64,6 +65,7 @@ static int process_signaled( struct object *obj, struct wait_queue_entry *entry
- static unsigned int process_map_access( struct object *obj, unsigned int access );
  static void process_poll_event( struct fd *fd, int event );
+ static struct list *process_get_kernel_obj_list( struct object *obj );
  static void process_destroy( struct object *obj );
 +static int process_get_esync_fd( struct object *obj );
  static void terminate_process( struct process *process, struct thread *skip, int exit_code );
@@ -126,9 +126,9 @@ index deb5b4643c..6a40da5527 100644
      process->rawinput_mouse  = NULL;
      process->rawinput_kbd    = NULL;
 +    process->esync_fd        = -1;
+     list_init( &process->kernel_object );
      list_init( &process->thread_list );
      list_init( &process->locks );
-     list_init( &process->asyncs );
 @@ -574,6 +577,9 @@ struct process *create_process( int fd, struct process *parent, int inherit_all,
      if (!token_assign_label( process->token, security_high_label_sid ))
          goto error;
@@ -167,9 +167,9 @@ index 4566a04b48..1d5299a08b 100644
 --- a/server/process.h
 +++ b/server/process.h
 @@ -96,6 +96,7 @@ struct process
-     struct list          rawinput_devices;/* list of registered rawinput devices */
      const struct rawinput_device *rawinput_mouse; /* rawinput mouse device, if any */
      const struct rawinput_device *rawinput_kbd;   /* rawinput keyboard device, if any */
+     struct list          kernel_object;   /* list of kernel object pointers */
 +    int                  esync_fd;        /* esync file descriptor (signaled on exit) */
  };
  
diff --git a/0059-kernel32-tests-Zigzag-test.patch b/0059-kernel32-tests-Zigzag-test.patch
index 012e6d49b..35887f80a 100644
--- a/0059-kernel32-tests-Zigzag-test.patch
+++ b/0059-kernel32-tests-Zigzag-test.patch
@@ -15,7 +15,7 @@ index 8a4a01d33f..9b2e57c339 100644
 --- a/dlls/kernel32/tests/sync.c
 +++ b/dlls/kernel32/tests/sync.c
 @@ -3012,6 +3012,84 @@ static void test_apc_deadlock(void)
-     CloseHandle(pi.hProcess);
+     DeleteCriticalSection(&cs);
  }
  
 +static int zigzag_state, zigzag_count[2], zigzag_stop;
@@ -104,6 +104,7 @@ index 8a4a01d33f..9b2e57c339 100644
      test_alertable_wait();
      test_apc_deadlock();
 +    test_zigzag_event();
+     test_crit_section();
  }
 -- 
 2.19.1
