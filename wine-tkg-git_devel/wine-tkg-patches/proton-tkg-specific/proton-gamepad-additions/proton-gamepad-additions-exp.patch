From 46c38e1f350cfe8b40a5a871c6fd1c2a90748b4d Mon Sep 17 00:00:00 2001
From: Arkadiusz Hiler <ahiler@codeweavers.com>
Date: Mon, 14 Dec 2020 12:17:48 +0200
Subject: [PATCH] dinput: Return lowercase path for devices

For Yakuza: Like A Dragon Xbox controller support.

Yakuza: Like A Dragon uses dinput to do controller discovery. It also tells
xinput controllers apart the other kinds using the dinput device path.

The game is looking for vid_ and ig_ in the path, both lowercase and the
comparison is case sensitive.

Patch c34e297b76f9 ("dinput: Return real rawinput path for dinput device")
started using raw input paths for dinput devices, which looks like what
Windows is doing but with the small omission of lowercasing the whole string.
---
 dlls/dinput/joystick_sdl.c | 2 ++
 1 file changed, 2 insertions(+)

diff --git a/dlls/dinput/joystick_sdl.c b/dlls/dinput/joystick_sdl.c
index e6266084906..28f4cf447b3 100644
--- a/dlls/dinput/joystick_sdl.c
+++ b/dlls/dinput/joystick_sdl.c
@@ -1362,6 +1362,8 @@ static HRESULT WINAPI JoystickWImpl_GetProperty(LPDIRECTINPUTDEVICE8W iface, REF
                     return DIERR_GENERIC;
                 }
 
+                strlwrW(pd->wszPath);
+
                 pd->guidClass = GUID_DEVCLASS_HIDCLASS;
 
                 TRACE("DIPROP_GUIDANDPATH(%s, %s): returning path\n", debugstr_guid(&pd->guidClass), debugstr_w(pd->wszPath));
From 23b7f0c51e9855ff7e2c5fd4bd2a7daeb0584c42 Mon Sep 17 00:00:00 2001
From: Arkadiusz Hiler <ahiler@codeweavers.com>
Date: Wed, 9 Dec 2020 14:04:56 +0200
Subject: [PATCH] hidclass.sys: Don't send raw input messages for fake xinput
 hack controllers

For Subnautica hotplugging.

Xinput hack introduces extra fake HID devices for controllers that are
intended to be only used internally by xinput dlls. There's a unintentional
leak though - if a process subscribes for WM_INPUT messages for HID
controllers using RegisterRawInputDevices() it will get the messages twice -
one for the regular HID device and the second for the faux xinput device.

The second copy of the messages had a few fields (e.g. hDevice) set to zeros.
Some games (The Elder Scrolls Online, Cuphead) struggled with handling such
messages, which caused a visible stutter.

To mitigate that 46bfde7d5a36 ("user32: Also look up xinput-only HID devices")
was introduced, which makes WM_INPUT messages filled out properly, but has
unintentional effect of leaking those special xinput HID devices even further,
through GetRawInputDeviceList(). This breaks controller hotplug for Subnautica
(and likely other games that are using Unity's RI.Hid).

To fix the original problem this patch makes hidclass.sys not send raw input
messages for the xinput hack codepaths.

Combined with a revert of 46bfde7d5a36 ("user32: Also look up xinput-only HID
devices") all the games mentioned above seem to run just fine.
---
 dlls/hidclass.sys/device.c | 10 +++++-----
 dlls/hidclass.sys/hid.h    |  4 +++-
 dlls/hidclass.sys/pnp.c    |  4 +++-
 3 files changed, 11 insertions(+), 7 deletions(-)

diff --git a/dlls/hidclass.sys/device.c b/dlls/hidclass.sys/device.c
index 37448b315d1..18cf3a346fb 100644
--- a/dlls/hidclass.sys/device.c
+++ b/dlls/hidclass.sys/device.c
@@ -76,7 +76,7 @@ NTSTATUS HID_CreateDevice(DEVICE_OBJECT *native_device, HID_MINIDRIVER_REGISTRAT
     return STATUS_SUCCESS;
 }
 
-NTSTATUS HID_LinkDevice(DEVICE_OBJECT *device, BOOL xinput_hack)
+NTSTATUS HID_LinkDevice(DEVICE_OBJECT *device)
 {
     static const WCHAR backslashW[] = {'\\',0};
     WCHAR device_instance_id[MAX_DEVICE_ID_LEN];
@@ -85,12 +85,10 @@ NTSTATUS HID_LinkDevice(DEVICE_OBJECT *device, BOOL xinput_hack)
     NTSTATUS status;
     HDEVINFO devinfo;
     GUID hidGuid;
-    BASE_DEVICE_EXTENSION *ext;
+    BASE_DEVICE_EXTENSION *ext = device->DeviceExtension;
 
     HidD_GetHidGuid(&hidGuid);
-    if(xinput_hack)
-        hidGuid.Data4[7]++; /* HACK: use different GUID so only xinput will find this device */
-    ext = device->DeviceExtension;
+    if (ext->xinput_hack) hidGuid.Data4[7]++; /* HACK: use different GUID so only xinput will find this device */
 
     RtlInitUnicodeString( &nameW, ext->device_name);
 
@@ -253,6 +251,8 @@ static void HID_Device_sendRawInput(DEVICE_OBJECT *device, HID_XFER_PACKET *pack
 {
     BASE_DEVICE_EXTENSION *ext = device->DeviceExtension;
 
+    if (ext->xinput_hack) return;
+
     SERVER_START_REQ(send_hardware_message)
     {
         req->win                  = 0;
diff --git a/dlls/hidclass.sys/hid.h b/dlls/hidclass.sys/hid.h
index 459dca3b26f..a8341555746 100644
--- a/dlls/hidclass.sys/hid.h
+++ b/dlls/hidclass.sys/hid.h
@@ -59,6 +59,8 @@ typedef struct _BASE_DEVICE_EXTENSION {
     BOOL is_mouse;
     UNICODE_STRING mouse_link_name;
 
+    BOOL xinput_hack;
+
     /* Minidriver Specific stuff will end up here */
 } BASE_DEVICE_EXTENSION;
 
@@ -97,7 +99,7 @@ minidriver* find_minidriver(DRIVER_OBJECT* driver) DECLSPEC_HIDDEN;
 
 /* Internal device functions */
 NTSTATUS HID_CreateDevice(DEVICE_OBJECT *native_device, HID_MINIDRIVER_REGISTRATION *driver, DEVICE_OBJECT **device) DECLSPEC_HIDDEN;
-NTSTATUS HID_LinkDevice(DEVICE_OBJECT *device, BOOL xinput_hack) DECLSPEC_HIDDEN;
+NTSTATUS HID_LinkDevice(DEVICE_OBJECT *device) DECLSPEC_HIDDEN;
 void HID_DeleteDevice(DEVICE_OBJECT *device) DECLSPEC_HIDDEN;
 void HID_StartDeviceThread(DEVICE_OBJECT *device) DECLSPEC_HIDDEN;
 
diff --git a/dlls/hidclass.sys/pnp.c b/dlls/hidclass.sys/pnp.c
index abb517e10d5..6092ead1168 100644
--- a/dlls/hidclass.sys/pnp.c
+++ b/dlls/hidclass.sys/pnp.c
@@ -197,7 +197,9 @@ NTSTATUS WINAPI PNP_AddDevice(DRIVER_OBJECT *driver, DEVICE_OBJECT *PDO)
     lstrcatW(ext->device_id, separator_W);
     lstrcatW(ext->device_id, wcschr(device_id, '\\') + 1);
 
-    HID_LinkDevice(device, attr.Reserved[0]/*xinput_hack*/);
+    ext->xinput_hack = attr.Reserved[0];
+
+    HID_LinkDevice(device);
 
     ext->poll_interval = DEFAULT_POLL_INTERVAL;
 
From b4b1139a37f10e5d3dfe3903414ecaa385b08453 Mon Sep 17 00:00:00 2001
From: Arkadiusz Hiler <ahiler@codeweavers.com>
Date: Tue, 5 Jan 2021 19:34:25 +0200
Subject: [PATCH] Revert "user32: Also look up xinput-only HID devices"

For Subnautica hotplugging.

This reverts commit 46bfde7d5a36c5cf18773a7181db3ab9d484d0c3.
---
 dlls/user32/rawinput.c | 65 ++++++++++++++----------------------------
 1 file changed, 22 insertions(+), 43 deletions(-)

diff --git a/dlls/user32/rawinput.c b/dlls/user32/rawinput.c
index 9ea5ea393e8..3fb19280101 100644
--- a/dlls/user32/rawinput.c
+++ b/dlls/user32/rawinput.c
@@ -191,18 +191,37 @@ static HANDLE rawinput_handle_from_device_handle(HANDLE device, BOOL rescan)
     return rawinput_handle_from_device_handle(device, FALSE);
 }
 
-static void find_rawinput_devices_by_guid(const GUID *guid)
+static void find_devices(BOOL force)
 {
+    static ULONGLONG last_check;
+
     SP_DEVICE_INTERFACE_DATA iface = { sizeof(iface) };
     struct device *device;
     HIDD_ATTRIBUTES attr;
     HIDP_CAPS caps;
+    GUID hid_guid;
     HDEVINFO set;
     DWORD idx;
 
-    set = SetupDiGetClassDevsW(guid, NULL, NULL, DIGCF_DEVICEINTERFACE | DIGCF_PRESENT);
+    if (!force && GetTickCount64() - last_check < 2000)
+        return;
+    last_check = GetTickCount64();
+
+    HidD_GetHidGuid(&hid_guid);
+
+    EnterCriticalSection(&rawinput_devices_cs);
+
+    /* destroy previous list */
+    for (idx = 0; idx < rawinput_devices_count; ++idx)
+    {
+        CloseHandle(rawinput_devices[idx].file);
+        heap_free(rawinput_devices[idx].path);
+    }
+    rawinput_devices_count = 0;
+
+    set = SetupDiGetClassDevsW(&hid_guid, NULL, NULL, DIGCF_DEVICEINTERFACE | DIGCF_PRESENT);
 
-    for (idx = 0; SetupDiEnumDeviceInterfaces(set, NULL, guid, idx, &iface); ++idx)
+    for (idx = 0; SetupDiEnumDeviceInterfaces(set, NULL, &hid_guid, idx, &iface); ++idx)
     {
         if (!(device = add_device(set, &iface)))
             continue;
@@ -227,46 +246,6 @@ static void find_rawinput_devices_by_guid(const GUID *guid)
     }
 
     SetupDiDestroyDeviceInfoList(set);
-}
-
-static void find_devices(BOOL force)
-{
-    static ULONGLONG last_check;
-
-    SP_DEVICE_INTERFACE_DATA iface = { sizeof(iface) };
-    struct device *device;
-    HDEVINFO set;
-    DWORD idx;
-    GUID hid_guid;
-
-    if (!force && GetTickCount64() - last_check < 2000)
-        return;
-
-    HidD_GetHidGuid(&hid_guid);
-
-    EnterCriticalSection(&rawinput_devices_cs);
-
-    if (!force && GetTickCount64() - last_check < 2000)
-    {
-        LeaveCriticalSection(&rawinput_devices_cs);
-        return;
-    }
-
-    last_check = GetTickCount64();
-
-    /* destroy previous list */
-    for (idx = 0; idx < rawinput_devices_count; ++idx)
-    {
-        CloseHandle(rawinput_devices[idx].file);
-        heap_free(rawinput_devices[idx].path);
-    }
-    rawinput_devices_count = 0;
-
-    find_rawinput_devices_by_guid(&hid_guid);
-
-    /* HACK: also look up the xinput-specific devices */
-    hid_guid.Data4[7]++;
-    find_rawinput_devices_by_guid(&hid_guid);
 
     set = SetupDiGetClassDevsW(&GUID_DEVINTERFACE_MOUSE, NULL, NULL, DIGCF_DEVICEINTERFACE | DIGCF_PRESENT);
 
