From d1d236ff646669ab74b90b507ce24c26578c438c Mon Sep 17 00:00:00 2001
From: Tk-Glitch <ti3nou@gmail.com>
Date: Tue, 15 Mar 2022 11:02:36 +0100
Subject: Steamclient swap reverts for proton 7.0

diff --git a/dlls/ntdll/env.c b/dlls/ntdll/env.c
index 0353d6dc501..bb8931a556b 100644
--- a/dlls/ntdll/env.c
+++ b/dlls/ntdll/env.c
@@ -684,8 +684,3 @@ void init_user_process_params(void)
     set_wow64_environment( &new_params->Environment );
     new_params->EnvironmentSize = RtlSizeHeap( GetProcessHeap(), 0, new_params->Environment );
 }
-
-void __cdecl __wine_set_unix_env( const char *var, const char *val)
-{
-    unix_funcs->set_unix_env( var, val );
-}
diff --git a/dlls/ntdll/loader.c b/dlls/ntdll/loader.c
index 10201aa586d..d5655328ed1 100644
--- a/dlls/ntdll/loader.c
+++ b/dlls/ntdll/loader.c
@@ -84,7 +84,7 @@ const WCHAR system_dir[] = L"C:\\windows\\system32\\";
 HMODULE kernel32_handle = 0;
 
 /* system search path */
-static const WCHAR system_path[] = L"C:\\windows\\system32;C:\\windows\\system;C:\\windows;C:\\Program Files (x86)\\Steam";
+static const WCHAR system_path[] = L"C:\\windows\\system32;C:\\windows\\system;C:\\windows";
 
 static BOOL is_prefix_bootstrap;  /* are we bootstrapping the prefix? */
 static BOOL imports_fixup_done = FALSE;  /* set once the imports have been fixed up, before attaching them */
@@ -203,35 +203,6 @@ static inline BOOL contains_path( LPCWSTR name )
     return ((*name && (name[1] == ':')) || wcschr(name, '/') || wcschr(name, '\\'));
 }
 
-static char *crash_log;
-static size_t crash_log_len;
-
-static void append_to_crash_log(const char *fmt, ...)
-{
-    char buf[1024];
-    size_t len;
-    va_list ap;
-
-    va_start(ap, fmt);
-
-    vsnprintf(buf, sizeof(buf), fmt, ap);
-
-    va_end(ap);
-
-    len = (crash_log ? strlen(crash_log) : 0) + strlen(buf) + 1;
-
-    if(len > crash_log_len){
-        if(crash_log){
-            crash_log = RtlReAllocateHeap( GetProcessHeap(), HEAP_ZERO_MEMORY, crash_log, len );
-        }else{
-            crash_log = RtlAllocateHeap( GetProcessHeap(), HEAP_ZERO_MEMORY, len );
-        }
-        crash_log_len = len;
-    }
-
-    strcat(crash_log, buf);
-}
-
 #define RTL_UNLOAD_EVENT_TRACE_NUMBER 64
 
 typedef struct _RTL_UNLOAD_EVENT_TRACE
@@ -989,19 +960,11 @@ static BOOL import_dll( HMODULE module, const IMAGE_IMPORT_DESCRIPTOR *descr, LP
     if (status)
     {
         if (status == STATUS_DLL_NOT_FOUND)
-        {
             ERR("Library %s (which is needed by %s) not found\n",
                 name, debugstr_w(current_modref->ldr.FullDllName.Buffer));
-            append_to_crash_log("Library %s (which is needed by %s) not found\n",
-                name, debugstr_w(current_modref->ldr.FullDllName.Buffer));
-        }
         else
-        {
             ERR("Loading library %s (which is needed by %s) failed (error %x).\n",
                 name, debugstr_w(current_modref->ldr.FullDllName.Buffer), status);
-            append_to_crash_log("Loading library %s (which is needed by %s) failed (error %x).\n",
-                name, debugstr_w(current_modref->ldr.FullDllName.Buffer), status);
-        }
         return FALSE;
     }
 
@@ -2037,16 +2000,12 @@ static NTSTATUS build_module( LPCWSTR load_path, const UNICODE_STRING *nt_name,
                               DWORD flags, BOOL system, WINE_MODREF **pwm )
 {
     static const char builtin_signature[] = "Wine builtin DLL";
-    static HMODULE lsteamclient = NULL;
     char *signature = (char *)((IMAGE_DOS_HEADER *)*module + 1);
-    UNICODE_STRING lsteamclient_us;
     BOOL is_builtin;
     IMAGE_NT_HEADERS *nt;
     WINE_MODREF *wm;
     NTSTATUS status;
     SIZE_T map_size;
-    WCHAR *basename, *tmp;
-    ULONG basename_len;
 
     if (!(nt = RtlImageNtHeader( *module ))) return STATUS_INVALID_IMAGE_FORMAT;
 
@@ -2067,24 +2026,6 @@ static NTSTATUS build_module( LPCWSTR load_path, const UNICODE_STRING *nt_name,
 
     set_security_cookie( *module, map_size );
 
-    basename = nt_name->Buffer;
-    if ((tmp = wcsrchr(basename, '\\'))) basename = tmp + 1;
-    if ((tmp = wcsrchr(basename, '/'))) basename = tmp + 1;
-    basename_len = wcslen(basename);
-    if (basename_len >= 4 && !wcscmp(basename + basename_len - 4, L".dll")) basename_len -= 4;
-
-    if ((!RtlCompareUnicodeStrings(basename, basename_len, L"steamclient", 11, TRUE) ||
-         !RtlCompareUnicodeStrings(basename, basename_len, L"steamclient64", 13, TRUE) ||
-         !RtlCompareUnicodeStrings(basename, basename_len, L"gameoverlayrenderer", 19, TRUE) ||
-         !RtlCompareUnicodeStrings(basename, basename_len, L"gameoverlayrenderer64", 21, TRUE)) &&
-        RtlCreateUnicodeStringFromAsciiz(&lsteamclient_us, "lsteamclient.dll") &&
-        (lsteamclient || LdrLoadDll(load_path, 0, &lsteamclient_us, &lsteamclient) == STATUS_SUCCESS))
-    {
-        unix_funcs->steamclient_setup_trampolines( *module, lsteamclient );
-        wm->ldr.Flags |= LDR_DONT_RESOLVE_REFS;
-        flags |= DONT_RESOLVE_DLL_REFERENCES;
-    }
-
     /* fixup imports */
 
     if (!(flags & DONT_RESOLVE_DLL_REFERENCES) &&
@@ -4157,9 +4098,6 @@ void WINAPI LdrInitializeThunk( CONTEXT *context, ULONG_PTR unknown2, ULONG_PTR
         {
             ERR( "Importing dlls for %s failed, status %x\n",
                  debugstr_w(NtCurrentTeb()->Peb->ProcessParameters->ImagePathName.Buffer), status );
-            append_to_crash_log( "Importing dlls for %s failed, status %x\n",
-                 debugstr_w(NtCurrentTeb()->Peb->ProcessParameters->ImagePathName.Buffer), status );
-            unix_funcs->write_crash_log("missingmodule", crash_log);
             NtTerminateProcess( GetCurrentProcess(), status );
         }
         imports_fixup_done = TRUE;
diff --git a/dlls/ntdll/ntdll.spec b/dlls/ntdll/ntdll.spec
index e361fac3a3b..bd8e1f5efe6 100644
--- a/dlls/ntdll/ntdll.spec
+++ b/dlls/ntdll/ntdll.spec
@@ -1636,7 +1636,6 @@
 @ stdcall __wine_ctrl_routine(ptr)
 @ extern __wine_syscall_dispatcher
 @ extern -arch=i386 __wine_ldt_copy
-@ cdecl __wine_set_unix_env(ptr ptr)
 
 # Debugging
 @ stdcall -syscall -norelay __wine_dbg_write(ptr long)
diff --git a/dlls/ntdll/tests/exception.c b/dlls/ntdll/tests/exception.c
index 71d25fa3e93..488a5e94729 100644
--- a/dlls/ntdll/tests/exception.c
+++ b/dlls/ntdll/tests/exception.c
@@ -8446,6 +8446,7 @@ static void subtest_fastfail(unsigned int code)
 
     } while (de.dwDebugEventCode != EXIT_PROCESS_DEBUG_EVENT);
 
+    todo_wine
     ok(had_ff || broken(had_se) /* Win7 */, "fast fail did not occur\n");
 
     wait_child_process( pi.hProcess );
diff --git a/dlls/ntdll/unix/debug.c b/dlls/ntdll/unix/debug.c
index 66bdb3ca2e3..48fa65ece6d 100644
--- a/dlls/ntdll/unix/debug.c
+++ b/dlls/ntdll/unix/debug.c
@@ -362,51 +362,3 @@ NTSTATUS WINAPI NtSetDebugFilterState( ULONG component_id, ULONG level, BOOLEAN
 
     return STATUS_SUCCESS;
 }
-
-void CDECL write_crash_log(const char *log_type, const char *log_msg)
-{
-    const char *dir = getenv("WINE_CRASH_REPORT_DIR");
-    const char *sgi;
-    char timestr[32];
-    char name[MAX_PATH], *c;
-    time_t t;
-    struct tm lt;
-    int f;
-
-    if(!dir || dir[0] == 0)
-        return;
-
-    strcpy(name, dir);
-
-    for(c = name + 1; *c; ++c){
-        if(*c == '/'){
-            *c = 0;
-            mkdir(name, 0700);
-            *c = '/';
-        }
-    }
-    mkdir(name, 0700);
-
-    sgi = getenv("SteamGameId");
-
-    t = time(NULL);
-    localtime_r(&t, &lt);
-    strftime(timestr, ARRAY_SIZE(timestr), "%Y-%m-%d_%H:%M:%S", &lt);
-
-    /* /path/to/crash/reports/2021-05-18_13:21:15_appid-976310_crash.log */
-    snprintf(name, ARRAY_SIZE(name),
-            "%s/%s_appid-%s_%s.log",
-            dir,
-            timestr,
-            sgi ? sgi : "0",
-            log_type
-            );
-
-    f = open(name, O_CREAT | O_WRONLY, 0644);
-    if(f < 0)
-        return;
-
-    write(f, log_msg, strlen(log_msg));
-
-    close(f);
-}
diff --git a/dlls/ntdll/unix/env.c b/dlls/ntdll/unix/env.c
index fe14b48420d..5683882fa91 100644
--- a/dlls/ntdll/unix/env.c
+++ b/dlls/ntdll/unix/env.c
@@ -2617,9 +2617,3 @@ ULONG WINAPI RtlNtStatusToDosError( NTSTATUS status )
 
     return map_status( status );
 }
-
-void CDECL set_unix_env( const char *var, const char *val )
-{
-    if (!val) unsetenv(var);
-    else setenv(var, val, 1);
-}
diff --git a/dlls/ntdll/unix/loader.c b/dlls/ntdll/unix/loader.c
index badc36c3147..f3183edc398 100644
--- a/dlls/ntdll/unix/loader.c
+++ b/dlls/ntdll/unix/loader.c
@@ -2132,93 +2132,6 @@ static ULONG_PTR get_image_address(void)
 }
 
 
-static void *steamclient_srcs[128];
-static void *steamclient_tgts[128];
-static int steamclient_count;
-
-void *steamclient_handle_fault( LPCVOID addr, DWORD err )
-{
-    int i;
-
-    if (!(err & EXCEPTION_EXECUTE_FAULT)) return NULL;
-
-    for (i = 0; i < steamclient_count; ++i)
-    {
-        if (addr == steamclient_srcs[i])
-            return steamclient_tgts[i];
-    }
-
-    return NULL;
-}
-
-static void steamclient_write_jump(void *src_addr, void *tgt_addr)
-{
-#ifdef _WIN64
-    static const char mov[] = {0x48, 0xb8};
-#else
-    static const char mov[] = {0xb8};
-#endif
-    static const char jmp[] = {0xff, 0xe0};
-    memcpy(src_addr, mov, sizeof(mov));
-    memcpy((char *)src_addr + sizeof(mov), &tgt_addr, sizeof(tgt_addr));
-    memcpy((char *)src_addr + sizeof(mov) + sizeof(tgt_addr), jmp, sizeof(jmp));
-}
-
-static void CDECL steamclient_setup_trampolines(HMODULE src_mod, HMODULE tgt_mod)
-{
-    static int noexec_cached = -1;
-
-    SYSTEM_BASIC_INFORMATION info;
-    IMAGE_NT_HEADERS *src_nt = (IMAGE_NT_HEADERS *)((UINT_PTR)src_mod + ((IMAGE_DOS_HEADER *)src_mod)->e_lfanew);
-    IMAGE_NT_HEADERS *tgt_nt = (IMAGE_NT_HEADERS *)((UINT_PTR)tgt_mod + ((IMAGE_DOS_HEADER *)tgt_mod)->e_lfanew);
-    IMAGE_SECTION_HEADER *src_sec = (IMAGE_SECTION_HEADER *)(src_nt + 1);
-    const IMAGE_EXPORT_DIRECTORY *src_exp, *tgt_exp;
-    const DWORD *names;
-    SIZE_T size;
-    void *addr, *src_addr, *tgt_addr;
-    char *name, *wsne;
-    UINT_PTR page_mask;
-    int i;
-
-    if (noexec_cached == -1)
-        noexec_cached = (wsne = getenv("WINESTEAMNOEXEC")) && atoi(wsne);
-
-    virtual_get_system_info( &info, !!NtCurrentTeb()->WowTebOffset );
-    page_mask = info.PageSize - 1;
-
-    for (i = 0; i < src_nt->FileHeader.NumberOfSections; ++i)
-    {
-        if (memcmp(src_sec[i].Name, ".text", 5)) continue;
-        addr = (void *)(((UINT_PTR)src_mod + src_sec[i].VirtualAddress) & ~page_mask);
-        size = (src_sec[i].Misc.VirtualSize + page_mask) & ~page_mask;
-        if (noexec_cached) mprotect(addr, size, PROT_READ);
-        else mprotect(addr, size, PROT_READ|PROT_WRITE|PROT_EXEC);
-    }
-
-    src_exp = get_module_data_dir( src_mod, IMAGE_FILE_EXPORT_DIRECTORY, NULL );
-    tgt_exp = get_module_data_dir( tgt_mod, IMAGE_FILE_EXPORT_DIRECTORY, NULL );
-    names = (const DWORD *)((UINT_PTR)src_mod + src_exp->AddressOfNames);
-    for (i = 0; i < src_exp->NumberOfNames; ++i)
-    {
-        if (!names[i] || !(name = (char *)((UINT_PTR)src_mod + names[i]))) continue;
-        if (!(src_addr = (void *)find_named_export(src_mod, src_exp, name))) continue;
-        if (!(tgt_addr = (void *)find_named_export(tgt_mod, tgt_exp, name))) continue;
-        assert(steamclient_count < ARRAY_SIZE(steamclient_srcs));
-        steamclient_srcs[steamclient_count] = src_addr;
-        steamclient_tgts[steamclient_count] = tgt_addr;
-        if (!noexec_cached) steamclient_write_jump(src_addr, tgt_addr);
-        else steamclient_count++;
-    }
-
-    src_addr = (void *)((UINT_PTR)src_mod + src_nt->OptionalHeader.AddressOfEntryPoint);
-    tgt_addr = (void *)((UINT_PTR)tgt_mod + tgt_nt->OptionalHeader.AddressOfEntryPoint);
-    assert(steamclient_count < ARRAY_SIZE(steamclient_srcs));
-    steamclient_srcs[steamclient_count] = src_addr;
-    steamclient_tgts[steamclient_count] = tgt_addr;
-    if (!noexec_cached) steamclient_write_jump(src_addr, tgt_addr);
-    else steamclient_count++;
-}
-
 static BOOL report_native_pc_as_ntdll;

 static BOOL CDECL is_pc_in_native_so(void *pc)
@@ -2231,9 +2144,6 @@ static struct unix_funcs unix_funcs =
 #ifdef __aarch64__
     NtCurrentTeb,
 #endif
-    steamclient_setup_trampolines,
-    set_unix_env,
-    write_crash_log,
     is_pc_in_native_so,
 };
 
diff --git a/dlls/ntdll/unix/signal_arm.c b/dlls/ntdll/unix/signal_arm.c
index ff4dbedccac..02267e1c285 100644
--- a/dlls/ntdll/unix/signal_arm.c
+++ b/dlls/ntdll/unix/signal_arm.c
@@ -360,35 +360,6 @@ static inline WORD get_error_code( const ucontext_t *sigcontext )
 }
 
 
-/***********************************************************************
- *           get_udf_immediate
- *
- * Get the immediate operand if the PC is at a UDF instruction.
- */
-static inline int get_udf_immediate( const ucontext_t *sigcontext )
-{
-    if (CPSR_sig(sigcontext) & 0x20)
-    {
-        WORD thumb_insn = *(WORD *)PC_sig(sigcontext);
-        if ((thumb_insn >> 8) == 0xde) return thumb_insn & 0xff;
-        if ((thumb_insn & 0xfff0) == 0xf7f0)  /* udf.w */
-        {
-            WORD ext = *(WORD *)(PC_sig(sigcontext) + 2);
-            if ((ext & 0xf000) == 0xa000) return ((thumb_insn & 0xf) << 12) | (ext & 0x0fff);
-        }
-    }
-    else
-    {
-        DWORD arm_insn = *(DWORD *)PC_sig(sigcontext);
-        if ((arm_insn & 0xfff000f0) == 0xe7f000f0)
-        {
-            return ((arm_insn >> 4) & 0xfff0) | (arm_insn & 0xf);
-        }
-    }
-    return -1;
-}
-
-
 /***********************************************************************
  *           save_context
  *
@@ -644,32 +615,6 @@ static void setup_exception( ucontext_t *sigcontext, EXCEPTION_RECORD *rec )
 }
 
 
-/***********************************************************************
- *           raise_second_chance_exception
- *
- * Raise a second chance exception.
- */
-static void raise_second_chance_exception( ucontext_t *sigcontext, EXCEPTION_RECORD *rec )
-{
-    CONTEXT context;
-
-    rec->ExceptionAddress = (void *)PC_sig(sigcontext);
-    if (is_inside_syscall( sigcontext ))
-    {
-        /* Windows would bug check here */
-        ERR("Direct second chance exception code %x flags %x addr %p (inside syscall)\n",
-            rec->ExceptionCode, rec->ExceptionFlags, rec->ExceptionAddress );
-        NtTerminateProcess( NtCurrentProcess(), rec->ExceptionCode );
-    }
-    else
-    {
-        save_context( &context, sigcontext );
-        NtRaiseException( rec, &context, FALSE );
-        restore_context( &context, sigcontext );
-    }
-}
-
-
 /***********************************************************************
  *           call_user_apc_dispatcher
  */
@@ -871,23 +816,13 @@ static void segv_handler( int signal, siginfo_t *siginfo, void *sigcontext )
     switch (get_trap_code(signal, context))
     {
     case TRAP_ARM_PRIVINFLT:   /* Invalid opcode exception */
-        switch (get_udf_immediate( context ))
+        if (*(WORD *)PC_sig(context) == 0xdefe)  /* breakpoint */
         {
-        case 0xfb:  /* __fastfail */
-            rec.ExceptionCode = STATUS_STACK_BUFFER_OVERRUN;
-            rec.ExceptionFlags = EH_NONCONTINUABLE;
-            rec.NumberParameters = 1;
-            rec.ExceptionInformation[0] = REGn_sig( 0, context );
-            raise_second_chance_exception( context, &rec );
-            return;
-        case 0xfe:  /* breakpoint */
             rec.ExceptionCode = EXCEPTION_BREAKPOINT;
             rec.NumberParameters = 1;
             break;
-        default:
-            rec.ExceptionCode = EXCEPTION_ILLEGAL_INSTRUCTION;
-            break;
         }
+        rec.ExceptionCode = EXCEPTION_ILLEGAL_INSTRUCTION;
         break;
     case TRAP_ARM_PAGEFLT:  /* Page fault */
         rec.NumberParameters = 2;
diff --git a/dlls/ntdll/unix/signal_arm64.c b/dlls/ntdll/unix/signal_arm64.c
index ba3e3564c1a..7056adca171 100644
--- a/dlls/ntdll/unix/signal_arm64.c
+++ b/dlls/ntdll/unix/signal_arm64.c
@@ -656,32 +656,6 @@ static void setup_exception( ucontext_t *sigcontext, EXCEPTION_RECORD *rec )
 }
 
 
-/***********************************************************************
- *           raise_second_chance_exception
- *
- * Raise a second chance exception.
- */
-static void raise_second_chance_exception( ucontext_t *sigcontext, EXCEPTION_RECORD *rec )
-{
-    CONTEXT context;
-
-    rec->ExceptionAddress = (void *)PC_sig(sigcontext);
-    if (is_inside_syscall( sigcontext ))
-    {
-        /* Windows would bug check here */
-        ERR("Direct second chance exception code %x flags %x addr %p (inside syscall)\n",
-            rec->ExceptionCode, rec->ExceptionFlags, rec->ExceptionAddress );
-        NtTerminateProcess( NtCurrentProcess(), rec->ExceptionCode );
-    }
-    else
-    {
-        save_context( &context, sigcontext );
-        NtRaiseException( rec, &context, FALSE );
-        restore_context( &context, sigcontext );
-    }
-}
-
-
 /***********************************************************************
  *           call_user_apc_dispatcher
  */
@@ -938,7 +912,6 @@ static void bus_handler( int signal, siginfo_t *siginfo, void *sigcontext )
 static void trap_handler( int signal, siginfo_t *siginfo, void *sigcontext )
 {
     EXCEPTION_RECORD rec = { 0 };
-    ucontext_t *context = sigcontext;
 
     switch (siginfo->si_code)
     {
@@ -947,19 +920,6 @@ static void trap_handler( int signal, siginfo_t *siginfo, void *sigcontext )
         break;
     case TRAP_BRKPT:
     default:
-        /* debug exceptions do not update ESR on Linux, so we fetch the instruction directly. */
-        if (!(PSTATE_sig( context ) & 0x10) && /* AArch64 (not WoW) */
-            !(PC_sig( context ) & 3) &&
-            *(ULONG *)PC_sig( context ) == 0xd43e0060UL) /* brk #0xf003 */
-        {
-            /* __fastfail */
-            rec.ExceptionCode = STATUS_STACK_BUFFER_OVERRUN;
-            rec.ExceptionFlags = EH_NONCONTINUABLE;
-            rec.NumberParameters = 1;
-            rec.ExceptionInformation[0] = REGn_sig( 0, context );
-            raise_second_chance_exception( context, &rec );
-            return;
-        }
         rec.ExceptionCode = EXCEPTION_BREAKPOINT;
         rec.NumberParameters = 1;
         break;
diff --git a/dlls/ntdll/unix/signal_i386.c b/dlls/ntdll/unix/signal_i386.c
index a0afd33ea13..ea31d55f38d 100644
--- a/dlls/ntdll/unix/signal_i386.c
+++ b/dlls/ntdll/unix/signal_i386.c
@@ -1502,30 +1502,6 @@ static void setup_exception( ucontext_t *sigcontext, EXCEPTION_RECORD *rec )
     setup_raise_exception( sigcontext, stack, rec, &xcontext );
 }
 
-/***********************************************************************
- *           raise_second_chance_exception
- *
- * Raise a second chance exception.
- */
-static void raise_second_chance_exception( ucontext_t *sigcontext, EXCEPTION_RECORD *rec, struct xcontext *xcontext )
-{
-    rec->ExceptionAddress = (void *)EIP_sig( sigcontext );
-    if (is_inside_syscall( sigcontext ))
-    {
-        /* Windows would bug check here */
-        WINE_ERR("Direct second chance exception code %x flags %x addr %p (inside syscall)\n",
-                 rec->ExceptionCode, rec->ExceptionFlags, rec->ExceptionAddress );
-        NtTerminateProcess( NtCurrentProcess(), rec->ExceptionCode );
-    }
-    else
-    {
-        save_context( xcontext, sigcontext );
-        NtRaiseException( rec, &xcontext->c, FALSE );
-        restore_context( xcontext, sigcontext );
-    }
-}
-
-
 /* stack layout when calling an user apc function.
  * FIXME: match Windows ABI. */
 struct apc_stack_layout
@@ -1825,21 +1801,8 @@ static void segv_handler( int signal, siginfo_t *siginfo, void *sigcontext )
     EXCEPTION_RECORD rec = { 0 };
     struct xcontext xcontext;
     ucontext_t *ucontext = sigcontext;
-    void *steamclient_addr = NULL;
-    void *stack;
-
-    if (TRAP_sig(ucontext) == TRAP_x86_PROTFLT && ERROR_sig(ucontext) == ((0x29 << 3) | 2))
-    {
-        /* __fastfail: process state is corrupted - skip setup_exception_record */
-        rec.ExceptionCode = STATUS_STACK_BUFFER_OVERRUN;
-        rec.ExceptionFlags = EH_NONCONTINUABLE;
-        rec.NumberParameters = 1;
-        rec.ExceptionInformation[0] = ECX_sig( ucontext );
-        raise_second_chance_exception( ucontext, &rec, &xcontext );
-        return;
-    }
+    void *stack = setup_exception_record( sigcontext, &rec, &xcontext );
 
-    stack = setup_exception_record( sigcontext, &rec, &xcontext );
     switch (TRAP_sig(ucontext))
     {
     case TRAP_x86_OFLOW:   /* Overflow exception */
@@ -1873,12 +1836,6 @@ static void segv_handler( int signal, siginfo_t *siginfo, void *sigcontext )
         }
         break;
     case TRAP_x86_PAGEFLT:  /* Page fault */
-        if ((steamclient_addr = steamclient_handle_fault( siginfo->si_addr, (ERROR_sig(ucontext) >> 1) & 0x09 )))
-        {
-            EIP_sig(ucontext) = (intptr_t)steamclient_addr;
-            return;
-        }
-
         rec.NumberParameters = 2;
         rec.ExceptionInformation[0] = (ERROR_sig(ucontext) >> 1) & 0x09;
         rec.ExceptionInformation[1] = (ULONG_PTR)siginfo->si_addr;
diff --git a/dlls/ntdll/unix/signal_x86_64.c b/dlls/ntdll/unix/signal_x86_64.c
index b1cc682649b..fb39053e6b9 100644
--- a/dlls/ntdll/unix/signal_x86_64.c
+++ b/dlls/ntdll/unix/signal_x86_64.c
@@ -2226,30 +2226,6 @@ static void setup_exception( ucontext_t *sigcontext, EXCEPTION_RECORD *rec )
 }
 
 
-/***********************************************************************
- *           raise_second_chance_exception
- *
- * Raise a second chance exception.
- */
-static void raise_second_chance_exception( ucontext_t *sigcontext, EXCEPTION_RECORD *rec, struct xcontext *xcontext )
-{
-    rec->ExceptionAddress = (void *)RIP_sig(sigcontext);
-    if (is_inside_syscall( sigcontext ))
-    {
-        /* Windows would bug check here */
-        ERR("Direct second chance exception code %x flags %x addr %p (inside syscall)\n",
-            rec->ExceptionCode, rec->ExceptionFlags, rec->ExceptionAddress );
-        NtTerminateProcess( NtCurrentProcess(), rec->ExceptionCode );
-    }
-    else
-    {
-        save_context( xcontext, sigcontext );
-        NtRaiseException( rec, &xcontext->c, FALSE );
-        restore_context( xcontext, sigcontext );
-    }
-}
-
-
 /***********************************************************************
  *           call_user_apc_dispatcher
  */
@@ -2854,18 +2830,6 @@ static void segv_handler( int signal, siginfo_t *siginfo, void *sigcontext )
     EXCEPTION_RECORD rec = { 0 };
     struct xcontext context;
     ucontext_t *ucontext = sigcontext;
-    void *steamclient_addr = NULL;
-
-    if (TRAP_sig(ucontext) == TRAP_x86_PROTFLT && ERROR_sig(ucontext) == ((0x29 << 3) | 2))
-    {
-        /* __fastfail: process state is corrupted */
-        rec.ExceptionCode = STATUS_STACK_BUFFER_OVERRUN;
-        rec.ExceptionFlags = EH_NONCONTINUABLE;
-        rec.NumberParameters = 1;
-        rec.ExceptionInformation[0] = RCX_sig( ucontext );
-        raise_second_chance_exception( ucontext, &rec, &context );
-        return;
-    }
 
     rec.ExceptionAddress = (void *)RIP_sig(ucontext);
     save_context( &context, sigcontext );
@@ -2897,12 +2861,6 @@ static void segv_handler( int signal, siginfo_t *siginfo, void *sigcontext )
         }
         break;
     case TRAP_x86_PAGEFLT:  /* Page fault */
-        if ((steamclient_addr = steamclient_handle_fault( siginfo->si_addr, (ERROR_sig(ucontext) >> 1) & 0x09 )))
-        {
-            RIP_sig(ucontext) = (intptr_t)steamclient_addr;
-            return;
-        }
-
         rec.NumberParameters = 2;
         rec.ExceptionInformation[0] = (ERROR_sig(ucontext) >> 1) & 0x09;
         rec.ExceptionInformation[1] = (ULONG_PTR)siginfo->si_addr;
diff --git a/dlls/ntdll/unix/unix_private.h b/dlls/ntdll/unix/unix_private.h
index 4bf0e7cb84e..d2a188747ea 100644
--- a/dlls/ntdll/unix/unix_private.h
+++ b/dlls/ntdll/unix/unix_private.h
@@ -199,9 +199,6 @@ extern NTSTATUS alloc_object_attributes( const OBJECT_ATTRIBUTES *attr, struct o
 
 extern void *anon_mmap_fixed( void *start, size_t size, int prot, int flags ) DECLSPEC_HIDDEN;
 extern void *anon_mmap_alloc( size_t size, int prot ) DECLSPEC_HIDDEN;
-
-extern void *steamclient_handle_fault( LPCVOID addr, DWORD err ) DECLSPEC_HIDDEN;
-
 extern void virtual_init(void) DECLSPEC_HIDDEN;
 extern ULONG_PTR get_system_affinity_mask(void) DECLSPEC_HIDDEN;
 extern void virtual_get_system_info( SYSTEM_BASIC_INFORMATION *info, BOOL wow64 ) DECLSPEC_HIDDEN;
@@ -295,9 +292,6 @@ extern void call_raise_user_exception_dispatcher(void) DECLSPEC_HIDDEN;
 
 #define IMAGE_DLLCHARACTERISTICS_PREFER_NATIVE 0x0010 /* Wine extension */
 
-extern void CDECL set_unix_env(const char *var, const char *val) DECLSPEC_HIDDEN;
-extern void CDECL write_crash_log(const char *log_type, const char *log_msg) DECLSPEC_HIDDEN;
-
 #define TICKSPERSEC 10000000
 #define SECS_1601_TO_1970  ((369 * 365 + 89) * (ULONGLONG)86400)
 
diff --git a/dlls/ntdll/unixlib.h b/dlls/ntdll/unixlib.h
index a99ba072b03..cb184431f82 100644
--- a/dlls/ntdll/unixlib.h
+++ b/dlls/ntdll/unixlib.h
@@ -40,11 +40,6 @@ struct unix_funcs
 #ifdef __aarch64__
     TEB *         (WINAPI *NtCurrentTeb)(void);
 #endif
-
-    /* steamclient HACK */
-    void          (CDECL *steamclient_setup_trampolines)( HMODULE src_mod, HMODULE tgt_mod );
-    void          (CDECL *set_unix_env)( const char *var, const char *val );
-    void          (CDECL *write_crash_log)( const char *log_type, const char *log_msg );
     BOOL          (CDECL *is_pc_in_native_so)( void *pc );
 };
 
 #endif /* __NTDLL_UNIXLIB_H */
diff --git a/include/wine/debug.h b/include/wine/debug.h
index 4015a0992e8..58f92754164 100644
--- a/include/wine/debug.h
+++ b/include/wine/debug.h
@@ -149,7 +149,6 @@ extern const char * __cdecl __wine_dbg_strdup( const char *str );
 extern int __cdecl __wine_dbg_output( const char *str );
 extern int __cdecl __wine_dbg_header( enum __wine_debug_class cls, struct __wine_debug_channel *channel,
                                       const char *function );
-extern void __cdecl __wine_set_unix_env( const char *var, const char *val );
 
 /*
  * Exported definitions and macros
diff --git a/programs/winebrowser/main.c b/programs/winebrowser/main.c
index df3f7425d65..913c0a8d672 100644
--- a/programs/winebrowser/main.c
+++ b/programs/winebrowser/main.c
@@ -63,17 +63,6 @@ static char *strdup_unixcp( const WCHAR *str )
     return ret;
 }
 
-static void restore_system_environment(void)
-{
-    const char* orig_ld_path = getenv("ORIG_LD_LIBRARY_PATH");
-
-    if (orig_ld_path)
-    {
-        __wine_set_unix_env("LD_LIBRARY_PATH", orig_ld_path);
-        __wine_set_unix_env("ORIG_LD_LIBRARY_PATH", NULL);
-    }
-}
-
 /* try to launch a unix app from a comma separated string of app names */
 static int launch_app( const WCHAR *candidates, const WCHAR *argv1 )
 {
@@ -83,11 +72,6 @@ static int launch_app( const WCHAR *candidates, const WCHAR *argv1 )
 
     if (!(cmdline = strdup_unixcp( argv1 ))) return 1;
 
-    /* PROTON HACK: Restore ORIG_LD_LIBRARY_PATH to LD_LIBRARY_PATH.
-     * System programs may not work correctly with our libraries, in
-     * particular gio on Ubuntu 19.04 is broken by our libgio. */
-    restore_system_environment();
-
     while (*candidates)
     {
         WCHAR **args = CommandLineToArgvW( candidates, &count );
